<Type Name="Graphics" FullName="System.Drawing.Graphics">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="56e3c9af5ffc5121a0ba13ff7dff3c80c84161ba" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39865600" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Graphics : MarshalByRefObject, IDisposable, System.Drawing.IDeviceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Graphics extends System.MarshalByRefObject implements class System.Drawing.IDeviceContext, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Graphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Graphics&#xA;Inherits MarshalByRefObject&#xA;Implements IDeviceContext, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Graphics sealed : MarshalByRefObject, IDisposable, System::Drawing::IDeviceContext" />
  <TypeSignature Language="F#" Value="type Graphics = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable&#xA;    interface IDeviceContext" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Drawing.IDeviceContext</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Incapsula una superficie di disegno GDI+. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Graphics> classe fornisce metodi per disegnare oggetti sulla periferica di visualizzazione. Oggetto <xref:System.Drawing.Graphics> è associato un contesto di dispositivo specifico.  
  
 È possibile ottenere un <xref:System.Drawing.Graphics> chiamando il <xref:System.Windows.Forms.Control.CreateGraphics%2A?displayProperty=nameWithType> metodo in un oggetto che eredita da <xref:System.Windows.Forms.Control?displayProperty=nameWithType>, o mediante la gestione di un controllo <xref:System.Windows.Forms.Control.Paint?displayProperty=nameWithType> evento e l'accesso il <xref:System.Windows.Forms.PaintEventArgs.Graphics%2A> proprietà del <xref:System.Windows.Forms.PaintEventArgs?displayProperty=nameWithType> classe. È anche possibile creare un <xref:System.Drawing.Graphics> oggetti da un'immagine utilizzando il <xref:System.Drawing.Graphics.FromImage%2A> (metodo). Per altre informazioni sulla creazione di un <xref:System.Drawing.Graphics> oggetti, vedere [procedura: creare oggetti Graphics per disegnare](~/docs/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing.md).  
  
 È possibile disegnare molte forme diverse e le righe usando un <xref:System.Drawing.Graphics> oggetto. Per altre informazioni su come creare linee e forme, vedere le specifiche `Draw` *ElementoGrafico* metodo per la riga o la forma da disegnare. Questi metodi includono <xref:System.Drawing.Graphics.DrawLine%2A>, <xref:System.Drawing.Graphics.DrawArc%2A>, <xref:System.Drawing.Graphics.DrawClosedCurve%2A>, <xref:System.Drawing.Graphics.DrawPolygon%2A>, e <xref:System.Drawing.Graphics.DrawRectangle%2A>. Per altre informazioni su come creare linee e forme, vedere [usando un oggetto Pen per disegnare linee e forme](~/docs/framework/winforms/advanced/using-a-pen-to-draw-lines-and-shapes.md) e [con un pennello per riempire forme](~/docs/framework/winforms/advanced/using-a-brush-to-fill-shapes.md).  
  
 È anche possibile disegnare immagini e icone con il <xref:System.Drawing.Graphics.DrawImage%2A> e <xref:System.Drawing.Graphics.DrawIcon%2A> metodi, rispettivamente. Per eseguire un trasferimento a blocchi di bit dei dati relativi al colore dalla schermata alla superficie di disegno del <xref:System.Drawing.Graphics> oggetti, vedere <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Per altre informazioni su come disegnare immagini con un <xref:System.Drawing.Graphics> oggetti, vedere [utilizzo di immagini, bitmap, icone e metafile](~/docs/framework/winforms/advanced/working-with-images-bitmaps-icons-and-metafiles.md).  
  
 Inoltre, è possibile modificare il sistema di coordinate utilizzato dal <xref:System.Drawing.Graphics> oggetto. Per altre informazioni sul sistema di coordinate e su come modificarlo, vedere [sistemi di Coordinate e trasformazioni](~/docs/framework/winforms/advanced/coordinate-systems-and-transformations.md).  
  
   
  
## Examples  
 Esempio di codice seguente è progettata per l'uso con Windows Form e richiede un <xref:System.Windows.Forms.PaintEventArgs> oggetto. Il <xref:System.Windows.Forms.PaintEventArgs> oggetto è denominato `e` ed è un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG. Il file è denominato SampImag e si trova nella cartella dell'esempio.  
  
-   Crea un punto in cui disegnare l'angolo superiore sinistro dell'immagine.  
  
-   Disegna l'immagine ridimensionata alla schermata utilizzando una <xref:System.Drawing.Graphics> oggetto.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddMetafileComment">
      <MemberSignature Language="C#" Value="public void AddMetafileComment (byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetafileComment(unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.AddMetafileComment(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddMetafileComment (data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddMetafileComment(cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.AddMetafileComment : byte[] -&gt; unit" Usage="graphics.AddMetafileComment data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="data">Matrice di byte contenente il commento.</param>
        <summary>Aggiunge un commento all'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è valido solo se l'oggetto <xref:System.Drawing.Graphics> è associato un <xref:System.Drawing.Imaging.Metafile>.  
  
   
  
## Examples  
 Il codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, che è un parametro del <xref:System.Windows.Forms.Control.Paint> gestore evento, nonché `thisForm`, il <xref:System.Windows.Forms.Form> per l'esempio. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una variabile temporanea <xref:System.Drawing.Graphics> della creazione del metafile e ottiene un `hdc`, un handle per il contesto di dispositivo.  
  
-   Crea un nuovo metafile usando il `hdc`.  
  
-   Crea una <xref:System.Drawing.Graphics> per visualizzare il metafile dal <xref:System.Drawing.Imaging.Metafile>.  
  
-   Disegna un rettangolo al metafile.  
  
-   Aggiunge un commento al metafile.  
  
-   Elimina il <xref:System.Drawing.Graphics> del metafile, che chiude il metafile.  
  
-   Elimina il metafile.  
  
-   Rilascia il file temporaneo `hdc`.  
  
-   Elimina il file temporaneo <xref:System.Drawing.Graphics>.  
  
-   Crea un metafile secondo dal file creato in precedenza.  
  
-   Disegna metafile sullo schermo.  
  
-   Elimina il metafile.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginContainer">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Salva un contenitore grafico con lo stato corrente di questo oggetto <see cref="T:System.Drawing.Graphics" /> e apre e usa un nuovo contenitore grafico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer () As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer();" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : unit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Salva un contenitore grafico con lo stato corrente di questo oggetto <see cref="T:System.Drawing.Graphics" /> e apre e usa un nuovo contenitore grafico.</summary>
        <returns>Questo metodo restituisce un oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> che rappresenta lo stato di questo oggetto <see cref="T:System.Drawing.Graphics" /> al momento della chiamata del metodo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo con il <xref:System.Drawing.Graphics.EndContainer%2A> metodo per creare contenitori di grafica annidati. Contenitori di grafica mantengono lo stato di grafica, ad esempio trasformazione, l'area di visualizzazione e le proprietà per il rendering.  
  
 Quando si chiama il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo di un <xref:System.Drawing.Graphics>, un blocco di informazioni che contiene lo stato del <xref:System.Drawing.Graphics> viene inserito in uno stack. Il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo restituisce un <xref:System.Drawing.Drawing2D.GraphicsContainer> che identifica il blocco di informazioni. Quando si passa l'oggetto di identificazione per il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, il blocco di informazioni viene rimossa dallo stack e viene usato per ripristinare il <xref:System.Drawing.Graphics> allo stato di cui si trovava al momento del <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo.  
  
 I contenitori possono essere annidati. vale a dire, è possibile chiamare il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo più volte prima di chiamare il <xref:System.Drawing.Graphics.EndContainer%2A> (metodo). Ogni volta che si chiama il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo, viene inserito un blocco di informazioni sullo stack e si riceve un <xref:System.Drawing.Drawing2D.GraphicsContainer> per il blocco di informazioni. Quando si passa uno di questi oggetti per il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, il <xref:System.Drawing.Graphics> viene restituito lo stato in cui si trovava al momento della <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo che ha restituito quel particolare <xref:System.Drawing.Drawing2D.GraphicsContainer>. Il blocco di informazioni inserite nello stack da tale <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo viene rimosso dallo stack e inseriti tutti i blocchi di informazioni sullo stack in seguito <xref:System.Drawing.Graphics.BeginContainer%2A> vengono rimossi anche chiamata al metodo.  
  
 Le chiamate al <xref:System.Drawing.Graphics.Save%2A> blocchi di informazioni sul posto di metodo sullo stesso stack come chiamate al <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo). Proprio come un <xref:System.Drawing.Graphics.EndContainer%2A> chiamata al metodo è associata a un <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo, una <xref:System.Drawing.Graphics.Restore%2A> chiamata al metodo è associata a un <xref:System.Drawing.Graphics.Save%2A> chiamata al metodo.  
  
 Quando si chiama il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, tutti i blocchi di informazioni posizionato sullo stack di (dal <xref:System.Drawing.Graphics.Save%2A> (metodo) o tramite il <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo)) dopo la chiamata corrispondente al <xref:System.Drawing.Graphics.BeginContainer%2A> metodo vengono rimossi dallo stack. Allo stesso modo, quando si chiama il <xref:System.Drawing.Graphics.Restore%2A> metodo, tutti i blocchi di informazioni posizionato sullo stack di (dal <xref:System.Drawing.Graphics.Save%2A> (metodo) o tramite il <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo)) dopo la chiamata corrispondente al <xref:System.Drawing.Graphics.Save%2A> metodo vengono rimossi dallo stack.  
  
 Lo stato di grafica stabilita dal <xref:System.Drawing.Graphics.BeginContainer%2A> metodo include la qualità di rendering dello stato predefinito; le modifiche di stato di qualità di rendering esistente quando viene chiamato il metodo vengono reimpostate sui valori predefiniti.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Apre un nuovo contenitore grafico e Salva il contenitore precedente.  
  
-   Converte le coordinate world nel contenitore.  
  
-   Viene compilato un rettangolo rosso il (convertite le coordinate del) nuovo contenitore.  
  
-   Chiude il nuovo contenitore e ripristina il contenitore salvato.  
  
-   Riempimento di un rettangolo verde (in corrispondenza delle coordinate non convertita) del contenitore salvato.  
  
 Il risultato è un rettangolo verde sovrapposto a un rettangolo rosso delle stesse dimensioni.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.Rectangle dstrect, System.Drawing.Rectangle srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.Rectangle dstrect, valuetype System.Drawing.Rectangle srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As Rectangle, srcrect As Rectangle, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::Rectangle dstrect, System::Drawing::Rectangle srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcrect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">Struttura <see cref="T:System.Drawing.Rectangle" /> che, insieme al parametro <c>srcrect</c>, specifica una trasformazione in scala per il contenitore.</param>
        <param name="srcrect">Struttura <see cref="T:System.Drawing.Rectangle" /> che, insieme al parametro <c>dstrect</c>, specifica una trasformazione in scala per il contenitore.</param>
        <param name="unit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura del contenitore.</param>
        <summary>Salva un contenitore grafico con lo stato corrente di questo oggetto <see cref="T:System.Drawing.Graphics" /> e apre e usa un nuovo contenitore grafico con la trasformazione in scala specificata.</summary>
        <returns>Questo metodo restituisce un oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> che rappresenta lo stato di questo oggetto <see cref="T:System.Drawing.Graphics" /> al momento della chiamata del metodo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo con il <xref:System.Drawing.Graphics.EndContainer%2A> metodo per creare contenitori di grafica annidati. Contenitori di grafica mantengono lo stato di grafica, ad esempio trasformazione, l'area di visualizzazione e le proprietà per il rendering.  
  
 Quando si chiama il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo di un <xref:System.Drawing.Graphics>, un blocco di informazioni che contiene lo stato del <xref:System.Drawing.Graphics> viene inserito in uno stack. Il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo restituisce un <xref:System.Drawing.Drawing2D.GraphicsContainer> che identifica il blocco di informazioni. Quando si passa l'oggetto di identificazione per il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, il blocco di informazioni viene rimossa dallo stack e viene usato per ripristinare il <xref:System.Drawing.Graphics> allo stato di cui si trovava al momento del <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo.  
  
 I contenitori possono essere annidati. vale a dire, è possibile chiamare il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo più volte prima di chiamare il <xref:System.Drawing.Graphics.EndContainer%2A> (metodo). Ogni volta che si chiama il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo, viene inserito un blocco di informazioni sullo stack e si riceve un <xref:System.Drawing.Drawing2D.GraphicsContainer> per il blocco di informazioni. Quando si passa uno di questi oggetti per il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, il <xref:System.Drawing.Graphics> viene restituito lo stato in cui si trovava al momento della <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo che ha restituito quel particolare <xref:System.Drawing.Drawing2D.GraphicsContainer>. Il blocco di informazioni inserite nello stack da tale <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo viene rimosso dallo stack e inseriti tutti i blocchi di informazioni sullo stack in seguito <xref:System.Drawing.Graphics.BeginContainer%2A> vengono rimossi anche chiamata al metodo.  
  
 Le chiamate al <xref:System.Drawing.Graphics.Save%2A> blocchi di informazioni sul posto di metodo sullo stesso stack come chiamate al <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo). Proprio come un <xref:System.Drawing.Graphics.EndContainer%2A> chiamata al metodo è associata a un <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo, una <xref:System.Drawing.Graphics.Restore%2A> chiamata al metodo è associata a un <xref:System.Drawing.Graphics.Save%2A> chiamata al metodo.  
  
 Quando si chiama il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, tutti i blocchi di informazioni posizionato sullo stack di (dal <xref:System.Drawing.Graphics.Save%2A> (metodo) o tramite il <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo)) dopo la chiamata corrispondente al <xref:System.Drawing.Graphics.BeginContainer%2A> metodo vengono rimossi dallo stack. Allo stesso modo, quando si chiama il <xref:System.Drawing.Graphics.Restore%2A> metodo, tutti i blocchi di informazioni posizionato sullo stack di (dal <xref:System.Drawing.Graphics.Save%2A> (metodo) o tramite il <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo)) dopo la chiamata corrispondente al <xref:System.Drawing.Graphics.Save%2A> metodo vengono rimossi dallo stack.  
  
 Questo metodo consente di specificare una trasformazione in scala per il nuovo contenitore grafico con il `dstrect` e `srcrect` parametri. La scala è uguale alla trasformazione che, quando applicato a `srcrect`, comporta `dstrect`.  
  
 Lo stato di grafica stabilita dal <xref:System.Drawing.Graphics.BeginContainer%2A> metodo include la qualità di rendering dello stato predefinito; le modifiche di stato di qualità di rendering esistente quando viene chiamato il metodo vengono reimpostate sui valori predefiniti.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea due rettangoli per specificare una trasformazione in scala per il nuovo contenitore.  
  
-   Apre il nuovo contenitore grafico e Salva il contenitore precedente.  
  
-   Viene compilato un rettangolo rosso il (le coordinate scalate il) nuovo contenitore.  
  
-   Chiude il nuovo contenitore e ripristina il contenitore salvato.  
  
-   Riempimento di un rettangolo verde (in corrispondenza delle coordinate non ridimensionato) del contenitore salvato.  
  
 Il risultato è un rettangolo verde sovrapposto a un rettangolo rosso più piccolo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginContainer">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsContainer BeginContainer (System.Drawing.RectangleF dstrect, System.Drawing.RectangleF srcrect, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsContainer BeginContainer(valuetype System.Drawing.RectangleF dstrect, valuetype System.Drawing.RectangleF srcrect, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginContainer (dstrect As RectangleF, srcrect As RectangleF, unit As GraphicsUnit) As GraphicsContainer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsContainer ^ BeginContainer(System::Drawing::RectangleF dstrect, System::Drawing::RectangleF srcrect, System::Drawing::GraphicsUnit unit);" />
      <MemberSignature Language="F#" Value="member this.BeginContainer : System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; System.Drawing.Drawing2D.GraphicsContainer" Usage="graphics.BeginContainer (dstrect, srcrect, unit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dstrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcrect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="dstrect">Struttura <see cref="T:System.Drawing.RectangleF" /> che, insieme al parametro <c>srcrect</c>, specifica una trasformazione in scala per il nuovo contenitore grafico.</param>
        <param name="srcrect">Struttura <see cref="T:System.Drawing.RectangleF" /> che, insieme al parametro <c>dstrect</c>, specifica una trasformazione in scala per il nuovo contenitore grafico.</param>
        <param name="unit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura del contenitore.</param>
        <summary>Salva un contenitore grafico con lo stato corrente di questo oggetto <see cref="T:System.Drawing.Graphics" /> e apre e usa un nuovo contenitore grafico con la trasformazione in scala specificata.</summary>
        <returns>Questo metodo restituisce un oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> che rappresenta lo stato di questo oggetto <see cref="T:System.Drawing.Graphics" /> al momento della chiamata del metodo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo con il <xref:System.Drawing.Graphics.EndContainer%2A> metodo per creare contenitori di grafica annidati. Contenitori di grafica mantengono lo stato di grafica, ad esempio trasformazione, l'area di visualizzazione e le proprietà per il rendering.  
  
 Quando si chiama il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo di un <xref:System.Drawing.Graphics>, un blocco di informazioni che contiene lo stato del <xref:System.Drawing.Graphics> viene inserito in uno stack. Il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo restituisce un <xref:System.Drawing.Drawing2D.GraphicsContainer> che identifica il blocco di informazioni. Quando si passa l'oggetto di identificazione per il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, il blocco di informazioni viene rimossa dallo stack e viene usato per ripristinare il <xref:System.Drawing.Graphics> allo stato di cui si trovava al momento del <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo.  
  
 I contenitori possono essere annidati. vale a dire, è possibile chiamare il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo più volte prima di chiamare il <xref:System.Drawing.Graphics.EndContainer%2A> (metodo). Ogni volta che si chiama il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo, viene inserito un blocco di informazioni sullo stack e si riceve un <xref:System.Drawing.Drawing2D.GraphicsContainer> per il blocco di informazioni. Quando si passa uno di questi oggetti per il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, il <xref:System.Drawing.Graphics> viene restituito lo stato in cui si trovava al momento della <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo che ha restituito quel particolare <xref:System.Drawing.Drawing2D.GraphicsContainer>. Il blocco di informazioni inserite nello stack da tale <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo viene rimosso dallo stack e inseriti tutti i blocchi di informazioni sullo stack in seguito <xref:System.Drawing.Graphics.BeginContainer%2A> vengono rimossi anche chiamata al metodo.  
  
 Le chiamate al <xref:System.Drawing.Graphics.Save%2A> blocchi di informazioni sul posto di metodo sullo stesso stack come chiamate al <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo). Proprio come un <xref:System.Drawing.Graphics.EndContainer%2A> chiamata al metodo è associata a un <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo, una <xref:System.Drawing.Graphics.Restore%2A> chiamata al metodo è associata a un <xref:System.Drawing.Graphics.Save%2A> chiamata al metodo.  
  
 Quando si chiama il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, tutti i blocchi di informazioni posizionato sullo stack di (dal `Save` (metodo) o tramite il <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo)) dopo la chiamata corrispondente al <xref:System.Drawing.Graphics.BeginContainer%2A> metodo vengono rimossi dallo stack. Allo stesso modo, quando si chiama il <xref:System.Drawing.Graphics.Restore%2A> metodo, tutti i blocchi di informazioni posizionato sullo stack di (dal <xref:System.Drawing.Graphics.Save%2A> (metodo) o tramite il <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo)) dopo la chiamata corrispondente al <xref:System.Drawing.Graphics.Save%2A> metodo vengono rimossi dallo stack.  
  
 Questo metodo consente di specificare una trasformazione in scala per il nuovo contenitore grafico con il `dstrect` e `srcrect` parametri. La scala è uguale alla trasformazione che, quando applicato a `srcrect`, comporta `dstrect`.  
  
 Lo stato di grafica stabilita dal <xref:System.Drawing.Graphics.BeginContainer%2A> metodo include la qualità di rendering dello stato predefinito; le modifiche di stato di qualità di rendering esistente quando viene chiamato il metodo vengono reimpostate sui valori predefiniti.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea due rettangoli per specificare una trasformazione in scala per il nuovo contenitore.  
  
-   Apre il nuovo contenitore grafico e Salva il contenitore precedente.  
  
-   Viene compilato un rettangolo rosso il (le coordinate scalate il) nuovo contenitore.  
  
-   Chiude il nuovo contenitore e ripristina il contenitore salvato.  
  
-   Riempimento di un rettangolo verde (in corrispondenza delle coordinate non ridimensionato) del contenitore salvato.  
  
 Il risultato è un rettangolo verde sovrapposto a un rettangolo rosso più piccolo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Clear(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.Clear : System.Drawing.Color -&gt; unit" Usage="graphics.Clear color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">Struttura <see cref="T:System.Drawing.Color" /> che rappresenta il colore di sfondo della superficie di disegno.</param>
        <summary>Cancella il contenuto dell'intera superficie di disegno e la riempie con il colore di sfondo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Graphics.Clear%2A> metodo cancella lo stato dell'oggetto grafico e non deve essere chiamato quando l'oggetto graphics non può essere aggiornato. Ad esempio, se il <xref:System.Drawing.Graphics.Clear%2A> viene chiamato su un desktop protetto in una sessione di terminal server, un' <xref:System.Runtime.InteropServices.ExternalException> può verificarsi, lasciando il <xref:System.Drawing.Graphics> oggetto in uno stato incoerente.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice cancella la superficie di disegno del <xref:System.Drawing.Graphics> e imposta il colore di sfondo sul colore verde acqua definito dal sistema.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Clip" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Clip { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Drawing.Region with get, set" Usage="System.Drawing.Graphics.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un oggetto <see cref="T:System.Drawing.Region" /> che limita l'area di disegno di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Oggetto <see cref="T:System.Drawing.Region" /> che limita la parte di questo oggetto <see cref="T:System.Drawing.Graphics" /> attualmente disponibile per il disegno.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modifica il <xref:System.Drawing.Region> oggetto restituito dal <xref:System.Drawing.Graphics.Clip%2A> proprietà influisce sul disegno successive con il <xref:System.Drawing.Graphics> oggetto. Per modificare l'area di ritaglio, sostituire il <xref:System.Drawing.Graphics.Clip%2A> con un nuovo valore della proprietà <xref:System.Drawing.Region> oggetto. Per determinare se l'area di ritaglio è infinito, recuperare il <xref:System.Drawing.Graphics.Clip%2A> proprietà e chiamare relativo <xref:System.Drawing.Region.IsInfinite%2A> (metodo).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Drawing.Graphics.Clip%2A> proprietà. In questo esempio è progettato per essere usato con Windows Form. Incollare il codice in un form e si chiama il `SetAndFillClip` metodo durante la gestione del modulo <xref:System.Windows.Forms.Control.Paint> evento passando `e` come <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.GraphicsProperties#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#4)]
 [!code-vb[System.Drawing.GraphicsProperties#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF ClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF ClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.ClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF ClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.ClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.ClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una struttura <see cref="T:System.Drawing.RectangleF" /> che delimita l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Struttura <see cref="T:System.Drawing.RectangleF" /> che rappresenta un rettangolo di delimitazione per l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'unità del rettangolo risulta viene indicato dal <xref:System.Drawing.Graphics.PageUnit%2A> proprietà. L'unità predefinita è pixel. Oggetto <xref:System.Drawing.Graphics> è in genere associato a un controllo e l'origine del rettangolo è relativo all'area client del controllo.  
  
 Se l'area di ritaglio è infinito, il <xref:System.Drawing.Graphics.ClipBounds%2A> proprietà restituisce un rettangolo di grandi dimensioni privo di significato. Per determinare se l'area di ritaglio è infinito, recuperare il <xref:System.Drawing.Graphics.Clip%2A> proprietà e chiamare relativo <xref:System.Drawing.Region.IsInfinite%2A> (metodo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingMode CompositingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingMode CompositingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingMode As CompositingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingMode CompositingMode { System::Drawing::Drawing2D::CompositingMode get(); void set(System::Drawing::Drawing2D::CompositingMode value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingMode : System.Drawing.Drawing2D.CompositingMode with get, set" Usage="System.Drawing.Graphics.CompositingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che specifica il modo in cui vengono disegnate le immagini composite in questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Questa proprietà specifica un membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.CompositingMode" />. Il valore predefinito è <see cref="F:System.Drawing.Drawing2D.CompositingMode.SourceOver" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La modalità di composizione determina se pixel da un'immagine di origine sovrascrivere o vengono combinati con quelli dello sfondo.  
  
> [!NOTE]
>  È consigliabile non usare un <xref:System.Drawing.Graphics.CompositingMode%2A> valore della proprietà <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> quando il <xref:System.Drawing.Graphics.TextRenderingHint%2A> è impostata su <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. Potrebbe verificarsi un'eccezione o l'immagine potrebbe non risultare corretto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingQuality">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.CompositingQuality CompositingQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.CompositingQuality CompositingQuality" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.CompositingQuality" />
      <MemberSignature Language="VB.NET" Value="Public Property CompositingQuality As CompositingQuality" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::CompositingQuality CompositingQuality { System::Drawing::Drawing2D::CompositingQuality get(); void set(System::Drawing::Drawing2D::CompositingQuality value); };" />
      <MemberSignature Language="F#" Value="member this.CompositingQuality : System.Drawing.Drawing2D.CompositingQuality with get, set" Usage="System.Drawing.Graphics.CompositingQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.CompositingQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la qualità di rendering delle immagini composite disegnate su questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Questa proprietà specifica un membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.CompositingQuality" />. Il valore predefinito è <see cref="F:System.Drawing.Drawing2D.CompositingQuality.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La qualità di composizione determina il livello di qualità per il rendering delle immagini composite.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyFromScreen">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Esegue un trasferimento a blocchi di bit dei dati relativi al colore dalla schermata alla superficie di disegno dell'oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (upperLeftSource As Point, upperLeftDestination As Point, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Punto nell'angolo superiore sinistro del rettangolo di origine.</param>
        <param name="upperLeftDestination">Punto nell'angolo superiore sinistro del rettangolo di destinazione.</param>
        <param name="blockRegionSize">Dimensioni dell'area da trasferire.</param>
        <summary>Esegue un trasferimento a blocchi di bit dei dati relativi al colore, corrispondente a un rettangolo di pixel, dalla schermata alla superficie di disegno dell'oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Graphics.CopyFromScreen%2A> metodi sono utili per sovrapporre un'immagine a altra. Per specificare come vengono combinati i colori di origine e destinazione, usare uno dei <xref:System.Drawing.Graphics.CopyFromScreen%2A> metodi che accetta un <xref:System.Drawing.CopyPixelOperation> parametro.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo del metodo <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Per eseguire questo esempio, incollarlo in un modulo di Windows. Handle del modulo <xref:System.Windows.Forms.Control.Paint> eventi e chiamate di `CopyPixels1` metodo dal <xref:System.Windows.Forms.Control.Paint> gestione degli eventi, passando `e` come <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#4)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Operazione non riuscita.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">per l'accesso a tutte le finestre. Enumerazione correlata: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (System.Drawing.Point upperLeftSource, System.Drawing.Point upperLeftDestination, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(valuetype System.Drawing.Point upperLeftSource, valuetype System.Drawing.Point upperLeftDestination, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Drawing.Point,System.Drawing.Point,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(System::Drawing::Point upperLeftSource, System::Drawing::Point upperLeftDestination, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : System.Drawing.Point * System.Drawing.Point * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (upperLeftSource, upperLeftDestination, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperLeftSource" Type="System.Drawing.Point" />
        <Parameter Name="upperLeftDestination" Type="System.Drawing.Point" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="upperLeftSource">Punto nell'angolo superiore sinistro del rettangolo di origine.</param>
        <param name="upperLeftDestination">Punto nell'angolo superiore sinistro del rettangolo di destinazione.</param>
        <param name="blockRegionSize">Dimensioni dell'area da trasferire.</param>
        <param name="copyPixelOperation">Uno dei valori di <see cref="T:System.Drawing.CopyPixelOperation" />.</param>
        <summary>Esegue un trasferimento a blocchi di bit dei dati relativi al colore, corrispondente a un rettangolo di pixel, dalla schermata alla superficie di disegno dell'oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Graphics.CopyFromScreen%2A> metodi sono utili per sovrapporre un'immagine a altra. Il `copyPixelOperation` parametro consente di specificare se e come i colori di origine devono essere combinati con i colori nell'area di destinazione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo del metodo <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Per eseguire questo esempio, incollarlo in un modulo di Windows. Handle del modulo <xref:System.Windows.Forms.Control.Paint> eventi e chiamate di `CopyPixels2` metodo dal <xref:System.Windows.Forms.Control.Paint> gestione degli eventi, passando `e` come <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#5)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="copyPixelOperation" /> non è un membro di <see cref="T:System.Drawing.CopyPixelOperation" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Operazione non riuscita.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">per l'accesso a tutte le finestre. Enumerazione correlata: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyFromScreen (sourceX As Integer, sourceY As Integer, destinationX As Integer, destinationY As Integer, blockRegionSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="sourceX">Coordinata X del punto nell'angolo superiore sinistro del rettangolo di origine.</param>
        <param name="sourceY">Coordinata Y del punto nell'angolo superiore sinistro del rettangolo di origine.</param>
        <param name="destinationX">Coordinata X del punto nell'angolo superiore sinistro del rettangolo di destinazione.</param>
        <param name="destinationY">Coordinata Y del punto nell'angolo superiore sinistro del rettangolo di destinazione.</param>
        <param name="blockRegionSize">Dimensioni dell'area da trasferire.</param>
        <summary>Esegue un trasferimento a blocchi di bit dei dati relativi al colore, corrispondente a un rettangolo di pixel, dalla schermata alla superficie di disegno dell'oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Graphics.CopyFromScreen%2A> metodi sono utili per sovrapporre un'immagine a altra. Per specificare come vengono combinati i colori di origine e destinazione, usare uno dei <xref:System.Drawing.Graphics.CopyFromScreen%2A> metodi che accetta un <xref:System.Drawing.CopyPixelOperation> parametro.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Drawing.Graphics.CopyFromScreen%2A> per stampare una copia del modulo corrente.  
  
 [!code-csharp[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.CopyFromScreen#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.CopyFromScreen/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Operazione non riuscita.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">per l'accesso a tutte le finestre. Enumerazione correlata: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="CopyFromScreen">
      <MemberSignature Language="C#" Value="public void CopyFromScreen (int sourceX, int sourceY, int destinationX, int destinationY, System.Drawing.Size blockRegionSize, System.Drawing.CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyFromScreen(int32 sourceX, int32 sourceY, int32 destinationX, int32 destinationY, valuetype System.Drawing.Size blockRegionSize, valuetype System.Drawing.CopyPixelOperation copyPixelOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.CopyFromScreen(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Size,System.Drawing.CopyPixelOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyFromScreen(int sourceX, int sourceY, int destinationX, int destinationY, System::Drawing::Size blockRegionSize, System::Drawing::CopyPixelOperation copyPixelOperation);" />
      <MemberSignature Language="F#" Value="member this.CopyFromScreen : int * int * int * int * System.Drawing.Size * System.Drawing.CopyPixelOperation -&gt; unit" Usage="graphics.CopyFromScreen (sourceX, sourceY, destinationX, destinationY, blockRegionSize, copyPixelOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceX" Type="System.Int32" />
        <Parameter Name="sourceY" Type="System.Int32" />
        <Parameter Name="destinationX" Type="System.Int32" />
        <Parameter Name="destinationY" Type="System.Int32" />
        <Parameter Name="blockRegionSize" Type="System.Drawing.Size" />
        <Parameter Name="copyPixelOperation" Type="System.Drawing.CopyPixelOperation" />
      </Parameters>
      <Docs>
        <param name="sourceX">Coordinata X del punto nell'angolo superiore sinistro del rettangolo di origine.</param>
        <param name="sourceY">Coordinata Y del punto nell'angolo superiore sinistro del rettangolo di origine</param>
        <param name="destinationX">Coordinata X del punto nell'angolo superiore sinistro del rettangolo di destinazione.</param>
        <param name="destinationY">Coordinata Y del punto nell'angolo superiore sinistro del rettangolo di destinazione.</param>
        <param name="blockRegionSize">Dimensioni dell'area da trasferire.</param>
        <param name="copyPixelOperation">Uno dei valori di <see cref="T:System.Drawing.CopyPixelOperation" />.</param>
        <summary>Esegue un trasferimento a blocchi di bit dei dati relativi al colore, corrispondente a un rettangolo di pixel, dalla schermata alla superficie di disegno dell'oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Graphics.CopyFromScreen%2A> metodi sono utili per sovrapporre un'immagine a altra. Il `copyPixelOperation` parametro consente di specificare se e come i colori di origine devono essere combinati con i colori nell'area di destinazione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo del metodo <xref:System.Drawing.Graphics.CopyFromScreen%2A>. Per eseguire questo esempio, incollarlo in un modulo di Windows. Handle del modulo <xref:System.Windows.Forms.Control.Paint> eventi e chiamate di `CopyPixels4` metodo dal <xref:System.Windows.Forms.Control.Paint> gestione degli eventi, passando `e` come <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#7)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="copyPixelOperation" /> non è un membro di <see cref="T:System.Drawing.CopyPixelOperation" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Operazione non riuscita.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">per l'accesso a tutte le finestre. Enumerazione correlata: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate da questa classe <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chiamata <xref:System.Drawing.Graphics.Dispose%2A> le risorse utilizzate da questo <xref:System.Drawing.Graphics> riallocazione per altri scopi.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un <xref:System.Drawing.Image> da una file di grafica SampImag nella directory di esempio.  
  
-   Crea una <xref:System.Drawing.Graphics> dal <xref:System.Drawing.Image>.  
  
-   Modifica l'immagine con l'inserimento di un rettangolo all'interno di esso.  
  
-   Disegna il <xref:System.Drawing.Image> sullo schermo.  
  
-   Rilascia l'oggetto creato <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiX">
      <MemberSignature Language="C#" Value="public float DpiX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiX" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiX { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiX : single" Usage="System.Drawing.Graphics.DpiX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la risoluzione orizzontale di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Valore, in punti per pollice, della risoluzione orizzontale supportata da questo oggetto <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla creazione di applicazioni ad alta risoluzione, vedere  
  
 [Valori DPI alti](http://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 Il metodo seguente viene illustrato come utilizzare il <xref:System.Drawing.Graphics.DpiX%2A> e <xref:System.Drawing.Graphics.DpiY%2A> proprietà. In questo esempio è progettato per l'uso con un modulo di Windows. Per eseguire questo esempio, incollarlo in un form che contiene un <xref:System.Windows.Forms.ListBox> denominato listBox1 e chiamare questo metodo dal costruttore del form.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiY">
      <MemberSignature Language="C#" Value="public float DpiY { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 DpiY" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.DpiY" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DpiY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float DpiY { float get(); };" />
      <MemberSignature Language="F#" Value="member this.DpiY : single" Usage="System.Drawing.Graphics.DpiY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la risoluzione verticale di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Valore, in punti per pollice, della risoluzione verticale supportata da questo oggetto <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla creazione di applicazioni ad alta risoluzione, vedere  
  
 [Valori DPI alti](http://go.microsoft.com/fwlink/?LinkId=159804).  
  
   
  
## Examples  
 Il metodo seguente viene illustrato come utilizzare il <xref:System.Drawing.Graphics.DpiX%2A> e <xref:System.Drawing.Graphics.DpiY%2A> proprietà. In questo esempio è progettato per l'uso con un modulo di Windows. Per eseguire questo esempio, incollarlo in un form che contiene un <xref:System.Windows.Forms.ListBox> denominato listBox1 e chiamare questo metodo dal costruttore del form.  
  
 [!code-cpp[System.Drawing.MiscExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.MiscExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.MiscExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawArc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna un arco che rappresenta una parte di un'ellisse specificata da una coppia di coordinate, una larghezza e un'altezza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile dell'arco.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.RectangleF" /> che definisce i limiti dell'ellisse.</param>
        <param name="startAngle">Angolo misurato in gradi in senso orario dall'asse X al punto iniziale dell'arco.</param>
        <param name="sweepAngle">Angolo misurato in gradi in senso orario dal parametro <c>startAngle</c> al punto finale dell'arco.</param>
        <summary>Disegna un arco che rappresenta parte di un'ellisse specificata da una struttura <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare un arco che rappresenta una parte del perimetro di un'ellisse. I puntini di sospensione è definito dai limiti di un rettangolo. Punto finale dell'arco è la parte del perimetro di puntini di sospensione tra i `startAngle` parametro e il `startAngle`  +  `sweepAngle` parametri.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea un rettangolo per associare un'ellisse.  
  
-   Definisce l'inizio (45 gradi) e degli angoli durante lo sweep di 270 gradi.  
  
-   Consente di disegnare l'arco ellittico alla schermata.  
  
 Il risultato è un'ellisse parziale manca un segmento compreso tra + e - 45 gradi dell'asse x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawArc (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile dell'arco.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.RectangleF" /> che definisce i limiti dell'ellisse.</param>
        <param name="startAngle">Angolo misurato in gradi in senso orario dall'asse X al punto iniziale dell'arco.</param>
        <param name="sweepAngle">Angolo misurato in gradi in senso orario dal parametro <c>startAngle</c> al punto finale dell'arco.</param>
        <summary>Disegna un arco che rappresenta parte di un'ellisse specificata da una struttura <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare un arco che rappresenta una parte del perimetro di un'ellisse. I puntini di sospensione è definito dai limiti di un rettangolo. Punto finale dell'arco è la parte del perimetro di puntini di sospensione tra i `startAngle` parametro e il `startAngle`  +  `sweepAngle` parametri.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea un rettangolo per associare un'ellisse.  
  
-   Definisce l'inizio (45 gradi) e degli angoli durante lo sweep di 270 gradi.  
  
-   Consente di disegnare l'arco ellittico alla schermata.  
  
 Il risultato è un'ellisse parziale manca un segmento compreso tra + e - 45 gradi dell'asse x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile dell'arco.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo che definisce l'ellisse.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo che definisce l'ellisse.</param>
        <param name="width">Larghezza del rettangolo che definisce l'ellisse.</param>
        <param name="height">Altezza del rettangolo che definisce l'ellisse.</param>
        <param name="startAngle">Angolo misurato in gradi in senso orario dall'asse X al punto iniziale dell'arco.</param>
        <param name="sweepAngle">Angolo misurato in gradi in senso orario dal parametro <c>startAngle</c> al punto finale dell'arco.</param>
        <summary>Disegna un arco che rappresenta una parte di un'ellisse specificata da una coppia di coordinate, una larghezza e un'altezza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare un arco che rappresenta una parte del perimetro di un'ellisse. I puntini di sospensione è definito dai limiti di un rettangolo. Punto finale dell'arco è la parte del perimetro di puntini di sospensione tra i `startAngle` parametro e il `startAngle`  +  `sweepAngle` parametri.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea la posizione e dimensioni di un rettangolo che delimita un'ellisse.  
  
-   Definisce l'inizio (45 gradi) e degli angoli durante lo sweep di 270 gradi.  
  
-   Consente di disegnare l'arco ellittico alla schermata.  
  
 Il risultato è un'ellisse parziale manca un segmento compreso tra + e - 45 gradi dell'asse x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rects" /> è una matrice di lunghezza zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawArc">
      <MemberSignature Language="C#" Value="public void DrawArc (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawArc(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawArc(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawArc : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawArc (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile dell'arco.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo che definisce l'ellisse.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo che definisce l'ellisse.</param>
        <param name="width">Larghezza del rettangolo che definisce l'ellisse.</param>
        <param name="height">Altezza del rettangolo che definisce l'ellisse.</param>
        <param name="startAngle">Angolo misurato in gradi in senso orario dall'asse X al punto iniziale dell'arco.</param>
        <param name="sweepAngle">Angolo misurato in gradi in senso orario dal parametro <c>startAngle</c> al punto finale dell'arco.</param>
        <summary>Disegna un arco che rappresenta una parte di un'ellisse specificata da una coppia di coordinate, una larghezza e un'altezza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare un arco che rappresenta una parte del perimetro di un'ellisse. I puntini di sospensione è definito dai limiti di un rettangolo. Punto finale dell'arco è la parte del perimetro di puntini di sospensione tra i `startAngle` parametro e il `startAngle`  +  `sweepAngle` parametri.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea la posizione e dimensioni di un rettangolo che delimita un'ellisse.  
  
-   Definisce l'inizio (45 gradi) e degli angoli durante lo sweep di 270 gradi.  
  
-   Consente di disegnare l'arco ellittico alla schermata.  
  
 Il risultato è un'ellisse parziale manca un segmento compreso tra + e - 45 gradi dell'asse x.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#10)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#10)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBezier">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna una spline di Bézier definita da quattro strutture <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2, valuetype System.Drawing.Point pt3, valuetype System.Drawing.Point pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2, System::Drawing::Point pt3, System::Drawing::Point pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
        <Parameter Name="pt3" Type="System.Drawing.Point" />
        <Parameter Name="pt4" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">Struttura <see cref="T:System.Drawing.Pen" /> che determina colore, larghezza e stile della curva.</param>
        <param name="pt1">Struttura <see cref="T:System.Drawing.Point" /> che rappresenta il punto iniziale della curva.</param>
        <param name="pt2">Struttura <see cref="T:System.Drawing.Point" /> che rappresenta il primo punto di controllo della curva.</param>
        <param name="pt3">Struttura <see cref="T:System.Drawing.Point" /> che rappresenta il secondo punto di controllo della curva.</param>
        <param name="pt4">Struttura <see cref="T:System.Drawing.Point" /> che rappresenta il punto finale della curva.</param>
        <summary>Disegna una spline di Bézier definita da quattro strutture <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La curva di Bézier viene disegnata dal primo al quarto punto. Il secondo e terzo punto è punti di controllo che determina la forma della curva.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea l'inizio, fine e due punti di controllo della curva.  
  
-   Consente di disegnare la curva di Bézier sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2, valuetype System.Drawing.PointF pt3, valuetype System.Drawing.PointF pt4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2, System::Drawing::PointF pt3, System::Drawing::PointF pt4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawBezier (pen, pt1, pt2, pt3, pt4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
        <Parameter Name="pt3" Type="System.Drawing.PointF" />
        <Parameter Name="pt4" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della curva.</param>
        <param name="pt1">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta il punto iniziale della curva.</param>
        <param name="pt2">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta il primo punto di controllo della curva.</param>
        <param name="pt3">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta il secondo punto di controllo della curva.</param>
        <param name="pt4">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta il punto finale della curva.</param>
        <summary>Disegna una spline di Bézier definita da quattro strutture <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La spline di Bézier viene disegnata dal primo al quarto punto. Il secondo e terzo punto è punti di controllo che determina la forma della curva.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea l'inizio, fine e due punti di controllo della curva.  
  
-   Consente di disegnare la curva di Bézier sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#12)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#12)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBezier">
      <MemberSignature Language="C#" Value="public void DrawBezier (System.Drawing.Pen pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBezier(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2, float32 x3, float32 y3, float32 x4, float32 y4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBezier(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);" />
      <MemberSignature Language="F#" Value="member this.DrawBezier : System.Drawing.Pen * single * single * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawBezier (pen, x1, y1, x2, y2, x3, y3, x4, y4)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
        <Parameter Name="x3" Type="System.Single" />
        <Parameter Name="y3" Type="System.Single" />
        <Parameter Name="x4" Type="System.Single" />
        <Parameter Name="y4" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della curva.</param>
        <param name="x1">Coordinata X del punto iniziale della curva.</param>
        <param name="y1">Coordinata Y del punto iniziale della curva.</param>
        <param name="x2">Coordinata X del primo punto di controllo della curva.</param>
        <param name="y2">Coordinata Y del primo punto di controllo della curva.</param>
        <param name="x3">Coordinata X del secondo punto di controllo della curva.</param>
        <param name="y3">Coordinata Y del secondo punto di controllo della curva.</param>
        <param name="x4">Coordinata X del punto finale della curva.</param>
        <param name="y4">Coordinata Y del punto finale della curva.</param>
        <summary>Disegna una spline di Bézier definita da quattro coppie ordinate di coordinate che rappresentano punti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La spline di Bézier viene disegnata dal primo al quarto punto. Il secondo e terzo punto è punti di controllo che determina la forma della curva.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea le coordinate di inizio, fine e due punti di controllo della curva.  
  
-   Consente di disegnare la curva di Bézier sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#13)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#13)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawBeziers">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna una serie di spline di Bézier da un matrice di strutture <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della curva.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.Point" /> che rappresentano i punti che determinano la curva. Il numero di punti nella matrice deve essere un multiplo di 3 più 1, ad esempio 4, 7 o 10.</param>
        <summary>Disegna una serie di spline di Bézier da un matrice di strutture <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il numero di punti nella matrice deve essere un multiplo di 3 più 1 perché il primo spline richiede 4 punti e qualsiasi altra spline richiede 3 punti. La spline di Bézier prima viene disegnata dal primo al quarto punto della matrice di punti. Il secondo e terzo punto è punti di controllo che determina la forma della curva. Ogni curva successiva richiede esattamente tre ulteriori punti: due altri punti di controllo e un punto finale. Il punto finale della curva precedente viene usato come punto di partenza per tutte le curve aggiuntive.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea inizio, fine e due punti di controllo per una curva di prima e l'endpoint e due punti di controllo per una curva di secondo.  
  
-   Disegna le curve di Bézier successive alla schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#14)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#14)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawBeziers">
      <MemberSignature Language="C#" Value="public void DrawBeziers (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawBeziers(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawBeziers(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawBeziers : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawBeziers (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della curva.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che rappresentano i punti che determinano la curva. Il numero di punti nella matrice deve essere un multiplo di 3 più 1, ad esempio 4, 7 o 10.</param>
        <summary>Disegna una serie di spline di Bézier da un matrice di strutture <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il numero di punti nella matrice deve essere un multiplo di 3 più 1 perché il primo spline richiede 4 punti e qualsiasi altra spline richiede 3 punti. La curva di Bézier prima viene disegnata dal primo al quarto punto della matrice di punti. Il secondo e terzo punto è punti di controllo che determina la forma della curva. Ogni curva successiva richiede esattamente tre ulteriori punti: due altri punti di controllo e un punto finale. Il punto finale della curva precedente viene usato come punto di partenza per tutte le curve aggiuntive.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea inizio, fine e due punti di controllo per una curva di prima e l'endpoint e due punti di controllo per una curva di secondo.  
  
-   Disegna le curve di Bézier successive alla schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#15)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#15)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna una spline di tipo Cardinal chiusa, definita da una matrice di strutture <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e l'altezza della curva.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.Point" /> che definiscono la spline.</param>
        <summary>Disegna una spline di tipo Cardinal chiusa, definita da una matrice di strutture <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo disegna una spline di tipo cardinal chiusa che attraversa ogni punto della matrice. Se l'ultimo punto non corrisponde al primo, viene aggiunto un segmento curvo aggiuntive dall'ultimo punto per il primo punto per chiudere la figura.  
  
 La matrice di punti deve contenere almeno quattro <xref:System.Drawing.Point> strutture.  
  
 Questo metodo Usa una tensione predefinita pari a 0,5.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Consente di creare penne rosse e verdi.  
  
-   Creazione di sette punti per definire una curva.  
  
-   Disegna linee rette rosso sette tra i sette punti per formare un poligono chiuso.  
  
-   Disegna una curva chiusa verde attraverso i sette punti.  
  
 Il metodo utilizza una tensione predefinita pari a 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#16)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#16)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e l'altezza della curva.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che definiscono la spline.</param>
        <summary>Disegna una spline di tipo Cardinal chiusa, definita da una matrice di strutture <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo disegna una spline di tipo cardinal chiusa che attraversa ogni punto della matrice. Se l'ultimo punto non corrisponde al primo, un segmento curvo aggiuntive viene aggiunto dall'ultimo punto per il primo punto da chiudere.  
  
 La matrice di punti deve contenere almeno quattro <xref:System.Drawing.PointF> strutture.  
  
 Questo metodo Usa una tensione predefinita pari a 0,5.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Consente di creare penne rosse e verdi.  
  
-   Creazione di sette punti per definire una curva.  
  
-   Disegna linee rette rosso sette tra i sette punti per formare un poligono chiuso.  
  
-   Disegna una curva chiusa verde attraverso i sette punti.  
  
 Il metodo utilizza una tensione predefinita pari a 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#18)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#18)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#18](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.Point[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e l'altezza della curva.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.Point" /> che definiscono la spline.</param>
        <param name="tension">Valore superiore o uguale a 0,0 F che specifica la tensione della curva.</param>
        <param name="fillmode">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.FillMode" /> che determina come viene riempita la curva. Questo parametro è obbligatorio ma viene ignorato.</param>
        <summary>Disegna una spline di tipo Cardinal chiusa, definita da una matrice di strutture <see cref="T:System.Drawing.Point" /> usando una tensione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo disegna una spline di tipo cardinal chiusa che attraversa ogni punto della matrice. Se l'ultimo punto non corrisponde al primo, un segmento curvo aggiuntive viene aggiunto dall'ultimo punto per il primo punto da chiudere.  
  
 La matrice di punti deve contenere almeno quattro <xref:System.Drawing.Point> strutture.  
  
 Il `tension` parametro determina la forma della curva spline. Se il valore della `tension` parametro 0.0F, questo metodo crea segmenti di linee rette per i punti di connessione. In genere, il `tension` parametro è minore o uguale a 1.0F. I valori su 1.0F producono risultati imprevisti.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Consente di creare penne rosse e verdi.  
  
-   Creazione di sette punti per definire la curva.  
  
-   Disegna linee rette rosso sette tra i sette punti per formare un poligono.  
  
-   Crea le impostazioni della modalità tensioni e riempimento.  
  
-   Disegna una curva chiusa verde attraverso i sette punti.  
  
 Il metodo utilizza una tensione pari a 1,0 e imposta la modalità di riempimento su `FillMode.Alternate`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#17)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#17)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#17](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawClosedCurve">
      <MemberSignature Language="C#" Value="public void DrawClosedCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawClosedCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawClosedCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.DrawClosedCurve : System.Drawing.Pen * System.Drawing.PointF[] * single * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.DrawClosedCurve (pen, points, tension, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e l'altezza della curva.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che definiscono la spline.</param>
        <param name="tension">Valore superiore o uguale a 0,0 F che specifica la tensione della curva.</param>
        <param name="fillmode">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.FillMode" /> che determina come viene riempita la curva. Questo parametro è obbligatorio ma viene ignorato.</param>
        <summary>Disegna una spline di tipo Cardinal chiusa, definita da una matrice di strutture <see cref="T:System.Drawing.PointF" /> usando una tensione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo disegna una spline di tipo cardinal chiusa che attraversa ogni punto della matrice. Se l'ultimo punto non corrisponde al primo, un segmento curvo aggiuntive viene aggiunto dall'ultimo punto per il primo punto da chiudere.  
  
 La matrice di punti deve contenere almeno quattro <xref:System.Drawing.PointF> strutture.  
  
 Il `tension` parametro determina la forma della curva spline. Se il valore della `tension` parametro 0.0F, questo metodo crea segmenti di linee rette per i punti di connessione. In genere, il `tension` parametro è minore o uguale a 1.0F. I valori su 1.0F producono risultati imprevisti.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Consente di creare penne rosse e verdi.  
  
-   Creazione di sette punti per definire la curva.  
  
-   Disegna linee rette rosso sette tra i sette punti per formare un poligono.  
  
-   Crea le impostazioni della modalità tensioni e riempimento.  
  
-   Disegna una curva chiusa verde attraverso i sette punti.  
  
 Il metodo utilizza una tensione pari a 1,0 e imposta la modalità di riempimento su `FillMode.Alternate`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#19)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#19)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#19](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna una spline di tipo Cardinal mediante una matrice di strutture <see cref="T:System.Drawing.Point" /> specificata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e l'altezza della curva.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.Point" /> che definiscono la spline.</param>
        <summary>Disegna una spline di tipo Cardinal mediante una matrice di strutture <see cref="T:System.Drawing.Point" /> specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo disegna una spline di tipo cardinal che passa attraverso ogni punto della matrice.  
  
 La matrice di punti deve contenere almeno tre <xref:System.Drawing.Point> strutture disegnare una curva.  
  
 Questo metodo Usa una tensione predefinita pari a 0,5.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Consente di creare penne rosse e verdi.  
  
-   Creazione di sette punti per definire una curva.  
  
-   Disegna linee rette rosso sei tra i sette punti per formare un poligono incompleto.  
  
-   Disegna una linea curva aperta tramite le sette punti.  
  
 Il metodo utilizza una tensione predefinita pari a 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#20)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#20)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawCurve (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della curva.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che definiscono la spline.</param>
        <summary>Disegna una spline di tipo Cardinal mediante una matrice di strutture <see cref="T:System.Drawing.PointF" /> specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo disegna una spline di tipo cardinal che passa attraverso ogni punto della matrice.  
  
 La matrice di punti deve contenere almeno tre <xref:System.Drawing.PointF> strutture disegnare una curva.  
  
 Questo metodo Usa una tensione predefinita pari a 0,5.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Consente di creare penne rosse e verdi.  
  
-   Creazione di sette punti per definire una curva.  
  
-   Disegna linee rette rosso sei tra i sette punti per formare un poligono incompleto.  
  
-   Disegna una linea curva aperta tramite le sette punti.  
  
 Il metodo utilizza una tensione predefinita pari a 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#23)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#23)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#23](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della curva.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.Point" /> che definiscono la spline.</param>
        <param name="tension">Valore superiore o uguale a 0,0 F che specifica la tensione della curva.</param>
        <summary>Disegna una spline di tipo Cardinal mediante una matrice di strutture <see cref="T:System.Drawing.Point" /> specificata usando una tensione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo disegna una spline di tipo cardinal che passa attraverso ogni punto della matrice.  
  
 La matrice di punti deve contenere almeno tre <xref:System.Drawing.Point> strutture disegnare una curva.  
  
 Il `tension` parametro determina la forma della curva spline. Se il valore della `tension` parametro 0.0F, questo metodo crea segmenti di linee rette per i punti di connessione. In genere, il `tension` parametro è minore o uguale a 1.0F. I valori su 1.0F producono risultati imprevisti.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Consente di creare penne rosse e verdi.  
  
-   Creazione di sette punti per definire la curva.  
  
-   Disegna linee rette rosso sei tra i sette punti per formare un poligono incompleto.  
  
-   Crea un'impostazione di tensione.  
  
-   Disegna una curva chiusa verde aperta tramite le sette punti.  
  
 Il metodo utilizza una tensione pari a 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#22)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#22)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della curva.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che rappresentano i punti che definiscono la curva.</param>
        <param name="tension">Valore superiore o uguale a 0,0 F che specifica la tensione della curva.</param>
        <summary>Disegna una spline di tipo Cardinal mediante una matrice di strutture <see cref="T:System.Drawing.PointF" /> specificata usando una tensione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo disegna una spline di tipo cardinal che passa attraverso ogni punto della matrice.  
  
 La matrice di punti deve contenere almeno tre <xref:System.Drawing.PointF> strutture disegnare una curva.  
  
 Il `tension` parametro determina la forma della curva spline. Se il valore della `tension` parametro 0.0F, questo metodo crea segmenti di linee rette per i punti di connessione. In genere, il `tension` parametro è minore o uguale a 1.0F. I valori su 1.0F producono risultati imprevisti.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Consente di creare penne rosse e verdi.  
  
-   Creazione di sette punti per definire la curva.  
  
-   Disegna linee rette rosso sei tra i sette punti per formare un poligono incompleto.  
  
-   Crea un'impostazione di tensione.  
  
-   Disegna una curva chiusa verde aperta tramite le sette punti.  
  
 Il metodo utilizza una tensione pari a 1,0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#26)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#26)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della curva.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che definiscono la spline.</param>
        <param name="offset">Offset dal primo elemento della matrice del parametro <c>punti</c> al punto iniziale della curva.</param>
        <param name="numberOfSegments">Numero di segmenti successivi al punto iniziale da includere nella curva.</param>
        <summary>Disegna una spline di tipo Cardinal mediante una matrice di strutture <see cref="T:System.Drawing.PointF" /> specificata. Offset di inizio del disegno dall'inizio della matrice.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo disegna una spline di tipo cardinal che passa attraverso ogni punto della matrice.  
  
 La matrice di punti deve contenere almeno tre <xref:System.Drawing.PointF> strutture disegnare una curva.  
  
 Il valore della `offset` parametro specifica il numero di elementi da ignorare nella matrice. Il primo elemento dopo gli elementi ignorati rappresenta il punto iniziale della curva.  
  
 Il valore della `numberOfSegments` parametro specifica il numero di segmenti, dopo il punto di partenza, per tracciare la curva. Il valore della `numberOfSegments` parametro deve essere almeno pari a 1. Il valore della `offset` parametro sommato al valore della `numberOfSegments` parametro deve essere minore del numero di elementi nella matrice del `points` parametro.  
  
 Questo metodo Usa una tensione predefinita pari a 0,5.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Consente di creare penne rosse e verdi.  
  
-   Creazione di sette punti per definire una curva.  
  
-   Disegna linee rette rosso sei tra i sette punti per formare un poligono incompleto.  
  
-   Definisce l'offset di punto di inizio e il numero di segmenti.  
  
-   Disegna una linea curva aperta (a partire dal terzo punto) attraverso gli ultimi cinque punti.  
  
 Il metodo utilizza una tensione predefinita pari a 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#24)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#24)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.Point[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della curva.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.Point" /> che definiscono la spline.</param>
        <param name="offset">Offset dal primo elemento della matrice del parametro <c>punti</c> al punto iniziale della curva.</param>
        <param name="numberOfSegments">Numero di segmenti successivi al punto iniziale da includere nella curva.</param>
        <param name="tension">Valore superiore o uguale a 0,0 F che specifica la tensione della curva.</param>
        <summary>Disegna una spline di tipo Cardinal mediante una matrice di strutture <see cref="T:System.Drawing.Point" /> specificata usando una tensione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo disegna una spline di tipo cardinal che passa attraverso ogni punto della matrice.  
  
 La matrice di punti deve contenere almeno tre <xref:System.Drawing.Point> strutture disegnare una curva.  
  
 Il valore della `offset` parametro specifica il numero di elementi da ignorare nella matrice. Il primo elemento dopo gli elementi ignorati rappresenta il punto iniziale della curva.  
  
 Il valore della `numberOfSegments` parametro specifica il numero di segmenti, dopo il punto di partenza, per tracciare la curva. Il valore della `numberOfSegments` parametro deve essere almeno pari a 1. Il valore della `offset` parametro sommato al valore della `numberOfSegments` parametro deve essere minore del numero di elementi nella matrice del `points` parametro.  
  
 Il `tension` parametro determina la forma della curva spline. Se il valore della `tension` parametro 0.0F, questo metodo crea segmenti di linee rette per i punti di connessione. In genere, il `tension` parametro è minore o uguale a 1.0F. I valori su 1.0F producono risultati imprevisti.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Consente di creare penne rosse e verdi.  
  
-   Creazione di sette punti per definire una curva.  
  
-   Disegna linee rette rosso sei tra i sette punti per formare un poligono incompleto.  
  
-   Definisce l'offset di punto di inizio e il numero di segmenti.  
  
-   Definisce la tensione.  
  
-   Disegna una linea curva aperta (a partire dal terzo punto) attraverso gli ultimi cinque punti.  
  
 Il metodo imposta la tensione 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#21)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#21)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawCurve">
      <MemberSignature Language="C#" Value="public void DrawCurve (System.Drawing.Pen pen, System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawCurve(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points, int32 offset, int32 numberOfSegments, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawCurve(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points, int offset, int numberOfSegments, float tension);" />
      <MemberSignature Language="F#" Value="member this.DrawCurve : System.Drawing.Pen * System.Drawing.PointF[] * int * int * single -&gt; unit" Usage="graphics.DrawCurve (pen, points, offset, numberOfSegments, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="numberOfSegments" Type="System.Int32" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della curva.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che definiscono la spline.</param>
        <param name="offset">Offset dal primo elemento della matrice del parametro <c>punti</c> al punto iniziale della curva.</param>
        <param name="numberOfSegments">Numero di segmenti successivi al punto iniziale da includere nella curva.</param>
        <param name="tension">Valore superiore o uguale a 0,0 F che specifica la tensione della curva.</param>
        <summary>Disegna una spline di tipo Cardinal mediante una matrice di strutture <see cref="T:System.Drawing.PointF" /> specificata usando una tensione specificata. Offset di inizio del disegno dall'inizio della matrice.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo disegna una spline di tipo cardinal che passa attraverso ogni punto della matrice.  
  
 La matrice di punti deve contenere almeno tre <xref:System.Drawing.PointF> strutture disegnare una curva.  
  
 Il valore della `offset` parametro specifica il numero di elementi da ignorare nella matrice. Il primo elemento dopo gli elementi ignorati rappresenta il punto iniziale della curva.  
  
 Il valore della `numberOfSegments` parametro specifica il numero di segmenti, dopo il punto di partenza, per tracciare la curva. Il valore della `numberOfSegments` parametro deve essere almeno pari a 1. Il valore della `offset` parametro sommato al valore della `numberOfSegments` parametro deve essere minore del numero di elementi nella matrice del `points` parametro.  
  
 Il `tension` parametro determina la forma della curva spline. Se il valore della `tension` parametro 0.0F, questo metodo crea segmenti di linee rette per i punti di connessione. In genere, il `tension` parametro è minore o uguale a 1.0F. I valori su 1.0F producono risultati imprevisti.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Consente di creare penne rosse e verdi.  
  
-   Creazione di sette punti per definire una curva.  
  
-   Disegna linee rette rosso sei tra i sette punti per formare un poligono incompleto.  
  
-   Definisce l'offset di punto di inizio e il numero di segmenti.  
  
-   Definisce la tensione.  
  
-   Disegna una linea curva aperta (a partire dal terzo punto) attraverso gli ultimi cinque punti.  
  
 Il metodo imposta la tensione 1.0.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#25)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#25)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna un'ellisse definita da un rettangolo di delimitazione specificato da una coppia di coordinate, un'altezza e una larghezza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile dell'ellisse.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> che definisce i limiti dell'ellisse.</param>
        <summary>Disegna un'ellisse specificata da una struttura <see cref="T:System.Drawing.Rectangle" /> di delimitazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare un'ellisse definita dal rettangolo di delimitazione specificato da di `rect` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea un rettangolo per associare un'ellisse.  
  
-   Disegna l'ellisse alla schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#27)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#27)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#27](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawEllipse (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile dell'ellisse.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.RectangleF" /> che definisce i limiti dell'ellisse.</param>
        <summary>Disegna un'ellisse definita da un oggetto <see cref="T:System.Drawing.RectangleF" /> di delimitazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare un'ellisse definita dal rettangolo di delimitazione specificato da di `rect` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea un rettangolo per associare un'ellisse.  
  
-   Disegna l'ellisse alla schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#28)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#28)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#28](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile dell'ellisse.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse.</param>
        <param name="width">Larghezza del rettangolo di delimitazione che definisce l'ellisse.</param>
        <param name="height">Altezza del rettangolo di delimitazione che definisce l'ellisse.</param>
        <summary>Disegna un'ellisse definita da un rettangolo di delimitazione specificato da coordinate per l'angolo superiore sinistro del rettangolo, un'altezza e una larghezza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare un'ellisse definita dal rettangolo di delimitazione specificato dal `x`, `y`, `width`, e `height` parametri.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea la posizione e dimensioni di un rettangolo che delimita un'ellisse.  
  
-   Disegna l'ellisse alla schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#29)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#29)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#29](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawEllipse">
      <MemberSignature Language="C#" Value="public void DrawEllipse (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawEllipse(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawEllipse(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawEllipse : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawEllipse (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile dell'ellisse.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse.</param>
        <param name="width">Larghezza del rettangolo di delimitazione che definisce l'ellisse.</param>
        <param name="height">Altezza del rettangolo di delimitazione che definisce l'ellisse.</param>
        <summary>Disegna un'ellisse definita da un rettangolo di delimitazione specificato da una coppia di coordinate, un'altezza e una larghezza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare un'ellisse definita dal rettangolo di delimitazione specificato dal `x`, `y`, `width`, e `height` parametri.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea la posizione e dimensioni di un rettangolo che delimita un'ellisse.  
  
-   Disegna l'ellisse alla schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#30)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#30)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#30](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawIcon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna l'immagine rappresentata dall'oggetto <see cref="T:System.Drawing.Icon" /> specificato secondo le coordinate indicate.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIcon (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">Oggetto <see cref="T:System.Drawing.Icon" /> da disegnare.</param>
        <param name="targetRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni dell'immagine risultante sulla superficie di visualizzazione. L'immagine contenuta nel parametro <c>icona</c> viene adattata alle dimensioni di quest'area rettangolare.</param>
        <summary>Disegna l'immagine rappresentata dall'oggetto <see cref="T:System.Drawing.Icon" /> specificato all'interno dell'area specificata da una struttura <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'icona da un file di icona di Windows standard SampIcon.ico nella cartella di esempio.  
  
-   Crea un rettangolo in cui disegnare l'icona.  
  
-   Disegna l'icona sullo schermo.  
  
 La posizione del rettangolo consente di individuare l'icona nella schermata e le dimensioni del rettangolo determinano il ridimensionamento dell'icona disegnata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#31)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#31)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#31](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIcon">
      <MemberSignature Language="C#" Value="public void DrawIcon (System.Drawing.Icon icon, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIcon(class System.Drawing.Icon icon, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIcon(System::Drawing::Icon ^ icon, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawIcon : System.Drawing.Icon * int * int -&gt; unit" Usage="graphics.DrawIcon (icon, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="icon">Oggetto <see cref="T:System.Drawing.Icon" /> da disegnare.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <summary>Disegna l'immagine rappresentata dall'oggetto <see cref="T:System.Drawing.Icon" /> specificato secondo le coordinate indicate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'icona da un file di icona di Windows standard SampIcon.ico nella cartella di esempio.  
  
-   Crea le coordinate dell'angolo superiore sinistro nella quale disegnare l'icona.  
  
-   Disegna l'icona sullo schermo.  
  
 L'icona disegnata non ridimensionata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#32)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#32)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#32](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawIconUnstretched">
      <MemberSignature Language="C#" Value="public void DrawIconUnstretched (System.Drawing.Icon icon, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawIconUnstretched(class System.Drawing.Icon icon, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawIconUnstretched(System::Drawing::Icon ^ icon, System::Drawing::Rectangle targetRect);" />
      <MemberSignature Language="F#" Value="member this.DrawIconUnstretched : System.Drawing.Icon * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawIconUnstretched (icon, targetRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="System.Drawing.Icon" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="icon">Oggetto <see cref="T:System.Drawing.Icon" /> da disegnare.</param>
        <param name="targetRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni dell'immagine risultante. L'immagine non viene adattata al rettangolo, ma conserva le sue dimensioni originali. Se è più larga del rettangolo, viene ritagliata per inserirla al suo interno.</param>
        <summary>Disegna l'immagine rappresentata dall'oggetto <see cref="T:System.Drawing.Icon" /> specificato senza adattamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'icona da un file di icona di Windows standard SampIcon.ico nella cartella di esempio.  
  
-   Crea un rettangolo in cui disegnare l'icona.  
  
-   Disegna l'icona sullo schermo.  
  
 La posizione del rettangolo consente di individuare l'icona nella schermata e l'icona disegnata è non in scala e ritagliata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#33)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#33)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#33](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="icon" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImage">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna l'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione indicata e con le dimensioni originali.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="point">Struttura <see cref="T:System.Drawing.Point" /> che rappresenta la posizione dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <summary>Disegna l'oggetto <see cref="T:System.Drawing.Image" /> specificato usando le dimensioni originali, nella posizione indicata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> archivia un valore per larghezza in pixel e un valore per la risoluzione orizzontale (punti per pollice). La larghezza fisica, misurata in pollici, di un'immagine è la larghezza in pixel divisa per la risoluzione orizzontale. Ad esempio, un'immagine con una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice ha una larghezza fisica di 3 pollici. Note simile si applicano a altezza in pixel e l'altezza fisico.  
  
 Questo metodo crea un'immagine usando le dimensioni fisiche, in modo che l'immagine presenterà le dimensioni corrette in pollici indipendentemente dalla risoluzione (punti per pollice) del dispositivo di visualizzazione. Si supponga, ad esempio, che un'immagine ha una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice. Se si chiama questo metodo per disegnare l'immagine su un dispositivo che ha una risoluzione di 96 punti per pollice, la larghezza in pixel dell'immagine sottoposta a rendering sarà (216/72) * 96 = 288.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea un punto in cui disegnare l'angolo superiore sinistro dell'immagine.  
  
-   Disegna l'immagine ridimensionata sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#34)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#34)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#34](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.Point" /> che definiscono un parallelogramma.</param>
        <summary>Disegna l'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione indicata e con la forma e le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.Point> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma.  
  
 L'immagine rappresentata dal `image` parametro viene adattato per adattare la forma del parallelogramma specificato per il `destPoints` parametri.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono il parallelogramma in cui disegnare l'immagine.  
  
-   Disegna l'immagine a schermo.  
  
 La posizione del parallelogramma individua l'immagine nella schermata e le dimensioni dell'immagine originale e la dimensione e forma del parallelogramma determina il ridimensionamento e inclinazione dell'immagine disegnata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#35)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#35)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#35](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawImage (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="point">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta l'angolo superiore sinistro dell'immagine disegnata.</param>
        <summary>Disegna l'oggetto <see cref="T:System.Drawing.Image" /> specificato usando le dimensioni originali, nella posizione indicata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> archivia un valore per larghezza in pixel e un valore per la risoluzione orizzontale (punti per pollice). La larghezza fisica, misurata in pollici, di un'immagine è la larghezza in pixel divisa per la risoluzione orizzontale. Ad esempio, un'immagine con una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice ha una larghezza fisica di 3 pollici. Note simile si applicano a altezza in pixel e l'altezza fisico.  
  
 Questo metodo crea un'immagine usando le dimensioni fisiche, in modo che l'immagine presenterà le dimensioni corrette in pollici indipendentemente dalla risoluzione (punti per pollice) del dispositivo di visualizzazione. Si supponga, ad esempio, che un'immagine ha una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice. Se si chiama questo metodo per disegnare l'immagine su un dispositivo che ha una risoluzione di 96 punti per pollice, la larghezza in pixel dell'immagine sottoposta a rendering sarà (216/72) * 96 = 288.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea un punto in cui disegnare l'angolo superiore sinistro dell'immagine.  
  
-   Disegna l'immagine ridimensionata sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#40)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#40)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawImage (image, destPoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.PointF" /> che definiscono un parallelogramma.</param>
        <summary>Disegna l'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione indicata e con la forma e le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.PointF> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma.  
  
 L'immagine rappresentata dal `image` oggetto viene ridimensionata e adattata alla forma del parallelogramma specificato per il `destPoints` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono il parallelogramma in cui disegnare l'immagine.  
  
-   Disegna l'immagine a schermo.  
  
 La posizione del parallelogramma individua l'immagine nella schermata e le dimensioni dell'immagine originale e la dimensione e forma del parallelogramma determina il ridimensionamento e inclinazione dell'immagine disegnata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#41)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#41)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni dell'immagine disegnata.</param>
        <summary>Disegna l'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'immagine rappresentata dal `image` oggetto viene adattato alle dimensioni del `rect` rettangolo.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea un rettangolo in cui disegnare l'immagine.  
  
-   Disegna l'immagine a schermo.  
  
 La posizione del rettangolo consente di individuare l'immagine nella schermata e le dimensioni dell'immagine originale e le dimensioni del rettangolo determina il ridimensionamento dell'immagine disegnata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#46)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#46)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#46](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawImage (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la posizione e le dimensioni dell'immagine disegnata.</param>
        <summary>Disegna l'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'immagine rappresentata dal `image` oggetto viene adattato alle dimensioni del `rect` rettangolo.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea un rettangolo in cui disegnare l'immagine.  
  
-   Disegna l'immagine a schermo.  
  
 La posizione del rettangolo consente di individuare l'immagine nella schermata e le dimensioni originali dell'immagine e le dimensioni del rettangolo determina il ridimensionamento dell'immagine disegnata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#56)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#56)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#56](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#56)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <summary>Disegna l'immagine specificata usando le dimensioni fisiche originali nella posizione indicata da una coppia di coordinate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> archivia un valore per larghezza in pixel e un valore per la risoluzione orizzontale (punti per pollice). La larghezza fisica, misurata in pollici, di un'immagine è la larghezza in pixel divisa per la risoluzione orizzontale. Ad esempio, un'immagine con una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice ha una larghezza fisica di 3 pollici. Note simile si applicano a altezza in pixel e l'altezza fisico.  
  
 Il <xref:System.Drawing.Graphics.DrawImage%2A> metodo disegna un'immagine usando le dimensioni fisiche, in modo che l'immagine presenterà le dimensioni corrette in pollici indipendentemente dalla risoluzione (punti per pollice) del dispositivo di visualizzazione. Si supponga, ad esempio, che un'immagine ha una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice. Se si chiama <xref:System.Drawing.Graphics.DrawImage%2A> per disegnare l'immagine in un dispositivo che ha una risoluzione di 96 punti per pollice, la larghezza in pixel dell'immagine sottoposta a rendering sarà (216/72) * 96 = 288.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio jpg nella cartella dell'esempio.  
  
-   Crea le coordinate di un punto in cui disegnare l'angolo superiore sinistro dell'immagine.  
  
-   Disegna l'immagine non in scala.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#58)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#58)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#58](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <summary>Disegna l'oggetto <see cref="T:System.Drawing.Image" /> specificato usando le dimensioni originali, nella posizione indicata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> archivia un valore per larghezza in pixel e un valore per la risoluzione orizzontale (punti per pollice). La larghezza fisica, misurata in pollici, di un'immagine è la larghezza in pixel divisa per la risoluzione orizzontale. Ad esempio, un'immagine con una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice ha una larghezza fisica di 3 pollici. Note simile si applicano a altezza in pixel e l'altezza fisico.  
  
 Questo metodo crea un'immagine usando le dimensioni fisiche, in modo che l'immagine presenterà le dimensioni corrette in pollici indipendentemente dalla risoluzione (punti per pollice) del dispositivo di visualizzazione. Si supponga, ad esempio, che un'immagine ha una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice. Se si chiama questo metodo per disegnare l'immagine su un dispositivo che ha una risoluzione di 96 punti per pollice, la larghezza in pixel dell'immagine sottoposta a rendering sarà (216/72) * 96 = 288.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea le coordinate di un punto in cui disegnare l'angolo superiore sinistro dell'immagine.  
  
-   Disegna l'immagine ridimensionata sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#61)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#61)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#61](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#61)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.Point" /> che definiscono un parallelogramma.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte dell'oggetto <c>immagine</c> da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate dal parametro <c>srcRect</c>.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.Point> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma.  
  
 Il `srcRect` parametro specifica una porzione rettangolare del `image` oggetto su cui disegnare. Questa parte viene adattata il parallelogramma specificato da di `destPoints` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono il parallelogramma in cui disegnare l'immagine.  
  
-   Crea un rettangolo per selezionare la parte dell'immagine da disegnare.  
  
-   Imposta l'unità di disegno al pixel delle immagini.  
  
-   Disegna l'immagine a schermo.  
  
 La posizione del parallelogramma individua l'immagine nella schermata e le dimensioni del rettangolo e le dimensioni e la forma del parallelogramma determina il ridimensionamento e inclinazione dell'immagine disegnata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#36)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#36)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#36](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.PointF" /> che definiscono un parallelogramma.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte dell'oggetto <c>immagine</c> da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate dal parametro <c>srcRect</c>.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.PointF> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma.  
  
 Il `srcRect` parametro specifica una porzione rettangolare del `image` oggetto su cui disegnare. Questa parte viene adattata il parallelogramma specificato da di `destPoints` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono il parallelogramma in cui disegnare l'immagine di destinazione.  
  
-   Crea un rettangolo di origine da cui estrarre una parte dell'immagine.  
  
-   Imposta l'unità di misura del rettangolo di origine per pixel.  
  
-   Disegna l'immagine a schermo.  
  
 La posizione del parallelogramma individua l'immagine sullo schermo, le dimensioni del rettangolo di origine e la dimensione e forma del parallelogramma destinazione determina il ridimensionamento e inclinazione dell'immagine disegnata e determinano le dimensioni del rettangolo la porzione dell'immagine originale viene disegnata sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#42)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#42)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#42](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni dell'immagine disegnata. L'immagine viene adattata al rettangolo.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte dell'oggetto <c>immagine</c> da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate dal parametro <c>srcRect</c>.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `srcRect` parametro specifica una porzione rettangolare del `image` oggetto su cui disegnare. Questa parte viene ridimensionata per adattarsi all'interno del rettangolo specificato da di `destRect` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea un rettangolo di destinazione in cui disegnare l'immagine.  
  
-   Crea un rettangolo di origine da cui estrarre una parte dell'immagine.  
  
-   Imposta l'unità di misura del rettangolo di origine per pixel.  
  
-   Disegna l'immagine a schermo.  
  
 La posizione del rettangolo di destinazione consente di individuare l'immagine sullo schermo, le dimensioni dei rettangoli di origine e destinazione determinano le proporzioni dell'immagine disegnata e determinano le dimensioni del rettangolo di origine viene disegnata la porzione dell'immagine originale di schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#47)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#47)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la posizione e le dimensioni dell'immagine disegnata. L'immagine viene adattata al rettangolo.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte dell'oggetto <c>immagine</c> da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate dal parametro <c>srcRect</c>.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `srcRect` parametro specifica una porzione rettangolare del `image` oggetto su cui disegnare. Questa parte viene ridimensionata per adattarsi all'interno del rettangolo specificato da di `destRect` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea un rettangolo di destinazione in cui disegnare l'immagine.  
  
-   Crea un rettangolo di origine da cui estrarre una parte dell'immagine.  
  
-   Imposta l'unità di misura del rettangolo di origine per pixel.  
  
-   Disegna l'immagine a schermo.  
  
 La posizione del rettangolo di destinazione consente di individuare l'immagine sullo schermo, le dimensioni dei rettangoli di origine e destinazione determinano le proporzioni dell'immagine disegnata e determinano le dimensioni del rettangolo di origine viene disegnata la porzione dell'immagine originale di schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#57)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#57)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#57](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.Point" /> che definiscono un parallelogramma.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte dell'oggetto <c>immagine</c> da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate dal parametro <c>srcRect</c>.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni di ricolorazione e gamma per l'oggetto <c>immagine</c>.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione indicata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.Point> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma.  
  
 Il `srcRect` parametro specifica una porzione rettangolare del`image` oggetto su cui disegnare. Questa parte viene adattata il parallelogramma specificato da di `destPoints` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono il parallelogramma in cui disegnare l'immagine.  
  
-   Crea un rettangolo per selezionare la parte dell'immagine da disegnare.  
  
-   Imposta l'unità di disegno al pixel delle immagini.  
  
-   Disegna l'immagine originale alla schermata.  
  
-   Crea un parallelogramma aggiuntivo in cui per disegnare un'immagine adattata.  
  
-   Crea e imposta gli attributi dell'immagine adattata per avere un valore più grande del normale gamma.  
  
-   Disegna l'immagine adattata alla schermata.  
  
 Per il parallelogramma originale, non regolato, la posizione individua l'immagine nella schermata e le dimensioni del rettangolo e le dimensioni e la forma del parallelogramma determina il ridimensionamento e inclinazione dell'immagine disegnata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#37)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#37)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.PointF" /> che definiscono un parallelogramma.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte dell'oggetto <c>immagine</c> da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate dal parametro <c>srcRect</c>.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni di ricolorazione e gamma per l'oggetto <c>immagine</c>.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.PointF> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma.  
  
 Il `srcRect` parametro specifica una porzione rettangolare del `image` oggetto su cui disegnare. Questa parte viene adattata il parallelogramma specificato da di `destPoints` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono il parallelogramma in cui disegnare l'immagine di destinazione.  
  
-   Crea un rettangolo di origine da cui estrarre una parte dell'immagine.  
  
-   Imposta l'unità di misura del rettangolo di origine per pixel.  
  
-   Disegna l'immagine originale alla schermata.  
  
-   Crea un parallelogramma aggiuntivo in cui per disegnare un'immagine adattata.  
  
-   Crea e imposta gli attributi dell'immagine adattata per avere un valore più grande del normale gamma.  
  
-   Disegna l'immagine adattata alla schermata.  
  
 Per l'originale, non regolato il parallelogramma, la posizione individua l'immagine su schermo, le dimensioni del rettangolo di origine e la dimensione e forma del parallelogramma destinazione determina il ridimensionamento e il taglio dell'immagine disegnata e le dimensioni del rettangolo determina la porzione dell'immagine originale viene disegnata sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#43)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#43)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#43](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * System.Drawing.Rectangle * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte dell'oggetto <c>immagine</c> da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate dal parametro <c>srcRect</c>.</param>
        <summary>Disegna una parte di un'immagine nella posizione specifica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> archivia un valore per larghezza in pixel e un valore per la risoluzione orizzontale (punti per pollice). La larghezza fisica, misurata in pollici, di un'immagine è la larghezza in pixel divisa per la risoluzione orizzontale. Ad esempio, un'immagine con una larghezza in pixel di 360 e una risoluzione orizzontale del 72 punti per pollice ha una larghezza fisica di 5 pollici. Note simile si applicano a altezza in pixel e l'altezza fisico.  
  
 Questo metodo crea una parte di un'immagine usando le dimensioni fisiche, in modo che la parte dell'immagine abbia le dimensioni corrette in pollici indipendentemente dalla risoluzione (punti per pollice) del dispositivo di visualizzazione. Si supponga, ad esempio, che una parte di immagine abbia una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice. Se si chiama questo metodo per disegnare una parte dell'immagine in un dispositivo che ha una risoluzione di 96 punti per pollice, la larghezza in pixel della porzione dell'immagine visualizzata sarà (216/72) * 96 = 288.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea le coordinate in corrispondenza della quale disegnare l'angolo superiore sinistro dell'immagine.  
  
-   Crea un rettangolo di origine da cui estrarre una parte dell'immagine.  
  
-   Imposta l'unità di misura del rettangolo di origine per pixel.  
  
-   Disegna l'immagine a schermo.  
  
 Le dimensioni del rettangolo di origine determinano la porzione dell'immagine originale viene disegnata sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#59)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#59)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#59](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#59)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="width">Larghezza dell'immagine disegnata.</param>
        <param name="height">Altezza dell'immagine disegnata.</param>
        <summary>Disegna l'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il rettangolo definito dal `x`, `y`, `width`, e `height` parametri determina la posizione e le dimensioni dell'immagine disegnata.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea la posizione e dimensioni di un rettangolo in cui disegnare l'immagine.  
  
-   Disegna l'immagine a schermo.  
  
 La posizione del rettangolo consente di individuare l'immagine nella schermata e le dimensioni dell'immagine originale e le dimensioni del rettangolo determina il ridimensionamento dell'immagine disegnata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#60)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#60)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#60](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * System.Drawing.RectangleF * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, x, y, srcRect, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte dell'oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate dal parametro <c>srcRect</c>.</param>
        <summary>Disegna una parte di un'immagine nella posizione specifica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> archivia un valore per larghezza in pixel e un valore per la risoluzione orizzontale (punti per pollice). La larghezza fisica, misurata in pollici, di un'immagine è la larghezza in pixel divisa per la risoluzione orizzontale. Ad esempio, un'immagine con una larghezza in pixel di 360 e una risoluzione orizzontale del 72 punti per pollice ha una larghezza fisica di 5 pollici. Note simile si applicano a altezza in pixel e l'altezza fisico.  
  
 Questo metodo crea una parte di un'immagine usando le dimensioni fisiche, in modo che la parte dell'immagine abbia le dimensioni corrette in pollici indipendentemente dalla risoluzione (punti per pollice) del dispositivo di visualizzazione. Si supponga, ad esempio, che una parte di immagine abbia una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice. Se si chiama questo metodo per disegnare una parte dell'immagine in un dispositivo che ha una risoluzione di 96 punti per pollice, la larghezza in pixel della porzione dell'immagine visualizzata sarà (216/72) * 96 = 288.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea le coordinate in corrispondenza della quale disegnare l'angolo superiore sinistro dell'immagine.  
  
-   Crea un rettangolo di origine da cui estrarre una parte dell'immagine.  
  
-   Imposta l'unità di misura del rettangolo di origine per pixel.  
  
-   Disegna l'immagine a schermo.  
  
 Le dimensioni del rettangolo di origine determinano la porzione dell'immagine originale viene disegnata sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#62)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#62)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#62](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * single * single * single * single -&gt; unit" Usage="graphics.DrawImage (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="width">Larghezza dell'immagine disegnata.</param>
        <param name="height">Altezza dell'immagine disegnata.</param>
        <summary>Disegna l'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il rettangolo definito dal `x`, `y`, `width`, e `height` parametri determina la posizione e le dimensioni dell'immagine disegnata.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea la posizione e dimensioni di un rettangolo in cui disegnare l'immagine.  
  
-   Disegna l'immagine a schermo.  
  
 La posizione del rettangolo consente di individuare l'immagine nella schermata e le dimensioni dell'immagine originale e le dimensioni del rettangolo determina il ridimensionamento dell'immagine disegnata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#63)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#63)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#63](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.PointF" /> che definiscono un parallelogramma.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte dell'oggetto <c>immagine</c> da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate dal parametro <c>srcRect</c>.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni di ricolorazione e gamma per l'oggetto <c>immagine</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> che specifica un metodo da chiamare durante il disegno dell'immagine. Questo metodo viene chiamato frequentemente per controllare se sia necessario interrompere l'esecuzione del metodo <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> secondo i criteri determinati dall'applicazione.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.PointF> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma.  
  
 Il `srcRect` parametro specifica una porzione rettangolare del `image` oggetto su cui disegnare. Questa parte viene adattata il parallelogramma specificato da di `destPoints` parametro.  
  
 Questo overload con il `callback` parametro fornisce i mezzi per interrompere il disegno di un'immagine, dopo l'avvio in base ai criteri determinati dall'applicazione. Ad esempio, un'applicazione è stato possibile avviare la creazione di un'immagine di grandi dimensioni e l'utente può scorrere l'immagine fuori dallo schermo, in cui i casi l'applicazione è stato possibile arrestare il disegno.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice prima di tutto definisce un metodo di callback per il <xref:System.Drawing.Graphics.DrawImageAbort> delegare; la definizione è semplicistica e verifica soltanto se il <xref:System.Drawing.Graphics.DrawImage%2A> metodo chiama il delegato con un valore null `callBackData` parametro. Il corpo principale dell'esempio esegue le azioni seguenti:  
  
-   Crea un'istanza di <xref:System.Drawing.Graphics.DrawImageAbort> metodo di callback:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono il parallelogramma in cui disegnare l'immagine.  
  
-   Crea un rettangolo per selezionare la parte dell'immagine da disegnare.  
  
-   Imposta l'unità di disegno al pixel delle immagini.  
  
-   Disegna l'immagine originale alla schermata.  
  
-   Crea un parallelogramma aggiuntivo in cui per disegnare un'immagine adattata.  
  
-   Crea e imposta gli attributi dell'immagine adattata per avere un valore più grande del normale gamma.  
  
-   Disegna l'immagine adattata alla schermata.  
  
 Per il parallelogramma originale, non regolato, la posizione individua l'immagine nella schermata e le dimensioni del rettangolo e le dimensioni e la forma del parallelogramma determina il ridimensionamento e inclinazione dell'immagine disegnata.  
  
 Poiché in questo esempio viene usato un overload che non supera un `callBackData` parametro, il <xref:System.Drawing.Graphics.DrawImageAbort> callback restituisce `true`, determinando in tal modo il <xref:System.Drawing.Graphics.DrawImage%2A> metodo end e il codice di gestione delle eccezioni inclusi nell'esempio viene stampato il testo dell'eccezione, anziché di disegno dell'immagine.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#38)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#38)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.PointF" /> che definiscono un parallelogramma.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte dell'oggetto <c>immagine</c> da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate dal parametro <c>srcRect</c>.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni di ricolorazione e gamma per l'oggetto <c>immagine</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> che specifica un metodo da chiamare durante il disegno dell'immagine. Questo metodo viene chiamato frequentemente per controllare se sia necessario interrompere l'esecuzione del metodo <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> secondo i criteri determinati dall'applicazione.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.PointF> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma.  
  
 Il `srcRect` parametro specifica una porzione rettangolare del `image` oggetto su cui disegnare. Questa parte viene adattata il parallelogramma specificato da di `destPoints` parametro.  
  
 Questo overload con il `callback` parametro fornisce i mezzi per interrompere il disegno di un'immagine, dopo l'avvio in base ai criteri determinati dall'applicazione. Ad esempio, un'applicazione è stato possibile avviare la creazione di un'immagine di grandi dimensioni e l'utente può scorrere l'immagine fuori dallo schermo, in cui i casi l'applicazione è stato possibile arrestare il disegno.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice prima di tutto definisce un metodo di callback per il <xref:System.Drawing.Graphics.DrawImageAbort> delegare; la definizione è semplicistica e verifica soltanto se il <xref:System.Drawing.Graphics.DrawImage%2A> metodo chiama il delegato con un valore null `callBackData` parametro. Il corpo principale dell'esempio esegue le azioni seguenti:  
  
-   Crea un'istanza di <xref:System.Drawing.Graphics.DrawImageAbort> metodo di callback.  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono il parallelogramma in cui disegnare l'immagine.  
  
-   Crea un rettangolo per selezionare la parte dell'immagine da disegnare.  
  
-   Imposta l'unità di disegno al pixel delle immagini.  
  
-   Disegna l'immagine originale alla schermata.  
  
-   Crea un parallelogramma aggiuntivo in cui per disegnare un'immagine adattata.  
  
-   Crea e imposta gli attributi dell'immagine adattata per avere un valore più grande del normale gamma.  
  
-   Disegna l'immagine adattata alla schermata.  
  
 Per il parallelogramma originale, non regolato, la posizione individua l'immagine nella schermata e le dimensioni del rettangolo e le dimensioni e la forma del parallelogramma determina il ridimensionamento e inclinazione dell'immagine disegnata.  
  
 Poiché in questo esempio viene usato un overload che non supera un `callBackData` parametro, il <xref:System.Drawing.Graphics.DrawImageAbort> callback restituisce `true`, determinando in tal modo il <xref:System.Drawing.Graphics.DrawImage%2A> metodo end e il codice di gestione delle eccezioni inclusi nell'esempio viene stampato il testo dell'eccezione, anziché di disegno dell'immagine.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#44)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#44)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#44](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.PointF" /> che definiscono un parallelogramma.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte dell'oggetto <c>immagine</c> da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate dal parametro <c>srcRect</c>.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni di ricolorazione e gamma per l'oggetto <c>immagine</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> che specifica un metodo da chiamare durante il disegno dell'immagine. Questo metodo viene chiamato frequentemente per controllare se sia necessario interrompere l'esecuzione del metodo <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> secondo i criteri determinati dall'applicazione.</param>
        <param name="callbackData">Valore che specifica ulteriori dati per il delegato <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> da usare quando si verifica se interrompere l'esecuzione del metodo <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.PointF> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma.  
  
 Il `srcRect` parametro specifica una porzione rettangolare del `image` oggetto su cui disegnare. Questa parte viene adattata il parallelogramma specificato da di `destPoints` parametro.  
  
 Questo overload con il `callback` e `callbackData` parametri fornisce i mezzi per interrompere il disegno di un'immagine, dopo l'avvio in base ai criteri e dati determinati dall'applicazione. Ad esempio, un'applicazione è stato possibile avviare la creazione di un'immagine di grandi dimensioni e l'utente può scorrere l'immagine fuori dallo schermo, in cui i casi l'applicazione è stato possibile arrestare il disegno.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice prima di tutto definisce un metodo di callback per il <xref:System.Drawing.Graphics.DrawImageAbort> delegare; la definizione è semplicistica e verifica soltanto se il <xref:System.Drawing.Graphics.DrawImage%2A> metodo chiama il delegato con un valore null `callBackData` parametro. Il corpo principale dell'esempio esegue le azioni seguenti:  
  
-   Crea un'istanza di <xref:System.Drawing.Graphics.DrawImageAbort> metodo di callback.  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono il parallelogramma in cui disegnare l'immagine.  
  
-   Crea un rettangolo per selezionare la parte dell'immagine da disegnare.  
  
-   Imposta l'unità di disegno al pixel delle immagini.  
  
-   Disegna l'immagine originale alla schermata.  
  
-   Crea un parallelogramma aggiuntivo in cui per disegnare un'immagine adattata.  
  
-   Crea e imposta gli attributi dell'immagine adattata per avere un valore più grande del normale gamma.  
  
-   Disegna l'immagine adattata alla schermata.  
  
 Per il parallelogramma originale, non regolato, la posizione individua l'immagine nella schermata e le dimensioni del rettangolo e le dimensioni e la forma del parallelogramma determina il ridimensionamento e inclinazione dell'immagine disegnata.  
  
 Poiché in questo esempio viene usato un overload che passa un `callBackData` parametro, il <xref:System.Drawing.Graphics.DrawImageAbort> callback restituisce `false`, determinando in tal modo il <xref:System.Drawing.Graphics.DrawImage%2A> metodo continuare e l'esempio disegna l'immagine adattata alla schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#39)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#39)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#39](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#39)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback, int callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback, int32 callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback, int callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * int -&gt; unit" Usage="graphics.DrawImage (image, destPoints, srcRect, srcUnit, imageAttr, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.PointF" /> che definiscono un parallelogramma.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte dell'oggetto <c>immagine</c> da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate dal parametro <c>srcRect</c>.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni di ricolorazione e gamma per l'oggetto <c>immagine</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> che specifica un metodo da chiamare durante il disegno dell'immagine. Questo metodo viene chiamato frequentemente per controllare se sia necessario interrompere l'esecuzione del metodo <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" /> secondo i criteri determinati dall'applicazione.</param>
        <param name="callbackData">Valore che specifica ulteriori dati per il delegato <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> da usare quando si verifica se interrompere l'esecuzione del metodo <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.Int32)" />.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.PointF> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma.  
  
 Il `srcRect` parametro specifica una porzione rettangolare del `image` oggetto su cui disegnare. Questa parte viene adattata il parallelogramma specificato da di `destPoints` parametro.  
  
 Questo overload con il `callback` e `callbackData` parametri fornisce i mezzi per interrompere il disegno di un'immagine, dopo l'avvio in base ai criteri e dati determinati dall'applicazione. Ad esempio, un'applicazione è stato possibile avviare la creazione di un'immagine di grandi dimensioni e l'utente può scorrere l'immagine fuori dallo schermo, in cui i casi l'applicazione è stato possibile arrestare il disegno.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro delle `Pa` <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice prima di tutto definisce un metodo di callback per il <xref:System.Drawing.Graphics.DrawImageAbort> delegare; la definizione è semplicistica e verifica soltanto se il <xref:System.Drawing.Graphics.DrawImage%2A> metodo chiama il delegato con un valore null `callBackData` parametro. Il corpo principale dell'esempio esegue le azioni seguenti:  
  
-   Crea un'istanza di <xref:System.Drawing.Graphics.DrawImageAbort> metodo di callback.  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono il parallelogramma in cui disegnare l'immagine.  
  
-   Crea un rettangolo per selezionare la parte dell'immagine da disegnare.  
  
-   Imposta l'unità di disegno al pixel delle immagini.  
  
-   Disegna l'immagine originale alla schermata.  
  
-   Crea un parallelogramma aggiuntivo in cui per disegnare un'immagine adattata.  
  
-   Crea e imposta gli attributi dell'immagine adattata per avere un valore più grande del normale gamma.  
  
-   Disegna l'immagine adattata alla schermata.  
  
 Per il parallelogramma originale, non regolato, la posizione individua l'immagine nella schermata e le dimensioni del rettangolo e le dimensioni e la forma del parallelogramma determina il ridimensionamento e inclinazione dell'immagine disegnata.  
  
 Poiché in questo esempio viene usato un overload che passa un `callBackData` parametro, il <xref:System.Drawing.Graphics.DrawImageAbort> callback restituisce `false`, determinando in tal modo il <xref:System.Drawing.Graphics.DrawImage%2A> metodo continuare e l'esempio disegna l'immagine adattata alla schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#45)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#45)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#45](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#45)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni dell'immagine disegnata. L'immagine viene adattata al rettangolo.</param>
        <param name="srcX">Coordinata X dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcY">Coordinata Y dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcWidth">Larghezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcHeight">Altezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate per determinare il rettangolo di origine.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `srcX`, `srcY`, `srcWidth`, e `srcHeight` i parametri specificano una porzione rettangolare, del `image` oggetto su cui disegnare. Il rettangolo è rispetto all'angolo superiore sinistro dell'immagine di origine. Questa parte viene ridimensionata per adattarsi all'interno del rettangolo specificato da di `destRect` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea un rettangolo di destinazione in cui disegnare l'immagine.  
  
-   Crea le coordinate di un rettangolo di origine da cui estrarre una parte dell'immagine.  
  
-   Imposta l'unità di misura del rettangolo di origine per pixel.  
  
-   Disegna l'immagine a schermo.  
  
 La posizione del rettangolo di destinazione consente di individuare l'immagine nella schermata e le dimensioni dei rettangoli di origine e destinazione determinano le proporzioni dell'immagine disegnata e determinano le dimensioni del rettangolo di origine viene disegnata la porzione dell'immagine originale di schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#48)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#48)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni dell'immagine disegnata. L'immagine viene adattata al rettangolo.</param>
        <param name="srcX">Coordinata X dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcY">Coordinata Y dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcWidth">Larghezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcHeight">Altezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate per determinare il rettangolo di origine.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `srcX`, `srcY`, `srcWidth`, e `srcHeight` i parametri specificano una porzione rettangolare, del `image` oggetto su cui disegnare. Il rettangolo è rispetto all'angolo superiore sinistro dell'immagine di origine. Questa parte viene ridimensionata per adattarsi all'interno del rettangolo specificato da di `destRect` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea le coordinate di un rettangolo di destinazione in cui disegnare l'immagine.  
  
-   Crea un rettangolo di origine da cui estrarre una parte dell'immagine.  
  
-   Imposta l'unità di misura del rettangolo di origine per pixel.  
  
-   Disegna l'immagine a schermo.  
  
 La posizione del rettangolo di destinazione consente di individuare l'immagine sullo schermo, le dimensioni dei rettangoli di origine e destinazione determinano le proporzioni dell'immagine disegnata e determinano le dimensioni del rettangolo di origine viene disegnata la porzione dell'immagine originale di schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#52)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#52)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#52](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni dell'immagine disegnata. L'immagine viene adattata al rettangolo.</param>
        <param name="srcX">Coordinata X dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcY">Coordinata Y dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcWidth">Larghezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcHeight">Altezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate per determinare il rettangolo di origine.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni di ricolorazione e gamma per l'oggetto <c>immagine</c>.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `srcX`, `srcY`, `srcWidth`, e `srcHeight` i parametri specificano una porzione rettangolare, del `image` oggetto su cui disegnare. Il rettangolo è rispetto all'angolo superiore sinistro dell'immagine di origine. Questa parte viene ridimensionata per adattarsi all'interno del rettangolo specificato da di `destRect` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea un rettangolo di destinazione in cui disegnare l'immagine.  
  
-   Crea le coordinate di un rettangolo di origine da cui estrarre una parte dell'immagine.  
  
-   Imposta l'unità di misura del rettangolo di origine per pixel.  
  
-   Disegna l'immagine originale alla schermata.  
  
-   Crea un rettangolo aggiuntivo in cui per disegnare un'immagine adattata.  
  
-   Crea e imposta gli attributi dell'immagine adattata per avere un valore più grande del normale gamma.  
  
-   Disegna l'immagine adattata alla schermata.  
  
 Per il rettangolo di destinazione originale, non regolato, la posizione individua l'immagine nella schermata e le dimensioni dei rettangoli di origine e destinazione determinano le proporzioni dell'immagine disegnata e le dimensioni del rettangolo di origine determinano quale parte i immagine originale viene disegnata sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#49)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#49)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#49](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#49)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni dell'immagine disegnata. L'immagine viene adattata al rettangolo.</param>
        <param name="srcX">Coordinata X dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcY">Coordinata Y dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcWidth">Larghezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcHeight">Altezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate per determinare il rettangolo di origine.</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni di ricolorazione e gamma per l'oggetto <c>immagine</c>.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `srcX`, `srcY`, `srcWidth`, e `srcHeight` i parametri specificano una porzione rettangolare, del `image` oggetto su cui disegnare. Il rettangolo è rispetto all'angolo superiore sinistro dell'immagine di origine. Questa parte viene ridimensionata per adattarsi all'interno del rettangolo specificato da di `destRect` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea un rettangolo di destinazione in cui disegnare l'immagine.  
  
-   Crea le coordinate di un rettangolo di origine da cui estrarre una parte dell'immagine.  
  
-   Imposta l'unità di misura del rettangolo di origine per pixel.  
  
-   Disegna l'immagine originale alla schermata.  
  
-   Crea un rettangolo aggiuntivo in cui per disegnare un'immagine adattata.  
  
-   Crea e imposta gli attributi dell'immagine adattata per avere un valore più grande del normale gamma.  
  
-   Disegna l'immagine adattata alla schermata.  
  
 Per il rettangolo di destinazione originale, non regolato, la posizione individua l'immagine nella schermata e le dimensioni dei rettangoli di origine e destinazione determinano le proporzioni dell'immagine disegnata e le dimensioni del rettangolo di origine determinano quale parte i immagine originale viene disegnata sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#53)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#53)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#53](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttr, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttr, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttr, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttr, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni dell'immagine disegnata. L'immagine viene adattata al rettangolo.</param>
        <param name="srcX">Coordinata X dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcY">Coordinata Y dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcWidth">Larghezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcHeight">Altezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate per determinare il rettangolo di origine.</param>
        <param name="imageAttr">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni di ricolorazione e gamma per l'<c>immagine</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> che specifica un metodo da chiamare durante il disegno dell'immagine. Questo metodo viene chiamato frequentemente per controllare se sia necessario interrompere l'esecuzione del metodo <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> secondo i criteri determinati dall'applicazione.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `srcX`, `srcY`, `srcWidth`, e `srcHeight` i parametri specificano una porzione rettangolare, del `image` oggetto su cui disegnare. Il rettangolo è rispetto all'angolo superiore sinistro dell'immagine di origine. Questa parte viene ridimensionata per adattarsi all'interno del rettangolo specificato da di `destRect` oggetto.  
  
 Questo overload con il `callback` parametro fornisce i mezzi per interrompere il disegno di un'immagine, dopo l'avvio in base ai criteri determinati dall'applicazione. Ad esempio, un'applicazione è stato possibile avviare la creazione di un'immagine di grandi dimensioni e l'utente può scorrere l'immagine fuori dallo schermo, in cui i casi l'applicazione è stato possibile arrestare il disegno.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice prima di tutto definisce un metodo di callback per il <xref:System.Drawing.Graphics.DrawImageAbort> delegare; la definizione è semplicistica e verifica soltanto se il <xref:System.Drawing.Graphics.DrawImage%2A> metodo chiama il delegato con un valore null `callBackData` parametro. Il corpo principale dell'esempio esegue le azioni seguenti:  
  
-   Crea un'istanza di <xref:System.Drawing.Graphics.DrawImageAbort> metodo di callback.  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono un rettangolo di destinazione in cui disegnare l'immagine.  
  
-   Crea un rettangolo di origine per selezionare la parte dell'immagine da disegnare.  
  
-   Imposta l'unità di disegno al pixel delle immagini.  
  
-   Disegna l'immagine originale alla schermata.  
  
-   Crea un rettangolo di destinazione aggiuntive in cui per disegnare un'immagine adattata.  
  
-   Crea e imposta gli attributi dell'immagine adattata per avere un valore più grande del normale gamma.  
  
-   Disegna l'immagine adattata alla schermata.  
  
 Per il rettangolo di destinazione originale, non regolato, la posizione individua l'immagine nella schermata e le dimensioni del rettangolo di origine e la dimensione e forma del rettangolo di destinazione determina il ridimensionamento dell'immagine disegnata.  
  
 Poiché in questo esempio viene usato un overload che non supera un `callBackData` parametro, il <xref:System.Drawing.Graphics.DrawImageAbort> callback restituisce `true`, determinando in tal modo il <xref:System.Drawing.Graphics.DrawImage%2A> metodo end e il codice di gestione delle eccezioni inclusi nell'esempio viene stampato il testo dell'eccezione, anziché di disegno dell'immagine.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#50)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#50)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#50](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni dell'immagine disegnata. L'immagine viene adattata al rettangolo.</param>
        <param name="srcX">Coordinata X dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcY">Coordinata Y dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcWidth">Larghezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcHeight">Altezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate per determinare il rettangolo di origine.</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni di ricolorazione e gamma per l'oggetto <c>immagine</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> che specifica un metodo da chiamare durante il disegno dell'immagine. Questo metodo viene chiamato frequentemente per controllare se sia necessario interrompere l'esecuzione del metodo <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)" /> secondo i criteri determinati dall'applicazione.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `srcX`, `srcY`, `srcWidth`, e `srcHeight` i parametri specificano una porzione rettangolare, del `image` oggetto su cui disegnare. Il rettangolo è rispetto all'angolo superiore sinistro dell'immagine di origine. Questa parte viene ridimensionata per adattarsi all'interno del rettangolo specificato da di `destRect` parametro.  
  
 Questo overload con il `callback` parametro fornisce i mezzi per interrompere il disegno di un'immagine, dopo l'avvio in base ai criteri determinati dall'applicazione. Ad esempio, un'applicazione è stato possibile avviare la creazione di un'immagine di grandi dimensioni e l'utente può scorrere l'immagine fuori dallo schermo, in cui i casi l'applicazione è stato possibile arrestare il disegno.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice prima di tutto definisce un metodo di callback per il <xref:System.Drawing.Graphics.DrawImageAbort> delegare; la definizione è semplicistica e verifica soltanto se il <xref:System.Drawing.Graphics.DrawImage%2A> metodo chiama il delegato con un valore null `callBackData` parametro. Il corpo principale dell'esempio esegue le azioni seguenti:  
  
-   Crea un'istanza di <xref:System.Drawing.Graphics.DrawImageAbort> metodo di callback.  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono un rettangolo di destinazione in cui disegnare l'immagine.  
  
-   Crea un rettangolo di origine per selezionare la parte dell'immagine da disegnare.  
  
-   Imposta l'unità di disegno al pixel delle immagini.  
  
-   Disegna l'immagine originale alla schermata.  
  
-   Crea un rettangolo di destinazione aggiuntive in cui per disegnare un'immagine adattata.  
  
-   Crea e imposta gli attributi dell'immagine adattata per avere un valore più grande del normale gamma.  
  
-   Disegna l'immagine adattata alla schermata.  
  
 Per il rettangolo di destinazione originale, non regolato, la posizione individua l'immagine nella schermata e le dimensioni del rettangolo di origine e la dimensione e forma del rettangolo di destinazione determina il ridimensionamento dell'immagine disegnata.  
  
 Poiché in questo esempio viene usato un overload che non supera un `callBackData` parametro, il <xref:System.Drawing.Graphics.DrawImageAbort> callback restituisce `true`, determinando in tal modo il <xref:System.Drawing.Graphics.DrawImage%2A> metodo end e il codice di gestione delle eccezioni inclusi nell'esempio viene stampato il testo dell'eccezione, anziché di disegno dell'immagine.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#54)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#54)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, int32 srcX, int32 srcY, int32 srcWidth, int32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * int * int * int * int * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Int32" />
        <Parameter Name="srcY" Type="System.Int32" />
        <Parameter Name="srcWidth" Type="System.Int32" />
        <Parameter Name="srcHeight" Type="System.Int32" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni dell'immagine disegnata. L'immagine viene adattata al rettangolo.</param>
        <param name="srcX">Coordinata X dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcY">Coordinata Y dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcWidth">Larghezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcHeight">Altezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate per determinare il rettangolo di origine.</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni di ricolorazione e gamma per l'oggetto <c>immagine</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> che specifica un metodo da chiamare durante il disegno dell'immagine. Questo metodo viene chiamato frequentemente per controllare se sia necessario interrompere l'esecuzione del metodo <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> secondo i criteri determinati dall'applicazione.</param>
        <param name="callbackData">Valore che specifica ulteriori dati per il delegato <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> da usare quando si verifica se interrompere l'esecuzione del metodo <see langword="DrawImage" />.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `srcX`, `srcY`, `srcWidth`, e `srcHeight` i parametri specificano una porzione rettangolare, del `image` oggetto su cui disegnare. Il rettangolo è rispetto all'angolo superiore sinistro dell'immagine di origine. Questa parte viene ridimensionata per adattarsi all'interno del rettangolo specificato da di `destRect` parametro.  
  
 Questo overload con il `callback` e `callbackData` parametri fornisce i mezzi per interrompere il disegno di un'immagine, dopo l'avvio in base ai criteri e dati determinati dall'applicazione. Ad esempio, un'applicazione è stato possibile avviare la creazione di un'immagine di grandi dimensioni e l'utente può scorrere l'immagine fuori dallo schermo, in cui i casi l'applicazione è stato possibile arrestare il disegno.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice prima di tutto definisce un metodo di callback per il <xref:System.Drawing.Graphics.DrawImageAbort> delegare; la definizione è semplicistica e verifica soltanto se il <xref:System.Drawing.Graphics.DrawImage%2A> metodo chiama il delegato con un valore null `callBackData` parametro. Il corpo principale dell'esempio esegue le azioni seguenti:  
  
-   Crea un'istanza di <xref:System.Drawing.Graphics.DrawImageAbort> metodo di callback.  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono un rettangolo di destinazione in cui disegnare l'immagine.  
  
-   Crea un rettangolo di origine per selezionare la parte dell'immagine da disegnare.  
  
-   Imposta l'unità di disegno al pixel delle immagini.  
  
-   Disegna l'immagine originale alla schermata.  
  
-   Crea un rettangolo di destinazione aggiuntive in cui per disegnare un'immagine adattata.  
  
-   Crea e imposta gli attributi dell'immagine adattata per avere un valore più grande del normale gamma.  
  
-   Disegna l'immagine adattata alla schermata.  
  
 Per il rettangolo di destinazione originale, non regolato, la posizione individua l'immagine nella schermata e le dimensioni del rettangolo di origine e la dimensione e forma del rettangolo di destinazione determina il ridimensionamento dell'immagine disegnata.  
  
 Poiché in questo esempio viene usato un overload che passa un `callBackData` parametro, il <xref:System.Drawing.Graphics.DrawImageAbort> callback restituisce `false`, determinando in tal modo il <xref:System.Drawing.Graphics.DrawImage%2A> metodo continuare e l'esempio disegna l'immagine adattata alla schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CPP/form1.cpp#51)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/CS/form1.cs#51)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples#51](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples/VB/form1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (System.Drawing.Image image, System.Drawing.Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Imaging.ImageAttributes imageAttrs, System.Drawing.Graphics.DrawImageAbort callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(class System.Drawing.Image image, valuetype System.Drawing.Rectangle destRect, float32 srcX, float32 srcY, float32 srcWidth, float32 srcHeight, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Imaging.ImageAttributes imageAttrs, class System.Drawing.Graphics/DrawImageAbort callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImage(System::Drawing::Image ^ image, System::Drawing::Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Imaging::ImageAttributes ^ imageAttrs, System::Drawing::Graphics::DrawImageAbort ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.DrawImage : System.Drawing.Image * System.Drawing.Rectangle * single * single * single * single * System.Drawing.GraphicsUnit * System.Drawing.Imaging.ImageAttributes * System.Drawing.Graphics.DrawImageAbort * nativeint -&gt; unit" Usage="graphics.DrawImage (image, destRect, srcX, srcY, srcWidth, srcHeight, srcUnit, imageAttrs, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcX" Type="System.Single" />
        <Parameter Name="srcY" Type="System.Single" />
        <Parameter Name="srcWidth" Type="System.Single" />
        <Parameter Name="srcHeight" Type="System.Single" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="imageAttrs" Type="System.Drawing.Imaging.ImageAttributes" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+DrawImageAbort" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni dell'immagine disegnata. L'immagine viene adattata al rettangolo.</param>
        <param name="srcX">Coordinata X dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcY">Coordinata Y dell'angolo superiore sinistro della parte dell'immagine di origine da disegnare.</param>
        <param name="srcWidth">Larghezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcHeight">Altezza della parte dell'immagine di origine da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica le unità di misura usate per determinare il rettangolo di origine.</param>
        <param name="imageAttrs">
          <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni di ricolorazione e gamma per l'oggetto <c>immagine</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> che specifica un metodo da chiamare durante il disegno dell'immagine. Questo metodo viene chiamato frequentemente per controllare se sia necessario interrompere l'esecuzione del metodo <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort,System.IntPtr)" /> secondo i criteri determinati dall'applicazione.</param>
        <param name="callbackData">Valore che specifica ulteriori dati per il delegato <see cref="T:System.Drawing.Graphics.DrawImageAbort" /> da usare quando si verifica se interrompere l'esecuzione del metodo <see langword="DrawImage" />.</param>
        <summary>Disegna la parte specificata dell'oggetto <see cref="T:System.Drawing.Image" /> specificato nella posizione e con le dimensioni specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `srcX`, `srcY`, `srcWidth`, e `srcHeight` i parametri specificano una porzione rettangolare, del `image` oggetto su cui disegnare. Il rettangolo è rispetto all'angolo superiore sinistro dell'immagine di origine. Questa parte viene ridimensionata per adattarsi all'interno del rettangolo specificato da di `destRect` parametro.  
  
 Questo overload con il `callback` e `callbackData` parametri fornisce i mezzi per interrompere il disegno di un'immagine, dopo l'avvio in base ai criteri e dati determinati dall'applicazione. Ad esempio, un'applicazione è stato possibile avviare la creazione di un'immagine di grandi dimensioni e l'utente può scorrere l'immagine fuori dallo schermo, in cui i casi l'applicazione è stato possibile arrestare il disegno.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice prima di tutto definisce un metodo di callback per il <xref:System.Drawing.Graphics.DrawImageAbort> delegare; la definizione è semplicistica e verifica soltanto se il <xref:System.Drawing.Graphics.DrawImage%2A> metodo chiama il delegato con un valore null `callBackData` parametro. Il corpo principale dell'esempio esegue le azioni seguenti:  
  
-   Crea un'istanza di <xref:System.Drawing.Graphics.DrawImageAbort> metodo di callback.  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Creazione di punti che definiscono un rettangolo di destinazione in cui disegnare l'immagine.  
  
-   Crea un rettangolo di origine per selezionare la parte dell'immagine da disegnare.  
  
-   Imposta l'unità di disegno al pixel delle immagini.  
  
-   Disegna l'immagine originale alla schermata.  
  
-   Crea un rettangolo di destinazione aggiuntive in cui per disegnare un'immagine adattata.  
  
-   Crea e imposta gli attributi dell'immagine adattata per avere un valore più grande del normale gamma.  
  
-   Disegna l'immagine adattata alla schermata.  
  
 Per il rettangolo di destinazione originale, non regolato, la posizione individua l'immagine nella schermata e le dimensioni del rettangolo di origine e la dimensione e forma del rettangolo di destinazione determina il ridimensionamento dell'immagine disegnata.  
  
 Poiché in questo esempio viene usato un overload che passa un `callBackData` parametro, il <xref:System.Drawing.Graphics.DrawImageAbort> callback restituisce `false`, determinando in tal modo il <xref:System.Drawing.Graphics.DrawImage%2A> metodo continuare e l'esempio disegna l'immagine adattata alla schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#55)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#55)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawImageUnscaled">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna l'immagine specificata usando le dimensioni fisiche originali nella posizione indicata da una coppia di coordinate.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Point -&gt; unit" Usage="graphics.DrawImageUnscaled (image, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="point">Struttura <see cref="T:System.Drawing.Point" /> che determina l'angolo superiore sinistro dell'immagine disegnata.</param>
        <summary>Disegna l'immagine specificata nella posizione indicata e usando le dimensioni fisiche originali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> archivia un valore per larghezza in pixel e un valore per la risoluzione orizzontale (punti per pollice). La larghezza fisica, misurata in pollici, di un'immagine è la larghezza in pixel divisa per la risoluzione orizzontale. Ad esempio, un'immagine con una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice ha una larghezza fisica di 3 pollici. Note simile si applicano a altezza in pixel e l'altezza fisico.  
  
 Il <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> metodo disegna un'immagine usando le dimensioni fisiche, in modo che l'immagine presenterà le dimensioni corrette in pollici indipendentemente dalla risoluzione (punti per pollice) del dispositivo di visualizzazione. Si supponga, ad esempio, che un'immagine ha una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice. Se si chiama <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> per disegnare l'immagine in un dispositivo che ha una risoluzione di 96 punti per pollice, la larghezza in pixel dell'immagine sottoposta a rendering sarà (216/72) * 96 = 288.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg nella cartella dell'esempio.  
  
-   Crea un punto in cui disegnare l'angolo superiore sinistro dell'immagine.  
  
-   Disegna l'intera immagine usando le dimensioni fisiche.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#64)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#64)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#64](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaled (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> che rappresenta l'angolo superiore sinistro dell'immagine disegnata. Le proprietà X e Y del rettangolo determinano l'angolo superiore sinistro. Le proprietà di larghezza e di altezza vengono ignorate.</param>
        <summary>Disegna l'immagine specificata nella posizione indicata e usando le dimensioni fisiche originali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> archivia un valore per larghezza in pixel e un valore per la risoluzione orizzontale (punti per pollice). La larghezza fisica, misurata in pollici, di un'immagine è la larghezza in pixel divisa per la risoluzione orizzontale. Ad esempio, un'immagine con una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice ha una larghezza fisica di 3 pollici. Note simile si applicano a altezza in pixel e l'altezza fisico.  
  
 Il <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> metodo disegna un'immagine usando le dimensioni fisiche, in modo che l'immagine presenterà le dimensioni corrette in pollici indipendentemente dalla risoluzione (punti per pollice) del dispositivo di visualizzazione. Si supponga, ad esempio, che un'immagine ha una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice. Se si chiama <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> per disegnare l'immagine in un dispositivo che ha una risoluzione di 96 punti per pollice, la larghezza in pixel dell'immagine sottoposta a rendering sarà (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <summary>Disegna l'immagine specificata usando le dimensioni fisiche originali nella posizione indicata da una coppia di coordinate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> archivia un valore per larghezza in pixel e un valore per la risoluzione orizzontale (punti per pollice). La larghezza fisica, misurata in pollici, di un'immagine è la larghezza in pixel divisa per la risoluzione orizzontale. Ad esempio, un'immagine con una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice ha una larghezza fisica di 3 pollici. Note simile si applicano a altezza in pixel e l'altezza fisico.  
  
 Il <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> metodo disegna un'immagine usando le dimensioni fisiche, in modo che l'immagine presenterà le dimensioni corrette in pollici indipendentemente dalla risoluzione (punti per pollice) del dispositivo di visualizzazione. Si supponga, ad esempio, che un'immagine ha una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice. Se si chiama <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> per disegnare l'immagine in un dispositivo che ha una risoluzione di 96 punti per pollice, la larghezza in pixel dell'immagine sottoposta a rendering sarà (216/72) * 96 = 288.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'immagine da un file JPEG, jpg, nella cartella dell'esempio.  
  
-   Crea un punto in cui disegnare l'angolo superiore sinistro dell'immagine.  
  
-   Disegna l'intera immagine usando le dimensioni fisiche.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#65)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#65)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#65](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#65)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaled">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaled (System.Drawing.Image image, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaled(class System.Drawing.Image image, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaled(System::Drawing::Image ^ image, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaled : System.Drawing.Image * int * int * int * int -&gt; unit" Usage="graphics.DrawImageUnscaled (image, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="image">Oggetto <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro dell'immagine disegnata.</param>
        <param name="width">Non usato.</param>
        <param name="height">Non usato.</param>
        <summary>Disegna l'immagine specificata nella posizione indicata e usando le dimensioni fisiche originali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Drawing.Image> archivia un valore per larghezza in pixel e un valore per la risoluzione orizzontale (punti per pollice). La larghezza fisica, misurata in pollici, di un'immagine è la larghezza in pixel divisa per la risoluzione orizzontale. Ad esempio, un'immagine con una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice ha una larghezza fisica di 3 pollici. Note simile si applicano a altezza in pixel e l'altezza fisico.  
  
 Il <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> metodo disegna un'immagine usando le dimensioni fisiche, in modo che l'immagine presenterà le dimensioni corrette in pollici indipendentemente dalla risoluzione (punti per pollice) del dispositivo di visualizzazione. Si supponga, ad esempio, che un'immagine ha una larghezza in pixel del 216 e una risoluzione orizzontale del 72 punti per pollice. Se si chiama <xref:System.Drawing.Graphics.DrawImageUnscaled%2A> per disegnare l'immagine in un dispositivo che ha una risoluzione di 96 punti per pollice, la larghezza in pixel dell'immagine sottoposta a rendering sarà (216/72) * 96 = 288.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawImageUnscaledAndClipped">
      <MemberSignature Language="C#" Value="public void DrawImageUnscaledAndClipped (System.Drawing.Image image, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImageUnscaledAndClipped(class System.Drawing.Image image, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawImageUnscaledAndClipped(System.Drawing.Image,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawImageUnscaledAndClipped(System::Drawing::Image ^ image, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawImageUnscaledAndClipped : System.Drawing.Image * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawImageUnscaledAndClipped (image, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="image">Classe <see cref="T:System.Drawing.Image" /> da disegnare.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> in cui disegnare l'immagine.</param>
        <summary>Disegna l'immagine specificata senza ridimensionarla e, se necessario, la ritaglia per adattarla al rettangolo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo del metodo <xref:System.Drawing.Graphics.DrawImageUnscaledAndClipped%2A>. Per eseguire questo esempio, incollarlo in un modulo di Windows. Handle del modulo <xref:System.Windows.Forms.Control.Paint> eventi e chiamate di `DrawImageUnscaled` metodo dal <xref:System.Windows.Forms.Control.Paint> gestione degli eventi, passando `e` come <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-csharp[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/CS/Form1.cs#8)]
 [!code-vb[System.Drawing.MiscWhidbeySnippets#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscWhidbeySnippets/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLine">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna una linea che connette i due punti specificati dalle coppie di coordinate.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.Point pt1, System.Drawing.Point pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.Point pt1, valuetype System.Drawing.Point pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::Point pt1, System::Drawing::Point pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.Point * System.Drawing.Point -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.Point" />
        <Parameter Name="pt2" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della linea.</param>
        <param name="pt1">Struttura <see cref="T:System.Drawing.Point" /> che rappresenta il primo punto da connettere.</param>
        <param name="pt2">Struttura <see cref="T:System.Drawing.Point" /> che rappresenta il secondo punto da connettere.</param>
        <summary>Disegna una linea che connette due strutture <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea punti per gli endpoint della linea.  
  
-   Disegna la riga sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#66)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#66)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#66](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#66)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, System.Drawing.PointF pt1, System.Drawing.PointF pt2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, valuetype System.Drawing.PointF pt1, valuetype System.Drawing.PointF pt2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, System::Drawing::PointF pt1, System::Drawing::PointF pt2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * System.Drawing.PointF * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawLine (pen, pt1, pt2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="pt1" Type="System.Drawing.PointF" />
        <Parameter Name="pt2" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della linea.</param>
        <param name="pt1">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta il primo punto da connettere.</param>
        <param name="pt2">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta il secondo punto da connettere.</param>
        <summary>Disegna una linea che connette due strutture <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare una linea che collega i due punti specificati mediante il `pt1` e p`2` parametri.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea punti per gli endpoint della linea.  
  
-   Disegna la riga sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#67)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#67)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, int32 x1, int32 y1, int32 x2, int32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, int x1, int y1, int x2, int y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Int32" />
        <Parameter Name="y1" Type="System.Int32" />
        <Parameter Name="x2" Type="System.Int32" />
        <Parameter Name="y2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della linea.</param>
        <param name="x1">Coordinata X del primo punto.</param>
        <param name="y1">Coordinata Y del primo punto.</param>
        <param name="x2">Coordinata X del secondo punto.</param>
        <param name="y2">Coordinata Y del secondo punto.</param>
        <summary>Disegna una linea che connette i due punti specificati dalle coppie di coordinate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare una linea che collega i due punti specificati mediante il `x1`, `y1`, `x2`, e `y2` parametri.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea le coordinate dei punti finali della linea.  
  
-   Disegna la riga sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#68)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#68)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLine">
      <MemberSignature Language="C#" Value="public void DrawLine (System.Drawing.Pen pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLine(class System.Drawing.Pen pen, float32 x1, float32 y1, float32 x2, float32 y2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLine(System::Drawing::Pen ^ pen, float x1, float y1, float x2, float y2);" />
      <MemberSignature Language="F#" Value="member this.DrawLine : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawLine (pen, x1, y1, x2, y2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x1" Type="System.Single" />
        <Parameter Name="y1" Type="System.Single" />
        <Parameter Name="x2" Type="System.Single" />
        <Parameter Name="y2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della linea.</param>
        <param name="x1">Coordinata X del primo punto.</param>
        <param name="y1">Coordinata Y del primo punto.</param>
        <param name="x2">Coordinata X del secondo punto.</param>
        <param name="y2">Coordinata Y del secondo punto.</param>
        <summary>Disegna una linea che connette i due punti specificati dalle coppie di coordinate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare una linea che collega i due punti specificati mediante il `x1`, `y1`, `x2`, e `y2` parametri.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea le coordinate dei punti finali della linea.  
  
-   Disegna la riga sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#69)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#69)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawLines">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna una serie di segmenti lineari che connettono una matrice di strutture <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile dei segmenti della linea.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.Point" /> che rappresentano i punti da connettere.</param>
        <summary>Disegna una serie di segmenti lineari che connettono una matrice di strutture <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo crea una serie di linee che connettono una matrice di punti finali. I primi due punti nella matrice di specificano la prima riga. Ogni punto aggiuntivo specifica la fine di un segmento di riga il cui punto di partenza è il punto finale del segmento della riga precedente.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea una matrice di punti di segmenti della linea.  
  
-   Disegna i segmenti di linea collegati alla schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#70)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#70)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#70](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawLines">
      <MemberSignature Language="C#" Value="public void DrawLines (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLines(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawLines(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawLines : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawLines (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile dei segmenti della linea.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che rappresentano i punti da connettere.</param>
        <summary>Disegna una serie di segmenti lineari che connettono una matrice di strutture <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo crea una serie di linee che connettono una matrice di punti finali. I primi due punti nella matrice di specificano la prima riga. Ogni punto aggiuntivo specifica la fine di un segmento di riga il cui punto di partenza è il punto finale del segmento della riga precedente.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Codice crea una penna colore nero.  
  
-   Crea una matrice di punti di segmenti della linea.  
  
-   Disegna i segmenti di linea collegati alla schermata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#71)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#71)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#71](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (System.Drawing.Pen pen, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPath(class System.Drawing.Pen pen, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPath(System::Drawing::Pen ^ pen, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.DrawPath : System.Drawing.Pen * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.DrawPath (pen, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile del percorso.</param>
        <param name="path">Oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> da disegnare.</param>
        <summary>Disegna un oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La trasformazione corrente nel contesto grafico viene applicata al <xref:System.Drawing.Drawing2D.GraphicsPath> prima che questa venga disegnata.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto percorso della grafica e aggiunta di un'ellisse.  
  
-   Crea una penna colore nero.  
  
-   Disegna il percorso della grafica sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#72)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#72)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#72](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="path" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna una forma a torta definita da due linee radiali e da un'ellisse specificata da una coppia di coordinate, una larghezza e un'altezza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della forma a torta.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> che rappresenta il rettangolo di delimitazione che definisce l'ellisse da cui proviene la forma a torta.</param>
        <param name="startAngle">Angolo misurato in gradi in senso orario dall'asse X al primo lato della forma a torta.</param>
        <param name="sweepAngle">Angolo misurato in gradi in senso orario dal parametro <c>startAngle</c> al secondo lato della forma a torta.</param>
        <summary>Disegna una forma a torta definita da un'ellisse specificata da una struttura <see cref="T:System.Drawing.Rectangle" /> e da due linee radiali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare una forma a torta definita da un arco di due linee radiali che si intersecano e un'ellisse con gli endpoint dell'arco. I puntini di sospensione è definita dal rettangolo di delimitazione. La forma a torta è costituito da due linee radiali definite dal `startAngle` e `sweepAngle` parametri e l'arco tra le intersezioni di queste righe radiale con i puntini di sospensione.  
  
 Se il `sweepAngle` parametro è superiore a 360 gradi o minore di-360 gradi, verrà considerato come se fosse 360 gradi o -360 gradi, rispettivamente.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea un rettangolo che delimita un'ellisse completa.  
  
-   Definisce gli angoli in corrispondenza del quale iniziare a disegnare (rispetto all'asse x) e tramite la quale disegnare (entrambi in senso orario).  
  
-   Disegna il segmento di grafici a torta sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#73)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#73)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#73](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, System.Drawing.RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, System::Drawing::RectangleF rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * System.Drawing.RectangleF * single * single -&gt; unit" Usage="graphics.DrawPie (pen, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della forma a torta.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.RectangleF" /> che rappresenta il rettangolo di delimitazione che definisce l'ellisse da cui proviene la forma a torta.</param>
        <param name="startAngle">Angolo misurato in gradi in senso orario dall'asse X al primo lato della forma a torta.</param>
        <param name="sweepAngle">Angolo misurato in gradi in senso orario dal parametro <c>startAngle</c> al secondo lato della forma a torta.</param>
        <summary>Disegna una forma a torta definita da un'ellisse specificata da una struttura <see cref="T:System.Drawing.RectangleF" /> e da due linee radiali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare una forma a torta definita da un arco di due linee radiali che si intersecano e un'ellisse con gli endpoint dell'arco. I puntini di sospensione è definita dal rettangolo di delimitazione. La forma a torta è costituito da due linee radiali definite dal `startAngle` e `sweepAngle` parametri e l'arco tra le intersezioni di queste righe radiale con i puntini di sospensione.  
  
 Se il `sweepAngle` parametro è superiore a 360 gradi o minore di-360 gradi, verrà considerato come se fosse 360 gradi o -360 gradi, rispettivamente.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea un rettangolo che delimita un'ellisse completa.  
  
-   Definisce gli angoli in corrispondenza del quale iniziare a disegnare (rispetto all'asse x) e tramite la quale disegnare (entrambi in senso orario).  
  
-   Disegna il segmento di grafici a torta sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#74)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#74)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#74](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * int * int * int * int * int * int -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della forma a torta.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse da cui proviene la forma a torta.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse da cui proviene la forma a torta.</param>
        <param name="width">Larghezza del rettangolo di delimitazione che definisce l'ellisse da cui proviene la forma a torta.</param>
        <param name="height">Altezza del rettangolo di delimitazione che definisce l'ellisse da cui proviene la forma a torta.</param>
        <param name="startAngle">Angolo misurato in gradi in senso orario dall'asse X al primo lato della forma a torta.</param>
        <param name="sweepAngle">Angolo misurato in gradi in senso orario dal parametro <c>startAngle</c> al secondo lato della forma a torta.</param>
        <summary>Disegna una forma a torta definita da due linee radiali e da un'ellisse specificata da una coppia di coordinate, una larghezza e un'altezza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare una forma a torta definita da un arco di due linee radiali che si intersecano e un'ellisse con gli endpoint dell'arco. L'ellisse viene definita dal rettangolo di delimitazione specificato dal `x`, `y`, `width`, e `height` parametri. La forma a torta è costituito da due linee radiali definite dal `startAngle` e `sweepAngle` parametri e l'arco tra le intersezioni di queste righe radiale con i puntini di sospensione.  
  
 Se il `sweepAngle` parametro è superiore a 360 gradi o minore di-360 gradi, verrà considerato come se fosse 360 gradi o -360 gradi, rispettivamente.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea la posizione e dimensioni di un rettangolo che delimita un'ellisse completa.  
  
-   Definisce gli angoli in corrispondenza del quale iniziare a disegnare (rispetto all'asse x) e tramite la quale disegnare (entrambi in senso orario).  
  
-   Consente di disegnare la forma a torta sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#75)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#75)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#75](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPie">
      <MemberSignature Language="C#" Value="public void DrawPie (System.Drawing.Pen pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPie(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPie(System::Drawing::Pen ^ pen, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.DrawPie : System.Drawing.Pen * single * single * single * single * single * single -&gt; unit" Usage="graphics.DrawPie (pen, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile della forma a torta.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse da cui proviene la forma a torta.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse da cui proviene la forma a torta.</param>
        <param name="width">Larghezza del rettangolo di delimitazione che definisce l'ellisse da cui proviene la forma a torta.</param>
        <param name="height">Altezza del rettangolo di delimitazione che definisce l'ellisse da cui proviene la forma a torta.</param>
        <param name="startAngle">Angolo misurato in gradi in senso orario dall'asse X al primo lato della forma a torta.</param>
        <param name="sweepAngle">Angolo misurato in gradi in senso orario dal parametro <c>startAngle</c> al secondo lato della forma a torta.</param>
        <summary>Disegna una forma a torta definita da due linee radiali e da un'ellisse specificata da una coppia di coordinate, una larghezza e un'altezza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di disegnare una forma a torta definita da un arco di due linee radiali che si intersecano e un'ellisse con gli endpoint dell'arco. L'ellisse viene definita dal rettangolo di delimitazione specificato dal `x`, `y`, `width`, e `height` parametri. La forma a torta è costituito da due linee radiali definite dal `startAngle` e `sweepAngle` parametri e l'arco tra le intersezioni di queste righe radiale con i puntini di sospensione.  
  
 Se il `sweepAngle` parametro è superiore a 360 gradi o minore di-360 gradi, verrà considerato come se fosse 360 gradi o -360 gradi, rispettivamente.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea la posizione e dimensioni di un rettangolo che delimita un'ellisse completa.  
  
-   Definisce gli angoli in corrispondenza del quale iniziare a disegnare (rispetto all'asse x) e tramite la quale disegnare (entrambi in senso orario).  
  
-   Disegna il segmento di grafici a torta sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#76)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#76)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#76](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna un poligono definito da una matrice di strutture <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.Point[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile del poligono.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.Point" /> che rappresentano i vertici del poligono.</param>
        <summary>Disegna un poligono definito da una matrice di strutture <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni coppia di due punti consecutivi nella matrice specifica un lato del poligono. Inoltre, se l'ultimo punto e il primo punto della matrice non coincidono, specificano l'ultima lato del poligono.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea una matrice di sette punti per i vertici del poligono.  
  
-   Disegna il poligono sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#78)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#78)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#78](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawPolygon">
      <MemberSignature Language="C#" Value="public void DrawPolygon (System.Drawing.Pen pen, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPolygon(class System.Drawing.Pen pen, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawPolygon(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.DrawPolygon : System.Drawing.Pen * System.Drawing.PointF[] -&gt; unit" Usage="graphics.DrawPolygon (pen, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile del poligono.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che rappresentano i vertici del poligono.</param>
        <summary>Disegna un poligono definito da una matrice di strutture <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni coppia di due punti consecutivi nella matrice specifica un lato del poligono. Inoltre, se l'ultimo punto e la prima del punto di matrice non coincidono, specificano l'ultima lato del poligono.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea una matrice di sette punti per i vertici del poligono.  
  
-   Disegna il poligono sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#77)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#77)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#77](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna un rettangolo specificato da una coppia di coordinate, una larghezza e un'altezza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * System.Drawing.Rectangle -&gt; unit" Usage="graphics.DrawRectangle (pen, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile del rettangolo.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> che rappresenta il rettangolo da disegnare.</param>
        <summary>Disegna un rettangolo specificato da una struttura <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per informazioni su come creare un <xref:System.Drawing.RectangleF>, vedere <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea un rettangolo.  
  
-   Disegna il rettangolo sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#79)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#79)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#79](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#79)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * int * int * int * int -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile dell'ellisse.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo da disegnare.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo da disegnare.</param>
        <param name="width">Larghezza del rettangolo da disegnare.</param>
        <param name="height">Altezza del rettangolo da disegnare.</param>
        <summary>Disegna un rettangolo specificato da una coppia di coordinate, una larghezza e un'altezza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per informazioni su come creare un <xref:System.Drawing.RectangleF>, vedere <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea la posizione e dimensioni di un rettangolo.  
  
-   Disegna il rettangolo sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#80)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#80)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#80](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangle">
      <MemberSignature Language="C#" Value="public void DrawRectangle (System.Drawing.Pen pen, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangle(class System.Drawing.Pen pen, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangle(System::Drawing::Pen ^ pen, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangle : System.Drawing.Pen * single * single * single * single -&gt; unit" Usage="graphics.DrawRectangle (pen, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile del rettangolo.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo da disegnare.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo da disegnare.</param>
        <param name="width">Larghezza del rettangolo da disegnare.</param>
        <param name="height">Altezza del rettangolo da disegnare.</param>
        <summary>Disegna un rettangolo specificato da una coppia di coordinate, una larghezza e un'altezza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per informazioni su come creare un <xref:System.Drawing.RectangleF>, vedere <xref:System.Drawing.Graphics.DrawRectangles%28System.Drawing.Pen%2CSystem.Drawing.RectangleF%5B%5D%29>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea la posizione e dimensioni di un rettangolo.  
  
-   Disegna il rettangolo sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#81)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#81)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#81](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#81)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna una serie di rettangoli specificati da strutture <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile dei contorni dei rettangoli.</param>
        <param name="rects">Matrice di strutture <see cref="T:System.Drawing.Rectangle" /> che rappresentano i rettangoli da disegnare.</param>
        <summary>Disegna una serie di rettangoli specificati da strutture <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea una matrice di tre rettangoli.  
  
-   Consente di disegnare rettangoli sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#82)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#82)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#82](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="rects" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> è una matrice di lunghezza zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="DrawRectangles">
      <MemberSignature Language="C#" Value="public void DrawRectangles (System.Drawing.Pen pen, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRectangles(class System.Drawing.Pen pen, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawRectangles(System::Drawing::Pen ^ pen, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.DrawRectangles : System.Drawing.Pen * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.DrawRectangles (pen, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pen" Type="System.Drawing.Pen" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="pen">Oggetto <see cref="T:System.Drawing.Pen" /> che determina il colore, la larghezza e lo stile dei contorni dei rettangoli.</param>
        <param name="rects">Matrice di strutture <see cref="T:System.Drawing.RectangleF" /> che rappresentano i rettangoli da disegnare.</param>
        <summary>Disegna una serie di rettangoli specificati da strutture <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una penna colore nero.  
  
-   Crea una matrice di tre rettangoli.  
  
-   Consente di disegnare rettangoli sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#83)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#83)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#83](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#83)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pen" /> è <see langword="null" />.  
  
oppure 
 <paramref name="rects" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> è una matrice di lunghezza zero.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DrawString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Disegna la stringa di testo specificata nella posizione e con gli oggetti <see cref="T:System.Drawing.Brush" /> e <see cref="T:System.Drawing.Font" /> indicati.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF -&gt; unit" Usage="graphics.DrawString (s, font, brush, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="s">Stringa da disegnare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato di testo della stringa.</param>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina il colore e la trama del testo disegnato.</param>
        <param name="point">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta l'angolo superiore sinistro del testo disegnato.</param>
        <summary>Disegna la stringa di testo specificata nella posizione e con gli oggetti <see cref="T:System.Drawing.Brush" /> e <see cref="T:System.Drawing.Font" /> indicati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una stringa di testo da disegnare.  
  
-   Definisce il tipo di carattere come Arial (16pt).  
  
-   Crea un pennello tinta unito, nero con cui tracciare.  
  
-   Crea un punto per l'angolo superiore sinistro nella quale disegnare il testo.  
  
-   Disegna la stringa alla schermata utilizzando il tipo di carattere, pennello e il punto di destinazione.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#84)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#84)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#84](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#84)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="s" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="s">Stringa da disegnare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato di testo della stringa.</param>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina il colore e la trama del testo disegnato.</param>
        <param name="layoutRectangle">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la posizione del testo disegnato.</param>
        <summary>Disegna la stringa di testo specificata nel rettangolo specificato e con gli oggetti <see cref="T:System.Drawing.Brush" /> e <see cref="T:System.Drawing.Font" /> indicati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il testo rapprentato dal `s` parametro viene disegnato all'interno del rettangolo rappresentato dalla `layoutRectangle` parametro. Se il testo non possono essere contenute all'interno del rettangolo, si viene troncato in corrispondenza della parola più vicina. Per modificare ulteriormente il modo in cui la stringa viene disegnata all'interno del rettangolo, utilizzare il <xref:System.Drawing.Graphics.DrawString%2A> overload che accetta un <xref:System.Drawing.StringFormat>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una stringa di testo da disegnare.  
  
-   Definisce il tipo di carattere come Arial (16pt).  
  
-   Crea un pennello tinta unito, nero con cui tracciare.  
  
-   Crea un rettangolo in cui disegnare il testo.  
  
-   Disegna il rettangolo sullo schermo.  
  
-   Disegna la stringa alla schermata utilizzando il tipo di carattere, pennello e il rettangolo di destinazione.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#86)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#86)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#86](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="s" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.PointF point, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.PointF point, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::PointF point, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.PointF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, point, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Stringa da disegnare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato di testo della stringa.</param>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina il colore e la trama del testo disegnato.</param>
        <param name="point">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta l'angolo superiore sinistro del testo disegnato.</param>
        <param name="format">Oggetto <see cref="T:System.Drawing.StringFormat" /> che specifica gli attributi di formattazione, quali l'interlinea e l'allineamento, applicati al testo disegnato.</param>
        <summary>Disegna la stringa di testo specificata nella posizione e con gli oggetti <see cref="T:System.Drawing.Brush" /> e <see cref="T:System.Drawing.Font" /> indicati, usando gli attributi di formattazione dell'oggetto <see cref="T:System.Drawing.StringFormat" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una stringa di testo da disegnare.  
  
-   Definisce il tipo di carattere come Arial (16pt).  
  
-   Crea un pennello tinta unito, nero con cui tracciare.  
  
-   Crea un punto per l'angolo superiore sinistro nella quale disegnare il testo.  
  
-   Imposta il formato della stringa da disegnare in senso verticale.  
  
-   Disegna la stringa alla schermata utilizzando il tipo di carattere, pennello, il punto di destinazione e formato.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#85)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#85)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#85](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#85)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="s" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, System.Drawing.RectangleF layoutRectangle, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF layoutRectangle, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, System::Drawing::RectangleF layoutRectangle, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, layoutRectangle, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="layoutRectangle" Type="System.Drawing.RectangleF" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Stringa da disegnare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato di testo della stringa.</param>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina il colore e la trama del testo disegnato.</param>
        <param name="layoutRectangle">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la posizione del testo disegnato.</param>
        <param name="format">Oggetto <see cref="T:System.Drawing.StringFormat" /> che specifica gli attributi di formattazione, quali l'interlinea e l'allineamento, applicati al testo disegnato.</param>
        <summary>Disegna la stringa di testo specificata nel rettangolo specificato con gli oggetti <see cref="T:System.Drawing.Brush" /> e <see cref="T:System.Drawing.Font" /> indicati, usando gli attributi di formattazione dell'oggetto <see cref="T:System.Drawing.StringFormat" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il testo rapprentato dal `s` parametro viene disegnato all'interno del rettangolo rappresentato dalla `layoutRectangle` parametro. Se il testo non possono essere contenute all'interno del rettangolo, viene troncato in corrispondenza della parola più vicina, salvo diversamente specificato con il `format` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una stringa di testo da disegnare.  
  
-   Definisce il tipo di carattere come Arial (16pt).  
  
-   Crea un pennello tinta unito, nero con cui tracciare.  
  
-   Crea un rettangolo in cui disegnare il testo.  
  
-   Disegna il rettangolo sullo schermo.  
  
-   Imposta il formato della stringa al centro all'interno del rettangolo.  
  
-   Disegna la stringa alla schermata utilizzando il tipo di carattere, pennello e il rettangolo di destinazione.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#87)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#87)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#87](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="s" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s">Stringa da disegnare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato di testo della stringa.</param>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina il colore e la trama del testo disegnato.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del testo disegnato.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del testo disegnato.</param>
        <summary>Disegna la stringa di testo specificata nella posizione e con gli oggetti <see cref="T:System.Drawing.Brush" /> e <see cref="T:System.Drawing.Font" /> indicati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una stringa di testo da disegnare.  
  
-   Definisce il tipo di carattere come Arial (16pt).  
  
-   Crea un oggetto solid brush nero con cui tracciare.  
  
-   Crea un punto per l'angolo superiore sinistro nella quale disegnare il testo.  
  
-   Disegna la stringa alla schermata utilizzando il tipo di carattere, pennello e il punto di destinazione.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#88)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#88)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#88](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="s" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public void DrawString (string s, System.Drawing.Font font, System.Drawing.Brush brush, float x, float y, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawString(string s, class System.Drawing.Font font, class System.Drawing.Brush brush, float32 x, float32 y, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawString(System::String ^ s, System::Drawing::Font ^ font, System::Drawing::Brush ^ brush, float x, float y, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.DrawString : string * System.Drawing.Font * System.Drawing.Brush * single * single * System.Drawing.StringFormat -&gt; unit" Usage="graphics.DrawString (s, font, brush, x, y, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="s">Stringa da disegnare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato di testo della stringa.</param>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina il colore e la trama del testo disegnato.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del testo disegnato.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del testo disegnato.</param>
        <param name="format">Oggetto <see cref="T:System.Drawing.StringFormat" /> che specifica gli attributi di formattazione, quali l'interlinea e l'allineamento, applicati al testo disegnato.</param>
        <summary>Disegna la stringa di testo specificata nella posizione e con gli oggetti <see cref="T:System.Drawing.Brush" /> e <see cref="T:System.Drawing.Font" /> indicati, usando gli attributi di formattazione dell'oggetto <see cref="T:System.Drawing.StringFormat" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una stringa di testo da disegnare.  
  
-   Definisce il tipo di carattere come Arial (16pt).  
  
-   Crea un pennello tinta unito, nero con cui tracciare.  
  
-   Crea le coordinate di un punto per l'angolo superiore sinistro nella quale disegnare il testo.  
  
-   Imposta il formato della stringa da disegnare in verticale  
  
-   Disegna la stringa alla schermata utilizzando il tipo di carattere, pennello, il punto di destinazione e formato.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#89)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#89)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#89](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="s" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.DrawText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Point,System.Drawing.Color)" />
      </Docs>
    </Member>
    <Member MemberName="EndContainer">
      <MemberSignature Language="C#" Value="public void EndContainer (System.Drawing.Drawing2D.GraphicsContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndContainer(class System.Drawing.Drawing2D.GraphicsContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndContainer (container As GraphicsContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndContainer(System::Drawing::Drawing2D::GraphicsContainer ^ container);" />
      <MemberSignature Language="F#" Value="member this.EndContainer : System.Drawing.Drawing2D.GraphicsContainer -&gt; unit" Usage="graphics.EndContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="System.Drawing.Drawing2D.GraphicsContainer" />
      </Parameters>
      <Docs>
        <param name="container">Oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsContainer" /> che rappresenta il contenitore ripristinato da questo metodo.</param>
        <summary>Chiude il contenitore grafico corrente e riporta questo oggetto <see cref="T:System.Drawing.Graphics" /> allo stato salvato dalla chiamata al metodo <see cref="M:System.Drawing.Graphics.BeginContainer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo con il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo per creare contenitori di grafica annidati. Contenitori di grafica mantengono lo stato di grafica, ad esempio trasformazione, l'area di visualizzazione e le proprietà per il rendering.  
  
 Quando si chiama il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo di un <xref:System.Drawing.Graphics>, un blocco di informazioni che contiene lo stato del <xref:System.Drawing.Graphics> viene inserito in uno stack. Il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo restituisce un <xref:System.Drawing.Drawing2D.GraphicsContainer> che identifica il blocco di informazioni. Quando si passa l'oggetto di identificazione per il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, il blocco di informazioni viene rimossa dallo stack e viene usato per ripristinare il <xref:System.Drawing.Graphics> allo stato di cui si trovava al momento del <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo.  
  
 I contenitori possono essere annidati. vale a dire, è possibile chiamare il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo più volte prima di chiamare il <xref:System.Drawing.Graphics.EndContainer%2A> (metodo). Ogni volta che si chiama il <xref:System.Drawing.Graphics.BeginContainer%2A> metodo, viene inserito un blocco di informazioni sullo stack e si riceve un <xref:System.Drawing.Drawing2D.GraphicsContainer> per il blocco di informazioni. Quando si passa uno di questi oggetti per il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, il <xref:System.Drawing.Graphics> viene restituito lo stato in cui si trovava al momento della <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo che ha restituito quel particolare <xref:System.Drawing.Drawing2D.GraphicsContainer>. Il blocco di informazioni inserite nello stack da tale <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo viene rimosso dallo stack e inseriti tutti i blocchi di informazioni sullo stack in seguito <xref:System.Drawing.Graphics.BeginContainer%2A> vengono rimossi anche chiamata al metodo.  
  
 Le chiamate al <xref:System.Drawing.Graphics.Save%2A> blocchi di informazioni sul posto di metodo sullo stesso stack come chiamate al <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo). Proprio come un <xref:System.Drawing.Graphics.EndContainer%2A> chiamata al metodo è associata a un <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo, una <xref:System.Drawing.Graphics.Restore%2A> chiamata al metodo è associata a un <xref:System.Drawing.Graphics.Save%2A> chiamata al metodo.  
  
 Quando si chiama il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, tutti i blocchi di informazioni posizionato sullo stack di (dal <xref:System.Drawing.Graphics.Save%2A> (metodo) o tramite il <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo)) dopo la chiamata corrispondente al <xref:System.Drawing.Graphics.BeginContainer%2A> metodo vengono rimossi dallo stack. Allo stesso modo, quando si chiama il <xref:System.Drawing.Graphics.Restore%2A> metodo, tutti i blocchi di informazioni posizionato sullo stack di (dal <xref:System.Drawing.Graphics.Save%2A> (metodo) o tramite il <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo)) dopo la chiamata corrispondente al <xref:System.Drawing.Graphics.Save%2A> metodo vengono rimossi dallo stack.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Apre un nuovo contenitore grafico e Salva il contenitore precedente.  
  
-   Converte le coordinate world nel contenitore.  
  
-   Viene compilato un rettangolo rosso il (convertite le coordinate del) nuovo contenitore.  
  
-   Chiude il nuovo contenitore e ripristina il contenitore salvato.  
  
-   Riempimento di un rettangolo verde (in corrispondenza delle coordinate non convertita) del contenitore salvato.  
  
 Il risultato è un rettangolo verde sovrapposto a un rettangolo rosso delle stesse dimensioni.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#90)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#90)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#90](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#90)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnumerateMetafile">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback per la visualizzazione in un punto specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoint">Struttura <see cref="T:System.Drawing.Point" /> che rappresenta la posizione dell'angolo superiore sinistro del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback per la visualizzazione in un punto specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Esempio di codice seguente crea un form contenente un <xref:System.Drawing.Imaging.Metafile> come uno dei relativi membri privati. Il <xref:System.Windows.Forms.Control.OnPaint%2A> chiamate al metodo <xref:System.Drawing.Graphics.EnumerateMetafile%2A>, che chiama il modulo `MetafileCallback` metodo per ogni record nel metafile. Il metodo `MetafileCallback` chiama il metodo <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>. Si noti che il `MetafileCallback` metodo riceve i dati del record come un' <xref:System.IntPtr>, ma il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo prevede che i dati del record da una matrice di byte. La chiamata a <xref:System.Runtime.InteropServices.Marshal.Copy%2A> copia i dati del record in una matrice di byte in modo che possano essere passate al <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>.  
  
 [!code-csharp[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/CS/Form1.cs#1)]
 [!code-vb[System.Drawing.Graphics.EnumerateMetafile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Graphics.EnumerateMetafile/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.Point" /> che definiscono un parallelogramma, il quale determina le dimensioni e la posizione del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback, per la visualizzazione in un parallelogramma specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoint">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta la posizione dell'angolo superiore sinistro del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback per la visualizzazione in un punto specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.PointF" /> che definiscono un parallelogramma, il quale determina le dimensioni e la posizione del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback, per la visualizzazione in un parallelogramma specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.PointF> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma. Metafile disegnato viene ridimensionato e adattato alla parallelogramma.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback per la visualizzazione in un rettangolo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la posizione e le dimensioni del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback per la visualizzazione in un rettangolo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoint">Struttura <see cref="T:System.Drawing.Point" /> che rappresenta la posizione dell'angolo superiore sinistro del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback per la visualizzazione in un punto specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.Point" /> che definiscono un parallelogramma, il quale determina le dimensioni e la posizione del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback, per la visualizzazione in un parallelogramma specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoint">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta la posizione dell'angolo superiore sinistro del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback per la visualizzazione in un punto specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.PointF" /> che definiscono un parallelogramma, il quale determina le dimensioni e la posizione del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback, per la visualizzazione in un parallelogramma specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.PointF> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma. Metafile disegnato viene ridimensionato e adattato alla parallelogramma.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback per la visualizzazione in un rettangolo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la posizione e le dimensioni del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback per la visualizzazione in un rettangolo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoint">Struttura <see cref="T:System.Drawing.Point" /> che rappresenta la posizione dell'angolo superiore sinistro del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">Oggetto <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni sugli attributi di immagine relative all'immagine disegnata.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback per la visualizzazione in un punto indicato, usando gli attributi di immagine specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoint">Struttura <see cref="T:System.Drawing.Point" /> che rappresenta la posizione dell'angolo superiore sinistro del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un punto specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.Point" /> che definiscono un parallelogramma, il quale determina le dimensioni e la posizione del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">Oggetto <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni sugli attributi di immagine relative all'immagine disegnata.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback, per la visualizzazione in un parallelogramma indicato, usando gli attributi di immagine specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.Point> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma. Metafile disegnato viene ridimensionato e adattato alla parallelogramma.  
  
 Gli attributi di immagine specificati da di `imageAttr` sostituzione parametro quelli specificati quando è stato scritto il metafile.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.Point" /> che definiscono un parallelogramma, il quale determina le dimensioni e la posizione del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un parallelogramma specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.Point> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma. Metafile disegnato viene ridimensionato e adattato alla parallelogramma.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoint">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta la posizione dell'angolo superiore sinistro del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">Oggetto <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni sugli attributi di immagine relative all'immagine disegnata.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback per la visualizzazione in un punto indicato, usando gli attributi di immagine specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, deve essere eseguita chiamando il metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Gli attributi di immagine specificati da di `imageAttr` sostituzione parametro quelli specificati quando è stato scritto il metafile.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoint">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta la posizione dell'angolo superiore sinistro del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un punto specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.PointF" /> che definiscono un parallelogramma, il quale determina le dimensioni e la posizione del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">Oggetto <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni sugli attributi di immagine relative all'immagine disegnata.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback, per la visualizzazione in un parallelogramma indicato, usando gli attributi di immagine specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.PointF> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma. Metafile disegnato viene ridimensionato e adattato alla parallelogramma.  
  
 Gli attributi di immagine specificati da di `imageAttr` sostituzione parametro quelli specificati quando è stato scritto il metafile.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.PointF" /> che definiscono un parallelogramma, il quale determina le dimensioni e la posizione del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte di metafile, relativa all'angolo superiore sinistro, da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un parallelogramma specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.Point> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma. Metafile disegnato viene ridimensionato e adattato alla parallelogramma.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">Oggetto <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni sugli attributi di immagine relative all'immagine disegnata.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback per la visualizzazione in un rettangolo indicato, usando gli attributi di immagine specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Gli attributi di immagine specificati da di `imageAttr` sostituzione parametro quelli specificati quando è stato scritto il metafile.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un rettangolo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la posizione e le dimensioni del metafile disegnato.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">Oggetto <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni sugli attributi di immagine relative all'immagine disegnata.</param>
        <summary>Invia, uno alla volta, i record dell'oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> specificato a un metodo di callback per la visualizzazione in un rettangolo indicato, usando gli attributi di immagine specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Gli attributi di immagine specificati da di `imageAttr` sostituzione parametro quelli specificati quando è stato scritto il metafile.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la posizione e le dimensioni del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un rettangolo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoint">Struttura <see cref="T:System.Drawing.Point" /> che rappresenta la posizione dell'angolo superiore sinistro del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un punto specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.Point" /> che definiscono un parallelogramma, il quale determina le dimensioni e la posizione del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un parallelogramma specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.Point> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma. Metafile disegnato viene ridimensionato e adattato alla parallelogramma.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoint">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta la posizione dell'angolo superiore sinistro del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un punto specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.PointF" /> che definiscono un parallelogramma, il quale determina le dimensioni e la posizione del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un parallelogramma specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.PointF> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma. Metafile disegnato viene ridimensionato e adattato alla parallelogramma.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un rettangolo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit srcUnit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit srcUnit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit srcUnit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, srcUnit, callback, callbackData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcUnit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la posizione e le dimensioni del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="srcUnit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un rettangolo specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di`callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point destPoint, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point destPoint, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Point destPoint, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.Point" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoint">Struttura <see cref="T:System.Drawing.Point" /> che rappresenta la posizione dell'angolo superiore sinistro del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="unit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">Oggetto <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni sugli attributi di immagine relative all'immagine disegnata.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un punto indicato, usando gli attributi di immagine specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Point[] destPoints, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Point[] destPoints, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::Point&gt; ^ destPoints, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Point[] * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.Point[]" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.Point" /> che definiscono un parallelogramma, il quale determina le dimensioni e la posizione del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="unit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">Oggetto <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni sugli attributi di immagine relative all'immagine disegnata.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un parallelogramma indicato, usando gli attributi di immagine specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.Point> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma. Metafile disegnato viene ridimensionato e adattato alla parallelogramma.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
 Gli attributi di immagine specificati da di `imageAttr` sostituzione parametro quelli specificati quando è stato scritto il metafile.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF destPoint, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF destPoint, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::PointF destPoint, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoint, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoint" Type="System.Drawing.PointF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoint">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta la posizione dell'angolo superiore sinistro del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="unit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">Oggetto <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni sugli attributi di immagine relative all'immagine disegnata.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un punto indicato, usando gli attributi di immagine specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
 Gli attributi di immagine specificati da di `imageAttr` sostituzione parametro quelli specificati quando è stato scritto il metafile.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.PointF[] destPoints, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, cli::array &lt;System::Drawing::PointF&gt; ^ destPoints, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.PointF[] * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destPoints, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destPoints" Type="System.Drawing.PointF[]" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destPoints">Matrice di tre strutture <see cref="T:System.Drawing.PointF" /> che definiscono un parallelogramma, il quale determina le dimensioni e la posizione del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="unit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">Oggetto <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni sugli attributi di immagine relative all'immagine disegnata.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un parallelogramma indicato, usando gli attributi di immagine specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Il `destPoints` parametro specifica i tre punti del parallelogramma. I tre <xref:System.Drawing.PointF> strutture rappresentano gli angoli superiore sinistro, superiore destro e inferiore sinistro del parallelogramma. Il quarto punto è estrapolato dai primi tre in modo da formare un parallelogramma. Metafile disegnato viene ridimensionato e adattato alla parallelogramma.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
 Gli attributi di immagine specificati da di `imageAttr` sostituzione parametro quelli specificati quando è stato scritto il metafile.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.Rectangle destRect, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.Rectangle destRect, valuetype System.Drawing.Rectangle srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::Rectangle destRect, System::Drawing::Rectangle srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.Rectangle * System.Drawing.Rectangle * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="srcRect" Type="System.Drawing.Rectangle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la posizione e le dimensioni del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="unit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">Oggetto <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni sugli attributi di immagine relative all'immagine disegnata.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un rettangolo specificato, usando gli attributi di immagine indicati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
 Gli attributi di immagine specificati da di `imageAttr` sostituzione parametro quelli specificati quando è stato scritto il metafile.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMetafile">
      <MemberSignature Language="C#" Value="public void EnumerateMetafile (System.Drawing.Imaging.Metafile metafile, System.Drawing.RectangleF destRect, System.Drawing.RectangleF srcRect, System.Drawing.GraphicsUnit unit, System.Drawing.Graphics.EnumerateMetafileProc callback, IntPtr callbackData, System.Drawing.Imaging.ImageAttributes imageAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateMetafile(class System.Drawing.Imaging.Metafile metafile, valuetype System.Drawing.RectangleF destRect, valuetype System.Drawing.RectangleF srcRect, valuetype System.Drawing.GraphicsUnit unit, class System.Drawing.Graphics/EnumerateMetafileProc callback, native int callbackData, class System.Drawing.Imaging.ImageAttributes imageAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.EnumerateMetafile(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Graphics.EnumerateMetafileProc,System.IntPtr,System.Drawing.Imaging.ImageAttributes)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnumerateMetafile(System::Drawing::Imaging::Metafile ^ metafile, System::Drawing::RectangleF destRect, System::Drawing::RectangleF srcRect, System::Drawing::GraphicsUnit unit, System::Drawing::Graphics::EnumerateMetafileProc ^ callback, IntPtr callbackData, System::Drawing::Imaging::ImageAttributes ^ imageAttr);" />
      <MemberSignature Language="F#" Value="member this.EnumerateMetafile : System.Drawing.Imaging.Metafile * System.Drawing.RectangleF * System.Drawing.RectangleF * System.Drawing.GraphicsUnit * System.Drawing.Graphics.EnumerateMetafileProc * nativeint * System.Drawing.Imaging.ImageAttributes -&gt; unit" Usage="graphics.EnumerateMetafile (metafile, destRect, srcRect, unit, callback, callbackData, imageAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metafile" Type="System.Drawing.Imaging.Metafile" />
        <Parameter Name="destRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="srcRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="callback" Type="System.Drawing.Graphics+EnumerateMetafileProc" />
        <Parameter Name="callbackData" Type="System.IntPtr" />
        <Parameter Name="imageAttr" Type="System.Drawing.Imaging.ImageAttributes" />
      </Parameters>
      <Docs>
        <param name="metafile">Oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> da enumerare.</param>
        <param name="destRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la posizione e le dimensioni del metafile disegnato.</param>
        <param name="srcRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica la parte di metafile, in relazione all'angolo superiore sinistro, da disegnare.</param>
        <param name="unit">Membro dell'enumerazione <see cref="T:System.Drawing.GraphicsUnit" /> che specifica l'unità di misura usata per determinare la parte di metafile contenuta nel rettangolo specificato dal parametro <c>srcRect</c>.</param>
        <param name="callback">Delegato <see cref="T:System.Drawing.Graphics.EnumerateMetafileProc" /> che specifica il metodo al quale vengono inviati i record del metafile.</param>
        <param name="callbackData">Puntatore interno obbligatorio ma ignorato. Per questo parametro è possibile passare <see cref="F:System.IntPtr.Zero" />.</param>
        <param name="imageAttr">Oggetto <see cref="T:System.Drawing.Imaging.ImageAttributes" /> che specifica le informazioni sugli attributi di immagine relative all'immagine disegnata.</param>
        <summary>Invia, uno alla volta, i record di un rettangolo selezionato da un oggetto <see cref="T:System.Drawing.Imaging.Metafile" /> a un metodo di callback per la visualizzazione in un rettangolo specificato, usando gli attributi di immagine indicati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo enumera i record del contenuto nel metafile specificato. Ogni record viene inviato singolarmente a un metodo di callback specificato da di `callback` parametro. In genere, le chiamate al metodo callback il <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo "riprodurre", o disegnare, il record.  
  
 Se viene chiamato il metodo di callback <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A>, è necessario effettuare una chiamata di <xref:System.Drawing.Imaging.Metafile.PlayRecord%2A> metodo dell'oggetto specifico <xref:System.Drawing.Imaging.Metafile> enumerato.  
  
 Qualsiasi tipo di disegno che si verifica all'esterno del rettangolo specificato dal `srcRect` parametro viene ignorato.  
  
 Gli attributi di immagine specificati da di `imageAttr` sostituzione parametro quelli specificati quando è stato scritto il metafile.  
  
   
  
## Examples  
 Per un esempio di codice, vedere <xref:System.Drawing.Graphics.EnumerateMetafile%28System.Drawing.Imaging.Metafile%2CSystem.Drawing.Point%2CSystem.Drawing.Graphics.EnumerateMetafileProc%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExcludeClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiorna l'area di ritaglio di questo oggetto <see cref="T:System.Drawing.Graphics" /> per escludere l'area specificata da una struttura <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExcludeClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.ExcludeClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> che specifica il rettangolo da escludere dall'area di ritaglio.</param>
        <summary>Aggiorna l'area di ritaglio di questo oggetto <see cref="T:System.Drawing.Graphics" /> per escludere l'area specificata da una struttura <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di escludere l'area specificata dal `rect` parametri dall'area di ritaglio corrente e assegna l'area risultante per il <xref:System.Drawing.Graphics.Clip%2A> proprietà di questo <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un 100 pixel dal rettangolo 100 pixel è cui nell'angolo superiore sinistro della coordinata (100, 100).  
  
-   Crea un'area definita dal rettangolo.  
  
-   Imposta l'area di ritaglio per escludere l'area rettangolare.  
  
-   Inserisce un pixel 300 300 rettangolo di pixel è cui nell'angolo superiore sinistro della coordinata (0, 0) con un oggetto solid brush blu.  
  
 Il risultato è un rettangolo blu con un'area quadrata in corrispondenza dell'angolo inferiore destro.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#92)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#92)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#92](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#92)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludeClip">
      <MemberSignature Language="C#" Value="public void ExcludeClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExcludeClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ExcludeClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExcludeClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.ExcludeClip : System.Drawing.Region -&gt; unit" Usage="graphics.ExcludeClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">Oggetto <see cref="T:System.Drawing.Region" /> che specifica l'area da escludere dall'area di ritaglio.</param>
        <summary>Aggiorna l'area di ritaglio di questo oggetto <see cref="T:System.Drawing.Graphics" /> per escludere l'area specificata da un oggetto <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di escludere l'area specificata dal `region` parametri dall'area di ritaglio corrente e assegna l'area risultante per il <xref:System.Drawing.Graphics.Clip%2A> proprietà di questo <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un 100 pixel dal rettangolo 100 pixel è cui nell'angolo superiore sinistro della coordinata (100, 100).  
  
-   Imposta l'area di ritaglio per escludere il rettangolo.  
  
-   Inserisce un pixel 300 300 rettangolo di pixel è cui nell'angolo superiore sinistro della coordinata (0, 0) con un oggetto solid brush blu.  
  
 Il risultato è un rettangolo blu con un'area quadrata nell'angolo in basso a destra.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#91)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#91)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#91](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#91)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillClosedCurve">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Riempie l'area interna di una spline di tipo Cardinal chiusa definita da una matrice di strutture <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.Point" /> che definiscono la spline.</param>
        <summary>Riempie l'area interna di una spline di tipo Cardinal chiusa definita da una matrice di strutture <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo riempie l'area interna di una spline di tipo cardinal chiusa che attraversa ogni punto della matrice. Se l'ultimo punto non corrisponde al primo, un segmento curvo aggiuntive viene aggiunto dall'ultimo punto per il primo punto da chiudere.  
  
 La matrice di punti deve contenere almeno quattro <xref:System.Drawing.Point> strutture.  
  
 Questo metodo Usa una tensione predefinita pari a 0,5.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea una matrice di quattro punti per definire una spline di tipo.  
  
-   Riempie la curva sullo schermo.  
  
 La curva è una tensione predefinita pari a 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#93)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#93)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#93](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#93)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillClosedCurve (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che definiscono la spline.</param>
        <summary>Riempie l'area interna di una spline di tipo Cardinal chiusa definita da una matrice di strutture <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo riempie l'area interna di una spline di tipo cardinal chiusa che attraversa ogni punto della matrice. Se l'ultimo punto non corrisponde al primo, un segmento curvo aggiuntive viene aggiunto dall'ultimo punto per il primo punto da chiudere.  
  
 La matrice di punti deve contenere almeno quattro <xref:System.Drawing.PointF> strutture.  
  
 Questo metodo Usa una tensione predefinita pari a 0,5.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea una matrice di quattro punti per definire una spline di tipo.  
  
-   Riempie la curva sullo schermo.  
  
 La curva è una tensione predefinita pari a 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#96)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#96)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#96](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#96)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.Point" /> che definiscono la spline.</param>
        <param name="fillmode">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.FillMode" /> che determina come viene riempita la curva.</param>
        <summary>Usando la modalità di riempimento specificata, riempie l'area interna di una spline di tipo Cardinal chiusa definita da una matrice di strutture <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo riempie l'area interna di una spline di tipo cardinal chiusa che attraversa ogni punto della matrice. Se l'ultimo punto non corrisponde al primo, un segmento curvo aggiuntive viene aggiunto dall'ultimo punto per il primo punto da chiudere.  
  
 La matrice di punti deve contenere almeno quattro <xref:System.Drawing.Point> strutture.  
  
 Questo metodo Usa una tensione predefinita pari a 0,5.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea una matrice di quattro punti per definire una spline di tipo.  
  
-   Imposta la modalità di riempimento su <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Riempie la curva sullo schermo.  
  
 La curva è una tensione predefinita pari a 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#94)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#94)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#94](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#94)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che definiscono la spline.</param>
        <param name="fillmode">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.FillMode" /> che determina come viene riempita la curva.</param>
        <summary>Usando la modalità di riempimento specificata, riempie l'area interna di una spline di tipo Cardinal chiusa definita da una matrice di strutture <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo riempie l'area interna di una spline di tipo cardinal chiusa che attraversa ogni punto della matrice. Se l'ultimo punto non corrisponde al primo, un segmento curvo aggiuntive viene aggiunto dall'ultimo punto per il primo punto da chiudere.  
  
 La matrice di punti deve contenere almeno quattro <xref:System.Drawing.Point> strutture.  
  
 Questo metodo Usa una tensione predefinita pari a 0,5.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea una matrice di quattro punti per definire una spline di tipo.  
  
-   Imposta la modalità di riempimento su <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Riempie la curva sullo schermo.  
  
 La curva è una tensione predefinita pari a 0,5.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#97)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#97)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#97](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#97)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.Point" /> che definiscono la spline.</param>
        <param name="fillmode">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.FillMode" /> che determina come viene riempita la curva.</param>
        <param name="tension">Valore superiore o uguale a 0,0 F che specifica la tensione della curva.</param>
        <summary>Usando la modalità di riempimento e la tensione specificate, riempie l'area interna di una spline di tipo Cardinal chiusa definita da una matrice di strutture <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo riempie l'area interna di una spline di tipo cardinal chiusa che attraversa ogni punto della matrice. Se l'ultimo punto non corrisponde al primo, un segmento curvo aggiuntive viene aggiunto dall'ultimo punto per il primo punto da chiudere.  
  
 La matrice di punti deve contenere almeno quattro <xref:System.Drawing.Point> strutture.  
  
 Il `tension` parametro determina la forma della curva spline. Se il valore della `tension` parametro 0.0F, questo metodo crea segmenti di linee rette per i punti di connessione. In genere, il `tension` parametro è minore o uguale a 1.0F. I valori su 1.0F producono risultati imprevisti.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea una matrice di quattro punti per definire una spline di tipo.  
  
-   Imposta la modalità di riempimento su <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Imposta la tensione 1.0.  
  
-   Riempie la curva sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#95)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#95)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#95](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#95)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillClosedCurve">
      <MemberSignature Language="C#" Value="public void FillClosedCurve (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillmode, float tension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillClosedCurve(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillmode, float32 tension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillClosedCurve(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillmode, float tension);" />
      <MemberSignature Language="F#" Value="member this.FillClosedCurve : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode * single -&gt; unit" Usage="graphics.FillClosedCurve (brush, points, fillmode, tension)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillmode" Type="System.Drawing.Drawing2D.FillMode" />
        <Parameter Name="tension" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che definiscono la spline.</param>
        <param name="fillmode">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.FillMode" /> che determina come viene riempita la curva.</param>
        <param name="tension">Valore superiore o uguale a 0,0 F che specifica la tensione della curva.</param>
        <summary>Usando la modalità di riempimento e la tensione specificate, riempie l'area interna di una spline di tipo Cardinal chiusa definita da una matrice di strutture <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo riempie l'area interna di una spline di tipo cardinal chiusa che attraversa ogni punto della matrice. Se l'ultimo punto non corrisponde al primo, un segmento curvo aggiuntive viene aggiunto dall'ultimo punto per il primo punto da chiudere.  
  
 La matrice di punti deve contenere almeno quattro <xref:System.Drawing.Point> strutture.  
  
 Il `tension` parametro determina la forma della curva spline. Se il valore della `tension` parametro 0.0F, questo metodo crea segmenti di linee rette per i punti di connessione. In genere, il `tension` parametro è minore o uguale a 1.0F. I valori su 1.0F producono risultati imprevisti.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea una matrice di quattro punti per definire una spline di tipo.  
  
-   Imposta la modalità di riempimento su <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Imposta la tensione 1.0.  
  
-   Riempie la curva sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#98)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#98)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#98](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillEllipse">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Riempie l'area interna di un'ellisse definita da un rettangolo di delimitazione specificato da una coppia di coordinate, un'altezza e una larghezza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> che rappresenta il rettangolo di delimitazione che definisce l'ellisse.</param>
        <summary>Riempie l'area interna di un'ellisse definita da un rettangolo di delimitazione specificato da una struttura <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo riempie l'area interna di un'ellisse con un <xref:System.Drawing.Brush>. I puntini di sospensione è definita dal rettangolo di delimitazione rappresentato dal `rect` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea un rettangolo che delimita un'ellisse.  
  
-   Riempie l'ellisse sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#99)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#99)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#99](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillEllipse (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.RectangleF" /> che rappresenta il rettangolo di delimitazione che definisce l'ellisse.</param>
        <summary>Riempie l'area interna di un'ellisse definita da un rettangolo di delimitazione specificato da una struttura <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo riempie l'area interna di un'ellisse con un <xref:System.Drawing.Brush>. I puntini di sospensione è definita dal rettangolo di delimitazione rappresentato dal `rect` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea un rettangolo che delimita un'ellisse.  
  
-   Riempie l'ellisse sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#100)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#100)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#100](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse.</param>
        <param name="width">Larghezza del rettangolo di delimitazione che definisce l'ellisse.</param>
        <param name="height">Altezza del rettangolo di delimitazione che definisce l'ellisse.</param>
        <summary>Riempie l'area interna di un'ellisse definita da un rettangolo di delimitazione specificato da una coppia di coordinate, un'altezza e una larghezza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo riempie l'area interna di un'ellisse con un <xref:System.Drawing.Brush>. I puntini di sospensione è definita dal rettangolo di delimitazione rappresentato dal `x`, `y`, `width`, e `height` parametri.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea la posizione e dimensione di un rettangolo che delimita un'ellisse.  
  
-   Riempie l'ellisse sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#101)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#101)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#101](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillEllipse">
      <MemberSignature Language="C#" Value="public void FillEllipse (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipse(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillEllipse(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillEllipse : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillEllipse (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse.</param>
        <param name="width">Larghezza del rettangolo di delimitazione che definisce l'ellisse.</param>
        <param name="height">Altezza del rettangolo di delimitazione che definisce l'ellisse.</param>
        <summary>Riempie l'area interna di un'ellisse definita da un rettangolo di delimitazione specificato da una coppia di coordinate, un'altezza e una larghezza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo riempie l'area interna di un'ellisse con un <xref:System.Drawing.Brush>. I puntini di sospensione è definita dal rettangolo di delimitazione rappresentato dal `x`, `y`, `width`, e `height` parametri.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea la posizione e dimensione di un rettangolo che delimita un'ellisse.  
  
-   Riempie l'ellisse sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#102)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#102)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#102](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPath">
      <MemberSignature Language="C#" Value="public void FillPath (System.Drawing.Brush brush, System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPath(class System.Drawing.Brush brush, class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPath(System::Drawing::Brush ^ brush, System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.FillPath : System.Drawing.Brush * System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.FillPath (brush, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="path">Oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> che rappresenta il tracciato da riempire.</param>
        <summary>Riempie l'area interna di un oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Drawing.Drawing2D.GraphicsPath> è costituito da una serie di segmenti di linee e curve. Se il percorso rappresentato dal `path` parametro non viene chiusa, un segmento aggiuntivo viene aggiunto dall'ultimo punto per il primo punto da chiudere il tracciato.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea un oggetto percorso grafico.  
  
-   Aggiunge un'ellisse al percorso della grafica.  
  
-   Il percorso nella schermata viene riempito.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#103)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#103)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#103](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="path" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPie">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Riempie l'area interna di una sezione di torta definita da un'ellisse specificata da una coppia di coordinate, una larghezza, un'altezza e due linee radiali.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, System.Drawing.Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * System.Drawing.Rectangle * single * single -&gt; unit" Usage="graphics.FillPie (brush, rect, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> che rappresenta il rettangolo di delimitazione che definisce l'ellisse da cui proviene la sezione di torta.</param>
        <param name="startAngle">Angolo misurato in gradi in senso orario dall'asse X al primo lato della sezione di torta.</param>
        <param name="sweepAngle">Angolo misurato in gradi in senso orario dal parametro <c>startAngle</c> al secondo lato della sezione di torta.</param>
        <summary>Riempie l'area interna di una sezione di torta definita da un'ellisse specificata da una struttura <see cref="T:System.Drawing.RectangleF" /> e da due linee radiali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo riempie l'area interna di una sezione di torta definita da un arco di due linee radiali che si intersecano e un'ellisse con gli endpoint dell'arco. I puntini di sospensione è definita dal rettangolo di delimitazione. La sezione di torta è costituito da due linee radiali definite dal `startAngle` e `sweepAngle` parametri e l'arco tra le intersezioni di queste righe radiale con i puntini di sospensione.  
  
 Se il `sweepAngle` parametro è superiore a 360 gradi o minore di-360 gradi, verrà considerato come se fosse 360 gradi o -360 gradi, rispettivamente.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea un rettangolo che delimita un'ellisse.  
  
-   Definisce l'angolo iniziale (rispetto all'asse x) e l'angolo di apertura (entrambi in senso orario).  
  
-   Riempie l'area a forma di grafico a torta dell'ellisse sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#104)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#104)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#104](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height, int32 startAngle, int32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, int x, int y, int width, int height, int startAngle, int sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * int * int * int * int * int * int -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="startAngle" Type="System.Int32" />
        <Parameter Name="sweepAngle" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse da cui proviene la sezione di torta.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse da cui proviene la sezione di torta.</param>
        <param name="width">Larghezza del rettangolo di delimitazione che definisce l'ellisse da cui proviene la sezione di torta.</param>
        <param name="height">Altezza del rettangolo di delimitazione che definisce l'ellisse da cui proviene la sezione di torta.</param>
        <param name="startAngle">Angolo misurato in gradi in senso orario dall'asse X al primo lato della sezione di torta.</param>
        <param name="sweepAngle">Angolo misurato in gradi in senso orario dal parametro <c>startAngle</c> al secondo lato della sezione di torta.</param>
        <summary>Riempie l'area interna di una sezione di torta definita da un'ellisse specificata da una coppia di coordinate, una larghezza, un'altezza e due linee radiali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo riempie l'area interna di una sezione di torta definita da un arco di due linee radiali che si intersecano e un'ellisse con gli endpoint dell'arco. I puntini di sospensione è definita dal rettangolo di delimitazione. La sezione di torta è costituito da due linee radiali definite dal `startAngle` e `sweepAngle` parametri e l'arco tra le intersezioni di queste righe radiale con i puntini di sospensione.  
  
 Se il `sweepAngle` parametro è superiore a 360 gradi o minore di-360 gradi, verrà considerato come se fosse 360 gradi o -360 gradi, rispettivamente.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea la posizione e dimensione di un rettangolo che delimita un'ellisse.  
  
-   Definisce l'angolo iniziale (rispetto all'asse x) e l'angolo di apertura (entrambi in senso orario).  
  
-   Riempie l'area a forma di grafico a torta dell'ellisse sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#105)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#105)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#105](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPie">
      <MemberSignature Language="C#" Value="public void FillPie (System.Drawing.Brush brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPie(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height, float32 startAngle, float32 sweepAngle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPie(System::Drawing::Brush ^ brush, float x, float y, float width, float height, float startAngle, float sweepAngle);" />
      <MemberSignature Language="F#" Value="member this.FillPie : System.Drawing.Brush * single * single * single * single * single * single -&gt; unit" Usage="graphics.FillPie (brush, x, y, width, height, startAngle, sweepAngle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="startAngle" Type="System.Single" />
        <Parameter Name="sweepAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse da cui proviene la sezione di torta.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo di delimitazione che definisce l'ellisse da cui proviene la sezione di torta.</param>
        <param name="width">Larghezza del rettangolo di delimitazione che definisce l'ellisse da cui proviene la sezione di torta.</param>
        <param name="height">Altezza del rettangolo di delimitazione che definisce l'ellisse da cui proviene la sezione di torta.</param>
        <param name="startAngle">Angolo misurato in gradi in senso orario dall'asse X al primo lato della sezione di torta.</param>
        <param name="sweepAngle">Angolo misurato in gradi in senso orario dal parametro <c>startAngle</c> al secondo lato della sezione di torta.</param>
        <summary>Riempie l'area interna di una sezione di torta definita da un'ellisse specificata da una coppia di coordinate, una larghezza, un'altezza e due linee radiali.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo riempie l'area interna di una sezione di torta definita da un arco di due linee radiali che si intersecano e un'ellisse con gli endpoint dell'arco. I puntini di sospensione è definita dal rettangolo di delimitazione. La sezione di torta è costituito da due linee radiali definite dal `startAngle` e `sweepAngle` parametri e l'arco tra le intersezioni di queste righe radiale con i puntini di sospensione.  
  
 Se il `sweepAngle` parametro è superiore a 360 gradi o minore di-360 gradi, verrà considerato come se fosse 360 gradi o -360 gradi, rispettivamente.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush rosso.  
  
-   Crea la posizione e dimensione di un rettangolo che delimita un'ellisse.  
  
-   Definisce l'angolo iniziale (rispetto all'asse x) e l'angolo di apertura (entrambi in senso orario).  
  
-   Riempie l'area a forma di grafico a torta dell'ellisse sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#106)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#106)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#106](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillPolygon">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Riempie l'area interna di un poligono definito da una matrice di punti specificati da strutture <see cref="T:System.Drawing.Point" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.Point" /> che rappresentano i vertici del poligono da riempire.</param>
        <summary>Riempie l'area interna di un poligono definito da una matrice di punti specificati da strutture <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni due punti consecutivi nella matrice specificano un lato del poligono. Inoltre, se l'ultimo punto e il primo punto non coincidono, specificano il lato di chiusura del poligono.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush blu.  
  
-   Crea una matrice di sette punti per definire un poligono.  
  
-   Riempie l'area poligonale sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#107)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#107)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#107](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] -&gt; unit" Usage="graphics.FillPolygon (brush, points)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che rappresentano i vertici del poligono da riempire.</param>
        <summary>Riempie l'area interna di un poligono definito da una matrice di punti specificati da strutture <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni due punti consecutivi nella matrice specificano un lato del poligono. Inoltre, se l'ultimo punto e il primo punto non coincidono, specificano il lato di chiusura del poligono.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush blu.  
  
-   Crea una matrice di sette punti per definire un poligono.  
  
-   Riempie l'area poligonale sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#109)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#109)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#109](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#109)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.Point[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.Point[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Point&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.Point[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.Point[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.Point" /> che rappresentano i vertici del poligono da riempire.</param>
        <param name="fillMode">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.FillMode" /> che determina lo stile del riempimento.</param>
        <summary>Usando la modalità di riempimento specificata, riempie l'area interna di un poligono definito da una matrice di punti specificati da strutture <see cref="T:System.Drawing.Point" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni due punti consecutivi nella matrice specificano un lato del poligono. Inoltre, se l'ultimo punto e il primo punto non coincidono, specificano il lato di chiusura del poligono.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un oggetto solid brush blu.  
  
-   Crea una matrice di sette punti per definire un poligono.  
  
-   Imposta la modalità di riempimento su <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Riempie l'area poligonale sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#108)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#108)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#108](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillPolygon">
      <MemberSignature Language="C#" Value="public void FillPolygon (System.Drawing.Brush brush, System.Drawing.PointF[] points, System.Drawing.Drawing2D.FillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPolygon(class System.Drawing.Brush brush, valuetype System.Drawing.PointF[] points, valuetype System.Drawing.Drawing2D.FillMode fillMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillPolygon(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::PointF&gt; ^ points, System::Drawing::Drawing2D::FillMode fillMode);" />
      <MemberSignature Language="F#" Value="member this.FillPolygon : System.Drawing.Brush * System.Drawing.PointF[] * System.Drawing.Drawing2D.FillMode -&gt; unit" Usage="graphics.FillPolygon (brush, points, fillMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="points" Type="System.Drawing.PointF[]" />
        <Parameter Name="fillMode" Type="System.Drawing.Drawing2D.FillMode" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="points">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che rappresentano i vertici del poligono da riempire.</param>
        <param name="fillMode">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.FillMode" /> che determina lo stile del riempimento.</param>
        <summary>Usando la modalità di riempimento specificata, riempie l'area interna di un poligono definito da una matrice di punti specificati da strutture <see cref="T:System.Drawing.PointF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni due punti consecutivi nella matrice specificano un lato del poligono. Inoltre, se l'ultimo punto e il primo punto non coincidono, specificano il lato di chiusura del poligono.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice esegue l'azione seguente:  
  
-   Crea un oggetto solid brush blu.  
  
-   Crea una matrice di sette punti per definire un poligono.  
  
-   Imposta la modalità di riempimento su <xref:System.Drawing.Drawing2D.FillMode.Winding>.  
  
-   Riempie l'area poligonale sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CPP/form1.cpp#110)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/CS/form1.cs#110)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples2#110](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples2/VB/form1.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="points" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangle">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Riempie l'area interna di un rettangolo specificato da una coppia di coordinate, una larghezza e un'altezza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.Rectangle -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> che rappresenta il rettangolo da riempire.</param>
        <summary>Riempie l'area interna di un rettangolo specificato da una struttura <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo riempie l'interno del rettangolo definito dal `rect` parametro, inclusi l'angolo superiore sinistro fino a calcolata e inferiori bordi.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice esegue l'azione seguente:  
  
-   Crea un oggetto solid brush blu.  
  
-   Crea un rettangolo.  
  
-   Riempie l'area rettangolare sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#111)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#111)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#111](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * System.Drawing.RectangleF -&gt; unit" Usage="graphics.FillRectangle (brush, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="rect">Struttura <see cref="T:System.Drawing.RectangleF" /> che rappresenta il rettangolo da riempire.</param>
        <summary>Riempie l'area interna di un rettangolo specificato da una struttura <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo riempie l'interno del rettangolo definito dal `rect` parametro, inclusi l'angolo superiore sinistro fino a calcolata e inferiori bordi.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice esegue l'azione seguente:  
  
-   Crea un oggetto solid brush blu.  
  
-   Crea un rettangolo.  
  
-   Riempie l'area rettangolare sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#112)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#112)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#112](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * int * int * int * int -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo da riempire.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo da riempire.</param>
        <param name="width">Larghezza del rettangolo da riempire.</param>
        <param name="height">Altezza del rettangolo da riempire.</param>
        <summary>Riempie l'area interna di un rettangolo specificato da una coppia di coordinate, una larghezza e un'altezza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo riempie l'area interna del rettangolo definito per il`x`, `y`, `width`, e `height` parametri, compresi l'angolo superiore sinistro fino a calcolata e inferiori bordi.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice esegue l'azione seguente:  
  
-   Crea un oggetto solid brush blu.  
  
-   Crea la posizione e dimensione di un rettangolo.  
  
-   Riempie l'area rettangolare sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#113)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#113)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#113](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#113)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangle">
      <MemberSignature Language="C#" Value="public void FillRectangle (System.Drawing.Brush brush, float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangle(class System.Drawing.Brush brush, float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangle(System::Drawing::Brush ^ brush, float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.FillRectangle : System.Drawing.Brush * single * single * single * single -&gt; unit" Usage="graphics.FillRectangle (brush, x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo da riempire.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo da riempire.</param>
        <param name="width">Larghezza del rettangolo da riempire.</param>
        <param name="height">Altezza del rettangolo da riempire.</param>
        <summary>Riempie l'area interna di un rettangolo specificato da una coppia di coordinate, una larghezza e un'altezza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo riempie l'area interna del rettangolo definito per il `x`, `y`, `width`, e `height` parametri, compresi l'angolo superiore sinistro fino a calcolata e inferiori bordi.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice esegue l'azione seguente:  
  
-   Crea un oggetto solid brush blu.  
  
-   Crea la posizione e dimensione di un rettangolo.  
  
-   Riempie l'area rettangolare sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#114)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#114)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#114](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#114)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillRectangles">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Riempie l'area interna di una serie di rettangoli specificati da strutture <see cref="T:System.Drawing.Rectangle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.Rectangle[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.Rectangle[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::Rectangle&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.Rectangle[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.Rectangle[]" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="rects">Matrice di strutture <see cref="T:System.Drawing.Rectangle" /> che rappresentano i rettangoli da riempire.</param>
        <summary>Riempie l'area interna di una serie di rettangoli specificati da strutture <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice esegue l'azione seguente:  
  
-   Crea un oggetto solid brush blu.  
  
-   Crea una matrice di tre rettangoli.  
  
-   Riempie le tre aree rettangolari sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#115)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#115)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#115](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#115)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="rects" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="rects" /> è una matrice di lunghezza zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRectangles">
      <MemberSignature Language="C#" Value="public void FillRectangles (System.Drawing.Brush brush, System.Drawing.RectangleF[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRectangles(class System.Drawing.Brush brush, valuetype System.Drawing.RectangleF[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRectangles(System::Drawing::Brush ^ brush, cli::array &lt;System::Drawing::RectangleF&gt; ^ rects);" />
      <MemberSignature Language="F#" Value="member this.FillRectangles : System.Drawing.Brush * System.Drawing.RectangleF[] -&gt; unit" Usage="graphics.FillRectangles (brush, rects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="rects" Type="System.Drawing.RectangleF[]" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="rects">Matrice di strutture <see cref="T:System.Drawing.RectangleF" /> che rappresentano i rettangoli da riempire.</param>
        <summary>Riempie l'area interna di una serie di rettangoli specificati da strutture <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice esegue l'azione seguente:  
  
-   Crea un oggetto solid brush blu.  
  
-   Crea una matrice di tre rettangoli.  
  
-   Riempie le tre aree rettangolari sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#116)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#116)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#116](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#116)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="rects" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rects" /> è una matrice di lunghezza zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillRegion">
      <MemberSignature Language="C#" Value="public void FillRegion (System.Drawing.Brush brush, System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRegion(class System.Drawing.Brush brush, class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FillRegion(System::Drawing::Brush ^ brush, System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.FillRegion : System.Drawing.Brush * System.Drawing.Region -&gt; unit" Usage="graphics.FillRegion (brush, region)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="brush" Type="System.Drawing.Brush" />
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="brush">Oggetto <see cref="T:System.Drawing.Brush" /> che determina le caratteristiche del riempimento.</param>
        <param name="region">Oggetto <see cref="T:System.Drawing.Region" /> che rappresenta l'area da riempire.</param>
        <summary>Riempie l'area interna di un oggetto <see cref="T:System.Drawing.Region" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Drawing.Region> è costituito da rettangoli e tracciati. Se l'area non viene chiusa, viene aggiunto un segmento aggiuntivo dall'ultimo punto al primo punto di chiuderlo.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice esegue l'azione seguente:  
  
-   Crea un oggetto solid brush blu.  
  
-   Crea un rettangolo.  
  
-   Crea un'area rettangolare.  
  
-   Riempie l'area rettangolare sullo schermo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#117)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#117)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#117](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#117)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="brush" /> è <see langword="null" />.  
  
oppure 
 <paramref name="region" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Graphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Graphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Consente a un oggetto di effettuare un tentativo di liberare risorse ed eseguire altre operazioni di pulizia prima che venga recuperato da Garbage Collection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Flush">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Impone l'esecuzione di tutte le operazioni grafiche in sospeso e viene restituito immediatamente senza attendere che le operazioni siano completate.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="graphics.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Impone l'esecuzione di tutte le operazioni grafiche in sospeso e viene restituito immediatamente senza attendere che le operazioni siano completate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene avviato lo scaricamento e viene restituito immediatamente senza tempi di attesa per qualsiasi operazione di grafica attualmente in esecuzione alla fine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (System.Drawing.Drawing2D.FlushIntention intention);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(valuetype System.Drawing.Drawing2D.FlushIntention intention) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Flush(System.Drawing.Drawing2D.FlushIntention)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (intention As FlushIntention)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush(System::Drawing::Drawing2D::FlushIntention intention);" />
      <MemberSignature Language="F#" Value="member this.Flush : System.Drawing.Drawing2D.FlushIntention -&gt; unit" Usage="graphics.Flush intention" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intention" Type="System.Drawing.Drawing2D.FlushIntention" />
      </Parameters>
      <Docs>
        <param name="intention">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.FlushIntention" /> che specifica se il metodo viene restituito immediatamente o se attende il completamento di ogni operazione esistente.</param>
        <summary>Impone l'esecuzione di tutte le operazioni grafiche in sospeso, con il metodo in attesa o non in attesa di restituzione, a seconda di quanto specificato, prima del completamento delle operazioni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un valore pari <xref:System.Drawing.Drawing2D.FlushIntention.Flush> per il `intention` parametro specifica che il metodo restituisce immediatamente dopo l'inizio della cancellazione, mentre un valore di <xref:System.Drawing.Drawing2D.FlushIntention.Sync> specifica che il metodo attende prima della restituzione, fino al completamento di ogni operazione esistente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un nuovo oggetto <see cref="T:System.Drawing.Graphics" /> dall'handle specificato per un contesto di dispositivo.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Handle per un contesto di dispositivo.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.Drawing.Graphics" /> dall'handle specificato per un contesto di dispositivo.</summary>
        <returns>Questo metodo restituisce un nuovo oggetto <see cref="T:System.Drawing.Graphics" /> per il contesto di dispositivo specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È necessario chiamare sempre il <xref:System.Drawing.Graphics.Dispose%2A> metodo per rilasciare il <xref:System.Drawing.Graphics> e correlate le risorse create tramite il <xref:System.Drawing.Graphics.FromHdc%2A> (metodo).  
  
 Anche se il dispositivo di visualizzazione dispone di un profilo colori ICM, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] non utilizzerà tale profilo per impostazione predefinita. Per abilitare ICM per un <xref:System.Drawing.Graphics>, costruire il <xref:System.Drawing.Graphics> da un HDC dopo aver passato la HDC (e il ICM_ON) per il `SetICMMode` (funzione). Qualsiasi scopo di disegno di <xref:System.Drawing.Graphics> verrà regolata in base al profilo di ICM associato al dispositivo di visualizzazione. Abilitazione di ICM comporterà prestazioni inferiori.  
  
 Lo stato del contesto di dispositivo (modalità di mapping unità logica e così via) al momento si chiama <xref:System.Drawing.Graphics.FromHdc%2A> può influire sul rendering scopo il <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice esegue l'azione seguente:  
  
-   Crea una variabile di tipo puntatore interno `hdc` e la imposta l'handle al contesto di dispositivo dell'oggetto grafico del form.  
  
-   Crea un nuovo oggetto grafico utilizzando `hdc`.  
  
-   Disegna un rettangolo con il nuovo oggetto di grafica (nella schermata).  
  
-   Rilascia il nuovo oggetto grafico utilizzando `hdc`.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#118)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#118)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#118](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#118)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdc (IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdc(native int hdc, native int hdevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdc(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr, hdevice As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdc(IntPtr hdc, IntPtr hdevice);" />
      <MemberSignature Language="F#" Value="static member FromHdc : nativeint * nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdc (hdc, hdevice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
        <Parameter Name="hdevice" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Handle per un contesto di dispositivo.</param>
        <param name="hdevice">Handle per un dispositivo.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.Drawing.Graphics" /> dall'handle specificato per un contesto di dispositivo e dall'handle per un dispositivo.</summary>
        <returns>Questo metodo restituisce un nuovo oggetto <see cref="T:System.Drawing.Graphics" /> per il contesto di dispositivo e per il dispositivo specificati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È necessario chiamare sempre il <xref:System.Drawing.Graphics.Dispose%2A> metodo per rilasciare il <xref:System.Drawing.Graphics> e correlate le risorse create tramite il <xref:System.Drawing.Graphics.FromHdc%2A> (metodo).  
  
 Anche se il dispositivo di visualizzazione dispone di un profilo colori ICM, [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] non utilizzerà tale profilo per impostazione predefinita. Per abilitare ICM per un <xref:System.Drawing.Graphics>, costruire il <xref:System.Drawing.Graphics> da un HDC dopo aver passato la HDC (e il ICM_ON) per il `SetICMMode` (funzione). Qualsiasi scopo di disegno di <xref:System.Drawing.Graphics> verrà regolata in base al profilo di ICM associato al dispositivo di visualizzazione. Abilitazione di ICM comporterà prestazioni inferiori.  
  
 Lo stato del contesto di dispositivo (modalità di mapping unità logica e così via) al momento si chiama <xref:System.Drawing.Graphics.FromHdc%2A> può influire sul rendering scopo il <xref:System.Drawing.Graphics>.  
  
 L'handle di dispositivo è in genere usato per le funzionalità della stampante specifici di query.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Per accedere al codice non gestito. Enumerazione correlata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHdcInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdcInternal (hdc As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="static member FromHdcInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Handle per un contesto di dispositivo.</param>
        <summary>Restituisce un oggetto <see cref="T:System.Drawing.Graphics" /> per il contesto di dispositivo specificato.</summary>
        <returns>Oggetto <see cref="T:System.Drawing.Graphics" /> per il contesto di dispositivo specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non deve essere utilizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHwnd">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwnd (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwnd(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwnd(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwnd (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwnd(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwnd : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwnd hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Handle per una finestra.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.Drawing.Graphics" /> dall'handle specificato per una finestra.</summary>
        <returns>Questo metodo restituisce un nuovo oggetto <see cref="T:System.Drawing.Graphics" /> per l'handle di finestra specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È necessario chiamare sempre il <xref:System.Drawing.Graphics.Dispose%2A> metodo per rilasciare il <xref:System.Drawing.Graphics> e correlate le risorse create tramite il <xref:System.Drawing.Graphics.FromHwnd%2A> (metodo).  
  
   
  
## Examples  
 Il codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, che è un parametro del <xref:System.Windows.Forms.Control.Paint> gestore evento, nonché `thisForm`, il <xref:System.Windows.Forms.Form> per l'esempio. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una nuova variabile di puntatore interno `hwnd` e la imposta l'handle del form dell'esempio.  
  
-   Crea un nuovo <xref:System.Drawing.Graphics> dal punto di controllo.  
  
-   Disegna un rettangolo al nuovo <xref:System.Drawing.Graphics> con una penna colore rosso.  
  
-   Elimina il nuovo <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#119)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#119)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#119](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#119)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Per accedere al codice non gestito. Enumerazione correlata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FromHwndInternal">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromHwndInternal (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromHwndInternal(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromHwndInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHwndInternal (hwnd As IntPtr) As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromHwndInternal(IntPtr hwnd);" />
      <MemberSignature Language="F#" Value="static member FromHwndInternal : nativeint -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromHwndInternal hwnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Handle per una finestra.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.Drawing.Graphics" /> per l'handle di finestra specificato.</summary>
        <returns>Oggetto <see cref="T:System.Drawing.Graphics" /> per l'handle di finestra specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non deve essere utilizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static System.Drawing.Graphics FromImage (System.Drawing.Image image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Graphics FromImage(class System.Drawing.Image image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.FromImage(System.Drawing.Image)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Graphics ^ FromImage(System::Drawing::Image ^ image);" />
      <MemberSignature Language="F#" Value="static member FromImage : System.Drawing.Image -&gt; System.Drawing.Graphics" Usage="System.Drawing.Graphics.FromImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Drawing.Image" />
      </Parameters>
      <Docs>
        <param name="image">
          <see cref="T:System.Drawing.Image" /> da cui creare il nuovo oggetto <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.Drawing.Graphics" /> dall'oggetto <see cref="T:System.Drawing.Image" /> specificato.</summary>
        <returns>Questo metodo restituisce un nuovo oggetto <see cref="T:System.Drawing.Graphics" /> per l'oggetto <see cref="T:System.Drawing.Image" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'immagine ha un formato a pixel indicizzato, questo metodo genera un'eccezione con il messaggio, "Impossibile creare un oggetto Graphics da un'immagine che presenta un formato a pixel indicizzato." Formati a pixel indicizzati vengono visualizzati nell'elenco seguente.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format1bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format4bppIndexed>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format8bppIndexed>  
  
 È possibile salvare l'immagine indicizzata come un altro formato usando il <xref:System.Drawing.Image.Save%28System.String%2CSystem.Drawing.Imaging.ImageFormat%29> metodo e quindi recuperare un <xref:System.Drawing.Graphics> oggetto per la nuova immagine.  
  
 Questo metodo genera anche un'eccezione se l'immagine include uno dei seguenti formati pixel.  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Undefined>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.DontCare>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppArgb1555>  
  
-   <xref:System.Drawing.Imaging.PixelFormat.Format16bppGrayScale>  
  
 È necessario chiamare sempre il <xref:System.Drawing.Graphics.Dispose%2A> metodo per rilasciare il <xref:System.Drawing.Graphics> e correlate le risorse create tramite il <xref:System.Drawing.Graphics.FromImage%2A> (metodo).  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Il codice esegue l'azione seguente:  
  
-   Crea un <xref:System.Drawing.Image> da una file di grafica SampImag nella cartella di esempio.  
  
-   Crea una <xref:System.Drawing.Graphics> dal <xref:System.Drawing.Image>.  
  
-   Modifica l'immagine con l'inserimento di un rettangolo all'interno di esso.  
  
-   Disegna il <xref:System.Drawing.Image> sullo schermo.  
  
-   Rilascia l'oggetto creato <xref:System.Drawing.Graphics>.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#120)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#120)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="image" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Exception">
          <paramref name="image" /> presenta un formato a pixel indicizzato oppure il formato non è definito.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetContextInfo">
      <MemberSignature Language="C#" Value="public object GetContextInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetContextInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetContextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextInfo () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetContextInfo();" />
      <MemberSignature Language="F#" Value="member this.GetContextInfo : unit -&gt; obj" Usage="graphics.GetContextInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene il contesto grafico complessivo.</summary>
        <returns>Valore <see cref="T:System.Object" /> che rappresenta il contesto grafico complessivo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore restituito è una matrice di oggetti in cui il primo elemento contiene l'area di ritaglio cumulativo e il secondo elemento contiene la matrice di convertire o trasformare cumulativo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHalftonePalette">
      <MemberSignature Language="C#" Value="public static IntPtr GetHalftonePalette ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetHalftonePalette() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHalftonePalette" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHalftonePalette () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetHalftonePalette();" />
      <MemberSignature Language="F#" Value="static member GetHalftonePalette : unit -&gt; nativeint" Usage="System.Drawing.Graphics.GetHalftonePalette " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene un handle per la tavolozza dei mezzitoni di Windows corrente.</summary>
        <returns>Puntatore interno che specifica l'handle per la tavolozza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo scopo del <xref:System.Drawing.Graphics.GetHalftonePalette%2A> metodo consiste nell'abilitare [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] per produrre toni di qualità superiore quando la visualizzazione a 8 bit per pixel. Per visualizzare un'immagine mediante la tavolozza dei mezzitoni di, utilizzare la procedura seguente.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Definisce l'interoperabilità <xref:System.Runtime.InteropServices.DllImportAttribute> gli attributi per gdi32.dll il file DLL di Windows, che contiene le necessarie [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funzioni.  
  
-   Definisce i `SelectPalette` e `RealizePalette` funzioni nelle DLL come esterno.  
  
-   Crea un'immagine da un file di immagine esistente SampImag (che deve essere nella stessa cartella del file di codice di esempio) e l'immagine viene disegnata sullo schermo.  
  
-   Crea variabili di tipo puntatore interno e imposta i valori per l'handle per l'oggetto graphics e tavolozza dei mezzitoni di Windows corrente, rispettivamente.  
  
-   Seleziona e si rende conto la tavolozza dei mezzitoni.  
  
-   Crea un nuovo oggetto grafico utilizzando il `hdc` parametro.  
  
-   Disegna l'immagine nuovamente.  
  
-   Rilascia l'handle al contesto di dispositivo.  
  
 Il risultato è due rendering dell'immagine di esempio: uno con la tavolozza a 16 bit e uno con la tavolozza a 8 bit.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#121)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#121)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#121](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHdc">
      <MemberSignature Language="C#" Value="public IntPtr GetHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetHdc" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHdc () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IntPtr GetHdc();" />
      <MemberSignature Language="F#" Value="abstract member GetHdc : unit -&gt; nativeint&#xA;override this.GetHdc : unit -&gt; nativeint" Usage="graphics.GetHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.GetHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene l'handle per il contesto di dispositivo associato a questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Handle per il contesto di dispositivo associato a questo oggetto <see cref="T:System.Drawing.Graphics" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il contesto di dispositivo è una struttura di Windows basata su [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] che definisce un set di oggetti grafici e i relativi attributi associati, nonché le modalità con interfaccia grafiche che influisce sull'output. Questo metodo restituisce il contesto di dispositivo fatta eccezione per un tipo di carattere. Perché un tipo di carattere non è selezionata, le chiamate al <xref:System.Drawing.Font.FromHdc%2A> utilizzando un handle restituito dal metodo di <xref:System.Drawing.Graphics.GetHdc%2A> metodo avrà esito negativo.  
  
 Le chiamate al <xref:System.Drawing.Graphics.GetHdc%2A> e <xref:System.Drawing.Graphics.ReleaseHdc%2A> metodi devono essere presenti in coppia. Nell'ambito di una <xref:System.Drawing.Graphics.GetHdc%2A> e <xref:System.Drawing.Graphics.ReleaseHdc%2A> coppia di metodi, in genere è determinare solo le chiamate a [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funzioni. Chiama nel cui ambito apportate a [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] metodi del <xref:System.Drawing.Graphics> che ha prodotto il `hdc` parametro esito negativo con un `ObjectBusy` errore. Inoltre [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ignora le modifiche di stato apportate al <xref:System.Drawing.Graphics> del `hdc` parametro nelle operazioni successive.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nell'esempio viene illustrata la chiamata a un Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funzione per eseguire la stessa attività come un [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> (metodo). Nel codice vengono eseguite le seguenti azioni:  
  
-   Definisce l'interoperabilità <xref:System.Runtime.InteropServices.DllImportAttribute> attributo per gdi32.dll il file DLL di Windows. Questa DLL contiene il valore desiderato [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] (funzione).  
  
-   Definisce il <xref:System.Drawing.Rectangle> funzione nella DLL come esterno.  
  
-   Crea una penna colore rosso.  
  
-   Con la penna, disegna un rettangolo sullo schermo utilizzando il [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> (metodo).  
  
-   Definisce una variabile di tipo puntatore interno `hdc` e imposta il valore per l'handle al contesto di dispositivo del form.  
  
-   Disegna un rettangolo sullo schermo utilizzando il [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> (funzione).  
  
-   Rilascia il contesto di dispositivo rappresentato dal `hdc` parametro.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#122)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#122)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#122](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#122)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Per accedere al codice non gestito. Enumerazione correlata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetNearestColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color GetNearestColor (System.Drawing.Color color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Color GetNearestColor(valuetype System.Drawing.Color color) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.GetNearestColor(System.Drawing.Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Color GetNearestColor(System::Drawing::Color color);" />
      <MemberSignature Language="F#" Value="member this.GetNearestColor : System.Drawing.Color -&gt; System.Drawing.Color" Usage="graphics.GetNearestColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="color">Struttura <see cref="T:System.Drawing.Color" /> per cui trovare una corrispondenza.</param>
        <summary>Ottiene il colore più simile alla struttura <see cref="T:System.Drawing.Color" /> specificata.</summary>
        <returns>Struttura <see cref="T:System.Drawing.Color" /> che rappresenta il colore più simile a quello specificato con il parametro <paramref name="color" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un colore arbitrario con le coordinate ARGB (255, 165, 63, 136).  
  
-   Crea un oggetto solid brush e imposta il colore sul colore specificato.  
  
-   Riempie una forma ellipse utilizzando il colore arbitrario.  
  
-   Crea un secondo colore e imposta il valore per il sistema più vicino colore ARGB.  
  
-   Riempie una seconda ellisse con questo oggetto color.  
  
 Il risultato è di due ellissi: il primo viene disegnato con il colore specificato arbitrario e la seconda con il colore di sistema più vicino al colore specificato.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#123)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#123)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#123](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.InterpolationMode InterpolationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.InterpolationMode InterpolationMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.InterpolationMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpolationMode As InterpolationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::InterpolationMode InterpolationMode { System::Drawing::Drawing2D::InterpolationMode get(); void set(System::Drawing::Drawing2D::InterpolationMode value); };" />
      <MemberSignature Language="F#" Value="member this.InterpolationMode : System.Drawing.Drawing2D.InterpolationMode with get, set" Usage="System.Drawing.Graphics.InterpolationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.InterpolationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la modalità di interpolazione associata a questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Uno dei valori di <see cref="T:System.Drawing.Drawing2D.InterpolationMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Determina la modalità di interpolazione come valori intermedi tra due endpoint vengono calcolati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IntersectClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiorna l'area di ritaglio di questo oggetto <see cref="T:System.Drawing.Graphics" /> all'intersezione tra l'area di ritaglio corrente e la struttura <see cref="T:System.Drawing.Rectangle" /> specificata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> da intersecare con l'area di visualizzazione corrente.</param>
        <summary>Aggiorna l'area di ritaglio di questo oggetto <see cref="T:System.Drawing.Graphics" /> all'intersezione tra l'area di ritaglio corrente e la struttura <see cref="T:System.Drawing.Rectangle" /> specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo assegna alla <xref:System.Drawing.Graphics.Clip%2A> proprietà di questo <xref:System.Drawing.Graphics> all'area rappresentata dall'intersezione tra l'area di ritaglio corrente e il rettangolo specificato dal `rect` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un rettangolo con angoli superiore sinistro (0, 0) e imposta l'area di ritaglio di questo rettangolo.  
  
-   Crea un secondo rettangolo con angoli superiore sinistro (100, 100) e imposta l'area di visualizzazione per l'intersezione di questo rettangolo e l'area di visualizzazione corrente (il primo rettangolo).  
  
-   Riempimento di un rettangolo grande che includa entrambi i rettangoli precedenti con un oggetto solid brush blu.  
  
-   Reimposta l'area di ridimensionamento su infinito.  
  
-   Consente di disegnare rettangoli intorno a due aree di ridimensionamento. Viene utilizzata una penna nera per il rettangolo di ridimensionamento prima e una penna colore rosso per la seconda area di ritaglio.  
  
 Il risultato è che solo l'intersezione dei due rettangoli viene riempita con blu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#124)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#124)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#124](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#124)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub IntersectClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.IntersectClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">Struttura <see cref="T:System.Drawing.RectangleF" /> da intersecare con l'area di visualizzazione corrente.</param>
        <summary>Aggiorna l'area di ritaglio di questo oggetto <see cref="T:System.Drawing.Graphics" /> all'intersezione tra l'area di ritaglio corrente e la struttura <see cref="T:System.Drawing.RectangleF" /> specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo assegna alla <xref:System.Drawing.Graphics.Clip%2A> proprietà di questo <xref:System.Drawing.Graphics> all'area rappresentata dall'intersezione tra l'area di ritaglio corrente e il rettangolo specificato dal `rect` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un rettangolo con angoli superiore sinistro (0, 0) e imposta l'area di ritaglio di questo rettangolo.  
  
-   Crea un secondo rettangolo con angoli superiore sinistro (100, 100) e imposta l'area di visualizzazione per l'intersezione di questo rettangolo e l'area di visualizzazione corrente (il primo rettangolo).  
  
-   Riempimento di un rettangolo grande che includa entrambi i rettangoli precedenti con un oggetto solid brush blu.  
  
-   Reimposta l'area di ridimensionamento su infinito.  
  
-   Consente di disegnare rettangoli intorno a due aree di ridimensionamento. Viene utilizzata una penna nera per il rettangolo di ridimensionamento prima e una penna colore rosso per la seconda area di ritaglio.  
  
 Il risultato è che solo l'intersezione dei due rettangoli viene riempita con blu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#125)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#125)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#125](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#125)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectClip">
      <MemberSignature Language="C#" Value="public void IntersectClip (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IntersectClip(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IntersectClip(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void IntersectClip(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.IntersectClip : System.Drawing.Region -&gt; unit" Usage="graphics.IntersectClip region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region">Oggetto <see cref="T:System.Drawing.Region" /> da intersecare con l'area corrente.</param>
        <summary>Aggiorna l'area di ritaglio di questo oggetto <see cref="T:System.Drawing.Graphics" /> all'intersezione tra l'area di ritaglio corrente e l'oggetto <see cref="T:System.Drawing.Region" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo assegna alla <xref:System.Drawing.Graphics.Clip%2A> proprietà di questo <xref:System.Drawing.Graphics> all'area rappresentata dall'intersezione tra l'area di ritaglio corrente e l'area specificata dal `region` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un rettangolo con angoli superiore sinistro (0, 0).  
  
-   Crea un'area e lo imposta per il rettangolo e imposta l'area di ritaglio in quest'area.  
  
-   Crea un secondo rettangolo con angoli superiore sinistro (100, 100).  
  
-   Crea un'area e lo imposta su secondo rettangolo e imposta l'area di visualizzazione per l'intersezione di quest'area e l'area di visualizzazione corrente (il primo rettangolo) tramite una modalità di combinazione di <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Riempie un grande rettangolo che include entrambe le aree precedente con un oggetto solid brush blu.  
  
-   Reimposta l'area di ridimensionamento su infinito.  
  
-   Consente di disegnare rettangoli intorno a due aree di ridimensionamento. Usa una penna colore nero per la prima area di ritaglio e una penna colore rosso per la seconda area di ritaglio.  
  
 Il risultato è che solo l'intersezione delle due aree viene riempita con blu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#126)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#126)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#126](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#126)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClipEmpty : bool" Usage="System.Drawing.Graphics.IsClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> è vuota.</summary>
        <value>
          <see langword="true" /> se l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> è vuota; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsVisible">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indica se il punto specificato da una coppia di coordinate è contenuto all'interno dell'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Point -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Struttura <see cref="T:System.Drawing.Point" /> di cui testare la visibilità.</param>
        <summary>Indica se la struttura <see cref="T:System.Drawing.Point" /> specificata è contenuta all'interno dell'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> se il punto specificato dal parametro <paramref name="point" /> è contenuto nell'area di visualizzazione visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'area rettangolare di ritaglio e lo imposta come area di visualizzazione per l'oggetto grafico del form utilizzando <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crea due punti, uno all'interno dell'area di ritaglio e uno esterno.  
  
-   Verifica i punti la visibilità e consente di disegnare solo il visibile.  
  
 Il risultato è un piccolo cerchio rosso, che si trova all'interno dell'area di ritaglio.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#127)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#127)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#127](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#127)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (point As PointF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.PointF -&gt; bool" Usage="graphics.IsVisible point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="point">Struttura <see cref="T:System.Drawing.PointF" /> di cui testare la visibilità.</param>
        <summary>Indica se la struttura <see cref="T:System.Drawing.PointF" /> specificata è contenuta all'interno dell'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> se il punto specificato dal parametro <paramref name="point" /> è contenuto nell'area di visualizzazione visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'area rettangolare di ritaglio e lo imposta come area di visualizzazione per le immagini del modulo tramite <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crea due punti, uno all'interno dell'area di ritaglio e uno esterno.  
  
-   Verifica i punti la visibilità e consente di disegnare solo il visibile.  
  
 Il risultato è un piccolo cerchio rosso, che si trova all'interno dell'area di ritaglio.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#128)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#128)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#128](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#128)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As Rectangle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.Rectangle -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> di cui testare la visibilità.</param>
        <summary>Indica se il rettangolo specificato da una struttura <see cref="T:System.Drawing.Rectangle" /> è contenuto all'interno dell'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> se il rettangolo specificato dal parametro <paramref name="rect" /> è contenuto all'interno dell'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'area rettangolare di ritaglio e lo imposta come area di visualizzazione per l'oggetto grafico del form utilizzando <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crea il percorso e dalle dimensioni dei due rettangoli, uno all'interno dell'area di ritaglio e uno esterno.  
  
-   Test dei rettangoli per visibilità e consente di disegnare solo il visibile.  
  
 Il risultato è un piccolo rettangolo rosso, che si trova all'interno dell'area di ritaglio.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#129)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#129)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#129](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#129)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (rect As RectangleF) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : System.Drawing.RectangleF -&gt; bool" Usage="graphics.IsVisible rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">Struttura <see cref="T:System.Drawing.RectangleF" /> di cui testare la visibilità.</param>
        <summary>Indica se il rettangolo specificato da una struttura <see cref="T:System.Drawing.RectangleF" /> è contenuto all'interno dell'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> se il rettangolo specificato dal parametro <paramref name="rect" /> è contenuto all'interno dell'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'area rettangolare di ritaglio e lo imposta come area di visualizzazione per l'oggetto grafico del form utilizzando <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crea due rettangoli, uno all'interno dell'area di ritaglio e uno esterno.  
  
-   Test dei rettangoli per visibilità e consente di disegnare solo il visibile.  
  
 Il risultato è un piccolo rettangolo rosso, che si trova all'interno dell'area di ritaglio.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#130)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#130)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#130](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Coordinata X del punto di cui testare la visibilità.</param>
        <param name="y">Coordinata Y del punto di cui testare la visibilità.</param>
        <summary>Indica se il punto specificato da una coppia di coordinate è contenuto all'interno dell'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> se il punto definito dai parametri <paramref name="x" /> e <paramref name="y" /> è contenuto nella parte visibile dell'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'area rettangolare di ritaglio e lo imposta come area di visualizzazione per l'oggetto grafico del form utilizzando <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crea due punti, uno all'interno dell'area di ritaglio e uno esterno.  
  
-   Verifica i punti la visibilità e consente di disegnare solo il visibile.  
  
 Il risultato è un piccolo cerchio rosso, che si trova all'interno dell'area di ritaglio.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#131)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#131)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#131](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#131)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single -&gt; bool" Usage="graphics.IsVisible (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Coordinata X del punto di cui testare la visibilità.</param>
        <param name="y">Coordinata Y del punto di cui testare la visibilità.</param>
        <summary>Indica se il punto specificato da una coppia di coordinate è contenuto all'interno dell'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> se il punto definito dai parametri <paramref name="x" /> e <paramref name="y" /> è contenuto nella parte visibile dell'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'area rettangolare di ritaglio e lo imposta come area di visualizzazione per l'oggetto grafico del form utilizzando <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crea due punti, uno all'interno dell'area di ritaglio e uno esterno.  
  
-   Verifica i punti la visibilità e consente di disegnare solo il visibile.  
  
 Il risultato è un piccolo cerchio rosso, che si trova all'interno dell'area di ritaglio.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#133)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#133)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#133](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#133)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Integer, y As Integer, width As Integer, height As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : int * int * int * int -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo di cui testare la visibilità.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo di cui testare la visibilità.</param>
        <param name="width">Larghezza del rettangolo di cui testare la visibilità.</param>
        <param name="height">Altezza del rettangolo di cui testare la visibilità.</param>
        <summary>Indica se il rettangolo specificato da una coppia di coordinate, da una larghezza e da un'altezza è contenuto all'interno dell'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> se il rettangolo definito dai parametri <paramref name="x" />, <paramref name="y" />, <paramref name="width" /> e <paramref name="height" /> è contenuto all'interno dell'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'area rettangolare di ritaglio e lo imposta come area di visualizzazione per l'oggetto grafico del form utilizzando <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crea il percorso e dalle dimensioni dei due rettangoli, uno all'interno dell'area di ritaglio e uno esterno.  
  
-   Test dei rettangoli per visibilità e consente di disegnare solo il visibile.  
  
 Il risultato è un piccolo rettangolo rosso, che si trova all'interno dell'area di ritaglio.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#132)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#132)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#132](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#132)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible (float x, float y, float width, float height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsVisible(float32 x, float32 y, float32 width, float32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.IsVisible(System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsVisible (x As Single, y As Single, width As Single, height As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsVisible(float x, float y, float width, float height);" />
      <MemberSignature Language="F#" Value="member this.IsVisible : single * single * single * single -&gt; bool" Usage="graphics.IsVisible (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Single" />
        <Parameter Name="y" Type="System.Single" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="height" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">Coordinata X dell'angolo superiore sinistro del rettangolo di cui testare la visibilità.</param>
        <param name="y">Coordinata Y dell'angolo superiore sinistro del rettangolo di cui testare la visibilità.</param>
        <param name="width">Larghezza del rettangolo di cui testare la visibilità.</param>
        <param name="height">Altezza del rettangolo di cui testare la visibilità.</param>
        <summary>Indica se il rettangolo specificato da una coppia di coordinate, da una larghezza e da un'altezza è contenuto all'interno dell'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>
          <see langword="true" /> se il rettangolo definito dai parametri <paramref name="x" />, <paramref name="y" />, <paramref name="width" /> e <paramref name="height" /> è contenuto all'interno dell'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un'area rettangolare di ritaglio e lo imposta come area di visualizzazione per l'oggetto grafico del form utilizzando <xref:System.Drawing.Drawing2D.CombineMode.Replace>.  
  
-   Crea il percorso e dalle dimensioni dei due rettangoli, uno all'interno dell'area di ritaglio e uno esterno.  
  
-   Test dei rettangoli per visibilità e consente di disegnare solo il visibile.  
  
 Il risultato è un piccolo rettangolo rosso, che si trova all'interno dell'area di ritaglio.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#134)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#134)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#134](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#134)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleClipEmpty">
      <MemberSignature Language="C#" Value="public bool IsVisibleClipEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisibleClipEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisibleClipEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisibleClipEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisibleClipEmpty : bool" Usage="System.Drawing.Graphics.IsVisibleClipEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'area di ritaglio visibile di questo oggetto <see cref="T:System.Drawing.Graphics" /> è vuota.</summary>
        <value>
          <see langword="true" /> se la parte visibile dell'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> è vuota; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'area di ritaglio visibile rappresenta l'intersezione tra l'area di ritaglio di questo `Graphics` e l'area di visualizzazione della finestra.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCharacterRanges">
      <MemberSignature Language="C#" Value="public System.Drawing.Region[] MeasureCharacterRanges (string text, System.Drawing.Font font, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Region[] MeasureCharacterRanges(string text, class System.Drawing.Font font, valuetype System.Drawing.RectangleF layoutRect, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Drawing::Region ^&gt; ^ MeasureCharacterRanges(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::RectangleF layoutRect, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureCharacterRanges : string * System.Drawing.Font * System.Drawing.RectangleF * System.Drawing.StringFormat -&gt; System.Drawing.Region[]" Usage="graphics.MeasureCharacterRanges (text, font, layoutRect, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Region[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutRect" Type="System.Drawing.RectangleF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Stringa da misurare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato di testo della stringa.</param>
        <param name="layoutRect">Struttura <see cref="T:System.Drawing.RectangleF" /> che specifica il rettangolo di layout per la stringa.</param>
        <param name="stringFormat">Oggetto <see cref="T:System.Drawing.StringFormat" /> che rappresenta le informazioni di formattazione per la stringa, ad esempio l'interlinea.</param>
        <summary>Ottiene una matrice di oggetti <see cref="T:System.Drawing.Region" />, ciascuno dei quali delimita un intervallo di posizioni di caratteri nella stringa specificata.</summary>
        <returns>Questo metodo restituisce una matrice di oggetti <see cref="T:System.Drawing.Region" />, ciascuno dei quali delimita un intervallo di posizioni di caratteri nella stringa specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le aree restituite da questo metodo sono dipendenti dalla risoluzione, pertanto potrebbe verificarsi un lieve calo dell'accuratezza se le stringhe vengono registrate in un metafile una risoluzione e in un secondo momento riprodotti con diverse risoluzioni.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Imposta una stringa "gli intervalli di prima e seconda" e un tipo di carattere per la visualizzazione della stringa ("Times New Roman", il punto di 16).  
  
-   Set di due intervalli di caratteri all'interno della stringa (che corrispondono alle parole "First" e "Second").  
  
-   Crea un rettangolo in cui visualizzare la stringa.  
  
-   Imposta la formattazione della stringa, comprese le due intervalli di caratteri.  
  
-   Disegna la stringa alla schermata.  
  
-   Misura gli intervalli di caratteri, determina di rettangoli che delimitano i due intervalli specificati.  
  
-   Consente di disegnare due rettangoli sullo schermo.  
  
 Il risultato è la stringa visualizzata con il primo intervallo di decadimento ("First") da un rettangolo rosso e il secondo intervallo di decadimento ("secondo") da un rettangolo blu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#135)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#135)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#135](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#135)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MeasureString">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Misura la stringa specificata quando viene disegnata con l'oggetto <see cref="T:System.Drawing.Font" /> specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
      </Parameters>
      <Docs>
        <param name="text">Stringa da misurare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato di testo della stringa.</param>
        <summary>Misura la stringa specificata quando viene disegnata con l'oggetto <see cref="T:System.Drawing.Font" /> specificato.</summary>
        <returns>Questo metodo restituisce una struttura <see cref="T:System.Drawing.SizeF" /> che rappresenta le dimensioni, nell'unità specificata dalla proprietà <see cref="P:System.Drawing.Graphics.PageUnit" />, della stringa specificata dal parametro <paramref name="text" /> e disegnata con il parametro <paramref name="font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Graphics.MeasureString%2A> metodo è progettato per l'uso con singole stringhe e include una piccola quantità di spazio aggiuntivo prima e dopo la stringa per le parti sporgenti delle icone. Inoltre, il <xref:System.Drawing.Graphics.DrawString%2A> metodo di modifica i punti di glifo per ottimizzare la qualità della visualizzazione e potrebbero visualizzare una stringa più ristretta rispetto a quanto indicato dal <xref:System.Drawing.Graphics.MeasureString%2A>. Per ottenere le metriche adatte per le stringhe adiacenti nel layout (ad esempio, durante l'implementazione di testo formattato), usare il <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metodo o una delle <xref:System.Drawing.Graphics.MeasureString%2A> metodi che accetta un <xref:System.Drawing.StringFormat>e passare <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Inoltre, verificare che il <xref:System.Drawing.Graphics.TextRenderingHint%2A> per il <xref:System.Drawing.Graphics> è <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una stringa da misurare.  
  
-   Crea un oggetto del tipo di carattere e lo imposta su Arial (punto di 16).  
  
-   Crea un oggetto di dimensioni e e l'oggetto del tipo di carattere utilizzati per misurare le dimensioni della stringa.  
  
-   Disegna un rettangolo rosso usando le dimensioni della stringa misurata.  
  
-   Disegna la stringa all'interno del rettangolo disegnato.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#136)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#136)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#136](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#136)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
      </Parameters>
      <Docs>
        <param name="text">Stringa da misurare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato di testo della stringa.</param>
        <param name="layoutArea">Struttura <see cref="T:System.Drawing.SizeF" /> che specifica l'area massima di layout per il testo.</param>
        <summary>Misura la stringa specificata quando viene disegnata con l'oggetto <see cref="T:System.Drawing.Font" /> specificato nell'area di layout indicata.</summary>
        <returns>Questo metodo restituisce una struttura <see cref="T:System.Drawing.SizeF" /> che rappresenta le dimensioni, nell'unità specificata dalla proprietà <see cref="P:System.Drawing.Graphics.PageUnit" />, della stringa specificata dal parametro <paramref name="text" /> e disegnata con il parametro <paramref name="font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Graphics.MeasureString%2A> metodo è progettato per l'uso con singole stringhe e include una piccola quantità di spazio aggiuntivo prima e dopo la stringa per le parti sporgenti delle icone. Inoltre, il <xref:System.Drawing.Graphics.DrawString%2A> metodo di modifica i punti di glifo per ottimizzare la qualità della visualizzazione e potrebbero visualizzare una stringa più ristretta rispetto a quanto indicato dal <xref:System.Drawing.Graphics.MeasureString%2A>. Per ottenere le metriche adatte per le stringhe adiacenti nel layout (ad esempio, durante l'implementazione di testo formattato), usare il <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metodo o una delle <xref:System.Drawing.Graphics.MeasureString%2A> metodi che accetta un <xref:System.Drawing.StringFormat>e passare <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Inoltre, verificare che il <xref:System.Drawing.Graphics.TextRenderingHint%2A> per il <xref:System.Drawing.Graphics> è <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una stringa da misurare e un oggetto del tipo di carattere impostato su Arial (punto di 16).  
  
-   Imposta la dimensione massima di layout della stringa.  
  
-   Crea un oggetto dimensione e utilizza, l'oggetto del tipo di carattere e dimensioni massime di layout per misurare le dimensioni della stringa.  
  
-   Disegna un rettangolo rosso usando le dimensioni della stringa misurata.  
  
-   Disegna la stringa all'interno del rettangolo disegnato.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#138)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#138)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#138](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#138)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">Stringa da misurare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato della stringa.</param>
        <param name="width">Larghezza massima in pixel della stringa.</param>
        <summary>Misura la stringa specificata quando viene disegnata con l'oggetto <see cref="T:System.Drawing.Font" /> specificato.</summary>
        <returns>Questo metodo restituisce una struttura <see cref="T:System.Drawing.SizeF" /> che rappresenta le dimensioni, nell'unità specificata nella proprietà <see cref="P:System.Drawing.Graphics.PageUnit" />, della stringa specificata dal parametro <paramref name="text" /> e disegnata con il parametro <paramref name="font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `width` parametro specifica il valore massimo del componente larghezza dell'oggetto restituito <xref:System.Drawing.SizeF> struttura (<xref:System.Drawing.SizeF.Width%2A>). Se il `width` parametro è minore rispetto alla larghezza della stringa, restituita effettiva <xref:System.Drawing.SizeF.Width%2A> componente viene troncato a un valore che rappresenta il numero massimo di caratteri che possono essere contenuti all'interno della larghezza specificata. Per includere l'intera stringa, restituito <xref:System.Drawing.SizeF.Height%2A> componente viene regolato su un valore che consente la visualizzazione della stringa con carattere a capo.  
  
 Il <xref:System.Drawing.Graphics.MeasureString%2A> metodo è progettato per l'uso con singole stringhe e include una piccola quantità di spazio aggiuntivo prima e dopo la stringa per le parti sporgenti delle icone. Inoltre, il <xref:System.Drawing.Graphics.DrawString%2A> metodo di modifica i punti di glifo per ottimizzare la qualità della visualizzazione e potrebbero visualizzare una stringa più ristretta rispetto a quanto indicato dal <xref:System.Drawing.Graphics.MeasureString%2A>. Per ottenere le metriche adatte per le stringhe adiacenti nel layout (ad esempio, durante l'implementazione di testo formattato), usare il <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metodo o una delle <xref:System.Drawing.Graphics.MeasureString%2A> metodi che accetta un <xref:System.Drawing.StringFormat>e passare <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Inoltre, verificare che il <xref:System.Drawing.Graphics.TextRenderingHint%2A> per il <xref:System.Drawing.Graphics> è <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una stringa da misurare e un oggetto del tipo di carattere impostato su Arial (punto di 16).  
  
-   Imposta la larghezza massima della stringa.  
  
-   Crea un oggetto dimensione e utilizza, l'oggetto del tipo di carattere e la larghezza massima delle stringhe per misurare le dimensioni della stringa.  
  
-   Disegna un rettangolo rosso usando le dimensioni della stringa misurata.  
  
-   Disegna la stringa all'interno del rettangolo disegnato.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#141)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#141)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#141)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.PointF origin, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.PointF origin, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::PointF origin, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.PointF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, origin, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="origin" Type="System.Drawing.PointF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Stringa da misurare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato di testo della stringa.</param>
        <param name="origin">Struttura <see cref="T:System.Drawing.PointF" /> che rappresenta l'angolo superiore sinistro della stringa.</param>
        <param name="stringFormat">Oggetto <see cref="T:System.Drawing.StringFormat" /> che rappresenta le informazioni di formattazione per la stringa, ad esempio l'interlinea.</param>
        <summary>Misura la stringa specificata quando viene disegnata con l'oggetto <see cref="T:System.Drawing.Font" /> specificato e formattata con l'oggetto <see cref="T:System.Drawing.StringFormat" /> specificato.</summary>
        <returns>Questo metodo restituisce una struttura <see cref="T:System.Drawing.SizeF" /> che rappresenta le dimensioni, nell'unità specificata dalla proprietà <see cref="P:System.Drawing.Graphics.PageUnit" />, della stringa specificata dal parametro <paramref name="text" /> e disegnata con i parametri <paramref name="font" /> e <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Graphics.MeasureString%2A> metodo è progettato per l'uso con singole stringhe e include una piccola quantità di spazio aggiuntivo prima e dopo la stringa per le parti sporgenti delle icone. Inoltre, il <xref:System.Drawing.Graphics.DrawString%2A> metodo di modifica i punti di glifo per ottimizzare la qualità della visualizzazione e potrebbero visualizzare una stringa più ristretta rispetto a quanto indicato dal <xref:System.Drawing.Graphics.MeasureString%2A>. Per ottenere le metriche adatte per le stringhe adiacenti nel layout (ad esempio, durante l'implementazione di testo formattato), usare il <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metodo o una delle <xref:System.Drawing.Graphics.MeasureString%2A> metodi che accetta un <xref:System.Drawing.StringFormat>e passare <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Inoltre, verificare che il <xref:System.Drawing.Graphics.TextRenderingHint%2A> per il <xref:System.Drawing.Graphics> è <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una stringa da misurare e un oggetto tipo di carattere impostato su Arial (16 punti)  
  
-   Crea un punto per individuare l'angolo superiore sinistro della stringa.  
  
-   Crea un oggetto formato di stringa e imposta il flag di formato <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Crea un oggetto di dimensioni per misurare la stringa.  
  
-   Misura le dimensioni della stringa, usando la stringa, l'oggetto del tipo di carattere, il punto di individuazione e il formato della stringa.  
  
-   Disegna un rettangolo rosso usando il punto di individuazione e la dimensione della stringa misurata.  
  
-   Disegna la stringa all'interno del rettangolo disegnato.  
  
 Il risultato è un rettangolo verticale racchiudere una stringa verticale.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#137)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#137)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#137](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#137)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Stringa da misurare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato di testo della stringa.</param>
        <param name="layoutArea">Struttura <see cref="T:System.Drawing.SizeF" /> che specifica l'area massima di layout per il testo.</param>
        <param name="stringFormat">Oggetto <see cref="T:System.Drawing.StringFormat" /> che rappresenta le informazioni di formattazione per la stringa, ad esempio l'interlinea.</param>
        <summary>Misura la stringa specificata quando viene disegnata con l'oggetto <see cref="T:System.Drawing.Font" /> specificato e formattata con l'oggetto <see cref="T:System.Drawing.StringFormat" /> specificato.</summary>
        <returns>Questo metodo restituisce una struttura <see cref="T:System.Drawing.SizeF" /> che rappresenta le dimensioni, nell'unità specificata dalla proprietà <see cref="P:System.Drawing.Graphics.PageUnit" />, della stringa specificata nel parametro <paramref name="text" /> e disegnata con i parametri <paramref name="font" /> e <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Graphics.MeasureString%2A> metodo è progettato per l'uso con singole stringhe e include una piccola quantità di spazio aggiuntivo prima e dopo la stringa per le parti sporgenti delle icone. Inoltre, il <xref:System.Drawing.Graphics.DrawString%2A> metodo di modifica i punti di glifo per ottimizzare la qualità della visualizzazione e potrebbero visualizzare una stringa più ristretta rispetto a quanto indicato dal <xref:System.Drawing.Graphics.MeasureString%2A>. Per ottenere le metriche adatte per le stringhe adiacenti nel layout (ad esempio, durante l'implementazione di testo formattato), usare il <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metodo o una delle <xref:System.Drawing.Graphics.MeasureString%2A> metodi che accetta un <xref:System.Drawing.StringFormat>e passare <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Inoltre, verificare che il <xref:System.Drawing.Graphics.TextRenderingHint%2A> per il <xref:System.Drawing.Graphics> è <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una stringa da misurare e un oggetto del tipo di carattere impostato su Arial (punto di 16).  
  
-   Imposta la dimensione massima di layout della stringa, la creazione di un oggetto size per misurare la stringa.  
  
-   Crea un oggetto formato di stringa e imposta il flag di formato <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Misura le dimensioni della stringa, usando la stringa, l'oggetto del tipo di carattere, dimensioni massime di layout e il formato della stringa.  
  
-   Disegna un rettangolo rosso usando le dimensioni della stringa misurata.  
  
-   Disegna la stringa all'interno del rettangolo disegnato.  
  
 Il risultato è un rettangolo verticale racchiudere una stringa verticale.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#139)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#139)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#139)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, int width, System.Drawing.StringFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, int32 width, class System.Drawing.StringFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, int width, System::Drawing::StringFormat ^ format);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * int * System.Drawing.StringFormat -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, width, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="format" Type="System.Drawing.StringFormat" />
      </Parameters>
      <Docs>
        <param name="text">Stringa da misurare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato di testo della stringa.</param>
        <param name="width">Larghezza massima della stringa.</param>
        <param name="format">Oggetto <see cref="T:System.Drawing.StringFormat" /> che rappresenta le informazioni di formattazione per la stringa, ad esempio l'interlinea.</param>
        <summary>Misura la stringa specificata quando viene disegnata con l'oggetto <see cref="T:System.Drawing.Font" /> specificato e formattata con l'oggetto <see cref="T:System.Drawing.StringFormat" /> specificato.</summary>
        <returns>Questo metodo restituisce una struttura <see cref="T:System.Drawing.SizeF" /> che rappresenta le dimensioni, nell'unità specificata dalla proprietà <see cref="P:System.Drawing.Graphics.PageUnit" />, della stringa specificata nel parametro <paramref name="text" /> e disegnata con i parametri <paramref name="font" /> e <paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Graphics.MeasureString%2A> metodo è progettato per l'uso con singole stringhe e include una piccola quantità di spazio aggiuntivo prima e dopo la stringa per le parti sporgenti delle icone. Inoltre, il <xref:System.Drawing.Graphics.DrawString%2A> metodo di modifica i punti di glifo per ottimizzare la qualità della visualizzazione e potrebbero visualizzare una stringa più ristretta rispetto a quanto indicato dal <xref:System.Drawing.Graphics.MeasureString%2A>. Per ottenere le metriche adatte per le stringhe adiacenti nel layout (ad esempio, durante l'implementazione di testo formattato), usare il <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metodo o una delle <xref:System.Drawing.Graphics.MeasureString%2A> metodi che accetta un <xref:System.Drawing.StringFormat>e passare <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Inoltre, verificare che il <xref:System.Drawing.Graphics.TextRenderingHint%2A> per il <xref:System.Drawing.Graphics> è <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una stringa da misurare e un tipo di carattere oggetto impostato su Arial (punto di 16).  
  
-   Imposta la larghezza massima della stringa.  
  
-   Crea un oggetto formato di stringa e imposta il flag di formato <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Crea un oggetto di dimensioni per misurare la stringa.  
  
-   Misura le dimensioni della stringa, usando la stringa, l'oggetto del tipo di carattere, la larghezza massima e il formato della stringa.  
  
-   Disegna un rettangolo rosso usando le dimensioni della stringa misurata.  
  
-   Disegna la stringa all'interno del rettangolo disegnato.  
  
 Il risultato è un rettangolo verticale racchiudere una stringa verticale.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#142)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#142)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#142](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#142)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <Member MemberName="MeasureString">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF MeasureString (string text, System.Drawing.Font font, System.Drawing.SizeF layoutArea, System.Drawing.StringFormat stringFormat, out int charactersFitted, out int linesFilled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF MeasureString(string text, class System.Drawing.Font font, valuetype System.Drawing.SizeF layoutArea, class System.Drawing.StringFormat stringFormat, [out] int32&amp; charactersFitted, [out] int32&amp; linesFilled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::SizeF MeasureString(System::String ^ text, System::Drawing::Font ^ font, System::Drawing::SizeF layoutArea, System::Drawing::StringFormat ^ stringFormat, [Runtime::InteropServices::Out] int % charactersFitted, [Runtime::InteropServices::Out] int % linesFilled);" />
      <MemberSignature Language="F#" Value="member this.MeasureString : string * System.Drawing.Font * System.Drawing.SizeF * System.Drawing.StringFormat *  *  -&gt; System.Drawing.SizeF" Usage="graphics.MeasureString (text, font, layoutArea, stringFormat, charactersFitted, linesFilled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="layoutArea" Type="System.Drawing.SizeF" />
        <Parameter Name="stringFormat" Type="System.Drawing.StringFormat" />
        <Parameter Name="charactersFitted" Type="System.Int32" RefType="out" />
        <Parameter Name="linesFilled" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="text">Stringa da misurare.</param>
        <param name="font">Oggetto <see cref="T:System.Drawing.Font" /> che definisce il formato di testo della stringa.</param>
        <param name="layoutArea">Struttura <see cref="T:System.Drawing.SizeF" /> che specifica l'area massima di layout per il testo.</param>
        <param name="stringFormat">Oggetto <see cref="T:System.Drawing.StringFormat" /> che rappresenta le informazioni di formattazione per la stringa, ad esempio l'interlinea.</param>
        <param name="charactersFitted">Numero di caratteri della stringa.</param>
        <param name="linesFilled">Numero di righe di testo della stringa.</param>
        <summary>Misura la stringa specificata quando viene disegnata con l'oggetto <see cref="T:System.Drawing.Font" /> specificato e formattata con l'oggetto <see cref="T:System.Drawing.StringFormat" /> specificato.</summary>
        <returns>Questo metodo restituisce una struttura <see cref="T:System.Drawing.SizeF" /> che rappresenta le dimensioni, nell'unità specificata dalla proprietà <see cref="P:System.Drawing.Graphics.PageUnit" />, del parametro <paramref name="text" /> e disegnata con i parametri <paramref name="font" /> e<paramref name="stringFormat" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.Graphics.MeasureString%2A> metodo è progettato per l'uso con singole stringhe e include una piccola quantità di spazio aggiuntivo prima e dopo la stringa per le parti sporgenti delle icone. Inoltre, il <xref:System.Drawing.Graphics.DrawString%2A> metodo di modifica i punti di glifo per ottimizzare la qualità della visualizzazione e potrebbero visualizzare una stringa più ristretta rispetto a quanto indicato dal <xref:System.Drawing.Graphics.MeasureString%2A>. Per ottenere le metriche adatte per le stringhe adiacenti nel layout (ad esempio, durante l'implementazione di testo formattato), usare il <xref:System.Drawing.Graphics.MeasureCharacterRanges%2A> metodo o una delle <xref:System.Drawing.Graphics.MeasureString%2A> metodi che accetta un <xref:System.Drawing.StringFormat> e passare <xref:System.Drawing.StringFormat.GenericTypographic%2A>. Assicurarsi anche che il <xref:System.Drawing.Graphics.TextRenderingHint%2A> per il <xref:System.Drawing.Graphics> è <xref:System.Drawing.Text.TextRenderingHint.AntiAlias>.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una stringa da misurare e un oggetto tipo di carattere impostato su Arial (16 punti)  
  
-   Imposta la dimensione massima di layout della stringa.  
  
-   Crea un oggetto formato di stringa e imposta il flag di formato <xref:System.Drawing.StringFormatFlags.DirectionVertical>.  
  
-   Consente di creare le variabili integer `charactersFitted` e `linesFilled` e un oggetto di dimensioni per misurare la stringa.  
  
-   Misura le dimensioni della stringa e determina il numero di caratteri montati e le righe riempite, con la stringa, l'oggetto del tipo di carattere, dimensioni massime di layout e il formato della stringa.  
  
-   Disegna un rettangolo rosso usando le dimensioni della stringa misurata.  
  
-   Disegna la stringa all'interno del rettangolo disegnato.  
  
-   Disegna i valori del numero di caratteri montati e le righe compilato.  
  
 Il risultato è un rettangolo verticale racchiudere una stringa verticale.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#140)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#140)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#140)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="font" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.TextRenderer.MeasureText(System.Drawing.IDeviceContext,System.String,System.Drawing.Font,System.Drawing.Size,System.Windows.Forms.TextFormatFlags)" />
        <altmember cref="M:System.Drawing.Graphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Moltiplica la trasformazione globale di questo oggetto <see cref="T:System.Drawing.Graphics" /> e specifica l'oggetto <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix -&gt; unit" Usage="graphics.MultiplyTransform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">Oggetto <see cref="T:System.Drawing.Drawing2D.Matrix" /> 4x4 che moltiplica la trasformazione globale.</param>
        <summary>Moltiplica la trasformazione globale di questo oggetto <see cref="T:System.Drawing.Graphics" /> e specifica l'oggetto <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo antepone la matrice specificata per il `matrix` parametro, in modo che il risultato è `matrix` x trasformazione globale.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un `transformMatrix` matrix (due per due matrice di identità più un vettore di traslazione zero).  
  
-   Trasla la matrice di trasformazione in un vettore (200, 100).  
  
-   Ruota la matrice di trasformazione globale di Windows Form di 30 gradi, antepone la matrice di rotazione di 30 gradi alla matrice di trasformazione del form.  
  
-   Moltiplica la matrice di trasformazione ruotato convertiti `transformMatrix`e consente di anteporre il `transformMatrix` per la matrice di trasformazione.  
  
-   Disegna un'ellisse traslata ruotata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#143)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#143)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#143](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#143)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.MultiplyTransform (matrix, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">Oggetto <see cref="T:System.Drawing.Drawing2D.Matrix" /> 4x4 che moltiplica la trasformazione globale.</param>
        <param name="order">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> che determina l'ordine della moltiplicazione.</param>
        <summary>Moltiplica la trasformazione globale di questo oggetto <see cref="T:System.Drawing.Graphics" /> e specifica l'oggetto <see cref="T:System.Drawing.Drawing2D.Matrix" /> secondo l'ordine indicato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un valore pari <xref:System.Drawing.Drawing2D.MatrixOrder.Prepend> per il `order` parametro specifica che l'ordine della moltiplicazione è `matrix` x trasformazione globale. Un valore pari <xref:System.Drawing.Drawing2D.MatrixOrder.Append> per `order` specifica che l'ordine della moltiplicazione è la trasformazione globale x `matrix`.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un `transformMatrix` matrix (due per due matrice di identità più un vettore di traslazione zero).  
  
-   Trasla la matrice di trasformazione in un vettore (200, 100).  
  
-   Ruota la matrice di trasformazione globale di Windows Form di 30 gradi, anteporre la matrice di rotazione di 30 gradi alla matrice di trasformazione del form.  
  
-   Moltiplica la matrice di trasformazione ruotato convertiti `transformMatrix`, accodando il `transformMatrix` per la matrice di trasformazione.  
  
-   Disegna un'ellisse traslata ruotata.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#144)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#144)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#144](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#144)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageScale">
      <MemberSignature Language="C#" Value="public float PageScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PageScale" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageScale" />
      <MemberSignature Language="VB.NET" Value="Public Property PageScale As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float PageScale { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.PageScale : single with get, set" Usage="System.Drawing.Graphics.PageScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la proporzione tra le unità di misura internazionali e quelle della pagina per questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Questa proprietà specifica un valore per la proporzione tra le unità di misura internazionali e quelle della pagina per questo oggetto <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Drawing.Graphics.PageScale%2A> e <xref:System.Drawing.Graphics.TranslateTransform%2A> membri per modificare la scala e l'origine quando si disegna un rettangolo.  
  
 In questo esempio è progettato per essere usato con Windows Form. Incollare il codice in un form e si chiama il `ChangePageScaleAndTranslateTransform` metodo durante la gestione del modulo <xref:System.Windows.Forms.Control.Paint> evento passando `e` come <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.GraphicsProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#2)]
 [!code-vb[System.Drawing.GraphicsProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageUnit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit PageUnit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit PageUnit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PageUnit" />
      <MemberSignature Language="VB.NET" Value="Public Property PageUnit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit PageUnit { System::Drawing::GraphicsUnit get(); void set(System::Drawing::GraphicsUnit value); };" />
      <MemberSignature Language="F#" Value="member this.PageUnit : System.Drawing.GraphicsUnit with get, set" Usage="System.Drawing.Graphics.PageUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'unità di misura usata per le coordinate di pagina in questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Uno dei valori di <see cref="T:System.Drawing.GraphicsUnit" /> diverso da <see cref="F:System.Drawing.GraphicsUnit.World" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'unità di grafica è l'unità di misura usata per le coordinate di pagina in questo <xref:System.Drawing.Graphics>.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra l'effetto della modifica di <xref:System.Drawing.Graphics.PageUnit%2A> proprietà.  
  
 In questo esempio è progettato per essere usato con Windows Form. Incollare il codice in un form e si chiama il `ChangePageUnit` metodo durante la gestione del modulo <xref:System.Windows.Forms.Control.Paint> evento passando `e` come <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.GraphicsProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#3)]
 [!code-vb[System.Drawing.GraphicsProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La proprietà <see cref="P:System.Drawing.Graphics.PageUnit" /> è impostata su <see cref="F:System.Drawing.GraphicsUnit.World" /> che non corrisponde a un'unità fisica.</exception>
      </Docs>
    </Member>
    <Member MemberName="PixelOffsetMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.PixelOffsetMode PixelOffsetMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.PixelOffsetMode" />
      <MemberSignature Language="VB.NET" Value="Public Property PixelOffsetMode As PixelOffsetMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::PixelOffsetMode PixelOffsetMode { System::Drawing::Drawing2D::PixelOffsetMode get(); void set(System::Drawing::Drawing2D::PixelOffsetMode value); };" />
      <MemberSignature Language="F#" Value="member this.PixelOffsetMode : System.Drawing.Drawing2D.PixelOffsetMode with get, set" Usage="System.Drawing.Graphics.PixelOffsetMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.PixelOffsetMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore specificando la modalità di offset dei pixel durante il rendering di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Questa proprietà specifica un membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.PixelOffsetMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questa proprietà per specificare una maggiore qualità, rendering più lento o qualità inferiore, un rendering più veloce del contenuto di questo <xref:System.Drawing.Graphics> oggetto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReleaseHdc">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rilascia un handle per un contesto di dispositivo ottenuto da una precedente chiamata al metodo <see cref="M:System.Drawing.Graphics.GetHdc" /> di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHdc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHdc();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHdc : unit -&gt; unit&#xA;override this.ReleaseHdc : unit -&gt; unit" Usage="graphics.ReleaseHdc " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Drawing.IDeviceContext.ReleaseHdc</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia un handle per un contesto di dispositivo ottenuto da una precedente chiamata al metodo <see cref="M:System.Drawing.Graphics.GetHdc" /> di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Graphics.GetHdc%2A> e <xref:System.Drawing.Graphics.ReleaseHdc%2A> disponibili due metodi che consentono di ottenere e rilasciare l'handle per un dispositivo Windows. È opportuno seguire sempre una chiamata a <xref:System.Drawing.Graphics.GetHdc%2A> con una chiamata a <xref:System.Drawing.Graphics.ReleaseHdc%2A> termine con l'handle di Windows.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Per accedere al codice non gestito. Enumerazione correlata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Drawing.IDeviceContext" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdc">
      <MemberSignature Language="C#" Value="public void ReleaseHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdc (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdc(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdc : nativeint -&gt; unit" Usage="graphics.ReleaseHdc hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Handle per un contesto di dispositivo ottenuto da una precedente chiamata al metodo <see cref="M:System.Drawing.Graphics.GetHdc" /> di questo oggetto <see cref="T:System.Drawing.Graphics" />.</param>
        <summary>Rilascia un handle per un contesto di dispositivo ottenuto da una precedente chiamata al metodo <see cref="M:System.Drawing.Graphics.GetHdc" /> di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il contesto di dispositivo è una struttura di Windows basata su [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] che definisce un set di oggetti grafici e i relativi attributi associati, nonché le modalità con interfaccia grafiche che influisce sull'output.  
  
 Le chiamate al <xref:System.Drawing.Graphics.GetHdc%2A> e <xref:System.Drawing.Graphics.ReleaseHdc%2A> metodi devono essere presenti in coppia. Nell'ambito di una <xref:System.Drawing.Graphics.GetHdc%2A> e <xref:System.Drawing.Graphics.ReleaseHdc%2A> coppia di metodi, in genere eseguono chiamate solo a [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funzioni. Chiama nel cui ambito apportate a [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] metodi del <xref:System.Drawing.Graphics> che ha prodotto il `hdc` parametro esito negativo con un `ObjectBusy` errore. Inoltre [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ignora le modifiche di stato apportate al <xref:System.Drawing.Graphics> del `hdc` parametro nelle operazioni successive.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nell'esempio viene illustrata la chiamata a un Windows [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funzione per eseguire la stessa attività come un [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> (metodo). Nel codice vengono eseguite le seguenti azioni:  
  
-   Definisce l'interoperabilità <xref:System.Runtime.InteropServices.DllImportAttribute> attributo per gdi32.dll il file DLL di Windows. Questa DLL contiene il valore desiderato [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] funzione e definisce il <xref:System.Drawing.Rectangle> funzione nella DLL come esterno.  
  
-   Crea una penna colore rosso.  
  
-   Con la penna, disegna un rettangolo sullo schermo utilizzando il [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics.DrawRectangle%2A> (metodo).  
  
-   Definisce una variabile di tipo puntatore interno `hdc` e imposta il valore per l'handle al contesto di dispositivo del form.  
  
-   Disegna un rettangolo sullo schermo utilizzando il [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <xref:System.Drawing.Rectangle> (funzione).  
  
-   Rilascia il contesto di dispositivo rappresentato dal `hdc` parametro.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#145)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#145)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#145](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#145)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Per accedere al codice non gestito. Enumerazione correlata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHdcInternal">
      <MemberSignature Language="C#" Value="public void ReleaseHdcInternal (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseHdcInternal(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ReleaseHdcInternal(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHdcInternal (hdc As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHdcInternal(IntPtr hdc);" />
      <MemberSignature Language="F#" Value="member this.ReleaseHdcInternal : nativeint -&gt; unit" Usage="graphics.ReleaseHdcInternal hdc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Handle per un contesto di dispositivo.</param>
        <summary>Rilascia un handle per un contesto di dispositivo.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Per accedere al codice non gestito. Enumerazione correlata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="RenderingOrigin">
      <MemberSignature Language="C#" Value="public System.Drawing.Point RenderingOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point RenderingOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.RenderingOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderingOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point RenderingOrigin { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.RenderingOrigin : System.Drawing.Point with get, set" Usage="System.Drawing.Graphics.RenderingOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'origine del rendering di questo oggetto <see cref="T:System.Drawing.Graphics" /> per il dithering e i pennelli per il tratteggio.</summary>
        <value>Struttura <see cref="T:System.Drawing.Point" /> che rappresenta l'origine del dithering a 8 bit per pixel e a 16 bit per pixel e che viene usata anche per impostare l'origine dei pennelli per il tratteggio.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetClip">
      <MemberSignature Language="C#" Value="public void ResetClip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetClip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetClip" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetClip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetClip();" />
      <MemberSignature Language="F#" Value="member this.ResetClip : unit -&gt; unit" Usage="graphics.ResetClip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reimposta l'area di ritaglio di questo oggetto <see cref="T:System.Drawing.Graphics" /> su infinito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando l'area di visualizzazione di un <xref:System.Drawing.Graphics> è impostata su infinito, gli elementi da questo <xref:System.Drawing.Graphics> disegna non viene ritagliati.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un rettangolo con angoli superiore sinistro (0, 0) e imposta l'area di ritaglio di questo rettangolo.  
  
-   Crea un secondo rettangolo con angoli superiore sinistro (100, 100) e imposta l'area di visualizzazione per l'intersezione di questo rettangolo e l'area di visualizzazione corrente (il primo rettangolo).  
  
-   Riempimento di un rettangolo grande che includa entrambi i rettangoli precedenti con un oggetto solid brush blu.  
  
-   Reimposta l'area di ridimensionamento su infinito.  
  
-   Consente di disegnare rettangoli intorno a due aree di ridimensionamento; viene utilizzata una penna nera per il rettangolo di ridimensionamento prima e una penna colore rosso per la seconda area di ritaglio.  
  
 Il risultato è che solo l'intersezione dei due rettangoli viene riempita con blu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#146)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#146)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#146](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#146)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberSignature Language="F#" Value="member this.ResetTransform : unit -&gt; unit" Usage="graphics.ResetTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reimposta la matrice di trasformazione globale di questo oggetto <see cref="T:System.Drawing.Graphics" /> sulla matrice di identità.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La matrice identità rappresenta una trasformazione con alcun ridimensionamento, rotazione o traslazione. Reimpostare la trasformazione globale di questo <xref:System.Drawing.Graphics> sulla matrice di identità indica che la trasformazione globale non modifica la geometria di elementi trasformati.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Trasla la trasformazione globale di Windows Form in un vettore (100, 0).  
  
-   Salva lo stato di grafica del form.  
  
-   Reimposta la trasformazione globale del form a un'identità e riempie un rettangolo con un oggetto solid brush rosso.  
  
-   Ripristina lo stato di grafica tradotta e riempie un rettangolo con un oggetto solid brush blu.  
  
 Il risultato è un rettangolo con riempimento rossa e un rettangolo con riempimento blu tradotto.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#147)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#147)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#147](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#147)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restore">
      <MemberSignature Language="C#" Value="public void Restore (System.Drawing.Drawing2D.GraphicsState gstate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restore(class System.Drawing.Drawing2D.GraphicsState gstate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restore (gstate As GraphicsState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restore(System::Drawing::Drawing2D::GraphicsState ^ gstate);" />
      <MemberSignature Language="F#" Value="member this.Restore : System.Drawing.Drawing2D.GraphicsState -&gt; unit" Usage="graphics.Restore gstate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gstate" Type="System.Drawing.Drawing2D.GraphicsState" />
      </Parameters>
      <Docs>
        <param name="gstate">Oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> che rappresenta lo stato di <see cref="T:System.Drawing.Graphics" /> da ripristinare.</param>
        <summary>Ripristina lo stato di questi oggetti <see cref="T:System.Drawing.Graphics" /> allo stato rappresentato da un oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si chiama il <xref:System.Drawing.Graphics.Save%2A> metodo di un <xref:System.Drawing.Graphics>, un blocco di informazioni che contiene lo stato del <xref:System.Drawing.Graphics> viene inserito in uno stack. Il <xref:System.Drawing.Graphics.Save%2A> metodo restituisce un <xref:System.Drawing.Drawing2D.GraphicsState> che identifica il blocco di informazioni. Quando si passa l'identificazione <xref:System.Drawing.Drawing2D.GraphicsState> per il <xref:System.Drawing.Graphics.Restore%2A> metodo, il blocco di informazioni viene rimossa dallo stack e viene usato per ripristinare il <xref:System.Drawing.Graphics> allo stato di cui si trovava al momento del <xref:System.Drawing.Graphics.Save%2A> chiamata al metodo. Si noti che il <xref:System.Drawing.Drawing2D.GraphicsState> restituito da una chiamata specifica al <xref:System.Drawing.Graphics.Save%2A> metodo può essere passato a una sola volta al `Restore` (metodo).  
  
 Le chiamate al <xref:System.Drawing.Graphics.Save%2A> metodo può essere annidato, vale a dire, è possibile chiamare il <xref:System.Drawing.Graphics.Save%2A> metodo più volte prima di chiamare il <xref:System.Drawing.Graphics.Restore%2A> (metodo). Ogni volta che si chiama il <xref:System.Drawing.Graphics.Save%2A> metodo, viene inserito un blocco di informazioni sullo stack e si riceve un <xref:System.Drawing.Drawing2D.GraphicsState> per il blocco di informazioni. Quando si passa uno di questi oggetti per il <xref:System.Drawing.Graphics.Restore%2A> metodo, il <xref:System.Drawing.Graphics> viene restituito lo stato in cui si trovava al momento della <xref:System.Drawing.Graphics.Save%2A> chiamata al metodo che ha restituito quel particolare <xref:System.Drawing.Drawing2D.GraphicsState>. Il blocco di informazioni inserite nello stack da tale <xref:System.Drawing.Graphics.Save%2A> chiamata al metodo viene rimosso dallo stack e inseriti tutti i blocchi di informazioni sullo stack in seguito <xref:System.Drawing.Graphics.Save%2A> vengono rimossi anche chiamata al metodo.  
  
 Le chiamate al <xref:System.Drawing.Graphics.BeginContainer%2A> blocchi di informazioni sul posto di metodo sullo stesso stack come chiamate al <xref:System.Drawing.Graphics.Save%2A> (metodo). Proprio come un <xref:System.Drawing.Graphics.Restore%2A> chiamata è associata a un <xref:System.Drawing.Graphics.Save%2A> chiamare, un <xref:System.Drawing.Graphics.EndContainer%2A> chiamata al metodo è associata a un <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo.  
  
 Quando si chiama il <xref:System.Drawing.Graphics.Restore%2A> metodo, tutti i blocchi di informazioni posizionato sullo stack di (dal <xref:System.Drawing.Graphics.Save%2A> (metodo) o tramite il <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo)) dopo la chiamata corrispondente al <xref:System.Drawing.Graphics.Save%2A> metodo vengono rimossi dallo stack. Allo stesso modo, quando si chiama il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, tutti i blocchi di informazioni posizionato sullo stack di (dal <xref:System.Drawing.Graphics.Save%2A> (metodo) o tramite il <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo)) dopo la chiamata corrispondente al <xref:System.Drawing.Graphics.BeginContainer%2A> metodo vengono rimossi dallo stack.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Trasla la trasformazione globale di Windows Form in un vettore (100, 0).  
  
-   Salva lo stato di grafica del form.  
  
-   Reimposta la trasformazione globale del form a un'identità e riempie un rettangolo con un oggetto solid brush rosso.  
  
-   Ripristina lo stato di grafica tradotta e riempie un secondo rettangolo con un oggetto solid brush blu.  
  
 Il risultato è un rettangolo con riempimento rossa e un rettangolo con riempimento blu tradotto.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#148)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#148)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#148](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#148)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Applica la rotazione specificata alla matrice di trasformazione di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single -&gt; unit" Usage="graphics.RotateTransform angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Angolo di rotazione in gradi.</param>
        <summary>Applica la rotazione specificata alla matrice di trasformazione di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'operazione di rotazione consiste nel moltiplicare la matrice di trasformazione per una matrice i cui elementi sono derivati dal `angle` parametro. Questo metodo si applica la rotazione, anteponendola alla matrice di trasformazione.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Converte la matrice di trasformazione globale di Windows Form dal vettore (100, 0).  
  
-   Ruota la trasformazione globale di un angolo di 30 gradi, anteporre la matrice di rotazione per la matrice di trasformazione.  
  
-   Disegna un'ellisse traslata ruotata con una penna blu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#149)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#149)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#149](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#149)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.RotateTransform (angle, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Angolo di rotazione in gradi.</param>
        <param name="order">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> che specifica se la rotazione è anteposta o accodata alla matrice di trasformazione.</param>
        <summary>Applica la rotazione specificata alla matrice di trasformazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> secondo l'ordine specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'operazione di rotazione consiste nel moltiplicare la matrice di trasformazione per una matrice i cui elementi sono derivati dal `angle` parametro. Questo metodo antepone o aggiunge la matrice di trasformazione i <xref:System.Drawing.Graphics> per la matrice di rotazione in base al `order` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Converte la matrice di trasformazione globale di Windows Form dal vettore (100, 0).  
  
-   Ruota la trasformazione globale di 30 gradi, accodando la matrice di rotazione alla matrice di trasformazione globale con <xref:System.Drawing.Drawing2D.MatrixOrder.Append>.  
  
-   Disegna un'ellisse tradotta, ruotata con una penna blu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#150)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#150)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#150](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#150)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.GraphicsState Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.GraphicsState Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.Save" />
      <MemberSignature Language="VB.NET" Value="Public Function Save () As GraphicsState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::GraphicsState ^ Save();" />
      <MemberSignature Language="F#" Value="member this.Save : unit -&gt; System.Drawing.Drawing2D.GraphicsState" Usage="graphics.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.GraphicsState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Salva lo stato corrente di questo oggetto <see cref="T:System.Drawing.Graphics" /> e identifica lo stato salvato con un oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsState" />.</summary>
        <returns>Questo metodo restituisce un oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> che rappresenta lo stato salvato di questo oggetto <see cref="T:System.Drawing.Graphics" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si chiama il <xref:System.Drawing.Graphics.Save%2A> metodo di un <xref:System.Drawing.Graphics>, un blocco di informazioni che contiene lo stato del <xref:System.Drawing.Graphics> viene inserito in uno stack. Il <xref:System.Drawing.Graphics.Save%2A> metodo restituisce un <xref:System.Drawing.Drawing2D.GraphicsState> che identifica il blocco di informazioni. Quando si passa l'identificazione <xref:System.Drawing.Drawing2D.GraphicsState> per il <xref:System.Drawing.Graphics.Restore%2A> metodo, il blocco di informazioni viene rimossa dallo stack e viene usato per ripristinare il <xref:System.Drawing.Graphics> allo stato di cui si trovava al momento del <xref:System.Drawing.Graphics.Save%2A> chiamata al metodo. Si noti che il <xref:System.Drawing.Drawing2D.GraphicsState> restituito da una chiamata specifica al <xref:System.Drawing.Graphics.Save%2A> metodo può essere passato a una sola volta al <xref:System.Drawing.Graphics.Restore%2A> (metodo).  
  
 Le chiamate al <xref:System.Drawing.Graphics.Save%2A> metodo può essere annidato, vale a dire, è possibile chiamare il <xref:System.Drawing.Graphics.Save%2A> metodo più volte prima di chiamare il <xref:System.Drawing.Graphics.Restore%2A> (metodo). Ogni volta che si chiama il <xref:System.Drawing.Graphics.Save%2A> metodo, viene inserito un blocco di informazioni sullo stack e si riceve un <xref:System.Drawing.Drawing2D.GraphicsState> per il blocco di informazioni. Quando si passa uno di questi oggetti per il <xref:System.Drawing.Graphics.Restore%2A> metodo, il <xref:System.Drawing.Graphics> viene restituito lo stato in cui si trovava al momento della <xref:System.Drawing.Graphics.Save%2A> chiamata al metodo che ha restituito quel particolare <xref:System.Drawing.Drawing2D.GraphicsState>. Il blocco di informazioni inserite nello stack da tale <xref:System.Drawing.Graphics.Save%2A> chiamata al metodo viene rimosso dallo stack e inseriti tutti i blocchi di informazioni sullo stack in seguito <xref:System.Drawing.Graphics.Save%2A> vengono rimossi anche chiamata al metodo.  
  
 Le chiamate al <xref:System.Drawing.Graphics.BeginContainer%2A> blocchi di informazioni sul posto di metodo sullo stesso stack come chiamate al <xref:System.Drawing.Graphics.Save%2A> (metodo). Proprio come un <xref:System.Drawing.Graphics.Restore%2A> chiamata è associata a un <xref:System.Drawing.Graphics.Save%2A> chiamare, un <xref:System.Drawing.Graphics.EndContainer%2A> chiamata al metodo è associata a un <xref:System.Drawing.Graphics.BeginContainer%2A> chiamata al metodo.  
  
 Quando si chiama il <xref:System.Drawing.Graphics.Restore%2A> metodo, tutti i blocchi di informazioni posizionato sullo stack di (dal <xref:System.Drawing.Graphics.Save%2A> (metodo) o tramite il <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo)) dopo la chiamata corrispondente al <xref:System.Drawing.Graphics.Save%2A> metodo vengono rimossi dallo stack. Allo stesso modo, quando si chiama il <xref:System.Drawing.Graphics.EndContainer%2A> metodo, tutti i blocchi di informazioni posizionato sullo stack di (dal <xref:System.Drawing.Graphics.Save%2A> (metodo) o tramite il <xref:System.Drawing.Graphics.BeginContainer%2A> (metodo)) dopo la chiamata corrispondente al <xref:System.Drawing.Graphics.BeginContainer%2A> metodo vengono rimossi dallo stack.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Trasla la trasformazione globale di Windows Form in un vettore (100, 0).  
  
-   Salva lo stato di grafica del form.  
  
-   Reimpostazione della trasformazione globale del form a un'identità (identità 2x2 più una traduzione zero-vettore) e viene compilato un rettangolo con un oggetto solid brush rosso.  
  
-   Ripristina lo stato di grafica tradotta e riempie un rettangolo con un oggetto solid brush blu.  
  
 Il risultato è un red rettangolo con riempimento a sinistra e un rettangolo con riempimento blu tradotto a destra del form.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#151)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#151)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#151](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#151)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Applica l'operazione di ridimensionamento specificata alla matrice di trasformazione di questo oggetto <see cref="T:System.Drawing.Graphics" />, anteponendola alla matrice di trasformazione dell'oggetto.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single -&gt; unit" Usage="graphics.ScaleTransform (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">Fattore di scala nella direzione X.</param>
        <param name="sy">Fattore di scala nella direzione Y.</param>
        <summary>Applica l'operazione di ridimensionamento specificata alla matrice di trasformazione di questo oggetto <see cref="T:System.Drawing.Graphics" />, anteponendola alla matrice di trasformazione dell'oggetto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'operazione di ridimensionamento consiste nel moltiplicare la matrice di trasformazione da una matrice diagonale i cui elementi sono (`sx`, `sy`, 1). Questo metodo antepone la matrice di trasformazione di <xref:System.Drawing.Graphics> mediante la matrice di ridimensionamento.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Ruota la matrice di trasformazione globale di Windows Form di 30 gradi.  
  
-   Ridimensionamento della matrice da un fattore pari a 3 nella direzione x e un fattore pari a 1 nella direzione y anteponendo la trasformazione di ridimensionamento.  
  
-   Disegna un rettangolo ruotato e ridimensionato con una penna blu.  
  
 Il risultato ha ancora un rettangolo.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#152)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#152)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#152](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#152)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.ScaleTransform (sx, sy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">Fattore di scala nella direzione X.</param>
        <param name="sy">Fattore di scala nella direzione Y.</param>
        <param name="order">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> che specifica se l'operazione di ridimensionamento è anteposta o accodata alla matrice di trasformazione.</param>
        <summary>Applica l'operazione di ridimensionamento specificata alla matrice di trasformazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> secondo l'ordine indicato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'operazione di ridimensionamento consiste nel moltiplicare la matrice di trasformazione da una matrice diagonale i cui elementi sono (`sx`, `sy`, 1). Questo metodo antepone o aggiunge la matrice di trasformazione i <xref:System.Drawing.Graphics> mediante la matrice di ridimensionamento in base al `order` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Ruota la matrice di trasformazione globale di Windows Form di 30 gradi.  
  
-   Ridimensionamento della matrice in un fattore pari a 3 nella direzione x e un fattore pari a 1 nella direzione y aggiungendo la trasformazione di ridimensionamento con il <xref:System.Drawing.Drawing2D.MatrixOrder.Append> membro.  
  
-   Disegna un rettangolo ruotato e ridimensionato con una penna blu.  
  
 Il risultato è un parallelogramma.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#153)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#153)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#153](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#153)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Imposta l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> sulla proprietà <see langword="Clip" /> dell'oggetto <see cref="T:System.Drawing.Graphics" /> specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath -&gt; unit" Usage="graphics.SetClip path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">Oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> che rappresenta la nuova area di visualizzazione.</param>
        <summary>Imposta l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> sull'oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il percorso grafico rappresentato dal `path` parametro non viene chiusa, un segmento aggiuntivo viene aggiunto dall'ultimo punto per il primo punto da chiudere il tracciato.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un percorso della grafica e aggiunge un'ellisse al percorso.  
  
-   Imposta l'area di visualizzazione per il percorso ellittico.  
  
-   Riempie un grande rettangolo con un pennello di colore nero a tinta unita.  
  
 Il risultato è un'ellisse con riempimento nera.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#154)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#154)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#154](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#154)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (g As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics -&gt; unit" Usage="graphics.SetClip g" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="g">Oggetto <see cref="T:System.Drawing.Graphics" /> da cui trarre la nuova area di ritaglio.</param>
        <summary>Imposta l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> sulla proprietà <see langword="Clip" /> dell'oggetto <see cref="T:System.Drawing.Graphics" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Il codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, che è un parametro del <xref:System.Windows.Forms.Control.Paint> gestore evento, nonché `thisForm`, il <xref:System.Windows.Forms.Form> per l'esempio. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una variabile temporanea <xref:System.Drawing.Graphics> dal `thisForm` <xref:System.Windows.Forms.Form> dell'esempio.  
  
-   Imposta l'area di ritaglio dell'oggetto temporaneo <xref:System.Drawing.Graphics> a un piccolo quadrato.  
  
-   Aggiorna l'area di ritaglio dell'oggetto grafico del form a quella dell'oggetto temporaneo <xref:System.Drawing.Graphics>.  
  
-   Riempie un grande rettangolo con un pennello di colore nero a tinta unita.  
  
 Il risultato è un quadrato piccolo, riempito, nero.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#156)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#156)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#156](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#156)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> che rappresenta la nuova area di ritaglio.</param>
        <summary>Imposta l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> sul rettangolo specificato da una struttura <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un piccolo rettangolo per l'area di ritaglio.  
  
-   Imposta l'area di ritaglio nel rettangolo.  
  
-   Riempie un grande rettangolo con un pennello di colore nero a tinta unita.  
  
 Il risultato è un rettangolo di piccole dimensioni, riempito, nero.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#158)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#158)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#158](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#158)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetClip (rect As RectangleF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF -&gt; unit" Usage="graphics.SetClip rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
      </Parameters>
      <Docs>
        <param name="rect">Struttura <see cref="T:System.Drawing.RectangleF" /> che rappresenta la nuova area di ritaglio.</param>
        <summary>Imposta l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> sul rettangolo specificato da una struttura <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un piccolo rettangolo per l'area di ritaglio.  
  
-   Imposta l'area di ritaglio nel rettangolo.  
  
-   Riempie un grande rettangolo con un pennello di colore nero a tinta unita.  
  
 Il risultato è un rettangolo di piccole dimensioni, riempito, nero.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#160)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#160)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#160](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#160)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Drawing2D.GraphicsPath path, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Drawing2D.GraphicsPath path, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Drawing2D::GraphicsPath ^ path, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Drawing2D.GraphicsPath * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (path, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="path">Oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> da combinare.</param>
        <param name="combineMode">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.CombineMode" /> che specifica le operazioni di combinazione da usare.</param>
        <summary>Imposta l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> sul risultato dell'operazione di combinazione indicata tra l'area di ritaglio corrente e l'oggetto <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il percorso grafico rappresentato dal `path` parametro non viene chiusa, un segmento aggiuntivo viene aggiunto dall'ultimo punto per il primo punto da chiudere il tracciato.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un percorso della grafica e aggiunge un'ellisse al percorso.  
  
-   Imposta l'area di ritaglio sul percorso ellittico con la <xref:System.Drawing.Drawing2D.CombineMode.Replace> membro.  
  
-   Riempie un grande rettangolo con un pennello di colore nero a tinta unita.  
  
 Il risultato è un'ellisse con riempimento nera.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#155)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#155)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#155](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#155)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Graphics g, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Graphics g, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Graphics ^ g, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Graphics * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (g, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="g">Oggetto <see cref="T:System.Drawing.Graphics" /> che specifica l'area di ritaglio da combinare.</param>
        <param name="combineMode">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.CombineMode" /> che specifica le operazioni di combinazione da usare.</param>
        <summary>Imposta l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> sul risultato dell'operazione indicata di combinazione tra l'area di ritaglio corrente e la proprietà <see cref="P:System.Drawing.Graphics.Clip" /> dell'oggetto <see cref="T:System.Drawing.Graphics" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Il codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, che è un parametro del <xref:System.Windows.Forms.Control.Paint> gestore evento, nonché `thisForm`, il <xref:System.Windows.Forms.Form> per l'esempio. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea una variabile temporanea <xref:System.Drawing.Graphics> dal `thisForm` <xref:System.Windows.Forms.Form> dell'esempio.  
  
-   Imposta l'area di ritaglio dell'oggetto temporaneo <xref:System.Drawing.Graphics> a un piccolo quadrato.  
  
-   Aggiorna l'area di ritaglio dell'oggetto grafico del modulo a quello della nuova <xref:System.Drawing.Graphics> con il <xref:System.Drawing.Drawing2D.CombineMode.Replace> membro.  
  
-   Riempie un grande rettangolo con un pennello di colore nero a tinta unita.  
  
 Il risultato è un quadrato piccolo, riempito, nero.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#157)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#157)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#157](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#157)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Rectangle rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Rectangle rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Rectangle * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">Struttura <see cref="T:System.Drawing.Rectangle" /> da combinare.</param>
        <param name="combineMode">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.CombineMode" /> che specifica le operazioni di combinazione da usare.</param>
        <summary>Imposta l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> sul risultato dell'operazione di combinazione indicata tra l'area di ritaglio corrente e il rettangolo specificato da una struttura <see cref="T:System.Drawing.Rectangle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un piccolo rettangolo per l'area di ritaglio.  
  
-   Imposta l'area di ritaglio sul rettangolo con il <xref:System.Drawing.Drawing2D.CombineMode.Replace> membro.  
  
-   Riempie un grande rettangolo con un pennello di colore nero a tinta unita.  
  
 Il risultato è un rettangolo di piccole dimensioni, riempito, nero.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#159)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#159)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#159](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#159)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.RectangleF rect, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::RectangleF rect, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.RectangleF * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (rect, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="rect">Struttura <see cref="T:System.Drawing.RectangleF" /> da combinare.</param>
        <param name="combineMode">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.CombineMode" /> che specifica le operazioni di combinazione da usare.</param>
        <summary>Imposta l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> sul risultato dell'operazione di combinazione indicata tra l'area di ritaglio corrente e il rettangolo specificato da una struttura <see cref="T:System.Drawing.RectangleF" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un piccolo rettangolo per l'area di ritaglio.  
  
-   Imposta l'area di ritaglio sul rettangolo con il <xref:System.Drawing.Drawing2D.CombineMode.Replace> membro.  
  
-   Riempie un grande rettangolo con un pennello di colore nero a tinta unita.  
  
 Il risultato è un rettangolo di piccole dimensioni, riempito, nero.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#161)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#161)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#161](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#161)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetClip">
      <MemberSignature Language="C#" Value="public void SetClip (System.Drawing.Region region, System.Drawing.Drawing2D.CombineMode combineMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetClip(class System.Drawing.Region region, valuetype System.Drawing.Drawing2D.CombineMode combineMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetClip(System::Drawing::Region ^ region, System::Drawing::Drawing2D::CombineMode combineMode);" />
      <MemberSignature Language="F#" Value="member this.SetClip : System.Drawing.Region * System.Drawing.Drawing2D.CombineMode -&gt; unit" Usage="graphics.SetClip (region, combineMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="combineMode" Type="System.Drawing.Drawing2D.CombineMode" />
      </Parameters>
      <Docs>
        <param name="region">Oggetto <see cref="T:System.Drawing.Region" /> da combinare.</param>
        <param name="combineMode">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.CombineMode" /> che specifica l'operazione di combinazione da usare.</param>
        <summary>Imposta l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> sul risultato dell'operazione di combinazione indicata tra l'area di ritaglio corrente e l'oggetto <see cref="T:System.Drawing.Region" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un piccolo rettangolo per l'area di ritaglio.  
  
-   Imposta l'area di ritaglio sul rettangolo con il <xref:System.Drawing.Drawing2D.CombineMode.Replace> membro.  
  
-   Riempie un grande rettangolo con un pennello di colore nero a tinta unita.  
  
 Il risultato è un rettangolo di piccole dimensioni, riempito, nero.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#162)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#162)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#162](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#162)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmoothingMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.SmoothingMode SmoothingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.SmoothingMode SmoothingMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.SmoothingMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SmoothingMode As SmoothingMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::SmoothingMode SmoothingMode { System::Drawing::Drawing2D::SmoothingMode get(); void set(System::Drawing::Drawing2D::SmoothingMode value); };" />
      <MemberSignature Language="F#" Value="member this.SmoothingMode : System.Drawing.Drawing2D.SmoothingMode with get, set" Usage="System.Drawing.Graphics.SmoothingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.SmoothingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la qualità di rendering per questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Uno dei valori di <see cref="T:System.Drawing.Drawing2D.SmoothingMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modalità di arrotondamento specifica se le linee, curve e i bordi delle aree riempite usano anti-aliasing (detto anche anti-aliasing). Un'unica eccezione è che pennelli sfumatura di percorso non rispettano la modalità di arrotondamento. Le aree riempite con un <xref:System.Drawing.Drawing2D.PathGradientBrush> vengono visualizzate nello stesso modo (con aliasing effettuato) indipendentemente il <xref:System.Drawing.Graphics.SmoothingMode%2A> proprietà.  
  
   
  
## Examples  
 Il metodo seguente illustra gli effetti dell'impostazione di <xref:System.Drawing.Pen.DashCap%2A>, <xref:System.Drawing.Pen.DashPattern%2A>, e <xref:System.Drawing.Graphics.SmoothingMode%2A> proprietà. L'output dell'esempio è illustrato nella figura seguente.  
  
 ![Righe con e senza smussatura. ] (~/add/media/gdi-smoothingmode.png "Linee con e senza smussatura.")  
  
 In questo esempio è progettato per essere usato con Windows Form. Incollare il codice in un form e si chiama il `ShowPensAndSmoothingMode` metodo durante la gestione del modulo <xref:System.Windows.Forms.Control.Paint> evento passando `e` come <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.PensExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.PensExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.PensExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.PensExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.PensExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.PensExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContrast">
      <MemberSignature Language="C#" Value="public int TextContrast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextContrast" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextContrast" />
      <MemberSignature Language="VB.NET" Value="Public Property TextContrast As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextContrast { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextContrast : int with get, set" Usage="System.Drawing.Graphics.TextContrast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore di correzione gamma per il rendering del testo.</summary>
        <value>Il valore di correzione gamma usato per il rendering di testo con antialias e ClearType.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore di correzione gamma deve essere compreso tra 0 e 12. Il valore predefinito è 4.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo dei <xref:System.Drawing.Graphics.TextRenderingHint%2A> e <xref:System.Drawing.Graphics.TextContrast%2A> proprietà.  
  
 In questo esempio è progettato per essere usato con Windows Form. Incollare il codice in un form e si chiama il `ChangeTextRenderingHintAndTextContrast` metodo durante la gestione del modulo <xref:System.Windows.Forms.Control.Paint> evento passando `e` come <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextRenderingHint">
      <MemberSignature Language="C#" Value="public System.Drawing.Text.TextRenderingHint TextRenderingHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Text.TextRenderingHint TextRenderingHint" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.TextRenderingHint" />
      <MemberSignature Language="VB.NET" Value="Public Property TextRenderingHint As TextRenderingHint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Text::TextRenderingHint TextRenderingHint { System::Drawing::Text::TextRenderingHint get(); void set(System::Drawing::Text::TextRenderingHint value); };" />
      <MemberSignature Language="F#" Value="member this.TextRenderingHint : System.Drawing.Text.TextRenderingHint with get, set" Usage="System.Drawing.Graphics.TextRenderingHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Text.TextRenderingHint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la modalità di rendering per il testo associata a questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Uno dei valori di <see cref="T:System.Drawing.Text.TextRenderingHint" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'hint per il rendering di testo specifica se il testo viene eseguito il rendering con anti-aliasing.  
  
> [!NOTE]
>  È consigliabile non usare un <xref:System.Drawing.Graphics.CompositingMode%2A> valore della proprietà <xref:System.Drawing.Drawing2D.CompositingMode.SourceCopy> quando il <xref:System.Drawing.Graphics.TextRenderingHint%2A> è impostata su <xref:System.Drawing.Text.TextRenderingHint.ClearTypeGridFit>. Potrebbe verificarsi un'eccezione o l'immagine potrebbe non risultare corretto.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo dei <xref:System.Drawing.Graphics.TextRenderingHint%2A> e <xref:System.Drawing.Graphics.TextContrast%2A> proprietà.  
  
 In questo esempio è progettato per essere usato con Windows Form. Incollare il codice in un form e si chiama il `ChangeTextRenderingHintAndTextContrast` metodo durante la gestione del modulo <xref:System.Windows.Forms.Control.Paint> evento passando `e` come <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.GraphicsProperties#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.GraphicsProperties#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/CS/form1.cs#5)]
 [!code-vb[System.Drawing.GraphicsProperties#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.GraphicsProperties/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Drawing.Drawing2D.Matrix with get, set" Usage="System.Drawing.Graphics.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta una copia della trasformazione globale geometrica per l'oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Copia di <see cref="T:System.Drawing.Drawing2D.Matrix" /> che rappresenta la trasformazione globale geometrica per l'oggetto <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 GDI+ Usa tre spazi di coordinate: world, pagina e dispositivo. Coordinate internazionali sono le coordinate usate per modellare un mondo grafico specifico e le coordinate passate ai metodi in .NET Framework. Le coordinate di pagina può fare riferimento al sistema di coordinate utilizzato da una superficie di disegno, ad esempio un form o un controllo. Le coordinate di periferica vengono usate dal dispositivo fisico da disegnare, ad esempio una schermata o una stampante. Il <xref:System.Drawing.Graphics.Transform%2A> proprietà rappresenta la trasformazione globale, che esegue il mapping di coordinate complessive in coordinate di pagina.  
  
 Poiché la matrice restituita e dal <xref:System.Drawing.Graphics.Transform%2A> proprietà è una copia della trasformazione geometrica, è necessario eliminarlo quando non è più necessario.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransformPoints">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Trasforma una matrice di punti da uno spazio di coordinate a un altro, usando le trasformazioni correnti globali e di pagina di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::Point&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Point[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> che specifica lo spazio delle coordinate di destinazione.</param>
        <param name="srcSpace">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> che specifica lo spazio delle coordinate di origine.</param>
        <param name="pts">Matrice di strutture <see cref="T:System.Drawing.Point" /> che rappresentano i punti da trasformare.</param>
        <summary>Trasforma una matrice di punti da uno spazio di coordinate a un altro, usando le trasformazioni correnti globali e di pagina di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea due punti e disegna una linea blu tra di essi.  
  
-   Imposta la trasformazione globale per convertire un valore di 40 nella direzione x e 30 nella direzione y.  
  
-   Trasforma i punti di coordinate internazionali (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) per le coordinate di pagina (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Reimposta la trasformazione globale all'identità.  
  
-   Disegna una linea rossa tra i punti trasformati.  
  
 Il risultato è una linea blu e una linea rossa tradotta sotto di essa.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#163)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#163)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#163](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#163)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Drawing2D.CoordinateSpace destSpace, System.Drawing.Drawing2D.CoordinateSpace srcSpace, System.Drawing.PointF[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Drawing2D.CoordinateSpace destSpace, valuetype System.Drawing.Drawing2D.CoordinateSpace srcSpace, valuetype System.Drawing.PointF[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (destSpace As CoordinateSpace, srcSpace As CoordinateSpace, pts As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(System::Drawing::Drawing2D::CoordinateSpace destSpace, System::Drawing::Drawing2D::CoordinateSpace srcSpace, cli::array &lt;System::Drawing::PointF&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.Drawing2D.CoordinateSpace * System.Drawing.PointF[] -&gt; unit" Usage="graphics.TransformPoints (destSpace, srcSpace, pts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="srcSpace" Type="System.Drawing.Drawing2D.CoordinateSpace" />
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="destSpace">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> che specifica lo spazio delle coordinate di destinazione.</param>
        <param name="srcSpace">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.CoordinateSpace" /> che specifica lo spazio delle coordinate di origine.</param>
        <param name="pts">Matrice di strutture <see cref="T:System.Drawing.PointF" /> che rappresentano i punti da trasformare.</param>
        <summary>Trasforma una matrice di punti da uno spazio di coordinate a un altro, usando le trasformazioni correnti globali e di pagina di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea due punti e disegna una linea blu tra di essi.  
  
-   Imposta la trasformazione globale per convertire un valore di 40 nella direzione x e 30 nella direzione y.  
  
-   Trasforma i punti di coordinate internazionali (<xref:System.Drawing.Drawing2D.CoordinateSpace.World>) per le coordinate di pagina (<xref:System.Drawing.Drawing2D.CoordinateSpace.Page>).  
  
-   Reimposta la trasformazione globale per l'identità e consente di disegnare una linea rossa tra i punti trasformati.  
  
 Il risultato è una linea blu e una linea rossa tradotta sotto di essa.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#164)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#164)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#164](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#164)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateClip">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Trasla l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> secondo i valori specificati nelle direzioni orizzontale e verticale.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (int dx, int dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(int32 dx, int32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Integer, dy As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(int dx, int dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : int * int -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Int32" />
        <Parameter Name="dy" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dx">Coordinata X della traslazione.</param>
        <param name="dy">Coordinata Y della traslazione.</param>
        <summary>Trasla l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> secondo i valori specificati nelle direzioni orizzontale e verticale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un rettangolo per l'area di ritaglio.  
  
-   Imposta l'area di ritaglio nel rettangolo.  
  
-   Converte l'area di visualizzazione da un vettore (50, 50).  
  
-   Riempie un grande rettangolo con un pennello di colore nero a tinta unita.  
  
 Il risultato è un rettangolo tradotto, piccolo, nero.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#165)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#165)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#165](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#165)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateClip">
      <MemberSignature Language="C#" Value="public void TranslateClip (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateClip(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateClip(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateClip (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateClip(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateClip : single * single -&gt; unit" Usage="graphics.TranslateClip (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Coordinata X della traslazione.</param>
        <param name="dy">Coordinata Y della traslazione.</param>
        <summary>Trasla l'area di visualizzazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> secondo i valori specificati nelle direzioni orizzontale e verticale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Crea un rettangolo per l'area di ritaglio.  
  
-   Imposta l'area di ritaglio nel rettangolo.  
  
-   Converte l'area di visualizzazione da un vettore (50,0 f, 50,0 f).  
  
-   Riempie un grande rettangolo con un pennello di colore nero a tinta unita.  
  
 Il risultato è un rettangolo tradotto, piccolo, nero.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#166)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#166)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#166](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#166)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Modifica l'origine del sistema di coordinate anteponendo la traslazione specificata alla matrice di trasformazione di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single -&gt; unit" Usage="graphics.TranslateTransform (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Coordinata X della traslazione.</param>
        <param name="dy">Coordinata Y della traslazione.</param>
        <summary>Modifica l'origine del sistema di coordinate anteponendo la traslazione specificata alla matrice di trasformazione di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'origine è in genere l'angolo superiore sinistro dell'area di disegno.  Operazione di conversione consiste nel moltiplicare la matrice di trasformazione da una matrice la cui parte traduzione è il `dx` e `dy` parametri. Questo metodo si applica la traslazione anteponendo la matrice di traslazione alla matrice di trasformazione.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Ruota la matrice di trasformazione globale di Windows Form di 30,0 f gradi.  
  
-   Sposta l'origine dell'oggetto graphics chiamando <xref:System.Drawing.Graphics.TranslateTransform%2A>, anteponendo la traslazione alla matrice di trasformazione.  
  
-   Disegna un'ellisse tradotta, ruotata con una penna blu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#167)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#167)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#167](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#167)]  
  
 Nella figura seguente mostra l'output dell'esecuzione dell'esempio di codice precedente.  
  
 ![Convertito e trasformati ellisse](~/add/media/ndp-tranlatetransform.png "tradotto e trasformato i puntini di sospensione")  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Graphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="graphics.TranslateTransform (dx, dy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">Coordinata X della traslazione.</param>
        <param name="dy">Coordinata Y della traslazione.</param>
        <param name="order">Membro dell'enumerazione <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> che specifica se l'operazione di traslazione è anteposta o accodata alla matrice di trasformazione.</param>
        <summary>Modifica l'origine del sistema di coordinate applicando la traslazione specificata alla matrice di trasformazione di questo oggetto <see cref="T:System.Drawing.Graphics" /> nell'ordine indicato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operazione di conversione consiste nel moltiplicare la matrice di trasformazione da una matrice la cui parte traduzione è il `dx` e `dy` parametri. Questo metodo antepone o aggiunge la matrice di trasformazione i <xref:System.Drawing.Graphics> dalla matrice di traslazione in base al `order` parametro.  
  
   
  
## Examples  
 Esempio di codice seguente è progettato per l'uso con Windows Form e richiede <xref:System.Windows.Forms.PaintEventArgs> `e`, ovvero un parametro del <xref:System.Windows.Forms.Control.Paint> gestore dell'evento. Nel codice vengono eseguite le seguenti azioni:  
  
-   Ruota la matrice di trasformazione globale di Windows Form di 30,0 f gradi.  
  
-   Sposta l'origine dell'oggetto grafico chiamando <xref:System.Drawing.Graphics.TranslateTransform%2A>, accodando la traslazione alla matrice di trasformazione globale.  
  
-   Disegna un'ellisse traslata ruotata con una penna blu.  
  
 [!code-cpp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CPP/form1.cpp#168)]
 [!code-csharp[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/CS/form1.cs#168)]
 [!code-vb[System.Drawing.ClassicGraphicsExamples3#168](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicGraphicsExamples3/VB/form1.vb#168)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleClipBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF VisibleClipBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF VisibleClipBounds" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Graphics.VisibleClipBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisibleClipBounds As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF VisibleClipBounds { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.VisibleClipBounds : System.Drawing.RectangleF" Usage="System.Drawing.Graphics.VisibleClipBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il rettangolo di delimitazione dell'area di visualizzazione visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />.</summary>
        <value>Struttura <see cref="T:System.Drawing.RectangleF" /> che rappresenta un rettangolo di delimitazione per l'area di visualizzazione visibile di questo oggetto <see cref="T:System.Drawing.Graphics" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'unità del rettangolo risulta viene indicato dal <xref:System.Drawing.Graphics.PageUnit%2A> proprietà. L'unità predefinita è pixel. Oggetto <xref:System.Drawing.Graphics> è in genere associato a un controllo e l'origine del rettangolo è relativo all'area client del controllo.  
  
 L'area di ritaglio visibile rappresenta l'intersezione tra l'area di ritaglio di questo <xref:System.Drawing.Graphics> e l'area di visualizzazione della finestra.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>