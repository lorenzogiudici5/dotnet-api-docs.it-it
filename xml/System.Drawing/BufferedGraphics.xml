<Type Name="BufferedGraphics" FullName="System.Drawing.BufferedGraphics">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4af7a1a27ce31436d9a69db2ccf4d9c470a2f8ee" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37657179" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BufferedGraphics : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BufferedGraphics extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.BufferedGraphics" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BufferedGraphics&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class BufferedGraphics sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type BufferedGraphics = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornisce un buffer grafico per il doppio buffer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Drawing.BufferedGraphics> classe consente di implementare il doppio buffer personalizzato per le immagini. Fornisce un wrapper per un buffer di grafica, insieme ai metodi che è possibile utilizzare per scrivere nel buffer ed eseguire il rendering del contenuto in un dispositivo di output.  
  
 Le immagini che utilizzano il doppio buffer possono ridurre o evitare lo sfarfallio causato dal ridisegno una superficie di visualizzazione. Quando si usa il doppio buffer, le immagini aggiornate prima di tutto vengono disegnate in un buffer in memoria e il contenuto di questo buffer viene quindi scritti da alcuni o tutti la superficie visualizzata rapidamente. La sovrascrittura relativamente breve della grafica visualizzata in genere consente di ridurre o Elimina lo sfarfallio che talvolta si verifica quando le immagini vengono aggiornate.  
  
> [!NOTE]
>  Il modo più semplice per usare il doppio buffer consiste nell'impostare il <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> controllare il flag di stile di visualizzazione su un controllo utilizzando il <xref:System.Windows.Forms.Control.SetStyle%2A> (metodo). L'impostazione di <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> flag per un controllo reindirizza tutti i disegni per il controllo tramite un buffer grafico predefinita, senza richiedere codice aggiuntivo. Questo flag è impostato su `true` per impostazione predefinita.  
  
 Il <xref:System.Drawing.BufferedGraphics> classe non dispone di alcun costruttore pubblico e deve essere creato dal <xref:System.Drawing.BufferedGraphicsContext> per un dominio applicazione usando il <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> (metodo). È possibile recuperare il <xref:System.Drawing.BufferedGraphicsContext> per il dominio applicazione corrente da statico <xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=nameWithType> proprietà.  
  
 Il <xref:System.Drawing.BufferedGraphics.Graphics%2A> proprietà può essere utilizzata per disegnare la grafica nel buffer. Questa proprietà fornisce l'accesso per il <xref:System.Drawing.Graphics> che disegna il buffer di grafica allocato per questo oggetto <xref:System.Drawing.BufferedGraphics> oggetto.  
  
 Il <xref:System.Drawing.BufferedGraphics.Render%2A> metodo con alcun argomenti consente di disegnare il contenuto della grafica nel buffer nell'area di specificato quando è stato allocato il buffer. Altri overload del <xref:System.Drawing.BufferedGraphics.Render%2A> metodo consentono di specificare un <xref:System.Drawing.Graphics> oggetto o un <xref:System.IntPtr> oggetto che punta a un contesto di dispositivo in cui disegnare il contenuto del buffer grafico.  
  
 Per altre informazioni sulla creazione grafica a doppio buffer, vedere [grafica a doppio buffer](~/docs/framework/winforms/advanced/double-buffered-graphics.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.Drawing.BufferedGraphics> oggetto su cui disegnare immagini mediante diversi tipi di implementazioni di memorizzazione nel buffer. In alternativa facendo clic sulla forma avvia e arresta un timer che causa disegna gli aggiornamenti. Gli aggiornamenti di disegno consentono di osservare gli effetti del buffering doppio. Pulsante destro del mouse i cicli di form tramite la modalità di disegno seguenti:  
  
-   Disegno direttamente la <xref:System.Windows.Forms.Control.Handle%2A> per un <xref:System.Windows.Forms.Form>.  
  
-   Disegno eseguendo l'override di <xref:System.Windows.Forms.Form.OnPaint%2A> metodo utilizzando il <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> controllano lo stile.  
  
-   Disegno eseguendo l'override di <xref:System.Windows.Forms.Form.OnPaint%2A> per il metodo form senza usare il <xref:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer> controllano lo stile.  
  
 In ciascuna modalità, viene disegnato il testo che identifica la modalità corrente e viene descritto il comportamento che si verifica quando ogni pulsante del mouse viene premuto.  
  
 [!code-cpp[BufferedGraphicsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferedGraphicsExample/CPP/bufferingtest.cpp#1)]
 [!code-csharp[BufferedGraphicsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferedGraphicsExample/CS/bufferingtest.cs#1)]
 [!code-vb[BufferedGraphicsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferedGraphicsExample/VB/bufferingtest.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>La classe <see cref="T:System.Drawing.BufferedGraphics" /> non è thread-safe. Quando si accede a un buffer di grafica da un thread separato, è importante usare un meccanismo di controllo di accesso di thread per evitare conflitti.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="bufferedGraphics.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate dall'oggetto <see cref="T:System.Drawing.BufferedGraphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare <xref:System.Drawing.BufferedGraphics.Dispose%2A> termine usando il <xref:System.Drawing.BufferedGraphics> oggetto. Il <xref:System.Drawing.BufferedGraphics.Dispose%2A> metodo lascia il <xref:System.Drawing.BufferedGraphics> oggetto in uno stato inutilizzabile. Dopo la chiamata <xref:System.Drawing.BufferedGraphics.Dispose%2A>, è necessario rilasciare tutti i riferimenti per il <xref:System.Drawing.BufferedGraphics> dell'oggetto in modo che il garbage collector di recuperare la memoria che il <xref:System.Drawing.BufferedGraphics> occupata dall'oggetto. Per altre informazioni, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [implementa un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Chiamare sempre <xref:System.Drawing.BufferedGraphics.Dispose%2A> prima di rilasciare l'ultimo riferimento al <xref:System.Drawing.BufferedGraphics> oggetto. In caso contrario, le risorse utilizzate non verranno liberate finché il metodo <xref:System.Drawing.BufferedGraphics> dell'oggetto `Finalize` non viene richiamato dal Garbage Collector.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~BufferedGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!BufferedGraphics ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="bufferedGraphics.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Consente a un oggetto di effettuare un tentativo di liberare risorse ed eseguire altre operazioni di pulizia prima che venga recuperato da Garbage Collection.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="Graphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics Graphics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Graphics Graphics" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.BufferedGraphics.Graphics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Graphics As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Graphics ^ Graphics { System::Drawing::Graphics ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Graphics : System.Drawing.Graphics" Usage="System.Drawing.BufferedGraphics.Graphics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Drawing.Graphics" /> con output nel buffer grafico.</summary>
        <value>Oggetto <see cref="T:System.Drawing.Graphics" /> con output nel buffer grafico.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà fornisce un <xref:System.Drawing.Graphics> che disegna il buffer di grafica allocato per questo oggetto <xref:System.Drawing.BufferedGraphics> oggetto.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Render">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive il contenuto del buffer grafico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render();" />
      <MemberSignature Language="F#" Value="member this.Render : unit -&gt; unit" Usage="bufferedGraphics.Render " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive il contenuto del buffer grafico nel dispositivo predefinito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo scrive il contenuto del buffer grafico al dispositivo specificato chiamando il <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> metodo per il <xref:System.Drawing.BufferedGraphicsContext> usato per creare questa <xref:System.Drawing.BufferedGraphics> oggetto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (System.Drawing.Graphics target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(class System.Drawing.Graphics target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.Drawing.Graphics)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (target As Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(System::Drawing::Graphics ^ target);" />
      <MemberSignature Language="F#" Value="member this.Render : System.Drawing.Graphics -&gt; unit" Usage="bufferedGraphics.Render target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="target">Oggetto <see cref="T:System.Drawing.Graphics" /> in cui scrivere il contenuto del buffer grafico.</param>
        <summary>Scrive il contenuto del buffer grafico nell'oggetto specificato <see cref="T:System.Drawing.Graphics" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo scrive il contenuto del buffer grafico specificato <xref:System.Drawing.Graphics> oggetto.  
  
   
  
## Examples  
 Esempio di codice seguente dimostra il rendering del contenuto del buffer grafico per un determinato <xref:System.Drawing.Graphics> oggetto. Questo codice è parte di un esempio più esaustivo disponibile per il <xref:System.Drawing.BufferedGraphics> classe.  
  
 [!code-cpp[BufferingExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#5)]
 [!code-csharp[BufferingExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#5)]
 [!code-vb[BufferingExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (IntPtr targetDC);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(native int targetDC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.BufferedGraphics.Render(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Render (targetDC As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Render(IntPtr targetDC);" />
      <MemberSignature Language="F#" Value="member this.Render : nativeint -&gt; unit" Usage="bufferedGraphics.Render targetDC" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDC" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="targetDC">Oggetto <see cref="T:System.IntPtr" /> che fa riferimento al contesto di dispositivo in cui scrivere il contenuto del buffer grafico.</param>
        <summary>Scrive il contenuto del buffer grafico nel contesto di dispositivo associato all'handle <see cref="T:System.IntPtr" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo scrive il contenuto del buffer grafico al contesto di dispositivo associato all'oggetto specificato <xref:System.IntPtr> gestire.  
  
   
  
## Examples  
 Il codice seguente viene illustrato come eseguire il rendering di contenuto del buffer di grafica `grafx` a un contesto di dispositivo specificato. Questo codice è parte di un esempio più esaustivo disponibile per il <xref:System.Drawing.BufferedGraphics> classe.  
  
 [!code-cpp[BufferingExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/BufferingExamples/CPP/bufferingexamples.cpp#6)]
 [!code-csharp[BufferingExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/BufferingExamples/CS/bufferingexamples.cs#6)]
 [!code-vb[BufferingExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BufferingExamples/VB/bufferingexamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Per accedere al codice non gestito. Enumerazione correlata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.IntPtr" />
      </Docs>
    </Member>
  </Members>
</Type>