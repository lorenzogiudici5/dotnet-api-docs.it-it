<Type Name="Image+GetThumbnailImageAbort" FullName="System.Drawing.Image+GetThumbnailImageAbort">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9c0d13e29cc806a8dee1bbc78287ef538bddc1eb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30406205" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate bool Image.GetThumbnailImageAbort();" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed Image/GetThumbnailImageAbort extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Image.GetThumbnailImageAbort" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Image.GetThumbnailImageAbort() As Boolean " />
  <TypeSignature Language="C++ CLI" Value="public: delegate bool Image::GetThumbnailImageAbort();" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters />
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <summary>Fornisce un metodo di callback per determinare quando il metodo <see cref="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)" /> deve annullare l'esecuzione in modo anomalo.</summary>
    <returns>Questo metodo restituisce <see langword="true" /> se stabilisce che il metodo <see cref="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)" /> deve arrestare l'esecuzione in modo anomalo. In caso contrario, restituisce <see langword="false" />.</returns>
    <remarks>To be added.</remarks>
  </Docs>
</Type>