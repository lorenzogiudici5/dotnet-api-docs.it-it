<Type Name="PackageStore" FullName="System.IO.Packaging.PackageStore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cb63b9884469dab5119b479d4d26748d23cfa155" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52224891" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class PackageStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed PackageStore extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.PackageStore" />
  <TypeSignature Language="VB.NET" Value="Public Class PackageStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class PackageStore abstract sealed" />
  <TypeSignature Language="F#" Value="type PackageStore = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un insieme di istanze <see cref="T:System.IO.Packaging.Package" /> specifiche dell'applicazione utilizzato in combinazione con <see cref="T:System.IO.Packaging.PackWebRequest" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.IO.Packaging.PackageStore> definisce una raccolta di riferimento del pacchetto che viene aperte e attive nell'applicazione.  I pacchetti aggiunti al <xref:System.IO.Packaging.PackageStore> sono accessibili tramite il loro valore URI chiave.  Il <xref:System.IO.Packaging.PackageStore> supporta tre usi più comuni:  
  
1.  L'accesso a <xref:System.IO.Packaging.PackagePart> i dati tramite <xref:System.IO.Packaging.PackWebRequest>.  
  
2.  L'applicazione ottiene un'istanza di un <xref:System.IO.Packaging.Package> URI del pacchetto specificato.  
  
3.  L'accesso ai pacchetti che vengono creati e archiviati un <xref:System.IO.MemoryStream>.  
  
 Per migliorare le prestazioni e ridurre al minimo il sovraccarico di operazioni di apertura e chiusura file ripetute, il <xref:System.IO.Packaging.PackageStore> viene usato per gestire le istanze dei pacchetti a cui accede <xref:System.IO.Packaging.PackWebRequest> e direttamente dall'applicazione.  L'accesso ai dati in un pacchetto, il <xref:System.IO.Packaging.Package> indirizzo di un oggetto richiesto <xref:System.IO.Packaging.PackagePart> <xref:System.IO.Packaging.PackagePart.Uri%2A> viene dapprima controllata per verificare se il pacchetto è già definito e aperto nel <xref:System.IO.Packaging.PackageStore>.  Se il pacchetto è definito come open in di <xref:System.IO.Packaging.PackageStore>, ha richiesto le parti sono accessibili direttamente senza ripetutamente di apertura e chiusura del pacchetto per ogni richiesta.  
  
 Se l'applicazione si apre un pacchetto con <xref:System.IO.Packaging.Package.Open%2A?displayProperty=nameWithType>, <xref:System.IO.Packaging.PackageStore.AddPackage%2A> può essere chiamato per aggiungere il pacchetto per il <xref:System.IO.Packaging.PackageStore>.  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> deve essere chiamato in un secondo momento per rimuovere il pacchetto dal <xref:System.IO.Packaging.PackageStore> prima di chiamare <xref:System.IO.Packaging.Package.Close%2A?displayProperty=nameWithType>.  
  
 Pacchetti XPS aperto con un <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> costruttore vengono automaticamente aggiunti e rimossi dal <xref:System.IO.Packaging.PackageStore> quando il documento viene creato o eliminato.  (Non è necessario chiamare <xref:System.IO.Packaging.PackageStore.AddPackage%2A> oppure <xref:System.IO.Packaging.PackageStore.RemovePackage%2A> separatamente per i pacchetti XPS aperti con <xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> costruttori.)  
  
 Le autorizzazioni dei / o file di un pacchetto a cui si accede tramite il <xref:System.IO.Packaging.PackageStore> rimane identico le autorizzazioni dei / o impostati nel pacchetto quando viene aperto.  Il <xref:System.IO.Packaging.PackageStore> fornisce solo i riferimenti ai pacchetti che sono stati aggiunti nell'archivio.  È compito dell'applicazione per aprire, aggiornare e chiudere ciascun pacchetto correttamente.  
  
 I pacchetti aggiunti per il <xref:System.IO.Packaging.PackageStore> sono accessibili in ambienti a thread multipli quando vengono usati in combinazione con un [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] parser, ad esempio <xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=nameWithType>.  Quando si opera in un ambiente multithreading, l'applicazione deve bloccare il pacchetto prima dell'accesso.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackWebRequest" />
    <altmember cref="T:System.IO.Packaging.PackWebResponse" />
  </Docs>
  <Members>
    <Member MemberName="AddPackage">
      <MemberSignature Language="C#" Value="public static void AddPackage (Uri uri, System.IO.Packaging.Package package);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddPackage(class System.Uri uri, class System.IO.Packaging.Package package) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddPackage(Uri ^ uri, System::IO::Packaging::Package ^ package);" />
      <MemberSignature Language="F#" Value="static member AddPackage : Uri * System.IO.Packaging.Package -&gt; unit" Usage="System.IO.Packaging.PackageStore.AddPackage (uri, package)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="package" Type="System.IO.Packaging.Package" />
      </Parameters>
      <Docs>
        <param name="uri">Chiave [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] dell'oggetto <paramref name="package" /> da confrontare durante un'operazione <see cref="T:System.IO.Packaging.PackWebRequest" />.</param>
        <param name="package">Package da aggiungere all'archivio.</param>
        <summary>Aggiunge un oggetto <see cref="T:System.IO.Packaging.Package" /> all'archivio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` definisce la chiave del pacchetto URI che viene confrontato quando si chiama <xref:System.IO.Packaging.PackWebRequest>.  
  
 Se il `packageUri` corrisponde alla <xref:System.IO.Packaging.PackagePart.Uri%2A> per una <xref:System.IO.Packaging.PackagePart> in un <xref:System.IO.Packaging.PackWebRequest> chiama, il pacchetto definito nel <xref:System.IO.Packaging.PackageStore> viene usato per accedere alla parte richiesta.  
  
 Se il `packageUri` non corrisponde il <xref:System.IO.Packaging.PackagePart.Uri%2A> per una <xref:System.IO.Packaging.PackagePart> in un <xref:System.IO.Packaging.PackWebRequest> chiamata, il pacchetto con l'URI specificato è aperto per la parte richiesta di accesso.  
  
 **Nota sulla sicurezza** questo metodo richiede <xref:System.Security.Permissions.EnvironmentPermission> per l'installazione personalizzata tutte <xref:System.IO.Packaging.Package> (non -<xref:System.IO.Packaging.ZipPackage>) i tipi.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il metodo <xref:System.IO.Packaging.PackageStore.AddPackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewdecrypt)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="package" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> è un package [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] non valido.</exception>
        <exception cref="T:System.InvalidOperationException">Un package con <paramref name="packageUri" /> specificato è già presente nell'archivio.</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPackage">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package GetPackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package GetPackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ GetPackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member GetPackage : Uri -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.PackageStore.GetPackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] del package da restituire.</param>
        <summary>Restituisce dall'archivio l'oggetto <see cref="T:System.IO.Packaging.Package" /> con [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] specificato.</summary>
        <returns>Package con <paramref name="packageUri" /> specificato; oppure <see langword="null" />, se il package con <paramref name="packageUri" /> specificato non è presente nell'archivio.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` viene confrontato con l'URI specificato nel <xref:System.IO.Packaging.PackageStore.AddPackage%2A> chiamata al metodo.  
  
 **Nota sulla sicurezza** questo metodo richiede <xref:System.Security.Permissions.EnvironmentPermission> per l'installazione personalizzata tutte <xref:System.IO.Packaging.Package> (non -<xref:System.IO.Packaging.ZipPackage>) i tipi.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il metodo <xref:System.IO.Packaging.PackageStore.GetPackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewopendoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewopendoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> è un package [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] non valido.</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="RemovePackage">
      <MemberSignature Language="C#" Value="public static void RemovePackage (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemovePackage(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.PackageStore.RemovePackage(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemovePackage(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="static member RemovePackage : Uri -&gt; unit" Usage="System.IO.Packaging.PackageStore.RemovePackage uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">[!INCLUDE[TLA#tla_uri](~/includes/tlasharptla-uri-md.md)] del package da rimuovere.</param>
        <summary>Rimuove dall'archivio l'oggetto <see cref="T:System.IO.Packaging.Package" /> con [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `packageUri` viene confrontato con l'URI specificato nel <xref:System.IO.Packaging.PackageStore.AddPackage%2A> chiamata al metodo.  
  
 **Nota sulla sicurezza** questo metodo richiede <xref:System.Security.Permissions.EnvironmentPermission> per l'installazione personalizzata tutte <xref:System.IO.Packaging.Package> (non -<xref:System.IO.Packaging.ZipPackage>) i tipi.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il metodo <xref:System.IO.Packaging.PackageStore.RemovePackage%2A>.  
  
 [!code-csharp[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackageViewer/CSharp/Window1.xaml.cs#rmpkgviewclosedoc)]
 [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackageViewer/visualbasic/window1.xaml.vb#rmpkgviewclosedoc)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="packageUri" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="packageUri" /> è un package [!INCLUDE[TLA2#tla_uri](~/includes/tla2sharptla-uri-md.md)] non valido.</exception>
        <altmember cref="M:System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)" />
        <altmember cref="M:System.IO.Packaging.PackageStore.GetPackage(System.Uri)" />
      </Docs>
    </Member>
  </Members>
</Type>