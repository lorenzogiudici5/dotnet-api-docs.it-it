<Type Name="LocalFileSettingsProvider" FullName="System.Configuration.LocalFileSettingsProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cf6f0543d8102607ffea18cd2fb7a65be7269d96" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51915267" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class LocalFileSettingsProvider : System.Configuration.SettingsProvider, System.Configuration.IApplicationSettingsProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LocalFileSettingsProvider extends System.Configuration.SettingsProvider implements class System.Configuration.IApplicationSettingsProvider" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.LocalFileSettingsProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class LocalFileSettingsProvider&#xA;Inherits SettingsProvider&#xA;Implements IApplicationSettingsProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class LocalFileSettingsProvider : System::Configuration::SettingsProvider, System::Configuration::IApplicationSettingsProvider" />
  <TypeSignature Language="F#" Value="type LocalFileSettingsProvider = class&#xA;    inherit SettingsProvider&#xA;    interface IApplicationSettingsProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.SettingsProvider</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Configuration.IApplicationSettingsProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornisce la persistenza per le classi di impostazioni dell'applicazione.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Provider di impostazioni definiscono un meccanismo per l'archiviazione dei dati di configurazione usati nell'architettura delle impostazioni dell'applicazione. Il [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] contiene un provider di impostazioni predefinito composto, <xref:System.Configuration.LocalFileSettingsProvider>, che archivia i dati di configurazione per il file system locale. Una proprietà delle impostazioni dell'applicazione o un gruppo di proprietà sono associate a un provider di impostazioni specifiche mediante l'utilizzo del <xref:System.Configuration.SettingsProviderAttribute>.  
  
 In genere, il programma client non accede in modo esplicito questa classe. piuttosto, l'architettura Impostazioni applicazione richiama automaticamente il provider di impostazioni appropriato quando i servizi sono necessari. Ad esempio, molti dei membri di <xref:System.Configuration.ApplicationSettingsBase> delegano il lavoro al provider di impostazioni associato.  
  
 <xref:System.Configuration.LocalFileSettingsProvider> rende permanenti le impostazioni per i file di configurazione con estensione `.config`. Il contenuto del file di configurazione è strutturato come documenti XML. A seconda del fatto che l'impostazione è limitato all'ambito a livello di applicazione o a livello di utente, i dati di configurazione vengono archiviati come elementi all'interno di un' `<applicationSettings>` o un `<userSettings>` sezione gruppo, rispettivamente. Ognuno di questi gruppi di sezioni è rappresentato da un oggetto corrispondente <xref:System.Configuration.AppSettingsSection> o <xref:System.Configuration.ClientSettingsSection>, rispettivamente. Ogni oggetto sezione è di proprietà e amministrato mediante un gestore di sezione di configurazione, che è un oggetto di tipo <xref:System.Configuration.IConfigurationSectionHandler>.  
  
 Le impostazioni con ambito di applicazione e le impostazioni predefinite con ambito di utente vengono archiviate in un file denominato `application.exe.config`, che viene creato nella stessa directory del file eseguibile. Le impostazioni di configurazione dell'applicazione sono di sola lettura. I dati dell'utente specifico viene archiviati in un file denominato `user.config`, archiviato nella directory home dell'utente. Se i profili sono abilitati, possono essere presenti due versioni del file di configurazione utente. In tal caso, le voci nella versione mobile hanno la precedenza sulle voci duplicate nel file di configurazione utente locale.  
  
 Per altre informazioni sulle impostazioni dell'applicazione, vedere [Application Settings for Windows Forms](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
    <altmember cref="T:System.Configuration.ApplicationScopedSettingAttribute" />
    <altmember cref="T:System.Configuration.UserScopedSettingAttribute" />
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
    <altmember cref="T:System.Configuration.ClientSettingsSection" />
    <altmember cref="T:System.Configuration.IConfigurationSectionHandler" />
    <related type="Article" href="https://msdn.microsoft.com/library/c8eb2ad0-fac6-4ea2-9140-675a4a44d562">Architettura Impostazioni applicazione</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LocalFileSettingsProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LocalFileSettingsProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Configuration.LocalFileSettingsProvider" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il costruttore predefinito imposta i <xref:System.Configuration.LocalFileSettingsProvider.ApplicationName%2A> proprietà <xref:System.String.Empty>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.LocalFileSettingsProvider.ApplicationName" />
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public override string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.LocalFileSettingsProvider.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Configuration.LocalFileSettingsProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome dell'applicazione attualmente in esecuzione.</summary>
        <value>Stringa contenente il nome visualizzato dell'applicazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Configuration.LocalFileSettingsProvider.ApplicationName%2A> e <xref:System.Configuration.Provider.ProviderBase.Name%2A> proprietà utili per risolvere l'ambiguità allo stesso modo delle proprietà di impostazione denominata in applicazioni diverse.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.Provider.ProviderBase.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetPreviousVersion">
      <MemberSignature Language="C#" Value="public System.Configuration.SettingsPropertyValue GetPreviousVersion (System.Configuration.SettingsContext context, System.Configuration.SettingsProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Configuration.SettingsPropertyValue GetPreviousVersion(class System.Configuration.SettingsContext context, class System.Configuration.SettingsProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPreviousVersion (context As SettingsContext, property As SettingsProperty) As SettingsPropertyValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Configuration::SettingsPropertyValue ^ GetPreviousVersion(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsProperty ^ property);" />
      <MemberSignature Language="F#" Value="abstract member GetPreviousVersion : System.Configuration.SettingsContext * System.Configuration.SettingsProperty -&gt; System.Configuration.SettingsPropertyValue&#xA;override this.GetPreviousVersion : System.Configuration.SettingsContext * System.Configuration.SettingsProperty -&gt; System.Configuration.SettingsPropertyValue" Usage="localFileSettingsProvider.GetPreviousVersion (context, property)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="property" Type="System.Configuration.SettingsProperty" />
      </Parameters>
      <Docs>
        <param name="context">Classe <see cref="T:System.Configuration.SettingsContext" /> che descrive dove viene utilizzata la proprietà delle impostazioni dell'applicazione-</param>
        <param name="property">Classe <see cref="T:System.Configuration.SettingsProperty" /> di cui verrà restituito il valore.</param>
        <summary>Restituisce il valore della proprietà delle impostazioni denominata relativa alla versione precedente della stessa applicazione.</summary>
        <returns>Classe <see cref="T:System.Configuration.SettingsPropertyValue" /> che rappresenta l'eventuale impostazione dell'applicazione; in caso contrario, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion%2A> metodo viene spesso usato in combinazione con il <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> metodo durante la migrazione delle impostazioni dell'applicazione durante l'installazione di una nuova versione di un'applicazione. Per altre informazioni, vedere il metodo <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)" />
        <altmember cref="T:System.Configuration.IApplicationSettingsProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValues">
      <MemberSignature Language="C#" Value="public override System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Configuration.SettingsPropertyValueCollection GetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPropertyValues (context As SettingsContext, properties As SettingsPropertyCollection) As SettingsPropertyValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Configuration::SettingsPropertyValueCollection ^ GetPropertyValues(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyCollection ^ properties);" />
      <MemberSignature Language="F#" Value="override this.GetPropertyValues : System.Configuration.SettingsContext * System.Configuration.SettingsPropertyCollection -&gt; System.Configuration.SettingsPropertyValueCollection" Usage="localFileSettingsProvider.GetPropertyValues (context, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValueCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="properties" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context">Oggetto <see cref="T:System.Configuration.SettingsContext" /> che descrive l'utilizzo dell'applicazione corrente.</param>
        <param name="properties">Classe <see cref="T:System.Configuration.SettingsPropertyCollection" /> contenente il gruppo di proprietà delle impostazioni di cui è necessario recuperare i valori.</param>
        <summary>Restituisce l'insieme di valori delle proprietà delle impostazioni per l'istanza dell'applicazione specificata e per il gruppo di proprietà delle impostazioni.</summary>
        <returns>Classe <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> contenente i valori per il gruppo di proprietà delle impostazioni specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Configuration.LocalFileSettingsProvider.GetPropertyValues%2A> metodo gestisce anche il tipo di impostazioni applicazione speciale <xref:System.Configuration.SpecialSetting.ConnectionString>. Le stringhe di connessione vengono archiviate in una sezione speciale del file di configurazione delimitata dall'elemento `<connectionstrings>`.  
  
> [!CAUTION]
>  <xref:System.Configuration.LocalFileSettingsProvider> utilizza la crittografia per rendere permanenti le impostazioni. Pertanto, non archiviare password in testo normale o altre informazioni riservate tramite questo provider senza prendere le precauzioni aggiuntive, ad esempio separatamente crittografando le informazioni all'interno del file di configurazione. Per altre informazioni, vedere [Encrypting Configuration Information Using Protected Configuration](https://msdn.microsoft.com/library/51cdfe5b-9d82-458c-94ff-c551c4f38ed1).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">È stata rilevata un'impostazione con ambito di utente, ma la configurazione corrente supporta solo le impostazioni con ambito di applicazione.</exception>
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
        <altmember cref="T:System.Configuration.SpecialSettingAttribute" />
        <altmember cref="P:System.Configuration.SettingsPropertyValue.IsDirty" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (string name, System.Collections.Specialized.NameValueCollection values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize (name As String, values As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ values);" />
      <MemberSignature Language="F#" Value="override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="localFileSettingsProvider.Initialize (name, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="values" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">Nome descrittivo del provider.</param>
        <param name="values">Raccolta delle coppie nome/valore che rappresentano gli attributi specifici del provider specificati nella configurazione per il provider.</param>
        <summary>Inizializza il provider.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Configuration.SettingsContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset(class System.Configuration.SettingsContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (context As SettingsContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset(System::Configuration::SettingsContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member Reset : System.Configuration.SettingsContext -&gt; unit&#xA;override this.Reset : System.Configuration.SettingsContext -&gt; unit" Usage="localFileSettingsProvider.Reset context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
      </Parameters>
      <Docs>
        <param name="context">Oggetto <see cref="T:System.Configuration.SettingsContext" /> che descrive l'utilizzo dell'applicazione corrente.</param>
        <summary>Riconfigura tutte le proprietà delle impostazioni associate all'applicazione specificata sui valori predefiniti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Configuration.LocalFileSettingsProvider.Reset%2A> metodo ripristina i valori archiviati del gruppo di impostazioni dell'applicazione specificato. L'azione di <xref:System.Configuration.LocalFileSettingsProvider.Reset%2A> dipende dall'ambito della proprietà di impostazione dell'applicazione:  
  
-   Le impostazioni con ambito di applicazione non sono interessate.  
  
-   Le impostazioni con ambito di utente vengono ripristinate sui valori predefiniti che vengono archiviati come voci di sola lettura nel file di configurazione dell'applicazione, `application.exe.config`. Se vengono utilizzati i profili mobili, tutti i valori delle impostazioni dell'applicazione nel profilo mobile hanno la precedenza su duplicati individuati nel profilo locale.  
  
 Si noti che se si utilizzano profili comuni, possono essere presenti due `user.config` file, uno per le impostazioni locali e uno per il profilo mobile.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">È stata rilevata un'impostazione con ambito di utente, ma la configurazione corrente supporta solo le impostazioni con ambito di applicazione.</exception>
        <altmember cref="T:System.Configuration.IApplicationSettingsProvider" />
        <altmember cref="T:System.Configuration.DefaultSettingValueAttribute" />
        <altmember cref="T:System.Configuration.SettingsManageability" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetPropertyValues">
      <MemberSignature Language="C#" Value="public override void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyValueCollection values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetPropertyValues (context As SettingsContext, values As SettingsPropertyValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetPropertyValues(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyValueCollection ^ values);" />
      <MemberSignature Language="F#" Value="override this.SetPropertyValues : System.Configuration.SettingsContext * System.Configuration.SettingsPropertyValueCollection -&gt; unit" Usage="localFileSettingsProvider.SetPropertyValues (context, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="values" Type="System.Configuration.SettingsPropertyValueCollection" />
      </Parameters>
      <Docs>
        <param name="context">Oggetto <see cref="T:System.Configuration.SettingsContext" /> che descrive l'utilizzo dell'applicazione corrente.</param>
        <param name="values">Classe <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> rappresentante il gruppo di impostazioni delle proprietà da impostare.</param>
        <summary>Imposta i valori del gruppo specificato di impostazioni delle proprietà.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una classe wrapper delle impostazioni, derivata da <xref:System.Configuration.ApplicationSettingsBase>, contiene il <xref:System.Configuration.ApplicationSettingsBase.Save%2A> metodo, che viene chiamato in modo permanente i valori di tutte le proprietà delle impostazioni. Questo metodo enumera tutte le impostazioni provider associato con le proprietà delle impostazioni e chiama il <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> metodo per ogni <xref:System.Configuration.SettingsProvider> per eseguire l'operazione di serializzazione effettiva.  
  
 <xref:System.Configuration.LocalFileSettingsProvider.SetPropertyValues%2A> serializza ogni proprietà delle impostazioni con ambito di utente dell'applicazione per la corrispondente impostazione dell'applicazione nel appropriato `user.config` file di configurazione.  
  
 Per impostazione predefinita, il <xref:System.Configuration.LocalFileSettingsProvider.SetPropertyValues%2A> metodo utilizza la seguente sequenza logica per determinare lo schema di serializzazione, a seconda del tipo della proprietà di impostazione:  
  
1.  Se il tipo ha un oggetto associato <xref:System.ComponentModel.TypeConverter> con un <xref:System.ComponentModel.TypeConverter.ConvertToString%2A> viene utilizzata l'implementazione di metodo, questa conversione.  
  
2.  Serializzazione XML viene usata.  
  
 Tuttavia, è possibile specificare un meccanismo di serializzazione preferita tramite il <xref:System.Configuration.SettingsSerializeAsAttribute>. <xref:System.Configuration.LocalFileSettingsProvider> non supporta la serializzazione binaria in [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)].  
  
 Se una proprietà di impostazione con ambito di utente viene reimpostata sul valore predefinito in modo esplicito, il provider di impostazioni di file locale rimuoverà la voce per l'impostazione associata dal file di configurazione utente. Il successivo accesso in lettura per questa proprietà verrà semplicemente utilizzato il valore predefinito.  
  
> [!CAUTION]
>  <xref:System.Configuration.LocalFileSettingsProvider> utilizza la crittografia per rendere permanenti le impostazioni. Pertanto, non archiviare password in testo normale o altre informazioni riservate tramite questo provider senza prendere le precauzioni aggiuntive, ad esempio separatamente crittografando le informazioni all'interno del file di configurazione. Per altre informazioni, vedere [Encrypting Configuration Information Using Protected Configuration](https://msdn.microsoft.com/library/51cdfe5b-9d82-458c-94ff-c551c4f38ed1).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">È stata rilevata un'impostazione con ambito di utente, ma la configurazione corrente supporta solo le impostazioni con ambito di applicazione.  
  
oppure 
Si è verificato un errore generale di salvataggio delle impostazioni nel file di configurazione.</exception>
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
        <altmember cref="T:System.ComponentModel.TypeConverter" />
        <altmember cref="T:System.Configuration.SettingsSerializeAsAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Upgrade">
      <MemberSignature Language="C#" Value="public void Upgrade (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Upgrade(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Upgrade (context As SettingsContext, properties As SettingsPropertyCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Upgrade(System::Configuration::SettingsContext ^ context, System::Configuration::SettingsPropertyCollection ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member Upgrade : System.Configuration.SettingsContext * System.Configuration.SettingsPropertyCollection -&gt; unit&#xA;override this.Upgrade : System.Configuration.SettingsContext * System.Configuration.SettingsPropertyCollection -&gt; unit" Usage="localFileSettingsProvider.Upgrade (context, properties)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="properties" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context">Oggetto <see cref="T:System.Configuration.SettingsContext" /> che descrive l'utilizzo dell'applicazione corrente.</param>
        <param name="properties">Classe <see cref="T:System.Configuration.SettingsPropertyCollection" /> contenente il gruppo di proprietà delle impostazioni di cui è necessario recuperare i valori.</param>
        <summary>Tenta di eseguire la migrazione delle precedenti impostazioni con ambito di utente da una versione precedente della stessa applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.LocalFileSettingsProvider> Consente di migrare le impostazioni locali e mobili operazioni distinte.  
  
 Il <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> metodo viene eliminato per ogni impostazione dell'applicazione che ha il <xref:System.Configuration.NoSettingsVersionUpgradeAttribute> applicati ad esso o per l'intera classe wrapper delle impostazioni, derivato da <xref:System.Configuration.ApplicationSettingsBase>.  
  
 In questo modo che viene chiamato questo metodo dipende dal tipo di applicazione che si sta aggiornando:  
  
-   Ogni versione di un [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] applicazione viene archiviata nella propria directory di installazione di tipo isolato. Dopo una nuova versione di un [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] applicazione viene installata e chiama automaticamente alla prima esecuzione della nuova versione, la logica interna <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> per eseguire la migrazione di tutte le impostazioni comuni delle applicazioni alla nuova versione. Per altre informazioni, vedere [Impostazioni dell'applicazione e ClickOnce](https://msdn.microsoft.com/library/891caba6-faef-4a3c-8f71-60e6fadb60eb).  
  
-   Standard Windows Forms e applicazioni console devono chiamare manualmente <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A>, perché non esiste un modo generico e automatico per determinare automaticamente la prima esecuzione di tale applicazione. I due modi comuni per eseguire questa operazione dal programma di installazione o dall'applicazione stessa, utilizzando una proprietà persistente, spesso denominata simile `IsFirstRun`.  
  
 Si noti che per la versione più recente per la migrazione delle impostazioni dell'applicazione, deve essere in grado inoltre di caricare e leggere la versione precedente di impostazioni dell'applicazione. Pertanto, deve contenere classi wrapper compatibili con entrambe le versioni nuove e precedenti dell'applicazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">È stata rilevata un'impostazione con ambito di utente, ma la configurazione corrente supporta solo le impostazioni con ambito di applicazione.  
  
oppure 
Non è possibile accedere alla versione precedente del file di configurazione.</exception>
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
        <altmember cref="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)" />
        <altmember cref="T:System.Configuration.IApplicationSettingsProvider" />
        <altmember cref="T:System.Configuration.NoSettingsVersionUpgradeAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>