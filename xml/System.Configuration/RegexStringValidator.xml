<Type Name="RegexStringValidator" FullName="System.Configuration.RegexStringValidator">
  <TypeSignature Language="C#" Value="public class RegexStringValidator : System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RegexStringValidator extends System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.RegexStringValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexStringValidator&#xA;Inherits ConfigurationValidatorBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexStringValidator : System::Configuration::ConfigurationValidatorBase" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationValidatorBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7e118-101">Fornisce la convalida di una stringa secondo le regole fornite da un'espressione regolare.</span><span class="sxs-lookup"><span data-stu-id="7e118-101">Provides validation of a string based on the rules provided by a regular expression.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e118-102">Il <xref:System.Configuration.RegexStringValidator> oggetto contiene le regole necessarie per convalidare un oggetto stringa in base a un'espressione regolare.</span><span class="sxs-lookup"><span data-stu-id="7e118-102">The <xref:System.Configuration.RegexStringValidator> object contains the rules necessary to validate a string object based on a regular expression.</span></span> <span data-ttu-id="7e118-103">Le regole vengono definite quando un'istanza di <xref:System.Configuration.RegexStringValidator> classe viene creata.</span><span class="sxs-lookup"><span data-stu-id="7e118-103">The rules are established when an instance of the <xref:System.Configuration.RegexStringValidator> class is created.</span></span>  
  
 <span data-ttu-id="7e118-104">Il <xref:System.Configuration.RegexStringValidator.CanValidate%2A> metodo determina se il tipo di oggetto da convalidare corrisponde al tipo previsto.</span><span class="sxs-lookup"><span data-stu-id="7e118-104">The <xref:System.Configuration.RegexStringValidator.CanValidate%2A> method determines whether the object type being validated matches the expected type.</span></span> <span data-ttu-id="7e118-105">L'oggetto da convalidare viene passato come parametro del <xref:System.Configuration.RegexStringValidator.Validate%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="7e118-105">The object being validated is passed as a parameter of the <xref:System.Configuration.RegexStringValidator.Validate%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e118-106">Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Configuration.RegexStringValidator> tipo.</span><span class="sxs-lookup"><span data-stu-id="7e118-106">The following code example demonstrates how to use the <xref:System.Configuration.RegexStringValidator> type.</span></span>  
  
 [!code-csharp[System.Configuration.RegexStringValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.RegexStringValidator/CS/RegexStringValidator.cs#1)]
 [!code-vb[System.Configuration.RegexStringValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.RegexStringValidator/VB/RegexStringValidator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ConfigurationValidatorBase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexStringValidator (string regex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string regex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.RegexStringValidator.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (regex As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexStringValidator(System::String ^ regex);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="regex" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="regex"><span data-ttu-id="7e118-107">Stringa che specifica un'espressione regolare.</span><span class="sxs-lookup"><span data-stu-id="7e118-107">A string that specifies a regular expression.</span></span></param>
        <summary><span data-ttu-id="7e118-108">Inizializza una nuova istanza della classe <see cref="T:System.Configuration.RegexStringValidator" />.</span><span class="sxs-lookup"><span data-stu-id="7e118-108">Initializes a new instance of the <see cref="T:System.Configuration.RegexStringValidator" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7e118-109">Il valore di <paramref name="regex" /> è null oppure una stringa vuota ("").</span><span class="sxs-lookup"><span data-stu-id="7e118-109"><paramref name="regex" /> is null or an empty string ("").</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanValidate">
      <MemberSignature Language="C#" Value="public override bool CanValidate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanValidate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.RegexStringValidator.CanValidate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanValidate(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="7e118-110">Tipo di oggetto.</span><span class="sxs-lookup"><span data-stu-id="7e118-110">The type of object.</span></span></param>
        <summary><span data-ttu-id="7e118-111">Determina se il tipo dell'oggetto può essere convalidato.</span><span class="sxs-lookup"><span data-stu-id="7e118-111">Determines whether the type of the object can be validated.</span></span></summary>
        <returns>
          <span data-ttu-id="7e118-112"><see langword="true" /> se il parametro <paramref name="type" /> corrisponde a una stringa; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7e118-112"><see langword="true" /> if the <paramref name="type" /> parameter matches a string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e118-113">Se la convalida non riesce, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="7e118-113">An exception is thrown if the validation fails.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e118-114">Nell'esempio seguente viene illustrato l'utilizzo del metodo <xref:System.Configuration.RegexStringValidator.CanValidate%2A>.</span><span class="sxs-lookup"><span data-stu-id="7e118-114">The following example demonstrates how to use the <xref:System.Configuration.RegexStringValidator.CanValidate%2A> method.</span></span> <span data-ttu-id="7e118-115">Questo esempio di codice fa parte di un esempio più ampio fornito per il <xref:System.Configuration.RegexStringValidator> classe.</span><span class="sxs-lookup"><span data-stu-id="7e118-115">This code example is part of a larger example that is provided for the <xref:System.Configuration.RegexStringValidator> class.</span></span>  
  
 [!code-csharp[System.Configuration.RegexStringValidator#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.RegexStringValidator/CS/RegexStringValidator.cs#3)]
 [!code-vb[System.Configuration.RegexStringValidator#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.RegexStringValidator/VB/RegexStringValidator.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public override void Validate (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Validate(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.RegexStringValidator.Validate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Validate (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Validate(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7e118-116">Valore di un oggetto.</span><span class="sxs-lookup"><span data-stu-id="7e118-116">The value of an object.</span></span></param>
        <summary><span data-ttu-id="7e118-117">Determina se il valore di un oggetto è valido.</span><span class="sxs-lookup"><span data-stu-id="7e118-117">Determines whether the value of an object is valid.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e118-118">Oggetto <xref:System.Configuration.RegexStringValidator> oggetto contiene le regole necessarie per convalidare un oggetto stringa in base a un'espressione regolare.</span><span class="sxs-lookup"><span data-stu-id="7e118-118">A <xref:System.Configuration.RegexStringValidator> object contains the rules necessary to validate a string object based on a regular expression.</span></span> <span data-ttu-id="7e118-119">Le regole vengono definite quando un'istanza di <xref:System.Configuration.RegexStringValidator> classe viene creata.</span><span class="sxs-lookup"><span data-stu-id="7e118-119">The rules are established when an instance of the <xref:System.Configuration.RegexStringValidator> class is created.</span></span> <span data-ttu-id="7e118-120">L'oggetto stringa da convalidare viene passato come parametro del <xref:System.Configuration.RegexStringValidator.Validate%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="7e118-120">The string object to validate is passed as a parameter of the <xref:System.Configuration.RegexStringValidator.Validate%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e118-121">Nell'esempio di codice riportato di seguito viene illustrato come utilizzare il metodo <xref:System.Configuration.RegexStringValidator.Validate%2A>.</span><span class="sxs-lookup"><span data-stu-id="7e118-121">The following code example demonstrates how to use the <xref:System.Configuration.RegexStringValidator.Validate%2A> method.</span></span> <span data-ttu-id="7e118-122">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Configuration.RegexStringValidator> classe.</span><span class="sxs-lookup"><span data-stu-id="7e118-122">This code example is part of a larger example provided for the <xref:System.Configuration.RegexStringValidator> class.</span></span>  
  
 [!code-csharp[System.Configuration.RegexStringValidator#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.RegexStringValidator/CS/RegexStringValidator.cs#4)]
 [!code-vb[System.Configuration.RegexStringValidator#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.RegexStringValidator/VB/RegexStringValidator.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7e118-123"><paramref name="value" /> non è conforme ai parametri della classe <see cref="T:System.Text.RegularExpressions.Regex" />.</span><span class="sxs-lookup"><span data-stu-id="7e118-123"><paramref name="value" /> does not conform to the parameters of the <see cref="T:System.Text.RegularExpressions.Regex" /> class.</span></span></exception>
        <altmember cref="T:System.Configuration.ConfigurationValidatorBase" />
      </Docs>
    </Member>
  </Members>
</Type>