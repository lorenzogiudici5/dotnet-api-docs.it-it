<Type Name="BinaryServerFormatterSink" FullName="System.Runtime.Remoting.Channels.BinaryServerFormatterSink">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f7acab2e22ad2b9a0ef0e5115f60574fba598a07" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39733759" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BinaryServerFormatterSink : System.Runtime.Remoting.Channels.IChannelSinkBase, System.Runtime.Remoting.Channels.IServerChannelSink" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryServerFormatterSink extends System.Object implements class System.Runtime.Remoting.Channels.IChannelSinkBase, class System.Runtime.Remoting.Channels.IServerChannelSink" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryServerFormatterSink&#xA;Implements IChannelSinkBase, IServerChannelSink" />
  <TypeSignature Language="C++ CLI" Value="public ref class BinaryServerFormatterSink : System::Runtime::Remoting::Channels::IChannelSinkBase, System::Runtime::Remoting::Channels::IServerChannelSink" />
  <TypeSignature Language="F#" Value="type BinaryServerFormatterSink = class&#xA;    interface IServerChannelSink&#xA;    interface IChannelSinkBase" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Remoting</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannelSinkBase</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IServerChannelSink</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornisce l'implementazione per un sink del formattatore server che utilizza la classe <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il flusso di richiesta viene propagata dal sink di trasporto del server tramite il sink di canale server finché non raggiunge il sink del formattatore appropriato. Il sink del formattatore deserializza il messaggio e lo passa attraverso la pipeline. Un speciale sink di invio viene inserito alla fine della catena di sink di canale dal <xref:System.Runtime.Remoting.Channels.ChannelServices.CreateServerChannelSinkChain%2A?displayProperty=nameWithType> metodo, che viene chiamato da canali del server per creare il server di catene di sink di canale. Quando il messaggio raggiunge il sink di invio, il sink di invio passa il messaggio per l'infrastruttura .NET remoting.  
  
 La tabella seguente illustra il sink di proprietà di configurazione che possono essere specificate per il provider di sink corrente.  
  
|Proprietà|Descrizione|  
|--------------|-----------------|  
|`includeVersions`|Specifica se il formattatore includerà informazioni di controllo delle versioni. I valori `true` o `false`.|  
|`strictBinding`|Indica che un formattatore ricevente tenterà in primo luogo di identificare il tipo utilizzando le eventuali informazioni complete sulla versione; altrimenti, utilizzerà solo il nome del tipo e il nome dell'assembly, senza le informazioni sulla versione. I valori `true` o `false`. Il valore predefinito per entrambi i formattatori forniti dal sistema è `false`.|  
|`typeFilterLevel`|Valore stringa che specifica il livello di deserializzazione automatica che il canale server tenta di utilizzare. I valori supportati sono `Low` (predefinito) e `Full`. Per informazioni dettagliate sui livelli di deserializzazione, vedere [ &#91; \<topic://cpconAutomaticDeserializationInNETRemoting >&#93;](http://msdn.microsoft.com/library/313a0e88-5b2b-4a17-8391-0ddf9f7a787b).<br /><br /> Questa proprietà è supportata solo da .NET Framework versione 1.1 nelle piattaforme seguenti: Windows 98, Windows NT 4.0, Windows Millennium Edition, Windows 2000, Windows XP Home Edition, Windows XP Professional e Windows Server 2003 della famiglia.|  
  
> [!IMPORTANT]
>  Utilizzo di un'istanza di questo oggetto dati non attendibili o attraverso un canale non sicuro è un rischio per la sicurezza. Utilizzare questa oggetto solo con dati attendibili e attraverso un canale sicuro. Per altre informazioni, vedere [convalida dei dati](https://www.owasp.org/index.php/Data_Validation).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryServerFormatterSink (System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol protocol, System.Runtime.Remoting.Channels.IServerChannelSink nextSink, System.Runtime.Remoting.Channels.IChannelReceiver receiver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Remoting.Channels.BinaryServerFormatterSink/Protocol protocol, class System.Runtime.Remoting.Channels.IServerChannelSink nextSink, class System.Runtime.Remoting.Channels.IChannelReceiver receiver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.#ctor(System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol,System.Runtime.Remoting.Channels.IServerChannelSink,System.Runtime.Remoting.Channels.IChannelReceiver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryServerFormatterSink(System::Runtime::Remoting::Channels::BinaryServerFormatterSink::Protocol protocol, System::Runtime::Remoting::Channels::IServerChannelSink ^ nextSink, System::Runtime::Remoting::Channels::IChannelReceiver ^ receiver);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.BinaryServerFormatterSink : System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol * System.Runtime.Remoting.Channels.IServerChannelSink * System.Runtime.Remoting.Channels.IChannelReceiver -&gt; System.Runtime.Remoting.Channels.BinaryServerFormatterSink" Usage="new System.Runtime.Remoting.Channels.BinaryServerFormatterSink (protocol, nextSink, receiver)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="protocol" Type="System.Runtime.Remoting.Channels.BinaryServerFormatterSink+Protocol" />
        <Parameter Name="nextSink" Type="System.Runtime.Remoting.Channels.IServerChannelSink" />
        <Parameter Name="receiver" Type="System.Runtime.Remoting.Channels.IChannelReceiver" />
      </Parameters>
      <Docs>
        <param name="protocol">Enumerazione <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol" /> che verrà utilizzata con l'istanza corrente della classe <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />.</param>
        <param name="nextSink">Sink successivo nella catena di sink del canale.</param>
        <param name="receiver">Indica il canale che riceverà i messaggi serializzati dalla nuova istanza della classe <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncProcessResponse">
      <MemberSignature Language="C#" Value="public void AsyncProcessResponse (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AsyncProcessResponse(class System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers, class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AsyncProcessResponse(System::Runtime::Remoting::Channels::IServerResponseChannelSinkStack ^ sinkStack, System::Object ^ state, System::Runtime::Remoting::Messaging::IMessage ^ msg, System::Runtime::Remoting::Channels::ITransportHeaders ^ headers, System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="abstract member AsyncProcessResponse : System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack * obj * System.Runtime.Remoting.Messaging.IMessage * System.Runtime.Remoting.Channels.ITransportHeaders * System.IO.Stream -&gt; unit&#xA;override this.AsyncProcessResponse : System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack * obj * System.Runtime.Remoting.Messaging.IMessage * System.Runtime.Remoting.Channels.ITransportHeaders * System.IO.Stream -&gt; unit" Usage="binaryServerFormatterSink.AsyncProcessResponse (sinkStack, state, msg, headers, stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sinkStack" Type="System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="headers" Type="System.Runtime.Remoting.Channels.ITransportHeaders" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="sinkStack">Stack di sink che riconduce al sink di trasporto del server.</param>
        <param name="state">Informazioni associate al sink corrente, generate sul lato richiesta e necessarie sul lato risposta.</param>
        <param name="msg">Messaggio di risposta.</param>
        <param name="headers">Intestazioni da aggiungere al messaggio restituito diretto al client.</param>
        <param name="stream">Flusso diretto di nuovo al sink di trasporto.</param>
        <summary>Richiede l'elaborazione della risposta da una chiamata al metodo inviata in modo asincrono.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Runtime.Remoting.Channels.ServerChannelSinkStack" />
        <altmember cref="M:System.Runtime.Remoting.Channels.ServerChannelSinkStack.Push(System.Runtime.Remoting.Channels.IServerChannelSink,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetResponseStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetResponseStream (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetResponseStream(class System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetResponseStream (sinkStack As IServerResponseChannelSinkStack, state As Object, msg As IMessage, headers As ITransportHeaders) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ GetResponseStream(System::Runtime::Remoting::Channels::IServerResponseChannelSinkStack ^ sinkStack, System::Object ^ state, System::Runtime::Remoting::Messaging::IMessage ^ msg, System::Runtime::Remoting::Channels::ITransportHeaders ^ headers);" />
      <MemberSignature Language="F#" Value="abstract member GetResponseStream : System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack * obj * System.Runtime.Remoting.Messaging.IMessage * System.Runtime.Remoting.Channels.ITransportHeaders -&gt; System.IO.Stream&#xA;override this.GetResponseStream : System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack * obj * System.Runtime.Remoting.Messaging.IMessage * System.Runtime.Remoting.Channels.ITransportHeaders -&gt; System.IO.Stream" Usage="binaryServerFormatterSink.GetResponseStream (sinkStack, state, msg, headers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sinkStack" Type="System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="headers" Type="System.Runtime.Remoting.Channels.ITransportHeaders" />
      </Parameters>
      <Docs>
        <param name="sinkStack">Stack di sink che riconduce al sink di trasporto del server.</param>
        <param name="state">Informazioni associate al sink corrente, generate sul lato richiesta e necessarie sul lato risposta.</param>
        <param name="msg">Messaggio di risposta da serializzare.</param>
        <param name="headers">Intestazioni da inserire nel flusso di risposta al client.</param>
        <summary>Restituisce l'oggetto <see cref="T:System.IO.Stream" /> su cui dovrà essere serializzato il messaggio di risposta fornito.</summary>
        <returns>
          <see cref="T:System.IO.Stream" /> su cui dovrà essere serializzato il messaggio di risposta fornito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato quando un flusso di risposta deve essere creata.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextChannelSink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.NextChannelSink" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextChannelSink As IServerChannelSink" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Remoting::Channels::IServerChannelSink ^ NextChannelSink { System::Runtime::Remoting::Channels::IServerChannelSink ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NextChannelSink : System.Runtime.Remoting.Channels.IServerChannelSink" Usage="System.Runtime.Remoting.Channels.BinaryServerFormatterSink.NextChannelSink" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Channels.IServerChannelSink</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'interfaccia <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> successiva nella catena di sink.</summary>
        <value>Interfaccia <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> successiva nella catena di sink.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessMessage">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage (System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, System.Runtime.Remoting.Messaging.IMessage requestMsg, System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, System.IO.Stream requestStream, out System.Runtime.Remoting.Messaging.IMessage responseMsg, out System.Runtime.Remoting.Channels.ITransportHeaders responseHeaders, out System.IO.Stream responseStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage(class System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, class System.Runtime.Remoting.Messaging.IMessage requestMsg, class System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, class System.IO.Stream requestStream, [out] class System.Runtime.Remoting.Messaging.IMessage&amp; responseMsg, [out] class System.Runtime.Remoting.Channels.ITransportHeaders&amp; responseHeaders, [out] class System.IO.Stream&amp; responseStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessMessage (sinkStack As IServerChannelSinkStack, requestMsg As IMessage, requestHeaders As ITransportHeaders, requestStream As Stream, ByRef responseMsg As IMessage, ByRef responseHeaders As ITransportHeaders, ByRef responseStream As Stream) As ServerProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::Channels::ServerProcessing ProcessMessage(System::Runtime::Remoting::Channels::IServerChannelSinkStack ^ sinkStack, System::Runtime::Remoting::Messaging::IMessage ^ requestMsg, System::Runtime::Remoting::Channels::ITransportHeaders ^ requestHeaders, System::IO::Stream ^ requestStream, [Runtime::InteropServices::Out] System::Runtime::Remoting::Messaging::IMessage ^ % responseMsg, [Runtime::InteropServices::Out] System::Runtime::Remoting::Channels::ITransportHeaders ^ % responseHeaders, [Runtime::InteropServices::Out] System::IO::Stream ^ % responseStream);" />
      <MemberSignature Language="F#" Value="abstract member ProcessMessage : System.Runtime.Remoting.Channels.IServerChannelSinkStack * System.Runtime.Remoting.Messaging.IMessage * System.Runtime.Remoting.Channels.ITransportHeaders * System.IO.Stream *  *  *  -&gt; System.Runtime.Remoting.Channels.ServerProcessing&#xA;override this.ProcessMessage : System.Runtime.Remoting.Channels.IServerChannelSinkStack * System.Runtime.Remoting.Messaging.IMessage * System.Runtime.Remoting.Channels.ITransportHeaders * System.IO.Stream *  *  *  -&gt; System.Runtime.Remoting.Channels.ServerProcessing" Usage="binaryServerFormatterSink.ProcessMessage (sinkStack, requestMsg, requestHeaders, requestStream, responseMsg, responseHeaders, responseStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Channels.ServerProcessing</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sinkStack" Type="System.Runtime.Remoting.Channels.IServerChannelSinkStack" />
        <Parameter Name="requestMsg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="requestHeaders" Type="System.Runtime.Remoting.Channels.ITransportHeaders" />
        <Parameter Name="requestStream" Type="System.IO.Stream" />
        <Parameter Name="responseMsg" Type="System.Runtime.Remoting.Messaging.IMessage" RefType="out" />
        <Parameter Name="responseHeaders" Type="System.Runtime.Remoting.Channels.ITransportHeaders" RefType="out" />
        <Parameter Name="responseStream" Type="System.IO.Stream" RefType="out" />
      </Parameters>
      <Docs>
        <param name="sinkStack">Stack di sink di canale utilizzato per la chiamata al sink corrente.</param>
        <param name="requestMsg">Messaggio che contiene la richiesta.</param>
        <param name="requestHeaders">Intestazioni recuperate dal messaggio in entrata dal client.</param>
        <param name="requestStream">Flusso che deve essere elaborato e passato al sink di deserializzazione.</param>
        <param name="responseMsg">Quando il metodo viene completato, contiene un oggetto <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> con il messaggio di risposta. Questo parametro viene passato non inizializzato.</param>
        <param name="responseHeaders">Quando il metodo viene completato, contiene un oggetto <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> con le intestazioni da aggiungere al messaggio restituito diretto al client. Questo parametro viene passato non inizializzato.</param>
        <param name="responseStream">Quando il metodo viene completato, contiene un oggetto <see cref="T:System.IO.Stream" /> diretto al sink di trasporto. Questo parametro viene passato non inizializzato.</param>
        <summary>Richiede l'elaborazione di messaggi da parte del sink corrente.</summary>
        <returns>Valore dello stato <see cref="T:System.Runtime.Remoting.Channels.ServerProcessing" /> che fornisce informazioni sulle modalità di elaborazione del messaggio.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Processo del proxy consiste nel convertire una chiamata al metodo che viene richiamata su di esso in un messaggio. Il messaggio, che implementa il <xref:System.Runtime.Remoting.Messaging.IMessage> dell'interfaccia, lato server viene passato dal lato client richiamando <xref:System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage%2A> su oggetti sink dei messaggi. Sink dei messaggi vengono concatenati tra loro, il che significa che ogni sink di messaggi è responsabile della chiamata <xref:System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage%2A> sul sink di messaggio successivo dopo il sink del messaggio corrente ha completato il lavoro. Ad esempio, un sink dei messaggi correlati alla sincronizzazione potrebbe causare un blocco venga acquisito o rilasciato e delegata al sink dei messaggi downstream.  
  
 Quando il sink di canale del formattatore riceve un messaggio che deve essere inviato tramite il canale, chiama <xref:System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage%2A>, passando il messaggio come parametro. Il sink del formattatore crea quindi la matrice delle intestazioni di trasporto e chiama <xref:System.Runtime.Remoting.Channels.IClientChannelSink.GetRequestStream%2A> sul sink del formattatore. La chiamata viene inoltrata lungo la catena di sink e qualsiasi sink può creare un flusso di richiesta che verrà passato nuovamente al sink del formattatore. Dopo questa chiamata restituisce, il messaggio viene serializzato, <xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A> viene chiamato nella prima catena nella catena di sink, e il messaggio viene passato al sink di canale.  
  
 Dopo di sink di canale visualizzato il messaggio, è possibile scrivere dati nel flusso di aggiungere intestazioni alla matrice di intestazioni e aggiungersi allo stack di sink prima di inoltrare la chiamata al sink successivo. Quando la chiamata raggiunge il sink di trasporto alla fine della catena, il sink di trasporto invia le intestazioni e il messaggio serializzato sul canale al server, in cui il processo viene invertito.  
  
 Quando il messaggio raggiunga il lato server, il sink di trasporto e recupera le intestazioni di messaggio serializzato dal flusso e li inoltra lungo la catena di sink fino al raggiungimento di sink del formattatore. Il sink del formattatore quindi deserializza il messaggio e lo inoltra per l'infrastruttura .NET remoting. Quindi, l'infrastruttura .NET remoting trasforma il messaggio in una chiamata al metodo e chiama l'oggetto server.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Properties" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Properties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Properties As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IDictionary ^ Properties { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Collections.IDictionary" Usage="System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Collections.IDictionary" /> di proprietà per il sink del canale corrente.</summary>
        <value>Oggetto <see cref="T:System.Collections.IDictionary" /> di proprietà per il sink del canale corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni, vedere [ &#91; \<topic://cpconchannelformatterconfigurationproperties >&#93;](http://msdn.microsoft.com/library/226ecf74-ebbd-4ea0-a701-dcf4441deefe).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeFilterLevel">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.Formatters.TypeFilterLevel TypeFilterLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel TypeFilterLevel" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.TypeFilterLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeFilterLevel As TypeFilterLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::Formatters::TypeFilterLevel TypeFilterLevel { System::Runtime::Serialization::Formatters::TypeFilterLevel get(); void set(System::Runtime::Serialization::Formatters::TypeFilterLevel value); };" />
      <MemberSignature Language="F#" Value="member this.TypeFilterLevel : System.Runtime.Serialization.Formatters.TypeFilterLevel with get, set" Usage="System.Runtime.Remoting.Channels.BinaryServerFormatterSink.TypeFilterLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.Formatters.TypeFilterLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore <see langword="TypeFilterLevel" /> della deserializzazione automatica eseguita dalla classe <see langword="BinaryServerFormatterSink" />.</summary>
        <value>Valore <see langword="TypeFilterLevel" /> che rappresenta il livello di deserializzazione automatica corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I valori supportati sono `Low` (predefinito) e `Full`. Per informazioni dettagliate sui livelli di deserializzazione, vedere [deserializzazione automatica in .NET Remoting](http://msdn.microsoft.com/library/313a0e88-5b2b-4a17-8391-0ddf9f7a787b).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>