<Type Name="CacheRequest" FullName="System.Windows.Automation.CacheRequest">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ba79b367856f83c772f8c7971dde04e0ee956e6d" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
    <Meta Name="ms.locfileid" Value="31909946" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CacheRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CacheRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.CacheRequest" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CacheRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheRequest sealed" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Specifica proprietà e pattern che il framework di automazione interfaccia utente memorizza nella cache quando viene ottenuto un oggetto <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Recupero di proprietà e pattern tramite [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] richiede chiamate tra processi che possono rallentare le prestazioni. La memorizzazione nella cache i valori delle proprietà e dei modelli in un'operazione batch, è possibile migliorare le prestazioni dell'applicazione.  
  
 Creare una nuova richiesta di cache chiamando il costruttore della classe. La richiesta viene popolata da chiamate ripetute al <xref:System.Windows.Automation.CacheRequest.Add%2A> metodo.  
  
 Una sola <xref:System.Windows.Automation.CacheRequest> può essere attivo. Esistono due modi per attivare una richiesta:  
  
-   Chiamare <xref:System.Windows.Automation.CacheRequest.Activate%2A> nella richiesta. Questa operazione inserisce la richiesta nello stack e la richiesta viene eliminata quando viene eliminato l'oggetto. Per assicurare l'eliminazione anche se viene generata un'eccezione, utilizzare il valore restituito da <xref:System.Windows.Automation.CacheRequest.Activate%2A> all'interno di un `using` blocco (`Using` in Visual Basic).  
  
-   Inserire la richiesta nello stack interno chiamando <xref:System.Windows.Automation.CacheRequest.Push%2A>. Solo la richiesta più in alto nello stack è attiva e deve essere quello successivo rimosso dallo stack da <xref:System.Windows.Automation.CacheRequest.Pop%2A>. La richiesta di operazione pop comporta la disattivazione.  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] gli elementi di ottenuti mentre è attiva la richiesta verranno memorizzato nella cache i valori per le proprietà e i modelli specificati.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare <xref:System.Windows.Automation.CacheRequest.Activate%2A> per motivi di cache e le proprietà.  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 Nell'esempio seguente viene illustrato come utilizzare <xref:System.Windows.Automation.CacheRequest.Push%2A> e <xref:System.Windows.Automation.CacheRequest.Pop%2A> per motivi di cache e le proprietà.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheRequest();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un <xref:System.Windows.Automation.CacheRequest> viene creato il <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> identificatore viene aggiunto come una proprietà predefinita da memorizzare nella cache.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public IDisposable Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Activate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Imposta questo oggetto <see cref="T:System.Windows.Automation.CacheRequest" /> come specifica attiva per gli elementi restituiti quando viene richiesto un oggetto <see cref="T:System.Windows.Automation.AutomationElement" /> sullo stesso thread.</summary>
        <returns>Oggetto che può essere utilizzato per eliminare <see cref="T:System.Windows.Automation.CacheRequest" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene in genere preferibile utilizzare <xref:System.Windows.Automation.CacheRequest.Push%2A> e <xref:System.Windows.Automation.CacheRequest.Pop%2A> come mezzo per l'attivazione di <xref:System.Windows.Automation.CacheRequest>. L'oggetto viene inserito nello stack quando <xref:System.Windows.Automation.CacheRequest.Activate%2A> viene chiamato e quindi viene rimosso quando viene eliminato. Per assicurare l'eliminazione, inserire il valore restituito all'interno di un `using` blocco (`Using` in Visual Basic).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare <xref:System.Windows.Automation.CacheRequest.Activate%2A> per motivi di cache e le proprietà.  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge un identificatore di proprietà o pattern a un <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un <xref:System.Windows.Automation.CacheRequest> viene creato l'oggetto, il <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> identificatore viene aggiunto come una proprietà predefinita da memorizzare nella cache.  
  
 Aggiunta di un oggetto già presente nella richiesta della cache non ha alcun effetto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationPattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationPattern pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationPattern)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (pattern As AutomationPattern)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationPattern ^ pattern);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.Windows.Automation.AutomationPattern" />
      </Parameters>
      <Docs>
        <param name="pattern">Identificatore che specifica un pattern da memorizzare nella cache.</param>
        <summary>Aggiunge a questo oggetto <see cref="T:System.Windows.Automation.AutomationPattern" /> l'identificatore <see cref="T:System.Windows.Automation.CacheRequest" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aggiunta di un modello che è già presente nella richiesta della cache non ha alcun effetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come costruire un <xref:System.Windows.Automation.CacheRequest> e aggiungere un pattern da memorizzare nella cache.  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="T:System.Windows.Automation.CacheRequest" /> è attivo.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (property As AutomationProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationProperty ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.Automation.AutomationProperty" />
      </Parameters>
      <Docs>
        <param name="property">Identificatore che specifica un valore della proprietà da memorizzare nella cache.</param>
        <summary>Aggiunge a questo oggetto <see cref="T:System.Windows.Automation.AutomationProperty" /> l'identificatore <see cref="T:System.Windows.Automation.CacheRequest" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un <xref:System.Windows.Automation.CacheRequest> viene creato il <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> identificatore viene aggiunto come una proprietà predefinita da memorizzare nella cache.  
  
 Aggiunta di una proprietà che è già presente nella richiesta della cache non ha alcun effetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come costruire un <xref:System.Windows.Automation.CacheRequest> e aggiungere una proprietà da memorizzare nella cache.  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="T:System.Windows.Automation.CacheRequest" /> è attivo.</exception>
      </Docs>
    </Member>
    <Member MemberName="AutomationElementMode">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElementMode AutomationElementMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.AutomationElementMode AutomationElementMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutomationElementMode As AutomationElementMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::AutomationElementMode AutomationElementMode { System::Windows::Automation::AutomationElementMode get(); void set(System::Windows::Automation::AutomationElementMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElementMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica se gli elementi restituiti devono contenere riferimenti completi alla [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] sottostante, o solo le informazioni memorizzate nella cache.</summary>
        <value>
          <see cref="F:System.Windows.Automation.AutomationElementMode.Full" /> se gli elementi restituiti hanno un riferimento completo alla [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] sottostante; in caso contrario <see cref="F:System.Windows.Automation.AutomationElementMode.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.AutomationElementMode.Full> il valore predefinito e specifica che gli elementi restituiti contengono un riferimento completo a sottostante [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. <xref:System.Windows.Automation.AutomationElementMode.None> Specifica che gli elementi restituiti non includono alcun riferimento al sottostante [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]e contengono solo informazioni memorizzate nella cache.  
  
 Determinate operazioni su elementi, tra cui <xref:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue%2A>, <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>, e <xref:System.Windows.Automation.AutomationElement.SetFocus%2A>, richiedono un riferimento completo, il tentativo di eseguirle su un elemento che nessuno comporta un <xref:System.InvalidOperationException>.  
  
 Utilizzando <xref:System.Windows.Automation.AutomationElementMode.None> può essere più efficiente quando sono necessarie solo le proprietà, per evitare il sovraccarico dovuto all'impostazione di riferimenti completi.  
  
   
  
## Examples  
 Nell'esempio seguente, <xref:System.Windows.Automation.CacheRequest.AutomationElementMode%2A> è impostato su <xref:System.Windows.Automation.AutomationElementMode.None>, in modo che solo proprietà memorizzate nella cache e i modelli sono disponibili per l'oggetto recuperato.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.CacheRequest Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.CacheRequest Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::CacheRequest ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia dell'oggetto <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <returns>Copia modificabile dell'oggetto corrente.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.CacheRequest Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Automation.CacheRequest Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Automation::CacheRequest ^ Current { System::Windows::Automation::CacheRequest ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Windows.Automation.CacheRequest" /> attivo sul thread corrente.</summary>
        <value>Oggetto <see cref="T:System.Windows.Automation.CacheRequest" /> attivo.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public void Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rimuove l'oggetto <see cref="T:System.Windows.Automation.CacheRequest" /> attivo dallo stack interno per il thread corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Può essere rimossa solo la richiesta attualmente attiva utilizzando il <xref:System.Windows.Automation.CacheRequest.Pop%2A> metodo. Il tentativo di rimuovere una richiesta non è quella corrente genera un'eccezione.  
  
 A meno che non si stiano annidando richieste della cache, è preferibile usare <xref:System.Windows.Automation.CacheRequest.Activate%2A> per inserire la richiesta nello stack. Il motivo è che è possibile utilizzare <xref:System.Windows.Automation.CacheRequest.Activate%2A> all'interno di un `using` blocco (`Using` in Visual Basic), assicurando che la richiesta viene eliminata dallo stack anche se viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come disattivare un <xref:System.Windows.Automation.CacheRequest> utilizzando <xref:System.Windows.Automation.CacheRequest.Pop%2A>.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Si è tentato di rimuovere una richiesta della cache che non è stata inserita per ultima nello stack.</exception>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Push" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Colloca l'oggetto <see cref="T:System.Windows.Automation.CacheRequest" /> nello stack di stato interno, rendendolo richiesta attiva nel thread corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Più <xref:System.Windows.Automation.CacheRequest> gli oggetti possono essere inseriti nello stack di stato. Le richieste della cache da rimuovere dallo stack nell'ordine in che cui sono state inserite. in caso contrario, un <xref:System.InvalidOperationException> viene generata l'eccezione.  
  
 A meno che non si stiano annidando richieste della cache, è preferibile usare <xref:System.Windows.Automation.CacheRequest.Activate%2A> per inserire la richiesta nello stack. Il motivo è che è possibile utilizzare <xref:System.Windows.Automation.CacheRequest.Activate%2A> all'interno di un `using` blocco (`Using` in Visual Basic), assicurando che la richiesta viene eliminata dallo stack anche se viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come attivare un <xref:System.Windows.Automation.CacheRequest> utilizzando <xref:System.Windows.Automation.CacheRequest.Push%2A>.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TreeFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Condition TreeFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Condition TreeFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeFilter As Condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::Condition ^ TreeFilter { System::Windows::Automation::Condition ^ get(); void set(System::Windows::Automation::Condition ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Condition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica la visualizzazione della struttura ad albero dell'elemento di [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] da utilizzare durante la memorizzazione nella cache.</summary>
        <value>Visualizzazione della struttura ad albero dell'elemento di [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]. La visualizzazione predefinita è <see cref="F:System.Windows.Automation.Automation.ControlViewCondition" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sulle visualizzazioni del [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] struttura ad albero, vedere [Cenni preliminari sulla struttura ad albero di automazione interfaccia utente](~/docs/framework/ui-automation/ui-automation-tree-overview.md).  
  
   
  
## Examples  
 Nell'esempio seguente, <xref:System.Windows.Automation.CacheRequest.TreeFilter%2A> è impostato su <xref:System.Windows.Automation.Automation.RawViewCondition> per consentire la memorizzazione nella cache per tutti gli elementi, indipendentemente dal fatto che siano parte della visualizzazione contenuta o visualizzazione controlli.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.Automation.Automation.ContentViewCondition" />
      </Docs>
    </Member>
    <Member MemberName="TreeScope">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TreeScope TreeScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TreeScope TreeScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeScope As TreeScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TreeScope TreeScope { System::Windows::Automation::TreeScope get(); void set(System::Windows::Automation::TreeScope value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TreeScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica se la memorizzazione nella cache viene effettuata solo per la radice del sottoalbero, o anche per gli oggetti figlio o discendenti.</summary>
        <value>Uno o più <see cref="F:System.Windows.Automation.TreeScope.Element" />, <see cref="F:System.Windows.Automation.TreeScope.Children" />, <see cref="F:System.Windows.Automation.TreeScope.Descendants" /> o <see cref="F:System.Windows.Automation.TreeScope.Subtree" />. Il valore predefinito è <see cref="F:System.Windows.Automation.TreeScope.Element" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'ambito della memorizzazione nella cache è in relazione gli oggetti recuperato, non in relazione all'oggetto in cui <xref:System.Windows.Automation.AutomationElement.FindFirst%2A> o <xref:System.Windows.Automation.AutomationElement.FindAll%2A> viene chiamato. Vedere l'esempio.  
  
   
  
## Examples  
 Nell'esempio seguente, un elemento casella di riepilogo viene ottenuto dall'elemento della finestra padre durante un <xref:System.Windows.Automation.CacheRequest> è attivo e <xref:System.Windows.Automation.CacheRequest.TreeScope%2A> è <xref:System.Windows.Automation.TreeScope.Children>. Le proprietà specificate degli elementi figlio (ovvero, le voci di elenco) vengono archiviate nella cache e possono essere recuperate dal <xref:System.Windows.Automation.AutomationElement.CachedChildren%2A> della casella di riepilogo.  
  
 [!code-csharp[UIAClient_snip#119](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#119)]
 [!code-vb[UIAClient_snip#119](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#119)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">È stato effettuato un tentativo di impostare la proprietà su <see cref="F:System.Windows.Automation.TreeScope.Parent" /> o <see cref="F:System.Windows.Automation.TreeScope.Ancestors" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>