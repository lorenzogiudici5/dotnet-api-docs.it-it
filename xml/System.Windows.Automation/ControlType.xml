<Type Name="ControlType" FullName="System.Windows.Automation.ControlType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0abecbe46253160c1c6b72e9e79e4fd5e155b3bd" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37583017" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ControlType : System.Windows.Automation.AutomationIdentifier" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlType extends System.Windows.Automation.AutomationIdentifier" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.ControlType" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlType&#xA;Inherits AutomationIdentifier" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlType : System::Windows::Automation::AutomationIdentifier" />
  <TypeSignature Language="F#" Value="type ControlType = class&#xA;    inherit AutomationIdentifier" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationTypes</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Automation.AutomationIdentifier</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Identifies the type of a user interface (UI) control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.ControlType> eredita da <xref:System.Windows.Automation.AutomationIdentifier> e viene usato per identificare il tipo di un controllo rappresentato da un <xref:System.Windows.Automation.AutomationElement>. Il tipo di controllo è determinato dallo sviluppatore del provider di automazione interfaccia utente.  
  
 Questa classe contiene campi statici che sono a loro volta <xref:System.Windows.Automation.ControlType> oggetti, per identificare i tipi di controlli standard. È inoltre disponibile un <xref:System.Windows.Automation.ControlType.Custom> tipo per i controlli che non corrispondono a uno dei tipi definiti.  
  
 È l'unico caso in cui è possibile modificare il tipo di controllo di un controllo in fase di esecuzione in cui il controllo supporta <xref:System.Windows.Automation.MultipleViewPattern>. Un esempio è il [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] lenco, che può essere un <xref:System.Windows.Automation.ControlType.DataGrid> o <xref:System.Windows.Automation.ControlType.List>, a seconda della visualizzazione corrente.  
  
 Tipi di controllo non è un'equivalenza uno per i pattern di controllo. Un controllo può essere di un solo tipo, ma possono supportare più pattern o nessuno affatto, in base alla relativa funzionalità specifiche.  
  
 Per informazioni dettagliate sui diversi tipi di controllo, vedere [UI Automation Control Types](~/docs/framework/ui-automation/ui-automation-control-types.md).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Button">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Button;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Button" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Button" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Button As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Button;" />
      <MemberSignature Language="F#" Value=" staticval mutable Button : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Button" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a button control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pulsanti di eseguono un'unica azione quando si fa clic.  
  
 Un pulsante può essere utilizzato come un controllo autonomo o come un sottocontrollo in un altro tipo di controllo. Ad esempio, la freccia giù in un controllo casella combinata è un pulsante. Se viene utilizzata come un sottocontrollo, un pulsante nella visualizzazione controlli del [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] albero (non nella visualizzazione contenuto).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Calendar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Calendar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Calendar As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Calendar;" />
      <MemberSignature Language="F#" Value=" staticval mutable Calendar : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Calendar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a calendar control, such as a date-picker.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckBox">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType CheckBox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType CheckBox" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.CheckBox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CheckBox As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ CheckBox;" />
      <MemberSignature Language="F#" Value=" staticval mutable CheckBox : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.CheckBox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a check box control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una casella di controllo può essere utilizzata come un controllo autonomo o come un sottocontrollo in un altro tipo di controllo.  Ad esempio, una casella di controllo all'inizio di una riga in un controllo griglia che consente di selezionare la riga (usata per gestire il contenuto) viene visualizzato nella visualizzazione controlli, ma non nella visualizzazione contenuto. È tuttavia una casella di controllo con etichetta in un formato che rappresenta i dati nelle viste del contenuto e il controllo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComboBox">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType ComboBox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType ComboBox" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.ComboBox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ComboBox As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ ComboBox;" />
      <MemberSignature Language="F#" Value=" staticval mutable ComboBox : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.ComboBox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a combo box control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esistono due varianti di controlli casella combinata. Una casella combinata semplice presenta un elenco che un utente può selezionare. Una casella combinata modificabile presenta un elenco di scelte e ha anche un'area di testo modificabile in cui un utente può digitare in una scelta anziché essere vincolati alla selezione dalle scelte nell'elenco.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Custom">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Custom;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Custom" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Custom" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Custom As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Custom;" />
      <MemberSignature Language="F#" Value=" staticval mutable Custom : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Custom" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a control that is not one of the defined control types.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Automation.ControlType.Custom> tipo di controllo indica un controllo che non viene identificato come uno dei tipi di controllo predefiniti (ad esempio <xref:System.Windows.Automation.ControlType.Button> o <xref:System.Windows.Automation.ControlType.Calendar>).  
  
 Gli sviluppatori di controlli devono controllare gli altri tipi di controllo prima di definire il controllo come un <xref:System.Windows.Automation.ControlType.Custom> controllano il tipo per assicurarsi che il controllo non fornisce la stessa funzionalità di uno dei tipi di controllo definiti.  
  
 Oggetto <xref:System.Windows.Automation.ControlType.Custom> tipo di controllo richiede inoltre lavoro aggiuntivo per il provider implementare [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]. Inoltre, i prodotti client di automazione interfaccia utente non sarà in grado di determinare in anticipo la struttura di controllo, l'interazione di tastiera e i pattern di controllo possibili in base al tipo di controllo del controllo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataGrid">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType DataGrid;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType DataGrid" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.DataGrid" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataGrid As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ DataGrid;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataGrid : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.DataGrid" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a data grid control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando le celle contengono solo testo, il tipo di controllo deve essere <xref:System.Windows.Automation.ControlType.Table>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataItem">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType DataItem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType DataItem" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.DataItem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataItem As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ DataItem;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataItem : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.DataItem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a data item control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.DataItem> è un elemento complesso che può contenere molti altri controlli.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Document;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Document" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Document" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Document As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Document;" />
      <MemberSignature Language="F#" Value=" staticval mutable Document : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Document" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a document control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un documento contiene il contenuto di testo di più di una riga.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Edit">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Edit;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Edit" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Edit" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Edit As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Edit;" />
      <MemberSignature Language="F#" Value=" staticval mutable Edit : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Edit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies an edit control, such as a text box.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Automation.ControlType.Edit> controllo può essere usato come un controllo autonomo o come un sottocontrollo in un altro tipo di controllo.  Ad esempio, l'area in cui un utente può digitare un valore in un controllo casella combinata è un <xref:System.Windows.Automation.ControlType.Edit> (controllo), e in questo caso il controllo non fa parte della visualizzazione di contenuto.  
  
 <xref:System.Windows.Automation.ControlType.Edit> controlli possono anche rappresentare i controlli che contengono le password. Il <xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsPassword%2A> proprietà attiva prodotti quali gli screen reader per sapere se si desidera visualizzare il contenuto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNeverSupportedPatterns">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationPattern[] GetNeverSupportedPatterns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationPattern[] GetNeverSupportedPatterns() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.ControlType.GetNeverSupportedPatterns" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNeverSupportedPatterns () As AutomationPattern()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::AutomationPattern ^&gt; ^ GetNeverSupportedPatterns();" />
      <MemberSignature Language="F#" Value="member this.GetNeverSupportedPatterns : unit -&gt; System.Windows.Automation.AutomationPattern[]" Usage="controlType.GetNeverSupportedPatterns " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationPattern[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves the pattern identifiers that are not supported by the control type.</summary>
        <returns>An array of [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] pattern identifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è utile per i client di automazione interfaccia utente, ad esempio Framework di test per un'implementazione del provider necessario trovare tutti i pattern di controllo che non sono consentite per questo tipo di controllo.  
  
   
  
## Examples  
 Nell'esempio seguente viene chiamato <xref:System.Windows.Automation.ControlType.GetNeverSupportedPatterns%2A> su tutti i tipi di <xref:System.Windows.Automation.ControlType> contenuti come un campo statico nel <xref:System.Windows.Automation.ControlType> classe.  
  
 [!code-csharp[UIAControlTypePatterns_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAControlTypePatterns_snip/CSharp/GetPatternsForm.cs#101)]
 [!code-vb[UIAControlTypePatterns_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAControlTypePatterns_snip/visualbasic/getpatternsform.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredPatternSets">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationPattern[][] GetRequiredPatternSets ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationPattern[][] GetRequiredPatternSets() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.ControlType.GetRequiredPatternSets" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRequiredPatternSets () As AutomationPattern()()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;cli::array &lt;System::Windows::Automation::AutomationPattern ^&gt; ^&gt; ^ GetRequiredPatternSets();" />
      <MemberSignature Language="F#" Value="member this.GetRequiredPatternSets : unit -&gt; System.Windows.Automation.AutomationPattern[][]" Usage="controlType.GetRequiredPatternSets " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationPattern[][]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves an array of sets of required patterns.</summary>
        <returns>An array of sets of required patterns.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni elemento della matrice contiene una matrice di modelli e ogni elemento che presenta questo tipo di controllo deve supportare almeno una di queste matrici.  
  
 Questo metodo è utile per i client di automazione interfaccia utente che è necessario trovare tutti i modelli possibili, ad esempio Framework di test per un'implementazione del provider.  
  
   
  
## Examples  
 Nell'esempio seguente viene chiamato <xref:System.Windows.Automation.ControlType.GetRequiredPatternSets%2A> su tutti i tipi di <xref:System.Windows.Automation.ControlType> contenuti come un campo statico nel <xref:System.Windows.Automation.ControlType> classe.  
  
 [!code-csharp[UIAControlTypePatterns_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAControlTypePatterns_snip/CSharp/GetPatternsForm.cs#101)]
 [!code-vb[UIAControlTypePatterns_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAControlTypePatterns_snip/visualbasic/getpatternsform.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredProperties">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationProperty[] GetRequiredProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationProperty[] GetRequiredProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.ControlType.GetRequiredProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRequiredProperties () As AutomationProperty()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Automation::AutomationProperty ^&gt; ^ GetRequiredProperties();" />
      <MemberSignature Language="F#" Value="member this.GetRequiredProperties : unit -&gt; System.Windows.Automation.AutomationProperty[]" Usage="controlType.GetRequiredProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationProperty[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves an array of the required property [!INCLUDE[TLA#tla_id#plural](~/includes/tlasharptla-idsharpplural-md.md)] for this control type.</summary>
        <returns>An array of property [!INCLUDE[TLA2#tla_id#plural](~/includes/tla2sharptla-idsharpplural-md.md)].</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è utile per i client di automazione interfaccia utente che è necessario trovare tutte le possibili proprietà, ad esempio Framework di test per un'implementazione del provider.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Group;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Group" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Group" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Group As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Group;" />
      <MemberSignature Language="F#" Value=" staticval mutable Group : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Group" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a group control, which acts as a container for other controls.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un gruppo è un controllo contenitore che contiene diversi tipi di controlli e viene usato per associare in modo logico i controlli.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Header">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Header;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Header" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Header" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Header As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Header;" />
      <MemberSignature Language="F#" Value=" staticval mutable Header : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Header" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a header control, which is a container for the labels of rows and columns of information.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderItem">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType HeaderItem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType HeaderItem" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.HeaderItem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeaderItem As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ HeaderItem;" />
      <MemberSignature Language="F#" Value=" staticval mutable HeaderItem : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.HeaderItem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a header item, which is the label for a row or column of information.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hyperlink">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Hyperlink;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Hyperlink" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Hyperlink" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Hyperlink As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Hyperlink;" />
      <MemberSignature Language="F#" Value=" staticval mutable Hyperlink : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Hyperlink" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a hyperlink control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Consente di passare un controllo collegamento ipertestuale a un oggetto specificato [!INCLUDE[TLA#tla_url](~/includes/tlasharptla-url-md.md)] quando un utente fa clic sul controllo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Image">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Image;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Image" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Image" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Image As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Image;" />
      <MemberSignature Language="F#" Value=" staticval mutable Image : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Image" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies an image control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Automation.ControlType.Image> tipo di controllo può essere usato come un controllo autonomo o come un sottocontrollo in un altro tipo di controllo.  Ad esempio, un pulsante può usare un'immagine, anziché del testo per indicare all'utente relative funzionalità.  
  
 Quando usato puramente decorativo, un'immagine viene visualizzata nella visualizzazione controlli del [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] albero (non nella visualizzazione contenuto).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType List;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType List" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.List" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly List As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ List;" />
      <MemberSignature Language="F#" Value=" staticval mutable List : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.List" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a list control, such as a list box.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.List> è un tipo di controllo che contiene <xref:System.Windows.Automation.ControlType.ListItem> e (forse) <xref:System.Windows.Automation.ControlType.Group> i tipi di controllo.  
  
 Oggetto <xref:System.Windows.Automation.ControlType.List> controllo può essere usato come un controllo autonomo o come un sottocontrollo in un altro tipo di controllo. Ad esempio, una casella combinata ha un <xref:System.Windows.Automation.ControlType.List> controllo che contiene le opzioni visualizzate quando si fa clic sul pulsante elenco a discesa. Quando usato come un sottocontrollo, una <xref:System.Windows.Automation.ControlType.List> è solo nella visualizzazione controlli del [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] albero (non nella visualizzazione contenuto).  
  
 Quando usato come un sottocontrollo, una <xref:System.Windows.Automation.ControlType.List> non ha un `Name` proprietà assegnata.  
  
 Oggetto <xref:System.Windows.Automation.ControlType.List> può contenere <xref:System.Windows.Automation.ControlType.DataItem> controlli.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListItem">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType ListItem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType ListItem" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.ListItem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ListItem As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ ListItem;" />
      <MemberSignature Language="F#" Value=" staticval mutable ListItem : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.ListItem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a list item control, which is a child item of a list control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.Header> può anche essere un figlio di un controllo elenco.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizedControlType">
      <MemberSignature Language="C#" Value="public string LocalizedControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalizedControlType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.ControlType.LocalizedControlType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalizedControlType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LocalizedControlType { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalizedControlType : string" Usage="System.Windows.Automation.ControlType.LocalizedControlType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a description of the control type.</summary>
        <value>Descrizione localizzata del tipo di controllo, ad esempio "pulsante".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente vengono individuati tutti i tipi di controllo tramite reflection e i relativi <xref:System.Windows.Automation.ControlType.LocalizedControlType%2A> proprietà vengono visualizzati insieme ad altre informazioni.  
  
 [!code-csharp[UIAControlTypePatterns_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAControlTypePatterns_snip/CSharp/GetPatternsForm.cs#101)]
 [!code-vb[UIAControlTypePatterns_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAControlTypePatterns_snip/visualbasic/getpatternsform.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupById">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.ControlType LookupById (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Automation.ControlType LookupById(int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.ControlType.LookupById(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LookupById (id As Integer) As ControlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Automation::ControlType ^ LookupById(int id);" />
      <MemberSignature Language="F#" Value="static member LookupById : int -&gt; System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.LookupById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">Identifier of the control type.</param>
        <summary>Retrieves a <see cref="T:System.Windows.Automation.ControlType" /> that encapsulates a specified numerical identifier.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere il tipo di un controllo viene identificato da un <xref:System.Windows.Automation.ControlType> oggetto. Questo metodo consente di costruire un oggetto di questo tipo quando è noto solo l'identificatore numerico.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Menu">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Menu;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Menu" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Menu" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Menu As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Menu;" />
      <MemberSignature Language="F#" Value=" staticval mutable Menu : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Menu" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a menu control, such as a top-level menu in an application window.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un menu di scelta è un contenitore per una raccolta di voci di menu; ad esempio, il controllo di sotto **File** quando fa clic su di esso e che contiene **New**, **Open**e così via.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MenuBar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType MenuBar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType MenuBar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.MenuBar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MenuBar As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ MenuBar;" />
      <MemberSignature Language="F#" Value=" staticval mutable MenuBar : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.MenuBar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a menu bar control, which generally contains a set of top-level menus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.MenuBar> il tipo di controllo rappresenta il contenitore per il set di menu di primo livello di un'applicazione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MenuItem">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType MenuItem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType MenuItem" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.MenuItem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MenuItem As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ MenuItem;" />
      <MemberSignature Language="F#" Value=" staticval mutable MenuItem : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.MenuItem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a menu item control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.MenuItem> è un figlio di un <xref:System.Windows.Automation.ControlType.Menu> o <xref:System.Windows.Automation.ControlType.MenuBar> controllo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pane">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Pane;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Pane" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Pane" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pane As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Pane;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pane : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Pane" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a pane control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.Pane> consente di separare visivamente il contenuto all'interno di un <xref:System.Windows.Automation.ControlType.Window>. In genere, l'utente passa tra i riquadri premendo TAB, F6 o CTRL + TAB, a seconda del contesto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProgressBar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType ProgressBar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType ProgressBar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.ProgressBar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ProgressBar As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ ProgressBar;" />
      <MemberSignature Language="F#" Value=" staticval mutable ProgressBar : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.ProgressBar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a progress bar control, which visually indicates the progress of a lengthy operation.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RadioButton">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType RadioButton;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType RadioButton" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.RadioButton" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RadioButton As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ RadioButton;" />
      <MemberSignature Language="F#" Value=" staticval mutable RadioButton : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.RadioButton" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a radio button control, which is a selection mechanism allowing exactly one selected item in a group.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollBar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType ScrollBar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType ScrollBar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.ScrollBar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ScrollBar As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ ScrollBar;" />
      <MemberSignature Language="F#" Value=" staticval mutable ScrollBar : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.ScrollBar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a scroll bar control, such as a scroll bar in an application window.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.ScrollBar> il tipo di controllo contiene un set di pulsanti e un controllo thumb che consentono a un utente utilizzando il mouse per scorrere il contenuto di una finestra o elemento del contenitore.  
  
 Usare la <xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId%2A> proprietà per distinguere il <xref:System.Windows.Automation.ControlType.Button> gli elementi che corrispondono ai pulsanti-incremento, decremento, small-incremento e decremento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Separator">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Separator;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Separator" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Separator" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Separator As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Separator;" />
      <MemberSignature Language="F#" Value=" staticval mutable Separator : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Separator" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a separator, which creates a visual division in controls like menus and toolbars.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Slider">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Slider;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Slider" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Slider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Slider As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Slider;" />
      <MemberSignature Language="F#" Value=" staticval mutable Slider : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Slider" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a slider control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.Slider> tipo di controllo è costituito da un set di pulsanti associati a un <xref:System.Windows.Automation.ControlType.Edit> controllo che consentire agli utenti di selezionare un set di elementi oppure impostare un valore numerico compreso nell'intervallo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Spinner">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Spinner;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Spinner" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Spinner" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Spinner As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Spinner;" />
      <MemberSignature Language="F#" Value=" staticval mutable Spinner : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Spinner" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a spinner control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.Spinner> il tipo di controllo è costituito da un set di pulsanti che consentono a un utente di selezionare da un set di elementi o impostare un valore numerico compreso nell'intervallo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitButton">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType SplitButton;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType SplitButton" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.SplitButton" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SplitButton As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ SplitButton;" />
      <MemberSignature Language="F#" Value=" staticval mutable SplitButton : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.SplitButton" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a split button, which is a button that performs a default action and can also expand to a list of other possible actions.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusBar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType StatusBar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType StatusBar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.StatusBar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StatusBar As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ StatusBar;" />
      <MemberSignature Language="F#" Value=" staticval mutable StatusBar : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.StatusBar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a status bar control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.ControlType.StatusBar> tipi di controllo generalmente sono della <xref:System.Windows.Automation.ControlType.Window> tipo di controllo [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] elementi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tab">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Tab;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Tab" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Tab" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tab As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Tab;" />
      <MemberSignature Language="F#" Value=" staticval mutable Tab : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Tab" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a tab control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.Tab> è un tipo di controllo che contiene almeno uno <xref:System.Windows.Automation.ControlType.TabItem> controllo figlio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabItem">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType TabItem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType TabItem" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.TabItem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TabItem As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ TabItem;" />
      <MemberSignature Language="F#" Value=" staticval mutable TabItem : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.TabItem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a tab item control, which represents a page of a tab control.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Table;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Table" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Table" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Table As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Table;" />
      <MemberSignature Language="F#" Value=" staticval mutable Table : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Table" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a table.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.Table> tipo di controllo è simile a un <xref:System.Windows.Automation.ControlType.DataGrid> ma contiene solo testo. Le tabelle possono inoltre contenere <xref:System.Windows.Automation.ControlType.Header> i tipi di controllo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Text;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Text" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Text" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Text As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Text;" />
      <MemberSignature Language="F#" Value=" staticval mutable Text : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Text" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies an edit control, such as a text box or rich text box.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.Text> controllo può essere usato come controllo autonomo, ad esempio un <xref:System.Windows.Automation.ControlType.Edit> (controllo), o come un sottocomponente, ad esempio l'area di un <xref:System.Windows.Automation.ControlType.ComboBox> in cui un utente può digitare un valore.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Thumb">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Thumb;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Thumb" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Thumb" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Thumb As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Thumb;" />
      <MemberSignature Language="F#" Value=" staticval mutable Thumb : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Thumb" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the control in a scrollbar that can be dragged to a different position.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.Thumb> controllo viene utilizzato come un sottocontrollo in un <xref:System.Windows.Automation.ControlType.ScrollBar> tipo di controllo. Come un sottocontrollo, una <xref:System.Windows.Automation.ControlType.Thumb> non ha un <xref:System.Windows.Automation.AutomationElement.NameProperty>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleBar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType TitleBar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType TitleBar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.TitleBar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TitleBar As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ TitleBar;" />
      <MemberSignature Language="F#" Value=" staticval mutable TitleBar : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.TitleBar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the caption bar on a window.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolBar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType ToolBar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType ToolBar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.ToolBar" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolBar As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ ToolBar;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolBar : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.ToolBar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a toolbar, such as the control that contains a set of command buttons in an application window.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType ToolTip;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType ToolTip" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTip As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ ToolTip;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTip : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.ToolTip" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a tooltip control, an informational window that appears as a result of moving the pointer over a control or sometimes when tabbing to a control using the keyboard.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tree">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Tree;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Tree" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Tree" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tree As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Tree;" />
      <MemberSignature Language="F#" Value=" staticval mutable Tree : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Tree" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a tree control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.Tree> tipo di controllo è un contenitore per una disposizione gerarchica delle <xref:System.Windows.Automation.ControlType.TreeItem> o <xref:System.Windows.Automation.ControlType.DataItem> i tipi di controllo.  
  
 Ogni nodo di un albero può contenere altri nodi.  Un nodo che contiene i nodi possono essere visualizzati come elemento figlio è espanso o compresso.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TreeItem">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType TreeItem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType TreeItem" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.TreeItem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TreeItem As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ TreeItem;" />
      <MemberSignature Language="F#" Value=" staticval mutable TreeItem : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.TreeItem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a node in a <see cref="F:System.Windows.Automation.ControlType.TreeItem" /> control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Windows.Automation.ControlType.TreeItem> tipo di controllo può essere usato solo come un sottocontrollo di un <xref:System.Windows.Automation.ControlType.Tree> controllo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Window;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Window" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Window" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Window As ControlType " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::ControlType ^ Window;" />
      <MemberSignature Language="F#" Value=" staticval mutable Window : System.Windows.Automation.ControlType" Usage="System.Windows.Automation.ControlType.Window" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies a window frame, which contains child objects.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I controlli di questo tipo supportano sempre <xref:System.Windows.Automation.WindowPattern>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>