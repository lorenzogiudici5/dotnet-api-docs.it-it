<Type Name="InvokePattern" FullName="System.Windows.Automation.InvokePattern">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="06184164aba4c2ea7b3ec8e0b889cdd58d42b862" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37525734" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InvokePattern : System.Windows.Automation.BasePattern" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InvokePattern extends System.Windows.Automation.BasePattern" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.InvokePattern" />
  <TypeSignature Language="VB.NET" Value="Public Class InvokePattern&#xA;Inherits BasePattern" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvokePattern : System::Windows::Automation::BasePattern" />
  <TypeSignature Language="F#" Value="type InvokePattern = class&#xA;    inherit BasePattern" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Automation.BasePattern</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta i controlli che avviano o eseguono una singola azione non ambigua e non mantengono lo stato quando attivati.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I controlli supportano <xref:System.Windows.Automation.InvokePattern> se lo stesso comportamento non viene esposto tramite un altro pattern di controllo. Ad esempio, se il <xref:System.Windows.Automation.InvokePattern.Invoke%2A> metodo su un controllo esegue la stessa azione il <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> o <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> metodo, il controllo non supporta <xref:System.Windows.Automation.InvokePattern>.  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] gli elementi che rappresentano i controlli quali caselle di controllo e pulsanti di opzione, che gestiscono un stato, supportano invece <xref:System.Windows.Automation.TogglePattern> o <xref:System.Windows.Automation.SelectionItemPattern>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.IInvokeProvider" />
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.InvokePattern.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; unit" Usage="invokePattern.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invia una richiesta per l'attivazione di un controllo e l'avvio dell'azione singola e non ambigua corrispondente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le chiamate a <xref:System.Windows.Automation.InvokePattern.Invoke%2A> deve restituzione immediata senza blocchi. Tuttavia, questo comportamento dipende interamente il [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] implementazione del provider. Negli scenari in cui la chiamata <xref:System.Windows.Automation.InvokePattern.Invoke%2A> causa un problema di blocco (ad esempio, una finestra di dialogo modale) separato Thred potrebbe essere necessario chiamare il metodo.  
  
   
  
## Examples  
 Nell'esempio seguente un' <xref:System.Windows.Automation.InvokePattern> pattern di controllo viene ottenuto da un controllo e il <xref:System.Windows.Automation.InvokePattern.Invoke%2A> viene chiamato il metodo.  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'elemento non supporta il pattern di controllo <see cref="T:System.Windows.Automation.InvokePattern" /> oppure è nascosto o bloccato.</exception>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">Elemento non abilitato. L'eccezione può essere generata quando un provider di automazione interfaccia utente ha implementato la propria gestione della proprietà <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationEvent InvokedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationEvent InvokedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.InvokedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InvokedEvent As AutomationEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationEvent ^ InvokedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable InvokedEvent : System.Windows.Automation.AutomationEvent" Usage="System.Windows.Automation.InvokePattern.InvokedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento generato quando un controllo viene richiamato o attivato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo identificatore viene usato dalle applicazioni client di automazione interfaccia utente. Provider di automazione interfaccia utente devono utilizzare i campi equivalenti nella <xref:System.Windows.Automation.InvokePatternIdentifiers>.  
  
 Il <xref:System.Windows.Automation.InvokePattern.InvokedEvent> l'identificatore viene passato come parametro al <xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente, il gestore dell'evento identifica l'evento come evento Invoked confrontando il <xref:System.Windows.Automation.AutomationEventArgs.EventId%2A> negli argomenti dell'evento con il <xref:System.Windows.Automation.InvokePattern.InvokedEvent> campo dell'identificatore.  
  
 [!code-csharp[UIAClient_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#101)]
 [!code-vb[UIAClient_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationPattern Pattern;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationPattern Pattern" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pattern As AutomationPattern " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationPattern ^ Pattern;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pattern : System.Windows.Automation.AutomationPattern" Usage="System.Windows.Automation.InvokePattern.Pattern" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica il pattern di controllo <see cref="T:System.Windows.Automation.InvokePattern" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo identificatore viene usato dalle applicazioni client di automazione interfaccia utente. Provider di automazione interfaccia utente devono utilizzare i campi equivalenti nella <xref:System.Windows.Automation.InvokePatternIdentifiers>.  
  
 Identificatore del modello viene passato ai metodi, ad esempio <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A> per recuperare il pattern di controllo di interesse da specificato <xref:System.Windows.Automation.AutomationElement>.  
  
   
  
## Examples  
 Nell'esempio seguente un' <xref:System.Windows.Automation.InvokePattern> pattern di controllo viene ottenuto da un controllo e il <xref:System.Windows.Automation.InvokePattern.Invoke%2A> viene chiamato il metodo.  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>