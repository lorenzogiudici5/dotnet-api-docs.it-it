<Type Name="InvokePattern" FullName="System.Windows.Automation.InvokePattern">
  <TypeSignature Language="C#" Value="public class InvokePattern : System.Windows.Automation.BasePattern" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InvokePattern extends System.Windows.Automation.BasePattern" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.InvokePattern" />
  <TypeSignature Language="VB.NET" Value="Public Class InvokePattern&#xA;Inherits BasePattern" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvokePattern : System::Windows::Automation::BasePattern" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Automation.BasePattern</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1774c-101">Rappresenta i controlli che avviano o eseguono una singola azione non ambigua e non mantengono lo stato quando attivati.</span><span class="sxs-lookup"><span data-stu-id="1774c-101">Represents controls that initiate or perform a single, unambiguous action and do not maintain state when activated.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1774c-102">I controlli supportano <xref:System.Windows.Automation.InvokePattern> se lo stesso comportamento non viene esposto tramite un altro pattern di controllo.</span><span class="sxs-lookup"><span data-stu-id="1774c-102">Controls support <xref:System.Windows.Automation.InvokePattern> if the same behavior is not exposed through another control pattern.</span></span> <span data-ttu-id="1774c-103">Ad esempio, se il <xref:System.Windows.Automation.InvokePattern.Invoke%2A> metodo su un controllo esegue la stessa azione di <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> o <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> (metodo), il controllo non supporta <xref:System.Windows.Automation.InvokePattern>.</span><span class="sxs-lookup"><span data-stu-id="1774c-103">For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control will not support <xref:System.Windows.Automation.InvokePattern>.</span></span>  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]<span data-ttu-id="1774c-104"> gli elementi che rappresentano i controlli come caselle di controllo e pulsanti di opzione, che gestiscono un stato, supportano invece <xref:System.Windows.Automation.TogglePattern> o <xref:System.Windows.Automation.SelectionItemPattern>.</span><span class="sxs-lookup"><span data-stu-id="1774c-104"> elements that represent controls such as check boxes and radio buttons, which maintain a state, instead support <xref:System.Windows.Automation.TogglePattern> or <xref:System.Windows.Automation.SelectionItemPattern>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.IInvokeProvider" />
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.InvokePattern.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1774c-105">Invia una richiesta per l'attivazione di un controllo e l'avvio dell'azione singola e non ambigua corrispondente.</span><span class="sxs-lookup"><span data-stu-id="1774c-105">Sends a request to activate a control and initiate its single, unambiguous action.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1774c-106">Le chiamate a <xref:System.Windows.Automation.InvokePattern.Invoke%2A> deve essere restituito immediatamente senza bloccare.</span><span class="sxs-lookup"><span data-stu-id="1774c-106">Calls to <xref:System.Windows.Automation.InvokePattern.Invoke%2A> should return immediately without blocking.</span></span> <span data-ttu-id="1774c-107">Tuttavia, questo comportamento dipende interamente il [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] implementazione del provider.</span><span class="sxs-lookup"><span data-stu-id="1774c-107">However, this behavior is entirely dependent on the [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] provider implementation.</span></span> <span data-ttu-id="1774c-108">Negli scenari in cui la chiamata <xref:System.Windows.Automation.InvokePattern.Invoke%2A> causa un problema di blocco (ad esempio una finestra di dialogo modale) separato per chiamare il metodo potrebbe essere necessario thread di supporto.</span><span class="sxs-lookup"><span data-stu-id="1774c-108">In scenarios where calling <xref:System.Windows.Automation.InvokePattern.Invoke%2A> causes a blocking issue (such as a modal dialog) a separate helper thread may be required to call the method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1774c-109">Nell'esempio seguente un <xref:System.Windows.Automation.InvokePattern> pattern di controllo viene ottenuto da un controllo e <xref:System.Windows.Automation.InvokePattern.Invoke%2A> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="1774c-109">In the following example an <xref:System.Windows.Automation.InvokePattern> control pattern is obtained from a control and the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method is called.</span></span>  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1774c-110">L'elemento non supporta il pattern di controllo <see cref="T:System.Windows.Automation.InvokePattern" /> oppure è nascosto o bloccato.</span><span class="sxs-lookup"><span data-stu-id="1774c-110">The element does not support the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern or is hidden or blocked.</span></span></exception>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException"><span data-ttu-id="1774c-111">Elemento non abilitato.</span><span class="sxs-lookup"><span data-stu-id="1774c-111">The element is not enabled.</span></span> <span data-ttu-id="1774c-112">L'eccezione può essere generata quando un provider di automazione interfaccia utente ha implementato la propria gestione della proprietà <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" />.</span><span class="sxs-lookup"><span data-stu-id="1774c-112">Can be raised when a UI Automation provider has implemented its own handling of the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" /> property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InvokedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationEvent InvokedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationEvent InvokedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.InvokedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InvokedEvent As AutomationEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationEvent ^ InvokedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1774c-113">Identifica l'evento generato quando un controllo viene richiamato o attivato.</span><span class="sxs-lookup"><span data-stu-id="1774c-113">Identifies the event raised when a control is invoked or activated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1774c-114">Questo identificatore viene usato dalle applicazioni client di automazione interfaccia utente.</span><span class="sxs-lookup"><span data-stu-id="1774c-114">This identifier is used by UI Automation client applications.</span></span> <span data-ttu-id="1774c-115">Provider di automazione interfaccia utente devono utilizzare il campo equivalente in <xref:System.Windows.Automation.InvokePatternIdentifiers>.</span><span class="sxs-lookup"><span data-stu-id="1774c-115">UI Automation providers should use the equivalent field in <xref:System.Windows.Automation.InvokePatternIdentifiers>.</span></span>  
  
 <span data-ttu-id="1774c-116">Il <xref:System.Windows.Automation.InvokePattern.InvokedEvent> identificatore viene passato come parametro a <xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>.</span><span class="sxs-lookup"><span data-stu-id="1774c-116">The <xref:System.Windows.Automation.InvokePattern.InvokedEvent> identifier is passed as a parameter to <xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1774c-117">Nell'esempio seguente, il gestore dell'evento identifica l'evento come evento Invoked confrontando il <xref:System.Windows.Automation.AutomationEventArgs.EventId%2A> negli argomenti dell'evento con il <xref:System.Windows.Automation.InvokePattern.InvokedEvent> campo dell'identificatore.</span><span class="sxs-lookup"><span data-stu-id="1774c-117">In the following example, the event handler identifies the event as an Invoked event by comparing the <xref:System.Windows.Automation.AutomationEventArgs.EventId%2A> in the event arguments with the <xref:System.Windows.Automation.InvokePattern.InvokedEvent> identifier field.</span></span>  
  
 [!code-csharp[UIAClient_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#101)]
 [!code-vb[UIAClient_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationPattern Pattern;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationPattern Pattern" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pattern As AutomationPattern " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationPattern ^ Pattern;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1774c-118">Identifica il pattern di controllo <see cref="T:System.Windows.Automation.InvokePattern" />.</span><span class="sxs-lookup"><span data-stu-id="1774c-118">Identifies the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1774c-119">Questo identificatore viene usato dalle applicazioni client di automazione interfaccia utente.</span><span class="sxs-lookup"><span data-stu-id="1774c-119">This identifier is used by UI Automation client applications.</span></span> <span data-ttu-id="1774c-120">Provider di automazione interfaccia utente devono utilizzare il campo equivalente in <xref:System.Windows.Automation.InvokePatternIdentifiers>.</span><span class="sxs-lookup"><span data-stu-id="1774c-120">UI Automation providers should use the equivalent field in <xref:System.Windows.Automation.InvokePatternIdentifiers>.</span></span>  
  
 <span data-ttu-id="1774c-121">Identificatore del pattern viene passato ai metodi, ad esempio <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A> per recuperare il pattern di controllo di interesse da specificato <xref:System.Windows.Automation.AutomationElement>.</span><span class="sxs-lookup"><span data-stu-id="1774c-121">The pattern identifier is passed to methods such as <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A> to retrieve the control pattern of interest from the specified <xref:System.Windows.Automation.AutomationElement>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1774c-122">Nell'esempio seguente un <xref:System.Windows.Automation.InvokePattern> pattern di controllo viene ottenuto da un controllo e <xref:System.Windows.Automation.InvokePattern.Invoke%2A> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="1774c-122">In the following example an <xref:System.Windows.Automation.InvokePattern> control pattern is obtained from a control and the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method is called.</span></span>  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>