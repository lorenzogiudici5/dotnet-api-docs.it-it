<Type Name="ExpressionEditorSheet" FullName="System.Web.UI.Design.ExpressionEditorSheet">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d987e9f0ffaf7b1818b7d646845498696df77f9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36589981" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditorSheet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditorSheet" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditorSheet" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditorSheet abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditorSheet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta una pagina dell'editor in fase di progettazione per un'espressione personalizzata. La classe deve essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un editor di espressioni personalizzato consente allo sviluppatore di impostare le proprietà in un'espressione personalizzata in fase di progettazione. I valori delle proprietà di controllo possono essere impostati utilizzando stringhe di espressione. le stringhe di espressione vengono valutate in fase di esecuzione da un generatore di espressioni e in fase di progettazione da un editor di espressioni.  
  
 Quando si Esplora il <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> proprietà per un controllo nella griglia delle proprietà in fase di progettazione, la finestra di progettazione visiva consente di visualizzare una finestra di dialogo per impostare le espressioni che forniscono il valore per una proprietà del controllo. È possibile selezionare il tipo dell'espressione in base a un elenco di prefissi di espressione. Quando si seleziona un prefisso di espressione dall'elenco, la finestra di progettazione visiva utilizza l'oggetto associato <xref:System.Web.UI.Design.ExpressionEditor> e <xref:System.Web.UI.Design.ExpressionEditorSheet> oggetti da valutare e convertire la stringa dell'espressione in base alla sintassi per il tipo di espressione. Finestra di progettazione visiva Usa proprietà editor espressioni per la richiesta di una o più stringhe che combinano nella stringa di espressione personalizzata.  
  
 In genere, per fornire un nuovo tipo di espressione in fase di progettazione, si definisce un prefisso univoco e fornire personalizzata <xref:System.Web.Compilation.ExpressionBuilder> e <xref:System.Web.UI.Design.ExpressionEditor> implementazioni. Facoltativamente, è possibile fornire un oggetto personalizzato <xref:System.Web.UI.Design.ExpressionEditorSheet> implementazione che definisce le proprietà che verranno utilizzate per formare l'espressione. Per associare un prefisso di espressione con un generatore di espressioni e un editor di espressioni, applicare il <xref:System.Web.Compilation.ExpressionEditorAttribute> attributo e un <xref:System.Web.Compilation.ExpressionPrefixAttribute> attributo personalizzato <xref:System.Web.Configuration.ExpressionBuilder> classe e quindi configurare il prefisso dell'espressione per un generatore di espressioni il `expressionBuilders` elemento nel file di configurazione Web.  
  
 L'implementazione predefinita del <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> metodo restituisce una semplice pagina dell'editor, che usa una singola stringa di input in modo da formare l'espressione. Gli editor di espressioni personalizzate che derivano dal <xref:System.Web.UI.Design.ExpressionEditor> possibile eseguire l'override di <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> per restituire un editor personalizzato di implementazione della pagina. In genere, una pagina dell'editor personalizzato contiene più proprietà che vengono usati per compilare la stringa dell'espressione. Il <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> metodo restituisce la stringa di espressione risultante in base alle proprietà dell'espressione corrente.  
  
 Ad esempio, il <xref:System.Web.UI.Design.ResourceExpressionEditor> classe deriva il <xref:System.Web.UI.Design.ExpressionEditor> classe e fornisce un'implementazione per la valutazione e associazione di un riferimento di stringa di risorsa con una proprietà del controllo in fase di progettazione. Il <xref:System.Web.Compilation.ResourceExpressionBuilder> classe è associato il prefisso dell'espressione `Resources` e il <xref:System.Web.UI.Design.ResourceExpressionEditor> implementazione. Il <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> metodo restituisce un <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, che definisce le proprietà singoli che costituiscono un'espressione di riferimento di risorsa.  
  
 Quando si eredita dal <xref:System.Web.UI.Design.ExpressionEditorSheet> (classe), è necessario eseguire l'override dei membri seguenti:  
  
-   Il <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> per restituire un editor personalizzato di implementazione della pagina.  
  
-   Il <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> costruttore per implementare le azioni di inizializzazione personalizzati per l'implementazione della pagina editor di espressioni.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Derivare un indicatore dell'editor di espressioni personalizzato dal <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> (classe), se si sta definendo un nuovo tipo di espressione per i valori delle proprietà di controllo e si desidera creare la stringa di espressione in base ai valori di proprietà più espressioni. Implementazione di una classe derivata deve contenere i seguenti elementi:-una proprietà pubblica per ogni valore distinto nella stringa di espressione che può essere impostata in fase di progettazione.  -Un'implementazione del <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> metodo che costituisce la stringa di espressione personalizzata ai valori delle proprietà di editor.  -Facoltativamente, implementazione di un costruttore che imposta i valori iniziali dell'editor di proprietà.  La classe dell'editor espressioni personalizzato associato crea un'istanza della pagina dell'editor derivata nel <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> metodo, inizializza l'istanza con la stringa di espressione corrente impostato per la proprietà del controllo e restituisce l'istanza per la finestra di progettazione visiva. Finestra di progettazione visiva consente di impostare l'espressione di proprietà e chiama quindi il <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> metodo in modo da formare la stringa dell'espressione ai valori delle proprietà di espressione di input.</para>
    </block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
    <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
    <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditorSheet (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditorSheet(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.Design.ExpressionEditorSheet : IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="new System.Web.UI.Design.ExpressionEditorSheet serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Implementazione del provider di servizi fornita dall'host di progettazione, utilizzata per ottenere ulteriori servizi in fase di progettazione.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poiché il <xref:System.Web.UI.Design.ExpressionEditorSheet> classe è astratta, non è possibile creare un'istanza di un <xref:System.Web.UI.Design.ExpressionEditorSheet> utilizzando direttamente la <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> costruttore.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si deriva dal <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> classe, eseguire l'override di <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> costruttore per implementare le azioni di inizializzazione personalizzati per l'implementazione della pagina editor di espressioni.  Ad esempio, una classe foglio editor espressioni personalizzato che implementa le proprietà di espressione aggiuntive possa definire i valori predefiniti per le proprietà dell'espressione nel <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> costruttore. Una classe foglio editor di espressioni personalizzato è possibile definire gli overload del costruttore pubblico aggiuntivi che utilizzano valori di parametro di input per impostare i valori iniziali per le proprietà dell'espressione.</para>
        </block>
        <altmember cref="Overload:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetExpression () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetExpression();" />
      <MemberSignature Language="F#" Value="abstract member GetExpression : unit -&gt; string" Usage="expressionEditorSheet.GetExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se sottoposto a override in una classe derivata, restituisce la stringa di espressione formata dai valori della proprietà della pagina dell'editor di espressioni.</summary>
        <returns>La stringa di espressione personalizzata per i valori delle proprietà correnti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un editor di espressioni personalizzato contiene le impostazioni in fase di progettazione per più proprietà dell'espressione, vengono combinate per formare una stringa dell'espressione. I valori delle proprietà di controllo possono essere impostati utilizzando stringhe di espressione. le stringhe di espressione vengono valutate in fase di esecuzione da un generatore di espressioni.  
  
 Il <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> metodo restituisce una stringa di espressione che viene compilata dalle proprietà dell'espressione corrente. Finestra di progettazione visiva consente di impostare l'espressione di proprietà e chiama quindi il <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> metodo per ottenere la stringa di espressione e impostare il valore della proprietà controllo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Derivare un indicatore dell'editor di espressioni personalizzato dal <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> (classe), se si sta definendo un nuovo tipo di espressione per i valori delle proprietà di controllo e si desidera creare la stringa di espressione in base ai valori di proprietà più espressioni. Implementazione di una classe derivata deve contenere i seguenti elementi:-una proprietà pubblica per ogni valore distinto nella stringa di espressione che può essere impostata in fase di progettazione.  -Un'implementazione del <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> metodo che costituisce la stringa di espressione personalizzata ai valori delle proprietà di editor.  -Facoltativamente, implementazione di un costruttore che imposta i valori iniziali dell'editor di proprietà.  La classe dell'editor espressioni personalizzato associato crea un'istanza della pagina dell'editor derivata nel <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> metodo, inizializza l'istanza con la stringa di espressione corrente impostato per la proprietà del controllo e quindi restituisce l'istanza per l'oggetto visivo finestra di progettazione. Finestra di progettazione visiva consente di impostare l'espressione di proprietà e chiama quindi il <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> metodo in modo da formare la stringa dell'espressione ai valori delle proprietà di espressione di input.</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la stringa di espressione è valida.</summary>
        <value>
          <see langword="true" /> se la stringa di espressione è valida; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa implementazione di base restituisce sempre `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceProvider As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IServiceProvider ^ ServiceProvider { IServiceProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceProvider : IServiceProvider" Usage="System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'implementazione del provider di servizi utilizzata dalla pagina dell'editor di espressioni.</summary>
        <value>Oggetto <see cref="T:System.IServiceProvider" />, in genere fornito dall'host di progettazione, che può essere utilizzato per ottenere ulteriori servizi in fase di progettazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> costruttore per impostare il <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> implementazione per un editor di espressioni personalizzate.  
  
 Il <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> proprietà può essere utilizzata per accedere ai servizi forniti dall'host di progettazione. Ad esempio, chiamare il <xref:System.IServiceProvider.GetService%2A> metodo con il <xref:System.Web.UI.Design.IWebApplication> interfaccia per accedere agli elementi di progetto, documenti o i dettagli di file di configurazione vengono forniti tramite la finestra di progettazione visiva.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>