<Type Name="CodeGenerator" FullName="System.CodeDom.Compiler.CodeGenerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0a1be4859a7f2562cfa49ea1c2b7933e269d168d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30360525" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CodeGenerator : System.CodeDom.Compiler.ICodeGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeGenerator extends System.Object implements class System.CodeDom.Compiler.ICodeGenerator" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CodeGenerator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeGenerator&#xA;Implements ICodeGenerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeGenerator abstract : System::CodeDom::Compiler::ICodeGenerator" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.CodeDom.Compiler.ICodeGenerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="d1379-101">Fornisce un'implementazione di esempio dell'interfaccia <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d1379-101">Provides an example implementation of the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> interface.</span>
      </span>
      <span data-ttu-id="d1379-102">Questa classe è astratta.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d1379-102">This class is abstract.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1379-103">Si tratta di una classe di base utile per i generatori di codice da cui derivare.</span><span class="sxs-lookup"><span data-stu-id="d1379-103">This is a useful base class for code generators to derive from.</span></span> <span data-ttu-id="d1379-104">I generatori di codice sono in grado di eseguire il rendering di codice sorgente in una lingua specifica in base alla struttura di un grafico di Code Document Object Model (CodeDOM).</span><span class="sxs-lookup"><span data-stu-id="d1379-104">Code generators are capable of rendering source code in a specific language according to the structure of a Code Document Object Model (CodeDOM) graph.</span></span> <span data-ttu-id="d1379-105">Questa classe fornisce numerose funzioni e metodi per generare i tipi di codice specifici da un grafo CodeDOM.</span><span class="sxs-lookup"><span data-stu-id="d1379-105">This class provides many functions and methods to generate specific types of code from a CodeDOM graph.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1379-106">Questa classe contiene una richiesta di collegamento e una richiesta di ereditarietà a livello di classe che si applica a tutti i membri.</span><span class="sxs-lookup"><span data-stu-id="d1379-106">This class contains a link demand and an inheritance demand at the class level that applies to all members.</span></span> <span data-ttu-id="d1379-107">Oggetto <xref:System.Security.SecurityException> viene generata quando il chiamante immediato o la classe derivata non dispone dell'autorizzazione di attendibilità totale.</span><span class="sxs-lookup"><span data-stu-id="d1379-107">A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission.</span></span> <span data-ttu-id="d1379-108">Per informazioni dettagliate sui requisiti di sicurezza, vedere [le richieste di collegamento](~/docs/framework/misc/link-demands.md) e [richieste di ereditarietà](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9).</span><span class="sxs-lookup"><span data-stu-id="d1379-108">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9).</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <span data-ttu-id="d1379-109">per l'attendibilità totale per il chiamante immediato.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d1379-109">for full trust for the immediate caller.</span>
      </span>
      <span data-ttu-id="d1379-110">Questa classe non può essere utilizzata da codice parzialmente attendibile.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d1379-110">This class cannot be used by partially trusted code.</span>
      </span>
    </permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="d1379-111">per l'attendibilità totale per gli eredi.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d1379-111">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="d1379-112">Questa classe non può essere ereditata da codice parzialmente attendibile.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d1379-112">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <altmember cref="T:System.CodeDom.Compiler.ICodeGenerator" />
    <altmember cref="T:System.CodeDom.Compiler.CodeCompiler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeGenerator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d1379-113">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CodeGenerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-113">Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CodeGenerator" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="d1379-114">per l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-114">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d1379-115">Questa classe non può essere utilizzata da codice parzialmente attendibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-115">This class cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ContinueOnNewLine">
      <MemberSignature Language="C#" Value="protected virtual void ContinueOnNewLine (string st);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ContinueOnNewLine(string st) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ContinueOnNewLine (st As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ContinueOnNewLine(System::String ^ st);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="st" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="st">
          <span data-ttu-id="d1379-116">Stringa da scrivere sulla nuova riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-116">The string to write on the new line.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-117">Genera un carattere di continuazione di riga e restituisce la stringa specificata su una nuova riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-117">Generates a line-continuation character and outputs the specified string on a new line.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="d1379-118">Quando si implementa un generatore di codice per una lingua che supporta un carattere di continuazione di riga (ad esempio, Visual Basic), questo metodo deve restituire il carattere di continuazione di riga prima di restituire un carattere di nuova riga.</span>
            <span class="sxs-lookup">
              <span data-stu-id="d1379-118">When implementing a code generator for a language that supports a line-continuation character (for example, Visual Basic), this method should output the line-continuation character before it outputs a newline character.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="protected abstract string CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateEscapedIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ CreateEscapedIdentifier(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d1379-119">Stringa per la quale deve essere creato un identificatore di escape.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-119">The string to create an escaped identifier for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-120">Crea un identificatore di escape per il valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-120">Creates an escaped identifier for the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d1379-121">Identificatore di escape per il valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-121">The escaped identifier for the value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1379-122"><xref:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier%2A> verifica se l'identificatore in conflitto con riservate o parole chiave del linguaggio e in caso affermativo, restituisce un nome equivalente con la formattazione del codice di escape specifiche della lingua.</span><span class="sxs-lookup"><span data-stu-id="d1379-122"><xref:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier%2A> tests whether the identifier conflicts with reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</span></span> <span data-ttu-id="d1379-123">Il nome restituito è definito un carattere di escape.</span><span class="sxs-lookup"><span data-stu-id="d1379-123">The returned name is referred to an escaped identifier.</span></span> <span data-ttu-id="d1379-124">Il carattere di escape contiene lo stesso `value` ma include la formattazione del codice di escape per distinguerli dalle parole chiave in conflitto.</span><span class="sxs-lookup"><span data-stu-id="d1379-124">The escaped identifier contains the same `value` but includes escape code formatting to differentiate it from conflicting keywords.</span></span> <span data-ttu-id="d1379-125">Ad esempio, `value` potrebbero essere preceduti da un simbolo di chiocciola ("@") o delimitato da parentesi quadre ("[" e "]") per creare un carattere di escape.</span><span class="sxs-lookup"><span data-stu-id="d1379-125">For example, `value` could be preceded by an at sign ("@") or delimited by square brackets ("[" and "]") to create an escaped identifier.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1379-126">L'implementazione predefinita di questo metodo non esegue alcuna operazione.</span><span class="sxs-lookup"><span data-stu-id="d1379-126">The default implementation of this method does nothing.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateValidIdentifier">
      <MemberSignature Language="C#" Value="protected abstract string CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateValidIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ CreateValidIdentifier(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d1379-127">Stringa per la quale deve essere creato un identificatore valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-127">A string to create a valid identifier for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-128">Crea un identificatore valido per il valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-128">Creates a valid identifier for the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d1379-129">Identificatore valido per il valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-129">A valid identifier for the value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1379-130"><xref:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier%2A> verifica se l'identificatore in conflitto con riservate o parole chiave del linguaggio e in caso affermativo, restituisce un nome di identificatore valido che non è in conflitto.</span><span class="sxs-lookup"><span data-stu-id="d1379-130"><xref:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier%2A> tests whether the identifier conflicts with reserved or language keywords, and if so, returns a valid identifier name that does not conflict.</span></span> <span data-ttu-id="d1379-131">L'identificatore restituito contiene lo stesso `value` ma include la formattazione del codice di escape per distinguerli dalle parole chiave in conflitto.</span><span class="sxs-lookup"><span data-stu-id="d1379-131">The returned identifier contains the same `value` but includes escape code formatting to differentiate it from conflicting keywords.</span></span> <span data-ttu-id="d1379-132">In genere, se è necessario modificare il valore, è preceduto da un carattere di sottolineatura "_".</span><span class="sxs-lookup"><span data-stu-id="d1379-132">Typically, if the value requires modification, it is preceded by an underscore "_".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1379-133">L'implementazione predefinita di questo metodo non esegue alcuna operazione.</span><span class="sxs-lookup"><span data-stu-id="d1379-133">The default implementation of this method does nothing.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CurrentClass">
      <MemberSignature Language="C#" Value="protected System.CodeDom.CodeTypeDeclaration CurrentClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeDeclaration CurrentClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CurrentClass As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::CodeDom::CodeTypeDeclaration ^ CurrentClass { System::CodeDom::CodeTypeDeclaration ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-134">Ottiene la dichiarazione del tipo di codice per la classe corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-134">Gets the code type declaration for the current class.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d1379-135">Dichiarazione del tipo di codice per la classe corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-135">The code type declaration for the current class.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentMember">
      <MemberSignature Language="C#" Value="protected System.CodeDom.CodeTypeMember CurrentMember { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeMember CurrentMember" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CurrentMember As CodeTypeMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::CodeDom::CodeTypeMember ^ CurrentMember { System::CodeDom::CodeTypeMember ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-136">Ottiene il membro corrente della classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-136">Gets the current member of the class.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d1379-137">Membro corrente della classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-137">The current member of the class.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
      </Docs>
    </Member>
    <Member MemberName="CurrentMemberName">
      <MemberSignature Language="C#" Value="protected string CurrentMemberName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentMemberName" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CurrentMemberName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ CurrentMemberName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-138">Ottiene il nome del membro corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-138">Gets the current member name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d1379-139">Nome del membro corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-139">The name of the current member.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName" />
      </Docs>
    </Member>
    <Member MemberName="CurrentTypeName">
      <MemberSignature Language="C#" Value="protected string CurrentTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentTypeName" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CurrentTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ CurrentTypeName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-140">Ottiene il nome della classe corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-140">Gets the current class name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d1379-141">Nome della classe corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-141">The current class name.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateArgumentReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateArgumentReferenceExpression (System.CodeDom.CodeArgumentReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateArgumentReferenceExpression(class System.CodeDom.CodeArgumentReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateArgumentReferenceExpression (e As CodeArgumentReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateArgumentReferenceExpression(System::CodeDom::CodeArgumentReferenceExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeArgumentReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-142">Oggetto <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> che indica l'espressione per la quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-142">A <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> that indicates the expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-143">Genera il codice per l'espressione specificata di riferimento a un argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-143">Generates code for the specified argument reference expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeArgumentReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateArrayCreateExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateArrayCreateExpression (System.CodeDom.CodeArrayCreateExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateArrayCreateExpression(class System.CodeDom.CodeArrayCreateExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateArrayCreateExpression (e As CodeArrayCreateExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateArrayCreateExpression(System::CodeDom::CodeArrayCreateExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeArrayCreateExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-144">Oggetto <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> che indica l'espressione per la quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-144">A <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> that indicates the expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-145">Genera il codice per l'espressione specificata di creazione di una matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-145">Generates code for the specified array creation expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeArrayCreateExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateArrayIndexerExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateArrayIndexerExpression (System.CodeDom.CodeArrayIndexerExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateArrayIndexerExpression(class System.CodeDom.CodeArrayIndexerExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateArrayIndexerExpression (e As CodeArrayIndexerExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateArrayIndexerExpression(System::CodeDom::CodeArrayIndexerExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeArrayIndexerExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-146">Oggetto <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> che indica l'espressione per la quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-146">A <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> that indicates the expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-147">Genera il codice per l'espressione specificata dell'indicizzatore di matrici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-147">Generates code for the specified array indexer expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeArrayIndexerExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateAssignStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateAssignStatement (System.CodeDom.CodeAssignStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateAssignStatement(class System.CodeDom.CodeAssignStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateAssignStatement (e As CodeAssignStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateAssignStatement(System::CodeDom::CodeAssignStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeAssignStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-148">Oggetto <see cref="T:System.CodeDom.CodeAssignStatement" /> che indica l'istruzione per la quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-148">A <see cref="T:System.CodeDom.CodeAssignStatement" /> that indicates the statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-149">Genera il codice per l'istruzione di assegnazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-149">Generates code for the specified assignment statement.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeAssignStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateAttachEventStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateAttachEventStatement (System.CodeDom.CodeAttachEventStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateAttachEventStatement(class System.CodeDom.CodeAttachEventStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateAttachEventStatement (e As CodeAttachEventStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateAttachEventStatement(System::CodeDom::CodeAttachEventStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeAttachEventStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-150">Oggetto <see cref="T:System.CodeDom.CodeAttachEventStatement" /> che indica l'istruzione per la quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-150">A <see cref="T:System.CodeDom.CodeAttachEventStatement" /> that indicates the statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-151">Genera il codice per l'istruzione specificata relativa all'evento di collegamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-151">Generates code for the specified attach event statement.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeAttachEventStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateAttributeDeclarationsEnd">
      <MemberSignature Language="C#" Value="protected abstract void GenerateAttributeDeclarationsEnd (System.CodeDom.CodeAttributeDeclarationCollection attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateAttributeDeclarationsEnd(class System.CodeDom.CodeAttributeDeclarationCollection attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateAttributeDeclarationsEnd (attributes As CodeAttributeDeclarationCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateAttributeDeclarationsEnd(System::CodeDom::CodeAttributeDeclarationCollection ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.CodeDom.CodeAttributeDeclarationCollection" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="d1379-152">Oggetto <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> che indica la fine del blocco di attributi per la quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-152">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> that indicates the end of the attribute block to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-153">Genera il codice per la fine specificata del blocco di attributi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-153">Generates code for the specified attribute block end.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />
      </Docs>
    </Member>
    <Member MemberName="GenerateAttributeDeclarationsStart">
      <MemberSignature Language="C#" Value="protected abstract void GenerateAttributeDeclarationsStart (System.CodeDom.CodeAttributeDeclarationCollection attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateAttributeDeclarationsStart(class System.CodeDom.CodeAttributeDeclarationCollection attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateAttributeDeclarationsStart (attributes As CodeAttributeDeclarationCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateAttributeDeclarationsStart(System::CodeDom::CodeAttributeDeclarationCollection ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.CodeDom.CodeAttributeDeclarationCollection" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="d1379-154">Oggetto <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> che indica l'inizio del blocco di attributi per il quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-154">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> that indicates the start of the attribute block to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-155">Genera il codice per l'inizio specificato del blocco di attributi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-155">Generates code for the specified attribute block start.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />
      </Docs>
    </Member>
    <Member MemberName="GenerateBaseReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateBaseReferenceExpression (System.CodeDom.CodeBaseReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateBaseReferenceExpression(class System.CodeDom.CodeBaseReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateBaseReferenceExpression (e As CodeBaseReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateBaseReferenceExpression(System::CodeDom::CodeBaseReferenceExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeBaseReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-156">Oggetto <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> che indica l'espressione per la quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-156">A <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> that indicates the expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-157">Genera il codice per l'espressione specificata di riferimento di base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-157">Generates code for the specified base reference expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeBaseReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateBinaryOperatorExpression">
      <MemberSignature Language="C#" Value="protected virtual void GenerateBinaryOperatorExpression (System.CodeDom.CodeBinaryOperatorExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateBinaryOperatorExpression(class System.CodeDom.CodeBinaryOperatorExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateBinaryOperatorExpression (e As CodeBinaryOperatorExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateBinaryOperatorExpression(System::CodeDom::CodeBinaryOperatorExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeBinaryOperatorExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-158">Oggetto <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> che indica l'espressione per la quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-158">A <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> that indicates the expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-159">Genera il codice per l'espressione specificata dell'operatore binario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-159">Generates code for the specified binary operator expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d1379-160">
            <paramref name="e" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-160">
              <paramref name="e" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.CodeDom.CodeBinaryOperatorExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCastExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateCastExpression (System.CodeDom.CodeCastExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateCastExpression(class System.CodeDom.CodeCastExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateCastExpression (e As CodeCastExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateCastExpression(System::CodeDom::CodeCastExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCastExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-161">Oggetto <see cref="T:System.CodeDom.CodeCastExpression" /> che indica l'espressione per la quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-161">A <see cref="T:System.CodeDom.CodeCastExpression" /> that indicates the expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-162">Genera il codice per l'espressione specificata di cast.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-162">Generates code for the specified cast expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeCastExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromMember">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromMember(class System.CodeDom.CodeTypeMember member, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromMember (member As CodeTypeMember, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromMember(System::CodeDom::CodeTypeMember ^ member, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.CodeDom.CodeTypeMember" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="d1379-163">Membro della classe per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-163">The class member to generate code for.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="d1379-164">Writer di testo a cui restituire il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-164">The text writer to output code to.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="d1379-165">Opzioni da utilizzare per la generazione del codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-165">The options to use when generating the code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-166">Genera codice per il membro della classe specificato usando le opzioni del writer di testo e del generatore di codice specificate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-166">Generates code for the specified class member using the specified text writer and code generator options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1379-167">Codice per i membri viene generato in modo diverso a seconda del contesto.</span><span class="sxs-lookup"><span data-stu-id="d1379-167">Code for members is generated differently depending on the context.</span></span> <span data-ttu-id="d1379-168">Ad esempio, il codice per i metodi in un'interfaccia o campi su un'enumerazione è generato in modo diverso dal codice per lo stesso membro in una classe.</span><span class="sxs-lookup"><span data-stu-id="d1379-168">For example, code for methods on an interface or fields on an enumeration is generated differently from code for the same member on a class.</span></span> <span data-ttu-id="d1379-169">Questa implementazione presuppone che il membro viene generato per il contesto della classe.</span><span class="sxs-lookup"><span data-stu-id="d1379-169">This implementation assumes that the member is being generated for the class context.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d1379-170">La proprietà <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> non è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-170">The <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> property is not <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateComment">
      <MemberSignature Language="C#" Value="protected abstract void GenerateComment (System.CodeDom.CodeComment e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateComment(class System.CodeDom.CodeComment e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateComment (e As CodeComment)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateComment(System::CodeDom::CodeComment ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeComment" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-171">Oggetto <see cref="T:System.CodeDom.CodeComment" /> per il quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-171">A <see cref="T:System.CodeDom.CodeComment" /> to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-172">Genera il codice per il commento specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-172">Generates code for the specified comment.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeComment" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCommentStatement">
      <MemberSignature Language="C#" Value="protected virtual void GenerateCommentStatement (System.CodeDom.CodeCommentStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateCommentStatement(class System.CodeDom.CodeCommentStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateCommentStatement (e As CodeCommentStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateCommentStatement(System::CodeDom::CodeCommentStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCommentStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-173">Istruzione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-173">The statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-174">Genera il codice per l'istruzione di commento specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-174">Generates code for the specified comment statement.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d1379-175">La proprietà <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> di <paramref name="e" /> non è impostata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-175">The <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> property of <paramref name="e" /> is not set.</span>
          </span>
        </exception>
        <altmember cref="T:System.CodeDom.CodeCommentStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCommentStatements">
      <MemberSignature Language="C#" Value="protected virtual void GenerateCommentStatements (System.CodeDom.CodeCommentStatementCollection e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateCommentStatements(class System.CodeDom.CodeCommentStatementCollection e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateCommentStatements (e As CodeCommentStatementCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateCommentStatements(System::CodeDom::CodeCommentStatementCollection ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCommentStatementCollection" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-176">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-176">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-177">Genera il codice per le istruzioni di commento specificate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-177">Generates code for the specified comment statements.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeCommentStatementCollection" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCompileUnit">
      <MemberSignature Language="C#" Value="protected virtual void GenerateCompileUnit (System.CodeDom.CodeCompileUnit e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateCompileUnit(class System.CodeDom.CodeCompileUnit e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateCompileUnit (e As CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateCompileUnit(System::CodeDom::CodeCompileUnit ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-178">Unità di compilazione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-178">The compile unit to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-179">Genera il codice per l'unità di compilazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-179">Generates code for the specified compile unit.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCompileUnitEnd">
      <MemberSignature Language="C#" Value="protected virtual void GenerateCompileUnitEnd (System.CodeDom.CodeCompileUnit e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateCompileUnitEnd(class System.CodeDom.CodeCompileUnit e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateCompileUnitEnd (e As CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateCompileUnitEnd(System::CodeDom::CodeCompileUnit ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-180">Unità di compilazione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-180">The compile unit to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-181">Genera il codice per la fine di un'unità di compilazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-181">Generates code for the end of a compile unit.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCompileUnitStart">
      <MemberSignature Language="C#" Value="protected virtual void GenerateCompileUnitStart (System.CodeDom.CodeCompileUnit e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateCompileUnitStart(class System.CodeDom.CodeCompileUnit e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateCompileUnitStart (e As CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateCompileUnitStart(System::CodeDom::CodeCompileUnit ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-182">Unità di compilazione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-182">The compile unit to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-183">Genera il codice per l'inizio di un'unità di compilazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-183">Generates code for the start of a compile unit.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
      </Docs>
    </Member>
    <Member MemberName="GenerateConditionStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateConditionStatement (System.CodeDom.CodeConditionStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateConditionStatement(class System.CodeDom.CodeConditionStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateConditionStatement (e As CodeConditionStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateConditionStatement(System::CodeDom::CodeConditionStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeConditionStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-184">Istruzione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-184">The statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-185">Genera il codice per l'istruzione condizionale specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-185">Generates code for the specified conditional statement.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1379-186">Nella maggior parte dei linguaggi, questo metodo genera il codice per un `if` istruzione.</span><span class="sxs-lookup"><span data-stu-id="d1379-186">For most languages, this method will generate code for an `if` statement.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeConditionStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateConstructor">
      <MemberSignature Language="C#" Value="protected abstract void GenerateConstructor (System.CodeDom.CodeConstructor e, System.CodeDom.CodeTypeDeclaration c);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateConstructor(class System.CodeDom.CodeConstructor e, class System.CodeDom.CodeTypeDeclaration c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateConstructor (e As CodeConstructor, c As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateConstructor(System::CodeDom::CodeConstructor ^ e, System::CodeDom::CodeTypeDeclaration ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeConstructor" />
        <Parameter Name="c" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-187">Costruttore per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-187">The constructor to generate code for.</span>
          </span>
        </param>
        <param name="c">
          <span data-ttu-id="d1379-188">Tipo dell'oggetto costruito da questo costruttore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-188">The type of the object that this constructor constructs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-189">Genera il codice per il costruttore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-189">Generates code for the specified constructor.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeConstructor" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GenerateDecimalValue">
      <MemberSignature Language="C#" Value="protected virtual void GenerateDecimalValue (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDecimalValue(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateDecimalValue (d As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateDecimalValue(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="d1379-190">Valore decimale per il quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-190">The decimal value to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-191">Genera il codice per il valore decimale specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-191">Generates code for the specified decimal value.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateDefaultValueExpression">
      <MemberSignature Language="C#" Value="protected virtual void GenerateDefaultValueExpression (System.CodeDom.CodeDefaultValueExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDefaultValueExpression(class System.CodeDom.CodeDefaultValueExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateDefaultValueExpression (e As CodeDefaultValueExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateDefaultValueExpression(System::CodeDom::CodeDefaultValueExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeDefaultValueExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-192">Riferimento per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-192">The reference to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-193">Genera il codice per il riferimento specificato a un valore predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-193">Generates code for the specified reference to a default value.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateDelegateCreateExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateDelegateCreateExpression (System.CodeDom.CodeDelegateCreateExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDelegateCreateExpression(class System.CodeDom.CodeDelegateCreateExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateDelegateCreateExpression (e As CodeDelegateCreateExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateDelegateCreateExpression(System::CodeDom::CodeDelegateCreateExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeDelegateCreateExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-194">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-194">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-195">Genera il codice per l'espressione specificata di creazione dei delegati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-195">Generates code for the specified delegate creation expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeDelegateCreateExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateDelegateInvokeExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateDelegateInvokeExpression (System.CodeDom.CodeDelegateInvokeExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDelegateInvokeExpression(class System.CodeDom.CodeDelegateInvokeExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateDelegateInvokeExpression (e As CodeDelegateInvokeExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateDelegateInvokeExpression(System::CodeDom::CodeDelegateInvokeExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeDelegateInvokeExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-196">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-196">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-197">Genera il codice per l'espressione specificata di chiamata del delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-197">Generates code for the specified delegate invoke expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeDelegateInvokeExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateDirectionExpression">
      <MemberSignature Language="C#" Value="protected virtual void GenerateDirectionExpression (System.CodeDom.CodeDirectionExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDirectionExpression(class System.CodeDom.CodeDirectionExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateDirectionExpression (e As CodeDirectionExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateDirectionExpression(System::CodeDom::CodeDirectionExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeDirectionExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-198">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-198">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-199">Genera il codice per l'espressione di direzione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-199">Generates code for the specified direction expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeDirectionExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateDirectives">
      <MemberSignature Language="C#" Value="protected virtual void GenerateDirectives (System.CodeDom.CodeDirectiveCollection directives);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDirectives(class System.CodeDom.CodeDirectiveCollection directives) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateDirectives (directives As CodeDirectiveCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateDirectives(System::CodeDom::CodeDirectiveCollection ^ directives);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directives" Type="System.CodeDom.CodeDirectiveCollection" />
      </Parameters>
      <Docs>
        <param name="directives">
          <span data-ttu-id="d1379-200">Direttive di codice per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-200">The code directives to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-201">Genera il codice per le direttive di codice specificate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-201">Generates code for the specified code directives.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateDoubleValue">
      <MemberSignature Language="C#" Value="protected virtual void GenerateDoubleValue (double d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateDoubleValue(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateDoubleValue (d As Double)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateDoubleValue(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="d1379-202">Valore per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-202">The value to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-203">Genera il codice per un numero in virgola mobile e precisione doppia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-203">Generates code for a double-precision floating point number.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateEntryPointMethod">
      <MemberSignature Language="C#" Value="protected abstract void GenerateEntryPointMethod (System.CodeDom.CodeEntryPointMethod e, System.CodeDom.CodeTypeDeclaration c);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateEntryPointMethod(class System.CodeDom.CodeEntryPointMethod e, class System.CodeDom.CodeTypeDeclaration c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateEntryPointMethod (e As CodeEntryPointMethod, c As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateEntryPointMethod(System::CodeDom::CodeEntryPointMethod ^ e, System::CodeDom::CodeTypeDeclaration ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeEntryPointMethod" />
        <Parameter Name="c" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-204">Punto di ingresso del codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-204">The entry point for the code.</span>
          </span>
        </param>
        <param name="c">
          <span data-ttu-id="d1379-205">Codice che dichiara il tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-205">The code that declares the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-206">Genera il codice per il metodo del punto di ingresso specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-206">Generates code for the specified entry point method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeEntryPointMethod" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GenerateEvent">
      <MemberSignature Language="C#" Value="protected abstract void GenerateEvent (System.CodeDom.CodeMemberEvent e, System.CodeDom.CodeTypeDeclaration c);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateEvent(class System.CodeDom.CodeMemberEvent e, class System.CodeDom.CodeTypeDeclaration c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateEvent (e As CodeMemberEvent, c As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateEvent(System::CodeDom::CodeMemberEvent ^ e, System::CodeDom::CodeTypeDeclaration ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMemberEvent" />
        <Parameter Name="c" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-207">Evento del membro per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-207">The member event to generate code for.</span>
          </span>
        </param>
        <param name="c">
          <span data-ttu-id="d1379-208">Tipo dell'oggetto in cui si verifica questo evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-208">The type of the object that this event occurs on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-209">Genera il codice per l'evento specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-209">Generates code for the specified event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMemberEvent" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GenerateEventReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateEventReferenceExpression (System.CodeDom.CodeEventReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateEventReferenceExpression(class System.CodeDom.CodeEventReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateEventReferenceExpression (e As CodeEventReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateEventReferenceExpression(System::CodeDom::CodeEventReferenceExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeEventReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-210">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-210">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-211">Genera il codice per l'espressione specificata di riferimento a un evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-211">Generates code for the specified event reference expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeEventReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateExpression">
      <MemberSignature Language="C#" Value="protected void GenerateExpression (System.CodeDom.CodeExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GenerateExpression(class System.CodeDom.CodeExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GenerateExpression (e As CodeExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GenerateExpression(System::CodeDom::CodeExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-212">Espressione di codice per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-212">The code expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-213">Genera il codice per l'espressione specificata di codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-213">Generates code for the specified code expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d1379-214">
            <paramref name="e" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-214">
              <paramref name="e" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d1379-215">
            <paramref name="e" /> non è un oggetto <see cref="T:System.CodeDom.CodeStatement" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-215">
              <paramref name="e" /> is not a valid <see cref="T:System.CodeDom.CodeStatement" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.CodeDom.CodeExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateExpressionStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateExpressionStatement (System.CodeDom.CodeExpressionStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateExpressionStatement(class System.CodeDom.CodeExpressionStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateExpressionStatement (e As CodeExpressionStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateExpressionStatement(System::CodeDom::CodeExpressionStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeExpressionStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-216">Istruzione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-216">The statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-217">Genera il codice per l'istruzione di espressione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-217">Generates code for the specified expression statement.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpressionStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateField">
      <MemberSignature Language="C#" Value="protected abstract void GenerateField (System.CodeDom.CodeMemberField e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateField(class System.CodeDom.CodeMemberField e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateField (e As CodeMemberField)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateField(System::CodeDom::CodeMemberField ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMemberField" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-218">Campo per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-218">The field to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-219">Genera il codice per il campo membro specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-219">Generates code for the specified member field.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMemberField" />
      </Docs>
    </Member>
    <Member MemberName="GenerateFieldReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateFieldReferenceExpression (System.CodeDom.CodeFieldReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateFieldReferenceExpression(class System.CodeDom.CodeFieldReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateFieldReferenceExpression (e As CodeFieldReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateFieldReferenceExpression(System::CodeDom::CodeFieldReferenceExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeFieldReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-220">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-220">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-221">Genera il codice per l'espressione specificata di riferimento a un campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-221">Generates code for the specified field reference expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeFieldReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateGotoStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateGotoStatement (System.CodeDom.CodeGotoStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateGotoStatement(class System.CodeDom.CodeGotoStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateGotoStatement (e As CodeGotoStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateGotoStatement(System::CodeDom::CodeGotoStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeGotoStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-222">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-222">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-223">Genera il codice per l'istruzione <see langword="goto" /> specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-223">Generates code for the specified <see langword="goto" /> statement.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeGotoStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateIndexerExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateIndexerExpression (System.CodeDom.CodeIndexerExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateIndexerExpression(class System.CodeDom.CodeIndexerExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateIndexerExpression (e As CodeIndexerExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateIndexerExpression(System::CodeDom::CodeIndexerExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeIndexerExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-224">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-224">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-225">Genera il codice per l'espressione specificata dell'indicizzatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-225">Generates code for the specified indexer expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeIndexerExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateIterationStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateIterationStatement (System.CodeDom.CodeIterationStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateIterationStatement(class System.CodeDom.CodeIterationStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateIterationStatement (e As CodeIterationStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateIterationStatement(System::CodeDom::CodeIterationStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeIterationStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-226">Istruzione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-226">The statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-227">Genera il codice per l'istruzione specificata di reiterazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-227">Generates code for the specified iteration statement.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1379-228">Nella maggior parte dei linguaggi, questo metodo genera il codice per un `for` ciclo o `while` ciclo.</span><span class="sxs-lookup"><span data-stu-id="d1379-228">For most languages, this method will generate code for a `for` loop or a `while` loop.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeIterationStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateLabeledStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateLabeledStatement (System.CodeDom.CodeLabeledStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateLabeledStatement(class System.CodeDom.CodeLabeledStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateLabeledStatement (e As CodeLabeledStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateLabeledStatement(System::CodeDom::CodeLabeledStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeLabeledStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-229">Istruzione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-229">The statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-230">Genera il codice per l'istruzione con etichetta specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-230">Generates code for the specified labeled statement.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeLabeledStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateLinePragmaEnd">
      <MemberSignature Language="C#" Value="protected abstract void GenerateLinePragmaEnd (System.CodeDom.CodeLinePragma e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateLinePragmaEnd(class System.CodeDom.CodeLinePragma e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateLinePragmaEnd (e As CodeLinePragma)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateLinePragmaEnd(System::CodeDom::CodeLinePragma ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeLinePragma" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-231">Pragma di fine della riga per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-231">The end of the line pragma to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-232">Genera il codice per la fine specificata del pragma di linea.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-232">Generates code for the specified line pragma end.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeLinePragma" />
      </Docs>
    </Member>
    <Member MemberName="GenerateLinePragmaStart">
      <MemberSignature Language="C#" Value="protected abstract void GenerateLinePragmaStart (System.CodeDom.CodeLinePragma e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateLinePragmaStart(class System.CodeDom.CodeLinePragma e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateLinePragmaStart (e As CodeLinePragma)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateLinePragmaStart(System::CodeDom::CodeLinePragma ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeLinePragma" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-233">Pragma di inizio della riga per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-233">The start of the line pragma to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-234">Genera il codice per l'inizio specificato del pragma di linea.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-234">Generates code for the specified line pragma start.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeLinePragma" />
      </Docs>
    </Member>
    <Member MemberName="GenerateMethod">
      <MemberSignature Language="C#" Value="protected abstract void GenerateMethod (System.CodeDom.CodeMemberMethod e, System.CodeDom.CodeTypeDeclaration c);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateMethod(class System.CodeDom.CodeMemberMethod e, class System.CodeDom.CodeTypeDeclaration c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateMethod (e As CodeMemberMethod, c As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateMethod(System::CodeDom::CodeMemberMethod ^ e, System::CodeDom::CodeTypeDeclaration ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMemberMethod" />
        <Parameter Name="c" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-235">Metodo del membro per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-235">The member method to generate code for.</span>
          </span>
        </param>
        <param name="c">
          <span data-ttu-id="d1379-236">Tipo dell'oggetto in cui si verifica questo metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-236">The type of the object that this method occurs on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-237">Genera il codice per il metodo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-237">Generates code for the specified method.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMemberMethod" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GenerateMethodInvokeExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateMethodInvokeExpression (System.CodeDom.CodeMethodInvokeExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateMethodInvokeExpression(class System.CodeDom.CodeMethodInvokeExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateMethodInvokeExpression (e As CodeMethodInvokeExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateMethodInvokeExpression(System::CodeDom::CodeMethodInvokeExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMethodInvokeExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-238">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-238">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-239">Genera il codice per l'espressione specificata di chiamata del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-239">Generates code for the specified method invoke expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMethodInvokeExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateMethodReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateMethodReferenceExpression (System.CodeDom.CodeMethodReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateMethodReferenceExpression(class System.CodeDom.CodeMethodReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateMethodReferenceExpression (e As CodeMethodReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateMethodReferenceExpression(System::CodeDom::CodeMethodReferenceExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMethodReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-240">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-240">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-241">Genera il codice per l'espressione specificata di riferimento a un metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-241">Generates code for the specified method reference expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMethodReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateMethodReturnStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateMethodReturnStatement (System.CodeDom.CodeMethodReturnStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateMethodReturnStatement(class System.CodeDom.CodeMethodReturnStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateMethodReturnStatement (e As CodeMethodReturnStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateMethodReturnStatement(System::CodeDom::CodeMethodReturnStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMethodReturnStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-242">Istruzione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-242">The statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-243">Genera il codice per l'istruzione return specificata relativa a un metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-243">Generates code for the specified method return statement.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMethodReturnStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateNamespace">
      <MemberSignature Language="C#" Value="protected virtual void GenerateNamespace (System.CodeDom.CodeNamespace e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateNamespace(class System.CodeDom.CodeNamespace e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateNamespace (e As CodeNamespace)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateNamespace(System::CodeDom::CodeNamespace ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespace" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-244">Spazio dei nomi per il quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-244">The namespace to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-245">Genera il codice per lo spazio dei nomi specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-245">Generates code for the specified namespace.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeNamespace" />
      </Docs>
    </Member>
    <Member MemberName="GenerateNamespaceEnd">
      <MemberSignature Language="C#" Value="protected abstract void GenerateNamespaceEnd (System.CodeDom.CodeNamespace e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateNamespaceEnd(class System.CodeDom.CodeNamespace e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateNamespaceEnd (e As CodeNamespace)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateNamespaceEnd(System::CodeDom::CodeNamespace ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespace" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-246">Spazio dei nomi per il quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-246">The namespace to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-247">Genera il codice per la fine di uno spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-247">Generates code for the end of a namespace.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeNamespace" />
      </Docs>
    </Member>
    <Member MemberName="GenerateNamespaceImport">
      <MemberSignature Language="C#" Value="protected abstract void GenerateNamespaceImport (System.CodeDom.CodeNamespaceImport e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateNamespaceImport(class System.CodeDom.CodeNamespaceImport e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateNamespaceImport (e As CodeNamespaceImport)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateNamespaceImport(System::CodeDom::CodeNamespaceImport ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespaceImport" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-248">Importazione dello spazio dei nomi per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-248">The namespace import to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-249">Genera il codice per l'importazione dello spazio dei nomi specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-249">Generates code for the specified namespace import.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeNamespaceImport" />
      </Docs>
    </Member>
    <Member MemberName="GenerateNamespaceImports">
      <MemberSignature Language="C#" Value="protected void GenerateNamespaceImports (System.CodeDom.CodeNamespace e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GenerateNamespaceImports(class System.CodeDom.CodeNamespace e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GenerateNamespaceImports (e As CodeNamespace)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GenerateNamespaceImports(System::CodeDom::CodeNamespace ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespace" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-250">Importazione dello spazio dei nomi per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-250">The namespace import to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-251">Genera il codice per l'importazione dello spazio dei nomi specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-251">Generates code for the specified namespace import.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeNamespace" />
      </Docs>
    </Member>
    <Member MemberName="GenerateNamespaces">
      <MemberSignature Language="C#" Value="protected void GenerateNamespaces (System.CodeDom.CodeCompileUnit e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GenerateNamespaces(class System.CodeDom.CodeCompileUnit e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GenerateNamespaces (e As CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GenerateNamespaces(System::CodeDom::CodeCompileUnit ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-252">Unità di compilazione per cui generare lo spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-252">The compile unit to generate namespaces for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-253">Genera il codice per gli spazi dei nomi dell'unità di compilazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-253">Generates code for the namespaces in the specified compile unit.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
      </Docs>
    </Member>
    <Member MemberName="GenerateNamespaceStart">
      <MemberSignature Language="C#" Value="protected abstract void GenerateNamespaceStart (System.CodeDom.CodeNamespace e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateNamespaceStart(class System.CodeDom.CodeNamespace e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateNamespaceStart (e As CodeNamespace)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateNamespaceStart(System::CodeDom::CodeNamespace ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespace" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-254">Spazio dei nomi per il quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-254">The namespace to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-255">Genera il codice per l'inizio di uno spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-255">Generates code for the start of a namespace.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeNamespace" />
      </Docs>
    </Member>
    <Member MemberName="GenerateObjectCreateExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateObjectCreateExpression (System.CodeDom.CodeObjectCreateExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateObjectCreateExpression(class System.CodeDom.CodeObjectCreateExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateObjectCreateExpression (e As CodeObjectCreateExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateObjectCreateExpression(System::CodeDom::CodeObjectCreateExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeObjectCreateExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-256">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-256">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-257">Genera il codice per l'espressione specificata di creazione di oggetti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-257">Generates code for the specified object creation expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeObjectCreateExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateParameterDeclarationExpression">
      <MemberSignature Language="C#" Value="protected virtual void GenerateParameterDeclarationExpression (System.CodeDom.CodeParameterDeclarationExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateParameterDeclarationExpression(class System.CodeDom.CodeParameterDeclarationExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateParameterDeclarationExpression (e As CodeParameterDeclarationExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateParameterDeclarationExpression(System::CodeDom::CodeParameterDeclarationExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeParameterDeclarationExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-258">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-258">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-259">Genera il codice per l'espressione specificata di dichiarazione di parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-259">Generates code for the specified parameter declaration expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeParameterDeclarationExpression" />
      </Docs>
    </Member>
    <Member MemberName="GeneratePrimitiveExpression">
      <MemberSignature Language="C#" Value="protected virtual void GeneratePrimitiveExpression (System.CodeDom.CodePrimitiveExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GeneratePrimitiveExpression(class System.CodeDom.CodePrimitiveExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GeneratePrimitiveExpression (e As CodePrimitiveExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GeneratePrimitiveExpression(System::CodeDom::CodePrimitiveExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodePrimitiveExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-260">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-260">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-261">Genera il codice per l'espressione primaria specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-261">Generates code for the specified primitive expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d1379-262">
            <paramref name="e" /> utilizza un tipo di dati non valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-262">
              <paramref name="e" /> uses an invalid data type.</span>
          </span>
          <span data-ttu-id="d1379-263">Solo i seguenti tipi di dati sono validi:</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-263">Only the following data types are valid:</span>
          </span>  
  
-   <span data-ttu-id="d1379-264">stringa</span><span class="sxs-lookup"><span data-stu-id="d1379-264">string</span></span>  
  
-   <span data-ttu-id="d1379-265">char</span><span class="sxs-lookup"><span data-stu-id="d1379-265">char</span></span>  
  
-   <span data-ttu-id="d1379-266">byte</span><span class="sxs-lookup"><span data-stu-id="d1379-266">byte</span></span>  
  
-   <span data-ttu-id="d1379-267">Int16</span><span class="sxs-lookup"><span data-stu-id="d1379-267">Int16</span></span>  
  
-   <span data-ttu-id="d1379-268">Int32</span><span class="sxs-lookup"><span data-stu-id="d1379-268">Int32</span></span>  
  
-   <span data-ttu-id="d1379-269">Int64</span><span class="sxs-lookup"><span data-stu-id="d1379-269">Int64</span></span>  
  
-   <span data-ttu-id="d1379-270">Single</span><span class="sxs-lookup"><span data-stu-id="d1379-270">Single</span></span>  
  
-   <span data-ttu-id="d1379-271">Double</span><span class="sxs-lookup"><span data-stu-id="d1379-271">Double</span></span>  
  
-   <span data-ttu-id="d1379-272">Decimale</span><span class="sxs-lookup"><span data-stu-id="d1379-272">Decimal</span></span></exception>
        <altmember cref="T:System.CodeDom.CodePrimitiveExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateProperty">
      <MemberSignature Language="C#" Value="protected abstract void GenerateProperty (System.CodeDom.CodeMemberProperty e, System.CodeDom.CodeTypeDeclaration c);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateProperty(class System.CodeDom.CodeMemberProperty e, class System.CodeDom.CodeTypeDeclaration c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateProperty (e As CodeMemberProperty, c As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateProperty(System::CodeDom::CodeMemberProperty ^ e, System::CodeDom::CodeTypeDeclaration ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeMemberProperty" />
        <Parameter Name="c" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-273">Proprietà per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-273">The property to generate code for.</span>
          </span>
        </param>
        <param name="c">
          <span data-ttu-id="d1379-274">Tipo dell'oggetto in cui si verifica questa proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-274">The type of the object that this property occurs on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-275">Genera il codice per la proprietà specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-275">Generates code for the specified property.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeMemberProperty" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GeneratePropertyReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GeneratePropertyReferenceExpression (System.CodeDom.CodePropertyReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GeneratePropertyReferenceExpression(class System.CodeDom.CodePropertyReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GeneratePropertyReferenceExpression (e As CodePropertyReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GeneratePropertyReferenceExpression(System::CodeDom::CodePropertyReferenceExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodePropertyReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-276">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-276">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-277">Genera il codice per l'espressione specificata di riferimento a una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-277">Generates code for the specified property reference expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodePropertyReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GeneratePropertySetValueReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GeneratePropertySetValueReferenceExpression (System.CodeDom.CodePropertySetValueReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GeneratePropertySetValueReferenceExpression(class System.CodeDom.CodePropertySetValueReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GeneratePropertySetValueReferenceExpression (e As CodePropertySetValueReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GeneratePropertySetValueReferenceExpression(System::CodeDom::CodePropertySetValueReferenceExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodePropertySetValueReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-278">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-278">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-279">Genera il codice per l'espressione specificata di riferimento a un valore di un insieme di proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-279">Generates code for the specified property set value reference expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateRemoveEventStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateRemoveEventStatement (System.CodeDom.CodeRemoveEventStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateRemoveEventStatement(class System.CodeDom.CodeRemoveEventStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateRemoveEventStatement (e As CodeRemoveEventStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateRemoveEventStatement(System::CodeDom::CodeRemoveEventStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeRemoveEventStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-280">Istruzione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-280">The statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-281">Genera il codice per l'istruzione specificata relativa all'evento di rimozione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-281">Generates code for the specified remove event statement.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeRemoveEventStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateSingleFloatValue">
      <MemberSignature Language="C#" Value="protected virtual void GenerateSingleFloatValue (float s);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateSingleFloatValue(float32 s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateSingleFloatValue (s As Single)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateSingleFloatValue(float s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="d1379-282">Valore per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-282">The value to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-283">Genera il codice per un numero in virgola mobile e precisione singola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-283">Generates code for a single-precision floating point number.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateSnippetCompileUnit">
      <MemberSignature Language="C#" Value="protected virtual void GenerateSnippetCompileUnit (System.CodeDom.CodeSnippetCompileUnit e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateSnippetCompileUnit(class System.CodeDom.CodeSnippetCompileUnit e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateSnippetCompileUnit (e As CodeSnippetCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateSnippetCompileUnit(System::CodeDom::CodeSnippetCompileUnit ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeSnippetCompileUnit" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-284">Unità di compilazione del frammento di codice letterale per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-284">The literal code fragment compile unit to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-285">Restituisce il codice dell'unità di compilazione specificata del frammento di codice letterale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-285">Outputs the code of the specified literal code fragment compile unit.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeSnippetCompileUnit" />
      </Docs>
    </Member>
    <Member MemberName="GenerateSnippetExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateSnippetExpression (System.CodeDom.CodeSnippetExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateSnippetExpression(class System.CodeDom.CodeSnippetExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateSnippetExpression (e As CodeSnippetExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateSnippetExpression(System::CodeDom::CodeSnippetExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeSnippetExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-286">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-286">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-287">Restituisce il codice dell'espressione specificata del frammento di codice letterale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-287">Outputs the code of the specified literal code fragment expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeSnippetExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateSnippetMember">
      <MemberSignature Language="C#" Value="protected abstract void GenerateSnippetMember (System.CodeDom.CodeSnippetTypeMember e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateSnippetMember(class System.CodeDom.CodeSnippetTypeMember e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateSnippetMember (e As CodeSnippetTypeMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateSnippetMember(System::CodeDom::CodeSnippetTypeMember ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeSnippetTypeMember" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-288">Membro per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-288">The member to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-289">Restituisce il codice del membro di classe specificato del frammento di codice letterale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-289">Outputs the code of the specified literal code fragment class member.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeSnippetTypeMember" />
      </Docs>
    </Member>
    <Member MemberName="GenerateSnippetStatement">
      <MemberSignature Language="C#" Value="protected virtual void GenerateSnippetStatement (System.CodeDom.CodeSnippetStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateSnippetStatement(class System.CodeDom.CodeSnippetStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateSnippetStatement (e As CodeSnippetStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateSnippetStatement(System::CodeDom::CodeSnippetStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeSnippetStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-290">Istruzione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-290">The statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-291">Restituisce il codice dell'istruzione specificata del frammento di codice letterale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-291">Outputs the code of the specified literal code fragment statement.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeSnippetStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateStatement">
      <MemberSignature Language="C#" Value="protected void GenerateStatement (System.CodeDom.CodeStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GenerateStatement(class System.CodeDom.CodeStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GenerateStatement (e As CodeStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GenerateStatement(System::CodeDom::CodeStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-292">Istruzione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-292">The statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-293">Genera il codice per l'istruzione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-293">Generates code for the specified statement.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d1379-294">
            <paramref name="e" /> non è un oggetto <see cref="T:System.CodeDom.CodeStatement" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-294">
              <paramref name="e" /> is not a valid <see cref="T:System.CodeDom.CodeStatement" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.CodeDom.CodeStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateStatements">
      <MemberSignature Language="C#" Value="protected void GenerateStatements (System.CodeDom.CodeStatementCollection stms);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GenerateStatements(class System.CodeDom.CodeStatementCollection stms) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GenerateStatements (stms As CodeStatementCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GenerateStatements(System::CodeDom::CodeStatementCollection ^ stms);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stms" Type="System.CodeDom.CodeStatementCollection" />
      </Parameters>
      <Docs>
        <param name="stms">
          <span data-ttu-id="d1379-295">Istruzioni per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-295">The statements to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-296">Genera il codice per l'insieme di istruzioni specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-296">Generates code for the specified statement collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeStatementCollection" />
      </Docs>
    </Member>
    <Member MemberName="GenerateThisReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateThisReferenceExpression (System.CodeDom.CodeThisReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateThisReferenceExpression(class System.CodeDom.CodeThisReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateThisReferenceExpression (e As CodeThisReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateThisReferenceExpression(System::CodeDom::CodeThisReferenceExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeThisReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-297">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-297">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-298">Genera il codice per l'espressione specificata del riferimento this.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-298">Generates code for the specified this reference expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeThisReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateThrowExceptionStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateThrowExceptionStatement (System.CodeDom.CodeThrowExceptionStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateThrowExceptionStatement(class System.CodeDom.CodeThrowExceptionStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateThrowExceptionStatement (e As CodeThrowExceptionStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateThrowExceptionStatement(System::CodeDom::CodeThrowExceptionStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeThrowExceptionStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-299">Istruzione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-299">The statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-300">Genera il codice per l'istruzione specificata di generazione di un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-300">Generates code for the specified throw exception statement.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeThrowExceptionStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTryCatchFinallyStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateTryCatchFinallyStatement (System.CodeDom.CodeTryCatchFinallyStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTryCatchFinallyStatement(class System.CodeDom.CodeTryCatchFinallyStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateTryCatchFinallyStatement (e As CodeTryCatchFinallyStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateTryCatchFinallyStatement(System::CodeDom::CodeTryCatchFinallyStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTryCatchFinallyStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-301">Istruzione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-301">The statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-302">Genera il codice per l'istruzione <see langword="try...catch...finally" /> specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-302">Generates code for the specified <see langword="try...catch...finally" /> statement.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypeConstructor">
      <MemberSignature Language="C#" Value="protected abstract void GenerateTypeConstructor (System.CodeDom.CodeTypeConstructor e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTypeConstructor(class System.CodeDom.CodeTypeConstructor e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateTypeConstructor (e As CodeTypeConstructor)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateTypeConstructor(System::CodeDom::CodeTypeConstructor ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTypeConstructor" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-303">Costruttore della classe per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-303">The class constructor to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-304">Genera il codice per il costruttore specificato della classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-304">Generates code for the specified class constructor.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeConstructor" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypeEnd">
      <MemberSignature Language="C#" Value="protected abstract void GenerateTypeEnd (System.CodeDom.CodeTypeDeclaration e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTypeEnd(class System.CodeDom.CodeTypeDeclaration e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateTypeEnd (e As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateTypeEnd(System::CodeDom::CodeTypeDeclaration ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-305">Fine della classe per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-305">The end of the class to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-306">Genera il codice per la fine della classe specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-306">Generates code for the specified end of the class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypeOfExpression">
      <MemberSignature Language="C#" Value="protected virtual void GenerateTypeOfExpression (System.CodeDom.CodeTypeOfExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTypeOfExpression(class System.CodeDom.CodeTypeOfExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateTypeOfExpression (e As CodeTypeOfExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateTypeOfExpression(System::CodeDom::CodeTypeOfExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTypeOfExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-307">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-307">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-308">Genera il codice per il tipo di espressione specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-308">Generates code for the specified type of expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeOfExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypeReferenceExpression">
      <MemberSignature Language="C#" Value="protected virtual void GenerateTypeReferenceExpression (System.CodeDom.CodeTypeReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTypeReferenceExpression(class System.CodeDom.CodeTypeReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GenerateTypeReferenceExpression (e As CodeTypeReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GenerateTypeReferenceExpression(System::CodeDom::CodeTypeReferenceExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTypeReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-309">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-309">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-310">Genera il codice per l'espressione specificata di riferimento al tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-310">Generates code for the specified type reference expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypes">
      <MemberSignature Language="C#" Value="protected void GenerateTypes (System.CodeDom.CodeNamespace e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GenerateTypes(class System.CodeDom.CodeNamespace e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GenerateTypes (e As CodeNamespace)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GenerateTypes(System::CodeDom::CodeNamespace ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespace" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-311">Spazio dei nomi per cui generare le classi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-311">The namespace to generate classes for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-312">Genera il codice per lo spazio dei nomi specificato e per le classi che questo contiene.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-312">Generates code for the specified namespace and the classes it contains.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeNamespace" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypeStart">
      <MemberSignature Language="C#" Value="protected abstract void GenerateTypeStart (System.CodeDom.CodeTypeDeclaration e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateTypeStart(class System.CodeDom.CodeTypeDeclaration e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateTypeStart (e As CodeTypeDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateTypeStart(System::CodeDom::CodeTypeDeclaration ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-313">Inizio della classe per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-313">The start of the class to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-314">Genera il codice per l'inizio della classe specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-314">Generates code for the specified start of the class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="GenerateVariableDeclarationStatement">
      <MemberSignature Language="C#" Value="protected abstract void GenerateVariableDeclarationStatement (System.CodeDom.CodeVariableDeclarationStatement e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateVariableDeclarationStatement(class System.CodeDom.CodeVariableDeclarationStatement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateVariableDeclarationStatement (e As CodeVariableDeclarationStatement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateVariableDeclarationStatement(System::CodeDom::CodeVariableDeclarationStatement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeVariableDeclarationStatement" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-315">Istruzione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-315">The statement to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-316">Genera il codice per l'istruzione specificata di dichiarazione delle variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-316">Generates code for the specified variable declaration statement.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeVariableDeclarationStatement" />
      </Docs>
    </Member>
    <Member MemberName="GenerateVariableReferenceExpression">
      <MemberSignature Language="C#" Value="protected abstract void GenerateVariableReferenceExpression (System.CodeDom.CodeVariableReferenceExpression e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GenerateVariableReferenceExpression(class System.CodeDom.CodeVariableReferenceExpression e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub GenerateVariableReferenceExpression (e As CodeVariableReferenceExpression)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void GenerateVariableReferenceExpression(System::CodeDom::CodeVariableReferenceExpression ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeVariableReferenceExpression" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-317">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-317">The expression to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-318">Genera il codice per l'espressione specificata di riferimento a una variabile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-318">Generates code for the specified variable reference expression.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeVariableReferenceExpression" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeOutput">
      <MemberSignature Language="C#" Value="protected abstract string GetTypeOutput (System.CodeDom.CodeTypeReference value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetTypeOutput(class System.CodeDom.CodeTypeReference value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetTypeOutput (value As CodeTypeReference) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ GetTypeOutput(System::CodeDom::CodeTypeReference ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.CodeDom.CodeTypeReference" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d1379-319">Tipo di cui verrà restituito il nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-319">The type whose name will be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-320">Ottiene il nome del tipo di dati specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-320">Gets the name of the specified data type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d1379-321">Nome del riferimento al tipo di dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-321">The name of the data type reference.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReference" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="protected int Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indent" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.Indent" />
      <MemberSignature Language="VB.NET" Value="Protected Property Indent As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int Indent { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-322">Ottiene o imposta il numero di spazi per ciascun livello di rientro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-322">Gets or sets the amount of spaces to indent each indentation level.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d1379-323">Numero di spazi per ciascun livello di rientro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-323">The number of spaces to indent for each indentation level.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1379-324">Segmenti di codice vengono rientrate comunemente per semplificarne il riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="d1379-324">Segments of code are commonly indented for ease of recognition.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentClass">
      <MemberSignature Language="C#" Value="protected bool IsCurrentClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsCurrentClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsCurrentClass { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-325">Ottiene un valore che indica se l'oggetto corrente da generare è una classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-325">Gets a value indicating whether the current object being generated is a class.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d1379-326">
            <see langword="true" /> se l'oggetto corrente è una classe, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-326">
              <see langword="true" /> if the current object is a class; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentDelegate">
      <MemberSignature Language="C#" Value="protected bool IsCurrentDelegate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentDelegate" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsCurrentDelegate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsCurrentDelegate { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-327">Ottiene un valore che indica se l'oggetto corrente da generare è un delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-327">Gets a value indicating whether the current object being generated is a delegate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d1379-328">
            <see langword="true" /> se l'oggetto corrente è un delegato, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-328">
              <see langword="true" /> if the current object is a delegate; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentEnum">
      <MemberSignature Language="C#" Value="protected bool IsCurrentEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentEnum" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsCurrentEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsCurrentEnum { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-329">Ottiene un valore che indica se l'oggetto corrente da generare è un'enumerazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-329">Gets a value indicating whether the current object being generated is an enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d1379-330">
            <see langword="true" /> se l'oggetto corrente è un'enumerazione, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-330">
              <see langword="true" /> if the current object is an enumeration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentInterface">
      <MemberSignature Language="C#" Value="protected bool IsCurrentInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentInterface" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsCurrentInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsCurrentInterface { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-331">Ottiene un valore che indica se l'oggetto corrente da generare è un'interfaccia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-331">Gets a value indicating whether the current object being generated is an interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d1379-332">
            <see langword="true" /> se l'oggetto corrente è un'interfaccia, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-332">
              <see langword="true" /> if the current object is an interface; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCurrentStruct">
      <MemberSignature Language="C#" Value="protected bool IsCurrentStruct { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrentStruct" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsCurrentStruct As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsCurrentStruct { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-333">Ottiene un valore che indica se l'oggetto corrente da generare è un tipo valore o una struttura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-333">Gets a value indicating whether the current object being generated is a value type or struct.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d1379-334">
            <see langword="true" /> se l'oggetto corrente è un tipo valore o una struttura, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-334">
              <see langword="true" /> if the current object is a value type or struct; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="protected abstract bool IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsValidIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsValidIdentifier(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d1379-335">Il valore di cui verificare l'assenza di conflitti con identificatori validi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-335">The value to test for conflicts with valid identifiers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-336">Ottiene un valore che indica se il valore specificato è un identificatore valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-336">Gets a value indicating whether the specified value is a valid identifier.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d1379-337">
            <see langword="true" /> se il valore è un identificatore valido, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-337">
              <see langword="true" /> if the value is a valid identifier; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidLanguageIndependentIdentifier">
      <MemberSignature Language="C#" Value="public static bool IsValidLanguageIndependentIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidLanguageIndependentIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValidLanguageIndependentIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValidLanguageIndependentIdentifier(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d1379-338">Stringa di cui deve essere eseguito il test della validità.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-338">The string to test for validity.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-339">Ottiene un valore che indica se la stringa specificata è un identificatore valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-339">Gets a value indicating whether the specified string is a valid identifier.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d1379-340">
            <see langword="true" /> se la stringa specificata è un identificatore valido, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-340">
              <see langword="true" /> if the specified string is a valid identifier; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1379-341">Questo metodo controlla la stringa specificata per verificare che non contiene alcuni caratteri che possono essere usati per un campo dell'identificatore di escape.</span><span class="sxs-lookup"><span data-stu-id="d1379-341">This method checks the specified string to ensure that it does not contain certain characters that can be used to escape an identifier field.</span></span> <span data-ttu-id="d1379-342">Il <xref:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers%2A> chiama questo metodo per eseguire la convalida delle stringhe.</span><span class="sxs-lookup"><span data-stu-id="d1379-342">The <xref:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers%2A> method calls this method to perform string validation.</span></span> <span data-ttu-id="d1379-343">La chiamata di <xref:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers%2A> metodo e passando un <xref:System.CodeDom.CodeCompileUnit> prima della generazione del codice può evitare l'uso di determinate sequenze di caratteri per includere codice nascosto all'interno di un campo dell'identificatore.</span><span class="sxs-lookup"><span data-stu-id="d1379-343">Calling the <xref:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers%2A> method and passing a <xref:System.CodeDom.CodeCompileUnit> before generating code from it can prevent the use of certain character sequences to include hidden code within an identifier field.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="d1379-344">per l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-344">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d1379-345">Impossibile usare questo membro in codice parzialmente attendibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-345">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)" />
      </Docs>
    </Member>
    <Member MemberName="NullToken">
      <MemberSignature Language="C#" Value="protected abstract string NullToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NullToken" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.NullToken" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride ReadOnly Property NullToken As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract property System::String ^ NullToken { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-346">Ottiene il token che rappresenta <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-346">Gets the token that represents <see langword="null" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d1379-347">Token che rappresenta <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-347">The token that represents <see langword="null" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="protected System.CodeDom.Compiler.CodeGeneratorOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.CodeGeneratorOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.Options" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Options As CodeGeneratorOptions" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::CodeDom::Compiler::CodeGeneratorOptions ^ Options { System::CodeDom::Compiler::CodeGeneratorOptions ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeGeneratorOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-348">Ottiene le opzioni che verranno utilizzate dal generatore di codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-348">Gets the options to be used by the code generator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d1379-349">Oggetto che indica le opzioni che verranno utilizzate dal generatore di codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-349">An object that indicates the options for the code generator to use.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Output">
      <MemberSignature Language="C#" Value="protected System.IO.TextWriter Output { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter Output" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeGenerator.Output" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Output As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::IO::TextWriter ^ Output { System::IO::TextWriter ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-350">Ottiene il writer di testo da utilizzare per l'output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-350">Gets the text writer to use for output.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d1379-351">Writer di testo da utilizzare per l'output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-351">The text writer to use for output.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="OutputAttributeArgument">
      <MemberSignature Language="C#" Value="protected virtual void OutputAttributeArgument (System.CodeDom.CodeAttributeArgument arg);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputAttributeArgument(class System.CodeDom.CodeAttributeArgument arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputAttributeArgument (arg As CodeAttributeArgument)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputAttributeArgument(System::CodeDom::CodeAttributeArgument ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg" Type="System.CodeDom.CodeAttributeArgument" />
      </Parameters>
      <Docs>
        <param name="arg">
          <span data-ttu-id="d1379-352">Argomento dell'attributo per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-352">The attribute argument to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-353">Restituisce un argomento in un blocco di attributi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-353">Outputs an argument in an attribute block.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeAttributeArgument" />
      </Docs>
    </Member>
    <Member MemberName="OutputAttributeDeclarations">
      <MemberSignature Language="C#" Value="protected virtual void OutputAttributeDeclarations (System.CodeDom.CodeAttributeDeclarationCollection attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputAttributeDeclarations(class System.CodeDom.CodeAttributeDeclarationCollection attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputAttributeDeclarations (attributes As CodeAttributeDeclarationCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputAttributeDeclarations(System::CodeDom::CodeAttributeDeclarationCollection ^ attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.CodeDom.CodeAttributeDeclarationCollection" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="d1379-354">Attributi per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-354">The attributes to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-355">Genera il codice per l'insieme specificato di dichiarazioni di attributo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-355">Generates code for the specified attribute declaration collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />
      </Docs>
    </Member>
    <Member MemberName="OutputDirection">
      <MemberSignature Language="C#" Value="protected virtual void OutputDirection (System.CodeDom.FieldDirection dir);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputDirection(valuetype System.CodeDom.FieldDirection dir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputDirection (dir As FieldDirection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputDirection(System::CodeDom::FieldDirection dir);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="System.CodeDom.FieldDirection" />
      </Parameters>
      <Docs>
        <param name="dir">
          <span data-ttu-id="d1379-356">Uno dei valori di enumerazione che indica l'attributo del campo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-356">One of the enumeration values that indicates the attribute of the field.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-357">Genera il codice per l'oggetto <see cref="T:System.CodeDom.FieldDirection" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-357">Generates code for the specified <see cref="T:System.CodeDom.FieldDirection" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.FieldDirection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OutputExpressionList">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d1379-358">Genera il codice per l'elenco di espressioni specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-358">Generates code for the specified expression list.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OutputExpressionList">
      <MemberSignature Language="C#" Value="protected virtual void OutputExpressionList (System.CodeDom.CodeExpressionCollection expressions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputExpressionList(class System.CodeDom.CodeExpressionCollection expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputExpressionList (expressions As CodeExpressionCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputExpressionList(System::CodeDom::CodeExpressionCollection ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.CodeDom.CodeExpressionCollection" />
      </Parameters>
      <Docs>
        <param name="expressions">
          <span data-ttu-id="d1379-359">Espressioni per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-359">The expressions to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-360">Genera il codice per l'elenco di espressioni specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-360">Generates code for the specified expression list.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpressionCollection" />
      </Docs>
    </Member>
    <Member MemberName="OutputExpressionList">
      <MemberSignature Language="C#" Value="protected virtual void OutputExpressionList (System.CodeDom.CodeExpressionCollection expressions, bool newlineBetweenItems);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputExpressionList(class System.CodeDom.CodeExpressionCollection expressions, bool newlineBetweenItems) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputExpressionList (expressions As CodeExpressionCollection, newlineBetweenItems As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputExpressionList(System::CodeDom::CodeExpressionCollection ^ expressions, bool newlineBetweenItems);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.CodeDom.CodeExpressionCollection" />
        <Parameter Name="newlineBetweenItems" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="expressions">
          <span data-ttu-id="d1379-361">Espressioni per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-361">The expressions to generate code for.</span>
          </span>
        </param>
        <param name="newlineBetweenItems">
          <span data-ttu-id="d1379-362">
            <see langword="true" /> per inserire una nuova riga dopo ciascun elemento, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-362">
              <see langword="true" /> to insert a new line after each item; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-363">Genera il codice per l'elenco di espressioni specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-363">Generates code for the specified expression list.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeExpressionCollection" />
      </Docs>
    </Member>
    <Member MemberName="OutputFieldScopeModifier">
      <MemberSignature Language="C#" Value="protected virtual void OutputFieldScopeModifier (System.CodeDom.MemberAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputFieldScopeModifier(valuetype System.CodeDom.MemberAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputFieldScopeModifier (attributes As MemberAttributes)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputFieldScopeModifier(System::CodeDom::MemberAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.CodeDom.MemberAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="d1379-364">Uno dei valori di enumerazione che specifica gli attributi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-364">One of the enumeration values that specifies the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-365">Restituisce un modificatore di ambito del campo corrispondente agli attributi specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-365">Outputs a field scope modifier that corresponds to the specified attributes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.MemberAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OutputIdentifier">
      <MemberSignature Language="C#" Value="protected virtual void OutputIdentifier (string ident);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputIdentifier(string ident) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputIdentifier (ident As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputIdentifier(System::String ^ ident);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ident" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ident">
          <span data-ttu-id="d1379-366">Identificatore che deve essere restituito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-366">The identifier to output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-367">Restituisce l'identificatore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-367">Outputs the specified identifier.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMemberAccessModifier">
      <MemberSignature Language="C#" Value="protected virtual void OutputMemberAccessModifier (System.CodeDom.MemberAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputMemberAccessModifier(valuetype System.CodeDom.MemberAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputMemberAccessModifier (attributes As MemberAttributes)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputMemberAccessModifier(System::CodeDom::MemberAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.CodeDom.MemberAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="d1379-368">Uno dei valori di enumerazione che indica il modificatore di accesso del membro per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-368">One of the enumeration values that indicates the member access modifier to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-369">Genera il codice per il modificatore specificato di accesso del membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-369">Generates code for the specified member access modifier.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.MemberAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OutputMemberScopeModifier">
      <MemberSignature Language="C#" Value="protected virtual void OutputMemberScopeModifier (System.CodeDom.MemberAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputMemberScopeModifier(valuetype System.CodeDom.MemberAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputMemberScopeModifier (attributes As MemberAttributes)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputMemberScopeModifier(System::CodeDom::MemberAttributes attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.CodeDom.MemberAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="d1379-370">Uno dei valori di enumerazione che indica il modificatore di ambito del membro per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-370">One of the enumeration values that indicates the member scope modifier to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-371">Genera il codice per il modificatore specificato di ambito del membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-371">Generates code for the specified member scope modifier.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.MemberAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OutputOperator">
      <MemberSignature Language="C#" Value="protected virtual void OutputOperator (System.CodeDom.CodeBinaryOperatorType op);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputOperator(valuetype System.CodeDom.CodeBinaryOperatorType op) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputOperator (op As CodeBinaryOperatorType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputOperator(System::CodeDom::CodeBinaryOperatorType op);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="op" Type="System.CodeDom.CodeBinaryOperatorType" />
      </Parameters>
      <Docs>
        <param name="op">
          <span data-ttu-id="d1379-372">Operatore per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-372">The operator to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-373">Genera il codice per l'operatore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-373">Generates code for the specified operator.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeBinaryOperatorType" />
      </Docs>
    </Member>
    <Member MemberName="OutputParameters">
      <MemberSignature Language="C#" Value="protected virtual void OutputParameters (System.CodeDom.CodeParameterDeclarationExpressionCollection parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputParameters(class System.CodeDom.CodeParameterDeclarationExpressionCollection parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputParameters (parameters As CodeParameterDeclarationExpressionCollection)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputParameters(System::CodeDom::CodeParameterDeclarationExpressionCollection ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.CodeDom.CodeParameterDeclarationExpressionCollection" />
      </Parameters>
      <Docs>
        <param name="parameters">
          <span data-ttu-id="d1379-374">Espressioni di dichiarazione di parametro per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-374">The parameter declaration expressions to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-375">Genera il codice per i parametri specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-375">Generates code for the specified parameters.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />
      </Docs>
    </Member>
    <Member MemberName="OutputType">
      <MemberSignature Language="C#" Value="protected abstract void OutputType (System.CodeDom.CodeTypeReference typeRef);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputType(class System.CodeDom.CodeTypeReference typeRef) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub OutputType (typeRef As CodeTypeReference)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void OutputType(System::CodeDom::CodeTypeReference ^ typeRef);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeRef" Type="System.CodeDom.CodeTypeReference" />
      </Parameters>
      <Docs>
        <param name="typeRef">
          <span data-ttu-id="d1379-376">Tipo per il quale generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-376">The type to generate code for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-377">Genera il codice per il tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-377">Generates code for the specified type.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputTypeAttributes">
      <MemberSignature Language="C#" Value="protected virtual void OutputTypeAttributes (System.Reflection.TypeAttributes attributes, bool isStruct, bool isEnum);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTypeAttributes(valuetype System.Reflection.TypeAttributes attributes, bool isStruct, bool isEnum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTypeAttributes (attributes As TypeAttributes, isStruct As Boolean, isEnum As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTypeAttributes(System::Reflection::TypeAttributes attributes, bool isStruct, bool isEnum);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="System.Reflection.TypeAttributes" />
        <Parameter Name="isStruct" Type="System.Boolean" />
        <Parameter Name="isEnum" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributes">
          <span data-ttu-id="d1379-378">Uno dei valori di enumerazione che indica gli attributi di tipo per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-378">One of the enumeration values that indicates the type attributes to generate code for.</span>
          </span>
        </param>
        <param name="isStruct">
          <span data-ttu-id="d1379-379">
            <see langword="true" /> se il tipo corrisponde a una struttura, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-379">
              <see langword="true" /> if the type is a struct; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="isEnum">
          <span data-ttu-id="d1379-380">
            <see langword="true" /> se il tipo corrisponde a un'enumerazione, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-380">
              <see langword="true" /> if the type is an enum; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-381">Genera il codice per gli attributi di tipo specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-381">Generates code for the specified type attributes.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OutputTypeNamePair">
      <MemberSignature Language="C#" Value="protected virtual void OutputTypeNamePair (System.CodeDom.CodeTypeReference typeRef, string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputTypeNamePair(class System.CodeDom.CodeTypeReference typeRef, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputTypeNamePair (typeRef As CodeTypeReference, name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OutputTypeNamePair(System::CodeDom::CodeTypeReference ^ typeRef, System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeRef" Type="System.CodeDom.CodeTypeReference" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeRef">
          <span data-ttu-id="d1379-382">Tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-382">The type.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="d1379-383">Nome dell'oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-383">The name for the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-384">Genera il codice per la coppia di nomi e per il tipo di oggetto specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-384">Generates code for the specified object type and name pair.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuoteSnippetString">
      <MemberSignature Language="C#" Value="protected abstract string QuoteSnippetString (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string QuoteSnippetString(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function QuoteSnippetString (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::String ^ QuoteSnippetString(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d1379-385">Stringa da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-385">The string to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-386">Converte la stringa specificata formattandola con codici di escape.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-386">Converts the specified string by formatting it with escape codes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d1379-387">Stringa convertita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-387">The converted string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1379-388">Questo metodo restituisce una versione modificata della stringa specificata che è stata formattata con caratteri di escape di codice.</span><span class="sxs-lookup"><span data-stu-id="d1379-388">This method returns a modified version of the specified string that has been formatted with escape code characters.</span></span> <span data-ttu-id="d1379-389">Ad esempio, `/"` potrebbe essere utilizzato per rappresentare `"`.</span><span class="sxs-lookup"><span data-stu-id="d1379-389">For example, `/"` might be used to represent `"`.</span></span> <span data-ttu-id="d1379-390">Questi codici di escape vengono utilizzati per sostituire gli elementi della stringa specificata che in caso contrario potrebbe essere in conflitto con la sintassi di linguaggio.</span><span class="sxs-lookup"><span data-stu-id="d1379-390">These escape codes are used to replace elements of the specified string that might otherwise conflict with language syntax.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="protected abstract bool Supports (System.CodeDom.Compiler.GeneratorSupport support);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport support) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function Supports (support As GeneratorSupport) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool Supports(System::CodeDom::Compiler::GeneratorSupport support);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="support" Type="System.CodeDom.Compiler.GeneratorSupport" />
      </Parameters>
      <Docs>
        <param name="support">
          <span data-ttu-id="d1379-391">Tipo di supporto alla generazione di codice per cui eseguire il test.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-391">The type of code generation support to test for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-392">Ottiene un valore che indica se viene fornito il supporto specificato per la generazione di codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-392">Gets a value indicating whether the specified code generation support is provided.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d1379-393">
            <see langword="true" /> se viene fornito il supporto specificato per la generazione di codice, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-393">
              <see langword="true" /> if the specified code generation support is provided; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="string ICodeGenerator.CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function CreateEscapedIdentifier (value As String) As String Implements ICodeGenerator.CreateEscapedIdentifier" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System::String ^ value) = System::CodeDom::Compiler::ICodeGenerator::CreateEscapedIdentifier;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d1379-394">Stringa per la quale deve essere creato un identificatore di escape.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-394">The string to create an escaped identifier for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-395">Crea un identificatore di escape per il valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-395">Creates an escaped identifier for the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d1379-396">Identificatore di escape per il valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-396">The escaped identifier for the value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier">
      <MemberSignature Language="C#" Value="string ICodeGenerator.CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function CreateValidIdentifier (value As String) As String Implements ICodeGenerator.CreateValidIdentifier" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System::String ^ value) = System::CodeDom::Compiler::ICodeGenerator::CreateValidIdentifier;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d1379-397">Stringa per la quale deve essere generato un identificatore valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-397">The string to generate a valid identifier for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-398">Crea un identificatore valido per il valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-398">Creates a valid identifier for the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d1379-399">Identificatore valido per il valore specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-399">A valid identifier for the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit">
      <MemberSignature Language="C#" Value="void ICodeGenerator.GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(class System.CodeDom.CodeCompileUnit e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub GenerateCodeFromCompileUnit (e As CodeCompileUnit, w As TextWriter, o As CodeGeneratorOptions) Implements ICodeGenerator.GenerateCodeFromCompileUnit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System::CodeDom::CodeCompileUnit ^ e, System::IO::TextWriter ^ w, System::CodeDom::Compiler::CodeGeneratorOptions ^ o) = System::CodeDom::Compiler::ICodeGenerator::GenerateCodeFromCompileUnit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-400">Unità di compilazione CodeDOM per la quale generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-400">The CodeDOM compilation unit to generate code for.</span>
          </span>
        </param>
        <param name="w">
          <span data-ttu-id="d1379-401">Writer di testo a cui restituire il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-401">The text writer to output code to.</span>
          </span>
        </param>
        <param name="o">
          <span data-ttu-id="d1379-402">Opzioni da usare per la generazione del codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-402">The options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-403">Genera il codice per l'unità di compilazione CodeDOM (Code Document Object Model) specificata e lo restituisce al writer di testo specificato in base alle opzioni impostate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-403">Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d1379-404">
            <paramref name="w" /> non è disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-404">
              <paramref name="w" /> is not available.</span>
          </span>
          <span data-ttu-id="d1379-405">
            <paramref name="w" /> potrebbe essere stato chiuso prima della chiamata al metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-405">
              <paramref name="w" /> may have been closed before the method call was made.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression">
      <MemberSignature Language="C#" Value="void ICodeGenerator.GenerateCodeFromExpression (System.CodeDom.CodeExpression e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(class System.CodeDom.CodeExpression e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub GenerateCodeFromExpression (e As CodeExpression, w As TextWriter, o As CodeGeneratorOptions) Implements ICodeGenerator.GenerateCodeFromExpression" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System::CodeDom::CodeExpression ^ e, System::IO::TextWriter ^ w, System::CodeDom::Compiler::CodeGeneratorOptions ^ o) = System::CodeDom::Compiler::ICodeGenerator::GenerateCodeFromExpression;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-406">Espressione per cui generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-406">The expression to generate code for.</span>
          </span>
        </param>
        <param name="w">
          <span data-ttu-id="d1379-407">Writer di testo a cui restituire il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-407">The text writer to output code to.</span>
          </span>
        </param>
        <param name="o">
          <span data-ttu-id="d1379-408">Opzioni da usare per la generazione del codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-408">The options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-409">Genera il codice per l'espressione CodeDOM (Code Document Object Model) specificata e lo restituisce al writer di testo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-409">Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d1379-410">
            <paramref name="w" /> non è disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-410">
              <paramref name="w" /> is not available.</span>
          </span>
          <span data-ttu-id="d1379-411">
            <paramref name="w" /> potrebbe essere stato chiuso prima della chiamata al metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-411">
              <paramref name="w" /> may have been closed before the method call was made.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace">
      <MemberSignature Language="C#" Value="void ICodeGenerator.GenerateCodeFromNamespace (System.CodeDom.CodeNamespace e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(class System.CodeDom.CodeNamespace e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub GenerateCodeFromNamespace (e As CodeNamespace, w As TextWriter, o As CodeGeneratorOptions) Implements ICodeGenerator.GenerateCodeFromNamespace" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System::CodeDom::CodeNamespace ^ e, System::IO::TextWriter ^ w, System::CodeDom::Compiler::CodeGeneratorOptions ^ o) = System::CodeDom::Compiler::ICodeGenerator::GenerateCodeFromNamespace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-412">Spazio dei nomi per il quale deve essere generato il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-412">The namespace to generate code for.</span>
          </span>
        </param>
        <param name="w">
          <span data-ttu-id="d1379-413">Writer di testo a cui restituire il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-413">The text writer to output code to.</span>
          </span>
        </param>
        <param name="o">
          <span data-ttu-id="d1379-414">Opzioni da usare per la generazione del codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-414">The options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-415">Genera il codice per lo spazio dei nomi Code Document Object Model (CodeDOM) specificato e lo restituisce al writer di testo specificato in base alle opzioni impostate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-415">Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d1379-416">
            <paramref name="w" /> non è disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-416">
              <paramref name="w" /> is not available.</span>
          </span>
          <span data-ttu-id="d1379-417">
            <paramref name="w" /> potrebbe essere stato chiuso prima della chiamata al metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-417">
              <paramref name="w" /> may have been closed before the method call was made.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement">
      <MemberSignature Language="C#" Value="void ICodeGenerator.GenerateCodeFromStatement (System.CodeDom.CodeStatement e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(class System.CodeDom.CodeStatement e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub GenerateCodeFromStatement (e As CodeStatement, w As TextWriter, o As CodeGeneratorOptions) Implements ICodeGenerator.GenerateCodeFromStatement" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System::CodeDom::CodeStatement ^ e, System::IO::TextWriter ^ w, System::CodeDom::Compiler::CodeGeneratorOptions ^ o) = System::CodeDom::Compiler::ICodeGenerator::GenerateCodeFromStatement;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-418">Istruzione che contiene gli elementi CodeDOM da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-418">The statement that contains the CodeDOM elements to translate.</span>
          </span>
        </param>
        <param name="w">
          <span data-ttu-id="d1379-419">Writer di testo a cui restituire il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-419">The text writer to output code to.</span>
          </span>
        </param>
        <param name="o">
          <span data-ttu-id="d1379-420">Opzioni da usare per la generazione del codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-420">The options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-421">Genera il codice per l'istruzione CodeDOM (Code Document Object Model) specificata e lo restituisce al writer di testo specificato in base alle opzioni impostate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-421">Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d1379-422">
            <paramref name="w" /> non è disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-422">
              <paramref name="w" /> is not available.</span>
          </span>
          <span data-ttu-id="d1379-423">
            <paramref name="w" /> potrebbe essere stato chiuso prima della chiamata al metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-423">
              <paramref name="w" /> may have been closed before the method call was made.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType">
      <MemberSignature Language="C#" Value="void ICodeGenerator.GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(class System.CodeDom.CodeTypeDeclaration e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub GenerateCodeFromType (e As CodeTypeDeclaration, w As TextWriter, o As CodeGeneratorOptions) Implements ICodeGenerator.GenerateCodeFromType" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System::CodeDom::CodeTypeDeclaration ^ e, System::IO::TextWriter ^ w, System::CodeDom::Compiler::CodeGeneratorOptions ^ o) = System::CodeDom::Compiler::ICodeGenerator::GenerateCodeFromType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-424">Tipo per il quale generare il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-424">The type to generate code for.</span>
          </span>
        </param>
        <param name="w">
          <span data-ttu-id="d1379-425">Writer di testo a cui restituire il codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-425">The text writer to output code to.</span>
          </span>
        </param>
        <param name="o">
          <span data-ttu-id="d1379-426">Opzioni da usare per la generazione del codice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-426">The options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-427">Genera il codice per la dichiarazione di tipo CodeDOM (Code Document Object Model) specificata e lo restituisce al writer di testo specificato in base alle opzioni impostate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-427">Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d1379-428">
            <paramref name="w" /> non è disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-428">
              <paramref name="w" /> is not available.</span>
          </span>
          <span data-ttu-id="d1379-429">
            <paramref name="w" /> potrebbe essere stato chiuso prima della chiamata al metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-429">
              <paramref name="w" /> may have been closed before the method call was made.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput">
      <MemberSignature Language="C#" Value="string ICodeGenerator.GetTypeOutput (System.CodeDom.CodeTypeReference type);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(class System.CodeDom.CodeTypeReference type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeOutput (type As CodeTypeReference) As String Implements ICodeGenerator.GetTypeOutput" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System::CodeDom::CodeTypeReference ^ type) = System::CodeDom::Compiler::ICodeGenerator::GetTypeOutput;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.CodeDom.CodeTypeReference" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d1379-430">Tipo da restituire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-430">The type to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-431">Ottiene il tipo indicato dall'oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-431">Gets the type indicated by the specified <see cref="T:System.CodeDom.CodeTypeReference" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d1379-432">Nome del riferimento al tipo di dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-432">The name of the data type reference.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier">
      <MemberSignature Language="C#" Value="bool ICodeGenerator.IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsValidIdentifier (value As String) As Boolean Implements ICodeGenerator.IsValidIdentifier" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System::String ^ value) = System::CodeDom::Compiler::ICodeGenerator::IsValidIdentifier;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d1379-433">Valore su cui eseguire il test.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-433">The value to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-434">Ottiene un valore che indica se il valore specificato costituisce un identificatore valido per il linguaggio utilizzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-434">Gets a value that indicates whether the specified value is a valid identifier for the current language.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d1379-435">
            <see langword="true" /> se il parametro <paramref name="value" /> è un identificatore valido, in caso contrario <see langword="false" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-435">
              <see langword="true" /> if the <paramref name="value" /> parameter is a valid identifier; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.Supports">
      <MemberSignature Language="C#" Value="bool ICodeGenerator.Supports (System.CodeDom.Compiler.GeneratorSupport support);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.CodeDom.Compiler.ICodeGenerator.Supports(valuetype System.CodeDom.Compiler.GeneratorSupport support) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)" />
      <MemberSignature Language="VB.NET" Value="Function Supports (support As GeneratorSupport) As Boolean Implements ICodeGenerator.Supports" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.CodeDom.Compiler.ICodeGenerator.Supports(System::CodeDom::Compiler::GeneratorSupport support) = System::CodeDom::Compiler::ICodeGenerator::Supports;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="support" Type="System.CodeDom.Compiler.GeneratorSupport" />
      </Parameters>
      <Docs>
        <param name="support">
          <span data-ttu-id="d1379-436">Capacità di cui verificare il supporto nel generatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-436">The capabilities to test the generator for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-437">Ottiene un valore che indica se il generatore fornisce supporto per le funzionalità del linguaggio rappresentate dall'oggetto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-437">Gets a value indicating whether the generator provides support for the language features represented by the specified <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d1379-438">
            <see langword="true" /> se sono supportate le funzionalità specificate, in caso contrario <see langword="false" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-438">
              <see langword="true" /> if the specified capabilities are supported; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier">
      <MemberSignature Language="C#" Value="void ICodeGenerator.ValidateIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub ValidateIdentifier (value As String) Implements ICodeGenerator.ValidateIdentifier" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System::String ^ value) = System::CodeDom::Compiler::ICodeGenerator::ValidateIdentifier;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d1379-439">Identificatore da convalidare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-439">The identifier to validate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-440">Genera un'eccezione se il valore specificato non è un identificatore valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-440">Throws an exception if the specified value is not a valid identifier.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateIdentifier">
      <MemberSignature Language="C#" Value="protected virtual void ValidateIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateIdentifier (value As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateIdentifier(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d1379-441">Identificatore del quale deve essere eseguito il test della validità come identificatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-441">The identifier to test for validity as an identifier.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-442">Genera un'eccezione se la stringa specificata non è un identificatore valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-442">Throws an exception if the specified string is not a valid identifier.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d1379-443">Se l'identificatore non è valido o è in conflitto con parole chiave riservate o di linguaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-443">If the specified identifier is invalid or conflicts with reserved or language keywords.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateIdentifiers">
      <MemberSignature Language="C#" Value="public static void ValidateIdentifiers (System.CodeDom.CodeObject e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateIdentifiers(class System.CodeDom.CodeObject e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateIdentifiers (e As CodeObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidateIdentifiers(System::CodeDom::CodeObject ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeObject" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="d1379-444">Oggetto per il test degli identificatori non validi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-444">An object to test for invalid identifiers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1379-445">Tenta di convalidare ogni campo dell'identificatore contenuto nell'oggetto <see cref="T:System.CodeDom.CodeObject" /> specificato o nella struttura ad albero <see cref="N:System.CodeDom" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-445">Attempts to validate each identifier field contained in the specified <see cref="T:System.CodeDom.CodeObject" /> or <see cref="N:System.CodeDom" /> tree.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1379-446">È possibile che i campi dell'identificatore <xref:System.CodeDom.CodeObject> gli oggetti di codice nascosto che consentono di violazioni della sicurezza e di caratteri di escape del campo.</span><span class="sxs-lookup"><span data-stu-id="d1379-446">It is possible for the identifier fields of <xref:System.CodeDom.CodeObject> objects to contain field escape characters and hidden code which can allow security violations.</span></span> <span data-ttu-id="d1379-447">Questo metodo controlla i campi di ogni valore letterale <xref:System.CodeDom.CodeObject> in un <xref:System.CodeDom> struttura ad albero per i caratteri che possono essere utilizzati per nascondere codice e genera un'eccezione se un campo dell'identificatore contiene un carattere non valido.</span><span class="sxs-lookup"><span data-stu-id="d1379-447">This method checks the literal fields of each <xref:System.CodeDom.CodeObject> in a <xref:System.CodeDom> tree for characters which could be used to hide code, and throws an exception if an identifier field contains an invalid character.</span></span>  
  
 <span data-ttu-id="d1379-448">Questo metodo chiama il <xref:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier%2A> metodo per convalidare ogni identificatore specificato <xref:System.CodeDom.CodeObject> o <xref:System.CodeDom> ad albero e genera un'eccezione se un identificatore non è valido o contiene caratteri non validi.</span><span class="sxs-lookup"><span data-stu-id="d1379-448">This method calls the <xref:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier%2A> method to validate each identifier in the specified <xref:System.CodeDom.CodeObject> or <xref:System.CodeDom> tree, and throws an exception if an identifier is invalid or contains invalid characters.</span></span>  
  
 <span data-ttu-id="d1379-449">Chiamare questo metodo e passa il <xref:System.CodeDom.CodeCompileUnit> che contiene il grafico del codice per generare prima di generare il codice per bloccare l'uso di determinate sequenze di caratteri che può essere utilizzato per includere codice nascosto all'interno di un campo dell'identificatore.</span><span class="sxs-lookup"><span data-stu-id="d1379-449">Call this method and pass it the <xref:System.CodeDom.CodeCompileUnit> containing the code graph to generate before generating code to block the use of certain character sequences that can be used to include hidden code within an identifier field.</span></span> <span data-ttu-id="d1379-450">Questo metodo non viene chiamato automaticamente da metodi genera codice.</span><span class="sxs-lookup"><span data-stu-id="d1379-450">This method is not called automatically by any generate code methods.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d1379-451">Nell'oggetto <see cref="T:System.CodeDom.CodeObject" /> specificato è contenuto un identificatore non valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-451">The specified <see cref="T:System.CodeDom.CodeObject" /> contains an invalid identifier.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="d1379-452">per l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-452">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d1379-453">Impossibile usare questo membro in codice parzialmente attendibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1379-453">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>