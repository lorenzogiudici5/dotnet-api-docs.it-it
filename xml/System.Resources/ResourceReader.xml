<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="682738b4136d074223cbe025a9380b3cca9bc1d0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30480255" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enumera le risorse in un file di risorse (.resources) binario leggendo le coppie nome/valore delle risorse sequenziali.  
  
 **Nota sulla sicurezza**: la chiamata di metodi in questa classe con dati non attendibili costituisce un rischio per la sicurezza. Chiamare i metodi della classe solo con dati attendibili. Per altre informazioni, vedere la pagina relativa ai [rischi per la sicurezza correlati a dati non attendibili](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Resources.ResourceReader> classe fornisce un'implementazione standard del <xref:System.Resources.IResourceReader> interfaccia. Oggetto <xref:System.Resources.ResourceReader> istanza rappresenta un file con estensione resources autonomo o un file con estensione resources incorporato in un assembly. Consente di enumerare le risorse in un file. Resources e recuperare il relativo coppie nome/valore. Si differenzia dal <xref:System.Resources.ResourceManager> (classe), che viene utilizzato per recuperare risorse denominate specificate da un file con estensione resources incorporato in un assembly. Il <xref:System.Resources.ResourceManager> classe viene utilizzata per recuperare le risorse i cui nomi sono noti in anticipo, mentre la <xref:System.Resources.ResourceReader> classe è utile per il recupero delle risorse il cui numero o i nomi esatti non sono noti in fase di compilazione. Ad esempio, un'applicazione può utilizzare un file di risorse per archiviare le informazioni di configurazione che sono organizzate in sezioni e gli elementi in una sezione, in cui il numero di sezioni o gli elementi in una sezione non è noto in anticipo. Le risorse possono quindi essere denominate in modo generico (ad esempio `Section1`, `Section1Item1`, `Section1Item2`e così via) e recuperati usando un <xref:System.Resources.ResourceReader> oggetto.  
  
> [!IMPORTANT]
>  Questo tipo implementa il <xref:System.IDisposable> interfaccia. Dopo aver utilizzato il tipo, è necessario eliminarlo direttamente o indirettamente. Per eliminare direttamente il tipo, chiamare il relativo <xref:System.IDisposable.Dispose%2A> metodo in un `try` / `catch` blocco. Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio come ad esempio `using` in C# o `Using` in Visual Basic. Per ulteriori informazioni, vedere la sezione "Utilizzo di oggetti che implementano IDisposable" nel <xref:System.IDisposable> argomento relativo all'interfaccia.  
  
 Per ulteriori informazioni sull'utilizzo di <xref:System.Resources.ResourceReader> classe, vedere le sezioni seguenti:  
  
-   [Creazione di un oggetto ResourceReader](#instantiate)  
  
-   [Enumerazione delle risorse dell'oggetto ResourceReader](#enumerate)  
  
    -   [Recupero di risorse utilizzando le proprietà per IDictionaryEnumerator](#idictionaryenumerator)  
  
    -   [Il recupero delle risorse in base al nome con GetResourceData](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a>Creazione di un oggetto ResourceReader  
 Un file. Resources è un file binario compilato da un file di testo o un file XML con estensione resx [Resgen.exe (Generatore di File di risorse)](~/docs/framework/tools/resgen-exe-resource-file-generator.md). Oggetto <xref:System.Resources.ResourceReader> oggetto può rappresentare un file con estensione resources autonomo o un file con estensione resources incorporato in un assembly.  
  
 Per creare un'istanza di un <xref:System.Resources.ResourceReader> che legge da un file. resources autonomi, utilizzare il <xref:System.Resources.ResourceReader> costruttore di classe con un flusso di input o una stringa che contiene il nome del file. Resources. L'esempio seguente illustra entrambi gli approcci. Il primo crea un <xref:System.Resources.ResourceReader> oggetto che rappresenta un file con estensione resources denominato `Resources1.resources` utilizzando il nome di file. Il secondo crea un <xref:System.Resources.ResourceReader> oggetto che rappresenta un file con estensione resources denominato `Resources2.resources` utilizzando un flusso creato dal file.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 Per creare un <xref:System.Resources.ResourceReader> creare un'istanza di oggetto che rappresenta un file con estensione resources incorporati, un <xref:System.Reflection.Assembly> oggetto dall'assembly in cui è incorporato il file. Resources. Il relativo <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> metodo restituisce un <xref:System.IO.Stream> oggetto che può essere passato al <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> costruttore. Nell'esempio seguente viene creata un'istanza di un <xref:System.Resources.ResourceReader> oggetto che rappresenta un file con estensione resources incorporati.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a>Enumerazione delle risorse dell'oggetto ResourceReader  
 Per enumerare le risorse in un file. Resources, chiamare il <xref:System.Resources.ResourceReader.GetEnumerator%2A> metodo, che restituisce un <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> oggetto. Chiamare il `IDictionaryEnumerator.MoveNext` metodo per passare da una risorsa a quello successivo. Il metodo restituisce `false` quando sono state enumerate tutte le risorse nel file. Resources.  
  
> [!NOTE]
>  Anche se il <xref:System.Resources.ResourceReader> classe implementa il <xref:System.Collections.IEnumerable> interfaccia e <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> (metodo), il <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> metodo non fornisce il <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> implementazione. Al contrario, il <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> metodo restituisce un <xref:System.Collections.IDictionaryEnumerator> oggetto dell'interfaccia che fornisce l'accesso a una coppia nome/valore di ogni risorsa.  
  
 È possibile recuperare le singole risorse nella raccolta in due modi:  
  
-   È possibile eseguire l'iterazione di ogni risorsa di <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> raccolta e utilizzo <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> proprietà per recuperare il nome della risorsa e il valore. Si consiglia di questa tecnica quando tutte le risorse sono dello stesso tipo oppure si conosce il tipo di dati di ogni risorsa.  
  
-   Quando esegue un'iterazione, è possibile recuperare il nome di ogni risorsa di <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> insieme e chiamare il <xref:System.Resources.ResourceReader.GetResourceData%2A> metodo per recuperare i dati della risorsa. Questo approccio è consigliato quando non si conosce il tipo di dati di ogni risorsa o se l'approccio precedente genera eccezioni.  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a>Recupero di risorse utilizzando le proprietà per IDictionaryEnumerator  
 Il primo metodo di enumerazione di risorse in un file con estensione resources richiede direttamente il recupero di coppia nome/valore di ogni risorsa. Dopo aver chiamato il `IDictionaryEnumerator.MoveNext` il nome del metodo per spostare a ogni risorsa della raccolta, è possibile recuperare la risorsa dal <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> proprietà e i dati delle risorse dal <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> proprietà.  
  
 Nell'esempio seguente viene illustrato come recuperare il nome e il valore di ogni risorsa in un file. Resources con il <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> e <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> proprietà. Per eseguire l'esempio, creare il seguente file di testo denominato ApplicationResources.txt per definire risorse di tipo stringa.  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 È quindi possibile convertire il file di risorse di testo in un file binario denominato ApplicationResources.resources utilizzando il comando seguente:  
  
 **resgen ApplicationResources.txt**  
  
 L'esempio seguente usa quindi la <xref:System.Resources.ResourceReader> classe per enumerare ogni risorsa nel file con estensione resources binari autonoma e per visualizzare il nome della chiave e valore corrispondente.  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 Il tentativo di recuperare i dati di risorsa di <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> proprietà può generare le eccezioni seguenti:  
  
-   Oggetto <xref:System.FormatException> se i dati non sono nel formato previsto.  
  
-   Oggetto <xref:System.IO.FileNotFoundException> se l'assembly che contiene il tipo a cui appartengono i dati non viene trovato.  
  
-   Oggetto <xref:System.TypeLoadException> se non può essere il tipo a cui appartengono i dati non viene trovata.  
  
 In genere, vengono generate queste eccezioni se il file. Resources è stato modificato manualmente, se l'assembly in cui è definito un tipo ha non è stato incluso in un'applicazione oppure è stato eliminato accidentalmente, o se l'assembly è una versione precedente alla data un tipo. Se viene generata una di queste eccezioni, è possibile recuperare le risorse enumerando ogni risorsa e chiamando il <xref:System.Resources.ResourceReader.GetResourceData%2A> metodo, come illustrato nella sezione seguente. Questo approccio fornisce informazioni sui dati digitato che il <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> ha tentato di proprietà da restituire.  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a>Il recupero delle risorse in base al nome con GetResourceData  
 Il secondo approccio per l'enumerazione di risorse in un file con estensione resources prevede anche di spostarsi tra le risorse nel file chiamando il `IDictionaryEnumerator.MoveNext` metodo. Per ogni risorsa, recuperare il nome della risorsa dal <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> proprietà, che viene quindi passato al <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> metodo per recuperare i dati della risorsa. Viene restituito come una matrice di byte nel `resourceData` argomento.  
  
 Questo approccio è più complesse rispetto a recuperare il nome della risorsa e il valore di <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> e <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> proprietà, perché restituisce i byte effettivi che formano il valore della risorsa. Tuttavia, se il tentativo di recuperare la risorsa genera un'eccezione, il <xref:System.Resources.ResourceReader.GetResourceData%2A> metodo consente di identificare l'origine dell'eccezione fornendo informazioni sul tipo di dati della risorsa. Per ulteriori informazioni sulla stringa che indica il tipo di dati della risorsa, vedere <xref:System.Resources.ResourceReader.GetResourceData%2A>.  
  
 Nell'esempio seguente viene illustrato come utilizzare questo approccio per recuperare le risorse e per gestire le eccezioni generate. A livello di codice crea un file. Resources binario che contiene quattro stringhe, un valore booleano, un valore integer, una bitmap e uno personalizzato `DateTimeTZI` oggetto. Per eseguire l'esempio, eseguire le operazioni seguenti:  
  
1.  Creare un assembly denominato DLL che contiene il `DateTimeTZI` struttura. Di seguito è riportato il codice sorgente per l'assembly.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     Compilare il codice sorgente in c# utilizzando il comando seguente:  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     In alternativa, è possibile compilare in Visual Basic usando il comando seguente:  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  Compilare ed eseguire il seguente codice sorgente, che consente di creare un file. resources denominato ContactResources.resources.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     File di codice sorgente è denominato CreateResources.cs. È possibile compilare in c# utilizzando il comando seguente:  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     In alternativa, è possibile compilare in Visual Basic usando il comando seguente:  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  Compilare ed eseguire il codice seguente per enumerare le risorse nel file ContactResources.resources.  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     Dopo aver modificato il codice sorgente (ad esempio, generando deliberatamente un <xref:System.FormatException> alla fine del `try` blocco) o rinominare l'assembly DLL in modo che non è disponibile in fase di esecuzione, è possibile eseguire l'esempio per visualizzare come chiamate a <xref:System.Resources.ResourceReader.GetResourceData%2A> Consente di recuperare o ricreare alcune informazioni sulle risorse.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Resources.ResourceReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  L'utilizzo di un'istanza di tale oggetto con i dati non attendibili implica un rischio per la sicurezza. Questo oggetto può essere utilizzato solo con dati attendibili. Per altre informazioni, vedere [la convalida dei dati](https://www.owasp.org/index.php/Data_Validation).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Il flusso di input per la lettura delle risorse.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Resources.ResourceReader" /> per il flusso specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> costruttore crea un <xref:System.Resources.ResourceReader> oggetto che recupera le risorse da un file. resources autonomi o da un file. Resources file che è incorporato in un assembly. Per leggere da un file. resources autonomi, creare un'istanza di un <xref:System.IO.Stream> dell'oggetto e passarlo al <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> costruttore. Per leggere da un file con estensione resources incorporati, chiamare il <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> metodo con il nome del file. Resources e passare l'oggetto restituito distinzione maiuscole/minuscole <xref:System.IO.Stream> dell'oggetto per il <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> costruttore.  
  
> [!IMPORTANT]
>  L'utilizzo di un'istanza di tale oggetto con i dati non attendibili implica un rischio per la sicurezza. Questo oggetto può essere utilizzato solo con dati attendibili. Per altre informazioni, vedere [la convalida dei dati](https://www.owasp.org/index.php/Data_Validation).  
  
   
  
## Examples  
 Nell'esempio riportato in questa sezione viene utilizzato il seguente file con estensione txt denominato `PatientForm.txt` per definire le risorse usate da un'applicazione.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 È possibile compilare il file con estensione txt in un file. Resources eseguendo il comando seguente:  
  
 **resgen PatientForm.txt**  
  
 Nell'esempio seguente si presuppone che il file di risorse è incorporato nell'assembly contenente codice eseguibile dell'applicazione. Recupera un file di risorse denominato `PatientForm.resources` dagli assembly attualmente in esecuzione e visualizza il nome e il valore di ciascuna delle relative risorse.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 Se l'esempio c# è denominato `Example.cs`, è possibile compilarlo utilizzando il comando seguente:  
  
 **csc Example.cs /res:PatientForm.resources**  
  
 Se l'esempio di Visual Basic denominato `Example.vb`, è possibile compilarlo utilizzando il comando seguente:  
  
 **vbc example. vb /res:PatientForm.resources**  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="stream" /> non è leggibile.</exception>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="stream" /> è <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O durante l'accesso al parametro <paramref name="stream" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per fornire servizi di serializzazione. Azione di sicurezza: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">richiede l'attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Percorso e nome del file di risorse da leggere. <c>filename</c> non è soggetto alla distinzione tra maiuscole e minuscole.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Resources.ResourceReader" /> per il file di risorse denominato specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> costruttore crea un <xref:System.Resources.ResourceReader> oggetto che recupera le risorse da un file. resources autonomi. Per recuperare le risorse da un file con estensione resources incorporati, utilizzare il <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> costruttore.  
  
> [!IMPORTANT]
>  L'utilizzo di un'istanza di tale oggetto con i dati non attendibili implica un rischio per la sicurezza. Questo oggetto può essere utilizzato solo con dati attendibili. Per altre informazioni, vedere [la convalida dei dati](https://www.owasp.org/index.php/Data_Validation).  
  
   
  
## Examples  
 Nell'esempio riportato in questa sezione viene utilizzato il seguente file con estensione txt denominato `PatientForm.txt` per definire le risorse usate da un'applicazione.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 È possibile compilare questo file con estensione txt in un file. Resources eseguendo il comando seguente:  
  
 **resgen PatientForm.txt**  
  
 Nell'esempio seguente enumera le risorse in `PatientForm.resources` e visualizza il nome e il valore di ogni.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="fileName" /> è <see langword="null" />.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Impossibile trovare il file.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <exception cref="T:System.BadImageFormatException">Il formato del file di risorse non è valido. Ad esempio, la lunghezza del file potrebbe essere zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse del sistema operativo associate a questo oggetto <see cref="T:System.Resources.ResourceReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.Close%2A> può essere tranquillamente chiamato più volte.  
  
   
  
## Examples  
 Nell'esempio seguente viene spostata all'interno delle risorse di un file e consente di visualizzare tutte le coppie chiave/valore che viene trovato. Il codice Usa quindi il <xref:System.Resources.ResourceReader.Close%2A> metodo per chiudere la <xref:System.Resources.ResourceReader> e per rilasciare tutte le risorse usate dal componente.  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.Resources.ResourceReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dopo aver terminato di utilizzare questa istanza di <xref:System.Resources.ResourceReader>, chiamare <xref:System.Resources.ResourceReader.Dispose%2A> per rilasciare tutte le risorse usate da questa istanza. È consigliabile eliminare altri riferimenti a questo <xref:System.Resources.ResourceReader> in modo che il garbage collector di recuperare la memoria dell'istanza anziché mantenendolo alive per la finalizzazione dell'istanza.  
  
 <xref:System.Resources.ResourceReader.Dispose%2A> chiama il metodo Dispose (Boolean) privato, che contiene il codice per rilasciare le risorse gestite e non gestite. Per ulteriori informazioni, vedere [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un enumeratore per questo oggetto <see cref="T:System.Resources.ResourceReader" />.</summary>
        <returns>Enumeratore per questo oggetto <see cref="T:System.Resources.ResourceReader" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, enumerare le risorse chiamando il <xref:System.Resources.ResourceReader.GetEnumerator%2A> (metodo) e quindi chiamare ripetutamente il <xref:System.Collections.IEnumerator.MoveNext%2A> metodo sull'oggetto restituito <xref:System.Collections.IDictionaryEnumerator> oggetto finché il metodo restituisce `false`. Il nome della risorsa è disponibile il <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> proprietà; il valore di <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> proprietà. Nell'esempio viene illustrato come enumerare le risorse in questo modo.  
  
 L'implementazione del <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> proprietà mediante la <xref:System.Resources.ResourceReader> classe può generare le eccezioni seguenti:  
  
-   <xref:System.IO.FileNotFoundException>  
  
     Impossibile trovare l'assembly che contiene il tipo a cui appartengono i dati.  
  
-   <xref:System.FormatException>  
  
     I dati non sono nel formato previsto.  
  
-   <xref:System.TypeLoadException>  
  
     Impossibile trovare il tipo a cui appartengono i dati.  
  
 È possibile gestire l'eccezione chiamando il <xref:System.Resources.ResourceReader.GetResourceData%2A> metodo per recuperare informazioni sul tipo di dati e la matrice di byte assegnato per la risorsa indicata. Per ulteriori informazioni, vedere la sezione "Recupero di risorse dal nome con GetResourceData" il <xref:System.Resources.ResourceReader> argomento relativo alla classe.  
  
> [!IMPORTANT]
>  La <xref:System.Resources.ResourceReader> classe include due metodi che restituiscono gli enumeratori. Il <xref:System.Resources.ResourceReader.GetEnumerator%2A> metodo restituisce un <xref:System.Collections.IDictionaryEnumerator> oggetto di interfaccia e il metodo consigliato da chiamare quando l'enumerazione risorse.  
  
   
  
## Examples  
 Nell'esempio riportato in questa sezione viene utilizzato il seguente file con estensione txt denominato `PatientForm.txt` per definire le risorse usate da un'applicazione.  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 È possibile compilare il file con estensione txt in un file. Resources eseguendo il comando seguente:  
  
 **resgen PatientForm.txt**  
  
 Nell'esempio seguente enumera le risorse in `PatientForm.resources` e visualizza il nome e il valore di ogni.  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il lettore è stato chiuso o eliminato e non è possibile accedervi.</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="resourceType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="resourceData" Type="System.Byte[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceName">Nome di una risorsa.</param>
        <param name="resourceType">Quando termina, questo metodo contiene una stringa che rappresenta il nome del tipo della risorsa recuperata. Questo parametro viene passato non inizializzato.</param>
        <param name="resourceData">Al termine dell'esecuzione questo metodo contiene una matrice di byte costituita dalla rappresentazione binaria del tipo recuperato. Questo parametro viene passato non inizializzato.</param>
        <summary>Recupera il nome del tipo e i dati di una risorsa denominata da un file di risorse o da un flusso aperto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Resources.ResourceReader.GetResourceData%2A> metodo recupera il valore di una risorsa denominata come una matrice di byte. È in genere utilizzato quando il <xref:System.Collections.IDictionaryEnumerator.Value%2A> proprietà genera un'eccezione durante il tentativo di recuperare il valore di una risorsa.  
  
 `resourceType` è una stringa che rappresenta il tipo di dati della risorsa. Può essere uno dei valori seguenti:  
  
-   Rappresentazione di stringa di un `ResourceTypeCode` membro di enumerazione che indica il tipo di dati della risorsa. `ResourceTypeCode` è un'enumerazione privata che viene utilizzata da .to indicare che un particolare formato binario viene utilizzato per archiviare uno dei tipi di dati comuni 19. Questi includono i tipi di dati primitivi di .NET Framework (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), nonché <xref:System.String>, <xref:System.DateTime>, e <xref:System.TimeSpan>, inoltre, il `ResourceTypeCode` enumerazione include i valori mostrati nella tabella seguente.  
  
    |Valore ResourceTypeCode|Descrizione|  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|I dati sono una matrice di byte. Del tipo di dati in genere risultati della chiamata per il <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> metodo.|  
    |`ResourceTypeCode.Null`|I dati sono un riferimento null. Del tipo di dati in genere risultati della chiamata per il <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> metodo con un oggetto il cui valore è `null`.|  
    |`ResourceTypeCode.Stream`|I dati vengono archiviati in un flusso. Del tipo di dati in genere risultati della chiamata per il <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> o <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> metodo.|  
  
     Supponendo che `resourceData` non è stato danneggiato, è possibile in genere convertirlo da una matrice di byte al valore originale chiamando un <xref:System.BitConverter> o <xref:System.IO.BinaryReader> metodo.  
  
-   Stringa che contiene il nome completo del tipo i cui dati serializzati vengono assegnati al `resourceData` argomento (ad esempio, `System.String`). Inoltre, per i tipi che non fanno parte della libreria di classi .NET Framework, la stringa include il nome, versione, impostazioni cultura e la chiave pubblica dell'assembly che contiene il tipo. Ad esempio, la stringa seguente indica che i dati serializzati rappresentano un'istanza del `Person` digitare il `Extensions` dello spazio dei nomi, disponibile nella versione 1.0 di un assembly denominato utilità che dispone di alcuna chiave pubblica e impostazioni cultura non definite.  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     Supponendo che `resourceData` non è stato danneggiato e che il tipo di origine sia disponibile, `resourceData` può essere convertito da una matrice di byte al valore originale mediante la conversione di matrice di byte da un <xref:System.IO.Stream> oggetto e il passaggio nel flusso di <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>metodo.  
  
-   La stringa utilizzata per descrivere il tipo di dati di <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> chiamata al metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> non esiste.</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="resourceName" /> non dispone di un tipo valido.</exception>
        <exception cref="T:System.FormatException">I dati delle risorse recuperati sono danneggiati.</exception>
        <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="T:System.Resources.ResourceReader" /> corrente non è inizializzato, probabilmente perché è chiuso.</exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un enumeratore per questo oggetto <see cref="T:System.Resources.ResourceReader" />.</summary>
        <returns>Enumeratore per questo oggetto <see cref="T:System.Resources.ResourceReader" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> è un'implementazione esplicita dell'interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Resources.ResourceReader> a un'interfaccia <xref:System.Collections.IEnumerable>. L'approccio consigliato per l'enumerazione delle risorse in un file con estensione resources consiste nel chiamare il <xref:System.Collections.IEnumerator.MoveNext%2A> metodo il <xref:System.Collections.IDictionaryEnumerator> oggetto restituito dal <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il lettore è già stato chiuso e non è quindi possibile accedervi.</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
  </Members>
</Type>