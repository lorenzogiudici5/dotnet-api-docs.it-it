<Type Name="ResourceSet" FullName="System.Resources.ResourceSet">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a1c004c2cbe90a3788b82697a631822576eef92f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30480085" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ResourceSet : IDisposable, System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ResourceSet extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceSet" />
  <TypeSignature Language="VB.NET" Value="Public Class ResourceSet&#xA;Implements IDisposable, IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceSet : IDisposable, System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Memorizza tutte le risorse localizzate con determinate impostazioni cultura e ignora tutte le altre, incluse eventuali regole di fallback.  
  
 **Nota sulla sicurezza**: la chiamata di metodi in questa classe con dati non attendibili costituisce un rischio per la sicurezza. Chiamare i metodi della classe solo con dati attendibili. Per altre informazioni, vedere la pagina relativa ai [rischi per la sicurezza correlati a dati non attendibili](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Resources.ResourceSet> classe enumera un <xref:System.Resources.IResourceReader>, il caricamento di ogni nome e valore e archiviarli in un <xref:System.Collections.Hashtable>. Un oggetto personalizzato <xref:System.Resources.IResourceReader> può essere utilizzato.  
  
 È possibile creare un'istanza di un <xref:System.Resources.ResourceSet> oggetto che rappresenta le risorse delle impostazioni cultura specifiche chiamando il <xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=nameWithType> metodo.  
  
> [!IMPORTANT]
>  Questo tipo implementa il <xref:System.IDisposable> interfaccia. Dopo aver utilizzato il tipo, è necessario eliminarlo direttamente o indirettamente. Per eliminare direttamente il tipo, chiamare il relativo <xref:System.IDisposable.Dispose%2A> metodo in un `try` / `catch` blocco. Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio come ad esempio `using` in C# o `Using` in Visual Basic. Per ulteriori informazioni, vedere la sezione "Utilizzo di oggetti che implementano IDisposable" nel <xref:System.IDisposable> argomento relativo all'interfaccia.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Le classi derivate di <see cref="T:System.Resources.ResourceSet" /> che usano il proprio lettore di risorse e deve eseguire l'override di writer <see cref="M:System.Resources.ResourceSet.GetDefaultReader" />, e <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" />, per fornire la funzionalità appropriata per interpretare il set di risorse.</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Resources.ResourceSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ResourceSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ResourceSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Resources.ResourceSet" /> con le proprietà predefinite.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceSet (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceSet(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Oggetto <see cref="T:System.IO.Stream" /> di risorse da leggere. Il flusso deve fare riferimento a un file di risorse esistente.</param>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Resources.ResourceSet" /> mediante l'oggetto <see cref="T:System.Resources.ResourceReader" /> predefinito del sistema, che legge le risorse dal flusso specificato.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="stream" /> non è leggibile.</exception>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="stream" /> è <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per fornire servizi di serializzazione. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /> azione di sicurezza: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">richiede l'attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceSet (System.Resources.IResourceReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Resources.IResourceReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As IResourceReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceSet(System::Resources::IResourceReader ^ reader);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Resources.IResourceReader" />
      </Parameters>
      <Docs>
        <param name="reader">Lettore che sarà usato.</param>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Resources.ResourceSet" /> mediante il lettore di risorse specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questo costruttore per supportare formati di risorse personalizzati utilizzando un fornito dall'utente <xref:System.Resources.IResourceReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="reader" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceSet (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceSet(System::String ^ fileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">File di risorse da leggere.</param>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Resources.ResourceSet" /> mediante l'oggetto <see cref="T:System.Resources.ResourceReader" /> predefinito del sistema, che apre e legge le risorse dal file specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente definisce una nuova istanza di <xref:System.Resources.ResourceSet> classe per un file specifico, scorre le risorse utilizzate da tale file e visualizza il relativo contenuto nella console.  
  
 [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="fileName" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude e rilascia qualsiasi risorsa usata da questo oggetto <see cref="T:System.Resources.ResourceSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tutte le chiamate a metodi di <xref:System.Resources.ResourceSet> dopo una chiamata a questo metodo potrebbe non riuscire.  
  
 <xref:System.Resources.ResourceSet.Close%2A> può essere tranquillamente chiamato più volte.  
  
> [!NOTE]
>  L'implementazione corrente di <xref:System.Resources.ResourceSet.Close%2A> chiamate <xref:System.Resources.ResourceSet.Dispose%2A> (`true`).  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Resources.ResourceSet.Close%2A> metodo per rilasciare tutte le risorse usate dal chiamante <xref:System.Resources.ResourceSet> istanza.  
  
 [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rilascia le risorse usate dall'istanza corrente di <see cref="T:System.Resources.ResourceSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Elimina le risorse, diverse dalla memoria, usate dall'istanza corrente di <see cref="T:System.Resources.ResourceSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il metodo <xref:System.Resources.ResourceSet.Dispose%2A> dopo aver terminato di utilizzare l'oggetto <xref:System.Resources.ResourceSet>. Il metodo <xref:System.Resources.ResourceSet.Dispose%2A> lascia l'oggetto <xref:System.Resources.ResourceSet> in una condizione di inutilizzabilità. Dopo la chiamata <xref:System.Resources.ResourceSet.Dispose%2A>, è necessario rilasciare tutti i riferimenti al <xref:System.Resources.ResourceSet> in modo che la memoria occupata può essere recuperata tramite garbage collection.  
  
> [!NOTE]
>  Il metodo corrente è l'implementazione di <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>. Questa implementazione chiama <xref:System.Resources.ResourceSet.Dispose%2A> (`true`).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Indica se gli oggetti contenuti nell'istanza corrente devono essere chiusi in modo esplicito.</param>
        <summary>Rilascia le risorse diverse dalla memoria associate all'istanza corrente, chiudendo, se necessario, gli oggetti gestiti interni.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il `dispose` parametro `true`, il metodo corrente libera tutte le risorse nonché tutti gli oggetti associati. Se `dispose` è `false`, il metodo corrente libera solo le risorse allocate a esso, ignorando gli oggetti associati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultReader">
      <MemberSignature Language="C#" Value="public virtual Type GetDefaultReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDefaultReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetDefaultReader" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultReader () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetDefaultReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce la classe del visualizzatore di risorse preferito per questo tipo di oggetto <see cref="T:System.Resources.ResourceSet" />.</summary>
        <returns>Restituisce l'oggetto <see cref="T:System.Type" /> del lettore di risorse preferito per questo tipo di <see cref="T:System.Resources.ResourceSet" />.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Le classi derivate di <see cref="T:System.Resources.ResourceSet" /> mediante il proprio lettore di risorse deve eseguire l'override <see cref="M:System.Resources.ResourceSet.GetDefaultReader" />, e <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" />.</para>
        </block>
        <altmember cref="T:System.Resources.IResourceReader" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultWriter">
      <MemberSignature Language="C#" Value="public virtual Type GetDefaultWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDefaultWriter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetDefaultWriter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultWriter () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetDefaultWriter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce la classe del writer di risorse preferito per questo tipo di oggetto <see cref="T:System.Resources.ResourceSet" />.</summary>
        <returns>Restituisce l'oggetto <see cref="T:System.Type" /> del writer di risorsa preferito per questo tipo di <see cref="T:System.Resources.ResourceSet" />.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Le classi derivate di <see cref="T:System.Resources.ResourceSet" /> mediante il proprio lettore di risorse deve eseguire l'override <see cref="M:System.Resources.ResourceSet.GetDefaultReader" />, e <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" />.</para>
        </block>
        <altmember cref="T:System.Resources.IResourceWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un'interfaccia <see cref="T:System.Collections.IDictionaryEnumerator" /> che consente di scorrere <see cref="T:System.Resources.ResourceSet" />.</summary>
        <returns>Oggetto <see cref="T:System.Collections.IDictionaryEnumerator" /> per questo oggetto <see cref="T:System.Resources.ResourceSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli enumeratori consentono solo la lettura dei dati nella raccolta. Non è possibile utilizzare enumeratori per modificare la raccolta sottostante.  
  
 Inizialmente l'enumeratore è posizionato davanti al primo elemento della raccolta. Anche il metodo <xref:System.Collections.IEnumerator.Reset%2A> riporta l'enumeratore in questa posizione. In questa posizione, la chiamata <xref:System.Collections.IEnumerator.Current%2A> genera un'eccezione. Pertanto, è necessario chiamare il metodo <xref:System.Collections.IEnumerator.MoveNext%2A> per spostare in avanti l'enumeratore, in corrispondenza del primo elemento della raccolta, prima di leggere il valore di <xref:System.Collections.IEnumerator.Current%2A>.  
  
 <xref:System.Collections.IEnumerator.Current%2A> restituisce lo stesso oggetto finché non viene chiamato il metodo <xref:System.Collections.IEnumerator.MoveNext%2A> o <xref:System.Collections.IEnumerator.Reset%2A>. <xref:System.Collections.IEnumerator.MoveNext%2A> imposta <xref:System.Collections.IEnumerator.Current%2A> sull'elemento successivo.  
  
 Una volta raggiunta la fine della raccolta, l'enumeratore sarà posizionato dopo l'ultimo elemento, pertanto la chiamata al metodo <xref:System.Collections.IEnumerator.MoveNext%2A> restituisce `false`. Se l'ultima chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A> restituito `false`, la chiamata <xref:System.Collections.IEnumerator.Current%2A> genera un'eccezione. Per impostare nuovamente la proprietà <xref:System.Collections.IEnumerator.Current%2A> sul primo elemento della raccolta, è possibile chiamare il metodo <xref:System.Collections.IEnumerator.Reset%2A> seguito da <xref:System.Collections.IEnumerator.MoveNext%2A>.  
  
 Un enumeratore rimane valido fino a quando la raccolta non subisce modifiche. Se vengono apportate modifiche alla raccolta, ad esempio aggiungendo, modificando o eliminando elementi, l'enumeratore viene invalidato e la successiva chiamata al <xref:System.Collections.IEnumerator.MoveNext%2A> o <xref:System.Collections.IEnumerator.Reset%2A> genera un <xref:System.InvalidOperationException>. Se la raccolta viene modificata tra la chiamata del metodo <xref:System.Collections.IEnumerator.MoveNext%2A> e la proprietà <xref:System.Collections.IEnumerator.Current%2A>, la proprietà <xref:System.Collections.IEnumerator.Current%2A> restituirà l'elemento su cui è stata impostata, anche se l'enumeratore risulta già invalidato.  
  
 È possibile utilizzare il <xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=nameWithType> proprietà per accedere al valore archiviato nell'elemento corrente. Utilizzare il <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> proprietà per accedere alla chiave dell'elemento corrente. Utilizzare il <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> proprietà per accedere al valore dell'elemento corrente.  
  
 L'enumeratore non dispone di accesso esclusivo alla raccolta. L'enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, altri thread può comunque modificare la raccolta, che determina l'enumeratore generare un'eccezione. Per garantire la protezione dei thread durante l'enumerazione, è possibile bloccare la raccolta per l'intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare un <xref:System.Resources.ResourceSet> `rs` per il file `items.resources`. Successivamente, il <xref:System.Resources.ResourceSet.GetEnumerator%2A> metodo viene utilizzato per creare un <xref:System.Collections.IDictionaryEnumerator> per `rs`. Il <xref:System.Collections.IDictionaryEnumerator> scorre `rs` e visualizza il contenuto nella console.  
  
 [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Il set di risorse è stato chiuso o eliminato.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un oggetto risorsa con il nome specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome, con distinzione tra maiuscole e minuscole, della risorsa da ricercare.</param>
        <summary>Cerca un oggetto risorsa con il nome specificato.</summary>
        <returns>Risorsa richiesta.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome dell'oggetto risorsa viene fatta distinzione tra maiuscole e minuscole. Per una ricerca tra maiuscole e minuscole, utilizzare <xref:System.Resources.ResourceSet.GetObject%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="name" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso o eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (name As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::String ^ name, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Nome della risorsa da ricercare.</param>
        <param name="ignoreCase">Indica se ignorare o meno la distinzione tra maiuscole e minuscole per il nome specificato.</param>
        <summary>Cerca un oggetto risorsa con il nome specificato senza considerare la distinzione tra maiuscole e minuscole, se richiesto.</summary>
        <returns>Risorsa richiesta.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il valore di `ignoreCase` parametro `true`, una risorsa con il nome "Resource" è equivalente alla risorsa con la risorsa"nome". Si noti tuttavia che questo metodo esegue sempre i confronti tra maiuscole e minuscole utilizzando <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>. Il vantaggio è che i risultati dei confronti tra stringhe tra maiuscole e minuscole eseguiti da questo metodo sono gli stessi in tutti i computer, indipendentemente dalle impostazioni cultura. Lo svantaggio è che i risultati non sono coerenti con le regole di tutte le impostazioni cultura.  
  
 Ad esempio, l'alfabeto turco presenta due versioni del carattere per categorie: uno con un punto e uno senza un punto. In turco, il carattere I (Unicode 0049) è considerato la versione maiuscola di un altro carattere ı (Unicode 0131). Il carattere i (Unicode 0069) è considerato la versione minuscola di un altro carattere i (Unicode 0130). In base a queste regole di maiuscole e minuscole, un confronto tra stringhe distinzione dei caratteri i (Unicode 0069) e I (Unicode 0049) dovrebbe avere esito negativo per le impostazioni cultura "tr-TR" (turco di Turchia). Utilizzo di `GetObject` metodo con `ignoreCase` impostato su `true`, questo confronto ha esito positivo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="name" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso o eliminato.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetString">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce una risorsa <see cref="T:System.String" /> con un nome specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome della risorsa da ricercare.</param>
        <summary>Cerca una risorsa <see cref="T:System.String" /> con il nome specificato.</summary>
        <returns>Valore di una risorsa, se tale valore è <see cref="T:System.String" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="name" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La risorsa specificata da <paramref name="name" /> non è <see cref="T:System.String" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso o eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (name As String, ignoreCase As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::String ^ name, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Nome della risorsa da ricercare.</param>
        <param name="ignoreCase">Indica se occorre ignorare la distinzione tra maiuscole e minuscole per il nome specificato.</param>
        <summary>Cerca una risorsa <see cref="T:System.String" /> con il nome specificato senza considerare la distinzione tra maiuscole e minuscole, se richiesto.</summary>
        <returns>Valore di una risorsa, se tale valore è <see cref="T:System.String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il valore di `ignoreCase` parametro `true`, una risorsa con il nome "Resource" è equivalente alla risorsa con la risorsa"nome". Si noti tuttavia che questo metodo esegue sempre i confronti tra maiuscole e minuscole utilizzando <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>. Il vantaggio è che i risultati dei confronti tra stringhe tra maiuscole e minuscole eseguiti da questo metodo sono gli stessi in tutti i computer, indipendentemente dalle impostazioni cultura. Lo svantaggio è che i risultati non sono coerenti con le regole di tutte le impostazioni cultura.  
  
 Ad esempio, l'alfabeto turco presenta due versioni del carattere per categorie: uno con un punto e uno senza un punto. In turco, il carattere I (Unicode 0049) è considerato la versione maiuscola di un altro carattere ı (Unicode 0131). Il carattere i (Unicode 0069) è considerato la versione minuscola di un altro carattere i (Unicode 0130). In base a queste regole di maiuscole e minuscole, un confronto tra stringhe distinzione dei caratteri i (Unicode 0069) e I (Unicode 0049) dovrebbe avere esito negativo per le impostazioni cultura "tr-TR" (turco di Turchia). Utilizzo di `GetString` metodo con `ignoreCase` impostato su `true`, questo confronto ha esito positivo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="name" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La risorsa specificata da <paramref name="name" /> non è <see cref="T:System.String" />.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è stato chiuso o eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reader">
      <MemberSignature Language="C#" Value="protected System.Resources.IResourceReader Reader;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Resources.IResourceReader Reader" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceSet.Reader" />
      <MemberSignature Language="VB.NET" Value="Protected Reader As IResourceReader " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Resources::IResourceReader ^ Reader;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Resources.IResourceReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica l'oggetto <see cref="T:System.Resources.IResourceReader" /> usato per leggere le risorse.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Resources.IResourceReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadResources">
      <MemberSignature Language="C#" Value="protected virtual void ReadResources ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReadResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.ReadResources" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ReadResources ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ReadResources();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge tutte le risorse e le memorizza in un oggetto <see cref="T:System.Collections.Hashtable" /> indicato nella proprietà <see cref="F:System.Resources.ResourceSet.Table" />.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Le classi derivate di <see cref="T:System.Resources.ResourceSet" /> deve chiamare in modo esplicito <see cref="M:System.Resources.ResourceSet.ReadResources" /> per caricare tutte le risorse di <see cref="T:System.Resources.IResourceReader" /> in <see cref="F:System.Resources.ResourceSet.Table" />, in genere nel costruttore o in modo differito la prima chiamata al metodo <see cref="M:System.Resources.ResourceSet.GetString(System.String)" /> o <see cref="M:System.Resources.ResourceSet.GetObject(System.String)" />. Se il set di risorse e IResourceReader già informazioni reciproche e dispongono tuttavia un modo più efficiente per caricare solo alcune risorse selezionate, è possibile ignorare questo passaggio. Per ridurre il working set, scrivere la risorsa vengono impostata in modo che viene eseguita una query in IResourceReader per solo i valori della risorsa richiesta dall'applicazione.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un oggetto <see cref="T:System.Collections.IEnumerator" /> per evitare che si verifichi una race condition con <see langword="Dispose" />. Il membro non è destinato a essere usato direttamente dal codice.</summary>
        <returns>Enumeratore per l'oggetto <see cref="T:System.Resources.ResourceSet" /> corretto.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable Table;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Collections.Hashtable Table" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceSet.Table" />
      <MemberSignature Language="VB.NET" Value="Protected Table As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Collections::Hashtable ^ Table;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Oggetto <see cref="T:System.Collections.Hashtable" /> in cui sono memorizzate le risorse.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Collections.Hashtable" />
      </Docs>
    </Member>
  </Members>
</Type>