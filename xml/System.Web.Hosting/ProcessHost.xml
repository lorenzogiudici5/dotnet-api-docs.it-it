<Type Name="ProcessHost" FullName="System.Web.Hosting.ProcessHost">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="84378838931a6c72fbe2dd519664f570083ba328" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30539975" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ProcessHost : MarshalByRefObject, System.Web.Hosting.IAdphManager, System.Web.Hosting.IApplicationPreloadManager, System.Web.Hosting.IPphManager, System.Web.Hosting.IProcessHost, System.Web.Hosting.IProcessHostIdleAndHealthCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ProcessHost extends System.MarshalByRefObject implements class System.Web.Hosting.IAdphManager, class System.Web.Hosting.IApplicationPreloadManager, class System.Web.Hosting.IPphManager, class System.Web.Hosting.IProcessHost, class System.Web.Hosting.IProcessHostIdleAndHealthCheck" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.ProcessHost" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ProcessHost&#xA;Inherits MarshalByRefObject&#xA;Implements IAdphManager, IApplicationPreloadManager, IPphManager, IProcessHost, IProcessHostIdleAndHealthCheck" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProcessHost sealed : MarshalByRefObject, System::Web::Hosting::IAdphManager, System::Web::Hosting::IApplicationPreloadManager, System::Web::Hosting::IPphManager, System::Web::Hosting::IProcessHost, System::Web::Hosting::IProcessHostIdleAndHealthCheck" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.Hosting.IAdphManager</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.Hosting.IApplicationPreloadManager</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.Hosting.IPphManager</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.Hosting.IProcessHost</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.Hosting.IProcessHostIdleAndHealthCheck</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Rappresenta un host di processo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ProcessHost> è stato introdotto nel [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]. Per altre informazioni, vedere [Versioni e dipendenze](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
    </remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="EnumerateAppDomains">
      <MemberSignature Language="C#" Value="public void EnumerateAppDomains (out System.Web.Hosting.IAppDomainInfoEnum appDomainInfoEnum);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnumerateAppDomains([out] class System.Web.Hosting.IAppDomainInfoEnum&amp; appDomainInfoEnum) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.EnumerateAppDomains(System.Web.Hosting.IAppDomainInfoEnum@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnumerateAppDomains (ByRef appDomainInfoEnum As IAppDomainInfoEnum)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EnumerateAppDomains([Runtime::InteropServices::Out] System::Web::Hosting::IAppDomainInfoEnum ^ % appDomainInfoEnum);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IProcessHost.EnumerateAppDomains(System.Web.Hosting.IAppDomainInfoEnum@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appDomainInfoEnum" Type="System.Web.Hosting.IAppDomainInfoEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="appDomainInfoEnum">Informazioni sui domini applicazioni.</param>
        <summary>Fornisce l'accesso a un insieme enumerabile di domini applicazioni.</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fornisce all'host di processo una durata infinita impedendo la creazione di lease.</summary>
        <returns>Restituisce un valore <see langword="null" /> per indicare che il lease non scade mai.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ProcessHost.InitializeLifetimeService%2A> è stato introdotto nel [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]. Per altre informazioni, vedere [Versioni e dipendenze](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.IsIdle" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIdle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsIdle();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IProcessHostIdleAndHealthCheck.IsIdle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene lo stato di un processo.</summary>
        <returns>
          <see langword="true" /> se l'host di processo è inattivo; in caso contrario,<see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ProcessHost.IsIdle%2A> è stato introdotto nel [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]. Per altre informazioni, vedere [Versioni e dipendenze](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Ping">
      <MemberSignature Language="C#" Value="public void Ping (System.Web.Hosting.IProcessPingCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Ping(class System.Web.Hosting.IProcessPingCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.Ping(System.Web.Hosting.IProcessPingCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Ping (callback As IProcessPingCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Ping(System::Web::Hosting::IProcessPingCallback ^ callback);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IProcessHostIdleAndHealthCheck.Ping(System.Web.Hosting.IProcessPingCallback)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Web.Hosting.IProcessPingCallback" />
      </Parameters>
      <Docs>
        <param name="callback">Callback per la gestione della risposta di ping.</param>
        <summary>Esegue il ping di un processo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ProcessHost.Ping%2A> è stato introdotto nel [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]. Per altre informazioni, vedere [Versioni e dipendenze](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="SetApplicationPreloadState">
      <MemberSignature Language="C#" Value="public void SetApplicationPreloadState (string context, string appId, bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetApplicationPreloadState(string context, string appId, bool enabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.SetApplicationPreloadState(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetApplicationPreloadState (context As String, appId As String, enabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetApplicationPreloadState(System::String ^ context, System::String ^ appId, bool enabled);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IApplicationPreloadManager.SetApplicationPreloadState(System.String,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">Contesto dell'applicazione.</param>
        <param name="appId">ID univoco dell'applicazione.</param>
        <param name="enabled">
          <see langword="true" /> per indicare che l'applicazione deve essere precaricata; in caso contrario, <see langword="false" />.</param>
        <summary>Notifica ad ASP.NET che una determinata applicazione in esecuzione in [!INCLUDE[iisver](~/includes/iisver-md.md)] è configurata per il precaricamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo implementa il <xref:System.Web.Hosting.IApplicationPreloadManager.SetApplicationPreloadState%2A> metodo il <xref:System.Web.Hosting.IApplicationPreloadManager> interfaccia. [!INCLUDE[iisver](~/includes/iisver-md.md)] chiamate di <xref:System.Web.Hosting.IApplicationPreloadManager.SetApplicationPreloadState%2A> metodo per notificare ASP.NET se l'applicazione che si sta caricando supporta il precaricamento.  
  
> [!NOTE]
>  Questo metodo si applica solo alle applicazioni eseguite in [!INCLUDE[iisver](~/includes/iisver-md.md)].  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="enabled" /> viene impostato su <see langword="true" /> e per l'host del processo non è stata passata precedentemente un'interfaccia <see cref="T:System.Web.Hosting.IApplicationPreloadUtil" /> al relativo metodo <see cref="M:System.Web.Hosting.IApplicationPreloadManager.SetApplicationPreloadUtil(System.Web.Hosting.IApplicationPreloadUtil)" /></exception>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="SetApplicationPreloadUtil">
      <MemberSignature Language="C#" Value="public void SetApplicationPreloadUtil (System.Web.Hosting.IApplicationPreloadUtil applicationPreloadUtil);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetApplicationPreloadUtil(class System.Web.Hosting.IApplicationPreloadUtil applicationPreloadUtil) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.SetApplicationPreloadUtil(System.Web.Hosting.IApplicationPreloadUtil)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetApplicationPreloadUtil (applicationPreloadUtil As IApplicationPreloadUtil)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetApplicationPreloadUtil(System::Web::Hosting::IApplicationPreloadUtil ^ applicationPreloadUtil);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IApplicationPreloadManager.SetApplicationPreloadUtil(System.Web.Hosting.IApplicationPreloadUtil)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationPreloadUtil" Type="System.Web.Hosting.IApplicationPreloadUtil" />
      </Parameters>
      <Docs>
        <param name="applicationPreloadUtil">Handle per un'interfaccia non gestita in [!INCLUDE[iisver](~/includes/iisver-md.md)] chiamata da ASP.NET per ottenere informazioni.</param>
        <summary>Crea un tipo che chiama [!INCLUDE[iisver](~/includes/iisver-md.md)] per ottenere le informazioni necessarie per precaricare un'applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo implementa il <xref:System.Web.Hosting.IApplicationPreloadManager.SetApplicationPreloadUtil%2A> metodo il <xref:System.Web.Hosting.IApplicationPreloadManager> interfaccia. Il metodo crea un'istanza di <xref:System.Web.Hosting.IApplicationPreloadUtil> tipo, che effettua la chiamata a [!INCLUDE[iisver](~/includes/iisver-md.md)] per ottenere informazioni di precaricamento.  
  
> [!NOTE]
>  Questo metodo si applica solo alle applicazioni eseguite in [!INCLUDE[iisver](~/includes/iisver-md.md)].  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'istanza <see cref="T:System.Web.Hosting.IApplicationPreloadUtil" /> che contiene informazioni per precaricare l'applicazione non è <see langword="null" />.</exception>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Shutdown();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IProcessHost.Shutdown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scarica l'host di processo.</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="ShutdownApplication">
      <MemberSignature Language="C#" Value="public void ShutdownApplication (string appId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShutdownApplication(string appId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.ShutdownApplication(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShutdownApplication (appId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ShutdownApplication(System::String ^ appId);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IProcessHost.ShutdownApplication(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="appId">Identificatore univoco dell'applicazione da arrestare.</param>
        <summary>Arresta l'applicazione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ProcessHost.ShutdownApplication%2A> è stato introdotto nel [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]. Per altre informazioni, vedere [Versioni e dipendenze](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="StartAppDomainProtocolListenerChannel">
      <MemberSignature Language="C#" Value="public void StartAppDomainProtocolListenerChannel (string appId, string protocolId, System.Web.Hosting.IListenerChannelCallback listenerChannelCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartAppDomainProtocolListenerChannel(string appId, string protocolId, class System.Web.Hosting.IListenerChannelCallback listenerChannelCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.StartAppDomainProtocolListenerChannel(System.String,System.String,System.Web.Hosting.IListenerChannelCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartAppDomainProtocolListenerChannel (appId As String, protocolId As String, listenerChannelCallback As IListenerChannelCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StartAppDomainProtocolListenerChannel(System::String ^ appId, System::String ^ protocolId, System::Web::Hosting::IListenerChannelCallback ^ listenerChannelCallback);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IAdphManager.StartAppDomainProtocolListenerChannel(System.String,System.String,System.Web.Hosting.IListenerChannelCallback)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="protocolId" Type="System.String" />
        <Parameter Name="listenerChannelCallback" Type="System.Web.Hosting.IListenerChannelCallback" />
      </Parameters>
      <Docs>
        <param name="appId">ID applicazione.</param>
        <param name="protocolId">ID del protocollo.</param>
        <param name="listenerChannelCallback">Callback del canale del listener di protocollo.</param>
        <summary>Avvia un canale del listener di protocollo del dominio applicazione.</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="StartApplication">
      <MemberSignature Language="C#" Value="public void StartApplication (string appId, string appPath, out object runtimeInterface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartApplication(string appId, string appPath, [out] object&amp; runtimeInterface) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.StartApplication(System.String,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartApplication (appId As String, appPath As String, ByRef runtimeInterface As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StartApplication(System::String ^ appId, System::String ^ appPath, [Runtime::InteropServices::Out] System::Object ^ % runtimeInterface);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IProcessHost.StartApplication(System.String,System.String,System.Object@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="appPath" Type="System.String" />
        <Parameter Name="runtimeInterface" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="appId">ID applicazione.</param>
        <param name="appPath">Percorso virtuale dell'applicazione.</param>
        <param name="runtimeInterface">Interfaccia del gestore di runtime.</param>
        <summary>Avvia l'applicazione specificata.</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="StartProcessProtocolListenerChannel">
      <MemberSignature Language="C#" Value="public void StartProcessProtocolListenerChannel (string protocolId, System.Web.Hosting.IListenerChannelCallback listenerChannelCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartProcessProtocolListenerChannel(string protocolId, class System.Web.Hosting.IListenerChannelCallback listenerChannelCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.StartProcessProtocolListenerChannel(System.String,System.Web.Hosting.IListenerChannelCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartProcessProtocolListenerChannel (protocolId As String, listenerChannelCallback As IListenerChannelCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StartProcessProtocolListenerChannel(System::String ^ protocolId, System::Web::Hosting::IListenerChannelCallback ^ listenerChannelCallback);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IPphManager.StartProcessProtocolListenerChannel(System.String,System.Web.Hosting.IListenerChannelCallback)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocolId" Type="System.String" />
        <Parameter Name="listenerChannelCallback" Type="System.Web.Hosting.IListenerChannelCallback" />
      </Parameters>
      <Docs>
        <param name="protocolId">ID del protocollo.</param>
        <param name="listenerChannelCallback">Callback del canale del listener di protocollo.</param>
        <summary>Avvia un canale del listener di protocollo del processo.</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="StopAppDomainProtocol">
      <MemberSignature Language="C#" Value="public void StopAppDomainProtocol (string appId, string protocolId, bool immediate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopAppDomainProtocol(string appId, string protocolId, bool immediate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.StopAppDomainProtocol(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopAppDomainProtocol (appId As String, protocolId As String, immediate As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StopAppDomainProtocol(System::String ^ appId, System::String ^ protocolId, bool immediate);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IAdphManager.StopAppDomainProtocol(System.String,System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="protocolId" Type="System.String" />
        <Parameter Name="immediate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="appId">ID applicazione.</param>
        <param name="protocolId">ID del protocollo.</param>
        <param name="immediate">Indica se arrestare il protocollo immediatamente.</param>
        <summary>Arresta un canale del listener di protocollo del dominio applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ProcessHost.StopAppDomainProtocol%2A> è stato introdotto nel [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]. Per altre informazioni, vedere [Versioni e dipendenze](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="StopAppDomainProtocolListenerChannel">
      <MemberSignature Language="C#" Value="public void StopAppDomainProtocolListenerChannel (string appId, string protocolId, int listenerChannelId, bool immediate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopAppDomainProtocolListenerChannel(string appId, string protocolId, int32 listenerChannelId, bool immediate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.StopAppDomainProtocolListenerChannel(System.String,System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopAppDomainProtocolListenerChannel (appId As String, protocolId As String, listenerChannelId As Integer, immediate As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StopAppDomainProtocolListenerChannel(System::String ^ appId, System::String ^ protocolId, int listenerChannelId, bool immediate);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IAdphManager.StopAppDomainProtocolListenerChannel(System.String,System.String,System.Int32,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="protocolId" Type="System.String" />
        <Parameter Name="listenerChannelId" Type="System.Int32" />
        <Parameter Name="immediate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="appId">ID dell'applicazione</param>
        <param name="protocolId">ID del protocollo.</param>
        <param name="listenerChannelId">ID del canale del listener di protocollo.</param>
        <param name="immediate">Indica se arrestare immediatamente il canale del listener di protocollo.</param>
        <summary>Arresta un canale del listener di protocollo del dominio applicazione.</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="StopProcessProtocol">
      <MemberSignature Language="C#" Value="public void StopProcessProtocol (string protocolId, bool immediate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopProcessProtocol(string protocolId, bool immediate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.StopProcessProtocol(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopProcessProtocol (protocolId As String, immediate As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StopProcessProtocol(System::String ^ protocolId, bool immediate);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IPphManager.StopProcessProtocol(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocolId" Type="System.String" />
        <Parameter Name="immediate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="protocolId">ID del protocollo.</param>
        <param name="immediate">Indica se arrestare il protocollo immediatamente.</param>
        <summary>Arresta un protocollo del processo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ProcessHost.StopProcessProtocol%2A> è stato introdotto nel [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]. Per altre informazioni, vedere [Versioni e dipendenze](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="StopProcessProtocolListenerChannel">
      <MemberSignature Language="C#" Value="public void StopProcessProtocolListenerChannel (string protocolId, int listenerChannelId, bool immediate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopProcessProtocolListenerChannel(string protocolId, int32 listenerChannelId, bool immediate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ProcessHost.StopProcessProtocolListenerChannel(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopProcessProtocolListenerChannel (protocolId As String, listenerChannelId As Integer, immediate As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StopProcessProtocolListenerChannel(System::String ^ protocolId, int listenerChannelId, bool immediate);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Hosting.IPphManager.StopProcessProtocolListenerChannel(System.String,System.Int32,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocolId" Type="System.String" />
        <Parameter Name="listenerChannelId" Type="System.Int32" />
        <Parameter Name="immediate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="protocolId">ID del protocollo.</param>
        <param name="listenerChannelId">Callback del canale del listener di protocollo.</param>
        <param name="immediate">Indica se arrestare immediatamente il canale del listener di protocollo.</param>
        <summary>Arresta un canale del listener di protocollo.</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>