<Type Name="ApplicationManager" FullName="System.Web.Hosting.ApplicationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3fa9dd2c9f13ca0685de293d35a22629355589b7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30539995" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ApplicationManager : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ApplicationManager extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.ApplicationManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ApplicationManager&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationManager sealed : MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gestisce i domini applicazione ASP.NET per un'applicazione di hosting ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Hosting.ApplicationManager> oggetto fornisce la gestione della durata degli oggetti nell'ambiente di hosting per un'applicazione ASP.NET. È responsabile per:  
  
-   L'attivazione e inizializzazione delle applicazioni ASP.NET.  
  
-   La gestione della durata dell'applicazione e la durata degli oggetti registrato nell'applicazione.  
  
-   Esposizione di oggetti utilizzati dall'ambiente di hosting per elaborare le richieste dell'applicazione ASP.NET.  
  
-   Fornisce un elenco di applicazioni in esecuzione nel processo di hosting in qualsiasi momento.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude tutti i domini applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se una chiamata al <xref:System.Web.Hosting.ApplicationManager.Close%2A> metodo riduce il conteggio dei riferimenti delle applicazioni che utilizzano la gestione di applicazioni su 0, il <xref:System.Web.Hosting.ApplicationManager.Close%2A> chiamate al metodo di <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateObject">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un oggetto per il dominio dell'applicazione e il tipo di oggetto specificati.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (System.Web.Hosting.IApplicationHost appHost, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(class System.Web.Hosting.IApplicationHost appHost, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::Web::Hosting::IApplicationHost ^ appHost, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appHost" Type="System.Web.Hosting.IApplicationHost" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appHost">Oggetto <see cref="T:System.Web.Hosting.IApplicationHost" />.</param>
        <param name="type">Tipo di oggetto da creare.</param>
        <summary>Crea un oggetto per il dominio applicazione specificato, in base al tipo.</summary>
        <returns>Nuovo oggetto del tipo specificato in <paramref name="type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> è stato introdotto in .NET Framework versione 3.5.  Per altre informazioni, vedere [Versioni e dipendenze](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Non esiste un percorso fisico per l'applicazione.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appHost" /> è <see langword="null" />.  
  
 \- oppure -  
  
 <paramref name="type" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(string appId, class System.Type type, string virtualPath, string physicalPath, bool failIfExists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::String ^ appId, Type ^ type, System::String ^ virtualPath, System::String ^ physicalPath, bool failIfExists);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="physicalPath" Type="System.String" />
        <Parameter Name="failIfExists" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="appId">Identificatore univoco dell'applicazione a cui appartiene l'oggetto.</param>
        <param name="type">Tipo di oggetto da creare.</param>
        <param name="virtualPath">Percorso virtuale dell'applicazione.</param>
        <param name="physicalPath">Percorso fisico dell'applicazione.</param>
        <param name="failIfExists">
          <see langword="true" /> per generare un'eccezione se un oggetto del tipo specificato è attualmente registrato, <see langword="false" /> per restituire l'oggetto registrato del tipo specificato.</param>
        <summary>Crea un oggetto per il dominio applicazione specificato in base al tipo, ai percorsi fisico e virtuale e a un valore booleano che indica un comportamento di errore quando un oggetto del tipo specificato esiste già.</summary>
        <returns>Nuovo oggetto di <paramref name="type" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metodo viene utilizzato per creare e registrare gli oggetti nell'applicazione. Un solo oggetto di ogni tipo può essere creato. Se è necessario creare più oggetti dello stesso tipo, è necessario implementare una factory di oggetti. Per ulteriori informazioni, vedere l'esempio di codice in questo argomento.  
  
 Ogni applicazione, identificato da un identificatore univoco dell'applicazione, viene eseguita nel proprio dominio applicazione. Il <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metodo crea un oggetto del tipo specificato nel dominio dell'applicazione dell'applicazione specificato nella `appID` parametro. Se non esiste un dominio applicazione per l'applicazione specificata, ne viene creata prima della creazione dell'oggetto.  
  
 Il `failIfExists` parametro controlla il comportamento del <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metodo quando nell'applicazione esiste già un oggetto del tipo specificato. Quando `failIfExists` è `true`, <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metodo genera un <xref:System.InvalidOperationException> eccezione.  
  
 Quando `failIfExists` è `false`, <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> il metodo restituisce l'oggetto registrato esistente del tipo specificato.  
  
 Il <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metodo chiama l'overload che accetta un ulteriore `throwOnError` parametro con `throwOnError` impostato su `false`.  
  
   
  
## Examples  
 Esempio di codice seguente è un'implementazione del modello di progettazione di oggetti factory per gli oggetti registrati. Utilizzando il modello di factory consente di registrare più istanze di un oggetto. L'esempio contiene due oggetti: `SampleComponent`, che rappresenta l'oggetto, l'applicazione utilizzerà più istanze, e `SampleComponentFactory`, che gestisce un elenco di `SampleComponent` istanze.  
  
 [!code-csharp[System.Web.Hosting.ApplicationManager#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/CS/appManagercs.aspx.cs#1)]
 [!code-vb[System.Web.Hosting.ApplicationManager#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/VB/appManagervb.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="physicalPath" /> è <see langword="null" />  
  
 \- oppure -  
  
 <paramref name="physicalPath" /> non è un percorso di applicazione valido.  
  
 \- oppure -  
  
 <paramref name="type" /> non implementa l'interfaccia <see cref="T:System.Web.Hosting.IRegisteredObject" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appID" /> è <see langword="null" />.  
  
 \- oppure -  
  
 <paramref name="type" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="failIfExists" /> è <see langword="true" /> e un oggetto del tipo specificato è già registrato.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(string appId, class System.Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::String ^ appId, Type ^ type, System::String ^ virtualPath, System::String ^ physicalPath, bool failIfExists, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="physicalPath" Type="System.String" />
        <Parameter Name="failIfExists" Type="System.Boolean" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="appId">Identificatore univoco dell'applicazione a cui appartiene l'oggetto.</param>
        <param name="type">Tipo di oggetto da creare.</param>
        <param name="virtualPath">Percorso virtuale dell'applicazione.</param>
        <param name="physicalPath">Percorso fisico dell'applicazione.</param>
        <param name="failIfExists">
          <see langword="true" /> per generare un'eccezione se un oggetto del tipo specificato è attualmente registrato, <see langword="false" /> per restituire l'oggetto registrato del tipo specificato.</param>
        <param name="throwOnError">
          <see langword="true" /> per generare eccezioni provocate da errori di inizializzazione dell'host, <see langword="false" /> per non generare tali eccezioni.</param>
        <summary>Crea un oggetto per il dominio applicazione specificato in base al tipo, ai percorsi fisico e virtuale, a un valore booleano che indica un comportamento di errore quando un oggetto del tipo specificato esiste già e a un altro valore booleano che indica se vengono generate eccezioni provocate da errori di inizializzazione dell'host.</summary>
        <returns>Nuovo oggetto di <paramref name="type" /> specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload del metodo di <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metodo fornisce il `throwOnError` parametro, che consente di controllare se vengono generate eccezioni di inizializzazione dell'host. L'overload del metodo di <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metodo che non fornisce `throwOnError` chiama questo overload con il parametro impostato su `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="physicalPath" /> è <see langword="null" />  
  
 \- oppure -  
  
 <paramref name="physicalPath" /> non è un percorso di applicazione valido.  
  
 \- oppure -  
  
 <paramref name="type" /> non implementa l'interfaccia <see cref="T:System.Web.Hosting.IRegisteredObject" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appID" /> è <see langword="null" />.  
  
 \- oppure -  
  
 <paramref name="type" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="failIfExists" /> è <see langword="true" /> e un oggetto del tipo specificato è già registrato.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAppDomain">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene il dominio applicazione di un'applicazione specificata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAppDomain">
      <MemberSignature Language="C#" Value="public AppDomain GetAppDomain (string appId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.AppDomain GetAppDomain(string appId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppDomain (appId As String) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomain ^ GetAppDomain(System::String ^ appId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="appId">Identificatore univoco dell'applicazione.</param>
        <summary>Ottiene il dominio applicazione dell'applicazione specificata.</summary>
        <returns>Dominio applicazione dell'applicazione.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppDomain">
      <MemberSignature Language="C#" Value="public AppDomain GetAppDomain (System.Web.Hosting.IApplicationHost appHost);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.AppDomain GetAppDomain(class System.Web.Hosting.IApplicationHost appHost) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppDomain (appHost As IApplicationHost) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomain ^ GetAppDomain(System::Web::Hosting::IApplicationHost ^ appHost);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appHost" Type="System.Web.Hosting.IApplicationHost" />
      </Parameters>
      <Docs>
        <param name="appHost">Host per cui ottenere il dominio applicazione.</param>
        <summary>Ottiene il dominio applicazione di un'applicazione utilizzando l'host specificato.</summary>
        <returns>Dominio applicazione dell'applicazione.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationManager">
      <MemberSignature Language="C#" Value="public static System.Web.Hosting.ApplicationManager GetApplicationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Hosting.ApplicationManager GetApplicationManager() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetApplicationManager" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetApplicationManager () As ApplicationManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Hosting::ApplicationManager ^ GetApplicationManager();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.ApplicationManager</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce la singola istanza dell'oggetto <see cref="T:System.Web.Hosting.ApplicationManager" /> associato a questo processo host ASP.NET.</summary>
        <returns>Singola istanza dell'oggetto <see cref="T:System.Web.Hosting.ApplicationManager" /> associato al processo host ASP.NET in esecuzione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo un'istanza di <xref:System.Web.Hosting.ApplicationManager> oggetto creato da un processo host ASP.NET nel dominio applicazione predefinito. Se un'istanza del <xref:System.Web.Hosting.ApplicationManager> classe non è disponibile, il <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> metodo crea innanzitutto un'istanza di <xref:System.Web.Hosting.ApplicationManager> classe e quindi restituisce l'oggetto appena creato. Se un'istanza di <xref:System.Web.Hosting.ApplicationManager> classe è stata creata in precedenza, il <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> metodo restituisce l'oggetto esistente.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> metodo per recuperare il <xref:System.Web.Hosting.ApplicationManager> istanza per un'applicazione Web.  
  
 [!code-aspx-csharp[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/CS/applicationInfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/VB/applicationInfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject GetObject (string appId, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject GetObject(string appId, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ GetObject(System::String ^ appId, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appId">Identificatore univoco dell'applicazione a cui appartiene l'oggetto.</param>
        <param name="type">Tipo di oggetto da restituire.</param>
        <summary>Restituisce l'oggetto registrato del tipo specificato dall'applicazione specificata.</summary>
        <returns>Oggetto registrato del tipo specificato o <see langword="null" /> se il tipo non è stato registrato mediante una chiamata al metodo <see cref="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appId" /> è <see langword="null" />.  
  
 -oppure-  
  
 <paramref name="type" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunningApplications">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.ApplicationInfo[] GetRunningApplications ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.ApplicationInfo[] GetRunningApplications() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetRunningApplications" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRunningApplications () As ApplicationInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Web::Hosting::ApplicationInfo ^&gt; ^ GetRunningApplications();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.ApplicationInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce uno snapshot delle applicazioni in esecuzione.</summary>
        <returns>Matrice di oggetti <see cref="T:System.Web.Hosting.ApplicationInfo" /> che contiene informazioni sulle applicazioni gestite da questa istanza <see cref="T:System.Web.Hosting.ApplicationManager" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.Hosting.ApplicationManager.GetRunningApplications%2A> metodo per visualizzare informazioni sulle applicazioni gestite da un <xref:System.Web.Hosting.ApplicationManager> istanza.  
  
 [!code-aspx-csharp[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/CS/applicationInfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/VB/applicationInfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fornisce una durata infinita al dominio applicazione impedendo la creazione di lease.</summary>
        <returns>Sempre <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue l'override di <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> metodo nella classe base. Restituisce sempre `null` e, pertanto, impedisce la creazione di lease per limita la durata del dominio applicazione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsIdle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.IsIdle" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIdle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un valore che indica se tutte le applicazioni contenute dal processo sono inattive e non stanno elaborando alcuna richiesta.</summary>
        <returns>
          <see langword="true" /> se tutte le applicazioni nel processo sono inattive. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Hosting.ApplicationManager.IsIdle%2A> restituisce `true` se tutte le applicazioni ospitate da parte del processo sono inattive.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.Open" />
      <MemberSignature Language="VB.NET" Value="Public Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Open();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Effettua un incremento thread-safe del numero dei riferimenti utente dell'istanza ApplicationManager.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownAll">
      <MemberSignature Language="C#" Value="public void ShutdownAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShutdownAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.ShutdownAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShutdownAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShutdownAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scarica tutte le risorse dell'applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chiamata il <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> è equivalente alla chiamata al metodo il <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=nameWithType> in tutti i domini applicazioni gestite da questo metodo <xref:System.Web.Hosting.ApplicationManager> dell'istanza; tuttavia, il <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> metodo può essere chiamato dall'esterno dei domini applicazione gestita.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownApplication">
      <MemberSignature Language="C#" Value="public void ShutdownApplication (string appId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShutdownApplication(string appId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShutdownApplication (appId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShutdownApplication(System::String ^ appId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="appId">Identificatore univoco dell'applicazione da scaricare.</param>
        <summary>Scarica l'applicazione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chiamata il <xref:System.Web.Hosting.ApplicationManager.ShutdownApplication%2A> è equivalente alla chiamata al metodo il <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=nameWithType> metodo per un dominio di applicazione specifico; tuttavia, il <xref:System.Web.Hosting.ApplicationManager.ShutdownApplication%2A> metodo può essere chiamato da domini di applicazione gestita all'esterno.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appId" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="StopObject">
      <MemberSignature Language="C#" Value="public void StopObject (string appId, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopObject(string appId, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopObject(System::String ^ appId, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appId">Identificatore univoco dell'applicazione a cui appartiene l'oggetto.</param>
        <param name="type">Tipo di oggetto da scaricare.</param>
        <summary>Rimuove l'oggetto specificato dall'elenco degli oggetti registrati in un'applicazione. Se l'oggetto da rimuovere è l'ultimo nell'elenco degli oggetti registrati in un'applicazione, quest'ultima viene scaricata.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appId" /> è <see langword="null" />.  
  
 \- oppure -  
  
 <paramref name="type" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>