<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c7dce80a933a27eaa77acb354c2371a2a13304a6" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39803290" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecureString = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Rappresenta il testo che deve rimanere riservato, ad esempio eliminandolo dalla memoria del computer quando non è più necessario. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString> è un tipo stringa che fornisce una misura di sicurezza. Tenta di evitare di archiviare le stringhe potrebbero contenere informazioni riservate nella memoria del processo come testo normale.  (Per le limitazioni, tuttavia, vedere la [quanto sono sicuri SecureString?](#HowSecure) sezione.) Il valore di un'istanza di <xref:System.Security.SecureString> vengono automaticamente protetti tramite un meccanismo supportato dalla piattaforma sottostante quando l'istanza viene inizializzata o quando viene modificato il valore. L'applicazione può eseguire il rendering l'istanza non modificabile e impedire un'ulteriore modifica richiamando il <xref:System.Security.SecureString.MakeReadOnly%2A> (metodo).  
  
 La lunghezza massima di un <xref:System.Security.SecureString> istanza è 65.536 caratteri.  
  
> [!IMPORTANT]
>  Questo tipo implementa la <xref:System.IDisposable> interfaccia. Dopo aver utilizzando un'istanza del tipo, è necessario eliminarlo direttamente o indirettamente. Per eliminare il tipo direttamente, chiamare relativi <xref:System.IDisposable.Dispose%2A> metodo in un `try` / `catch` blocco. Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio come ad esempio `using` in C# o `Using` in Visual Basic. Per altre informazioni, vedere la sezione "Utilizzo di oggetti che implementano IDisposable" nel <xref:System.IDisposable> argomento relativo all'interfaccia.  
  
 Il <xref:System.Security.SecureString> classe e i relativi membri non sono visibili a COM. Per ulteriori informazioni, vedere <xref:System.Runtime.InteropServices.ComVisibleAttribute>.  
  
 Contenuto della sezione:  
  
 [Stringhe Visual Studio. SecureString](#vsString)   
 [Operazioni di SecureString](#Ops)   
 [SecureString e interoperabilità](#interop)   
 [Quanto sono sicuri SecureString?](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a>String o SecureString  
 Un'istanza di <xref:System.String?displayProperty=nameWithType> classe non è modificabile e, quando non servono più, non è a livello di programmazione pianificata per l'operazione di garbage collection; vale a dire, l'istanza è di sola lettura dopo la creazione e non è possibile prevedere quando sarà l'istanza eliminato dalla memoria del computer. Poiché <xref:System.String?displayProperty=nameWithType> istanze non sono modificabili, le operazioni che sembrano modificare un'istanza esistente creano effettivamente una copia da modificare. Di conseguenza, se un <xref:System.String> oggetto contiene informazioni riservate, ad esempio una password, il numero di carta di credito o dati personali, sussiste il rischio le informazioni potrebbero essere rivelate dopo che viene usato poiché l'applicazione non è possibile eliminare i dati dalla memoria del computer .  
  
 Oggetto <xref:System.Security.SecureString> è simile all'oggetto un <xref:System.String> poiché dispone di un valore di testo dell'oggetto. Tuttavia, il valore di un <xref:System.Security.SecureString> oggetto è bloccato in memoria, può usare un meccanismo di protezione, come crittografia, fornita dal sistema operativo sottostante, può essere modificata fino a quando non viene contrassegnato come di sola lettura, l'applicazione e può essere eliminato dalla memoria del computer tramite l'applicazione che chiama il <xref:System.Security.SecureString.Dispose%2A> metodo o dal garbage collector di .NET Framework.  
  
 Per una discussione sulle limitazioni dei <xref:System.Security.SecureString> classe, vedere la [quanto sono sicuri SecureString?](#HowSecure) sezione.  
  
 [Torna all'inizio](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a>Operazioni di SecureString  
 Il <xref:System.Security.SecureString> classe include i membri che consentono di eseguire le operazioni seguenti:  
  
 Creare un'istanza di un <xref:System.Security.SecureString> oggetto  
 Crea un'istanza di un <xref:System.Security.SecureString> oggetto chiamando il costruttore senza parametri.  
  
 Aggiungere caratteri per un <xref:System.Security.SecureString> oggetto  
 È possibile aggiungere un singolo carattere alla volta da un <xref:System.Security.SecureString> chiamando relativi <xref:System.Security.SecureString.AppendChar%2A> o <xref:System.Security.SecureString.InsertAt%2A> (metodo).  
  
> [!IMPORTANT]
>  Oggetto <xref:System.Security.SecureString> oggetto non deve essere mai creato da un <xref:System.String>, in quanto i dati sensibili sono già soggetti alle conseguenze di persistenza della memoria di non modificabile <xref:System.String> classe. Il modo migliore per costruire una <xref:System.Security.SecureString> oggetto proviene da un'origine non gestita di carattere alla volta, ad esempio il <xref:System.Console.ReadKey%2A?displayProperty=nameWithType> (metodo).  
  
 Rimuovere i caratteri da un <xref:System.Security.SecureString> oggetto  
 È possibile sostituire un singolo carattere chiamando il <xref:System.Security.SecureString.SetAt%2A> metodo, rimuovere un singolo carattere chiamando il <xref:System.Security.SecureString.RemoveAt%2A> metodo oppure rimuovere tutti i caratteri dalle <xref:System.Security.SecureString> istanza chiamando il <xref:System.Security.SecureString.Clear%2A> (metodo).  
  
 Rendere il <xref:System.Security.SecureString> oggetto sola lettura  
 Dopo aver definito la stringa che il <xref:System.Security.SecureString> rappresenta l'oggetto, si chiama il <xref:System.Security.SecureString.MakeReadOnly%2A> metodo per rendere la stringa di sola lettura.  
  
 Ottenere le informazioni di <xref:System.Security.SecureString> oggetto  
 Il <xref:System.Security.SecureString> classe ha solo due membri che forniscono informazioni sulla stringa di: relativi <xref:System.Security.SecureString.Length%2A> proprietà, che indica il numero di unità di codice UTF16 codificate nella stringa; e <xref:System.Security.SecureString.IsReadOnly%2A>, metodo, che indica se l'istanza è sola lettura.  
  
 Rilasciare la memoria allocata per il <xref:System.Security.SecureString> istanza  
 In quanto <xref:System.Security.SecureString> implementa la <xref:System.IDisposable> interfaccia, si rilascia la memoria chiamando la <xref:System.Security.SecureString.Dispose%2A> (metodo).  
  
 Il <xref:System.Security.SecureString> classe non contiene membri che esaminano, confrontano o convertono il valore di un <xref:System.Security.SecureString>. L'assenza di tali membri aiuta a proteggere il valore dell'istanza dall'esposizione accidentale o intenzionale. Utilizzare i membri appropriati del <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> classe, ad esempio il <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> metodo, per modificare il valore di un <xref:System.Security.SecureString> oggetto.  
  
 La libreria di classi .NET Framework usato comunemente <xref:System.Security.SecureString> istanze nei modi seguenti:  
  
-   Fornire informazioni relative alla password per un processo usando la <xref:System.Diagnostics.ProcessStartInfo> struttura oppure chiamando un overload del <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> metodo che presenta un parametro di tipo <xref:System.Security.SecureString>.  
  
-   Per fornire le informazioni sulla password di rete chiamando un <xref:System.Net.NetworkCredential> costruttore di classe con un parametro di tipo <xref:System.Security.SecureString> oppure usando il <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> proprietà.  
  
-   Per fornire informazioni relative alla password per l'autenticazione di SQL Server chiamando il <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> costruttore o il recupero del valore della <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> proprietà.  
  
-   Per passare una stringa a codice non gestito. Per altre informazioni, vedere la [SecureString e interoperabilità](#interop) sezione.  
  
 [Torna all'inizio](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a>SecureString e interoperabilità  
 Poiché il sistema operativo non supporta direttamente <xref:System.Security.SecureString>, è necessario convertire il valore della <xref:System.Security.SecureString> oggetto al tipo stringa obbligatorie prima di passare la stringa a un metodo nativo.  Il <xref:System.Runtime.InteropServices.Marshal> classe dispone di cinque metodi che eseguono questa operazione:  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>, che consente di convertire il <xref:System.Security.SecureString> valore stringa da una stringa binaria (BSTR) riconosciuta da COM.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> e <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>, che copia il <xref:System.Security.SecureString> valore stringa da una stringa ANSI nella memoria non gestita.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> e <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>, che copia il <xref:System.Security.SecureString> valore stringa da una stringa Unicode nella memoria non gestita.  
  
 Ognuno di questi metodi consente di creare una stringa di testo non crittografato nella memoria non gestita. È responsabilità dello sviluppatore per azzerare e liberare memoria, non appena non è più necessario. Ciascuno dei metodi di allocazione memoria e di conversione stringa ha un metodo corrispondente per azzerare e liberare la memoria allocata:  
  
|Metodo di allocazione e la conversione|Uguale a zero e free (metodo)|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [Torna all'inizio](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a>Quanto sono sicuri SecureString?  
 Quando creato correttamente, un <xref:System.Security.SecureString> istanza garantisca una maggiore protezione dei dati rispetto a un <xref:System.String>. Quando si crea una stringa da un'origine, carattere alla volta <xref:System.String> consente di creare più intermedio in memoria, mentre <xref:System.Security.SecureString> crea solo una singola istanza.  Operazione di Garbage collection <xref:System.String> oggetti è non deterministico. Inoltre, poiché la memoria non è stato aggiunto, il garbage collector verrà effettuarne ulteriori copie <xref:System.String> valori quando lo spostamento e la compattazione della memoria. Al contrario, la memoria allocata a un <xref:System.Security.SecureString> oggetto è bloccato e che la memoria può essere liberata chiamando la <xref:System.Security.SecureString.Dispose%2A> (metodo).  
  
 Anche se i dati archiviati in un <xref:System.Security.SecureString> istanza è più sicura rispetto ai dati archiviati in un <xref:System.String> dell'istanza, esistono limitazioni significative in modo sicuro un <xref:System.Security.SecureString> istanza è. Sono inclusi:  
  
 Piattaforma  
 Nel sistema operativo Windows, il contenuto di un <xref:System.Security.SecureString> matrice di caratteri interno dell'istanza vengono crittografati. Tuttavia, se a causa della mancanza di API o problemi di gestione delle chiavi, crittografia non è disponibile in tutte le piattaforme. A causa di questa dipendenza dalla piattaforma, <xref:System.Security.SecureString> non esegue la crittografia di archiviazione interno sulla piattaforma non Windows. Altre tecniche consentono di queste piattaforme offrono protezione aggiuntiva.
  
 Durata  
 Anche se il <xref:System.Security.SecureString> implementazione è in grado di sfruttare i vantaggi della crittografia, il testo normale assegnati al <xref:System.Security.SecureString> istanza può essere esposta in momenti diversi:  
  
-   Perché Windows non offre un'implementazione di stringa sicura a livello di sistema operativo, .NET Framework ha ancora convertire il valore di stringa sicura nella relativa rappresentazione di testo normale per poterlo usare.  
  
-   Ogni volta che viene modificato il valore della stringa protetta dai metodi, ad esempio <xref:System.Security.SecureString.AppendChar%2A> o <xref:System.Security.SecureString.RemoveAt%2A>, deve essere decrittografato (ad esempio, convertire back in testo normale), modificare e quindi crittografate di nuovo.  
  
-   Se la stringa sicura viene utilizzata in una chiamata di interoperabilità, questo deve essere convertito in una stringa ANSI, una stringa Unicode o stringa binaria (BSTR). Per altre informazioni, vedere la [SecureString e interoperabilità](#interop) sezione.  
  
 L'intervallo di tempo per cui il <xref:System.Security.SecureString> valore dell'istanza viene esposto viene semplicemente passato al <xref:System.String> classe.  
  
 Archiviazione e utilizzo  
 Più in generale, il <xref:System.Security.SecureString> classe definisce un meccanismo di archiviazione per i valori di stringa che deve essere protetto o garantire la riservatezza. Tuttavia, di fuori di .NET Framework stesso, non supporta alcun meccanismo di utilizzo <xref:System.Security.SecureString>. Ciò significa che la stringa sicura deve essere convertita in un formato utilizzabile (in genere un formato di testo non crittografato) che può essere riconosciuto dal relativo tipo di destinazione e che deve verificarsi la decrittografia e la conversione nello spazio utente.  
  
 Complessivo <xref:System.Security.SecureString> è più sicura <xref:System.String> perché limita l'esposizione dei dati di stringa sensibile. Tuttavia, tali stringhe possono essere comunque esposto al qualsiasi processo o un'operazione che ha accesso alla memoria non elaborata, ad esempio un processo dannoso in esecuzione nel computer host, un dump del processo o un file di scambio visualizzabile dall'utente. Invece di usare <xref:System.Security.SecureString> per proteggere le password, l'alternativa consigliata consiste nell'usare un handle opaco per le credenziali archiviate all'esterno del processo.  
  
 [Torna all'inizio](#top)  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare un <xref:System.Security.SecureString> per proteggere la password dell'utente per l'uso come credenziale per avviare un nuovo processo.  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.SecureString" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.SecureString" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente usa il valore predefinito (o senza parametri) per creare un'istanza di un nuovo costruttore <xref:System.Security.SecureString> oggetto. Chiama quindi il <xref:System.Security.SecureString.AppendChar%2A> metodo per aggiungere una matrice di caratteri a esso.  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 L'esempio seguente crea una <xref:System.Security.SecureString> oggetto dal valore di un <xref:System.String> oggetto.  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa istanza.</exception>
        <exception cref="T:System.NotSupportedException">Questa operazione non è supportata su questa piattaforma.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberSignature Language="F#" Value="new System.Security.SecureString : nativeptr&lt;char&gt; * int -&gt; System.Security.SecureString" Usage="new System.Security.SecureString (value, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Puntatore a una matrice di oggetti <see cref="T:System.Char" />.</param>
        <param name="length">Numero di elementi di <c>value</c> da includere nella nuova istanza.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.SecureString" /> da una sottomatrice di oggetti <see cref="T:System.Char" />.  Questo costruttore non è conforme a CLS. L'alternativa conforme a CLS è <see cref="M:System.Security.SecureString.#ctor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza la nuova <xref:System.Security.SecureString> sul numero di caratteri nell'oggetto `value` specificato da `length`; il valore dell'istanza viene quindi crittografato.  
  
 In c#, questo costruttore viene definito solo nel contesto del codice unsafe.  
  
   
  
## Examples  
 Nell'esempio seguente crea un'istanza di un nuovo <xref:System.Security.SecureString> oggetto passando al costruttore un puntatore a una matrice di caratteri.  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="length" /> è minore di zero o maggiore di 65.536.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa stringa protetta.</exception>
        <exception cref="T:System.NotSupportedException">Questa operazione non è supportata su questa piattaforma.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">richiede l'attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberSignature Language="F#" Value="member this.AppendChar : char -&gt; unit" Usage="secureString.AppendChar c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">Carattere da aggiungere a questa stringa protetta.</param>
        <summary>Aggiunge un carattere alla fine della stringa protetta corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'implementazione utilizza un meccanismo di protezione, ad esempio la crittografia, il valore di questa stringa protetta, se presente, è protetto; `c` viene accodato; quindi il nuovo valore della stringa protetta sarà di nuovo protetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, e <xref:System.Security.SecureString.Clear%2A> metodi effetto sul valore di un <xref:System.Security.SecureString> oggetto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A> e <xref:System.Security.SecureString.RemoveAt%2A> metodi possono essere utilizzati per raccogliere i caratteri in una password.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <exception cref="T:System.InvalidOperationException">Questa stringa protetta è di sola lettura.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Con questa operazione la lunghezza della stringa protetta sarà superiore a 65.536 caratteri.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa stringa protetta.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="secureString.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Elimina il valore della stringa protetta corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La memoria del computer che contiene il valore di questa stringa protetta viene azzerata, quindi la lunghezza del valore di questa stringa protetta è impostata su zero.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, e <xref:System.Security.SecureString.Clear%2A> metodi effetto sul valore di un <xref:System.Security.SecureString> oggetto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <exception cref="T:System.InvalidOperationException">Questa stringa protetta è di sola lettura.</exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Security.SecureString" Usage="secureString.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia della stringa protetta corrente.</summary>
        <returns>Duplicato di questa stringa protetta.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un'istanza di un <xref:System.Security.SecureString> è di sola lettura, la copia di tale istanza non sarà sola lettura.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa stringa protetta.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="secureString.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate dall'oggetto <see cref="T:System.Security.SecureString" /> corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Security.SecureString.Dispose%2A> metodo scrive zero binari per la memoria allocata che contiene il valore di questo <xref:System.Security.SecureString> dell'oggetto, quindi libera la memoria allocata.  
  
 Per altre informazioni, vedere [Garbage Collection](~/docs/standard/garbage-collection/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.InsertAt : int * char -&gt; unit" Usage="secureString.InsertAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Posizione di indice in cui viene inserito il parametro <c>c</c>.</param>
        <param name="c">Carattere da inserire.</param>
        <summary>Inserisce un carattere in questa stringa protetta nella posizione di indice specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'indice è in base zero. il primo carattere in questa stringa protetta è nella posizione di indice da zero.  
  
 Se l'implementazione utilizza un meccanismo di protezione, ad esempio la crittografia, il valore della stringa sicura, se presente, è protetto; `c` viene inserito in corrispondenza della posizione di indice specificato; il valore della nuova riprotetta. Il <xref:System.Security.SecureString.InsertAt%2A> metodo produce gli stessi risultati di <xref:System.Security.SecureString.AppendChar%2A> metodo, che inserisce un carattere alla fine di una stringa sicura, se il `index` parametro di <xref:System.Security.SecureString.InsertAt%2A> è impostato sulla lunghezza di questa istanza.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, e <xref:System.Security.SecureString.Clear%2A> metodi effetto sul valore di un <xref:System.Security.SecureString> oggetto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <exception cref="T:System.InvalidOperationException">Questa stringa protetta è di sola lettura.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> è minore di zero o maggiore della lunghezza della stringa protetta.  -o-  L'esecuzione di questa operazione fa sì che la lunghezza della stringa protetta sia superiore a 65.536 caratteri.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa stringa protetta.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : unit -&gt; bool" Usage="secureString.IsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica se questa stringa protetta è contrassegnata come di sola lettura.</summary>
        <returns>
          <see langword="true" /> se questa stringa protetta è contrassegnata come di sola lettura; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dopo un'istanza di <xref:System.Security.SecureString> è di sola lettura per il <xref:System.Security.SecureString.MakeReadOnly%2A> metodo, qualsiasi tentativo di modificare il valore di istanza genera un <xref:System.InvalidOperationException>. Usare la <xref:System.Security.SecureString.IsReadOnly%2A> metodo per testare se un <xref:System.Security.SecureString> è di sola lettura prima di provare a modificarlo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Security.SecureString.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di caratteri nella stringa protetta corrente.</summary>
        <value>Numero di oggetti <see cref="T:System.Char" /> in questa stringa protetta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Security.SecureString.Length%2A> proprietà restituisce il numero di <xref:System.Char> oggetti in questo caso, non il numero di caratteri Unicode. Un carattere Unicode può essere rappresentato da più di un <xref:System.Char> oggetto.  
  
 La lunghezza massima di un <xref:System.Security.SecureString> istanza è 65.536 caratteri.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberSignature Language="F#" Value="member this.MakeReadOnly : unit -&gt; unit" Usage="secureString.MakeReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rende il valore di testo di questa stringa protetta di sola lettura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inizializzare il valore di testo di un'istanza del <xref:System.Security.SecureString> classe con il <xref:System.Security.SecureString.%23ctor%2A> costruttori e modificare il valore con il <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, e <xref:System.Security.SecureString.AppendChar%2A> metodi.  
  
 Dopo avere apportato le modifiche finali, usare il <xref:System.Security.SecureString.MakeReadOnly%2A> metodo per rendere il valore dell'istanza non modificabile (sola lettura). Dopo che il valore è contrassegnato come di sola lettura, eventuali ulteriori tentativi a modificarlo viene generata un' <xref:System.InvalidOperationException>.  
  
 L'effetto della chiamata <xref:System.Security.SecureString.MakeReadOnly%2A> è permanente perché il <xref:System.Security.SecureString> classe in alcun modo per rendere modificabile anche in questo caso la stringa sicura. Usare la <xref:System.Security.SecureString.IsReadOnly%2A> metodo per verificare se un'istanza di <xref:System.Security.SecureString> è di sola lettura.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A> e <xref:System.Security.SecureString.RemoveAt%2A> metodi possono essere utilizzati per raccogliere i caratteri in una password. Dopo la raccolta della password, viene reso sola lettura.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="secureString.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Posizione di indice di un carattere in questa stringa protetta.</param>
        <summary>Rimuove il carattere nella posizione di indice specificata da questa stringa protetta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'indice è in base zero. il primo carattere in questa istanza è nella posizione di indice da zero.  
  
 Se l'implementazione utilizza un meccanismo di protezione, ad esempio la crittografia, il valore di questa stringa protetta, se presente, è protetto; viene rimosso il carattere alla posizione di indice specificata. il nuovo valore quindi sarà di nuovo protetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, e <xref:System.Security.SecureString.Clear%2A> metodi effetto sul valore di un <xref:System.Security.SecureString> oggetto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A> e <xref:System.Security.SecureString.RemoveAt%2A> metodi possono essere utilizzati per raccogliere i caratteri in una password.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <exception cref="T:System.InvalidOperationException">Questa stringa protetta è di sola lettura.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> è minore di zero oppure maggiore o uguale alla lunghezza di questa stringa protetta.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa stringa protetta.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * char -&gt; unit" Usage="secureString.SetAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Posizione di indice di un carattere esistente in questa stringa protetta.</param>
        <param name="c">Carattere che sostituisce il carattere esistente.</param>
        <summary>Sostituisce il carattere esistente nella posizione di indice specificata con un altro carattere.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'indice è in base zero. il primo carattere in questa istanza è nella posizione di indice da zero.  
  
 Se l'implementazione utilizza un meccanismo di protezione, ad esempio la crittografia, il valore della stringa sicura, se presente, è protetto; `c` viene assegnato alla posizione dell'indice specificato; il valore della nuova riprotetta.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, e <xref:System.Security.SecureString.Clear%2A> metodi effetto sul valore di un <xref:System.Security.SecureString> oggetto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <exception cref="T:System.InvalidOperationException">Questa stringa protetta è di sola lettura.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> è minore di zero oppure maggiore o uguale alla lunghezza di questa stringa protetta.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa stringa protetta.</exception>
      </Docs>
    </Member>
  </Members>
</Type>