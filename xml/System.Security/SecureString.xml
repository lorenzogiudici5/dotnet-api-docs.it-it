<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7e660e4093f886ad6783fec776da81c3aa1b77e7" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34452073" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Rappresenta il testo che deve rimanere riservato, ad esempio eliminandolo dalla memoria del computer quando non è più necessario. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString> è un tipo stringa che fornisce una misura di sicurezza. Tenta di evitare di archiviare le stringhe potrebbero contenere informazioni riservate nella memoria di processo come testo normale.  (Per le limitazioni, tuttavia, vedere il [come proteggere è SecureString?](#HowSecure) sezione.) Il valore di un'istanza di <xref:System.Security.SecureString> viene protetto automaticamente utilizzando un meccanismo quando l'istanza è inizializzata o quando viene modificato il valore è supportato dalla piattaforma sottostante. L'applicazione può eseguire il rendering di istanza non modificabile e impedire un'ulteriore modifica richiamando il <xref:System.Security.SecureString.MakeReadOnly%2A> metodo.  
  
 La lunghezza massima di un <xref:System.Security.SecureString> istanza è 65.536 caratteri.  
  
> [!IMPORTANT]
>  Questo tipo implementa il <xref:System.IDisposable> interfaccia. Al termine dell'utilizzo di un'istanza del tipo, è necessario eliminarlo direttamente o indirettamente di esso. Per eliminare direttamente il tipo, chiamare il relativo <xref:System.IDisposable.Dispose%2A> metodo in un `try` / `catch` blocco. Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio come ad esempio `using` in C# o `Using` in Visual Basic. Per ulteriori informazioni, vedere la sezione "Utilizzo di oggetti che implementano IDisposable" nel <xref:System.IDisposable> argomento relativo all'interfaccia.  
  
 La <xref:System.Security.SecureString> classe e i relativi membri non sono visibili a COM. Per ulteriori informazioni, vedere <xref:System.Runtime.InteropServices.ComVisibleAttribute>.  
  
 Contenuto della sezione:  
  
 [Visual Studio di stringa. SecureString](#vsString)   
 [Operazioni di SecureString](#Ops)   
 [SecureString e interoperabilità](#interop)   
 [Modalità di protezione è SecureString?](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a>Stringa e SecureString  
 Un'istanza di <xref:System.String?displayProperty=nameWithType> classe non è modificabile e, quando non è più necessario, non può essere pianificata a livello di codice per l'operazione di garbage collection; l'istanza è in sola lettura dopo la creazione e non è possibile prevedere quando l'istanza verrà eliminato dalla memoria del computer. Poiché <xref:System.String?displayProperty=nameWithType> istanze non sono modificabili, operazioni che vengono visualizzati per modificare un'istanza esistente in realtà creano una copia da modificare. Di conseguenza, se un <xref:System.String> oggetto contiene informazioni riservate, ad esempio una password, il numero di carta di credito o dati personali, vi è un rischio per le informazioni possano essere rivelate dopo che è utilizzato in quanto l'applicazione non è possibile eliminare i dati dalla memoria del computer .  
  
 Oggetto <xref:System.Security.SecureString> oggetto è simile a un <xref:System.String> in quanto dispone di un valore di testo dell'oggetto. Tuttavia, il valore di un <xref:System.Security.SecureString> oggetto è bloccato in memoria, può utilizzare un meccanismo di protezione, ad esempio la crittografia, fornita dal sistema operativo sottostante, può essere modificata fino a quando non viene contrassegnato come di sola lettura e possono essere eliminati dalla memoria del computer tramite l'applicazione che chiama il <xref:System.Security.SecureString.Dispose%2A> metodo o dal garbage collector di .NET Framework.  
  
 Per una descrizione delle limitazioni del <xref:System.Security.SecureString> classe, vedere il [come proteggere è SecureString?](#HowSecure) sezione.  
  
 [Torna all'inizio](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a>Operazioni di SecureString  
 La <xref:System.Security.SecureString> classe include i membri che consentono di eseguire le operazioni seguenti:  
  
 Creare un'istanza di un <xref:System.Security.SecureString> oggetto  
 Creare un <xref:System.Security.SecureString> oggetto chiamando il costruttore senza parametri.  
  
 Aggiungere caratteri a un <xref:System.Security.SecureString> oggetto  
 È possibile aggiungere un singolo carattere alla volta per un <xref:System.Security.SecureString> oggetto chiamando il relativo <xref:System.Security.SecureString.AppendChar%2A> o <xref:System.Security.SecureString.InsertAt%2A> metodo.  
  
> [!IMPORTANT]
>  Oggetto <xref:System.Security.SecureString> oggetto non deve mai essere creato da un <xref:System.String>, in quanto i dati sensibili sono soggetto alle conseguenze di persistenza di memoria di non modificabile <xref:System.String> classe. Il modo migliore per costruire un <xref:System.Security.SecureString> oggetto è da un'origine non gestita di carattere per volta, ad esempio il <xref:System.Console.ReadKey%2A?displayProperty=nameWithType> metodo.  
  
 Rimuovere i caratteri da un <xref:System.Security.SecureString> oggetto  
 È possibile sostituire un singolo carattere chiamando il <xref:System.Security.SecureString.SetAt%2A> (metodo), rimuovere un singolo carattere chiamando il <xref:System.Security.SecureString.RemoveAt%2A> metodo oppure rimuovere tutti i caratteri dal <xref:System.Security.SecureString> istanza chiamando il <xref:System.Security.SecureString.Clear%2A> metodo.  
  
 Rendere il <xref:System.Security.SecureString> oggetto di sola lettura  
 Dopo aver definito la stringa che la <xref:System.Security.SecureString> rappresenta oggetto, chiamare il relativo <xref:System.Security.SecureString.MakeReadOnly%2A> metodo per rendere la stringa di sola lettura.  
  
 Ottenere le informazioni di <xref:System.Security.SecureString> oggetto  
 Il <xref:System.Security.SecureString> classe contiene solo due membri che forniscono informazioni sulla stringa di: relativo <xref:System.Security.SecureString.Length%2A> proprietà, che indica il numero di unità di codice UTF16 codificate nella stringa; e <xref:System.Security.SecureString.IsReadOnly%2A>, metodo, che indica se l'istanza è sola lettura.  
  
 Rilasciare la memoria allocata per il <xref:System.Security.SecureString> istanza  
 Poiché <xref:System.Security.SecureString> implementa il <xref:System.IDisposable> interfaccia, si rilascia la memoria chiamando la <xref:System.Security.SecureString.Dispose%2A> metodo.  
  
 Il <xref:System.Security.SecureString> classe non dispone di membri che esaminano, confrontano o convertono il valore di un <xref:System.Security.SecureString>. L'assenza di tali membri consente di proteggere il valore dell'istanza da un'esposizione accidentale o intenzionali. Utilizzare i membri appropriati del <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> classe, ad esempio il <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> (metodo), per modificare il valore di un <xref:System.Security.SecureString> oggetto.  
  
 Libreria di classi .NET Framework viene utilizzato comunemente <xref:System.Security.SecureString> istanze nei modi seguenti:  
  
-   Per fornire informazioni relative alle password a un processo tramite il <xref:System.Diagnostics.ProcessStartInfo> struttura o chiamando un overload di <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> metodo che presenta un parametro di tipo <xref:System.Security.SecureString>.  
  
-   Per fornire informazioni sulla password di rete chiamando un <xref:System.Net.NetworkCredential> costruttore della classe con un parametro di tipo <xref:System.Security.SecureString> o utilizzando il <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> proprietà.  
  
-   Per fornire informazioni relative alle password per l'autenticazione di SQL Server tramite la chiamata di <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> costruttore o il recupero del valore del <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> proprietà.  
  
-   Per passare una stringa a codice non gestito. Per ulteriori informazioni, vedere il [SecureString e interoperabilità](#interop) sezione.  
  
 [Torna all'inizio](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a>SecureString e interoperabilità  
 Poiché il sistema operativo non supporta direttamente <xref:System.Security.SecureString>, è necessario convertire il valore di <xref:System.Security.SecureString> oggetto nel tipo di stringa necessarie prima di passare la stringa di un metodo nativo.  La <xref:System.Runtime.InteropServices.Marshal> classe dispone di cinque metodi di eseguire tale operazione:  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>, che consente di convertire il <xref:System.Security.SecureString> valore stringa da una stringa binaria (BSTR) riconosciuta da COM.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> e <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>, la copia di <xref:System.Security.SecureString> valore stringa da una stringa ANSI nella memoria non gestita.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> e <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>, la copia di <xref:System.Security.SecureString> valore stringa da una stringa Unicode nella memoria non gestita.  
  
 Ognuno di questi metodi crea una stringa di testo non crittografato nella memoria non gestita. È responsabilità dello sviluppatore per azzerare e liberare la memoria non appena non è più necessario. Ciascuno dei metodi di allocazione della memoria e di conversione stringa ha un metodo corrispondente per azzerare e liberare la memoria allocata:  
  
|Metodo di allocazione e la conversione|Uguale a zero e free (metodo)|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [Torna all'inizio](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a>Modalità di protezione è SecureString?  
 Quando creato correttamente, un <xref:System.Security.SecureString> istanza offre una protezione dati maggiore rispetto a un <xref:System.String>. Quando si crea una stringa da una carattere in fase origine, <xref:System.String> crea più intermedio in memoria, mentre <xref:System.Security.SecureString> crea una sola istanza.  Operazione di Garbage collection <xref:System.String> oggetti è non deterministico. Inoltre, poiché la memoria non è stato aggiunto, il garbage collector renderà copie aggiuntive di <xref:System.String> valori quando lo spostamento e la compattazione della memoria. Al contrario, la memoria allocata a un <xref:System.Security.SecureString> oggetto è bloccato e che la memoria può essere liberata chiamando la <xref:System.Security.SecureString.Dispose%2A> metodo.  
  
 Anche se i dati archiviati in un <xref:System.Security.SecureString> istanza è più sicura rispetto ai dati archiviati in un <xref:System.String> dell'istanza, esistono limitazioni significative su come proteggere un <xref:System.Security.SecureString> istanza. Sono inclusi:  
  
 Piattaforma  
 Nel sistema operativo Windows, il contenuto di un <xref:System.Security.SecureString> matrice di caratteri interno dell'istanza vengono crittografati. Tuttavia, se a causa di API o problemi di gestione delle chiavi mancanti, la crittografia non è disponibile in tutte le piattaforme. A causa di questa dipendenza dalla piattaforma, <xref:System.Security.SecureString> non consente di crittografare l'archiviazione interna nella piattaforma non Windows. Altre tecniche vengono utilizzate in tali piattaforme per fornire protezione aggiuntiva.
  
 Durata  
 Anche se il <xref:System.Security.SecureString> implementazione è in grado di sfruttare i vantaggi della crittografia, il testo normale assegnati al <xref:System.Security.SecureString> istanza può essere esposta in momenti diversi:  
  
-   Perché Windows non offre un'implementazione di stringa sicura a livello di sistema operativo, .NET Framework dispone ancora di convertire il valore di stringa sicura nella relativa rappresentazione di testo normale per utilizzarlo.  
  
-   Ogni volta che viene modificato il valore della stringa protetta dai metodi, ad esempio <xref:System.Security.SecureString.AppendChar%2A> o <xref:System.Security.SecureString.RemoveAt%2A>, deve essere decrittografato (ad esempio, convertire indietro in testo normale), modificare e quindi crittografate di nuovo.  
  
-   Se la stringa sicura viene utilizzata in una chiamata di interoperabilità, è necessario convertirlo in una stringa ANSI, una stringa Unicode o una stringa binaria (BSTR). Per ulteriori informazioni, vedere il [SecureString e interoperabilità](#interop) sezione.  
  
 L'intervallo di tempo per cui il <xref:System.Security.SecureString> viene esposto il valore dell'istanza viene accorciata semplicemente alla <xref:System.String> classe.  
  
 Archiviazione e utilizzo  
 Più in generale, la <xref:System.Security.SecureString> classe definisce un meccanismo di archiviazione per i valori stringa che deve essere protetto o mantenuto riservato. Tuttavia, di fuori di .NET Framework stesso, alcun meccanismo di utilizzo non supporta <xref:System.Security.SecureString>. Ciò significa che la stringa sicura deve essere convertita in un formato utilizzabile (in genere una forma di testo non crittografato) che possa essere riconosciuto dalla relativa destinazione e che la conversione e la decrittografia deve verificarsi nello spazio utente.  
  
 Generale, <xref:System.Security.SecureString> è più sicura <xref:System.String> poiché limita l'esposizione dei dati di stringa sensibile. Tuttavia, tali stringhe possono essere ancora esposte per qualsiasi operazione che ha accesso alla memoria non elaborata, ad esempio un processo dannoso in esecuzione nel computer host, un dump del processo o un file di swapping visualizzabile dall'utente o processo. Anziché utilizzare <xref:System.Security.SecureString> per proteggere le password, l'alternativa consigliata consiste nell'utilizzare un handle opaco su credenziali archiviate all'esterno del processo.  
  
 [Torna all'inizio](#top)  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare un <xref:System.Security.SecureString> per proteggere una password per l'utilizzo come credenziali per avviare un nuovo processo.  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.SecureString" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.SecureString" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente usa il valore predefinito (o senza parametri) costruttore per creare un'istanza di un nuovo <xref:System.Security.SecureString> oggetto. Chiama quindi il <xref:System.Security.SecureString.AppendChar%2A> metodo per aggiungere una matrice di caratteri.  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 Nell'esempio seguente viene creato un <xref:System.Security.SecureString> oggetto dal valore di un <xref:System.String> oggetto.  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa istanza.</exception>
        <exception cref="T:System.NotSupportedException">Questa operazione non è supportata su questa piattaforma.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Puntatore a una matrice di oggetti <see cref="T:System.Char" />.</param>
        <param name="length">Numero di elementi di <c>value</c> da includere nella nuova istanza.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.SecureString" /> da una sottomatrice di oggetti <see cref="T:System.Char" />.  Questo costruttore non è conforme a CLS. L'alternativa conforme a CLS è <see cref="M:System.Security.SecureString.#ctor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza la nuova <xref:System.Security.SecureString> oggetto per il numero di caratteri in `value` specificato da `length`; il valore dell'istanza viene quindi crittografato.  
  
 In c#, questo costruttore viene definito solo nel contesto del codice unsafe.  
  
   
  
## Examples  
 Nell'esempio seguente viene creata un'istanza di un nuovo <xref:System.Security.SecureString> oggetto passando al costruttore un puntatore a una matrice di caratteri.  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="length" /> è minore di zero o maggiore di 65.536.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa stringa protetta.</exception>
        <exception cref="T:System.NotSupportedException">Questa operazione non è supportata su questa piattaforma.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">richiede l'attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">Carattere da aggiungere a questa stringa protetta.</param>
        <summary>Aggiunge un carattere alla fine della stringa protetta corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'implementazione utilizza un meccanismo di protezione, ad esempio la crittografia, il valore di questa stringa protetta, se presente, non è protetto; `c` viene aggiunto; quindi il nuovo valore della stringa protetta è nuovo protetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, e <xref:System.Security.SecureString.Clear%2A> metodi influisce sul valore di un <xref:System.Security.SecureString> oggetto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A> e <xref:System.Security.SecureString.RemoveAt%2A> metodi possono essere utilizzati per raccogliere i caratteri in una password.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <exception cref="T:System.InvalidOperationException">Questa stringa protetta è di sola lettura.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Con questa operazione la lunghezza della stringa protetta sarà superiore a 65.536 caratteri.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa stringa protetta.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Elimina il valore della stringa protetta corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La memoria del computer che contiene il valore di questa stringa protetta viene azzerata, quindi la lunghezza del valore di questa stringa protetta è impostata su zero.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, e <xref:System.Security.SecureString.Clear%2A> metodi influisce sul valore di un <xref:System.Security.SecureString> oggetto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <exception cref="T:System.InvalidOperationException">Questa stringa protetta è di sola lettura.</exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia della stringa protetta corrente.</summary>
        <returns>Duplicato di questa stringa protetta.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un'istanza di un <xref:System.Security.SecureString> è di sola lettura, la copia di tale istanza non sarà in sola lettura.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa stringa protetta.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate dall'oggetto <see cref="T:System.Security.SecureString" /> corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Security.SecureString.Dispose%2A> metodo scrive zero binari per la memoria allocata che contiene il valore di questo <xref:System.Security.SecureString> dell'oggetto, quindi libera la memoria allocata.  
  
 Per ulteriori informazioni, vedere [Garbage Collection](~/docs/standard/garbage-collection/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Posizione di indice in cui viene inserito il parametro <c>c</c>.</param>
        <param name="c">Carattere da inserire.</param>
        <summary>Inserisce un carattere in questa stringa protetta nella posizione di indice specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'indice è in base zero. il primo carattere in questa stringa protetta è nella posizione di indice zero.  
  
 Se l'implementazione utilizza un meccanismo di protezione, ad esempio la crittografia, il valore della stringa protetta, se presente, non è protetto; `c` viene inserito in corrispondenza della posizione di indice specificato; quindi il nuovo valore è di nuovo protetto. Il <xref:System.Security.SecureString.InsertAt%2A> metodo restituisce gli stessi risultati di <xref:System.Security.SecureString.AppendChar%2A> metodo, che inserisce un carattere alla fine di una stringa sicura, se il `index` parametro di <xref:System.Security.SecureString.InsertAt%2A> è impostato sulla lunghezza di questa istanza.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, e <xref:System.Security.SecureString.Clear%2A> metodi influisce sul valore di un <xref:System.Security.SecureString> oggetto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <exception cref="T:System.InvalidOperationException">Questa stringa protetta è di sola lettura.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> è minore di zero o maggiore della lunghezza della stringa protetta.  -o-  L'esecuzione di questa operazione fa sì che la lunghezza della stringa protetta sia superiore a 65.536 caratteri.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa stringa protetta.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica se questa stringa protetta è contrassegnata come di sola lettura.</summary>
        <returns>
          <see langword="true" /> se questa stringa protetta è contrassegnata come di sola lettura; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dopo un'istanza di <xref:System.Security.SecureString> è di sola lettura per il <xref:System.Security.SecureString.MakeReadOnly%2A> metodo, qualsiasi tentativo di modificare il valore di istanza genera un <xref:System.InvalidOperationException>. Utilizzare il <xref:System.Security.SecureString.IsReadOnly%2A> metodo per verificare se un <xref:System.Security.SecureString> è di sola lettura prima di provare a modificarla.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di caratteri nella stringa protetta corrente.</summary>
        <value>Numero di oggetti <see cref="T:System.Char" /> in questa stringa protetta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Security.SecureString.Length%2A> proprietà restituisce il numero di <xref:System.Char> oggetti in questa istanza, non il numero di caratteri Unicode. Un carattere Unicode può essere rappresentato da più <xref:System.Char> oggetto.  
  
 La lunghezza massima di un <xref:System.Security.SecureString> istanza è 65.536 caratteri.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rende il valore di testo di questa stringa protetta di sola lettura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inizializzare il valore di testo di un'istanza di <xref:System.Security.SecureString> classe con il <xref:System.Security.SecureString.%23ctor%2A> costruttori e modificare il valore con il <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, e <xref:System.Security.SecureString.AppendChar%2A> metodi.  
  
 Una volta apportate le modifiche finali, utilizzare il <xref:System.Security.SecureString.MakeReadOnly%2A> metodo per rendere il valore dell'istanza non modificabile (sola lettura). Il valore è contrassegnato come di sola lettura, eventuali ulteriori tentativi a modificarlo viene generata una <xref:System.InvalidOperationException>.  
  
 L'effetto della chiamata <xref:System.Security.SecureString.MakeReadOnly%2A> è permanente perché la <xref:System.Security.SecureString> classe in alcun modo per rendere modificabile la stringa sicura nuovamente. Utilizzare il <xref:System.Security.SecureString.IsReadOnly%2A> metodo per verificare se un'istanza di <xref:System.Security.SecureString> è di sola lettura.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A> e <xref:System.Security.SecureString.RemoveAt%2A> metodi possono essere utilizzati per raccogliere i caratteri in una password. Dopo la raccolta, la password viene reso sola lettura.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Posizione di indice di un carattere in questa stringa protetta.</param>
        <summary>Rimuove il carattere nella posizione di indice specificata da questa stringa protetta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'indice è in base zero. il primo carattere in questa istanza è nella posizione di indice zero.  
  
 Se l'implementazione utilizza un meccanismo di protezione, ad esempio la crittografia, il valore di questa stringa protetta, se presente, non è protetto; viene rimosso il carattere alla posizione di indice specificata. quindi il nuovo valore è di nuovo protetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, e <xref:System.Security.SecureString.Clear%2A> metodi influisce sul valore di un <xref:System.Security.SecureString> oggetto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A> e <xref:System.Security.SecureString.RemoveAt%2A> metodi possono essere utilizzati per raccogliere i caratteri in una password.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <exception cref="T:System.InvalidOperationException">Questa stringa protetta è di sola lettura.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> è minore di zero oppure maggiore o uguale alla lunghezza di questa stringa protetta.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa stringa protetta.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Posizione di indice di un carattere esistente in questa stringa protetta.</param>
        <param name="c">Carattere che sostituisce il carattere esistente.</param>
        <summary>Sostituisce il carattere esistente nella posizione di indice specificata con un altro carattere.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'indice è in base zero. il primo carattere in questa istanza è nella posizione di indice zero.  
  
 Se l'implementazione utilizza un meccanismo di protezione, ad esempio la crittografia, il valore della stringa protetta, se presente, non è protetto; `c` viene assegnato alla posizione dell'indice specificato; quindi il nuovo valore è di nuovo protetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, e <xref:System.Security.SecureString.Clear%2A> metodi influisce sul valore di un <xref:System.Security.SecureString> oggetto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Questa stringa sicura è già stata eliminata.</exception>
        <exception cref="T:System.InvalidOperationException">Questa stringa protetta è di sola lettura.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> è minore di zero oppure maggiore o uguale alla lunghezza di questa stringa protetta.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante la protezione o la rimozione della protezione del valore di questa stringa protetta.</exception>
      </Docs>
    </Member>
  </Members>
</Type>