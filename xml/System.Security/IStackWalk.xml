<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df8c33ab7bb831c9a8d979c182a56263b8e53575" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48766773" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <TypeSignature Language="F#" Value="type IStackWalk = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gestisce il percorso dello stack che determina se tutti i chiamanti nello stack di chiamate hanno le autorizzazioni necessarie per accedere a una risorsa protetta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Codice parzialmente attendibile presenta sempre un rischio per la sicurezza. In alcuni casi, può essere modificato per eseguire le azioni per conto di codice dannoso che non dispone dell'autorizzazione per accedere a una risorsa. In questo modo, codice dannoso può ottenere un accesso di sicurezza superiore a quello che dovrebbe essere consentito.  
  
 Common language runtime consente di proteggere il codice gestito da questi attacchi mediante l'esecuzione di un percorso stack su tutte le chiamate. Analisi dello stack è necessario che tutto il codice nello stack di chiamate disponga dell'autorizzazione per accedere a una risorsa protetta. Poiché il codice che tenta l'attacco sarà sempre in qualche punto nello stack di chiamate, sarà possibile superare le proprie autorizzazioni di sicurezza.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberSignature Language="F#" Value="abstract member Assert : unit -&gt; unit" Usage="iStackWalk.Assert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dichiara che il codice chiamante può accedere alla ricorsa identificata dall'oggetto autorizzazioni corrente, anche se ai chiamanti più in alto nello stack non è stata concessa l'autorizzazione ad accedere alla risorsa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chiamata a <xref:System.Security.IStackWalk.Assert%2A> interrompe la verifica delle autorizzazioni su chiamanti nello stack di chiamate. Pertanto, anche se i chiamanti non dispongono delle autorizzazioni necessarie, può comunque accedere alle risorse. Un'asserzione è efficace solo se il codice che chiama <xref:System.Security.IStackWalk.Assert%2A> passa il controllo di sicurezza per l'autorizzazione che sta affermando.  
  
 Una chiamata a <xref:System.Security.IStackWalk.Assert%2A> è efficace fino a quando il codice chiamante restituisce al chiamante o fino a una chiamata successiva a <xref:System.Security.IStackWalk.Assert%2A> inefficace asserzione precedente. È inoltre <xref:System.Security.CodeAccessPermission.RevertAssert%2A> oppure <xref:System.Security.CodeAccessPermission.RevertAll%2A> rimuove un'in sospeso <xref:System.Security.IStackWalk.Assert%2A>.  
  
 <xref:System.Security.IStackWalk.Assert%2A> viene ignorato per un'autorizzazione non concessa perché una richiesta di tale autorizzazione non riuscirà. Tuttavia, se viene chiamato codice inferiore nello stack di chiamate <xref:System.Security.IStackWalk.Demand%2A> per l'autorizzazione, un <xref:System.Security.SecurityException> generata quando il percorso stack raggiunge il codice che ha tentato di chiamare <xref:System.Security.IStackWalk.Assert%2A>. Ciò accade perché il codice che ha chiamato <xref:System.Security.IStackWalk.Assert%2A> non ha ottenuto l'autorizzazione, anche se l'App prova a <xref:System.Security.IStackWalk.Assert%2A> è.  
  
> [!CAUTION]
>  Poiché la chiamata <xref:System.Security.IStackWalk.Assert%2A> Elimina il requisito che tutto il codice nella catena di chiamate deve concedere l'autorizzazione per accedere alla risorsa specificata, può provocare problemi di sicurezza se usato in modo non corretto o non appropriato. Pertanto, deve essere utilizzata con grande attenzione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Il codice chiamante non ha <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</exception>
        <related type="Article" href="~/docs/framework/misc/using-the-assert-method.md">Utilizzo del metodo Assert</related>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit" Usage="iStackWalk.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina in fase di esecuzione se tutti i chiamanti nello stack di chiamate hanno l'autorizzazione specificata dall'oggetto autorizzazioni corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene in genere utilizzato da librerie protette per garantire che i chiamanti dispongano dell'autorizzazione per accedere a una risorsa. Ad esempio, chiama una classe di file in una libreria di classi protette <xref:System.Security.IStackWalk.Demand%2A> per le necessarie <xref:System.Security.Permissions.FileIOPermission> prima di eseguire un'operazione di file richiesta dal chiamante.  
  
 Le autorizzazioni del codice che chiama questo metodo non vengono esaminate; la verifica viene avviata dal computer chiamante immediato del codice e procede verso l'alto. <xref:System.Security.IStackWalk.Demand%2A> ha esito positivo solo se nessun <xref:System.Security.SecurityException> viene generato.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Un chiamante in una posizione superiore nello stack di chiamate non ha l'autorizzazione specificata dall'oggetto autorizzazioni corrente.  
  
oppure 
Un chiamante nello stack di chiamate ha chiamato il metodo <see cref="M:System.Security.IStackWalk.Deny" /> nell'oggetto autorizzazioni corrente.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberSignature Language="F#" Value="abstract member Deny : unit -&gt; unit" Usage="iStackWalk.Deny " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causa l'esito negativo di ogni oggetto <see cref="M:System.Security.IStackWalk.Demand" /> per l'oggetto corrente che passa attraverso il codice chiamante.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo impedisce ai chiamanti nello stack di chiamate di accedere alla risorsa protetta tramite il codice che chiama questo metodo, anche se i chiamanti dispongono dell'autorizzazione per accedervi. Lo stack di chiamate in genere è rappresentato come cresce verso il basso, in modo che i metodi più elevati nello stack di chiamate chiamare metodi inferiore nello stack di chiamate.  
  
 <xref:System.Security.IStackWalk.Deny%2A> può limitare la responsabilità del programmatore o impedire vulnerabilità di sicurezza accidentale in quanto evita che il metodo che chiama <xref:System.Security.IStackWalk.Deny%2A> vengano utilizzati per accedere alla risorsa protetta dall'autorizzazione negata. Se un metodo chiama <xref:System.Security.IStackWalk.Deny%2A> su un'autorizzazione e, se un <xref:System.Security.IStackWalk.Demand%2A> per tale autorizzazione viene richiamata da un chiamante inferiore nello stack di chiamate, la verifica della sicurezza avrà esito negativo quando raggiunge il <xref:System.Security.IStackWalk.Deny%2A>.  
  
 <xref:System.Security.IStackWalk.Deny%2A> viene ignorato per un'autorizzazione non concessa perché una richiesta di tale autorizzazione non riuscirà.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>È possibile eseguire l'override di questo metodo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberSignature Language="F#" Value="abstract member PermitOnly : unit -&gt; unit" Usage="iStackWalk.PermitOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina l'annullamento di tutti i metodi <see cref="M:System.Security.IStackWalk.Demand" /> che attraversano il codice chiamante per tutti gli oggetti ad eccezione dell'oggetto corrente, anche se il codice nella parte superiore dello stack di chiamate dispone dell'autorizzazione necessaria per accedere ad altre risorse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.IStackWalk.PermitOnly%2A> è simile a <xref:System.Security.IStackWalk.Deny%2A>, in quanto entrambi provocano l'analisi dello stack esito negativo quando avrebbe potuto essere positivo. La differenza è che <xref:System.Security.IStackWalk.Deny%2A> specifica le autorizzazioni che provocano il percorso stack vada a buon fine ma <xref:System.Security.IStackWalk.PermitOnly%2A> specifica solo le autorizzazioni che non causano il percorso stack esito negativo. Chiamare questo metodo per assicurarsi che il codice possa essere utilizzato per accedere solo alle risorse specificate.  
  
 <xref:System.Security.IStackWalk.PermitOnly%2A> viene ignorato per un'autorizzazione non concessa perché una richiesta di tale autorizzazione non riuscirà. Tuttavia, se il codice inferiore nello stack in un secondo momento le chiamate <xref:System.Security.IStackWalk.Demand%2A> per l'autorizzazione, un <xref:System.Security.SecurityException> generata quando il percorso stack raggiunge il codice che ha tentato di chiamare <xref:System.Security.IStackWalk.PermitOnly%2A>. Infatti, il codice che ha chiamato <xref:System.Security.IStackWalk.PermitOnly%2A> non ha ottenuto l'autorizzazione, anche se chiamato <xref:System.Security.IStackWalk.PermitOnly%2A> per tale autorizzazione. Lo stack di chiamate in genere è rappresentato come cresce verso il basso, in modo che i metodi più elevati nello stack di chiamate chiamare metodi inferiore nello stack di chiamate.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>