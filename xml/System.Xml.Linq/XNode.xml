<Type Name="XNode" FullName="System.Xml.Linq.XNode">
  <TypeSignature Language="C#" Value="public abstract class XNode : System.Xml.Linq.XObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XNode extends System.Xml.Linq.XObject" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNode" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XNode&#xA;Inherits XObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNode abstract : System::Xml::Linq::XObject" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="92a90-101">Rappresenta il concetto astratto di un nodo (elemento, commento, tipo di documento, istruzione di elaborazione o nodo di testo) nell'albero XML.</span><span class="sxs-lookup"><span data-stu-id="92a90-101">Represents the abstract concept of a node (element, comment, document type, processing instruction, or text node) in the XML tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-102"><xref:System.Xml.Linq.XNode> è una classe base astratta comune per i tipi seguenti:</span><span class="sxs-lookup"><span data-stu-id="92a90-102"><xref:System.Xml.Linq.XNode> is an abstract common base class for the following types:</span></span>  
  
-   <xref:System.Xml.Linq.XComment>  
  
-   <xref:System.Xml.Linq.XContainer>  
  
-   <xref:System.Xml.Linq.XDocumentType>  
  
-   <xref:System.Xml.Linq.XProcessingInstruction>  
  
-   <xref:System.Xml.Linq.XText>  
  
 <span data-ttu-id="92a90-103"><xref:System.Xml.Linq.XContainer> è una classe base astratta comune per i tipi seguenti:</span><span class="sxs-lookup"><span data-stu-id="92a90-103"><xref:System.Xml.Linq.XContainer> is an abstract common base class for the following types:</span></span>  
  
-   <xref:System.Xml.Linq.XDocument>  
  
-   <xref:System.Xml.Linq.XElement>  
  
 <span data-ttu-id="92a90-104">Gli oggetti di classi che derivano da <xref:System.Xml.Linq.XContainer> può contenere nodi figlio.</span><span class="sxs-lookup"><span data-stu-id="92a90-104">Objects of classes that derive from <xref:System.Xml.Linq.XContainer> can contain child nodes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92a90-105">Un <xref:System.Xml.Linq.XAttribute> non è un <xref:System.Xml.Linq.XNode>.</span><span class="sxs-lookup"><span data-stu-id="92a90-105">An <xref:System.Xml.Linq.XAttribute> is not an <xref:System.Xml.Linq.XNode>.</span></span> <span data-ttu-id="92a90-106">Gli attributi vengono gestiti come un elenco di coppie nome/valore in un elemento.</span><span class="sxs-lookup"><span data-stu-id="92a90-106">Attributes are maintained as a list of name/value pairs on an element.</span></span>  
  
 <span data-ttu-id="92a90-107">Se si sta scrivendo un'applicazione XML complessa, ad esempio un editor XML o un elaboratore di testo che archivia il contenuto come XML, spesso si lavorerà al livello del nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-107">If you are writing a complex XML application, such as an XML editor or a word processor that stores content as XML, you will often work at the node level.</span></span> <span data-ttu-id="92a90-108">Attività tipiche del lavoro a livello di nodo includono l'aggiunta di nodi, l'eliminazione di nodi, la trasformazione di nodi e lo scorrimento di assi che restituiscono raccolte di nodi.</span><span class="sxs-lookup"><span data-stu-id="92a90-108">Typical activities when working at the node level include adding nodes, deleting nodes, transforming nodes, and iterating through axes that return collections of nodes.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="AddAfterSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92a90-109">Aggiunge il contenuto specificato immediatamente dopo il nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-109">Adds the specified content immediately after this node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-110">Per informazioni dettagliate sul contenuto valido che può essere passato a questo metodo, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="92a90-110">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="92a90-111">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="92a90-111">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-112">Nell'esempio seguente viene utilizzata una query LINQ per creare un <xref:System.Collections.Generic.IEnumerable%601> di <xref:System.Xml.Linq.XElement>, che viene quindi passato a questo metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-112">The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method.</span></span> <span data-ttu-id="92a90-113">Consente di aggiungere i risultati di una query per l'albero nella posizione desiderata.</span><span class="sxs-lookup"><span data-stu-id="92a90-113">This adds the results of a query to the tree in the desired location.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddAfterSelf(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _  
    <Root>  
        <Element1>1</Element1>  
        <Element2>2</Element2>  
        <Element3>3</Element3>  
        <Element4>4</Element4>  
        <Element5>5</Element5>  
    </Root>  
  
Dim xmlTree As XElement = _  
    <Root>  
        <Child1>1</Child1>  
        <Child2>2</Child2>  
        <Child3>3</Child3>  
        <Child4>4</Child4>  
        <Child5>5</Child5>  
    </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddAfterSelf( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el _  
)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="92a90-114">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-114">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAfterSelf">
      <MemberSignature Language="C#" Value="public void AddAfterSelf (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAfterSelf(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAfterSelf (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAfterSelf(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="92a90-115">Oggetto contenuto che include contenuto semplice o una raccolta di oggetti contenuto da aggiungere dopo questo nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-115">A content object that contains simple content or a collection of content objects to be added after this node.</span></span></param>
        <summary><span data-ttu-id="92a90-116">Aggiunge il contenuto specificato immediatamente dopo il nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-116">Adds the specified content immediately after this node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-117">Per informazioni dettagliate sul contenuto valido che può essere passato a questo metodo, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="92a90-117">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="92a90-118">Eventi <xref:System.Xml.Linq.XObject.Changing>.</span><span class="sxs-lookup"><span data-stu-id="92a90-118"><xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-119">Nell'esempio seguente viene utilizzato questo metodo per aggiungere un elemento nell'albero.</span><span class="sxs-lookup"><span data-stu-id="92a90-119">The following example uses this method to add an element into the tree.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddAfterSelf(  
    new XElement("NewChild", 10)  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddAfterSelf(New XElement("NewChild", 10))  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="92a90-120">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-120">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <NewChild>10</NewChild>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92a90-121">L'oggetto padre è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-121">The parent is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddAfterSelf">
      <MemberSignature Language="C#" Value="public void AddAfterSelf (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAfterSelf(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAfterSelf (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAfterSelf(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="92a90-122">Elenco di parametri di oggetti contenuto.</span><span class="sxs-lookup"><span data-stu-id="92a90-122">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="92a90-123">Aggiunge il contenuto specificato immediatamente dopo il nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-123">Adds the specified content immediately after this node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-124">Per informazioni dettagliate sul contenuto valido che può essere passato a questo metodo, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="92a90-124">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="92a90-125">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="92a90-125">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-126">Nell'esempio seguente viene utilizzata una query LINQ per creare un <xref:System.Collections.Generic.IEnumerable%601> di <xref:System.Xml.Linq.XElement>, che viene quindi passato a questo metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-126">The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method.</span></span> <span data-ttu-id="92a90-127">Consente di aggiungere i risultati di una query per l'albero nella posizione desiderata.</span><span class="sxs-lookup"><span data-stu-id="92a90-127">This adds the results of a query to the tree in the desired location.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddAfterSelf(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddAfterSelf( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="92a90-128">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-128">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92a90-129">L'oggetto padre è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-129">The parent is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddBeforeSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92a90-130">Aggiunge il contenuto specificato immediatamente prima del nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-130">Adds the specified content immediately before this node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-131">Per informazioni dettagliate sul contenuto valido che può essere passato a questo metodo, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="92a90-131">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="92a90-132">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="92a90-132">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="92a90-133">Il <xref:System.Xml.Linq.XContainer> archivia le note figlio come elenco collegato singolarmente di <xref:System.Xml.Linq.XNode> oggetti.</span><span class="sxs-lookup"><span data-stu-id="92a90-133">The <xref:System.Xml.Linq.XContainer> stores its child notes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="92a90-134">Ciò significa che il <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> metodo deve scorrere l'elenco di nodi figlio diretti sotto il contenitore padre.</span><span class="sxs-lookup"><span data-stu-id="92a90-134">This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="92a90-135">Pertanto, l'utilizzo di questo metodo potrebbe influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="92a90-135">Therefore, using this method might  affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-136">Nell'esempio seguente viene utilizzata una query LINQ per creare un <xref:System.Collections.Generic.IEnumerable%601> di <xref:System.Xml.Linq.XElement>, che viene quindi passato a questo metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-136">The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method.</span></span> <span data-ttu-id="92a90-137">Consente di aggiungere i risultati di una query per l'albero nella posizione desiderata.</span><span class="sxs-lookup"><span data-stu-id="92a90-137">This adds the results of a query to the tree in the desired location.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddBeforeSelf(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddBeforeSelf( _  
From el In srcTree.Elements() _  
Where CInt(el) > 3 _  
Select el)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="92a90-138">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-138">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddBeforeSelf">
      <MemberSignature Language="C#" Value="public void AddBeforeSelf (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBeforeSelf(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBeforeSelf (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBeforeSelf(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="92a90-139">Oggetto contenuto che include contenuto semplice o una raccolta di oggetti contenuto da aggiungere prima di questo nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-139">A content object that contains simple content or a collection of content objects to be added before this node.</span></span></param>
        <summary><span data-ttu-id="92a90-140">Aggiunge il contenuto specificato immediatamente prima del nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-140">Adds the specified content immediately before this node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-141">Per informazioni dettagliate sul contenuto valido che può essere passato a questo metodo, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="92a90-141">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="92a90-142">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="92a90-142">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="92a90-143">Il <xref:System.Xml.Linq.XContainer> memorizza i relativi nodi figlio sotto forma di elenco collegato singolarmente di <xref:System.Xml.Linq.XNode> oggetti.</span><span class="sxs-lookup"><span data-stu-id="92a90-143">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="92a90-144">Ciò significa che il <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> metodo deve scorrere l'elenco di nodi figlio diretti sotto il contenitore padre.</span><span class="sxs-lookup"><span data-stu-id="92a90-144">This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="92a90-145">Pertanto, l'utilizzo di questo metodo potrebbe influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="92a90-145">Therefore, using this method might  affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-146">Nell'esempio seguente viene utilizzato questo metodo per aggiungere un elemento nell'albero.</span><span class="sxs-lookup"><span data-stu-id="92a90-146">The following example uses this method to add an element into the tree.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddBeforeSelf(  
    new XElement("NewChild", 10)  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddBeforeSelf(New XElement("NewChild", 10))  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="92a90-147">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-147">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <NewChild>10</NewChild>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92a90-148">L'oggetto padre è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-148">The parent is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddBeforeSelf">
      <MemberSignature Language="C#" Value="public void AddBeforeSelf (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddBeforeSelf(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBeforeSelf (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBeforeSelf(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="92a90-149">Elenco di parametri di oggetti contenuto.</span><span class="sxs-lookup"><span data-stu-id="92a90-149">A parameter list of content objects.</span></span></param>
        <summary><span data-ttu-id="92a90-150">Aggiunge il contenuto specificato immediatamente prima del nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-150">Adds the specified content immediately before this node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-151">Per informazioni dettagliate sul contenuto valido che può essere passato a questo metodo, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="92a90-151">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="92a90-152">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="92a90-152">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="92a90-153">Il <xref:System.Xml.Linq.XContainer> memorizza i relativi nodi figlio sotto forma di elenco collegato singolarmente di <xref:System.Xml.Linq.XNode> oggetti.</span><span class="sxs-lookup"><span data-stu-id="92a90-153">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="92a90-154">Ciò significa che il <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> metodo deve scorrere l'elenco di nodi figlio diretti sotto il contenitore padre.</span><span class="sxs-lookup"><span data-stu-id="92a90-154">This means that the <xref:System.Xml.Linq.XNode.AddBeforeSelf%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="92a90-155">Pertanto, l'utilizzo di questa funzione potrebbe influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="92a90-155">Therefore, using this function might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-156">Nell'esempio seguente viene utilizzata una query LINQ per creare un <xref:System.Collections.Generic.IEnumerable%601> di <xref:System.Xml.Linq.XElement>, che viene quindi passato a questo metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-156">The following example uses a LINQ query to create an <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, which it then passes to this method.</span></span> <span data-ttu-id="92a90-157">Consente di aggiungere i risultati di una query per l'albero nella posizione desiderata.</span><span class="sxs-lookup"><span data-stu-id="92a90-157">This adds the results of a query to the tree in the desired location.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child1 = xmlTree.Element("Child1");  
child1.AddBeforeSelf(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child1 As XElement = xmlTree.<Child1>(0)  
child1.AddBeforeSelf( _  
    From el In srcTree.Elements() _  
    Where CInt(el) > 3 _  
    Select el)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="92a90-158">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-158">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92a90-159">L'oggetto padre è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-159">The parent is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Ancestors">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92a90-160">Restituisce una raccolta di elementi predecessori del nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-160">Returns a collection of the ancestor elements of this node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-161">Facoltativamente è possibile specificare un nome di nodo per filtrare gli elementi del predecessore con un nome specifico.</span><span class="sxs-lookup"><span data-stu-id="92a90-161">Optionally a node name can be specified to filter for ancestor elements with a specific name.</span></span>  
  
 <span data-ttu-id="92a90-162">I nodi della raccolta restituita nell'ordine inverso del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-162">The nodes in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="92a90-163">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="92a90-163">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Ancestors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Ancestors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Ancestors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.Ancestors" />
      <MemberSignature Language="VB.NET" Value="Public Function Ancestors () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Ancestors();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92a90-164">Restituisce una raccolta di elementi predecessori del nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-164">Returns a collection of the ancestor elements of this node.</span></span></summary>
        <returns><span data-ttu-id="92a90-165"><see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XElement" /> degli elementi del predecessore di questo nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-165">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-166">Questo metodo non restituisce i risultati.</span><span class="sxs-lookup"><span data-stu-id="92a90-166">This method does not return itself in the results.</span></span>  
  
 <span data-ttu-id="92a90-167">I nodi della raccolta restituita nell'ordine inverso del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-167">The nodes in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="92a90-168">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="92a90-168">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-169">Nell'esempio seguente viene utilizzato questo metodo per enumerare i predecessori di un nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-169">The following example uses this method to enumerate the ancestors of a node.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",   
        new XElement("GrandChild", "content")  
    )  
);  
IEnumerable<XElement> grandChild = xmlTree.Descendants("GrandChild");  
foreach (XElement el in grandChild.Ancestors())  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child>  
                <GrandChild>content</GrandChild>  
            </Child>  
        </Root>  
  
Dim grandChild As IEnumerable(Of XElement) = xmlTree...<GrandChild>  
For Each el In grandChild.Ancestors()  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="92a90-170">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-170">This example produces the following output:</span></span>  
  
```  
Child  
Root  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ancestors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; Ancestors (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; Ancestors(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Ancestors (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ Ancestors(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92a90-171">Oggetto <see cref="T:System.Xml.Linq.XName" /> di cui trovare la corrispondenza.</span><span class="sxs-lookup"><span data-stu-id="92a90-171">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="92a90-172">Restituisce una raccolta filtrata di elementi predecessori del nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-172">Returns a filtered collection of the ancestor elements of this node.</span></span> <span data-ttu-id="92a90-173">Solo gli elementi che hanno un oggetto <see cref="T:System.Xml.Linq.XName" /> corrispondente vengono inclusi nella raccolta.</span><span class="sxs-lookup"><span data-stu-id="92a90-173">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="92a90-174"><see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XElement" /> degli elementi del predecessore di questo nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-174">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node.</span></span> <span data-ttu-id="92a90-175">Solo gli elementi che hanno un oggetto <see cref="T:System.Xml.Linq.XName" /> corrispondente vengono inclusi nella raccolta.</span><span class="sxs-lookup"><span data-stu-id="92a90-175">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span>  
  
 <span data-ttu-id="92a90-176">I nodi della raccolta restituita nell'ordine inverso del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-176">The nodes in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="92a90-177">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="92a90-177">This method uses deferred execution.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-178">Questo metodo non restituirà stesso nei risultati.</span><span class="sxs-lookup"><span data-stu-id="92a90-178">This method will not return itself in the results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-179">Nell'esempio seguente viene utilizzato questo metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-179">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",   
        new XElement("GrandChild", "content")  
    )  
);  
IEnumerable<XElement> grandChild = xmlTree.Descendants("GrandChild");  
foreach (XElement el in grandChild.Ancestors("Child"))  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child>  
                <GrandChild>content</GrandChild>  
            </Child>  
        </Root>  
  
Dim grandChild As IEnumerable(Of XElement) = xmlTree...<GrandChild>  
For Each el In grandChild.Ancestors("Child")  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="92a90-180">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-180">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareDocumentOrder">
      <MemberSignature Language="C#" Value="public static int CompareDocumentOrder (System.Xml.Linq.XNode n1, System.Xml.Linq.XNode n2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareDocumentOrder(class System.Xml.Linq.XNode n1, class System.Xml.Linq.XNode n2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareDocumentOrder (n1 As XNode, n2 As XNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareDocumentOrder(System::Xml::Linq::XNode ^ n1, System::Xml::Linq::XNode ^ n2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n1" Type="System.Xml.Linq.XNode" />
        <Parameter Name="n2" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="n1"><span data-ttu-id="92a90-181">Primo oggetto <see cref="T:System.Xml.Linq.XNode" /> da confrontare.</span><span class="sxs-lookup"><span data-stu-id="92a90-181">First <see cref="T:System.Xml.Linq.XNode" /> to compare.</span></span></param>
        <param name="n2"><span data-ttu-id="92a90-182">Secondo oggetto <see cref="T:System.Xml.Linq.XNode" /> da confrontare.</span><span class="sxs-lookup"><span data-stu-id="92a90-182">Second <see cref="T:System.Xml.Linq.XNode" /> to compare.</span></span></param>
        <summary><span data-ttu-id="92a90-183">Confronta due nodi per determinare l'ordine del documento XML relativo.</span><span class="sxs-lookup"><span data-stu-id="92a90-183">Compares two nodes to determine their relative XML document order.</span></span></summary>
        <returns><span data-ttu-id="92a90-184">Un <see langword="int" /> che contiene 0 se i nodi sono uguali; -1 se <paramref name="n1" /> viene prima di <paramref name="n2" />; 1 se <paramref name="n1" /> viene dopo <paramref name="n2" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-184">An <see langword="int" /> containing 0 if the nodes are equal; -1 if <paramref name="n1" /> is before <paramref name="n2" />; 1 if <paramref name="n1" /> is after <paramref name="n2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-185">Il <xref:System.Xml.Linq.XContainer> memorizza i relativi nodi figlio sotto forma di elenco collegato singolarmente di <xref:System.Xml.Linq.XNode> oggetti.</span><span class="sxs-lookup"><span data-stu-id="92a90-185">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="92a90-186">Ciò significa che il <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> metodo deve attraversare i predecessori di due nodi confrontati fino a individuare l'elemento padre comune.</span><span class="sxs-lookup"><span data-stu-id="92a90-186">This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent.</span></span> <span data-ttu-id="92a90-187">Quindi deve scorrere l'elenco dei nodi figlio dell'elemento padre comune per determinare l'ordine dei due nodi confrontati.</span><span class="sxs-lookup"><span data-stu-id="92a90-187">Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared.</span></span> <span data-ttu-id="92a90-188">Pertanto, l'utilizzo di questo metodo potrebbe influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="92a90-188">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-189">Nell'esempio seguente viene utilizzato questo metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-189">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1",  
        new XElement("GrandChild1", 1),  
        new XElement("GrandChild2", 2),  
        new XElement("GrandChild3", 3)  
    ),  
    new XElement("Child2",  
        new XElement("GrandChild4", 4),  
        new XElement("GrandChild5", 5),  
        new XElement("GrandChild6", 6)  
    )  
);  
XElement el1 = xmlTree.Descendants("GrandChild2").First();  
XElement el2 = xmlTree.Descendants("GrandChild6").First();  
if (XElement.CompareDocumentOrder(el1, el2) == 0)  
    Console.WriteLine("Compared elements are the same element");  
else if (XElement.CompareDocumentOrder(el1, el2) > 0)  
    Console.WriteLine("el1 is after el2");  
else  
    Console.WriteLine("el1 is before el2");  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>  
                <GrandChild1>1</GrandChild1>  
                <GrandChild2>2</GrandChild2>  
                <GrandChild3>3</GrandChild3>  
            </Child1>  
            <Child2>  
                <GrandChild4>4</GrandChild4>  
                <GrandChild5>5</GrandChild5>  
                <GrandChild6>6</GrandChild6>  
            </Child2>  
        </Root>  
  
Dim el1 As XElement = xmlTree...<GrandChild2>(0)  
Dim el2 As XElement = xmlTree...<GrandChild6>(0)  
  
If (XElement.CompareDocumentOrder(el1, el2) = 0) Then  
    Console.WriteLine("Compared elements are the same element")  
ElseIf (XElement.CompareDocumentOrder(el1, el2) > 0) Then  
    Console.WriteLine("el1 is after el2")  
Else  
    Console.WriteLine("el1 is before el2")  
End If  
```  
  
 <span data-ttu-id="92a90-190">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-190">This example produces the following output:</span></span>  
  
```  
el1 is before el2  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92a90-191">I due nodi non condividono un predecessore comune.</span><span class="sxs-lookup"><span data-stu-id="92a90-191">The two nodes do not share a common ancestor.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateReader">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92a90-192">Crea un oggetto <see cref="T:System.Xml.XmlReader" /> per questo nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-192">Creates an <see cref="T:System.Xml.XmlReader" /> for this node.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader CreateReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader CreateReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.CreateReader" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateReader () As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ CreateReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92a90-193">Crea un oggetto <see cref="T:System.Xml.XmlReader" /> per questo nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-193">Creates an <see cref="T:System.Xml.XmlReader" /> for this node.</span></span></summary>
        <returns><span data-ttu-id="92a90-194"><see cref="T:System.Xml.XmlReader" /> che può essere utilizzato per leggere questo nodo e i relativi discendenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-194">An <see cref="T:System.Xml.XmlReader" /> that can be used to read this node and its descendants.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-195">Utilizzare questo metodo in genere quando è necessario fornire un altro componente con un <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="92a90-195">You typically use this method when you have to supply another component with an <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="92a90-196">Ad esempio, è possibile creare un <xref:System.Xml.XmlReader> da un [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] ad albero e quindi passare tale lettore per <xref:System.Xml.XmlDocument.Load%2A>.</span><span class="sxs-lookup"><span data-stu-id="92a90-196">For example, you can create an <xref:System.Xml.XmlReader> from a [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] tree, and then pass that reader to <xref:System.Xml.XmlDocument.Load%2A>.</span></span>  
  
 <span data-ttu-id="92a90-197">Tutti i lettori restituiti da <xref:System.Xml.XmlReader.Create%2A> sono lettori di normalizzazione.</span><span class="sxs-lookup"><span data-stu-id="92a90-197">All of the readers returned by <xref:System.Xml.XmlReader.Create%2A> are normalizing readers.</span></span> <span data-ttu-id="92a90-198">Eseguono sempre la normalizzazione delle interruzioni di riga e la normalizzazione completa degli attributi.</span><span class="sxs-lookup"><span data-stu-id="92a90-198">They always perform line break normalization and full normalization of attributes.</span></span> <span data-ttu-id="92a90-199">Al contrario, il <xref:System.Xml.XmlReader> restituito da <xref:System.Xml.Linq.XNode.CreateReader%2A> non è un lettore di normalizzazione.</span><span class="sxs-lookup"><span data-stu-id="92a90-199">In contrast, the <xref:System.Xml.XmlReader> returned by <xref:System.Xml.Linq.XNode.CreateReader%2A> is not a normalizing reader.</span></span> <span data-ttu-id="92a90-200">Non trasforma tutti gli spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="92a90-200">It does not transform any white space.</span></span> <span data-ttu-id="92a90-201">Restituisce anche gli attributi nell'ordine in cui sono stati aggiunti, non in ordine di nome di attributo.</span><span class="sxs-lookup"><span data-stu-id="92a90-201">It also returns attributes in the order that they were added, not in attribute name order.</span></span>  
  
 [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]<span data-ttu-id="92a90-202"> informazioni sugli attributi predefiniti non vengono conservati.</span><span class="sxs-lookup"><span data-stu-id="92a90-202"> does not keep information about whether attributes are default attributes.</span></span> <span data-ttu-id="92a90-203"><xref:System.Xml.XmlReader.IsDefault%2A> restituirà sempre false indipendentemente dal fatto che l'attributo è stato popolato da un valore predefinito o meno.</span><span class="sxs-lookup"><span data-stu-id="92a90-203"><xref:System.Xml.XmlReader.IsDefault%2A> will always return false regardless of whether the attribute was populated from a default value or not.</span></span>  
  
 <span data-ttu-id="92a90-204">Il `PUBLIC` e `SYSTEM` gli attributi pseudo <xref:System.Xml.Linq.XDocumentType> non sono disponibili tramite il <xref:System.Xml.XmlReader.MoveToAttribute%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-204">The `PUBLIC` and `SYSTEM` pseudo attributes on <xref:System.Xml.Linq.XDocumentType> are not available through the <xref:System.Xml.XmlReader.MoveToAttribute%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="92a90-205">Sono disponibili solo tramite il <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=nameWithType> metodo che accetta il nome completo dell'attributo come parametro.</span><span class="sxs-lookup"><span data-stu-id="92a90-205">They are only available through the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=nameWithType> method that takes the qualified name of the attribute as a parameter.</span></span> <span data-ttu-id="92a90-206">Se è necessario recuperare il `PUBLIC` o `SYSTEM` gli attributi, è consigliabile utilizzare il <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-206">If you have to retrieve the `PUBLIC` or `SYSTEM` attributes, you should use the <xref:System.Xml.XmlReader.GetAttribute%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="92a90-207">Dati Base64 e BinHex non sono supportati.</span><span class="sxs-lookup"><span data-stu-id="92a90-207">Base64 and BinHex data are not supported.</span></span> <span data-ttu-id="92a90-208">Se si tenta di recuperare questi tipi di dati (ad esempio, chiamando <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>), il lettore genererà <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="92a90-208">If you attempt to retrieve these types of data (for example, by calling <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>), the reader will throw <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="92a90-209">Il `xml` dichiarazione non viene rilevata dal lettore.</span><span class="sxs-lookup"><span data-stu-id="92a90-209">The `xml` declaration is not surfaced by the reader.</span></span> <span data-ttu-id="92a90-210">Durante la lettura, non verrà visualizzato un nodo di tipo <xref:System.Xml.XmlNodeType.XmlDeclaration>.</span><span class="sxs-lookup"><span data-stu-id="92a90-210">While reading, you will not encounter a node of type <xref:System.Xml.XmlNodeType.XmlDeclaration>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-211">Nell'esempio seguente viene creato un albero XML, un <xref:System.Xml.XmlReader> utilizzando il <xref:System.Xml.Linq.XNode.CreateReader%2A> (metodo) e crea un <xref:System.Xml.XmlDocument> tramite il lettore.</span><span class="sxs-lookup"><span data-stu-id="92a90-211">The following example creates an XML tree, creates an <xref:System.Xml.XmlReader> by using the <xref:System.Xml.Linq.XNode.CreateReader%2A> method, and creates an <xref:System.Xml.XmlDocument> by using the reader.</span></span>  
  
```csharp  
XDocument xmlTree = new XDocument(  
    new XElement("Root",  
        new XAttribute("Att1", "Attribute Content"),  
        new XElement("Child1", 1),  
        new XElement("Child2", 2)  
    )  
);  
XmlReader reader = xmlTree.CreateReader();  
reader.MoveToContent();  
XmlDocument doc = new XmlDocument();  
XmlNode cd = doc.ReadNode(reader);  
doc.AppendChild(cd);  
Console.WriteLine(doc.OuterXml);  
```  
  
```vb  
Dim xmlTree As XDocument =  _   
    <?xml version="1.0" encoding="utf-8" standalone="yes"?>  
        <Root Att1="Attribute Content">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
        </Root>  
Dim reader As XmlReader = xmlTree.CreateReader()  
reader.MoveToContent()  
Dim doc As XmlDocument = New XmlDocument()  
Dim cd As XmlNode = doc.ReadNode(reader)  
doc.AppendChild(cd)  
Console.WriteLine(doc.OuterXml)  
```  
  
 <span data-ttu-id="92a90-212">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-212">This example produces the following output:</span></span>  
  
```xml  
<Root Att1="Attribute Content"><Child1>1</Child1><Child2>2</Child2></Root>  
```  
  
 <span data-ttu-id="92a90-213">Utilizzare questo metodo consiste nell'eseguire una trasformazione XSLT.</span><span class="sxs-lookup"><span data-stu-id="92a90-213">Another use for this method is to do an XSLT transformation.</span></span> <span data-ttu-id="92a90-214">È possibile creare un albero XML, creare un oggetto <xref:System.Xml.XmlReader> dall'albero XML, creare un nuovo documento e infine creare un oggetto <xref:System.Xml.XmlWriter> che scriverà nel documento nuovo.</span><span class="sxs-lookup"><span data-stu-id="92a90-214">You can create an XML tree, create an <xref:System.Xml.XmlReader> from the XML tree, create a new document, and create an <xref:System.Xml.XmlWriter> that will write into the new document.</span></span> <span data-ttu-id="92a90-215">Quindi, è possibile richiamare la trasformazione XSLT, passando <xref:System.Xml.XmlReader> e <xref:System.Xml.XmlWriter> alla trasformazione.</span><span class="sxs-lookup"><span data-stu-id="92a90-215">Then, you can invoke the XSLT transformation, passing the <xref:System.Xml.XmlReader> and <xref:System.Xml.XmlWriter> to the transformation.</span></span> <span data-ttu-id="92a90-216">Dopo il completamento della trasformazione, il nuovo albero XML viene popolato con i relativi risultati.</span><span class="sxs-lookup"><span data-stu-id="92a90-216">After the transformation successfully completes, the new XML tree is populated with the results of the transform.</span></span>  
  
```csharp  
string xslMarkup = @"<?xml version='1.0'?>  
<xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
    <xsl:template match='/Parent'>  
        <Root>  
            <C1>  
            <xsl:value-of select='Child1'/>  
            </C1>  
            <C2>  
            <xsl:value-of select='Child2'/>  
            </C2>  
        </Root>  
    </xsl:template>  
</xsl:stylesheet>";  
  
XDocument xmlTree = new XDocument(  
    new XElement("Parent",  
        new XElement("Child1", "Child1 data"),  
        new XElement("Child2", "Child2 data")  
    )  
);  
  
XDocument newTree = new XDocument();  
using (XmlWriter writer = newTree.CreateWriter()) {  
    // Load the style sheet.  
    XslCompiledTransform xslt = new XslCompiledTransform();  
    xslt.Load(XmlReader.Create(new StringReader(xslMarkup)));  
  
    // Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer);  
}  
  
Console.WriteLine(newTree);  
```  
  
```vb  
Dim xslMarkup As XDocument = _   
    <?xml version='1.0'?>  
    <xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>  
        <xsl:template match='/Parent'>  
            <Root>  
                <C1>  
                    <xsl:value-of select='Child1'/>  
                </C1>  
                <C2>  
                    <xsl:value-of select='Child2'/>  
                </C2>  
            </Root>  
        </xsl:template>  
    </xsl:stylesheet>  
  
Dim xmlTree As XElement = _   
        <Parent>  
            <Child1>Child1 data</Child1>  
            <Child2>Child2 data</Child2>  
        </Parent>  
  
Dim newTree As XDocument = New XDocument()  
  
Using writer As XmlWriter = newTree.CreateWriter()  
    ' Load the style sheet.  
    Dim xslt As XslCompiledTransform = _  
        New XslCompiledTransform()  
    xslt.Load(xslMarkup.CreateReader())  
  
    ' Execute the transform and output the results to a writer.  
    xslt.Transform(xmlTree.CreateReader(), writer)  
End Using  
  
Console.WriteLine(newTree)  
```  
  
 <span data-ttu-id="92a90-217">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-217">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <C1>Child1 data</C1>  
  <C2>Child2 data</C2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader CreateReader (System.Xml.Linq.ReaderOptions readerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader CreateReader(valuetype System.Xml.Linq.ReaderOptions readerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ CreateReader(System::Xml::Linq::ReaderOptions readerOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readerOptions" Type="System.Xml.Linq.ReaderOptions" />
      </Parameters>
      <Docs>
        <param name="readerOptions"><span data-ttu-id="92a90-218">Oggetto <see cref="T:System.Xml.Linq.ReaderOptions" /> che specifica se omettere gli spazi dei nomi duplicati.</span><span class="sxs-lookup"><span data-stu-id="92a90-218">A <see cref="T:System.Xml.Linq.ReaderOptions" /> object that specifies whether to omit duplicate namespaces.</span></span></param>
        <summary><span data-ttu-id="92a90-219">Crea un oggetto <see cref="T:System.Xml.XmlReader" /> con le opzioni specificate dal parametro <paramref name="readerOptions" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-219">Creates an <see cref="T:System.Xml.XmlReader" /> with the options specified by the <paramref name="readerOptions" /> parameter.</span></span></summary>
        <returns><span data-ttu-id="92a90-220">Oggetto <see cref="T:System.Xml.XmlReader" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-220">An <see cref="T:System.Xml.XmlReader" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeepEquals">
      <MemberSignature Language="C#" Value="public static bool DeepEquals (System.Xml.Linq.XNode n1, System.Xml.Linq.XNode n2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeepEquals(class System.Xml.Linq.XNode n1, class System.Xml.Linq.XNode n2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeepEquals (n1 As XNode, n2 As XNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeepEquals(System::Xml::Linq::XNode ^ n1, System::Xml::Linq::XNode ^ n2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n1" Type="System.Xml.Linq.XNode" />
        <Parameter Name="n2" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="n1"><span data-ttu-id="92a90-221">Primo oggetto <see cref="T:System.Xml.Linq.XNode" /> da confrontare.</span><span class="sxs-lookup"><span data-stu-id="92a90-221">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</span></span></param>
        <param name="n2"><span data-ttu-id="92a90-222">Secondo oggetto <see cref="T:System.Xml.Linq.XNode" /> da confrontare.</span><span class="sxs-lookup"><span data-stu-id="92a90-222">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</span></span></param>
        <summary><span data-ttu-id="92a90-223">Confronta i valori di due nodi, inclusi i valori di tutti i nodi discendenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-223">Compares the values of two nodes, including the values of all descendant nodes.</span></span></summary>
        <returns>
          <span data-ttu-id="92a90-224"><see langword="true" /> se i nodi sono uguali; in caso contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-224"><see langword="true" /> if the nodes are equal; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-225">I criteri seguenti determinano se sono uguali a due nodi:</span><span class="sxs-lookup"><span data-stu-id="92a90-225">The following criteria determine whether two nodes are equal:</span></span>  
  
-   <span data-ttu-id="92a90-226">Oggetto `null` è uguale a un altro nodo `null` nodo ma non uguali a non -`null` nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-226">A `null` node is equal to another `null` node but unequal to a non-`null` node.</span></span>  
  
-   <span data-ttu-id="92a90-227">Due <xref:System.Xml.Linq.XNode> oggetti di tipi diversi non sono uguali.</span><span class="sxs-lookup"><span data-stu-id="92a90-227">Two <xref:System.Xml.Linq.XNode> objects of different types are never equal.</span></span>  
  
-   <span data-ttu-id="92a90-228">Due <xref:System.Xml.Linq.XText> nodi sono uguali se contengono lo stesso testo.</span><span class="sxs-lookup"><span data-stu-id="92a90-228">Two <xref:System.Xml.Linq.XText> nodes are equal if they contain the same text.</span></span>  
  
-   <span data-ttu-id="92a90-229">Due <xref:System.Xml.Linq.XElement> nodi sono uguali se hanno lo stesso nome di tag, lo stesso set di attributi con gli stessi valori, e (ignorando i commenti e istruzioni di elaborazione) contengono due sequenze di lunghezza uguale di nodi di contenuto.</span><span class="sxs-lookup"><span data-stu-id="92a90-229">Two <xref:System.Xml.Linq.XElement> nodes are equal if they have the same tag name, the same set of attributes with the same values, and (ignoring comments and processing instructions) contain two equal length sequences of equal content nodes.</span></span>  
  
-   <span data-ttu-id="92a90-230">Due <xref:System.Xml.Linq.XDocument> nodi sono uguali se i nodi radice sono uguali.</span><span class="sxs-lookup"><span data-stu-id="92a90-230">Two <xref:System.Xml.Linq.XDocument> nodes are equal if their root nodes are equal.</span></span>  
  
-   <span data-ttu-id="92a90-231">Due <xref:System.Xml.Linq.XComment> nodi sono uguali se contengono lo stesso testo di commento.</span><span class="sxs-lookup"><span data-stu-id="92a90-231">Two <xref:System.Xml.Linq.XComment> nodes are equal if they contain the same comment text.</span></span>  
  
-   <span data-ttu-id="92a90-232">Due <xref:System.Xml.Linq.XProcessingInstruction> nodi sono uguali se hanno la stessa destinazione e dati.</span><span class="sxs-lookup"><span data-stu-id="92a90-232">Two <xref:System.Xml.Linq.XProcessingInstruction> nodes are equal if they have the same target and data.</span></span>  
  
-   <span data-ttu-id="92a90-233">Due <xref:System.Xml.Linq.XDocumentType> nodi sono uguali se il con stesso nome, ID pubblico, ID di sistema e di subset interni.</span><span class="sxs-lookup"><span data-stu-id="92a90-233">Two <xref:System.Xml.Linq.XDocumentType> nodes are equal if the have the same name, public ID, system ID, and internal subset.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-234">L'esempio seguente usa questo metodo per confrontare due alberi XML.</span><span class="sxs-lookup"><span data-stu-id="92a90-234">The following example uses this method to compare two XML trees.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
XElement xmlTree2 = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XElement("Child1", 1),  
    new XElement("Child2", "some content")  
);  
Console.WriteLine(XNode.DeepEquals(xmlTree1, xmlTree2));  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root Att1="1" Att2="2">  
            <Child1>1</Child1>  
            <Child2>some content</Child2>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
        <Root Att1="1" Att2="2">  
            <Child1>1</Child1>  
            <Child2>some content</Child2>  
        </Root>  
  
Console.WriteLine(XNode.DeepEquals(xmlTree1, xmlTree2))  
```  
  
 <span data-ttu-id="92a90-235">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-235">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentOrderComparer">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNodeDocumentOrderComparer DocumentOrderComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNodeDocumentOrderComparer DocumentOrderComparer" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNode.DocumentOrderComparer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DocumentOrderComparer As XNodeDocumentOrderComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNodeDocumentOrderComparer ^ DocumentOrderComparer { System::Xml::Linq::XNodeDocumentOrderComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNodeDocumentOrderComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92a90-236">Ottiene un operatore di confronto che può confrontare la posizione relativa di due nodi.</span><span class="sxs-lookup"><span data-stu-id="92a90-236">Gets a comparer that can compare the relative position of two nodes.</span></span></summary>
        <value><span data-ttu-id="92a90-237">Oggetto <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> che può confrontare la posizione relativa di due nodi.</span><span class="sxs-lookup"><span data-stu-id="92a90-237">An <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> that can compare the relative position of two nodes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-238">Questa proprietà viene principalmente utilizzata internamente per l'implementazione di <xref:System.Xml.Linq.Extensions.InDocumentOrder%2A> metodo di estensione.</span><span class="sxs-lookup"><span data-stu-id="92a90-238">This property is primarily used internally for implementing the <xref:System.Xml.Linq.Extensions.InDocumentOrder%2A> extension method.</span></span> <span data-ttu-id="92a90-239">L'approccio consigliato consiste nell'utilizzare il metodo di estensione anziché utilizzare direttamente questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="92a90-239">The recommended approach is to use that extension method instead of using this property directly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-240">Nell'esempio seguente viene creato un albero XML con alcuni elementi.</span><span class="sxs-lookup"><span data-stu-id="92a90-240">The following example creates an XML tree with some elements.</span></span> <span data-ttu-id="92a90-241">Crea quindi un <xref:System.Collections.Generic.List%601> di <xref:System.Xml.Linq.XNode> che contiene alcuni elementi della struttura ad albero XML in modo casuale.</span><span class="sxs-lookup"><span data-stu-id="92a90-241">It then creates a <xref:System.Collections.Generic.List%601> of <xref:System.Xml.Linq.XNode> that contains some elements from the XML tree at random.</span></span> <span data-ttu-id="92a90-242">Ordina l'elenco, utilizzare questa proprietà per recuperare un <xref:System.Xml.Linq.XNodeDocumentOrderComparer>, che implementa il <xref:System.Collections.IComparer?displayProperty=nameWithType> e <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> interfacce.</span><span class="sxs-lookup"><span data-stu-id="92a90-242">It sorts the list, using this property to retrieve a <xref:System.Xml.Linq.XNodeDocumentOrderComparer>, which implements the <xref:System.Collections.IComparer?displayProperty=nameWithType> and <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> interfaces.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
  
List<XNode> nodeList = new List<XNode>();  
nodeList.Add(xmlTree.Element("Child5"));  
nodeList.Add(xmlTree.Element("Child3"));  
nodeList.Add(xmlTree.Element("Child1"));  
  
// Sort nodes in document order.  
nodeList.Sort(XNode.DocumentOrderComparer);  
  
foreach (XElement el in nodeList)  
    Console.WriteLine(el);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim nodeList As List(Of XNode) = New List(Of XNode)()  
nodeList.Add(xmlTree.Element("Child5"))  
nodeList.Add(xmlTree.Element("Child3"))  
nodeList.Add(xmlTree.Element("Child1"))  
  
' Sort nodes in document order.  
nodeList.Sort(XNode.DocumentOrderComparer)  
  
For Each el In nodeList  
    Console.WriteLine(el)  
Next  
```  
  
 <span data-ttu-id="92a90-243">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-243">This example produces the following output:</span></span>  
  
```  
<Child1>1</Child1>  
<Child3>3</Child3>  
<Child5>5</Child5>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ElementsAfterSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92a90-244">Restituisce una raccolta di elementi di pari livello dopo questo nodo nell'ordine del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-244">Returns a collection of the sibling elements after this node, in document order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-245">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="92a90-245">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ElementsAfterSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; ElementsAfterSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; ElementsAfterSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ElementsAfterSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function ElementsAfterSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ ElementsAfterSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92a90-246">Restituisce una raccolta di elementi di pari livello dopo questo nodo nell'ordine del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-246">Returns a collection of the sibling elements after this node, in document order.</span></span></summary>
        <returns><span data-ttu-id="92a90-247"><see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XElement" /> di elementi di pari livello dopo questo nodo nell'ordine in cui sono riportati nei documenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-247">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-248">Questo metodo include solo elementi di pari livello nella raccolta restituita.</span><span class="sxs-lookup"><span data-stu-id="92a90-248">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="92a90-249">Non include discendenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-249">It does not include descendants.</span></span>  
  
 <span data-ttu-id="92a90-250">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="92a90-250">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-251">Nell'esempio seguente viene creato un elemento con contenuto complesso.</span><span class="sxs-lookup"><span data-stu-id="92a90-251">The following example creates an element with some complex content.</span></span> <span data-ttu-id="92a90-252">Viene quindi utilizzato questo metodo per recuperare i nodi nell'ordine del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-252">It then uses this method to retrieve the nodes in document order.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child = xmlTree.Element("Child3");  
IEnumerable<XElement> elements = child.ElementsAfterSelf();  
foreach (XElement el in elements)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child As XElement = xmlTree.<Child3>(0)  
Dim elements As IEnumerable(Of XElement) = child.ElementsAfterSelf()  
For Each el In elements  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="92a90-253">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-253">This example produces the following output:</span></span>  
  
```  
Child4  
Child5  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementsAfterSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; ElementsAfterSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; ElementsAfterSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function ElementsAfterSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ ElementsAfterSelf(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92a90-254">Oggetto <see cref="T:System.Xml.Linq.XName" /> di cui trovare la corrispondenza.</span><span class="sxs-lookup"><span data-stu-id="92a90-254">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="92a90-255">Restituisce una raccolta filtrata di elementi di pari livello dopo questo nodo nell'ordine indicato nel documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-255">Returns a filtered collection of the sibling elements after this node, in document order.</span></span> <span data-ttu-id="92a90-256">Solo gli elementi che hanno un oggetto <see cref="T:System.Xml.Linq.XName" /> corrispondente vengono inclusi nella raccolta.</span><span class="sxs-lookup"><span data-stu-id="92a90-256">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="92a90-257"><see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XElement" /> di elementi di pari livello dopo questo nodo nell'ordine in cui sono riportati nei documenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-257">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order.</span></span> <span data-ttu-id="92a90-258">Solo gli elementi che hanno un oggetto <see cref="T:System.Xml.Linq.XName" /> corrispondente vengono inclusi nella raccolta.</span><span class="sxs-lookup"><span data-stu-id="92a90-258">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-259">Questo metodo include solo elementi di pari livello nella raccolta restituita.</span><span class="sxs-lookup"><span data-stu-id="92a90-259">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="92a90-260">Non include discendenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-260">It does not include descendants.</span></span>  
  
 <span data-ttu-id="92a90-261">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="92a90-261">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-262">Nell'esempio seguente viene creato un elemento con contenuto complesso.</span><span class="sxs-lookup"><span data-stu-id="92a90-262">The following example creates an element with some complex content.</span></span> <span data-ttu-id="92a90-263">Viene quindi utilizzato questo metodo per recuperare gli elementi di pari livello, nell'ordine del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-263">It then uses this method to retrieve the sibling elements, in document order.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child = xmlTree.Element("Child3");  
IEnumerable<XElement> elements = child.ElementsAfterSelf("Child4");  
foreach (XElement el in elements)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child As XElement = xmlTree.<Child3>(0)  
Dim elements As IEnumerable(Of XElement) = child.ElementsAfterSelf("Child4")  
  
For Each el In elements  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="92a90-264">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-264">This example produces the following output:</span></span>  
  
```  
Child4  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ElementsBeforeSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92a90-265">Restituisce una raccolta di elementi di pari livello prima di questo nodo nell'ordine del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-265">Returns a collection of the sibling elements before this node, in document order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-266">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="92a90-266">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ElementsBeforeSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; ElementsBeforeSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; ElementsBeforeSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ElementsBeforeSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function ElementsBeforeSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ ElementsBeforeSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92a90-267">Restituisce una raccolta di elementi di pari livello prima di questo nodo nell'ordine del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-267">Returns a collection of the sibling elements before this node, in document order.</span></span></summary>
        <returns><span data-ttu-id="92a90-268"><see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XElement" /> di elementi di pari livello prima di questo nodo nell'ordine in cui sono riportati nei documenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-268">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-269">Questo metodo include solo elementi di pari livello nella raccolta restituita.</span><span class="sxs-lookup"><span data-stu-id="92a90-269">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="92a90-270">Non include discendenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-270">It does not include descendants.</span></span>  
  
 <span data-ttu-id="92a90-271">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="92a90-271">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-272">Nell'esempio seguente viene utilizzato il metodo axis.</span><span class="sxs-lookup"><span data-stu-id="92a90-272">The following example uses this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child = xmlTree.Element("Child3");  
IEnumerable<XElement> elements = child.ElementsBeforeSelf();  
foreach (XElement el in elements)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child As XElement = xmlTree.<Child3>(0)  
Dim elements As IEnumerable(Of XElement) = child.ElementsBeforeSelf()  
  
For Each el In elements  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="92a90-273">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-273">This example produces the following output:</span></span>  
  
```  
Child1  
Child2  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementsBeforeSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; ElementsBeforeSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; ElementsBeforeSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function ElementsBeforeSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ ElementsBeforeSelf(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="92a90-274">Oggetto <see cref="T:System.Xml.Linq.XName" /> di cui trovare la corrispondenza.</span><span class="sxs-lookup"><span data-stu-id="92a90-274">The <see cref="T:System.Xml.Linq.XName" /> to match.</span></span></param>
        <summary><span data-ttu-id="92a90-275">Restituisce una raccolta filtrata di elementi di pari livello prima di questo nodo nell'ordine del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-275">Returns a filtered collection of the sibling elements before this node, in document order.</span></span> <span data-ttu-id="92a90-276">Solo gli elementi che hanno un oggetto <see cref="T:System.Xml.Linq.XName" /> corrispondente vengono inclusi nella raccolta.</span><span class="sxs-lookup"><span data-stu-id="92a90-276">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></summary>
        <returns><span data-ttu-id="92a90-277"><see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XElement" /> di elementi di pari livello prima di questo nodo nell'ordine in cui sono riportati nei documenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-277">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order.</span></span> <span data-ttu-id="92a90-278">Solo gli elementi che hanno un oggetto <see cref="T:System.Xml.Linq.XName" /> corrispondente vengono inclusi nella raccolta.</span><span class="sxs-lookup"><span data-stu-id="92a90-278">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-279">Questo metodo include solo elementi di pari livello nella raccolta restituita.</span><span class="sxs-lookup"><span data-stu-id="92a90-279">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="92a90-280">Non include discendenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-280">It does not include descendants.</span></span>  
  
 <span data-ttu-id="92a90-281">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="92a90-281">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-282">Nell'esempio seguente viene utilizzato questo metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-282">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child = xmlTree.Element("Child3");  
IEnumerable<XElement> elements = child.ElementsBeforeSelf("Child2");  
foreach (XElement el in elements)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child As XElement = xmlTree.<Child3>(0)  
Dim elements As IEnumerable(Of XElement) = child.ElementsBeforeSelf("Child2")  
  
For Each el In elements  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="92a90-283">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-283">This example produces the following output:</span></span>  
  
```  
Child2  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualityComparer">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNodeEqualityComparer EqualityComparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNodeEqualityComparer EqualityComparer" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNode.EqualityComparer" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EqualityComparer As XNodeEqualityComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNodeEqualityComparer ^ EqualityComparer { System::Xml::Linq::XNodeEqualityComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNodeEqualityComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92a90-284">Ottiene un operatore di confronto che può confrontare due nodi per l'uguaglianza di valore.</span><span class="sxs-lookup"><span data-stu-id="92a90-284">Gets a comparer that can compare two nodes for value equality.</span></span></summary>
        <value><span data-ttu-id="92a90-285"><see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> che può confrontare due nodi per l'uguaglianza di valore.</span><span class="sxs-lookup"><span data-stu-id="92a90-285">A <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> that can compare two nodes for value equality.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="92a90-286">L'esempio seguente usa questa proprietà per recuperare un <xref:System.Xml.Linq.XNodeEqualityComparer>, che implementa il <xref:System.Collections.IEqualityComparer?displayProperty=nameWithType> e <xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=nameWithType> interfacce.</span><span class="sxs-lookup"><span data-stu-id="92a90-286">The following example uses this property to retrieve an <xref:System.Xml.Linq.XNodeEqualityComparer>, which implements the <xref:System.Collections.IEqualityComparer?displayProperty=nameWithType> and <xref:System.Collections.Generic.IEqualityComparer%601?displayProperty=nameWithType> interfaces.</span></span> <span data-ttu-id="92a90-287">Crea un dizionario che utilizza questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="92a90-287">It creates a dictionary that uses this property.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
  
Dictionary<XNode, string> nodeDictionary = new Dictionary<XNode, string>(XNode.EqualityComparer);  
nodeDictionary.Add(xmlTree.Element("Child5"), "Child 5 Information");  
nodeDictionary.Add(xmlTree.Element("Child3"), "Child 3 Information");  
nodeDictionary.Add(xmlTree.Element("Child1"), "Child 1 Information");  
  
string str = nodeDictionary[xmlTree.Element("Child3")];  
Console.WriteLine(str);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim nodeDictionary As Dictionary(Of XNode, String) = New Dictionary(Of XNode, String)(XNode.EqualityComparer)  
nodeDictionary.Add(xmlTree.Element("Child5"), "Child 5 Information")  
nodeDictionary.Add(xmlTree.Element("Child3"), "Child 3 Information")  
nodeDictionary.Add(xmlTree.Element("Child1"), "Child 1 Information")  
  
Dim str As String = nodeDictionary(xmlTree.Element("Child3"))  
Console.WriteLine(str)  
```  
  
 <span data-ttu-id="92a90-288">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-288">This example produces the following output:</span></span>  
  
```  
Child 3 Information  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAfter">
      <MemberSignature Language="C#" Value="public bool IsAfter (System.Xml.Linq.XNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAfter(class System.Xml.Linq.XNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAfter (node As XNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAfter(System::Xml::Linq::XNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="node"><span data-ttu-id="92a90-289"><see cref="T:System.Xml.Linq.XNode" /> da confrontare per l'ordine dei documenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-289">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</span></span></param>
        <summary><span data-ttu-id="92a90-290">Determina se il nodo corrente viene visualizzato dopo un nodo specificato in termini di ordine del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-290">Determines if the current node appears after a specified node in terms of document order.</span></span></summary>
        <returns>
          <span data-ttu-id="92a90-291"><see langword="true" /> se il nodo viene visualizzato dopo il nodo specificato; in caso contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-291"><see langword="true" /> if this node appears after the specified node; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-292">Il <xref:System.Xml.Linq.XContainer> memorizza i relativi nodi figlio sotto forma di elenco collegato singolarmente di <xref:System.Xml.Linq.XNode> oggetti.</span><span class="sxs-lookup"><span data-stu-id="92a90-292">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="92a90-293">Ciò significa che il <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> metodo deve attraversare i predecessori di due nodi confrontati fino a individuare l'elemento padre comune.</span><span class="sxs-lookup"><span data-stu-id="92a90-293">This means that the <xref:System.Xml.Linq.XNode.CompareDocumentOrder%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent.</span></span> <span data-ttu-id="92a90-294">Quindi deve scorrere l'elenco dei nodi figlio dell'elemento padre comune per determinare l'ordine dei due nodi confrontati.</span><span class="sxs-lookup"><span data-stu-id="92a90-294">Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared.</span></span> <span data-ttu-id="92a90-295">Pertanto, l'utilizzo di questo metodo potrebbe influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="92a90-295">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-296">Nell'esempio seguente viene utilizzato questo metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-296">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
XElement child5 = xmlTree.Element("Child5");  
if (child5.IsAfter(child3))  
    Console.WriteLine("Child5 is after Child3");  
else  
    Console.WriteLine("Child5 is not after Child3");  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
Dim child5 As XElement = xmlTree.<Child5>(0)  
If (child5.IsAfter(child3)) Then  
    Console.WriteLine("Child5 is after Child3")  
Else  
    Console.WriteLine("Child5 is not after Child3")  
End If  
```  
  
 <span data-ttu-id="92a90-297">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-297">This example produces the following output:</span></span>  
  
```  
Child5 is after Child3  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBefore">
      <MemberSignature Language="C#" Value="public bool IsBefore (System.Xml.Linq.XNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsBefore(class System.Xml.Linq.XNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsBefore (node As XNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsBefore(System::Xml::Linq::XNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.Linq.XNode" />
      </Parameters>
      <Docs>
        <param name="node"><span data-ttu-id="92a90-298"><see cref="T:System.Xml.Linq.XNode" /> da confrontare per l'ordine dei documenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-298">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</span></span></param>
        <summary><span data-ttu-id="92a90-299">Determina se il nodo corrente viene visualizzato prima di un nodo specificato in termini di ordine del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-299">Determines if the current node appears before a specified node in terms of document order.</span></span></summary>
        <returns>
          <span data-ttu-id="92a90-300"><see langword="true" /> se il nodo viene visualizzato prima del nodo specificato; in caso contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-300"><see langword="true" /> if this node appears before the specified node; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-301">Il <xref:System.Xml.Linq.XContainer> memorizza i relativi nodi figlio sotto forma di elenco collegato singolarmente di <xref:System.Xml.Linq.XNode> oggetti.</span><span class="sxs-lookup"><span data-stu-id="92a90-301">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="92a90-302">Ciò significa che il <xref:System.Xml.Linq.XNode.IsBefore%2A> metodo deve attraversare i predecessori di due nodi confrontati fino a individuare l'elemento padre comune.</span><span class="sxs-lookup"><span data-stu-id="92a90-302">This means that the <xref:System.Xml.Linq.XNode.IsBefore%2A> method must traverse the ancestors of the two nodes being compared until it finds the common parent.</span></span> <span data-ttu-id="92a90-303">Quindi deve scorrere l'elenco dei nodi figlio dell'elemento padre comune per determinare l'ordine dei due nodi confrontati.</span><span class="sxs-lookup"><span data-stu-id="92a90-303">Then it must traverse the list of the common parent’s child nodes to determine the order of the two nodes being compared.</span></span> <span data-ttu-id="92a90-304">Pertanto, l'utilizzo di questo metodo potrebbe influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="92a90-304">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-305">Nell'esempio seguente viene utilizzato questo metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-305">The following example uses this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XText("More text content."),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
XElement child5 = xmlTree.Element("Child5");  
if (child5.IsBefore(child3))  
    Console.WriteLine("Child5 is before Child3");  
else  
    Console.WriteLine("Child5 is not before Child3");  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>Text content.  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>More text content.  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
Dim child5 As XElement = xmlTree.<Child5>(0)  
If (child5.IsBefore(child3)) Then  
    Console.WriteLine("Child5 is before Child3")  
Else  
    Console.WriteLine("Child5 is not before Child3")  
End If  
```  
  
 <span data-ttu-id="92a90-306">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-306">This example produces the following output:</span></span>  
  
```  
Child5 is not before Child3  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode NextNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode NextNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNode.NextNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NextNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ NextNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92a90-307">Ottiene il nodo di pari livello successivo di questo nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-307">Gets the next sibling node of this node.</span></span></summary>
        <value><span data-ttu-id="92a90-308">Oggetto <see cref="T:System.Xml.Linq.XNode" /> che contiene il nodo di pari livello successivo.</span><span class="sxs-lookup"><span data-stu-id="92a90-308">The <see cref="T:System.Xml.Linq.XNode" /> that contains the next sibling node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-309">Se questo <xref:System.Xml.Linq.XNode> does non dispone di un padre, o se non esiste alcun nodo successivo, questa proprietà restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="92a90-309">If this <xref:System.Xml.Linq.XNode> does not have a parent, or if there is no next node, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-310">L'esempio seguente usa questa proprietà per eseguire un ciclo di nodi.</span><span class="sxs-lookup"><span data-stu-id="92a90-310">The following example uses this property to loop through nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XText("Some Text"),  
    new XElement("Child2",  
        2,  
        new XElement("GrandChild", "GrandChild Content")  
    ),  
    new XComment("a comment"),  
    new XElement("Child3")  
);  
XNode node = xmlTree.Element("Child2");  
do {  
    StringBuilder sb = new StringBuilder();  
    sb.Append(String.Format("NodeType: {0}", node.NodeType.ToString().PadRight(10)));  
    switch (node.NodeType)  
    {  
        case XmlNodeType.Text:  
            sb.Append((node as XText).Value);  
            break;  
        case XmlNodeType.Element:  
            sb.Append((node as XElement).Name);  
            break;  
        case XmlNodeType.Comment:  
            sb.Append((node as XComment).Value);  
            break;  
    }  
    Console.WriteLine(sb.ToString());  
}  
while ((node = node.NextNode) != null);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>Some Text  
            <Child2>2  
                <GrandChild>GrandChild Content</GrandChild>  
            </Child2>  
            <!--a comment-->  
            <Child3>3</Child3>  
        </Root>  
  
Dim node As XNode = xmlTree.Element("Child2")  
Do  
    Dim sb As StringBuilder = New StringBuilder()  
    sb.Append(String.Format("NodeType: {0}", node.NodeType.ToString().PadRight(10)))  
    Select Case node.NodeType  
        Case XmlNodeType.Text  
            sb.Append(DirectCast(node, XText).Value)  
        Case XmlNodeType.Element  
            sb.Append(DirectCast(node, XElement).Name)  
        Case XmlNodeType.Comment  
            sb.Append(DirectCast(node, XComment).Value)  
    End Select  
    Console.WriteLine(sb.ToString())  
  
    node = node.NextNode  
Loop While (Not (node Is Nothing))  
```  
  
 <span data-ttu-id="92a90-311">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-311">This example produces the following output:</span></span>  
  
```  
NodeType: Element   Child2  
NodeType: Comment   a comment  
NodeType: Element   Child3  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodesAfterSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; NodesAfterSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; NodesAfterSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.NodesAfterSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function NodesAfterSelf () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ NodesAfterSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92a90-312">Restituisce una raccolta di nodi di pari livello dopo questo nodo nell'ordine del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-312">Returns a collection of the sibling nodes after this node, in document order.</span></span></summary>
        <returns><span data-ttu-id="92a90-313"><see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XNode" /> di nodi di pari livello dopo questo nodo nell'ordine in cui sono riportati nei documenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-313">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes after this node, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-314">Questo metodo include solo elementi di pari livello nella raccolta restituita.</span><span class="sxs-lookup"><span data-stu-id="92a90-314">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="92a90-315">Non include discendenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-315">It does not include descendants.</span></span>  
  
 <span data-ttu-id="92a90-316">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="92a90-316">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-317">Nell'esempio seguente viene creato un albero XML e quindi esegue una query nell'albero mediante questo metodo dell'asse.</span><span class="sxs-lookup"><span data-stu-id="92a90-317">The following example creates an XML tree, and then queries the tree using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XText("More text content."),  
    new XElement("child3", "child3 content")  
);  
XElement child = xmlTree.Element("Child2");  
IEnumerable<XNode> nodes =  
    from node in child.NodesAfterSelf()  
    select node;  
foreach (XNode node in nodes)  
{  
    Console.WriteLine("Node type: {0}  {1}",  
        node.NodeType,  
        node.NodeType == XmlNodeType.Text ? (node as XText).Value : "");  
}  
```  
  
```vb  
Dim xmlTree As XElement = New XElement("Root", _New XText("Text content."), _  
    New XElement("Child1", "child1 content"), _  
    New XElement("Child2", "child2 content"), _  
    New XText("More text content."), _  
    New XElement("child3", "child3 content") _  
)  
  
Dim child As XElement = xmlTree.Element("Child2")  
Dim nodes As IEnumerable(Of XNode) = _  
    From node In child.NodesAfterSelf() _  
    Select node  
For Each node As XNode In nodes  
    Dim s As String = ""  
    If node.NodeType = XmlNodeType.Text Then  
        s = DirectCast(node, XText).Value  
    End If  
    Console.WriteLine("Node type: {0}  {1}", node.NodeType, s)  
Next  
```  
  
 <span data-ttu-id="92a90-318">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-318">This example produces the following output:</span></span>  
  
```  
Node type: Text  More text content.  
Node type: Element  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodesBeforeSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; NodesBeforeSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; NodesBeforeSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.NodesBeforeSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function NodesBeforeSelf () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ NodesBeforeSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92a90-319">Restituisce una raccolta di nodi di pari livello prima di questo nodo nell'ordine del documento.</span><span class="sxs-lookup"><span data-stu-id="92a90-319">Returns a collection of the sibling nodes before this node, in document order.</span></span></summary>
        <returns><span data-ttu-id="92a90-320"><see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XNode" /> di nodi di pari livello prima di questo nodo nell'ordine in cui sono riportati nei documenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-320">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes before this node, in document order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-321">Questo metodo include solo elementi di pari livello nella raccolta restituita.</span><span class="sxs-lookup"><span data-stu-id="92a90-321">This method only includes siblings in the returned collection.</span></span> <span data-ttu-id="92a90-322">Non include discendenti.</span><span class="sxs-lookup"><span data-stu-id="92a90-322">It does not include descendants.</span></span>  
  
 <span data-ttu-id="92a90-323">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="92a90-323">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-324">Nell'esempio seguente viene creato un albero XML e quindi esegue una query nell'albero mediante questo metodo dell'asse.</span><span class="sxs-lookup"><span data-stu-id="92a90-324">The following example creates an XML tree, and then queries the tree using this axis method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XText("Text content."),  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XText("More text content."),  
    new XElement("child3", "child3 content")  
);  
XElement child = xmlTree.Element("Child2");  
IEnumerable<XNode> nodes =  
    from node in child.NodesBeforeSelf()  
    select node;  
foreach (XNode node in nodes)  
    Console.WriteLine("Node type: {0}  {1}",  
        node.NodeType,  
        node.NodeType == XmlNodeType.Text ? (node as XText).Value : "");  
```  
  
```vb  
Dim xmlTree As XElement = New XElement("Root", _  
    New XText("Text content."), _  
    New XElement("Child1", "child1 content"), _  
    New XElement("Child2", "child2 content"), _  
    New XText("More text content."), _  
    New XElement("child3", "child3 content") _  
)  
  
Dim child As XElement = xmlTree.Element("Child2")  
Dim nodes As IEnumerable(Of XNode) = _  
    From node In child.NodesBeforeSelf() _  
    Select node  
For Each node As XNode In nodes  
    Dim s As String = ""  
    If node.NodeType = XmlNodeType.Text Then  
        s = DirectCast(node, XText).Value  
    End If  
    Console.WriteLine("Node type: {0}  {1}", node.NodeType, s)  
Next  
```  
  
 <span data-ttu-id="92a90-325">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-325">This example produces the following output:</span></span>  
  
```  
Node type: Text  Text content.  
Node type: Element  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviousNode">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNode PreviousNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNode PreviousNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNode.PreviousNode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreviousNode As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNode ^ PreviousNode { System::Xml::Linq::XNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="92a90-326">Ottiene il nodo di pari livello precedente di questo nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-326">Gets the previous sibling node of this node.</span></span></summary>
        <value><span data-ttu-id="92a90-327">Oggetto <see cref="T:System.Xml.Linq.XNode" /> che contiene il nodo di pari livello precedente.</span><span class="sxs-lookup"><span data-stu-id="92a90-327">The <see cref="T:System.Xml.Linq.XNode" /> that contains the previous sibling node.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-328">Se questo <xref:System.Xml.Linq.XNode> does non dispone di un padre, o se non esiste alcun nodo precedente, questa proprietà restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="92a90-328">If this <xref:System.Xml.Linq.XNode> does not have a parent, or if there is no previous node, this property returns `null`.</span></span>  
  
 <span data-ttu-id="92a90-329">Il <xref:System.Xml.Linq.XContainer> memorizza i relativi nodi figlio sotto forma di elenco collegato singolarmente di <xref:System.Xml.Linq.XNode> oggetti.</span><span class="sxs-lookup"><span data-stu-id="92a90-329">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="92a90-330">Ciò significa che il <xref:System.Xml.Linq.XNode.PreviousNode%2A> proprietà deve scorrere l'elenco di nodi figlio diretti sotto il contenitore padre.</span><span class="sxs-lookup"><span data-stu-id="92a90-330">This means that the <xref:System.Xml.Linq.XNode.PreviousNode%2A> property must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="92a90-331">Pertanto, l'utilizzo di questa proprietà potrebbe influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="92a90-331">Therefore, using this property might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-332">L'esempio seguente usa questa proprietà per eseguire un ciclo di nodi.</span><span class="sxs-lookup"><span data-stu-id="92a90-332">The following example uses this property to loop through nodes.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XText("Some Text"),  
    new XElement("Child2",  
        2,  
        new XElement("GrandChild", "GrandChild Content")  
    ),  
    new XComment("a comment"),  
    new XElement("Child3")  
);  
XNode node = xmlTree.Element("Child2");  
do {  
    StringBuilder sb = new StringBuilder();  
    sb.Append(String.Format("NodeType: {0}", node.NodeType.ToString().PadRight(10)));  
    switch (node.NodeType)  
    {  
        case XmlNodeType.Text:  
            sb.Append((node as XText).Value);  
            break;  
        case XmlNodeType.Element:  
            sb.Append((node as XElement).Name);  
            break;  
        case XmlNodeType.Comment:  
            sb.Append((node as XComment).Value);  
            break;  
    }  
    Console.WriteLine(sb.ToString());  
}  
while ((node = node.PreviousNode) != null);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Child1>1</Child1>Some Text<Child2>2  
            <GrandChild>GrandChild Content</GrandChild>  
        </Child2>  
        <!--a comment-->  
        <Child3>3</Child3>  
    </Root>  
  
Dim node As XNode = xmlTree.Element("Child2")  
Do  
    Dim sb As StringBuilder = New StringBuilder()  
    sb.Append(String.Format("NodeType: {0}", node.NodeType.ToString().PadRight(10)))  
    Select Case node.NodeType  
        Case XmlNodeType.Text  
            sb.Append(DirectCast(node, XText).Value)  
        Case XmlNodeType.Element  
            sb.Append(DirectCast(node, XElement).Name)  
        Case XmlNodeType.Comment  
            sb.Append(DirectCast(node, XComment).Value)  
    End Select  
    Console.WriteLine(sb.ToString())  
  
    node = node.PreviousNode  
Loop While (Not (node Is Nothing))  
```  
  
 <span data-ttu-id="92a90-333">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-333">This example produces the following output:</span></span>  
  
```  
NodeType: Element   Child2  
NodeType: Text      Some Text  
NodeType: Element   Child1  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFrom">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNode ReadFrom (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XNode ReadFrom(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadFrom (reader As XmlReader) As XNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XNode ^ ReadFrom(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="92a90-334">Un <see cref="T:System.Xml.XmlReader" /> posizionato al livello del nodo per leggere nel <see cref="T:System.Xml.Linq.XNode" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-334">An <see cref="T:System.Xml.XmlReader" /> positioned at the node to read into this <see cref="T:System.Xml.Linq.XNode" />.</span></span></param>
        <summary><span data-ttu-id="92a90-335">Crea un oggetto <see cref="T:System.Xml.Linq.XNode" /> da un oggetto <see cref="T:System.Xml.XmlReader" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-335">Creates an <see cref="T:System.Xml.Linq.XNode" /> from an <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <returns><span data-ttu-id="92a90-336"><see cref="T:System.Xml.Linq.XNode" /> che contiene il nodo e i nodi discendenti relativi letti dal lettore.</span><span class="sxs-lookup"><span data-stu-id="92a90-336">An <see cref="T:System.Xml.Linq.XNode" /> that contains the node and its descendant nodes that were read from the reader.</span></span> <span data-ttu-id="92a90-337">Il tipo di runtime del nodo è determinato dal tipo di nodo (<see cref="P:System.Xml.Linq.XObject.NodeType" />) del primo nodo incontrato nel lettore.</span><span class="sxs-lookup"><span data-stu-id="92a90-337">The runtime type of the node is determined by the node type (<see cref="P:System.Xml.Linq.XObject.NodeType" />) of the first node encountered in the reader.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-338">È possibile utilizzare questo metodo per scrivere un metodo che restituisce una raccolta di nodi, producendo ciascun nodo come nodo viene letto dal lettore.</span><span class="sxs-lookup"><span data-stu-id="92a90-338">You can use this method to write a method that returns a collection of nodes, yielding each node as the node is read from the reader.</span></span> <span data-ttu-id="92a90-339">Questo metodo consente di elaborare il file XML arbitrariamente grandi con un footprint di memoria molto ridotto.</span><span class="sxs-lookup"><span data-stu-id="92a90-339">This method enables you to process arbitrarily large XML files with a very small memory footprint.</span></span>  
  
 <span data-ttu-id="92a90-340">Il lettore passato a questo metodo può generare eccezioni.</span><span class="sxs-lookup"><span data-stu-id="92a90-340">The reader that you pass to this method might throw exceptions.</span></span> <span data-ttu-id="92a90-341"><xref:System.Xml.Linq.XNode.ReadFrom%2A> non rileva tutte le eccezioni generate dal reader; le eccezioni non gestite propagate a codice che ha chiamato <xref:System.Xml.Linq.XNode.ReadFrom%2A>.</span><span class="sxs-lookup"><span data-stu-id="92a90-341"><xref:System.Xml.Linq.XNode.ReadFrom%2A> does not catch all exceptions thrown by the reader; the unhandled exceptions bubble up to the code that called <xref:System.Xml.Linq.XNode.ReadFrom%2A>.</span></span> <span data-ttu-id="92a90-342">In particolare, il codice deve essere preparato a gestire <xref:System.Xml.XmlException>.</span><span class="sxs-lookup"><span data-stu-id="92a90-342">In particular, your code should be prepared to handle <xref:System.Xml.XmlException>.</span></span>  
  
 <span data-ttu-id="92a90-343">Per un esempio di come eseguire il flusso di un documento più complesso, vedere [come: flusso di frammenti XML con accesso a informazioni di intestazione](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092).</span><span class="sxs-lookup"><span data-stu-id="92a90-343">For an example of how to stream a more complex document, see [How to: Stream XML Fragments with Access to Header Information](http://msdn.microsoft.com/library/01311522-9d03-4977-8641-2932c6f56092).</span></span>  
  
 <span data-ttu-id="92a90-344">Determinati operatori di query standard, ad esempio <xref:System.Linq.Enumerable.OrderBy%2A>, scorrono l'origine, raccolgono tutti i dati, li ordinano e infine restituiscono il primo elemento nella sequenza.</span><span class="sxs-lookup"><span data-stu-id="92a90-344">Certain standard query operators, such as <xref:System.Linq.Enumerable.OrderBy%2A>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence.</span></span> <span data-ttu-id="92a90-345">Se si usa un operatore di query che materializza l'origine prima di restituire il primo elemento, non verrà mantenuto un footprint di memoria di piccole dimensioni.</span><span class="sxs-lookup"><span data-stu-id="92a90-345">If you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint.</span></span>  
  
 <span data-ttu-id="92a90-346">Per un esempio di utilizzo [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] per trasformare i documenti XML molto grandi mantenendo un footprint di memoria di piccole dimensioni, vedere [procedura: eseguire lo Streaming trasformazione di documenti XML](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).</span><span class="sxs-lookup"><span data-stu-id="92a90-346">For an example of using [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] to transform extremely large XML documents while maintaining a small memory footprint, see [How to: Perform Streaming Transform of Large XML Documents](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-347">In questo esempio viene utilizzato il file XML seguente, Source.xml denominato:</span><span class="sxs-lookup"><span data-stu-id="92a90-347">This example uses the following XML file, named Source.xml:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>   
<Root>  
  <Child Key="01">  
    <GrandChild>aaa</GrandChild>  
  </Child>  
  <Child Key="02">  
    <GrandChild>bbb</GrandChild>  
  </Child>  
  <Child Key="03">  
    <GrandChild>ccc</GrandChild>  
  </Child>  
</Root>  
```  
  
 <span data-ttu-id="92a90-348">Questo esempio viene creato un metodo dell'asse personalizzato che utilizza <xref:System.Xml.Linq.XNode.ReadFrom%2A>.</span><span class="sxs-lookup"><span data-stu-id="92a90-348">This example creates a custom axis method that uses <xref:System.Xml.Linq.XNode.ReadFrom%2A>.</span></span> <span data-ttu-id="92a90-349">È possibile eseguire il metodo dell'asse personalizzato utilizzando una query LINQ.</span><span class="sxs-lookup"><span data-stu-id="92a90-349">You can query the custom axis by using a LINQ query.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="92a90-350">L'esempio seguente usa il costrutto di restituzione per il ridimensionamento di c#.</span><span class="sxs-lookup"><span data-stu-id="92a90-350">The following example uses the yield return construct of C#.</span></span> <span data-ttu-id="92a90-351">Poiché non esiste una funzionalità equivalente in [!INCLUDE[vb_orcas_long](~/includes/vb-orcas-long-md.md)], questo esempio viene fornito solo in C#.</span><span class="sxs-lookup"><span data-stu-id="92a90-351">Because there is no equivalent feature in [!INCLUDE[vb_orcas_long](~/includes/vb-orcas-long-md.md)], this example is provided only in C#.</span></span>  
  
```csharp  
class Program  
{  
    static IEnumerable<XElement> StreamRootChildDoc(string uri)  
    {  
        using (XmlReader reader = XmlReader.Create(uri))  
        {  
            reader.MoveToContent();  
            // Parse the file and display each of the nodes.  
            while (reader.Read())  
            {  
                switch (reader.NodeType)  
                {  
                    case XmlNodeType.Element:  
                        if (reader.Name == "Child")  
                        {  
                            XElement el = XElement.ReadFrom(reader) as XElement;  
                            if (el != null)  
                                yield return el;  
                        }  
                        break;  
                }  
            }  
        }  
    }  
  
    static void Main(string[] args)  
    {  
        IEnumerable<string> grandChildData =  
            from el in StreamRootChildDoc("Source.xml")  
            where (int)el.Attribute("Key") > 1  
            select (string)el.Element("GrandChild");  
  
        foreach (string str in grandChildData)  
            Console.WriteLine(str);  
    }  
}  
```  
  
 <span data-ttu-id="92a90-352">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-352">This example produces the following output.</span></span>  
  
```  
bbb  
ccc  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92a90-353"><see cref="T:System.Xml.XmlReader" /> non è posizionato su un tipo di nodo riconosciuto.</span><span class="sxs-lookup"><span data-stu-id="92a90-353">The <see cref="T:System.Xml.XmlReader" /> is not positioned on a recognized node type.</span></span></exception>
        <exception cref="T:System.Xml.XmlException"><span data-ttu-id="92a90-354">Il <see cref="T:System.Xml.XmlReader" /> sottostante genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="92a90-354">The underlying <see cref="T:System.Xml.XmlReader" /> throws an exception.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadFromAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XNode&gt; ReadFromAsync (System.Xml.XmlReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XNode&gt; ReadFromAsync(class System.Xml.XmlReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XNode ^&gt; ^ ReadFromAsync(System::Xml::XmlReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92a90-355">Rimuove questo nodo dal padre.</span><span class="sxs-lookup"><span data-stu-id="92a90-355">Removes this node from its parent.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-356">In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] di programmazione, è consigliabile non modificare o modificare un set di nodi mentre si esegue una query per i nodi in tale set.</span><span class="sxs-lookup"><span data-stu-id="92a90-356">In [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming, you should not manipulate or modify a set of nodes while you are querying for nodes in that set.</span></span> <span data-ttu-id="92a90-357">In pratica, ciò significa che non si deve eseguire l'iterazione su un set di nodi e rimuoverli.</span><span class="sxs-lookup"><span data-stu-id="92a90-357">In practical terms, this means that you should not iterate over a set of nodes and remove them.</span></span> <span data-ttu-id="92a90-358">Al contrario, si deve materializzate in un <xref:System.Collections.Generic.List%601> utilizzando il <xref:System.Linq.Enumerable.ToList%2A> metodo di estensione.</span><span class="sxs-lookup"><span data-stu-id="92a90-358">Instead, you should materialize them into a <xref:System.Collections.Generic.List%601> by using the <xref:System.Linq.Enumerable.ToList%2A> extension method.</span></span> <span data-ttu-id="92a90-359">Quindi, è possibile scorrere l'elenco per rimuovere i nodi.</span><span class="sxs-lookup"><span data-stu-id="92a90-359">Then, you can iterate over the list to remove the nodes.</span></span> <span data-ttu-id="92a90-360">Per ulteriori informazioni, vedere [miste dichiarativo/imperativo codice bug nel codice (LINQ to XML)](http://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094).</span><span class="sxs-lookup"><span data-stu-id="92a90-360">For more information, see [Mixed Declarative Code/Imperative Code Bugs (LINQ to XML)](http://msdn.microsoft.com/library/d9a5c404-2b0e-46cd-a358-0e78773b3094).</span></span>  
  
 <span data-ttu-id="92a90-361">In alternativa, se si desidera rimuovere un set di nodi, è consigliabile utilizzare il <xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-361">Alternatively, if you want to remove a set of nodes, it is recommended that you use the <xref:System.Xml.Linq.Extensions.Remove%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="92a90-362">Questo metodo copia i nodi in un elenco e quindi scorre l'elenco per rimuovere i nodi.</span><span class="sxs-lookup"><span data-stu-id="92a90-362">This method copies the nodes to a list, and then iterates over the list to remove the nodes.</span></span>  
  
 <span data-ttu-id="92a90-363">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="92a90-363">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="92a90-364">Il <xref:System.Xml.Linq.XContainer> memorizza i relativi nodi figlio sotto forma di elenco collegato singolarmente di <xref:System.Xml.Linq.XNode> oggetti.</span><span class="sxs-lookup"><span data-stu-id="92a90-364">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="92a90-365">Ciò significa che il <xref:System.Xml.Linq.XNode.Remove%2A> metodo deve scorrere l'elenco di nodi figlio diretti sotto il contenitore padre.</span><span class="sxs-lookup"><span data-stu-id="92a90-365">This means that the <xref:System.Xml.Linq.XNode.Remove%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="92a90-366">Pertanto, l'utilizzo di questo metodo potrebbe influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="92a90-366">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-367">Nell'esempio seguente rimuove un nodo dal padre.</span><span class="sxs-lookup"><span data-stu-id="92a90-367">The following example removes a node from its parent.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
child3.Remove();  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
child3.Remove()  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="92a90-368">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-368">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>child1 content</Child1>  
  <Child2>child2 content</Child2>  
  <Child4>child4 content</Child4>  
  <Child5>child5 content</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="92a90-369">L'oggetto padre è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-369">The parent is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceWith">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92a90-370">Sostituisce questo nodo con il contenuto specificato.</span><span class="sxs-lookup"><span data-stu-id="92a90-370">Replaces this node with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-371">Per informazioni dettagliate sul contenuto valido che può essere passato a questo metodo, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="92a90-371">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="92a90-372">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="92a90-372">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="92a90-373">Il <xref:System.Xml.Linq.XContainer> memorizza i relativi nodi figlio sotto forma di elenco collegato singolarmente di <xref:System.Xml.Linq.XNode> oggetti.</span><span class="sxs-lookup"><span data-stu-id="92a90-373">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="92a90-374">Ciò significa che il <xref:System.Xml.Linq.XNode.ReplaceWith%2A> metodo deve scorrere l'elenco di nodi figlio diretti sotto il contenitore padre.</span><span class="sxs-lookup"><span data-stu-id="92a90-374">This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must  traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="92a90-375">Pertanto, l'utilizzo di questo metodo potrebbe influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="92a90-375">Therefore, using this method might affect your performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-376">Nell'esempio seguente viene utilizzato questo metodo per sostituire il contenuto di un nodo con contenuto diverso.</span><span class="sxs-lookup"><span data-stu-id="92a90-376">The following example uses this method to replace the contents of a node with different content.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
child3.ReplaceWith(  
    new XElement("NewChild", "new content")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
child3.ReplaceWith(<NewChild>new content</NewChild>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="92a90-377">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-377">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>child1 content</Child1>  
  <Child2>child2 content</Child2>  
  <NewChild>new content</NewChild>  
  <Child4>child4 content</Child4>  
  <Child5>child5 content</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceWith">
      <MemberSignature Language="C#" Value="public void ReplaceWith (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceWith(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ReplaceWith(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceWith (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceWith(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="92a90-378">Contenuto che sostituisce questo nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-378">Content that replaces this node.</span></span></param>
        <summary><span data-ttu-id="92a90-379">Sostituisce questo nodo con il contenuto specificato.</span><span class="sxs-lookup"><span data-stu-id="92a90-379">Replaces this node with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-380">Questo metodo rimuove prima questo nodo dal padre e quindi aggiunge il contenuto specificato per l'elemento padre del nodo, al posto di questo nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-380">This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.</span></span>  
  
 <span data-ttu-id="92a90-381">Il <xref:System.Xml.Linq.XContainer> memorizza i relativi nodi figlio sotto forma di elenco collegato singolarmente di <xref:System.Xml.Linq.XNode> oggetti.</span><span class="sxs-lookup"><span data-stu-id="92a90-381">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="92a90-382">Ciò significa che il <xref:System.Xml.Linq.XNode.ReplaceWith%2A> metodo deve scorrere l'elenco di nodi figlio diretti sotto il contenitore padre.</span><span class="sxs-lookup"><span data-stu-id="92a90-382">This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="92a90-383">Pertanto, l'utilizzo di questo metodo potrebbe influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="92a90-383">Therefore, using this method might affect your performance.</span></span>  
  
 <span data-ttu-id="92a90-384">Per informazioni dettagliate sul contenuto valido che può essere passato a questo metodo, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="92a90-384">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="92a90-385">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="92a90-385">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-386">Nell'esempio seguente viene utilizzato questo metodo per sostituire il contenuto di un nodo con contenuto diverso.</span><span class="sxs-lookup"><span data-stu-id="92a90-386">The following example uses this method to replace the contents of a node with different content.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", "child1 content"),  
    new XElement("Child2", "child2 content"),  
    new XElement("Child3", "child3 content"),  
    new XElement("Child4", "child4 content"),  
    new XElement("Child5", "child5 content")  
);  
XElement child3 = xmlTree.Element("Child3");  
child3.ReplaceWith(  
    new XElement("NewChild", "new content")  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>child1 content</Child1>  
            <Child2>child2 content</Child2>  
            <Child3>child3 content</Child3>  
            <Child4>child4 content</Child4>  
            <Child5>child5 content</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
child3.ReplaceWith(<NewChild>new content</NewChild>)  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="92a90-387">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-387">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>child1 content</Child1>  
  <Child2>child2 content</Child2>  
  <NewChild>new content</NewChild>  
  <Child4>child4 content</Child4>  
  <Child5>child5 content</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceWith">
      <MemberSignature Language="C#" Value="public void ReplaceWith (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceWith(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ReplaceWith(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceWith (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceWith(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content"><span data-ttu-id="92a90-388">Elenco di parametri del nuovo contenuto.</span><span class="sxs-lookup"><span data-stu-id="92a90-388">A parameter list of the new content.</span></span></param>
        <summary><span data-ttu-id="92a90-389">Sostituisce questo nodo con il contenuto specificato.</span><span class="sxs-lookup"><span data-stu-id="92a90-389">Replaces this node with the specified content.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-390">Questo metodo rimuove prima questo nodo dal padre e quindi aggiunge il contenuto specificato per l'elemento padre del nodo, al posto di questo nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-390">This method first removes this node from its parent, and then adds the specified content to this node's parent, in the place of this node.</span></span>  
  
 <span data-ttu-id="92a90-391">Il <xref:System.Xml.Linq.XContainer> memorizza i relativi nodi figlio sotto forma di elenco collegato singolarmente di <xref:System.Xml.Linq.XNode> oggetti.</span><span class="sxs-lookup"><span data-stu-id="92a90-391">The <xref:System.Xml.Linq.XContainer> stores its child nodes as a singly-linked list of <xref:System.Xml.Linq.XNode> objects.</span></span> <span data-ttu-id="92a90-392">Ciò significa che il <xref:System.Xml.Linq.XNode.ReplaceWith%2A> metodo deve scorrere l'elenco di nodi figlio diretti sotto il contenitore padre.</span><span class="sxs-lookup"><span data-stu-id="92a90-392">This means that the <xref:System.Xml.Linq.XNode.ReplaceWith%2A> method must traverse the list of direct child nodes under the parent container.</span></span> <span data-ttu-id="92a90-393">Pertanto, l'utilizzo di questo metodo potrebbe influire sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="92a90-393">Therefore, using this method might affect your performance.</span></span>  
  
 <span data-ttu-id="92a90-394">Per informazioni dettagliate sul contenuto valido che può essere passato a questo metodo, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="92a90-394">For details about the valid content that can be passed to this method, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="92a90-395">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="92a90-395">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-396">L'esempio seguente illustra l'uso dei risultati di una [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] query come input per questo metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-396">The following example shows using the results of a [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] query as the input to this method.</span></span>  
  
```csharp  
XElement srcTree = new XElement("Root",  
    new XElement("Element1", 1),  
    new XElement("Element2", 2),  
    new XElement("Element3", 3),  
    new XElement("Element4", 4),  
    new XElement("Element5", 5)  
);  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5)  
);  
XElement child3 = xmlTree.Element("Child3");  
child3.ReplaceWith(  
    from el in srcTree.Elements()  
    where (int)el > 3  
    select el  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim srcTree As XElement = _   
        <Root>  
            <Element1>1</Element1>  
            <Element2>2</Element2>  
            <Element3>3</Element3>  
            <Element4>4</Element4>  
            <Element5>5</Element5>  
        </Root>  
  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
        </Root>  
  
Dim child3 As XElement = xmlTree.<Child3>(0)  
child3.ReplaceWith( _  
    From el In srcTree.Elements() _  
    Where (CInt(el) > 3) _  
    Select el)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="92a90-397">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-397">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Element4>4</Element4>  
  <Element5>5</Element5>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="92a90-398">Restituisce il codice XML per questo nodo, facoltativamente disabilitando la formattazione.</span><span class="sxs-lookup"><span data-stu-id="92a90-398">Returns the XML for this node, optionally disabling formatting.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="92a90-399">Restituisce il codice XML con rientro per questo nodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-399">Returns the indented XML for this node.</span></span></summary>
        <returns><span data-ttu-id="92a90-400"><see cref="T:System.String" /> contenente il codice XML con rientro.</span><span class="sxs-lookup"><span data-stu-id="92a90-400">A <see cref="T:System.String" /> containing the indented XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="92a90-401">L'esempio seguente usa questo metodo per recuperare dati XML con rientro.</span><span class="sxs-lookup"><span data-stu-id="92a90-401">The following example uses this method to retrieve indented XML.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child1", 1)  
);  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _   
        <Root>  
            <Child1>1</Child1>  
        </Root>  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="92a90-402">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-402">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (options As SaveOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="92a90-403">Oggetto <see cref="T:System.Xml.Linq.SaveOptions" /> che specifica il comportamento di formattazione.</span><span class="sxs-lookup"><span data-stu-id="92a90-403">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span></span></param>
        <summary><span data-ttu-id="92a90-404">Restituisce il codice XML per questo nodo, facoltativamente disabilitando la formattazione.</span><span class="sxs-lookup"><span data-stu-id="92a90-404">Returns the XML for this node, optionally disabling formatting.</span></span></summary>
        <returns><span data-ttu-id="92a90-405"><see cref="T:System.String" /> contenente il codice XML.</span><span class="sxs-lookup"><span data-stu-id="92a90-405">A <see cref="T:System.String" /> containing the XML.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="92a90-406">L'esempio seguente usa questo metodo per recuperare dati XML non formattato e formattato.</span><span class="sxs-lookup"><span data-stu-id="92a90-406">The following example uses this method to retrieve unformatted and formatted XML.</span></span>  
  
```csharp  
XElement root = XElement.Parse("<Root><Child/></Root>");  
Console.WriteLine(root.ToString(SaveOptions.DisableFormatting));  
Console.WriteLine("---");  
Console.WriteLine(root.ToString(SaveOptions.None));  
```  
  
```vb  
Dim root As XElement = <Root>  
                           <Child/>  
                       </Root>  
Console.WriteLine(root.ToString(SaveOptions.DisableFormatting))  
Console.WriteLine("---")  
Console.WriteLine(root.ToString(SaveOptions.None))  
```  
  
 <span data-ttu-id="92a90-407">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-407">This example produces the following output:</span></span>  
  
```  
<Root><Child /></Root>  
---  
<Root>  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public abstract void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="92a90-408">Oggetto <see cref="T:System.Xml.XmlWriter" /> in cui scriverà questo metodo.</span><span class="sxs-lookup"><span data-stu-id="92a90-408">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span></span></param>
        <summary><span data-ttu-id="92a90-409">Scrive questo nodo in un <see cref="T:System.Xml.XmlWriter" />.</span><span class="sxs-lookup"><span data-stu-id="92a90-409">Writes this node to an <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="92a90-410">È possibile utilizzare questo metodo per scrivere codice che esegue una trasformazione del flusso di un documento di dimensioni molto grande.</span><span class="sxs-lookup"><span data-stu-id="92a90-410">You can use this method to write code that does a streaming transform of a very large document.</span></span> <span data-ttu-id="92a90-411">Per ulteriori informazioni, vedere [procedura: eseguire lo Streaming trasformazione di documenti XML](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).</span><span class="sxs-lookup"><span data-stu-id="92a90-411">For more information, see [How to: Perform Streaming Transform of Large XML Documents](http://msdn.microsoft.com/library/0759e428-6e59-4d80-a506-365d3a6a2b73).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="92a90-412">Nell'esempio seguente viene creato un <xref:System.Xml.XmlWriter> che scrive un <xref:System.Text.StringBuilder>.</span><span class="sxs-lookup"><span data-stu-id="92a90-412">The following example creates an <xref:System.Xml.XmlWriter> that writes to a <xref:System.Text.StringBuilder>.</span></span> <span data-ttu-id="92a90-413">Viene quindi utilizzato questo metodo per scrivere il writer di due alberi XML.</span><span class="sxs-lookup"><span data-stu-id="92a90-413">It then uses this method to write two XML trees to the writer.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    xw.WriteStartElement("Root");  
    XElement child1 = new XElement("Child",  
        new XElement("GrandChild", "some content")  
    );  
    child1.WriteTo(xw);  
    XElement child2 = new XElement("AnotherChild",  
        new XElement("GrandChild", "different content")  
    );  
    child2.WriteTo(xw);  
    xw.WriteEndElement();  
}  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    xw.WriteStartElement("Root")  
    Dim child1 As XElement = <Child>  
                                 <GrandChild>some content</GrandChild>  
                             </Child>  
    child1.WriteTo(xw)  
    Dim child2 As XElement = <AnotherChild>  
                                 <GrandChild>different content</GrandChild>  
                             </AnotherChild>  
    child2.WriteTo(xw)  
    xw.WriteEndElement()  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="92a90-414">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="92a90-414">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>  
    <GrandChild>some content</GrandChild>  
  </Child>  
  <AnotherChild>  
    <GrandChild>different content</GrandChild>  
  </AnotherChild>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNode.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>