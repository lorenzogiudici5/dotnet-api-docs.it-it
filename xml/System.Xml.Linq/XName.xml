<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XName.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c2029127d8735565c289926acb529dfac1574a14.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2029127d8735565c289926acb529dfac1574a14</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XName">
          <source>Represents a name of an XML element or attribute.</source>
          <target state="translated">Rappresenta un nome di un elemento o attributo XML.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>XML names include a namespace and a local name.</source>
          <target state="translated">I nomi XML includono uno spazio dei nomi e nome locale.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>A <bpt id="p1">*</bpt>fully qualified name<ept id="p1">*</ept> is the combination of the namespace and local name.</source>
          <target state="translated">Oggetto <bpt id="p1">*</bpt>nome completo<ept id="p1">*</ept> è la combinazione di spazio dei nomi e nome locale.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Creating an XName Object</source>
          <target state="translated">Creazione di un oggetto XName</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> does not contain any public constructors.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> non contiene alcun costruttore pubblico.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Instead, this class provides an implicit conversion from <ph id="ph1">&lt;xref:System.String&gt;</ph> that allows you to create an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Al contrario, questa classe fornisce una conversione implicita da <ph id="ph1">&lt;xref:System.String&gt;</ph> che consente di creare un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The most common place you use this conversion is when constructing an element or attribute: The first argument to the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> constructor is an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Il punto più comune è utilizzare la conversione è quando si crea un elemento o attributo: il primo argomento per il <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> costruttore è un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>By passing a string, you take advantage of the implicit conversion.</source>
          <target state="translated">Passando una stringa, sfruttare la conversione implicita.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The following code creates an element with a name that is in no namespace:</source>
          <target state="translated">Il codice seguente crea un elemento con un nome in nessuno spazio dei nomi:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>In Visual Basic, it is more appropriate to use XML literals:</source>
          <target state="translated">In Visual Basic, è preferibile usare valori letterali XML:</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Assigning a string to an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> uses the implicit conversion from <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Assegnare una stringa a un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> utilizza la conversione implicita da <ph id="ph2">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The Visual Basic example creates the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> using XML literals.</source>
          <target state="translated">Nell'esempio di Visual Basic viene creato il <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> utilizzando i valori letterali XML.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Even though XML literals are used, an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> object is created for the <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
          <target state="translated">Anche se vengono utilizzati valori letterali XML, un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> oggetto viene creato per il <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>In addition, you can call the <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Get%2A&gt;</ph> method for an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> object.</source>
          <target state="translated">Inoltre, è possibile chiamare il <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Get%2A&gt;</ph> metodo per un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>However, the recommended way is to use the implicit conversion from string.</source>
          <target state="translated">Tuttavia, il metodo consigliato consiste nell'utilizzare la conversione implicita da stringa.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Creating an XName in a Namespace</source>
          <target state="translated">Creazione di un oggetto XName in un Namespace</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>As with XML, an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> can be in a namespace, or it can be in no namespace.</source>
          <target state="translated">Come nel codice XML, un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> può trovarsi in uno spazio dei nomi, o può essere in nessuno spazio dei nomi.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>For C#, the recommended approach for creating an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> in a namespace is to declare the <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object, then use the override of the addition operator.</source>
          <target state="translated">Per c#, l'approccio consigliato per la creazione di un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> in uno spazio dei nomi consiste nel dichiarare il <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> dell'oggetto, quindi utilizzare la sostituzione dell'operatore di addizione.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.</source>
          <target state="translated">Per Visual Basic, l'approccio consigliato consiste nell'usare valori letterali XML e le dichiarazioni dello spazio dei nomi globale per creare codice XML in uno spazio dei nomi.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Creating an XName in no Namespace</source>
          <target state="translated">Creazione di un oggetto XName in alcun Namespace</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> property of an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> object is guaranteed to not be null.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> proprietà di un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> oggetto è garantito che non sia null.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is in no namespace, then the <ph id="ph2">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> property will be set to <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.</source>
          <target state="translated">Se il <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> in nessuno spazio dei nomi, il <ph id="ph2">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> verrà impostata su <ph id="ph3">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The following code demonstrates this:</source>
          <target state="translated">Il codice seguente illustra questo processo:</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Using Expanded Names</source>
          <target state="translated">Utilizzo di nomi estesi</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>You can also create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> from a expanded XML name in the form <ph id="ph2">`{namespace}localname`</ph>:</source>
          <target state="translated">È inoltre possibile creare un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> da un nome XML esteso nel formato <ph id="ph2">`{namespace}localname`</ph>:</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Be aware that creating an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> through an expanded name is less efficient than creating an <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object and using the override of the addition operator.</source>
          <target state="translated">Tenere presente che la creazione un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> tramite un nome esteso è meno efficace rispetto alla creazione di un <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> oggetto e l'uso dell'override dell'operatore di addizione.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>It is also less efficient than importing a global namespace and using XML literals in Visual Basic.</source>
          <target state="translated">È inoltre meno efficiente dell'importazione di uno spazio dei nomi globale e utilizzando i valori letterali XML in Visual Basic.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>If you create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> using an expanded name, LINQ to XML must find the atomized instance of a namespace.</source>
          <target state="translated">Se si crea un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> utilizzando un nome esteso, LINQ to XML deve individuare l'istanza di uno spazio dei nomi atomizzato.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This work must be repeated for every use of an expanded name.</source>
          <target state="translated">Questa operazione deve essere ripetuta per ogni utilizzo di un nome espanso.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.</source>
          <target state="translated">Questo tempo aggiuntivo è probabilmente trascurabile durante la scrittura di query LINQ. Tuttavia, potrebbe essere significativo quando si crea un albero XML di grandi dimensioni.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>XName Objects are Atomized</source>
          <target state="translated">Oggetti XName vengono suddivisi</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects are guaranteed to be atomized; that is, if two <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects have exactly the same namespace and exactly the same local name, they will share the same instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> gli oggetti sono necessariamente suddivisi; ovvero, se due <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> oggetti hanno esattamente lo stesso spazio dei nomi e lo stesso nome locale, condivideranno la stessa istanza.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>The equality and comparison operators are also provided explicitly for this purpose.</source>
          <target state="translated">Gli operatori di uguaglianza e confronto vengono inoltre forniti in modo esplicito a questo scopo.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Among other benefits, this feature allows for faster execution of queries.</source>
          <target state="translated">Tra gli altri vantaggi, questa funzionalità consente di velocizzare l'esecuzione di query.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison.</source>
          <target state="translated">Quando il filtro sul nome di elementi o attributi, i confronti espressi nei predicati usano il confronto di identità, non il confronto di valori.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>It is much faster to determine that two references actually refer to the same object than to compare two strings.</source>
          <target state="translated">È molto più veloce per determinare che i due riferimenti si riferiscono allo stesso oggetto anziché confrontare due stringhe.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare to the current <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> da confrontare con l'oggetto <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Equals(System.Object)">
          <source>Determines whether the specified <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> is equal to this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Determina se l'oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> specificato è uguale a <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> is equal to the current <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'oggetto <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> specificato è uguale all'oggetto <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> corrente; in caso contrario <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Equals(System.Object)">
          <source>For two <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects to be equal, they must have the same expanded name.</source>
          <target state="translated">Per due <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> oggetti siano uguali, è necessario impostare lo stesso nome espanso.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="T:System.Xml.Linq.XName">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object.</source>
          <target state="translated">Ottiene un oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>This method provides overloads that allow you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> from a expanded XML name.</source>
          <target state="translated">Questo metodo fornisce gli overload che consentono di creare un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> da un nome XML espanso.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>You can create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> from a string in the form <ph id="ph2">`{namespace}localname`</ph>, or from a namespace and a local name, specified separately.</source>
          <target state="translated">È possibile creare un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> da una stringa nel formato <ph id="ph2">`{namespace}localname`</ph>, o da uno spazio dei nomi e un nome locale specificati separatamente.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>A much more common and easier way to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is to use the implicit conversion from string.</source>
          <target state="translated">Un modo molto più comune e più semplice per creare un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> consiste nell'utilizzare la conversione implicita da stringa.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>To create a name that is in a namespace, the common approach is to use the addition operator overload that allows you to combine an <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> object and a string.</source>
          <target state="translated">Per creare un nome che è in uno spazio dei nomi, l'approccio comune consiste nell'utilizzare l'overload dell'operatore di addizione che consente di combinare un <ph id="ph1">&lt;xref:System.Xml.Linq.XNamespace&gt;</ph> oggetto e una stringa.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>For more information and examples, see <bpt id="p1">[</bpt>How to: Create a Document with Namespaces (C#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)</ept>.</source>
          <target state="translated">Per ulteriori informazioni ed esempi, vedere <bpt id="p1">[</bpt>procedura: creare un documento con spazi dei nomi (c#) (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c)</ept>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>For more information on using namespaces in <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, see <bpt id="p1">[</bpt>Namespaces in Visual Basic (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sull'utilizzo di spazi dei nomi in <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, vedere <bpt id="p1">[</bpt>spazi dei nomi in Visual Basic (LINQ to XML)<ept id="p1">](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc)</ept>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>Because <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects are atomized, if there is an existing <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> with exactly the same name, the assigned variable will refer to the existing <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Poiché <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> gli oggetti sono suddivisi, se è presente un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> esattamente con lo stesso nome, la variabile assegnata farà riferimento esistente <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.Linq.XName">
          <source>If there is no existing <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, a new one will be created and initialized.</source>
          <target state="translated">Se è presente alcun <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, verrà creato e inizializzato uno nuovo.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains an expanded XML name in the format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> che contiene un nome XML esteso nel formato <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object from an expanded name.</source>
          <target state="translated">Ottiene un oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> da un nome esteso.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object constructed from the expanded name.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> costruito da un nome esteso.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>This method contains overloads that allow you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Questo metodo contiene overload che consentono di creare un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>You can create it from a expanded XML name in the form <ph id="ph1">`{namespace}localname`</ph>, or from a namespace and a local name, specified separately.</source>
          <target state="translated">È possibile crearlo da un nome XML esteso nel formato <ph id="ph1">`{namespace}localname`</ph>, o da uno spazio dei nomi e un nome locale specificati separatamente.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>A much more common and easier way to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is to use the implicit conversion from string.</source>
          <target state="translated">Un modo molto più comune e più semplice per creare un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> consiste nell'utilizzare la conversione implicita da stringa.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>Because <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> are atomized, if there is an existing <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> with exactly the same name, the assigned variable will refer to the existing <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Poiché <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> atomizzati, se è presente un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> esattamente con lo stesso nome, la variabile assegnata farà riferimento esistente <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>If there is no existing <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, a new one will be created and initialized.</source>
          <target state="translated">Se è presente alcun <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, verrà creato e inizializzato uno nuovo.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>The following example shows the use of this method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'utilizzo di questo metodo.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>A local (unqualified) name.</source>
          <target state="translated">Nome locale (non qualificato).</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>An XML namespace.</source>
          <target state="translated">Uno spazio dei nomi XML.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object from a local name and a namespace.</source>
          <target state="translated">Ottiene un oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> da un nome locale e uno spazio dei nomi.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object created from the specified local name and namespace.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> creato dal nome locale e spazio dei nomi specificati.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>This method contains overloads that allow you to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Questo metodo contiene overload che consentono di creare un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>You can create it from an expanded XML name in the form <ph id="ph1">`{namespace}localname`</ph>, or from a namespace and a local name, specified separately.</source>
          <target state="translated">È possibile crearlo da un nome XML esteso nel formato <ph id="ph1">`{namespace}localname`</ph>, o da uno spazio dei nomi e un nome locale specificati separatamente.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>A much more common and easier way to create an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is to use the implicit conversion from string.</source>
          <target state="translated">Un modo molto più comune e più semplice per creare un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> consiste nell'utilizzare la conversione implicita da stringa.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>Because <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> are atomized, if there is an existing <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> with exactly the same name, the assigned variable will refer to the existing <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Poiché <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> atomizzati, se è presente un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> esattamente con lo stesso nome, la variabile assegnata farà riferimento esistente <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>If there is no existing <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, a new one will be created and initialized.</source>
          <target state="translated">Se è presente alcun <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>, verrà creato e inizializzato uno nuovo.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>The following example shows the use of this method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'utilizzo di questo metodo.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.Get(System.String,System.String)">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.GetHashCode">
          <source>Gets a hash code for this <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Ottiene un codice hash per l'oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.GetHashCode">
          <source>An <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that contains the hash code for the <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> che contiene il codice hash per <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.GetHashCode">
          <source>This method serves as a hash function for <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Questo metodo serve come funzione hash per <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.GetHashCode">
          <source>You can use <ph id="ph1">&lt;xref:System.Xml.Linq.XName.GetHashCode%2A&gt;</ph> in hashing algorithms, or in data structures such as a hash table.</source>
          <target state="translated">È possibile utilizzare <ph id="ph1">&lt;xref:System.Xml.Linq.XName.GetHashCode%2A&gt;</ph> in algoritmi hash o nelle strutture dei dati, ad esempio una tabella hash.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XName.LocalName">
          <source>Gets the local (unqualified) part of the name.</source>
          <target state="translated">Ottiene la parte locale (non qualificata) del nome.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.LocalName">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the local (unqualified) part of the name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> che contiene la parte locale (non qualificata) del nome.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.LocalName">
          <source>This property is guaranteed to not be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Questa proprietà è garantita che non siano <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.LocalName">
          <source>The following example shows the use of this property.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'utilizzo di questa proprietà.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.LocalName">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XName.Namespace">
          <source>Gets the namespace part of the fully qualified name.</source>
          <target state="translated">Ottiene la parte dello spazio dei nomi del nome completo.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> that contains the namespace part of the name.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> che contiene la parte dello spazio dei nomi del nome.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> property is guaranteed to not be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">La proprietà <ph id="ph1">&lt;xref:System.Xml.Linq.XName.Namespace%2A&gt;</ph> non è <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>If an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> is in no namespace, this property returns <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.</source>
          <target state="translated">Se un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> è in nessuno spazio dei nomi, questa proprietà restituisce <ph id="ph2">&lt;xref:System.Xml.Linq.XNamespace.None%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>The following example shows the use of this property.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'utilizzo di questa proprietà.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.Namespace">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>Returns the URI of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Restituisce l'URI del <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> per questo <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>The URI of the <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> for this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">URI del <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XNamespace" /&gt;</ph> per questo <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>This is a convenience property to get the namespace name from an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Questa è una proprietà per ottenere il nome dello spazio dei nomi da un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>This example creates an element in a namespace, and then prints the element's namespace.</source>
          <target state="translated">In questo esempio viene creato un elemento in uno spazio dei nomi e quindi stampato dello spazio dei nomi dell'elemento.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.Linq.XName.NamespaceName">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare.</source>
          <target state="translated">Primo oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> da confrontare.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare.</source>
          <target state="translated">Secondo oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> da confrontare.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>Returns a value indicating whether two instances of <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> are equal.</source>
          <target state="translated">Restituisce un valore che indica se due istanze di <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> sono uguali.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph> are equal; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="left" /&gt;</ph> e <ph id="ph3">&lt;paramref name="right" /&gt;</ph> sono uguali; in caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are included to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph> and a <ph id="ph4">`string`</ph>, such as<ph id="ph5">`element.Name == "SomeElementName"`</ph>.</source>
          <target state="translated">Gli overload dell'operatore <ph id="ph1">`==`</ph> e <ph id="ph2">`!=`</ph> vengono inclusi per abilitare i confronti tra <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph> e <ph id="ph4">`string`</ph>, ad esempio<ph id="ph5">`element.Name == "SomeElementName"`</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</source>
          <target state="translated">Gli operatori di uguaglianza di riferimenti predefiniti in c# richiedono un operando sia convertibile nel tipo di altro tramite solo le conversioni dei riferimenti.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>These operators do not consider the implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Questi operatori non considerano la conversione implicita da stringa a <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The following example shows some comparisons between <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects and strings.</source>
          <target state="translated">L'esempio seguente mostra alcuni confronti tra <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> oggetti e stringhe.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>A string that contains an expanded XML name in the format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Stringa che contiene un nome XML esteso nel formato <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>Converts a string formatted as an expanded XML name (that is,<bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>) to an <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object.</source>
          <target state="translated">Converte una stringa formattata come nome XML esteso (ovvero <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>) in un oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> object constructed from the expanded name.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> costruito da un nome esteso.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>You are using this implicit operator when you create an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> by passing a string to the appropriate constructor.</source>
          <target state="translated">Si utilizza l'operatore implicito quando si crea un <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> o <ph id="ph2">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> passando una stringa al costruttore appropriato.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>The following example creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> by assigning a string to it, which invokes this implicit conversion operator.</source>
          <target state="translated">Nell'esempio seguente viene creato un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> assegnandole una stringa, che richiama l'operatore di conversione implicita.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare.</source>
          <target state="translated">Primo oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> da confrontare.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The second <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare.</source>
          <target state="translated">Secondo oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> da confrontare.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>Returns a value indicating whether two instances of <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> are not equal.</source>
          <target state="translated">Restituisce un valore che indica se due istanze di <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> non sono uguali.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph> are not equal; otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="left" /&gt;</ph> e <ph id="ph3">&lt;paramref name="right" /&gt;</ph> non sono uguali; in caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The operator overloads <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> are included to enable comparisons between <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph> and a string, such as<ph id="ph4">`element.Name == "SomeElementName"`</ph>.</source>
          <target state="translated">Gli overload dell'operatore <ph id="ph1">`==`</ph> e <ph id="ph2">`!=`</ph> vengono inclusi per abilitare i confronti tra <ph id="ph3">&lt;xref:System.Xml.Linq.XName&gt;</ph> e una stringa, ad esempio<ph id="ph4">`element.Name == "SomeElementName"`</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</source>
          <target state="translated">Gli operatori di uguaglianza di riferimenti predefiniti in c# richiedono un operando sia convertibile nel tipo di altro tramite solo le conversioni dei riferimenti.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>These operators do not consider the implicit conversion from string to <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">Questi operatori non considerano la conversione implicita da stringa a <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>The following C# example compares an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> object to a string, which invokes this operator.</source>
          <target state="translated">L'esempio c# seguente confronta un <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> oggetto in una stringa, che richiama questo operatore.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#IEquatable&amp;lt;System#Xml#Linq#XName&amp;gt;#Equals(System.Xml.Linq.XName)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> to compare with this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> da confrontare con questo oggetto <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#IEquatable&amp;lt;System#Xml#Linq#XName&amp;gt;#Equals(System.Xml.Linq.XName)">
          <source>Indicates whether the current <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> is equal to the specified <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>.</source>
          <target state="translated">Indica se l'oggetto <ph id="ph1">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> corrente è uguale all'oggetto <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#IEquatable&amp;lt;System#Xml#Linq#XName&amp;gt;#Equals(System.Xml.Linq.XName)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> is equal to the specified <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph>, otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'oggetto <ph id="ph2">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> è uguale all'oggetto <ph id="ph3">&lt;see cref="T:System.Xml.Linq.XName" /&gt;</ph> specificato; in caso contrario <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> to populate with data.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> da popolare con i dati.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination (see <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>) for this serialization.</source>
          <target state="translated">Destinazione della serializzazione (vedere <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> with the data required to serialize the target object.</source>
          <target state="translated">Popola un oggetto <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> con i dati richiesti per serializzare l'oggetto di destinazione.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method is used internally to serialize object graphs that contain LINQ to XML objects.</source>
          <target state="translated">Questo metodo viene utilizzato internamente per serializzare oggetti grafici contenenti LINQ agli oggetti XML.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.ToString">
          <source>Returns the expanded XML name in the format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Restituisce il nome XML esteso nel formato <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Xml.Linq.XName.ToString">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the expanded XML name in the format <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> che contiene il nome XML esteso nel formato <bpt id="p1">&lt;c&gt;</bpt>{namespace}localname<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.ToString">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, passing an <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</source>
          <target state="translated">L'esempio seguente chiama <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph>, passando un <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.ToString">
          <source>This causes the <ph id="ph1">&lt;xref:System.Xml.Linq.XName.ToString%2A&gt;</ph> method to be called.</source>
          <target state="translated">In questo modo il <ph id="ph1">&lt;xref:System.Xml.Linq.XName.ToString%2A&gt;</ph> metodo da chiamare.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.Linq.XName.ToString">
          <source>This example produces the following output:</source>
          <target state="translated">Questo esempio produce il seguente output:</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>