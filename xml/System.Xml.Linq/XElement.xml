<Type Name="XElement" FullName="System.Xml.Linq.XElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="15213489ac8be26d6703a879772581c4b4082467" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XElement : System.Xml.Linq.XContainer, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XElement extends System.Xml.Linq.XContainer implements class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XElement" />
  <TypeSignature Language="VB.NET" Value="Public Class XElement&#xA;Inherits XContainer&#xA;Implements IXmlSerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XElement : System::Xml::Linq::XContainer, System::Xml::Serialization::IXmlSerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.Linq.XContainer</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1&lt;System.Xml.Linq.XElement&gt;))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider(null, IsAny=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="45002-101">Rappresenta un elemento XML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="45002-101">Represents an XML element.</span>
      </span>
      <span data-ttu-id="45002-102">Per informazioni sull'uso e per esempi, vedere [Panoramica della classe XElement](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) e la sezione Osservazioni in questa pagina.</span>
      <span class="sxs-lookup">
        <span data-stu-id="45002-102">See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) and the Remarks section on this page for usage information and examples.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-103">Questa classe rappresenta un elemento XML, il costrutto XML fondamentale.</span><span class="sxs-lookup"><span data-stu-id="45002-103">This class represents an XML element, the fundamental XML construct.</span></span>  <span data-ttu-id="45002-104">Vedere [Cenni preliminari sulla classe XElement](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) per altre informazioni sull'utilizzo.</span><span class="sxs-lookup"><span data-stu-id="45002-104">See [XElement Class Overview](http://msdn.microsoft.com/library/d35180fe-7016-4895-9bfc-ba1e3f7875ec) for other usage information.</span></span>  
  
 <span data-ttu-id="45002-105">L'elemento dispone di un <xref:System.Xml.Linq.XName>facoltativamente uno o più attributi e può contenere facoltativamente contenuto (per ulteriori informazioni, vedere <xref:System.Xml.Linq.XContainer.Nodes%2A>).</span><span class="sxs-lookup"><span data-stu-id="45002-105">An element has an <xref:System.Xml.Linq.XName>, optionally one or more attributes, and can optionally contain content (for more information, see <xref:System.Xml.Linq.XContainer.Nodes%2A>).</span></span>  
  
 <span data-ttu-id="45002-106">Un <xref:System.Xml.Linq.XElement> può contenere i seguenti tipi di contenuto:</span><span class="sxs-lookup"><span data-stu-id="45002-106">An <xref:System.Xml.Linq.XElement> can contain the following types of content:</span></span>  
  
-   <xref:System.Xml.Linq.XElement>  
  
-   <xref:System.Xml.Linq.XComment>  
  
-   <xref:System.Xml.Linq.XProcessingInstruction>  
  
-   <xref:System.Xml.Linq.XText>  
  
 <span data-ttu-id="45002-107">Per informazioni dettagliate sul contenuto valido di un <xref:System.Xml.Linq.XElement>, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="45002-107">For details about the valid content of an <xref:System.Xml.Linq.XElement>, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="45002-108"><xref:System.Xml.Linq.XElement> deriva da <xref:System.Xml.Linq.XContainer>, che deriva da <xref:System.Xml.Linq.XNode>.</span><span class="sxs-lookup"><span data-stu-id="45002-108"><xref:System.Xml.Linq.XElement> derives from <xref:System.Xml.Linq.XContainer>, which derives from <xref:System.Xml.Linq.XNode>.</span></span>  
  
 <span data-ttu-id="45002-109">Alcuni <xref:System.Xml.Linq.XElement> metodi possono essere utilizzati da XAML.</span><span class="sxs-lookup"><span data-stu-id="45002-109">Some <xref:System.Xml.Linq.XElement> methods can be used from XAML.</span></span> <span data-ttu-id="45002-110">Per altre informazioni, vedere [Proprietà dinamiche di LINQ to XML](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012).</span><span class="sxs-lookup"><span data-stu-id="45002-110">For more information, see [LINQ to XML Dynamic Properties](http://msdn.microsoft.com/library/0455f47c-4a68-4f2e-a3f8-dd1d85b99012).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-111">Nell'esempio seguente viene creato un albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-111">The following example creates an XML tree.</span></span> <span data-ttu-id="45002-112">Il contenuto del nuovo elemento proviene da una query LINQ.</span><span class="sxs-lookup"><span data-stu-id="45002-112">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _  
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="45002-113">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-113">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="45002-114">Di seguito è riportato lo stesso esempio, ma in questo caso il XML si trova in uno spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="45002-114">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="45002-115">Per ulteriori informazioni, vedere [utilizzo di spazi dei nomi XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="45002-115">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree1 = new XElement(aw + "Root",  
    new XElement(aw + "Child1", 1),  
    new XElement(aw + "Child2", 2),  
    new XElement(aw + "Child3", 3),  
    new XElement(aw + "Child4", 4),  
    new XElement(aw + "Child5", 5),  
    new XElement(aw + "Child6", 6)  
);  
  
XElement xmlTree2 = new XElement(aw + "Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree1 As XElement = _  
            <Root>  
                <Child1>1</Child1>  
                <Child2>2</Child2>  
                <Child3>3</Child3>  
                <Child4>4</Child4>  
                <Child5>5</Child5>  
                <Child6>6</Child6>  
            </Root>  
  
        Dim xmlTree2 As XElement = _   
            <Root>  
                <%= From el In xmlTree1.Elements() _  
                    Where el.Value >= 3 And el.Value <= 5 _  
                    Select el %>  
            </Root>  
  
        Console.WriteLine(xmlTree2)  
    End SUb  
End Module  
```  
  
 <span data-ttu-id="45002-116">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-116">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45002-117">Inizializza una nuova istanza della classe <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-117">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-118">Per informazioni dettagliate sul contenuto valido che può essere passato al costruttore, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="45002-118">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="45002-119">È una conversione implicita da stringa a <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="45002-119">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="45002-120">È tipico di utilizzo di questo costruttore per specificare una stringa come parametro anziché creare un nuovo <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="45002-120">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="45002-121">Quando si crea un elemento in uno spazio dei nomi, utilizzo tipico consiste nell'utilizzare l'overload dell'operatore di addizione con un <xref:System.Xml.Linq.XNamespace> e una stringa per creare un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="45002-121">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="45002-122">Per ulteriori informazioni, vedere [utilizzo di spazi dei nomi XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="45002-122">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-123">Nell'esempio seguente viene creato un albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-123">The following example creates an XML tree.</span></span> <span data-ttu-id="45002-124">Il contenuto del nuovo elemento proviene da una query LINQ.</span><span class="sxs-lookup"><span data-stu-id="45002-124">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", 1),  
    new XElement("Child", 2),  
    new XElement("Child", 3),  
    new XElement("Child", 4),  
    new XElement("Child", 5),  
    new XElement("Child", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>1</Child>  
            <Child>2</Child>  
            <Child>3</Child>  
            <Child>4</Child>  
            <Child>5</Child>  
            <Child>6</Child>  
        </Root>  
  
Dim xmlTree2 As XElement = _  
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="45002-125">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-125">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>3</Child>  
  <Child>4</Child>  
  <Child>5</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XElement other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XElement ^ other);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="45002-126">Oggetto <see cref="T:System.Xml.Linq.XElement" /> da cui copiare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-126">An <see cref="T:System.Xml.Linq.XElement" /> object to copy from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-127">Inizializza una nuova istanza della classe <see cref="T:System.Xml.Linq.XElement" /> da un altro oggetto <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-127">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from another <see cref="T:System.Xml.Linq.XElement" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-128">Questo costruttore crea una copia completa di un elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-128">This constructor makes a deep copy of an element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-129">Nell'esempio seguente viene creato un albero XML, crea un clone della struttura ad albero e quindi chiama <xref:System.Xml.Linq.XNode.DeepEquals%2A>, che consente di testare se i due alberi XML sono uguali.</span><span class="sxs-lookup"><span data-stu-id="45002-129">The following example creates an XML tree, creates a clone of the tree, and then calls <xref:System.Xml.Linq.XNode.DeepEquals%2A>, which tests whether the two XML trees are equal.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2)  
);  
  
// Create a clone of the tree.  
XElement treeClone = new XElement(xmlTree);  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone));  
  
// Do some work with xmlTree, perhaps pass it to other methods.  
xmlTree.Add(new XElement("Child3", 3));  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone));  
```  
  
```vb  
Dim xmlTree As XElement = _  
        <Root Att1="1">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
        </Root>  
  
' Create a clone of the tree.  
Dim treeClone As XElement = New XElement(xmlTree)  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone))  
  
' Do some work with xmlTree, perhaps pass it to other methods.  
xmlTree.Add(New XElement("Child3", 3))  
  
Console.WriteLine("xmlTree = treeClone: {0}", XNode.DeepEquals(xmlTree, treeClone))  
```  
  
 <span data-ttu-id="45002-130">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-130">This example produces the following output:</span></span>  
  
```  
xmlTree = treeClone: True  
xmlTree = treeClone: False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="45002-131">Oggetto <see cref="T:System.Xml.Linq.XName" /> che contiene il nome dell'elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-131">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-132">Inizializza una nuova istanza della classe <see cref="T:System.Xml.Linq.XElement" /> con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-132">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-133">Questo costruttore crea un elemento con nessun contenuto e senza attributi.</span><span class="sxs-lookup"><span data-stu-id="45002-133">This constructor creates an element with no content and no attributes.</span></span>  
  
 <span data-ttu-id="45002-134">È una conversione implicita da stringa a <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="45002-134">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="45002-135">È tipico di utilizzo di questo costruttore per specificare una stringa come parametro anziché creare un nuovo <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="45002-135">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="45002-136">Quando si crea un elemento in uno spazio dei nomi, utilizzo tipico consiste nell'utilizzare l'overload dell'operatore di addizione con un <xref:System.Xml.Linq.XNamespace> e una stringa per creare un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="45002-136">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="45002-137">Per ulteriori informazioni, vedere [utilizzo di spazi dei nomi XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="45002-137">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-138">Nell'esempio seguente viene creato un elemento senza contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-138">The following example creates an element with no content.</span></span>  
  
```csharp  
XElement el = new XElement("Root");  
Console.WriteLine(el);  
```  
  
```vb  
Dim el As XElement = <Root/>  
Console.WriteLine(el)  
```  
  
 <span data-ttu-id="45002-139">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-139">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 <span data-ttu-id="45002-140">Nell'esempio seguente viene creato un elemento in uno spazio dei nomi senza contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-140">The following example creates an element in a namespace with no content.</span></span> <span data-ttu-id="45002-141">Per ulteriori informazioni, vedere [utilizzo di spazi dei nomi XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="45002-141">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```  

XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root = <Root/>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="45002-142">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-142">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XStreamingElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XStreamingElement other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As XStreamingElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XStreamingElement ^ other);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XStreamingElement" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="45002-143">Oggetto <see cref="T:System.Xml.Linq.XStreamingElement" /> che contiene query non valutate di cui verrà eseguita l'iterazione per il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-143">An <see cref="T:System.Xml.Linq.XStreamingElement" /> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-144">Inizializza una nuova istanza della classe <see cref="T:System.Xml.Linq.XElement" /> da un oggetto <see cref="T:System.Xml.Linq.XStreamingElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-144">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from an <see cref="T:System.Xml.Linq.XStreamingElement" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-145">Questo costruttore scorre il contenuto dell'oggetto specificato <xref:System.Xml.Linq.XStreamingElement>e crea un elemento con il relativo contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-145">This constructor iterates through the contents of the specified <xref:System.Xml.Linq.XStreamingElement>, and creates an element with its contents.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-146">Nell'esempio seguente viene creato un albero XML di origine e quindi crea un <xref:System.Xml.Linq.XStreamingElement> da una query sull'albero XML di origine.</span><span class="sxs-lookup"><span data-stu-id="45002-146">The following example creates a source XML tree, and then creates an <xref:System.Xml.Linq.XStreamingElement> from a query on the source XML tree.</span></span> <span data-ttu-id="45002-147">Serializza quindi la <xref:System.Xml.Linq.XStreamingElement> nella console, viene aggiunto un nuovo elemento alla struttura XML di origine e quindi serializza il <xref:System.Xml.Linq.XStreamingElement> nuovamente.</span><span class="sxs-lookup"><span data-stu-id="45002-147">It then serializes the <xref:System.Xml.Linq.XStreamingElement> to the console, adds a new element to the source XML tree, and then serializes the <xref:System.Xml.Linq.XStreamingElement> again.</span></span> <span data-ttu-id="45002-148">È possibile visualizzare non è incluso nella serializzazione prima di tale elemento appena aggiunto alla struttura XML di origine, ma è incluso nel secondo.</span><span class="sxs-lookup"><span data-stu-id="45002-148">You can see that element newly added to the source XML tree is not included in the first serialization, but is included in the second.</span></span>  
  
```csharp  
XElement src = new XElement("Root",  
                   new XElement("Child1", 1),  
                   new XElement("Child2", 2),  
                   new XElement("Child3", 3)  
               );  
XStreamingElement xse = new XStreamingElement("NewRoot",  
                            from el in src.Elements()  
                            where (int)el >= 2  
                            select el  
                        );  
Console.WriteLine(xse);  
src.Add(new XElement("Child4", 4));  
Console.WriteLine("----");  
Console.WriteLine(xse);  
```  
  
```vb  
Dim src As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
        </Root>  
Dim xse As XStreamingElement = New XStreamingElement("NewRoot", _  
        From el In src.Elements() _  
        Where (CInt(el) >= 2) _  
        Select el _  
)  
Console.WriteLine(xse)  
src.Add(New XElement("Child4", 4))  
Console.WriteLine("----")  
Console.WriteLine(xse)  
```  
  
 <span data-ttu-id="45002-149">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-149">This example produces the following output:</span></span>  
  
```  
<NewRoot>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
</NewRoot>  
----  
<NewRoot>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
</NewRoot>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name, object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name, System::Object ^ content);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="45002-150">Oggetto <see cref="T:System.Xml.Linq.XName" /> contenente il nome dell'elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-150">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="45002-151">Contenuto dell'elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-151">The contents of the element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-152">Inizializza una nuova istanza della classe <see cref="T:System.Xml.Linq.XElement" /> con il nome e il contenuto specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-152">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-153">Questo costruttore crea un elemento con gli attributi e contenuto specificato.</span><span class="sxs-lookup"><span data-stu-id="45002-153">This constructor creates an element with the specified content and attributes.</span></span>  
  
 <span data-ttu-id="45002-154">È una conversione implicita da stringa a <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="45002-154">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="45002-155">È tipico di utilizzo di questo costruttore per specificare una stringa come parametro anziché creare un nuovo <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="45002-155">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="45002-156">Quando si crea un elemento in uno spazio dei nomi, utilizzo tipico consiste nell'utilizzare l'overload dell'operatore di addizione con un <xref:System.Xml.Linq.XNamespace> e una stringa per creare un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="45002-156">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="45002-157">Per ulteriori informazioni, vedere [utilizzo di spazi dei nomi XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="45002-157">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
 <span data-ttu-id="45002-158">Per informazioni dettagliate sul contenuto valido che può essere passato al costruttore, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="45002-158">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-159">Nell'esempio seguente viene creato un albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-159">The following example creates an XML tree.</span></span> <span data-ttu-id="45002-160">Il contenuto del nuovo elemento proviene da una query LINQ.</span><span class="sxs-lookup"><span data-stu-id="45002-160">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _  
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="45002-161">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-161">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="45002-162">Nell'esempio seguente viene creato un albero XML con un'ampia gamma di tipi di contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-162">The following example creates an XML tree with a variety of types of content.</span></span>  
  
```csharp  
XElement root;  
  
// String content:  
root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
  
// XElement object content:  
root = new XElement("Root",   
    new XElement("NewChild", "n")  
);  
Console.WriteLine(root);  
  
// XAttribute object content:  
root = new XElement("Root",   
    new XAttribute("NewAttribute", "n")  
);  
Console.WriteLine(root);  
  
// Double content:  
double dbl = 12.345;  
root = new XElement("Root", dbl);  
Console.WriteLine(root);  
  
// DateTime content:  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root = new XElement("Root", dt);  
Console.WriteLine(root);  
  
// String array content:  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root = new XElement("Root", stringArray);  
Console.WriteLine(root);  
  
// XElement object array content:  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root = new XElement("Root", ellArray);  
Console.WriteLine(root);  
  
// XAttribute object array content:  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root = new XElement("Root", attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement  
  
' String content:  
root = <Root>Some text</Root>  
Console.WriteLine(root)  
  
' XElement object content:  
root = <Root>  
           <NewChild>n</NewChild>  
       </Root>  
Console.WriteLine(root)  
  
' XAttribute object content:  
root = <Root NewAttribute="n"/>  
Console.WriteLine(root)  
  
' Double content:  
Dim dbl As Double = 12.345  
root = <Root><%= dbl %></Root>  
Console.WriteLine(root)  
  
' DateTime content:  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root = <Root><%= dt %></Root>  
Console.WriteLine(root)  
  
' String array content:  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root = <Root><%= stringArray %></Root>  
Console.WriteLine(root)  
  
' XElement object array content:  
Dim ellArray As XElement() = { _  
    <NewChild1>1</NewChild1>, _  
    <NewChild2>2</NewChild2>, _  
    <NewChild3>3</NewChild3> _  
}  
  
root = <Root><%= ellArray %></Root>  
Console.WriteLine(root)  
  
' XAttribute object array content  
Dim attArray As XAttribute() = { _  
    New XAttribute("NewAtt1", 1), _  
    New XAttribute("NewAtt2", 2), _  
    New XAttribute("NewAtt3", 3) _  
}  
root = <Root><%= attArray %></Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-163">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-163">This example produces the following output:</span></span>  
  
```  
<Root>Some text</Root>  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 <span data-ttu-id="45002-164">Nell'esempio seguente viene creato un albero XML in uno spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="45002-164">The following example creates an XML tree in a namespace.</span></span>  
  
```csharp  
// Create an XML tree in a namespace.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child", "child content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree in a namespace.  
Dim root As XElement = _   
    <Root xmlns='http://www.adventure-works.com'>  
        <Child>child content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-165">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-165">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child>child content</Child>  
</Root>  
```  
  
 <span data-ttu-id="45002-166">Nell'esempio seguente viene creato un albero XML con spazi dei nomi annidati.</span><span class="sxs-lookup"><span data-stu-id="45002-166">The following example creates an XML tree with nested namespaces.</span></span>  
  
```csharp  
// Create an XML tree with nested namespaces.  
XNamespace aw = "http://www.adventure-works.com";  
XNamespace fc = "www.fourthcoffee.com";  
XDocument root = new XDocument(  
    new XDeclaration("1.0", "utf-8", "yes"),  
    new XElement(aw + "Root",  
        new XElement(fc + "Child",  
            new XElement(aw + "DifferentChild", "other content")  
        )  
    )  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree with nested namespaces.  
Dim root As XDocument = _   
    <?xml version='1.0'?>  
    <Root xmlns='http://www.adventure-works.com'>  
        <Child xmlns='www.fourthcoffee.com'>  
        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  
        </Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-167">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-167">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child xmlns="www.fourthcoffee.com">  
    <DifferentChild xmlns="http://www.adventure-works.com">other content</DifferentChild>  
  </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XElement (System.Xml.Linq.XName name, params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.Linq.XName name, object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As XName, ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XElement(System::Xml::Linq::XName ^ name, ... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="45002-168">Oggetto <see cref="T:System.Xml.Linq.XName" /> contenente il nome dell'elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-168">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</span>
          </span>
        </param>
        <param name="content">
          <span data-ttu-id="45002-169">Contenuto iniziale dell'elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-169">The initial content of the element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-170">Inizializza una nuova istanza della classe <see cref="T:System.Xml.Linq.XElement" /> con il nome e il contenuto specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-170">Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-171">Questo costruttore crea un elemento con gli attributi e contenuto specificato.</span><span class="sxs-lookup"><span data-stu-id="45002-171">This constructor creates an element with the specified content and attributes.</span></span>  
  
 <span data-ttu-id="45002-172">È una conversione implicita da stringa a <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="45002-172">There is an implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="45002-173">È tipico di utilizzo di questo costruttore per specificare una stringa come parametro anziché creare un nuovo <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="45002-173">Typical use of this constructor is to specify a string as the parameter instead of creating a new <xref:System.Xml.Linq.XName>.</span></span>  
  
 <span data-ttu-id="45002-174">Quando si crea un elemento in uno spazio dei nomi, utilizzo tipico consiste nell'utilizzare l'overload dell'operatore di addizione con un <xref:System.Xml.Linq.XNamespace> e una stringa per creare un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="45002-174">When creating an element in a namespace, typical use is to use the addition operator overload with an <xref:System.Xml.Linq.XNamespace> and a string to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="45002-175">Per ulteriori informazioni, vedere [utilizzo di spazi dei nomi XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="45002-175">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
 <span data-ttu-id="45002-176">Per informazioni dettagliate sul contenuto valido che può essere passato al costruttore, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="45002-176">For details about the valid content that can be passed to this constructor, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-177">Nell'esempio seguente viene creato un albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-177">The following example creates an XML tree.</span></span> <span data-ttu-id="45002-178">Il contenuto del nuovo elemento proviene da una query LINQ.</span><span class="sxs-lookup"><span data-stu-id="45002-178">The content of the new element comes from a LINQ query.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement xmlTree2 = new XElement("Root",  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(xmlTree2);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim xmlTree2 As XElement = _   
    <Root>  
        <%= From el In xmlTree1.Elements() _  
            Where el.Value >= 3 And el.Value <= 5 _  
            Select el %>  
    </Root>  
  
Console.WriteLine(xmlTree2)  
```  
  
 <span data-ttu-id="45002-179">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-179">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 <span data-ttu-id="45002-180">Nell'esempio seguente viene creato un albero XML con un'ampia gamma di tipi di contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-180">The following example creates an XML tree with a variety of types of content.</span></span>  
  
```csharp  
XElement root;  
  
// String content:  
root = new XElement("Root", "Some text");  
Console.WriteLine(root);  
  
// XElement object content:  
root = new XElement("Root",   
    new XElement("NewChild", "n")  
);  
Console.WriteLine(root);  
  
// XAttribute object content:  
root = new XElement("Root",   
    new XAttribute("NewAttribute", "n")  
);  
Console.WriteLine(root);  
  
// Double content:  
double dbl = 12.345;  
root = new XElement("Root", dbl);  
Console.WriteLine(root);  
  
// DateTime content:  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root = new XElement("Root", dt);  
Console.WriteLine(root);  
  
// String array content:  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root = new XElement("Root", stringArray);  
Console.WriteLine(root);  
  
// XElement object array content:  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root = new XElement("Root", ellArray);  
Console.WriteLine(root);  
  
// XAttribute object array content:  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root = new XElement("Root", attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement  
  
' String content:  
root = <Root>Some text</Root>  
Console.WriteLine(root)  
  
' XElement object content:  
root = <Root>  
           <NewChild>n</NewChild>  
       </Root>  
Console.WriteLine(root)  
  
' XAttribute object content:  
root = <Root NewAttribute="n"/>  
Console.WriteLine(root)  
  
' Double content:  
Dim dbl As Double = 12.345  
root = <Root><%= dbl %></Root>  
Console.WriteLine(root)  
  
' DateTime content:  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root = <Root><%= dt %></Root>  
Console.WriteLine(root)  
  
' String array content:  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root = <Root><%= stringArray %></Root>  
Console.WriteLine(root)  
  
' XElement object array content:  
Dim ellArray As XElement() = { _  
    <NewChild1>1</NewChild1>, _  
    <NewChild2>2</NewChild2>, _  
    <NewChild3>3</NewChild3> _  
}  
  
root = <Root><%= ellArray %></Root>  
Console.WriteLine(root)  
  
' XAttribute object array content  
Dim attArray As XAttribute() = { _  
    New XAttribute("NewAtt1", 1), _  
    New XAttribute("NewAtt2", 2), _  
    New XAttribute("NewAtt3", 3) _  
}  
root = <Root><%= attArray %></Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-181">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-181">This example produces the following output:</span></span>  
  
```  
<Root>Some text</Root>  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 <span data-ttu-id="45002-182">Nell'esempio seguente viene creato un albero XML in uno spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="45002-182">The following example creates an XML tree in a namespace.</span></span>  
  
```csharp  
// Create an XML tree in a namespace.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child", "child content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree in a namespace.  
Dim root As XElement = _   
    <Root xmlns='http://www.adventure-works.com'>  
        <Child>child content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-183">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-183">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child>child content</Child>  
</Root>  
```  
  
 <span data-ttu-id="45002-184">Nell'esempio seguente viene creato un albero XML con spazi dei nomi annidati.</span><span class="sxs-lookup"><span data-stu-id="45002-184">The following example creates an XML tree with nested namespaces.</span></span>  
  
```csharp  
// Create an XML tree with nested namespaces.  
XNamespace aw = "http://www.adventure-works.com";  
XNamespace fc = "www.fourthcoffee.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(fc + "Child",  
        new XElement(aw + "DifferentChild", "other content")  
    )  
);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an XML tree with nested namespaces.  
Dim root As XDocument = _   
    <?xml version='1.0'?>  
    <Root xmlns='http://www.adventure-works.com'>  
        <Child xmlns='www.fourthcoffee.com'>  
        <DifferentChild xmlns='http://www.adventure-works.com'>other content</DifferentChild>  
        </Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-185">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-185">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">  
  <Child xmlns="www.fourthcoffee.com">  
    <DifferentChild xmlns="http://www.adventure-works.com">other content</DifferentChild>  
  </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AncestorsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45002-186">Restituisce una raccolta di elementi che contengono questo elemento e i relativi predecessori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-186">Returns a collection of elements that contain this element, and the ancestors of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-187">Gli elementi nella raccolta restituita sono in ordine inverso del documento.</span><span class="sxs-lookup"><span data-stu-id="45002-187">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="45002-188">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="45002-188">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
      </Docs>
    </MemberGroup>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.AncestorsAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function AncestorsAndSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45002-189">Restituisce una raccolta di elementi che contengono questo elemento e i relativi predecessori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-189">Returns a collection of elements that contain this element, and the ancestors of this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-190">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XElement" /> di elementi che contengono questo elemento e i relativi predecessori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-190">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and the ancestors of this element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-191">Gli elementi nella raccolta restituita sono in ordine inverso del documento.</span><span class="sxs-lookup"><span data-stu-id="45002-191">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="45002-192">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="45002-192">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-193">Nell'esempio seguente viene creato un albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-193">The following example creates an XML tree.</span></span> <span data-ttu-id="45002-194">Quindi, viene individuato il `GrandChild` elemento e quindi vengono visualizzati i relativi predecessori.</span><span class="sxs-lookup"><span data-stu-id="45002-194">It then finds the `GrandChild` element, and then prints the ancestors of it.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
XElement gc = xmlTree.Element("Child").Element("GrandChild");  
IEnumerable<XElement> aas =  
    from el in gc.AncestorsAndSelf()  
    select el;  
foreach (XElement el in aas)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  
  
Dim aas As IEnumerable(Of XElement) = _  
    From el In GC.AncestorsAndSelf() _  
    Select el  
  
For Each el In aas  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="45002-195">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-195">This example produces the following output:</span></span>  
  
```  
GrandChild  
Child  
Root  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
      </Docs>
    </Member>
    <Member MemberName="AncestorsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; AncestorsAndSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; AncestorsAndSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function AncestorsAndSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ AncestorsAndSelf(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="45002-196">Oggetto <see cref="T:System.Xml.Linq.XName" /> di cui trovare la corrispondenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-196">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-197">Restituisce una raccolta filtrata di elementi che contengono questo elemento e i relativi predecessori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-197">Returns a filtered collection of elements that contain this element, and the ancestors of this element.</span>
          </span>
          <span data-ttu-id="45002-198">Solo gli elementi che hanno un oggetto <see cref="T:System.Xml.Linq.XName" /> corrispondente vengono inclusi nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-198">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-199">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XElement" /> che contiene questo elemento e i relativi predecessori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-199">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and the ancestors of this element.</span>
          </span>
          <span data-ttu-id="45002-200">Solo gli elementi che hanno un oggetto <see cref="T:System.Xml.Linq.XName" /> corrispondente vengono inclusi nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-200">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-201">Gli elementi nella raccolta restituita sono in ordine inverso del documento.</span><span class="sxs-lookup"><span data-stu-id="45002-201">The elements in the returned collection are in reverse document order.</span></span>  
  
 <span data-ttu-id="45002-202">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="45002-202">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-203">L'esempio seguente usa questo.</span><span class="sxs-lookup"><span data-stu-id="45002-203">The following example uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Child",  
        new XElement("GrandChild", "element content")  
    )  
);  
XElement gc = xmlTree.Element("Child").Element("GrandChild");  
IEnumerable<XElement> aas = gc.AncestorsAndSelf("Child");  
foreach (XElement el in aas)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _   
    <Root>  
        <Child>  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim GC As XElement = xmlTree.<Child>.<GrandChild>(0)  
Dim aas As IEnumerable(Of XElement) = GC.AncestorsAndSelf("Child")  
For Each el In aas  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="45002-204">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-204">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XNode.Ancestors" />
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute Attribute (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XAttribute Attribute(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attribute (name As XName) As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XAttribute ^ Attribute(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="45002-205">Oggetto <see cref="T:System.Xml.Linq.XName" /> dell'oggetto <see cref="T:System.Xml.Linq.XAttribute" /> da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-205">The <see cref="T:System.Xml.Linq.XName" /> of the <see cref="T:System.Xml.Linq.XAttribute" /> to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-206">Restituisce <see cref="T:System.Xml.Linq.XAttribute" /> di questo oggetto <see cref="T:System.Xml.Linq.XElement" /> con l'oggetto <see cref="T:System.Xml.Linq.XName" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-206">Returns the <see cref="T:System.Xml.Linq.XAttribute" /> of this <see cref="T:System.Xml.Linq.XElement" /> that has the specified <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-207">Oggetto <see cref="T:System.Xml.Linq.XAttribute" /> con l'oggetto <see cref="T:System.Xml.Linq.XName" /> specificato; <see langword="null" /> se non ci sono attributi con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-207">An <see cref="T:System.Xml.Linq.XAttribute" /> that has the specified <see cref="T:System.Xml.Linq.XName" />; <see langword="null" /> if there is no attribute with the specified name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-208">Alcune restituiscono raccolte di elementi o attributi.</span><span class="sxs-lookup"><span data-stu-id="45002-208">Some  return collections of elements or attributes.</span></span> <span data-ttu-id="45002-209">Questo metodo restituisce un solo attributo.</span><span class="sxs-lookup"><span data-stu-id="45002-209">This method returns only a single attribute.</span></span> <span data-ttu-id="45002-210">Ciò è talvolta detta un *singleton* (in contrasto con una *raccolta*).</span><span class="sxs-lookup"><span data-stu-id="45002-210">Sometimes this is referred to as a *singleton* (in contrast to a *collection*).</span></span>  
  
 <span data-ttu-id="45002-211">Gli utenti di Visual Basic è possono utilizzare l'asse attribute integrato per recuperare il valore di un attributo con un nome specificato.</span><span class="sxs-lookup"><span data-stu-id="45002-211">Visual Basic users can use the integrated attribute axis to retrieve the value of an attribute with a specified name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-212">Nell'esempio seguente viene creato un elemento con un attributo.</span><span class="sxs-lookup"><span data-stu-id="45002-212">The following example creates an element with an attribute.</span></span> <span data-ttu-id="45002-213">Recupera quindi l'attributo con questo metodo.</span><span class="sxs-lookup"><span data-stu-id="45002-213">It then retrieves the attribute using this method.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att", "attribute content")  
);  
XAttribute att = xmlTree.Attribute("Att");  
Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att="attribute content"/>  
  
Dim att As XAttribute = xmlTree.Attribute("Att")  
Console.WriteLine(att)  
```  
  
 <span data-ttu-id="45002-214">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-214">This example produces the following output:</span></span>  
  
```  
Att="attribute content"  
```  
  
 <span data-ttu-id="45002-215">Di seguito è riportato lo stesso esempio, ma in questo caso il XML si trova in uno spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="45002-215">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="45002-216">Per ulteriori informazioni, vedere [utilizzo di spazi dei nomi XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="45002-216">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att", "attribute content")  
);  
XAttribute att = xmlTree.Attribute(aw + "Att");  
Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att="attribute content"/>  
  
        Dim att As XAttribute = xmlTree.Attribute(GetXmlNamespace(aw) + "Att")  
        Console.WriteLine(att)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="45002-217">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-217">This example produces the following output:</span></span>  
  
```  
aw:Att="attribute content"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Attributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45002-218">Restituisce una raccolta di attributi di questo elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-218">Returns a collection of attributes of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-219">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="45002-219">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Function Attributes () As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45002-220">Restituisce una raccolta di attributi di questo elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-220">Returns a collection of attributes of this element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-221">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XAttribute" /> di attributi di questo elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-221">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> of attributes of this element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-222">Gli attributi nella raccolta restituita sono nell'ordine in cui sono stati aggiunti all'elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-222">The attributes in the returned collection are in the order that they were added to the element.</span></span> <span data-ttu-id="45002-223">Se la struttura ad albero XML è stato analizzato da XML, gli attributi vengono restituiti nell'ordine del documento.</span><span class="sxs-lookup"><span data-stu-id="45002-223">If the XML tree was parsed from XML, the attributes are returned in document order.</span></span>  
  
 <span data-ttu-id="45002-224">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="45002-224">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-225">Nell'esempio seguente viene creato un elemento con due attributi.</span><span class="sxs-lookup"><span data-stu-id="45002-225">The following example creates an element with two attributes.</span></span> <span data-ttu-id="45002-226">Questo viene quindi utilizzato per recuperare tutti gli attributi dell'elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-226">It then uses this  to retrieve all attributes of the element.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2")  
);  
IEnumerable<XAttribute> attList =  
    from at in xmlTree.Attributes()  
    select at;  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="content1" Att2="content2"/>  
  
Dim attList As IEnumerable(Of XAttribute) = _  
From at In xmlTree.Attributes() _  
Select at  
  
For Each att In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="45002-227">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-227">This example produces the following output:</span></span>  
  
```  
Att1="content1"  
Att2="content2"  
```  
  
 <span data-ttu-id="45002-228">Di seguito è riportato lo stesso esempio, ma in questo caso il XML si trova in uno spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="45002-228">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="45002-229">Per ulteriori informazioni, vedere [utilizzo di spazi dei nomi XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="45002-229">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2"),  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com")  
);  
IEnumerable<XAttribute> attList =  
    from at in xmlTree.Attributes()  
    select at;  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att1="content1" aw:Att2="content2"/>  
  
        Dim attList As IEnumerable(Of XAttribute) = _  
            From at In xmlTree.Attributes() _  
            Select at  
  
        For Each att In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="45002-230">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-230">This example produces the following output:</span></span>  
  
```  
aw:Att1="content1"  
aw:Att2="content2"  
xmlns:aw="http://www.adventure-works.com"  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XContainer.Elements" />
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt; Attributes (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XAttribute&gt; Attributes(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attributes (name As XName) As IEnumerable(Of XAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XAttribute ^&gt; ^ Attributes(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="45002-231">Oggetto <see cref="T:System.Xml.Linq.XName" /> di cui trovare la corrispondenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-231">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-232">Restituisce una raccolta filtrata di attributi di questo elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-232">Returns a filtered collection of attributes of this element.</span>
          </span>
          <span data-ttu-id="45002-233">Solo gli elementi che hanno un oggetto <see cref="T:System.Xml.Linq.XName" /> corrispondente vengono inclusi nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-233">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-234">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XAttribute" /> che contiene gli attributi di questo elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-234">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of this element.</span>
          </span>
          <span data-ttu-id="45002-235">Solo gli elementi che hanno un oggetto <see cref="T:System.Xml.Linq.XName" /> corrispondente vengono inclusi nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-235">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-236">I nomi di attributo devono essere univoci all'interno di un elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-236">Attribute names must be unique within an element.</span></span> <span data-ttu-id="45002-237">Pertanto, può restituire in una raccolta che contiene un solo attributo, o può restituire una raccolta vuota.</span><span class="sxs-lookup"><span data-stu-id="45002-237">Therefore, this  can return either a collection that contains only one attribute, or it can return an empty collection.</span></span>  
  
 <span data-ttu-id="45002-238">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="45002-238">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-239">L'esempio seguente usa questo.</span><span class="sxs-lookup"><span data-stu-id="45002-239">The following example uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "content1"),  
    new XAttribute("Att2", "content2")  
);  
IEnumerable<XAttribute> attList = xmlTree.Attributes("Att1");  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="content1" Att2="content2"/>  
  
Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes("Att1")  
  
For Each att In attList  
    Console.WriteLine(att)  
Next  
```  
  
 <span data-ttu-id="45002-240">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-240">This example produces the following output:</span></span>  
  
```  
Att1="content1"  
```  
  
 <span data-ttu-id="45002-241">Di seguito è riportato lo stesso esempio, ma in questo caso il XML si trova in uno spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="45002-241">The following is the same example, but in this case the XML is in a namespace.</span></span> <span data-ttu-id="45002-242">Per ulteriori informazioni, vedere [utilizzo di spazi dei nomi XML](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span><span class="sxs-lookup"><span data-stu-id="45002-242">For more information, see [Working with XML Namespaces](http://msdn.microsoft.com/library/e3003209-3234-45be-a832-47feb7927430).</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement xmlTree = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XAttribute(aw + "Att1", "content1"),  
    new XAttribute(aw + "Att2", "content2")  
);  
IEnumerable<XAttribute> attList = xmlTree.Attributes(aw + "Att1");  
foreach (XAttribute att in attList)  
    Console.WriteLine(att);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root aw:Att1="content1" aw:Att2="content2"/>  
  
        Dim attList As IEnumerable(Of XAttribute) = xmlTree.Attributes(GetXmlNamespace(aw) + "Att1")  
  
        For Each att In attList  
            Console.WriteLine(att)  
        Next  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="45002-243">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-243">This example produces the following output:</span></span>  
  
```  
aw:Att1="content1"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantNodesAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt; DescendantNodesAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XNode&gt; DescendantNodesAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantNodesAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantNodesAndSelf () As IEnumerable(Of XNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XNode ^&gt; ^ DescendantNodesAndSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45002-244">Restituisce una raccolta di nodi che contengono questo elemento e tutti i relativi nodi discendenti, nell'ordine del documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-244">Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-245">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XNode" /> che contengono questo elemento e tutti i relativi nodi discendenti, nell'ordine del documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-245">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contain this element, and all descendant nodes of this element, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-246">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="45002-246">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-247">Nell'esempio seguente viene creato un albero XML che quindi utilizza.</span><span class="sxs-lookup"><span data-stu-id="45002-247">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    // Attributes are not nodes, so will not be returned by DescendantNodesAndSelf.  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XNode> dnas =  
    from node in xmlTree.DescendantNodesAndSelf()  
    select node;  
foreach (XNode node in dnas)  
{  
    if (node is XElement)  
        Console.WriteLine((node as XElement).Name);  
    else  
        Console.WriteLine(node);  
}  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text<GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim dnas As IEnumerable(Of XNode) = _  
    From node In xmlTree.DescendantNodesAndSelf() _  
    Select node  
  
For Each node In dnas  
    If TypeOf node Is XElement Then  
        Console.WriteLine(DirectCast(node, XElement).Name)  
    Else  
        Console.WriteLine(node)  
    End If  
Next  
```  
  
 <span data-ttu-id="45002-248">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-248">This example produces the following output:</span></span>  
  
```  
Root  
Child  
Some text  
GrandChild  
element content  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DescendantsAndSelf">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45002-249">Restituisce una raccolta di elementi che contengono questo elemento e tutti i relativi elementi discendenti, nell'ordine del documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-249">Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-250">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="45002-250">This method uses deferred execution.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantsAndSelf" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantsAndSelf () As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45002-251">Restituisce una raccolta di elementi che contengono questo elemento e tutti i relativi elementi discendenti, nell'ordine del documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-251">Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-252">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XElement" /> di elementi che contengono questo elemento e tutti i relativi elementi discendenti, nell'ordine del documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-252">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and all descendant elements of this element, in document order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-253">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="45002-253">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-254">Nell'esempio seguente viene creato un albero XML che quindi utilizza.</span><span class="sxs-lookup"><span data-stu-id="45002-254">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> das =  
    from el in xmlTree.DescendantsAndSelf()  
    select el;  
foreach (XElement el in das)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim das As IEnumerable(Of XElement) = _  
    From el In xmlTree.DescendantsAndSelf() _  
    Select el  
  
For Each el In das  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="45002-255">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-255">This example produces the following output:</span></span>  
  
```  
Root  
Child  
GrandChild  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DescendantsAndSelf">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; DescendantsAndSelf (System.Xml.Linq.XName name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; DescendantsAndSelf(class System.Xml.Linq.XName name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Function DescendantsAndSelf (name As XName) As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ DescendantsAndSelf(System::Xml::Linq::XName ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="45002-256">Oggetto <see cref="T:System.Xml.Linq.XName" /> di cui trovare la corrispondenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-256">The <see cref="T:System.Xml.Linq.XName" /> to match.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-257">Restituisce una raccolta filtrata di elementi che contengono questo elemento e tutti i relativi elementi discendenti, nell'ordine del documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-257">Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order.</span>
          </span>
          <span data-ttu-id="45002-258">Solo gli elementi che hanno un oggetto <see cref="T:System.Xml.Linq.XName" /> corrispondente vengono inclusi nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-258">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-259">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XElement" /> che contiene questo elemento e tutti gli elementi discendenti di questo elemento nell'ordine in cui sono riportati nel documento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-259">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and all descendant elements of this element, in document order.</span>
          </span>
          <span data-ttu-id="45002-260">Solo gli elementi che hanno un oggetto <see cref="T:System.Xml.Linq.XName" /> corrispondente vengono inclusi nella raccolta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-260">Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-261">Questo metodo usa l'esecuzione posticipata.</span><span class="sxs-lookup"><span data-stu-id="45002-261">This method uses deferred execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-262">Nell'esempio seguente viene creato un albero XML che quindi utilizza.</span><span class="sxs-lookup"><span data-stu-id="45002-262">The following example creates an XML tree, and then uses this .</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", "AttributeContent"),  
    new XElement("Child",  
        new XText("Some text"),  
        new XElement("GrandChild", "element content")  
    )  
);  
IEnumerable<XElement> das = xmlTree.DescendantsAndSelf("Child");  
foreach (XElement el in das)  
    Console.WriteLine(el.Name);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root Att1="AttributeContent">  
        <Child>Some text  
            <GrandChild>element content</GrandChild>  
        </Child>  
    </Root>  
  
Dim das As IEnumerable(Of XElement) = xmlTree.DescendantsAndSelf("Child")  
  
For Each el In das  
    Console.WriteLine(el.Name)  
Next  
```  
  
 <span data-ttu-id="45002-263">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-263">This example produces the following output:</span></span>  
  
```  
Child  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptySequence">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt; EmptySequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IEnumerable`1&lt;class System.Xml.Linq.XElement&gt; EmptySequence" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.EmptySequence" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EmptySequence As IEnumerable(Of XElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ EmptySequence { System::Collections::Generic::IEnumerable&lt;System::Xml::Linq::XElement ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45002-264">Ottiene una raccolta vuota di elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-264">Gets an empty collection of elements.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45002-265">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di <see cref="T:System.Xml.Linq.XElement" /> che contiene una raccolta vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-265">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains an empty collection.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-266">Questa proprietà viene in genere utilizzata per gli implementatori di classe quando si scrive un metodo che restituisce una raccolta di elementi.</span><span class="sxs-lookup"><span data-stu-id="45002-266">This property is typically used by class implementers when writing a method that returns a collection of elements.</span></span> <span data-ttu-id="45002-267">Se il metodo non deve restituire alcun elemento, è possibile utilizzare questa proprietà per ottenere una raccolta vuota di <xref:System.Xml.Linq.XElement> oggetti.</span><span class="sxs-lookup"><span data-stu-id="45002-267">If the method must return no elements, it can use this property to get an empty collection of <xref:System.Xml.Linq.XElement> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute FirstAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute FirstAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.FirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FirstAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ FirstAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45002-268">Ottiene il primo attributo di questo elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-268">Gets the first attribute of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45002-269">Oggetto <see cref="T:System.Xml.Linq.XAttribute" /> che contiene il primo attributo di questo elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-269">An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the first attribute of this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-270">Gli attributi vengono archiviati nell'elemento nell'ordine in cui sono stati aggiunti all'elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-270">Attributes are stored in the element in the order that they were added to the element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-271">Nell'esempio seguente viene utilizzata questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="45002-271">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
Console.WriteLine(xmlTree.FirstAttribute);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
Console.WriteLine(xmlTree.FirstAttribute)  
```  
  
 <span data-ttu-id="45002-272">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-272">This example produces the following output:</span></span>  
  
```  
Att1="1"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultNamespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace GetDefaultNamespace ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XNamespace GetDefaultNamespace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetDefaultNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDefaultNamespace () As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XNamespace ^ GetDefaultNamespace();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45002-273">Ottiene l'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> predefinito di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-273">Gets the default <see cref="T:System.Xml.Linq.XNamespace" /> of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-274">Oggetto <see cref="T:System.Xml.Linq.XNamespace" /> che contiene lo spazio dei nomi predefinito di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-274">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the default namespace of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-275">Namespace dichiarazioni possono essere mantenute come attributi nella struttura ad albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-275">Namespace declarations may be persisted as attributes in the XML tree.</span></span> <span data-ttu-id="45002-276">Questi attributi speciali dichiarano spazi dei nomi, inclusi gli spazi dei nomi predefinito.</span><span class="sxs-lookup"><span data-stu-id="45002-276">These special attributes declare namespaces, including default namespaces.</span></span> <span data-ttu-id="45002-277">Questo metodo consente di trovare la dichiarazione dello spazio dei nomi che dichiara lo spazio dei nomi predefinito, se è presente, e restituisce il <xref:System.Xml.Linq.XNamespace> per lo spazio dei nomi predefinito.</span><span class="sxs-lookup"><span data-stu-id="45002-277">This method finds the namespace declaration that declares the default namespace, if there is one, and returns the <xref:System.Xml.Linq.XNamespace> for the default namespace.</span></span>  
  
 <span data-ttu-id="45002-278">Se nessun attributo che dichiara lo spazio dei nomi predefinito, questo metodo restituisce <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="45002-278">If there is no attribute that declares the default namespace, then this method returns <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="45002-279">Durante la creazione di strutture ad albero XML in c#, anche se un albero XML verrà serializzato con uno spazio dei nomi predefinito, se lo spazio dei nomi non è persistente nell'albero XML come un attributo, questo metodo non segnalerà lo spazio dei nomi come spazio dei nomi predefinito.</span><span class="sxs-lookup"><span data-stu-id="45002-279">When creating XML trees using C#, even if an XML tree would be serialized with a default namespace, if the namespace is not persisted in the XML tree as an attribute, this method will not report the namespace as the default namespace.</span></span>  
  
 <span data-ttu-id="45002-280">Durante la creazione di alberi XML usando Visual Basic e valori letterali XML, se si crea il codice XML in uno spazio dei nomi predefinito utilizzando l'istruzione Imports, quindi un attributo dello spazio dei nomi verrà creato nella struttura dal compilatore Visual Basic, e questo metodo riporterà tale spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="45002-280">When creating XML trees using Visual Basic and XML literals, if you create the XML in a default namespace using the Imports statement, then a namespace attribute will be created in the tree by the Visual Basic compiler, and this method will report that namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-281">Nell'esempio seguente viene creato un albero XML con uno spazio dei nomi predefinito.</span><span class="sxs-lookup"><span data-stu-id="45002-281">The following example creates an XML tree that has a default namespace.</span></span> <span data-ttu-id="45002-282">Viene quindi utilizzato questo metodo per recuperare lo spazio dei nomi predefinito.</span><span class="sxs-lookup"><span data-stu-id="45002-282">It then uses this method to retrieve the default namespace.</span></span>  
  
```csharp  
String xml = "<root xmlns='http://www.adventure-works.com'/>";  
XElement e = XElement.Parse(xml);  
Console.WriteLine("Default namespace: {0}", e.GetDefaultNamespace());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim e As XElement = <root/>  
        Console.WriteLine("Default namespace: {0}", e.GetDefaultNamespace())  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="45002-283">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-283">This example produces the following output:</span></span>  
  
```  
Default namespace: http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNamespaceOfPrefix">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace GetNamespaceOfPrefix (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XNamespace GetNamespaceOfPrefix(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNamespaceOfPrefix (prefix As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XNamespace ^ GetNamespaceOfPrefix(System::String ^ prefix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
          <span data-ttu-id="45002-284">Stringa che contiene il prefisso degli spazi dei nomi da ricercare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-284">A string that contains the namespace prefix to look up.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-285">Ottiene lo spazio dei nomi associato a uno specifico prefisso per <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-285">Gets the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-286">Oggetto <see cref="T:System.Xml.Linq.XNamespace" /> per lo spazio dei nomi associato al prefisso per questo <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-286">An <see cref="T:System.Xml.Linq.XNamespace" /> for the namespace associated with the prefix for this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-287">Questo metodo esegue la ricerca nell'albero XML gli attributi dello spazio dei nomi che rientrano nell'ambito per questo elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-287">This method looks through the XML tree for namespace attributes that are in scope for this element.</span></span> <span data-ttu-id="45002-288">I prefissi Namespace sono specificati negli attributi dello spazio dei nomi presenti nella struttura ad albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-288">Namespace prefixes are specified in namespace attributes that are in the XML tree.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-289">Nell'esempio seguente viene creato un albero XML con uno spazio dei nomi con un prefisso associato.</span><span class="sxs-lookup"><span data-stu-id="45002-289">The following example creates an XML tree that has a namespace with an associated prefix.</span></span> <span data-ttu-id="45002-290">Questo metodo quindi utilizzato per recuperare il <xref:System.Xml.Linq.XNamespace> per il prefisso.</span><span class="sxs-lookup"><span data-stu-id="45002-290">It then uses this method to retrieve the <xref:System.Xml.Linq.XNamespace> for the prefix.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root xmlns:aw='http://www.adventure-works.com'/>");  
XNamespace awNamespace = xmlTree.GetNamespaceOfPrefix("aw");  
Console.WriteLine("Namespace: {0}", awNamespace);  
```  
  
 <span data-ttu-id="45002-291">Quando si utilizza Visual Basic, in genere viene utilizzata la [operatore GetXmlNamespace](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md) (operatore), come indicato di seguito</span><span class="sxs-lookup"><span data-stu-id="45002-291">When using Visual Basic, you would typically use the [GetXmlNamespace Operator](~/docs/visual-basic/language-reference/operators/getxmlnamespace-operator.md) operator, as follows</span></span>  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root/>  
        Dim awNamespace As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine("Namespace: {0}", awNamespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="45002-292">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-292">This example produces the following output:</span></span>  
  
```  
Namespace: http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrefixOfNamespace">
      <MemberSignature Language="C#" Value="public string GetPrefixOfNamespace (System.Xml.Linq.XNamespace ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPrefixOfNamespace(class System.Xml.Linq.XNamespace ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrefixOfNamespace (ns As XNamespace) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPrefixOfNamespace(System::Xml::Linq::XNamespace ^ ns);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="ns">
          <span data-ttu-id="45002-293">Oggetto <see cref="T:System.Xml.Linq.XNamespace" /> da ricercare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-293">An <see cref="T:System.Xml.Linq.XNamespace" /> to look up.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-294">Ottiene il prefisso associato allo spazio dei nomi per <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-294">Gets the prefix associated with a namespace for this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-295">Oggetto <see cref="T:System.String" /> che contiene il prefisso dello spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-295">A <see cref="T:System.String" /> that contains the namespace prefix.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-296">Questo metodo esegue la ricerca nell'albero XML gli attributi dello spazio dei nomi che rientrano nell'ambito per questo elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-296">This method looks through the XML tree for namespace attributes that are in scope for this element.</span></span> <span data-ttu-id="45002-297">I prefissi Namespace sono specificati negli attributi dello spazio dei nomi presenti nella struttura ad albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-297">Namespace prefixes are specified in namespace attributes that are in the XML tree.</span></span>  
  
 <span data-ttu-id="45002-298">Se lo spazio dei nomi è lo spazio dei nomi predefinito e non è presente un prefisso dello spazio dei nomi, questo metodo restituisce null.</span><span class="sxs-lookup"><span data-stu-id="45002-298">If the namespace is the default namespace, and there is no prefix for the namespace, then this method returns null.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-299">Nell'esempio seguente viene creato un albero XML che contiene uno spazio dei nomi con un prefisso.</span><span class="sxs-lookup"><span data-stu-id="45002-299">The following example creates an XML tree that contains a namespace with a prefix.</span></span> <span data-ttu-id="45002-300">Viene quindi utilizzato questo metodo per recuperare il prefisso dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="45002-300">It then uses this method to retrieve the prefix for the namespace.</span></span> <span data-ttu-id="45002-301">Si noti che in questo esempio utilizza la conversione implicita da stringa a <xref:System.Xml.Linq.XNamespace> quando si chiama questo metodo.</span><span class="sxs-lookup"><span data-stu-id="45002-301">Notice that this example uses the implicit conversion from string to <xref:System.Xml.Linq.XNamespace> when calling this method.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root xmlns:aw='http://www.adventure-works.com'/>");  
string prefix = xmlTree.GetPrefixOfNamespace("http://www.adventure-works.com");  
Console.WriteLine("Prefix: {0}", prefix);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim xmlTree As XElement = <aw:Root/>  
        Dim prefix As String = xmlTree.GetPrefixOfNamespace("http://www.adventure-works.com")  
        Console.WriteLine("Prefix: {0}", prefix)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="45002-302">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-302">This example produces the following output:</span></span>  
  
```  
Prefix: aw  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAttributes">
      <MemberSignature Language="C#" Value="public bool HasAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.HasAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAttributes { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45002-303">Ottiene un valore che indica se questo elemento ha almeno un attributo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-303">Gets a value indicating whether this element has at least one attribute.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45002-304">
            <see langword="true" /> se l'elemento ha almeno un attributo; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-304">
              <see langword="true" /> if this element has at least one attribute; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="45002-305">Nell'esempio seguente viene utilizzata questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="45002-305">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XAttribute("Att1", 1)  
);  
Console.WriteLine(xmlTree1.HasAttributes);  
XElement xmlTree2 = new XElement("Root");  
Console.WriteLine(xmlTree2.HasAttributes);  
```  
  
```vb  
Dim xmlTree1 As XElement = <Root Att1="1"/>  
Console.WriteLine(xmlTree1.HasAttributes)  
  
Dim xmlTree2 As XElement = <Root/>  
Console.WriteLine(xmlTree2.HasAttributes)  
```  
  
 <span data-ttu-id="45002-306">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-306">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasElements">
      <MemberSignature Language="C#" Value="public bool HasElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.HasElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElements As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElements { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45002-307">Ottiene un valore che indica se l'elemento ha almeno un elemento figlio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-307">Gets a value indicating whether this element has at least one child element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45002-308">
            <see langword="true" /> se l'elemento ha almeno un elemento figlio; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-308">
              <see langword="true" /> if this element has at least one child element; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="45002-309">Nell'esempio seguente viene utilizzata questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="45002-309">The following example uses this property.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", 1)  
);  
Console.WriteLine(xmlTree1.HasElements);  
XElement xmlTree2 = new XElement("Root", "contents");  
Console.WriteLine(xmlTree2.HasElements);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>1</Child>  
        </Root>  
Console.WriteLine(xmlTree1.HasElements)  
  
Dim xmlTree2 As XElement = <Root>contents</Root>  
Console.WriteLine(xmlTree2.HasElements)  
```  
  
 <span data-ttu-id="45002-310">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-310">This example produces the following output:</span></span>  
  
```  
True  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45002-311">Ottiene un valore che indica se questo elemento non include contenuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-311">Gets a value indicating whether this element contains no content.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45002-312">
            <see langword="true" /> se l'elemento non include contenuto; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-312">
              <see langword="true" /> if this element contains no content; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-313">Si noti che un elemento che contiene un tag di inizio e fine senza contenuto tra i tag non viene considerato come un elemento vuoto.</span><span class="sxs-lookup"><span data-stu-id="45002-313">Note that an element that contains a start and end tag with no content between the tags is not considered to be an empty element.</span></span> <span data-ttu-id="45002-314">Ha contenuto senza lunghezza.</span><span class="sxs-lookup"><span data-stu-id="45002-314">It has content with no length.</span></span> <span data-ttu-id="45002-315">Solo un elemento che contiene un tag di inizio e viene espresso come un elemento vuoto terminato, viene considerato come vuoto.</span><span class="sxs-lookup"><span data-stu-id="45002-315">Only an element that contains only a start tag, and is expressed as a terminated empty element, is considered to be empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-316">Nell'esempio seguente crea una serie di strutture ad albero XML e Mostra il valore di questa proprietà con ogni albero.</span><span class="sxs-lookup"><span data-stu-id="45002-316">The following example creates a variety of XML trees, and shows the value of this property with each tree.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root");  
Console.WriteLine(el1);  
Console.WriteLine(el1.IsEmpty);  
Console.WriteLine();  
XElement el2 = new XElement("Root", "content");  
Console.WriteLine(el2);  
Console.WriteLine(el2.IsEmpty);  
Console.WriteLine();  
XElement el3 = new XElement("Root", "");  
Console.WriteLine(el3);  
Console.WriteLine(el3.IsEmpty);  
Console.WriteLine();  
el3.ReplaceAll(null);  
Console.WriteLine(el3);  
Console.WriteLine(el3.IsEmpty);  
```  
  
```vb  
Dim el1 As XElement = <Root/>  
Console.WriteLine(el1)  
Console.WriteLine(el1.IsEmpty)  
Console.WriteLine()  
Dim el2 As XElement = <Root>content</Root>  
Console.WriteLine(el2)  
Console.WriteLine(el2.IsEmpty)  
Console.WriteLine()  
Dim el3 As XElement = <Root></Root>  
Console.WriteLine(el3)  
Console.WriteLine(el3.IsEmpty)  
Console.WriteLine()  
el3.ReplaceAll(Nothing)  
Console.WriteLine(el3)  
Console.WriteLine(el3.IsEmpty)  
```  
  
 <span data-ttu-id="45002-317">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-317">This example produces the following output:</span></span>  
  
```  
<Root />  
True  
  
<Root>content</Root>  
False  
  
<Root></Root>  
False  
  
<Root />  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LastAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XAttribute LastAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XAttribute LastAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.LastAttribute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastAttribute As XAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XAttribute ^ LastAttribute { System::Xml::Linq::XAttribute ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45002-318">Ottiene l'ultimo attributo di questo elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-318">Gets the last attribute of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45002-319">Oggetto <see cref="T:System.Xml.Linq.XAttribute" /> che contiene l'ultimo attributo dell'elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-319">An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the last attribute of this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-320">Gli attributi vengono archiviati nell'elemento nell'ordine in cui sono stati aggiunti all'elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-320">Attributes are stored in the element in the order that they were added to the element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-321">Nell'esempio seguente viene creato un albero XML con tre attributi.</span><span class="sxs-lookup"><span data-stu-id="45002-321">The following example creates an XML tree with three attributes.</span></span> <span data-ttu-id="45002-322">L'ultimo attributo viene quindi scritto come output.</span><span class="sxs-lookup"><span data-stu-id="45002-322">It then writes the last attribute as output.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
Console.WriteLine(xmlTree.LastAttribute);  
```  
  
```vb  
Dim xmlTree As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
Console.WriteLine(xmlTree.LastAttribute)  
```  
  
 <span data-ttu-id="45002-323">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-323">This example produces the following output:</span></span>  
  
```  
Att3="3"  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45002-324">Crea un nuovo oggetto <see cref="T:System.Xml.Linq.XElement" /> da un file specificato da un URI, da un oggetto <see cref="T:System.IO.TextReader" /> o da un oggetto <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-324">Creates a new <see cref="T:System.Xml.Linq.XElement" /> from a file specified by a URI, from an <see cref="T:System.IO.TextReader" />, or from an <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-325">È possibile utilizzare uno degli overload di questo metodo per caricare un <xref:System.Xml.Linq.XElement> da un file, un <xref:System.IO.TextReader>, o un <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-325">You can use one of the overloads of this method to load an <xref:System.Xml.Linq.XElement> from a file, a <xref:System.IO.TextReader>, or an <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="45002-326">Per creare un <xref:System.Xml.Linq.XElement> da una stringa che contiene il codice XML, utilizzare <xref:System.Xml.Linq.XElement.Parse%2A>.</span><span class="sxs-lookup"><span data-stu-id="45002-326">To create an <xref:System.Xml.Linq.XElement> from a string that contains XML, use <xref:System.Xml.Linq.XElement.Parse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XElement.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="45002-327">Flusso che contiene i dati XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-327">The stream that contains the XML data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-328">Crea una nuova istanza di <see cref="T:System.Xml.Linq.XElement" /> usando il flusso specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-328">Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-329">Oggetto <see cref="T:System.Xml.Linq.XElement" /> usato per leggere i dati contenuti nel flusso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-329">An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that is contained in the stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-330">Se si desidera controllare le opzioni di caricamento, utilizzare il <xref:System.Xml.Linq.XElement.Load%2A> overload che accetta <xref:System.Xml.Linq.LoadOptions> come parametro.</span><span class="sxs-lookup"><span data-stu-id="45002-330">If you want to control load options, use the <xref:System.Xml.Linq.XElement.Load%2A> overload that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span>  
  
 <span data-ttu-id="45002-331">LINQ alla funzionalità di caricamento del XML si basa su <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-331">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="45002-332">Pertanto, è possibile rilevare eventuali eccezioni generate dal <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload di metodi e <xref:System.Xml.XmlReader> metodi che leggono e analizzano il documento.</span><span class="sxs-lookup"><span data-stu-id="45002-332">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="45002-333">Se è necessario modificare <xref:System.Xml.XmlReaderSettings>, attenendosi alla procedura seguente:</span><span class="sxs-lookup"><span data-stu-id="45002-333">If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:</span></span>  
  
1.  <span data-ttu-id="45002-334">Creare un <xref:System.Xml.XmlReader> chiamando uno del <xref:System.Xml.XmlReader.Create%2A> overload che accettano <xref:System.Xml.XmlReaderSettings> come parametro.</span><span class="sxs-lookup"><span data-stu-id="45002-334">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="45002-335">Passare il <xref:System.Xml.XmlReader> a uno del <xref:System.Xml.Linq.XElement>del <xref:System.Xml.Linq.XElement.Load%2A> overload che accetta <xref:System.Xml.XmlReader> come parametro.</span><span class="sxs-lookup"><span data-stu-id="45002-335">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <span data-ttu-id="45002-336">Oggetto <see cref="T:System.IO.TextReader" /> che verrà letto per il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-336">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-337">Carica un oggetto <see cref="T:System.Xml.Linq.XElement" /> da <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-337">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-338">Oggetto <see cref="T:System.Xml.Linq.XElement" /> contenente il codice XML letto dall'oggetto <see cref="T:System.IO.TextReader" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-338">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-339">Questo metodo legge il XML non elaborato nella struttura ad albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-339">This method reads the raw XML into the XML tree.</span></span> <span data-ttu-id="45002-340">Ignora tutti gli spazi vuoti non significativi nel file.</span><span class="sxs-lookup"><span data-stu-id="45002-340">It discards all insignificant white space in the file.</span></span>  
  
 <span data-ttu-id="45002-341">LINQ alla funzionalità di caricamento del XML si basa su <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-341">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="45002-342">Pertanto, è possibile rilevare eventuali eccezioni generate dal <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload di metodi e <xref:System.Xml.XmlReader> metodi che leggono e analizzano il documento.</span><span class="sxs-lookup"><span data-stu-id="45002-342">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-343">Nell'esempio seguente viene caricato un elemento da un <xref:System.IO.StringReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-343">The following example loads an element from a <xref:System.IO.StringReader>.</span></span>  
  
```csharp  
TextReader sr = new StringReader("<Root><Child/></Root>");  
XElement xmlTree = XElement.Load(sr);  
sr.Close();  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim sr As TextReader = New StringReader("<Root><Child/></Root>")  
Dim xmlTree As XElement = XElement.Load(sr)  
sr.Close()  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="45002-344">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-344">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (string uri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(string uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::String ^ uri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uri">
          <span data-ttu-id="45002-345">Stringa URI che fa riferimento al file da caricare in un nuovo oggetto <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-345">A URI string referencing the file to load into a new <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-346">Carica un oggetto <see cref="T:System.Xml.Linq.XElement" /> da un file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-346">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-347">Oggetto <see cref="T:System.Xml.Linq.XElement" /> che include il contenuto del file specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-347">An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-348">Questo metodo legge il XML non elaborato nella struttura ad albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-348">This method reads the raw XML into the XML tree.</span></span> <span data-ttu-id="45002-349">Ignora tutti gli spazi vuoti non significativi nel file.</span><span class="sxs-lookup"><span data-stu-id="45002-349">It discards all insignificant white space in the file.</span></span>  
  
 <span data-ttu-id="45002-350">LINQ alla funzionalità di caricamento del XML si basa su <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-350">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="45002-351">Pertanto, è possibile rilevare eventuali eccezioni generate dal <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload di metodi e <xref:System.Xml.XmlReader> metodi che leggono e analizzano il documento.</span><span class="sxs-lookup"><span data-stu-id="45002-351">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-352">Nell'esempio seguente viene creato un albero XML viene salvato in un file e quindi utilizza questo metodo per caricare il <xref:System.Xml.Linq.XElement> dal file.</span><span class="sxs-lookup"><span data-stu-id="45002-352">The following example creates an XML tree, saves it to a file, and then uses this method to load the <xref:System.Xml.Linq.XElement> from the file.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child", "content")  
);  
xmlTree1.Save("Tree.xml");  
  
XElement xmlTree2 = XElement.Load("Tree.xml");  
Console.WriteLine(xmlTree2.Name);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child>Content</Child>  
        </Root>  
xmlTree1.Save("Tree.xml")  
  
Dim xmlTree2 As XElement = XElement.Load("Tree.xml")  
Console.WriteLine(xmlTree2.Name)  
```  
  
 <span data-ttu-id="45002-353">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-353">This example produces the following output:</span></span>  
  
```  
Root  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.Linq.XDocument.Load" />
        <altmember cref="Overload:System.Xml.Linq.XElement.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="45002-354">Oggetto <see cref="T:System.Xml.XmlReader" /> che verrà letto per il contenuto dell'oggetto <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-354">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-355">Carica un oggetto <see cref="T:System.Xml.Linq.XElement" /> da <see cref="T:System.Xml.XmlReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-355">Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-356">Oggetto <see cref="T:System.Xml.Linq.XElement" /> contenente il codice XML letto dall'oggetto <see cref="T:System.Xml.XmlReader" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-356">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-357">Creando un <xref:System.Xml.XmlNodeReader> da un documento DOM e viene quindi utilizzato il <xref:System.Xml.XmlNodeReader> per creare un <xref:System.Xml.Linq.XElement>, questo metodo può essere utilizzato per creare una copia di un documento DOM in un albero LINQ to XML.</span><span class="sxs-lookup"><span data-stu-id="45002-357">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="45002-358">LINQ alla funzionalità di caricamento del XML si basa su <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-358">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="45002-359">Pertanto, è possibile rilevare eventuali eccezioni generate dal <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload di metodi e <xref:System.Xml.XmlReader> metodi che leggono e analizzano il documento.</span><span class="sxs-lookup"><span data-stu-id="45002-359">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-360">Nell'esempio seguente viene creato un documento DOM, un <xref:System.Xml.XmlNodeReader> dal documento DOM, crea un'istanza di una struttura ad albero dal lettore.</span><span class="sxs-lookup"><span data-stu-id="45002-360">The following example creates a DOM document, creates an <xref:System.Xml.XmlNodeReader> from the DOM document, instantiates a tree from the reader.</span></span> <span data-ttu-id="45002-361">Questo codice copia un documento DOM effettivamente un LINQ struttura ad albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-361">This code effectively copies a DOM document into a LINQ to XML tree.</span></span>  
  
```csharp  
// Create a DOM document with some content.  
XmlDocument doc = new XmlDocument();  
XmlElement child = doc.CreateElement("Child");  
child.InnerText = "child contents";  
XmlElement root = doc.CreateElement("Root");  
root.AppendChild(child);  
doc.AppendChild(root);  
  
// Create a reader and move to the content.  
using (XmlNodeReader nodeReader = new XmlNodeReader(doc)) {  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XElement xRoot = XElement.Load(nodeReader);  
    Console.WriteLine(xRoot);  
}  
```  
  
```vb  
' Create a DOM document with some content.  
Dim doc As XmlDocument = New XmlDocument()  
Dim child As XmlElement = doc.CreateElement("Child")  
child.InnerText = "child contents"  
Dim root As XmlElement = doc.CreateElement("Root")  
root.AppendChild(child)  
doc.AppendChild(root)  
  
' Create a reader and move to the content.  
Using nodeReader = New XmlNodeReader(doc)  
    ' the reader must be in the Interactive state in order to  
    ' Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XElement = XElement.Load(nodeReader)  
    Console.WriteLine(xRoot)  
End Using  
```  
  
 <span data-ttu-id="45002-362">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-362">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>child contents</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.Stream stream, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="45002-363">Flusso contenente i dati XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-363">The stream containing the XML data.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="45002-364">Oggetto <see cref="T:System.Xml.Linq.LoadOptions" /> che specifica se caricare l'URI di base e le informazioni sulla riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-364">A <see cref="T:System.Xml.Linq.LoadOptions" /> object that specifies whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-365">Crea una nuova istanza di <see cref="T:System.Xml.Linq.XElement" /> usando il flusso specificato, conservando facoltativamente lo spazio vuoto, impostando l'URI di base e mantenendo le informazioni sulla riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-365">Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-366">Oggetto <see cref="T:System.Xml.Linq.XElement" /> usato per leggere i dati contenuti nel flusso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-366">An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that the stream contains.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-367">LINQ alla funzionalità di caricamento del XML si basa su <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-367">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="45002-368">Pertanto, è possibile rilevare eventuali eccezioni generate dal <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload di metodi e <xref:System.Xml.XmlReader> metodi che leggono e analizzano il documento.</span><span class="sxs-lookup"><span data-stu-id="45002-368">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
 <span data-ttu-id="45002-369">Se è necessario modificare <xref:System.Xml.XmlReaderSettings>, attenendosi alla procedura seguente:</span><span class="sxs-lookup"><span data-stu-id="45002-369">If you have to modify <xref:System.Xml.XmlReaderSettings>, following these steps:</span></span>  
  
1.  <span data-ttu-id="45002-370">Creare un <xref:System.Xml.XmlReader> chiamando uno del <xref:System.Xml.XmlReader.Create%2A> overload che accettano <xref:System.Xml.XmlReaderSettings> come parametro.</span><span class="sxs-lookup"><span data-stu-id="45002-370">Create an <xref:System.Xml.XmlReader> by calling one of the <xref:System.Xml.XmlReader.Create%2A> overloads that take <xref:System.Xml.XmlReaderSettings> as a parameter.</span></span>  
  
2.  <span data-ttu-id="45002-371">Passare il <xref:System.Xml.XmlReader> a uno del <xref:System.Xml.Linq.XElement>del <xref:System.Xml.Linq.XElement.Load%2A> overload che accetta <xref:System.Xml.XmlReader> come parametro.</span><span class="sxs-lookup"><span data-stu-id="45002-371">Pass the <xref:System.Xml.XmlReader> to one of the <xref:System.Xml.Linq.XElement>'s <xref:System.Xml.Linq.XElement.Load%2A> overloads that takes <xref:System.Xml.XmlReader> as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="textReader">
          <span data-ttu-id="45002-372">Oggetto <see cref="T:System.IO.TextReader" /> che verrà letto per il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-372">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="45002-373">Oggetto <see cref="T:System.Xml.Linq.LoadOptions" /> che specifica il comportamento dello spazio vuoto e se caricare l'URI di base e le informazioni sulla riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-373">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-374">Carica <see cref="T:System.Xml.Linq.XElement" /> da un oggetto <see cref="T:System.IO.TextReader" />, facoltativamente preservando lo spazio e mantenendo le informazioni sulla riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-374">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-375">Oggetto <see cref="T:System.Xml.Linq.XElement" /> contenente il codice XML letto dall'oggetto <see cref="T:System.IO.TextReader" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-375">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-376">Se l'origine XML rientrato, l'impostazione di <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` fa sì che il lettore leggere tutti gli spazi vuoti nel documento XML di origine.</span><span class="sxs-lookup"><span data-stu-id="45002-376">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="45002-377">Nodi di tipo <xref:System.Xml.Linq.XText> vengono creati per spazi vuoti significativi e significativo.</span><span class="sxs-lookup"><span data-stu-id="45002-377">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="45002-378">Se l'origine XML rientrato, se non viene impostata la <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` fa sì che il lettore ignorare tutti gli spazi vuoti non significativi nel codice XML di origine.</span><span class="sxs-lookup"><span data-stu-id="45002-378">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="45002-379">Struttura ad albero XML viene creato senza nodi di testo per gli spazi vuoti non significativi.</span><span class="sxs-lookup"><span data-stu-id="45002-379">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="45002-380">Se l'origine XML non è rientrato, l'impostazione di <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="45002-380">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="45002-381">Gli spazi vuoti significativi viene comunque mantenuto e non sono presenti intervalli di spazi vuoti non significativi che potrebbero comportare la creazione di più nodi di testo di spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="45002-381">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="45002-382">Per ulteriori informazioni, vedere [conservare lo spazio vuoto durante il caricamento o l'analisi XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [conservare gli spazi vuoti durante la serializzazione](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="45002-382">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="45002-383">Utilizzare <xref:System.Xml.Linq.XElement.Parse%2A> per creare un <xref:System.Xml.Linq.XElement> da una stringa che contiene XML.</span><span class="sxs-lookup"><span data-stu-id="45002-383">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="45002-384">Impostazione <xref:System.Xml.Linq.LoadOptions.SetBaseUri> avrà alcun effetto durante il caricamento da un <xref:System.IO.TextReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-384">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when loading from a <xref:System.IO.TextReader>.</span></span>  
  
 <span data-ttu-id="45002-385">Si verifica una riduzione delle prestazioni se imposta la <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span><span class="sxs-lookup"><span data-stu-id="45002-385">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="45002-386">Le informazioni sulla riga è accurati immediatamente dopo il caricamento del documento XML.</span><span class="sxs-lookup"><span data-stu-id="45002-386">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="45002-387">Se si modifica la struttura ad albero XML dopo il caricamento del documento, le informazioni sulla riga potrebbero risultare inutili.</span><span class="sxs-lookup"><span data-stu-id="45002-387">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="45002-388">LINQ alla funzionalità di caricamento del XML si basa su <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-388">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="45002-389">Pertanto, è possibile rilevare eventuali eccezioni generate dal <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload di metodi e <xref:System.Xml.XmlReader> metodi che leggono e analizzano il documento.</span><span class="sxs-lookup"><span data-stu-id="45002-389">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-390">Nell'esempio seguente viene caricato un <xref:System.Xml.Linq.XElement> da un <xref:System.IO.StringReader> in due modi diversi: conservando lo spazio vuoto e non il mantenimento degli spazi.</span><span class="sxs-lookup"><span data-stu-id="45002-390">The following example loads an <xref:System.Xml.Linq.XElement> from a <xref:System.IO.StringReader> in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="45002-391">Viene quindi utilizzata una query per determinare il numero di nodi con spazi vuoti nell'albero XML risulta.</span><span class="sxs-lookup"><span data-stu-id="45002-391">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
TextReader sr;  
int whiteSpaceNodes;  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XElement xmlTree1 = XElement.Load(sr, LoadOptions.None);  
sr.Close();  
whiteSpaceNodes = xmlTree1  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
sr = new StringReader("<Root> <Child> </Child> </Root>");  
XElement xmlTree2 = XElement.Load(sr, LoadOptions.PreserveWhitespace);  
sr.Close();  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim sr As TextReader  
Dim whiteSpaceNodes As Integer  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree1 As XElement = XElement.Load(sr, LoadOptions.None)  
sr.Close()  
whiteSpaceNodes = xmlTree1 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
sr = New StringReader("<Root> <Child> </Child> </Root>")  
Dim xmlTree2 As XElement = XElement.Load(sr, LoadOptions.PreserveWhitespace)  
sr.Close()  
whiteSpaceNodes = xmlTree2 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="45002-392">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-392">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="45002-393">Nell'esempio seguente carica le informazioni sulla riga durante il caricamento dal <xref:System.IO.TextReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-393">The following example loads the line information as it loads from the <xref:System.IO.TextReader>.</span></span> <span data-ttu-id="45002-394">Stampa quindi le informazioni sulla riga.</span><span class="sxs-lookup"><span data-stu-id="45002-394">It then prints the line information.</span></span>  
  
```csharp  
TextReader sr = new StringReader(  
@"<Root>  
  <Child>  
    <GrandChild1/>  
    <GrandChild2/>  
  </Child>  
</Root>");  
XElement po = XElement.Load(sr,  
    LoadOptions.SetLineInfo);  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim sr As TextReader = New StringReader( _  
    "<Root>" & Environment.NewLine & _  
    "  <Child>" & Environment.NewLine & _  
    "    <GrandChild1/>" & Environment.NewLine & _  
    "    <GrandChild2/>" & Environment.NewLine & _  
    "  </Child>" & Environment.NewLine & _  
    "</Root>")  
Dim po As XElement = XElement.Load(sr, LoadOptions.SetLineInfo)  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
        (DirectCast(e, IXmlLineInfo)).LinePosition)  
Next  
```  
  
 <span data-ttu-id="45002-395">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-395">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    4  
    GrandChild1     3    6  
    GrandChild2     4    6  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (string uri, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(string uri, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (uri As String, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::String ^ uri, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="uri">
          <span data-ttu-id="45002-396">Stringa URI che fa riferimento al file da caricare in <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-396">A URI string referencing the file to load into an <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="45002-397">Oggetto <see cref="T:System.Xml.Linq.LoadOptions" /> che specifica il comportamento dello spazio vuoto e se caricare l'URI di base e le informazioni sulla riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-397">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-398">Carica <see cref="T:System.Xml.Linq.XElement" /> da un file, facoltativamente preservando lo spazio vuoto, impostando l'URI di base e mantenendo le informazioni sulla riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-398">Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-399">Oggetto <see cref="T:System.Xml.Linq.XElement" /> che include il contenuto del file specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-399">An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-400">Se l'origine XML rientrato, l'impostazione di <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` fa sì che il lettore leggere tutti gli spazi vuoti nel documento XML di origine.</span><span class="sxs-lookup"><span data-stu-id="45002-400">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="45002-401">Nodi di tipo <xref:System.Xml.Linq.XText> vengono creati per spazi vuoti significativi e significativo.</span><span class="sxs-lookup"><span data-stu-id="45002-401">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="45002-402">Se l'origine XML rientrato, se non viene impostata la <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` fa sì che il lettore ignorare tutti gli spazi vuoti non significativi nel codice XML di origine.</span><span class="sxs-lookup"><span data-stu-id="45002-402">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="45002-403">Struttura ad albero XML viene creato senza nodi di testo per gli spazi vuoti non significativi.</span><span class="sxs-lookup"><span data-stu-id="45002-403">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="45002-404">Se l'origine XML non è rientrato, l'impostazione di <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="45002-404">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="45002-405">Gli spazi vuoti significativi viene comunque mantenuto e non sono presenti intervalli di spazi vuoti non significativi che potrebbero comportare la creazione di più nodi di testo di spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="45002-405">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="45002-406">Per ulteriori informazioni, vedere [conservare lo spazio vuoto durante il caricamento o l'analisi XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [conservare gli spazi vuoti durante la serializzazione](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="45002-406">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="45002-407">Utilizzare <xref:System.Xml.Linq.XElement.Parse%2A> per creare un <xref:System.Xml.Linq.XElement> da una stringa che contiene XML.</span><span class="sxs-lookup"><span data-stu-id="45002-407">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="45002-408">Si verifica una riduzione delle prestazioni se imposta la <xref:System.Xml.Linq.LoadOptions.SetBaseUri> e <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span><span class="sxs-lookup"><span data-stu-id="45002-408">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetBaseUri> and the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flags.</span></span>  
  
 <span data-ttu-id="45002-409">L'URI di base e le informazioni sulla riga sono accurate immediatamente dopo il caricamento del documento XML.</span><span class="sxs-lookup"><span data-stu-id="45002-409">The base URI and the line information are accurate immediately after loading the XML document.</span></span> <span data-ttu-id="45002-410">Se si modifica la struttura ad albero XML dopo il caricamento del documento, le informazioni di riga e l'URI di base potrebbero risultare inutili.</span><span class="sxs-lookup"><span data-stu-id="45002-410">If you modify the XML tree after loading the document, the base URI and line information may become meaningless.</span></span>  
  
 <span data-ttu-id="45002-411">LINQ alla funzionalità di caricamento del XML si basa su <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-411">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="45002-412">Pertanto, è possibile rilevare eventuali eccezioni generate dal <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload di metodi e <xref:System.Xml.XmlReader> metodi che leggono e analizzano il documento.</span><span class="sxs-lookup"><span data-stu-id="45002-412">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-413">Nell'esempio seguente viene caricato un <xref:System.Xml.Linq.XElement> da un file in due modi diversi: conservando lo spazio vuoto e non il mantenimento degli spazi.</span><span class="sxs-lookup"><span data-stu-id="45002-413">The following example loads an <xref:System.Xml.Linq.XElement> from a file in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="45002-414">Viene quindi utilizzata una query per determinare il numero di nodi con spazi vuoti nell'albero XML risulta.</span><span class="sxs-lookup"><span data-stu-id="45002-414">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
XElement xmlTree1 = XElement.Parse("<Root> <Child>  </Child> </Root>", LoadOptions.PreserveWhitespace);  
xmlTree1.Save("Tree.xml");  
Console.WriteLine(xmlTree1);  
  
int whiteSpaceNodes;  
XElement xmlTree2 = XElement.Load("Tree.xml",  
    LoadOptions.None);  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes);  
  
XElement xmlTree3 = XElement.Load("Tree.xml",  
    LoadOptions.PreserveWhitespace);  
whiteSpaceNodes = xmlTree3  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes);  
```  
  
```vb  
Dim xmlTree1 As XElement = XElement.Parse("<Root> <Child>  </Child> </Root>", LoadOptions.PreserveWhitespace)  
xmlTree1.Save("Tree.xml")  
Console.WriteLine(xmlTree1)  
  
Dim whiteSpaceNodes As Integer  
Dim xmlTree2 As XElement = XElement.Load("Tree.xml", LoadOptions.None)  
whiteSpaceNodes = xmlTree2 _  
                  .DescendantNodesAndSelf() _  
                  .OfType(Of XText)() _  
                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
                  .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
Dim xmlTree3 As XElement = XElement.Load("Tree.xml", LoadOptions.PreserveWhitespace)  
whiteSpaceNodes = xmlTree3 _  
                  .DescendantNodesAndSelf() _  
                  .OfType(Of XText)() _  
                  .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
                  .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="45002-415">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-415">This example produces the following output:</span></span>  
  
```  
<Root> <Child>  </Child> </Root>  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="45002-416">Nell'esempio seguente carica le informazioni di riga e l'URI di base durante il caricamento del file.</span><span class="sxs-lookup"><span data-stu-id="45002-416">The following example loads the base URI and line information as it loads the file.</span></span> <span data-ttu-id="45002-417">Stampa quindi l'URI di base e le informazioni sulla riga.</span><span class="sxs-lookup"><span data-stu-id="45002-417">It then prints the base URI and the line information.</span></span>  
  
 <span data-ttu-id="45002-418">In questo esempio viene utilizzato il seguente file di risorse: [File XML di esempio: tipico ordine di acquisto (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).</span><span class="sxs-lookup"><span data-stu-id="45002-418">This example uses the following resource file: [Sample XML File: Typical Purchase Order (LINQ to XML)](http://msdn.microsoft.com/library/0606c09f-6e43-4f8d-95c8-e8e2e08d2348).</span></span>  
  
```csharp  
XElement po = XElement.Load("PurchaseOrder.xml",  
    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  
string[] splitUri = po.BaseUri.Split('/');  
Console.WriteLine("BaseUri: {0}", splitUri[splitUri.Length - 1]);  
Console.WriteLine();  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in po.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim po As XElement = XElement.Load("PurchaseOrder.xml", LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  
Dim splitUri() As String = po.BaseUri.Split("/")  
Console.WriteLine("BaseUri: {0}", splitUri(splitUri.Length - 1))  
Console.WriteLine()  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In po.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString()).PadRight(20), _  
        (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
        (DirectCast(e, IXmlLineInfo)).LinePosition)  
Next  
```  
  
 <span data-ttu-id="45002-419">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-419">This example produces the following output:</span></span>  
  
```  
BaseUri: PurchaseOrder.xml  
  
Element Name        Line Position  
------------        ---- --------  
PurchaseOrder       2    2  
  Address           3    4  
    Name            4    6  
    Street          5    6  
    City            6    6  
    State           7    6  
    Zip             8    6  
    Country         9    6  
  Address           11   4  
    Name            12   6  
    Street          13   6  
    City            14   6  
    State           15   6  
    Zip             16   6  
    Country         17   6  
  DeliveryNotes     19   4  
  Items             20   4  
    Item            21   6  
      ProductName   22   8  
      Quantity      23   8  
      USPrice       24   8  
      Comment       25   8  
    Item            27   6  
      ProductName   28   8  
      Quantity      29   8  
      USPrice       30   8  
      ShipDate      31   8  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Load (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Load(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Load(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="45002-420">Oggetto <see cref="T:System.Xml.XmlReader" /> che verrà letto per il contenuto dell'oggetto <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-420">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="45002-421">Oggetto <see cref="T:System.Xml.Linq.LoadOptions" /> che specifica il comportamento dello spazio vuoto e se caricare l'URI di base e le informazioni sulla riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-421">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-422">Carica <see cref="T:System.Xml.Linq.XElement" /> da un oggetto <see cref="T:System.Xml.XmlReader" />, facoltativamente preservando lo spazio, impostando l'URI di base e mantenendo le informazioni sulla riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-422">Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />, optionally preserving white space, setting the base URI, and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-423">Oggetto <see cref="T:System.Xml.Linq.XElement" /> contenente il codice XML letto dall'oggetto <see cref="T:System.Xml.XmlReader" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-423">An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-424">Creando un <xref:System.Xml.XmlNodeReader> da un documento DOM e viene quindi utilizzato il <xref:System.Xml.XmlNodeReader> per creare un <xref:System.Xml.Linq.XElement>, questo metodo può essere utilizzato per creare una copia di un documento DOM in un albero LINQ to XML.</span><span class="sxs-lookup"><span data-stu-id="45002-424">By creating an <xref:System.Xml.XmlNodeReader> from a DOM document, and then using the <xref:System.Xml.XmlNodeReader> to create an <xref:System.Xml.Linq.XElement>, this method can be used to create a copy of a DOM document in a LINQ to XML tree.</span></span>  
  
 <span data-ttu-id="45002-425">Utilizzare <xref:System.Xml.Linq.XElement.Parse%2A> per creare un <xref:System.Xml.Linq.XElement> da una stringa che contiene XML.</span><span class="sxs-lookup"><span data-stu-id="45002-425">Use <xref:System.Xml.Linq.XElement.Parse%2A> to create an <xref:System.Xml.Linq.XElement> from a string that contains XML.</span></span>  
  
 <span data-ttu-id="45002-426">Impostazione <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> non valido durante il caricamento da un <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-426">Setting <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is not valid when loading from a <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="45002-427">Il <xref:System.Xml.XmlReader> verrà configurato per uno spazio vuoto di lettura o non.</span><span class="sxs-lookup"><span data-stu-id="45002-427">The <xref:System.Xml.XmlReader> will be configured to either read whitespace or not.</span></span> <span data-ttu-id="45002-428">L'albero LINQ to XML verrà popolato con i nodi spazi vuoti che dal lettore.</span><span class="sxs-lookup"><span data-stu-id="45002-428">The LINQ to XML tree will be populated with the whitespace nodes that the reader surfaces.</span></span> <span data-ttu-id="45002-429">Questo sarà il comportamento indipendentemente dal fatto che <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> o non è impostato.</span><span class="sxs-lookup"><span data-stu-id="45002-429">This will be the behavior regardless of whether <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> is set or not.</span></span>  
  
 <span data-ttu-id="45002-430">Il <xref:System.Xml.XmlReader> può avere un URI di base valido o non.</span><span class="sxs-lookup"><span data-stu-id="45002-430">The <xref:System.Xml.XmlReader> may have a valid base URI or not.</span></span> <span data-ttu-id="45002-431">Se si imposta <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, la base URI verrà impostato nella struttura ad albero XML dall'URI di base che viene segnalato dal <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-431">If you set <xref:System.Xml.Linq.LoadOptions.SetBaseUri>, the base URI will be set in the XML tree from the base URI that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="45002-432">Il <xref:System.Xml.XmlReader> può avere un informazioni sulla riga valide o non.</span><span class="sxs-lookup"><span data-stu-id="45002-432">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="45002-433">Se si imposta <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, le informazioni sulla riga verrà impostati nella struttura ad albero XML dalle informazioni sulla riga che viene segnalati dal <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-433">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="45002-434">Si verifica una riduzione delle prestazioni se imposta la <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span><span class="sxs-lookup"><span data-stu-id="45002-434">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="45002-435">Le informazioni sulla riga è accurati immediatamente dopo il caricamento del documento XML.</span><span class="sxs-lookup"><span data-stu-id="45002-435">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="45002-436">Se si modifica la struttura ad albero XML dopo il caricamento del documento, le informazioni sulla riga potrebbero risultare inutili.</span><span class="sxs-lookup"><span data-stu-id="45002-436">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="45002-437">LINQ alla funzionalità di caricamento del XML si basa su <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-437">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="45002-438">Pertanto, è possibile rilevare eventuali eccezioni generate dal <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload di metodi e <xref:System.Xml.XmlReader> metodi che leggono e analizzano il documento.</span><span class="sxs-lookup"><span data-stu-id="45002-438">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-439">Nell'esempio seguente carica le informazioni sulla riga che viene caricato dal <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-439">The following example loads the line information that it loads from the <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="45002-440">Stampa quindi le informazioni sulla riga.</span><span class="sxs-lookup"><span data-stu-id="45002-440">It then prints the line information.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
// Create a reader and move to the content.  
using (XmlReader nodeReader = XmlReader.Create(new StringReader(markup)))  
{  
    // the reader must be in the Interactive state in order to  
    // Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent();  
  
    XElement xRoot = XElement.Load(nodeReader, LoadOptions.SetLineInfo);  
    Console.WriteLine("{0}{1}{2}",  
        "Element Name".PadRight(20),  
        "Line".PadRight(5),  
        "Position");  
    Console.WriteLine("{0}{1}{2}",  
        "------------".PadRight(20),  
        "----".PadRight(5),  
        "--------");  
    foreach (XElement e in xRoot.DescendantsAndSelf())  
        Console.WriteLine("{0}{1}{2}",  
            ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
            ((IXmlLineInfo)e).LinePosition);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<Root>" & Environment.NewLine & _  
    "    <Child>" & Environment.NewLine & _  
    "        <GrandChild/>" & Environment.NewLine & _  
    "    </Child>" & Environment.NewLine & _  
    "</Root>"  
  
' Create a reader and move to the content.  
Using nodeReader As XmlReader = XmlReader.Create(New StringReader(markup))  
  
    ' the reader must be in the Interactive state in order to  
    ' Create a LINQ to XML tree from it.  
    nodeReader.MoveToContent()  
  
    Dim xRoot As XElement = XElement.Load(nodeReader, LoadOptions.SetLineInfo)  
    Console.WriteLine("{0}{1}{2}", _  
        "Element Name".PadRight(20), _  
        "Line".PadRight(5), _  
        "Position")  
    Console.WriteLine("{0}{1}{2}", _  
        "------------".PadRight(20), _  
        "----".PadRight(5), _  
        "--------")  
    For Each e As XElement In xRoot.DescendantsAndSelf()  
        Console.WriteLine("{0}{1}{2}", _  
            ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
            (DirectCast(e, IXmlLineInfo)).LineNumber.ToString().PadRight(5), _  
            (DirectCast(e, IXmlLineInfo)).LinePosition)  
    Next  
End Using  
```  
  
 <span data-ttu-id="45002-441">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-441">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.IO.Stream stream, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::IO::Stream ^ stream, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.IO.TextReader textReader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.IO.TextReader textReader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::IO::TextReader ^ textReader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textReader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt; LoadAsync (System.Xml.XmlReader reader, System.Xml.Linq.LoadOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Xml.Linq.XElement&gt; LoadAsync(class System.Xml.XmlReader reader, valuetype System.Xml.Linq.LoadOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Xml::Linq::XElement ^&gt; ^ LoadAsync(System::Xml::XmlReader ^ reader, System::Xml::Linq::LoadOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.Linq.XElement&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XName Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XName ^ Name { System::Xml::Linq::XName ^ get(); void set(System::Xml::Linq::XName ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45002-442">Ottiene o imposta il nome di questo elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-442">Gets or sets the name of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45002-443">Oggetto <see cref="T:System.Xml.Linq.XName" /> che contiene il nome dell'elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-443">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-444">Impostazione di questa proprietà genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="45002-444">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-445">Nell'esempio seguente viene utilizzata questa proprietà per determinare il nome di un elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-445">The following example uses this property to determine the name of an element.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root", "content");  
Console.WriteLine(el1.Name);  
  
XNamespace ns = "http://www.adventure-works.com";  
XElement el2 = new XElement(ns + "Root", "content");  
Console.WriteLine(el2.Name);  
Console.WriteLine(el2.Name.Namespace);  
Console.WriteLine(el2.Name.LocalName);  
el2.Name = ns + "NewName";  
Console.WriteLine(el2.Name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el1 As XElement = <Root>content</Root>  
        Console.WriteLine(el1.Name)  
  
        Dim el2 As XElement = <aw:Root>content</aw:Root>  
        Console.WriteLine(el2.Name)  
        Console.WriteLine(el2.Name.Namespace)  
        Console.WriteLine(el2.Name.LocalName)  
        Dim aw as XNamespace = GetXmlNamespace(aw)  
        el2.Name = aw + "NewName"  
        Console.WriteLine(el2.Name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="45002-446">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-446">This example produces the following output:</span></span>  
  
```  
Root  
{http://www.adventure-works.com}Root  
http://www.adventure-works.com  
Root  
{http://www.adventure-works.com}NewName  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45002-447">Ottiene il tipo di nodo per questo nodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-447">Gets the node type for this node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45002-448">Tipo di nodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-448">The node type.</span>
          </span>
          <span data-ttu-id="45002-449">Per gli oggetti <see cref="T:System.Xml.Linq.XElement" />, questo valore è <see cref="F:System.Xml.XmlNodeType.Element" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-449">For <see cref="T:System.Xml.Linq.XElement" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Element" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-450">Poiché tutte le classi che derivano da <xref:System.Xml.Linq.XObject> contengono un <xref:System.Xml.Linq.XObject.NodeType%2A> proprietà, è possibile scrivere il codice che opera su insiemi di una sottoclasse concreta di <xref:System.Xml.Linq.XObject>.</span><span class="sxs-lookup"><span data-stu-id="45002-450">Because all classes that derive from <xref:System.Xml.Linq.XObject> contain a <xref:System.Xml.Linq.XObject.NodeType%2A> property, you can write code that operates on collections of concrete subclass of <xref:System.Xml.Linq.XObject>.</span></span> <span data-ttu-id="45002-451">Quindi è possibile testare il codice per il tipo di nodo di ogni nodo nella raccolta.</span><span class="sxs-lookup"><span data-stu-id="45002-451">Your code can then test for the node type of each node in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-452">Nell'esempio seguente utilizza questa proprietà per visualizzare il tipo di nodo di un elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-452">The following example uses this property to print the node type of an element.</span></span>  
  
```csharp  
XElement el1 = new XElement("Root", "content");  
Console.WriteLine(el1.NodeType);  
Console.WriteLine();  
```  
  
```vb  
Dim el1 As XElement = <Root>content</Root>  
Console.WriteLine(el1.NodeType.ToString())  
Console.WriteLine()  
```  
  
 <span data-ttu-id="45002-453">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-453">This example produces the following output:</span></span>  
  
```  
Element  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator bool (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator bool(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-454">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-454">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Boolean" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-455">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-455">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Boolean" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-456">Oggetto <see cref="T:System.Boolean" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-456">A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-457">Durante la conversione in <xref:System.Boolean> da un attributo o elemento, i valori consentiti sono "0", "1" e qualsiasi stringa che produce "true" o "false" dopo la rimozione e la conversione in lettere minuscole.</span><span class="sxs-lookup"><span data-stu-id="45002-457">When converting to <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>
  
## Examples  
 <span data-ttu-id="45002-458">Nell'esempio seguente crea alcuni elementi con valori booleani.</span><span class="sxs-lookup"><span data-stu-id="45002-458">The following example creates some elements with boolean values.</span></span> <span data-ttu-id="45002-459">Viene quindi eseguito il cast a <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="45002-459">It then casts them to <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("BoolValue1", true),  
    new XElement("BoolValue2", false)  
);  
bool bool1 = (bool)root.Element("BoolValue1");  
bool bool2 = (bool)root.Element("BoolValue2");  
Console.WriteLine("(bool)BoolValue1={0}", bool1);  
Console.WriteLine("(bool)BoolValue2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <BoolValue1>true</BoolValue1>  
            <BoolValue2>false</BoolValue2>  
        </Root>  
Dim bool1 As Boolean = CBool(root.Element("BoolValue1"))  
Dim bool2 As Boolean = CBool(root.Element("BoolValue2"))  
Console.WriteLine("(bool)BoolValue1={0}", bool1)  
Console.WriteLine("(bool)BoolValue2={0}", bool2)  
```  
  
 <span data-ttu-id="45002-460">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-460">This example produces the following output:</span></span>  
  
```  
(bool)BoolValue1=True  
(bool)BoolValue2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-461">L'elemento non contiene un valore <see cref="T:System.Boolean" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-461">The element does not contain a valid <see cref="T:System.Boolean" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45002-462">Il valore del parametro <paramref name="element" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-462">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTime (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTime(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-463">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.DateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-463">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTime" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-464">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.DateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-464">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.DateTime" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-465">Oggetto <see cref="T:System.DateTime" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-465">A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-466">Lo spazio dei valori di un attributo o elemento che contiene il contenuto di data e ora è strettamente correlato a date e ore descritte nello standard ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="45002-466">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="45002-467">Quando si crea un attributo o elemento che contiene il contenuto di data e ora, i valori di attributo o elemento vengono formattati in base alla specifica W3C.</span><span class="sxs-lookup"><span data-stu-id="45002-467">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="45002-468">Vedere la specifica W3C per altri dettagli.</span><span class="sxs-lookup"><span data-stu-id="45002-468">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="45002-469">Comportamento è lax quando si esegue il cast a un <xref:System.DateTime> da un attributo o elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-469">Behavior is lax when casting to a <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="45002-470">Anche se il valore di attributo o elemento non è formattato esattamente secondo la specifica W3C, il valore viene convertito in modo appropriato per un <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="45002-470">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="45002-471">Questo operatore di conversione utilizza <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> per la conversione da un <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="45002-471">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>

## Examples  
 <span data-ttu-id="45002-472">Nell'esempio seguente viene creato un elemento con contenuto di data e ora.</span><span class="sxs-lookup"><span data-stu-id="45002-472">The following example creates an element with date and time content.</span></span> <span data-ttu-id="45002-473">Viene quindi eseguito il cast a <xref:System.DateTime> per recuperare il valore.</span><span class="sxs-lookup"><span data-stu-id="45002-473">It then casts it to <xref:System.DateTime> to retrieve the value.</span></span>  
  
```csharp  
// Behavior is strict when formatting an XML element or attribute from a DateTime,  
// but behavior is lax when casting to a DateTime from an element or attribute.  
XElement root = new XElement("Root", new DateTime(2006, 10, 6, 12, 30, 0));  
Console.WriteLine(root);  
  
// Cast from a strictly formatted XML element.  
DateTime dt = (DateTime)root;  
Console.WriteLine("dt={0}", dt);  
Console.WriteLine("-----");  
  
// If root is formatted in some different way:  
XElement dtElement = new XElement("OrderDate", "October 6, 2006");  
Console.WriteLine(dtElement);  
DateTime orderDate = (DateTime)dtElement;  
Console.WriteLine("orderDate={0:d}", orderDate);  
```  
  
```vb  
' Behavior is strict when formatting an XML element or attribute from a DateTime,  
' but behavior is lax when casting to a DateTime from an element or attribute.  
Dim root As XElement = <Root><%= New DateTime(2006, 10, 6, 12, 30, 0) %></Root>  
Console.WriteLine(root)  
  
' Cast from a strictly formatted XML element.  
Dim dt As DateTime = CType(root, DateTime)  
Console.WriteLine("dt={0}", dt)  
Console.WriteLine("-----")  
  
' If root is formatted in some different way:  
Dim dtElement As XElement = <OrderDate>October 6, 2006</OrderDate>  
Console.WriteLine(dtElement)  
Dim orderDate As DateTime = CType(dtElement, DateTime)  
Console.WriteLine("orderDate={0:d}", orderDate)  
```  
  
 <span data-ttu-id="45002-474">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-474">This example produces the following output:</span></span>  
  
```  
<Root>2006-10-06T12:30:00</Root>  
dt=10/6/2006 12:30:00 PM  
-----  
<OrderDate>October 6, 2006</OrderDate>  
orderDate=10/6/2006  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-475">L'elemento non contiene un valore <see cref="T:System.DateTime" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-475">The element does not contain a valid <see cref="T:System.DateTime" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45002-476">Il valore del parametro <paramref name="element" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-476">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator DateTimeOffset (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator DateTimeOffset(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-477">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.DateTimeOffset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-477">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTimeOffset" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-478">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XAttribute" /> a un oggetto <see cref="T:System.DateTimeOffset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-478">Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-479">Oggetto <see cref="T:System.DateTimeOffset" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-479">A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-480">Questo operatore di conversione viene utilizzata la <xref:System.Xml.XmlConvert> classe per eseguire la conversione.</span><span class="sxs-lookup"><span data-stu-id="45002-480">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>  
  
## Examples  
 <span data-ttu-id="45002-481">Nell'esempio seguente viene creato un elemento con contenuto di data e ora.</span><span class="sxs-lookup"><span data-stu-id="45002-481">The following example creates an element with date and time content.</span></span> <span data-ttu-id="45002-482">Viene quindi eseguito il cast a <xref:System.DateTimeOffset> per recuperare il valore.</span><span class="sxs-lookup"><span data-stu-id="45002-482">It then casts to <xref:System.DateTimeOffset> to retrieve the value.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
DateTimeOffset dt = (DateTimeOffset)root.Element("Child");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Child><%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %></Child>  
    </Root>  
Console.WriteLine(root)  
  
Dim dt As DateTimeOffset = CType(root.<Child>(0), DateTimeOffset)  
Console.WriteLine("dt={0}", dt)  
```  
  
 <span data-ttu-id="45002-483">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-483">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Child>2006-10-06T12:30:00-07:00</Child>  
</Root>  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-484">L'elemento non contiene un valore <see cref="T:System.DateTimeOffset" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-484">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45002-485">Il valore del parametro <paramref name="element" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-485">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator decimal (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Decimal op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Decimal(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-486">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-486">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Decimal" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-487">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-487">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Decimal" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-488">Oggetto <see cref="T:System.Decimal" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-488">A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="45002-489">Nell'esempio seguente viene creato un elemento con un valore decimale.</span><span class="sxs-lookup"><span data-stu-id="45002-489">The following example creates an element with a decimal value.</span></span> <span data-ttu-id="45002-490">Il valore dell'attributo viene quindi recuperato eseguendo il cast su <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="45002-490">It then retrieves the value of the attribute by casting to <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", "79228162514264337593543950335");  
decimal value = (decimal)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>79228162514264337593543950335</Root>  
Dim value As Decimal = CDec(root)  
Console.WriteLine("value={0}", value)  
  
```  
  
 <span data-ttu-id="45002-491">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-491">This example produces the following output:</span></span>  
  
```  
value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-492">L'elemento non contiene un valore <see cref="T:System.Decimal" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-492">The element does not contain a valid <see cref="T:System.Decimal" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45002-493">Il valore del parametro <paramref name="element" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-493">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator double (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator double(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-494">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-494">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Double" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-495">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-495">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-496">Oggetto <see cref="T:System.Double" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-496">A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
## Examples  
 <span data-ttu-id="45002-497">Nell'esempio seguente viene creato un attributo con `double` contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-497">The following example creates an attribute with `double` content.</span></span> <span data-ttu-id="45002-498">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="45002-498">It then retrieves the value by casting to <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 1.79769313486231e308);  
double value = (double)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>1.79769313486231E+308</Root>  
Dim value As Double = CDbl(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="45002-499">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-499">This example produces the following output:</span></span>  
  
```  
value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-500">L'elemento non contiene un valore <see cref="T:System.Double" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-500">The element does not contain a valid <see cref="T:System.Double" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45002-501">Il valore del parametro <paramref name="element" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-501">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Guid (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Guid op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Guid(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-502">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.Guid" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-502">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Guid" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-503">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Guid" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-503">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Guid" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-504">Oggetto <see cref="T:System.Guid" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-504">A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="45002-505">Nell'esempio seguente viene creato un elemento con un guid come contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-505">The following example creates an element with a guid as content.</span></span> <span data-ttu-id="45002-506">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Guid>.</span><span class="sxs-lookup"><span data-stu-id="45002-506">It then retrieves the value by casting to <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"));  
Guid value = (Guid)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root><%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %></Root>  
Dim value As Guid = CType(root, Guid)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="45002-507">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-507">This example produces the following output:</span></span>  
  
```  
value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-508">L'elemento non contiene un valore <see cref="T:System.Guid" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-508">The element does not contain a valid <see cref="T:System.Guid" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45002-509">Il valore del parametro <paramref name="element" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-509">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-510">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-510">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int32" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-511">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-511">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int32" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-512">Oggetto <see cref="T:System.Int32" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-512">A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="45002-513">Nell'esempio seguente viene creato un elemento con un numero intero come contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-513">The following example creates an element with an integer as content.</span></span> <span data-ttu-id="45002-514">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="45002-514">It then retrieves the value by casting to <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 2147483647);  
int value = (int)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>2147483647</Root>  
Dim value As Integer = CInt(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="45002-515">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-515">This example produces the following output:</span></span>  
  
```  
value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-516">L'elemento non contiene un valore <see cref="T:System.Int32" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-516">The element does not contain a valid <see cref="T:System.Int32" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45002-517">Il valore del parametro <paramref name="element" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-517">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-518">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-518">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int64" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-519">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-519">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int64" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-520">Oggetto <see cref="T:System.Int64" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-520">A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="45002-521">Nell'esempio seguente viene creato un elemento con un valore long integer come contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-521">The following example creates an element with a long integer as content.</span></span> <span data-ttu-id="45002-522">Viene quindi recuperato il valore dell'elemento eseguendo il cast su <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="45002-522">It then retrieves the value of the element by casting to <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 9223372036854775807);  
long value = (long)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>9223372036854775807</Root>  
Dim value As Long = CLng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="45002-523">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-523">This example produces the following output:</span></span>  
  
```  
value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-524">L'elemento non contiene un valore <see cref="T:System.Int64" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-524">The element does not contain a valid <see cref="T:System.Int64" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45002-525">Il valore del parametro <paramref name="element" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-525">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;bool&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;bool&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;bool&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-526">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui per eseguire il cast a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-526">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-527">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-527">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-528">Oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Boolean" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-528">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-529">Durante la conversione in <xref:System.Nullable%601> di <xref:System.Boolean> da un attributo o elemento, i valori consentiti sono "0", "1" e qualsiasi stringa che produce "true" o "false" dopo la rimozione e la conversione in lettere minuscole.</span><span class="sxs-lookup"><span data-stu-id="45002-529">When converting to <xref:System.Nullable%601> of <xref:System.Boolean> from an attribute or element, allowed values are "0", "1", and any string that produces "true" or "false" after trimming and conversion to lower case.</span></span>
  
## Examples  
 <span data-ttu-id="45002-530">Nell'esempio seguente viene creato un elemento con contenuto booleano.</span><span class="sxs-lookup"><span data-stu-id="45002-530">The following example creates an element with boolean content.</span></span> <span data-ttu-id="45002-531">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Nullable%601> di <xref:System.Boolean>.</span><span class="sxs-lookup"><span data-stu-id="45002-531">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Boolean>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("BoolValue1", true),  
    new XElement("BoolValue2", false));  
bool? bool1 = (bool?)root.Element("BoolValue1");  
bool? bool2 = (bool?)root.Element("BoolValue2");  
Console.WriteLine("Nullable Boolean: value1={0}", bool1);  
Console.WriteLine("Nullable Boolean: value2={0}", bool2);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <BoolValue1>true</BoolValue1>  
            <BoolValue2>false</BoolValue2>  
        </Root>  
  
Dim value1 As Nullable(Of Boolean) = CType(root.Element("BoolValue1"), Nullable(Of Boolean))  
Dim value2 As Nullable(Of Boolean) = CType(root.Element("BoolValue2"), Nullable(Of Boolean))  
Console.WriteLine("Nullable Boolean: value1={0}", IIf(value1.HasValue, value1.ToString(), "null"))  
Console.WriteLine("Nullable Boolean: value2={0}", IIf(value2.HasValue, value2.ToString(), "null"))  
```  
  
 <span data-ttu-id="45002-532">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-532">This example produces the following output:</span></span>  
  
```  
Nullable Boolean: value1=True  
Nullable Boolean: value2=False  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-533">L'elemento non contiene un valore <see cref="T:System.Boolean" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-533">The element does not contain a valid <see cref="T:System.Boolean" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTime&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTime&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-534">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui per eseguire il cast a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.DateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-534">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-535">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.DateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-535">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-536">Oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.DateTime" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-536">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-537">Lo spazio dei valori di un attributo o elemento che contiene il contenuto di data e ora è strettamente correlato a date e ore descritte nello standard ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="45002-537">The value space of an attribute or element that contains date and time content is closely related to the dates and times described in ISO 8601.</span></span> <span data-ttu-id="45002-538">Quando si crea un attributo o elemento che contiene il contenuto di data e ora, i valori di attributo o elemento vengono formattati in base alla specifica W3C.</span><span class="sxs-lookup"><span data-stu-id="45002-538">When creating an attribute or element that contains date and time content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="45002-539">Vedere la specifica W3C per altri dettagli.</span><span class="sxs-lookup"><span data-stu-id="45002-539">See the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="45002-540">Il comportamento è lax quando esegue il cast a un <xref:System.Nullable%601> di <xref:System.DateTime> da un attributo o elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-540">The behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.DateTime> from an attribute or element.</span></span> <span data-ttu-id="45002-541">Anche se il valore di attributo o elemento non è formattato esattamente secondo la specifica W3C, il valore viene convertito in modo appropriato per un <xref:System.Nullable%601> di <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="45002-541">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
 <span data-ttu-id="45002-542">Questo operatore di conversione utilizza <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> per la conversione da un <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="45002-542">This conversion operator uses <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> to convert from a <xref:System.DateTime>.</span></span>
  
## Examples  
 <span data-ttu-id="45002-543">Nell'esempio seguente viene creato un elemento con una data e ora come contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-543">The following example creates an element with a date and time as content.</span></span> <span data-ttu-id="45002-544">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Nullable%601> di <xref:System.DateTime>.</span><span class="sxs-lookup"><span data-stu-id="45002-544">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.DateTime>.</span></span>  
  
```csharp
XElement root = new XElement("Root",  
    new XElement("Value", new DateTime(2006, 10, 6, 12, 30, 0))  
);  
DateTime? value = (DateTime?)root.Element("Value");  
Console.WriteLine("Nullable DateTime: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value><%= New DateTime(2006, 10, 6, 12, 30, 0) %></Value>  
    </Root>  
Dim value As Nullable(Of DateTime) = CType(root.Element("Value"), Nullable(Of DateTime))  
Console.WriteLine("Nullable DateTime: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="45002-545">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-545">This example produces the following output:</span></span>  
  
```  
Nullable DateTime: value=10/6/2006 12:30:00 PM  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-546">L'elemento non contiene un valore <see cref="T:System.DateTime" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-546">The element does not contain a valid <see cref="T:System.DateTime" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;DateTimeOffset&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;DateTimeOffset&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTimeOffset&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-547">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.DateTimeOffset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-547">The <see cref="T:System.Xml.Linq.XElement" /> to cast to an <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-548">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.DateTimeOffset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-548">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-549">Oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.DateTimeOffset" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-549">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-550">Questo operatore di conversione viene utilizzata la <xref:System.Xml.XmlConvert> classe per eseguire la conversione.</span><span class="sxs-lookup"><span data-stu-id="45002-550">This conversion operator uses the <xref:System.Xml.XmlConvert> class to do the conversion.</span></span>
  
## Examples  
 <span data-ttu-id="45002-551">Nell'esempio seguente viene creato un elemento con contenuto di data e ora.</span><span class="sxs-lookup"><span data-stu-id="45002-551">The following example creates an element with date and time content.</span></span> <span data-ttu-id="45002-552">Viene quindi eseguito il cast a <xref:System.Nullable%601> di <xref:System.DateTimeOffset> per recuperare il valore.</span><span class="sxs-lookup"><span data-stu-id="45002-552">It then casts to <xref:System.Nullable%601> of <xref:System.DateTimeOffset> to retrieve the value.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))  
);  
Console.WriteLine(root);  
  
DateTimeOffset? dt = (DateTimeOffset?)root.Element("Child");  
Console.WriteLine("dt={0}", dt);  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Child><%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %></Child>  
    </Root>  
Console.WriteLine(root)  
  
Dim dt As Nullable(Of DateTimeOffset) = CType(root.<Child>(0), Nullable(Of DateTimeOffset))  
Console.WriteLine("dt={0}", dt)  
```  
  
 <span data-ttu-id="45002-553">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-553">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Child>2006-10-06T12:30:00-07:00</Child>  
</Root>  
dt=10/6/2006 12:30:00 PM -07:00  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-554">L'elemento non contiene un valore <see cref="T:System.DateTimeOffset" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-554">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;decimal&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::Decimal&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-555">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui per eseguire il cast a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-555">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-556">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Decimal" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-556">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-557">Oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Decimal" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-557">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="45002-558">Nell'esempio seguente viene creato un elemento con contenuto decimale.</span><span class="sxs-lookup"><span data-stu-id="45002-558">The following example creates an element with decimal content.</span></span> <span data-ttu-id="45002-559">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Nullable%601> di <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="45002-559">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Decimal>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", "79228162514264337593543950335")  
);  
decimal? value = (decimal?)root.Element("Value");  
Console.WriteLine("Nullable decimal: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value>79228162514264337593543950335</Value>  
    </Root>  
Dim value As Nullable(Of Decimal) = CType(root.Element("Value"), Nullable(Of Decimal))  
Console.WriteLine("Nullable decimal: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="45002-560">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-560">This example produces the following output:</span></span>  
  
```  
Nullable decimal: value=79228162514264337593543950335  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-561">L'elemento non contiene un valore <see cref="T:System.Decimal" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-561">The element does not contain a valid <see cref="T:System.Decimal" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;double&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;double&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-562">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui per eseguire il cast a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-562">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-563">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-563">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-564">Oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Double" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-564">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="45002-565">Nell'esempio seguente viene creato un elemento con contenuto a virgola mobile a precisione doppia.</span><span class="sxs-lookup"><span data-stu-id="45002-565">The following example creates an element with double precision floating point content.</span></span> <span data-ttu-id="45002-566">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Nullable%601> di <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="45002-566">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Double>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", 1.79769313486231e308)  
);  
double? value = (double?)root.Element("Value");  
Console.WriteLine("Nullable double: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
        <Root>  
            <Value>1.79769313486231e308</Value>  
        </Root>  
  
Dim value As Nullable(Of Double) = CType(root.Element("Value"), Nullable(Of Double))  
Console.WriteLine("Nullable double: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="45002-567">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-567">This example produces the following output:</span></span>  
  
```  
Nullable double: value=1.79769313486231E+308  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-568">L'elemento non contiene un valore <see cref="T:System.Double" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-568">The element does not contain a valid <see cref="T:System.Double" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;Guid&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.Guid&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;Guid&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Guid&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-569">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui per eseguire il cast a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Guid" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-569">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-570">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Guid" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-570">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-571">Oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Guid" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-571">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="45002-572">Nell'esempio seguente viene creato un elemento con contenuto guid.</span><span class="sxs-lookup"><span data-stu-id="45002-572">The following example creates an element with guid content.</span></span> <span data-ttu-id="45002-573">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Nullable%601> di <xref:System.Guid>.</span><span class="sxs-lookup"><span data-stu-id="45002-573">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Guid>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", new Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730"))  
);  
Guid? value = (Guid?)root.Element("Value");  
Console.WriteLine("Nullable Guid: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Value><%= New Guid("3c1cc55b-baff-4b7a-9d17-077af3aa5730") %></Value>  
    </Root>  
Dim value As Nullable(Of Guid) = CType(root.Element("Value"), Nullable(Of Guid))  
Console.WriteLine("Nullable Guid: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="45002-574">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-574">This example produces the following output:</span></span>  
  
```  
Nullable Guid: value=3c1cc55b-baff-4b7a-9d17-077af3aa5730  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-575">L'elemento non contiene un valore <see cref="T:System.Guid" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-575">The element does not contain a valid <see cref="T:System.Guid" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;int&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;int&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-576">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui per eseguire il cast a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-576">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-577">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-577">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-578">Oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Int32" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-578">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="45002-579">Nell'esempio seguente viene creato un elemento con contenuto di un intero senza segno.</span><span class="sxs-lookup"><span data-stu-id="45002-579">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="45002-580">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Nullable%601> di <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="45002-580">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 2147483647)  
);  
int? value = (int?)root.Element("Value");  
Console.WriteLine("Nullable integer: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>2147483647</Value>  
        </Root>  
Dim value As Nullable(Of Integer) = CType(root.Element("Value"), Nullable(Of Integer))  
Console.WriteLine("Nullable integer: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
  
```  
  
 <span data-ttu-id="45002-581">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-581">This example produces the following output:</span></span>  
  
```  
Nullable integer: value=2147483647  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-582">L'elemento non contiene un valore <see cref="T:System.Int32" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-582">The element does not contain a valid <see cref="T:System.Int32" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;long&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;int64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;long&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-583">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui per eseguire il cast a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-583">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-584">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-584">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-585">Oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Int64" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-585">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="45002-586">Nell'esempio seguente viene creato un elemento con contenuto di tipo long integer.</span><span class="sxs-lookup"><span data-stu-id="45002-586">The following example creates an element with long integer content.</span></span> <span data-ttu-id="45002-587">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Nullable%601> di <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="45002-587">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Int64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",    
    new XElement("Value", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Element("Value");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>9223372036854775807</Value>  
        </Root>  
Dim value As Nullable(Of ULong) = CType(root.Element("Value"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="45002-588">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-588">This example produces the following output:</span></span>  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-589">L'elemento non contiene un valore <see cref="T:System.Int64" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-589">The element does not contain a valid <see cref="T:System.Int64" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;float&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;float32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;float&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-590">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui per eseguire il cast a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-590">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-591">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-591">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-592">Oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.Single" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-592">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="45002-593">Nell'esempio seguente viene creato un elemento con contenuto a virgola mobile e precisione singola.</span><span class="sxs-lookup"><span data-stu-id="45002-593">The following example creates an element with single precision floating point content.</span></span> <span data-ttu-id="45002-594">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Nullable%601> di <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="45002-594">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 3.402823e38)  
);  
float? value = (float?)root.Element("Value");  
Console.WriteLine("Nullable Single: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>3.402823e38</Value>  
        </Root>  
Dim value As Nullable(Of Single) = CType(root.Element("Value"), Nullable(Of Single))  
Console.WriteLine("Nullable Single: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="45002-595">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-595">This example produces the following output:</span></span>  
  
```  
Nullable Single: value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-596">L'elemento non contiene un valore <see cref="T:System.Single" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-596">The element does not contain a valid <see cref="T:System.Single" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;TimeSpan&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;TimeSpan&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-597">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui per eseguire il cast a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-597">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-598">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-598">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-599">Oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.TimeSpan" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-599">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-600">Lo spazio dei valori di un attributo o elemento che contiene un intervallo di tempo è strettamente correlato al contenuto di durata, come descritto nello standard ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="45002-600">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="45002-601">Quando si crea un attributo o elemento che contiene un intervallo di tempo, i valori di attributo o elemento vengono formattati in base alla specifica W3C.</span><span class="sxs-lookup"><span data-stu-id="45002-601">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="45002-602">Vedere la specifica W3C per altri dettagli.</span><span class="sxs-lookup"><span data-stu-id="45002-602">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="45002-603">Comportamento è lax quando si esegue il cast a un <xref:System.Nullable%601> di <xref:System.TimeSpan> da un attributo o elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-603">Behavior is lax when casting to a <xref:System.Nullable%601> of <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="45002-604">Anche se il valore di attributo o elemento non è formattato esattamente secondo la specifica W3C, il valore viene convertito in modo appropriato per un <xref:System.Nullable%601> di <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="45002-604">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>
  
## Examples  
 <span data-ttu-id="45002-605">Nell'esempio seguente viene creato un elemento con intervallo di tempo contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-605">The following example creates an element with time span content.</span></span> <span data-ttu-id="45002-606">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Nullable%601> di <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="45002-606">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Value", new TimeSpan(1, 5, 30))  
);  
TimeSpan? value = (TimeSpan?)root.Element("Value");  
Console.WriteLine("Nullable TimeSpan: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _  
    <Root>  
        <Value><%= New TimeSpan(1, 5, 30) %></Value>  
    </Root>  
Dim value As Nullable(Of TimeSpan) = CType(root.Element("Value"), Nullable(Of TimeSpan))  
Console.WriteLine("Nullable TimeSpan: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="45002-607">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-607">This example produces the following output:</span></span>  
  
```  
Nullable TimeSpan: value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-608">L'elemento non contiene un valore <see cref="T:System.TimeSpan" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-608">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;uint&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int32&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt32&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-609">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui per eseguire il cast a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.UInt32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-609">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-610">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.UInt32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-610">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-611">Oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.UInt32" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-611">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="45002-612">Nell'esempio seguente viene creato un elemento con contenuto di un intero senza segno.</span><span class="sxs-lookup"><span data-stu-id="45002-612">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="45002-613">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Nullable%601> di <xref:System.UInt32>.</span><span class="sxs-lookup"><span data-stu-id="45002-613">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 4294967295)  
);  
uint? value = (uint?)root.Element("Value");  
Console.WriteLine("Nullable uint: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>4294967295</Value>  
        </Root>  
Dim value As Nullable(Of UInteger) = CType(root.Element("Value"), Nullable(Of UInteger))  
Console.WriteLine("Nullable uint: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="45002-614">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-614">This example produces the following output:</span></span>  
  
```  
Nullable uint: value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-615">L'elemento non contiene un valore <see cref="T:System.UInt32" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-615">The element does not contain a valid <see cref="T:System.UInt32" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator Nullable&lt;ulong&gt; (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;unsigned int64&gt; op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Nullable(Of ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator Nullable&lt;System::UInt64&gt;(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.UInt64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-616">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui per eseguire il cast a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.UInt64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-616">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-617">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.UInt64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-617">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-618">Oggetto <see cref="T:System.Nullable`1" /> di <see cref="T:System.UInt64" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-618">A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="45002-619">Nell'esempio seguente viene creato un elemento con contenuto intero lungo senza segno.</span><span class="sxs-lookup"><span data-stu-id="45002-619">The following example creates an element with unsigned long integer content.</span></span> <span data-ttu-id="45002-620">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Nullable%601> di <xref:System.UInt64>.</span><span class="sxs-lookup"><span data-stu-id="45002-620">It then retrieves the value by casting to <xref:System.Nullable%601> of <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root",   
    new XElement("Value", 9223372036854775807)  
);  
ulong? value = (ulong?)root.Element("Value");  
Console.WriteLine("Nullable ulong: value={0}", value == null ? "null" : value.ToString());  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Value>9223372036854775807</Value>  
        </Root>  
  
Dim value As Nullable(Of ULong) = CType(root.Element("Value"), Nullable(Of ULong))  
Console.WriteLine("Nullable ulong: value={0}", IIf(value.HasValue, value.ToString(), "null"))  
```  
  
 <span data-ttu-id="45002-621">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-621">This example produces the following output:</span></span>  
  
```  
Nullable ulong: value=9223372036854775807  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-622">L'elemento non contiene un valore <see cref="T:System.UInt64" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-622">The element does not contain a valid <see cref="T:System.UInt64" /> value.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator float (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator float(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-623">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-623">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Single" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-624">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.Single" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-624">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Single" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-625">Oggetto <see cref="T:System.Single" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-625">A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="45002-626">Nell'esempio seguente viene creato un elemento con contenuto a virgola mobile e precisione singola.</span><span class="sxs-lookup"><span data-stu-id="45002-626">The following example creates an element with single precision floating point content.</span></span> <span data-ttu-id="45002-627">Il valore viene quindi recuperato eseguendo il cast su <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="45002-627">It then retrieves the value by casting to <xref:System.Single>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 3.402823e38);  
float value = (float)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>3.402823E+38</Root>  
Dim value As Single = CSng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="45002-628">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-628">This example produces the following output:</span></span>  
  
```  
value=3.402823E+38  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-629">L'elemento non contiene un valore <see cref="T:System.Single" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-629">The element does not contain a valid <see cref="T:System.Single" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45002-630">Il valore del parametro <paramref name="element" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-630">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator string (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname string op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::String ^(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-631">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-631">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.String" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-632">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-632">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-633">Oggetto <see cref="T:System.String" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-633">A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-634">Se il <xref:System.Xml.Linq.XElement> dispone di elementi figlio, viene restituito il valore di stringa concatenata di tutto il testo dell'elemento e il testo del discendente.</span><span class="sxs-lookup"><span data-stu-id="45002-634">If the <xref:System.Xml.Linq.XElement> has children, the concatenated string value of all of the element's text and descendant's text is returned.</span></span>  
  
## Examples  
 <span data-ttu-id="45002-635">Nell'esempio seguente viene creato un elemento con contenuto della stringa.</span><span class="sxs-lookup"><span data-stu-id="45002-635">The following example creates an element with string content.</span></span> <span data-ttu-id="45002-636">Il valore viene quindi recuperato eseguendo il cast su <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="45002-636">It then retrieves the value by casting to <xref:System.String>.</span></span>  
  
```csharp  
XElement root = XElement.Parse("<Root>abc <b>def </b>ghi</Root>");  
Console.WriteLine("(string)root={0}", (string)root);  
```  
  
```vb  
Dim root As XElement = <Root>abc <b>def </b>ghi</Root>  
Console.WriteLine("(string)root={0}", root.Value)  
```  
  
 <span data-ttu-id="45002-637">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-637">This example produces the following output:</span></span>  
  
```  
(string)root=abc def ghi  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator TimeSpan (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator TimeSpan(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-638">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-638">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.TimeSpan" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-639">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-639">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.TimeSpan" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-640">Oggetto <see cref="T:System.TimeSpan" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-640">A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-641">Lo spazio dei valori di un attributo o elemento che contiene un intervallo di tempo è strettamente correlato al contenuto di durata, come descritto nello standard ISO 8601.</span><span class="sxs-lookup"><span data-stu-id="45002-641">The value space of an attribute or element that contains time span content is closely related to duration content as described in ISO 8601.</span></span> <span data-ttu-id="45002-642">Quando si crea un attributo o elemento che contiene un intervallo di tempo, i valori di attributo o elemento vengono formattati in base alla specifica W3C.</span><span class="sxs-lookup"><span data-stu-id="45002-642">When creating an attribute or element that contains time span content, the attribute or element values are formatted per the W3C specification.</span></span> <span data-ttu-id="45002-643">Vedere la specifica W3C per altri dettagli.</span><span class="sxs-lookup"><span data-stu-id="45002-643">Please see the W3C specification for more details.</span></span>  
  
 <span data-ttu-id="45002-644">Comportamento è lax quando si esegue il cast a un <xref:System.TimeSpan> da un attributo o elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-644">Behavior is lax when casting to a <xref:System.TimeSpan> from an attribute or element.</span></span> <span data-ttu-id="45002-645">Anche se il valore di attributo o elemento non è formattato esattamente secondo la specifica W3C, il valore viene convertito in modo appropriato per un <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="45002-645">Even if the attribute or element value is not formatted exactly per the W3C specification, the value is appropriately converted to a <xref:System.TimeSpan>.</span></span>
  
## Examples  
 <span data-ttu-id="45002-646">Nell'esempio seguente viene creato un elemento con intervallo di tempo contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-646">The following example creates an element with time span content.</span></span> <span data-ttu-id="45002-647">Il valore viene quindi recuperato eseguendo il cast su <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="45002-647">It then retrieves the value by casting to <xref:System.TimeSpan>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", new TimeSpan(1, 5, 30));  
TimeSpan value = (TimeSpan)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root><%= New TimeSpan(1, 5, 30) %></Root>  
Dim value As TimeSpan = CType(root, TimeSpan)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="45002-648">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-648">This example produces the following output:</span></span>  
  
```  
value=01:05:30  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-649">L'elemento non contiene un valore <see cref="T:System.TimeSpan" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-649">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45002-650">Il valore del parametro <paramref name="element" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-650">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator uint (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int32 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt32(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-651">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.UInt32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-651">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt32" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-652">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.UInt32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-652">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt32" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-653">Oggetto <see cref="T:System.UInt32" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-653">A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples  
 <span data-ttu-id="45002-654">Nell'esempio seguente viene creato un elemento con contenuto di un intero senza segno.</span><span class="sxs-lookup"><span data-stu-id="45002-654">The following example creates an element with unsigned integer content.</span></span> <span data-ttu-id="45002-655">Il valore viene quindi recuperato eseguendo il cast su <xref:System.UInt32>.</span><span class="sxs-lookup"><span data-stu-id="45002-655">It then retrieves the value by casting to <xref:System.UInt32>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 4294967295);  
uint value = (uint)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>4294967295</Root>  
Dim value As UInteger = CUInt(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="45002-656">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-656">This example produces the following output:</span></span>  
  
```  
value=4294967295  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-657">L'elemento non contiene un valore <see cref="T:System.UInt32" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-657">The element does not contain a valid <see cref="T:System.UInt32" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45002-658">Il valore del parametro <paramref name="element" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-658">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator ulong (System.Xml.Linq.XElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname unsigned int64 op_Explicit(class System.Xml.Linq.XElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (element As XElement) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::UInt64(System::Xml::Linq::XElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Xml.Linq.XElement" />
      </Parameters>
      <Docs>
        <param name="element">
          <span data-ttu-id="45002-659">Oggetto <see cref="T:System.Xml.Linq.XElement" /> di cui eseguire il cast a un oggetto <see cref="T:System.UInt64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-659">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt64" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-660">Esegue il cast del valore dell'oggetto <see cref="T:System.Xml.Linq.XElement" /> a un oggetto <see cref="T:System.UInt64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-660">Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt64" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-661">Oggetto <see cref="T:System.UInt64" /> che include il contenuto di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-661">A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  
 <span data-ttu-id="45002-662">Nell'esempio seguente viene creato un elemento con contenuto intero lungo senza segno.</span><span class="sxs-lookup"><span data-stu-id="45002-662">The following example creates an element with unsigned long integer content.</span></span> <span data-ttu-id="45002-663">Il valore viene quindi recuperato eseguendo il cast su <xref:System.UInt64>.</span><span class="sxs-lookup"><span data-stu-id="45002-663">It then retrieves the value by casting to <xref:System.UInt64>.</span></span>  
  
```csharp  
XElement root = new XElement("Root", 18446744073709551615);  
ulong value = (ulong)root;  
Console.WriteLine("value={0}", value);  
```  
  
```vb  
Dim root As XElement = <Root>18446744073709551615</Root>  
Dim value As ULong = CULng(root)  
Console.WriteLine("value={0}", value)  
```  
  
 <span data-ttu-id="45002-664">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-664">This example produces the following output:</span></span>  
  
```  
value=18446744073709551615  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="45002-665">L'elemento non contiene un valore <see cref="T:System.UInt64" /> valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-665">The element does not contain a valid <see cref="T:System.UInt64" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45002-666">Il valore del parametro <paramref name="element" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-666">The <paramref name="element" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45002-667">Carica un oggetto <see cref="T:System.Xml.Linq.XElement" /> da una stringa contenente XML, facoltativamente preservando lo spazio vuoto e mantenendo le informazioni sulla riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-667">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Parse (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Parse(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Parse(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="45002-668">Oggetto <see cref="T:System.String" /> che contiene il codice XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-668">A <see cref="T:System.String" /> that contains XML.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-669">Carica un oggetto <see cref="T:System.Xml.Linq.XElement" /> da una stringa che contiene XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-669">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-670">Oggetto <see cref="T:System.Xml.Linq.XElement" /> popolato dalla stringa che contiene il codice XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-670">An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-671">Questo metodo non mantiene gli spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="45002-671">This method does not preserve white space.</span></span> <span data-ttu-id="45002-672">Se si desidera mantenere gli spazi vuoti nella struttura ad albero XML, utilizzare l'overload del metodo di <xref:System.Xml.Linq.XElement.Parse%2A> metodo che accetta <xref:System.Xml.Linq.LoadOptions> come parametro.</span><span class="sxs-lookup"><span data-stu-id="45002-672">If you want to preserve white space in the XML tree, use the overload of the <xref:System.Xml.Linq.XElement.Parse%2A> method that takes <xref:System.Xml.Linq.LoadOptions> as a parameter.</span></span> <span data-ttu-id="45002-673">Per ulteriori informazioni, vedere [conservare lo spazio vuoto durante il caricamento o l'analisi XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [conservare gli spazi vuoti durante la serializzazione](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="45002-673">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="45002-674">LINQ alla funzionalità di caricamento del XML si basa su <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-674">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="45002-675">Pertanto, è possibile rilevare eventuali eccezioni generate dal <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload di metodi e <xref:System.Xml.XmlReader> metodi che leggono e analizzano il documento.</span><span class="sxs-lookup"><span data-stu-id="45002-675">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-676">Nell'esempio seguente crea una stringa che contiene XML.</span><span class="sxs-lookup"><span data-stu-id="45002-676">The following example creates a string that contains XML.</span></span> <span data-ttu-id="45002-677">Viene quindi analizzata la stringa in un <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="45002-677">It then parses the string into an <xref:System.Xml.Linq.XElement>.</span></span>  
  
```csharp  
XElement xmlTree = XElement.Parse("<Root> <Child> </Child> </Root>");  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = <Root><Child></Child></Root>  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="45002-678">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-678">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child></Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XElement Parse (string text, System.Xml.Linq.LoadOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XElement Parse(string text, valuetype System.Xml.Linq.LoadOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (text As String, options As LoadOptions) As XElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XElement ^ Parse(System::String ^ text, System::Xml::Linq::LoadOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.LoadOptions" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="45002-679">Oggetto <see cref="T:System.String" /> che contiene il codice XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-679">A <see cref="T:System.String" /> that contains XML.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="45002-680">Oggetto <see cref="T:System.Xml.Linq.LoadOptions" /> che specifica il comportamento dello spazio vuoto e se caricare l'URI di base e le informazioni sulla riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-680">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-681">Carica un oggetto <see cref="T:System.Xml.Linq.XElement" /> da una stringa contenente XML, facoltativamente preservando lo spazio vuoto e mantenendo le informazioni sulla riga.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-681">Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-682">Oggetto <see cref="T:System.Xml.Linq.XElement" /> popolato dalla stringa che contiene il codice XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-682">An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-683">Se l'origine XML rientrato, l'impostazione di <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` fa sì che il lettore leggere tutti gli spazi vuoti nel documento XML di origine.</span><span class="sxs-lookup"><span data-stu-id="45002-683">If the source XML is indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to read all white space in the source XML.</span></span> <span data-ttu-id="45002-684">Nodi di tipo <xref:System.Xml.Linq.XText> vengono creati per spazi vuoti significativi e significativo.</span><span class="sxs-lookup"><span data-stu-id="45002-684">Nodes of type <xref:System.Xml.Linq.XText> are created for both significant and insignificant white space.</span></span>  
  
 <span data-ttu-id="45002-685">Se l'origine XML rientrato, se non viene impostata la <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` fa sì che il lettore ignorare tutti gli spazi vuoti non significativi nel codice XML di origine.</span><span class="sxs-lookup"><span data-stu-id="45002-685">If the source XML is indented, not setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` causes the reader to ignore all of the insignificant white space in the source XML.</span></span> <span data-ttu-id="45002-686">Struttura ad albero XML viene creato senza nodi di testo per gli spazi vuoti non significativi.</span><span class="sxs-lookup"><span data-stu-id="45002-686">The XML tree is created without any text nodes for insignificant white space.</span></span>  
  
 <span data-ttu-id="45002-687">Se l'origine XML non è rientrato, l'impostazione di <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="45002-687">If the source XML is not indented, setting the <xref:System.Xml.Linq.LoadOptions.PreserveWhitespace> flag in `options` has no effect.</span></span> <span data-ttu-id="45002-688">Gli spazi vuoti significativi viene comunque mantenuto e non sono presenti intervalli di spazi vuoti non significativi che potrebbero comportare la creazione di più nodi di testo di spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="45002-688">Significant white space is still preserved, and there are no spans of insignificant white space that could cause the creation of more white space text nodes.</span></span>  
  
 <span data-ttu-id="45002-689">Per ulteriori informazioni, vedere [conservare lo spazio vuoto durante il caricamento o l'analisi XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [conservare gli spazi vuoti durante la serializzazione](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="45002-689">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
 <span data-ttu-id="45002-690">Impostazione <xref:System.Xml.Linq.LoadOptions.SetBaseUri> avrà alcun effetto durante l'analisi da un <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="45002-690">Setting <xref:System.Xml.Linq.LoadOptions.SetBaseUri> will have no effect when parsing from a <xref:System.String>.</span></span>  
  
 <span data-ttu-id="45002-691">Il <xref:System.Xml.XmlReader> può avere un informazioni sulla riga valide o non.</span><span class="sxs-lookup"><span data-stu-id="45002-691">The <xref:System.Xml.XmlReader> may have a valid line information or not.</span></span> <span data-ttu-id="45002-692">Se si imposta <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, le informazioni sulla riga verrà impostati nella struttura ad albero XML dalle informazioni sulla riga che viene segnalati dal <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-692">If you set <xref:System.Xml.Linq.LoadOptions.SetLineInfo>, the line information will be set in the XML tree from the line information that is reported by the <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="45002-693">Si verifica una riduzione delle prestazioni se imposta la <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span><span class="sxs-lookup"><span data-stu-id="45002-693">There is a performance penalty if you set the <xref:System.Xml.Linq.LoadOptions.SetLineInfo> flag.</span></span>  
  
 <span data-ttu-id="45002-694">Le informazioni sulla riga è accurati immediatamente dopo il caricamento del documento XML.</span><span class="sxs-lookup"><span data-stu-id="45002-694">The line information is accurate immediately after loading the XML document.</span></span> <span data-ttu-id="45002-695">Se si modifica la struttura ad albero XML dopo il caricamento del documento, le informazioni sulla riga potrebbero risultare inutili.</span><span class="sxs-lookup"><span data-stu-id="45002-695">If you modify the XML tree after loading the document, the line information may become meaningless.</span></span>  
  
 <span data-ttu-id="45002-696">LINQ alla funzionalità di caricamento del XML si basa su <xref:System.Xml.XmlReader>.</span><span class="sxs-lookup"><span data-stu-id="45002-696">LINQ to XML's loading functionality is built upon <xref:System.Xml.XmlReader>.</span></span> <span data-ttu-id="45002-697">Pertanto, è possibile rilevare eventuali eccezioni generate dal <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload di metodi e <xref:System.Xml.XmlReader> metodi che leggono e analizzano il documento.</span><span class="sxs-lookup"><span data-stu-id="45002-697">Therefore, you might catch any exceptions that are thrown by the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> overload methods and the <xref:System.Xml.XmlReader> methods that read and parse the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-698">Nell'esempio seguente viene analizzata una stringa in un <xref:System.Xml.Linq.XElement> in due modi diversi: conservando lo spazio vuoto e non il mantenimento degli spazi.</span><span class="sxs-lookup"><span data-stu-id="45002-698">The following example parses a string into an <xref:System.Xml.Linq.XElement> in two different ways: preserving white space, and not preserving white space.</span></span> <span data-ttu-id="45002-699">Viene quindi utilizzata una query per determinare il numero di nodi con spazi vuoti nell'albero XML risulta.</span><span class="sxs-lookup"><span data-stu-id="45002-699">It then uses a query to determine the number of white space nodes in the resulting XML tree.</span></span>  
  
```csharp  
int whiteSpaceNodes;  
  
XElement xmlTree1 = XElement.Parse("<Root> <Child> </Child> </Root>",  
    LoadOptions.None);  
whiteSpaceNodes = xmlTree1  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}",  
    whiteSpaceNodes);  
  
XElement xmlTree2 = XElement.Parse("<Root> <Child> </Child> </Root>",  
    LoadOptions.PreserveWhitespace);  
whiteSpaceNodes = xmlTree2  
    .DescendantNodesAndSelf()  
    .OfType<XText>()  
    .Where(tNode => tNode.ToString().Trim().Length == 0)  
    .Count();  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}",  
    whiteSpaceNodes);  
```  
  
```vb  
Dim whiteSpaceNodes As Integer  
  
Dim xmlTree1 As XElement = XElement.Parse("<Root> <Child> </Child> </Root>", LoadOptions.None)  
whiteSpaceNodes = xmlTree1 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (not preserving whitespace): {0}", whiteSpaceNodes)  
  
Dim xmlTree2 As XElement = XElement.Parse("<Root> <Child> </Child> </Root>", LoadOptions.PreserveWhitespace)  
whiteSpaceNodes = xmlTree2 _  
    .DescendantNodesAndSelf() _  
    .OfType(Of XText)() _  
    .Where(Function(ByVal tNode As XNode) tNode.ToString().Trim().Length = 0) _  
    .Count()  
Console.WriteLine("Count of white space nodes (preserving whitespace): {0}", whiteSpaceNodes)  
```  
  
 <span data-ttu-id="45002-700">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-700">This example produces the following output:</span></span>  
  
```  
Count of white space nodes (not preserving whitespace): 0  
Count of white space nodes (preserving whitespace): 3  
```  
  
 <span data-ttu-id="45002-701">Nell'esempio seguente viene mantiene le informazioni sulla riga mentre analizza la stringa.</span><span class="sxs-lookup"><span data-stu-id="45002-701">The following example retains line information as it parses the string.</span></span>  
  
```csharp  
string markup =  
@"<Root>  
    <Child>  
        <GrandChild/>  
    </Child>  
</Root>";  
  
XElement xRoot = XElement.Parse(markup, LoadOptions.SetLineInfo);  
Console.WriteLine("{0}{1}{2}",  
    "Element Name".PadRight(20),  
    "Line".PadRight(5),  
    "Position");  
Console.WriteLine("{0}{1}{2}",  
    "------------".PadRight(20),  
    "----".PadRight(5),  
    "--------");  
foreach (XElement e in xRoot.DescendantsAndSelf())  
    Console.WriteLine("{0}{1}{2}",  
        ("".PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  
        ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5),  
        ((IXmlLineInfo)e).LinePosition);  
```  
  
```vb  
Dim markup As String = _  
"<Root>" & Environment.NewLine & _  
"    <Child>" & Environment.NewLine & _  
"        <GrandChild/>" & Environment.NewLine & _  
"    </Child>" & Environment.NewLine & _  
"</Root>"  
  
Dim xRoot As XElement = XElement.Parse(markup, LoadOptions.SetLineInfo)  
Console.WriteLine("{0}{1}{2}", _  
    "Element Name".PadRight(20), _  
    "Line".PadRight(5), _  
    "Position")  
Console.WriteLine("{0}{1}{2}", _  
    "------------".PadRight(20), _  
    "----".PadRight(5), _  
    "--------")  
For Each e As XElement In xRoot.DescendantsAndSelf()  
    Console.WriteLine("{0}{1}{2}", _  
        ("".PadRight(e.Ancestors().Count() * 2) & e.Name.ToString).PadRight(20), _  
        DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  
        DirectCast(e, IXmlLineInfo).LinePosition)  
Next  
```  
  
 <span data-ttu-id="45002-702">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-702">This example produces the following output:</span></span>  
  
```  
Element Name        Line Position  
------------        ---- --------  
Root                1    2  
  Child             2    6  
    GrandChild      3    10  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.RemoveAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45002-703">Rimuove i nodi e gli attributi da <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-703">Removes nodes and attributes from this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-704">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="45002-704">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-705">Nell'esempio seguente viene creato un elemento con attributi e gli elementi figlio.</span><span class="sxs-lookup"><span data-stu-id="45002-705">The following example creates an element with attributes and child elements.</span></span> <span data-ttu-id="45002-706">Quindi chiama questo metodo per rimuovere gli attributi e gli elementi figlio.</span><span class="sxs-lookup"><span data-stu-id="45002-706">It then calls this method to remove both the attributes and the child elements.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3)  
);  
root.RemoveAll();   // removes children elements and attributes of root  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
        <Root Attr1="1" Attr2="2" Attr3="3">  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
        </Root>  
  
root.RemoveAll()   ' removes children elements and attributes of root  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-707">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-707">This example produces the following output:</span></span>  
  
```xml  
<Root />  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="M:System.Xml.Linq.XContainer.RemoveNodes" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAttributes">
      <MemberSignature Language="C#" Value="public void RemoveAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.RemoveAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAttributes ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45002-708">Rimuove gli attributi di <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-708">Removes the attributes of this <see cref="T:System.Xml.Linq.XElement" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-709">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="45002-709">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-710">Nell'esempio seguente viene creato un elemento con attributi e gli elementi figlio.</span><span class="sxs-lookup"><span data-stu-id="45002-710">The following example creates an element with attributes and child elements.</span></span> <span data-ttu-id="45002-711">Viene quindi chiamato questo metodo per rimuovere gli attributi.</span><span class="sxs-lookup"><span data-stu-id="45002-711">It then calls this method to remove the attributes.</span></span> <span data-ttu-id="45002-712">Gli elementi figlio rimangono.</span><span class="sxs-lookup"><span data-stu-id="45002-712">The child elements remain.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3),  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3)  
);  
root.RemoveAttributes();  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root Attr1="1" Attr2="2" Attr3="3">  
        <Child1>1</Child1>  
        <Child2>2</Child2>  
        <Child3>3</Child3>  
     </Root>  
  
root.RemoveAttributes()  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-713">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-713">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child1>1</Child1>  
  <Child2>2</Child2>  
  <Child3>3</Child3>  
</Root>   
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAttributes" />
        <altmember cref="M:System.Xml.Linq.XElement.RemoveAll" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceAll">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45002-714">Sostituisce i nodi figlio e gli attributi di questo elemento con il contenuto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-714">Replaces the child nodes and the attributes of this element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-715">Questo metodo utilizza la semantica di snapshot, vale a dire, viene creata una copia separata del contenuto nuovo prima di sostituire il contenuto dell'elemento corrente con il nuovo contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-715">This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="45002-716">Ciò significa che è possibile eseguire query sul contenuto dell'elemento corrente e utilizzare i risultati della query come il nuovo contenuto specificato.</span><span class="sxs-lookup"><span data-stu-id="45002-716">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="45002-717">Per informazioni dettagliate sul contenuto valido che può essere passato a questa funzione, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="45002-717">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="45002-718">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="45002-718">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-719">Nell'esempio seguente passa i risultati di una query LINQ per questo metodo, sostituendo il contenuto di un elemento con i risultati della query.</span><span class="sxs-lookup"><span data-stu-id="45002-719">The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</span></span> <span data-ttu-id="45002-720">Viene eseguita una query elemento di cui viene sostituito il contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-720">It queries the element that is having its contents replaced.</span></span>  
  
```csharp  
XElement xmlTree = new XElement("Root",  
    new XElement("Data", 1),  
    new XElement("Data", 2),  
    new XElement("Data", 3),  
    new XElement("Data", 4),  
    new XElement("Data", 5)  
);  
  
Console.WriteLine(xmlTree);  
Console.WriteLine("-----");  
  
xmlTree.ReplaceAll(  
    from el in xmlTree.Elements()  
    where (int)el >= 3  
    select new XElement("NewData", (int)el)  
);  
  
Console.WriteLine(xmlTree);  
```  
  
```vb  
Dim xmlTree As XElement = _  
    <Root>  
        <Data>1</Data>  
        <Data>2</Data>  
        <Data>3</Data>  
        <Data>4</Data>  
        <Data>5</Data>  
    </Root>  
  
Console.WriteLine(xmlTree)  
Console.WriteLine("-----")  
  
xmlTree.ReplaceAll( _  
    From el In xmlTree.Elements _  
    Where el.Value >= 3 _  
    Select <NewData><%= el.Value %></NewData> _  
)  
  
Console.WriteLine(xmlTree)  
```  
  
 <span data-ttu-id="45002-721">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-721">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Data>1</Data>  
  <Data>2</Data>  
  <Data>3</Data>  
  <Data>4</Data>  
  <Data>5</Data>  
</Root>  
-----  
<Root>  
  <NewData>3</NewData>  
  <NewData>4</NewData>  
  <NewData>5</NewData>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceAll">
      <MemberSignature Language="C#" Value="public void ReplaceAll (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAll(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAll (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAll(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="45002-722">Contenuto che sostituisce i nodi figlio e gli attributi di questo elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-722">The content that will replace the child nodes and attributes of this element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-723">Sostituisce i nodi figlio e gli attributi di questo elemento con il contenuto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-723">Replaces the child nodes and the attributes of this element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-724">Questo metodo rimuove prima gli attributi e contenuto esistente.</span><span class="sxs-lookup"><span data-stu-id="45002-724">This method first removes existing content and attributes.</span></span> <span data-ttu-id="45002-725">Viene quindi aggiunto l'oggetto specificato `content`.</span><span class="sxs-lookup"><span data-stu-id="45002-725">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="45002-726">Questo metodo utilizza la semantica di snapshot, vale a dire, viene creata una copia separata del contenuto nuovo prima di sostituire il contenuto dell'elemento corrente con il nuovo contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-726">This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="45002-727">Ciò significa che è possibile eseguire query sul contenuto dell'elemento corrente e utilizzare i risultati della query come il nuovo contenuto specificato.</span><span class="sxs-lookup"><span data-stu-id="45002-727">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="45002-728">Per informazioni dettagliate sul contenuto valido che può essere passato a questa funzione, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="45002-728">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="45002-729">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="45002-729">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-730">Nell'esempio seguente viene utilizzato questo metodo.</span><span class="sxs-lookup"><span data-stu-id="45002-730">The following example uses this method.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
  
// ReplaceAll with an XElement object.  
root.ReplaceAll(new XElement("NewChild", "n"));  
Console.WriteLine(root);  
  
// ReplaceAll with an XAttribute object.  
root.ReplaceAll(new XAttribute("NewAttribute", "n"));  
Console.WriteLine(root);  
  
// ReplaceAll with a string.  
root.ReplaceAll("Some text");  
Console.WriteLine(root);  
  
// ReplaceAll with a double.  
double dbl = 12.345;  
root.ReplaceAll(dbl);  
Console.WriteLine(root);  
  
// ReplaceAll with a DateTime object.  
DateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);  
root.ReplaceAll(dt);  
Console.WriteLine(root);  
  
// ReplaceAll with a string array.  
// Any collection other than a collection of XElement or XAttribute objects  
// are converted to strings. The strings are concatenated and added.  
string[] stringArray = {  
    "abc",  
    "def",  
    "ghi"  
};  
root.ReplaceAll(stringArray);  
Console.WriteLine(root);  
  
// ReplaceAll with an array of XElement objects.  
XElement[] ellArray = {  
    new XElement("NewChild1", 1),  
    new XElement("NewChild2", 2),  
    new XElement("NewChild3", 3)  
};  
root.ReplaceAll(ellArray);  
Console.WriteLine(root);  
  
// ReplaceAll with an array of XAttribute objects.  
XAttribute[] attArray = {  
    new XAttribute("NewAtt1", 1),  
    new XAttribute("NewAtt2", 2),  
    new XAttribute("NewAtt3", 3)  
};  
root.ReplaceAll(attArray);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
    <Root>  
        <Child>child content</Child>  
    </Root>  
  
' ReplaceAll with an XElement object.  
root.ReplaceAll(<NewChild>n</NewChild>)  
Console.WriteLine(root)  
  
' ReplaceAll with an XAttribute object.  
root.ReplaceAll(New XAttribute("NewAttribute", "n"))  
Console.WriteLine(root)  
  
' ReplaceAll with a string.  
root.ReplaceAll("Some text")  
Console.WriteLine(root)  
  
' ReplaceAll with a double.  
Dim dbl As Double = 12.345  
root.ReplaceAll(dbl)  
Console.WriteLine(root)  
  
' ReplaceAll with a DateTime object.  
Dim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)  
root.ReplaceAll(dt)  
Console.WriteLine(root)  
  
' ReplaceAll with a string array.  
' Any collection other than a collection of XElement or XAttribute objects  
' are converted to strings. The strings are concatenated and added.  
Dim stringArray As String() = { _  
    "abc", _  
    "def", _  
    "ghi" _  
}  
root.ReplaceAll(stringArray)  
Console.WriteLine(root)  
  
' ReplaceAll with an array of XElement objects.  
Dim ellArray As XElement() = { _  
    New XElement("NewChild1", 1), _  
    New XElement("NewChild2", 2), _  
    New XElement("NewChild3", 3) _  
}  
root.ReplaceAll(ellArray)  
Console.WriteLine(root)  
  
' ReplaceAll with an array of XAttribute objects.  
Dim attArray As XAttribute() = { _  
New XAttribute("NewAtt1", 1), _  
New XAttribute("NewAtt2", 2), _  
New XAttribute("NewAtt3", 3) _  
}  
root.ReplaceAll(attArray)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-731">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-731">This example produces the following output:</span></span>  
  
```  
<Root>  
  <NewChild>n</NewChild>  
</Root>  
<Root NewAttribute="n" />  
<Root>Some text</Root>  
<Root>12.345</Root>  
<Root>2006-10-06T12:30:00</Root>  
<Root>abcdefghi</Root>  
<Root>  
  <NewChild1>1</NewChild1>  
  <NewChild2>2</NewChild2>  
  <NewChild3>3</NewChild3>  
</Root>  
<Root NewAtt1="1" NewAtt2="2" NewAtt3="3" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAll">
      <MemberSignature Language="C#" Value="public void ReplaceAll (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAll(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAll (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAll(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="45002-732">Elenco di parametri di oggetti contenuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-732">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-733">Sostituisce i nodi figlio e gli attributi di questo elemento con il contenuto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-733">Replaces the child nodes and the attributes of this element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-734">Questo metodo rimuove prima gli attributi e contenuto esistente.</span><span class="sxs-lookup"><span data-stu-id="45002-734">This method first removes existing content and attributes.</span></span> <span data-ttu-id="45002-735">Viene quindi aggiunto l'oggetto specificato `content`.</span><span class="sxs-lookup"><span data-stu-id="45002-735">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="45002-736">Questo metodo utilizza la semantica di snapshot, vale a dire, viene creata una copia separata del contenuto nuovo prima di sostituire il contenuto dell'elemento corrente con il nuovo contenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-736">This method uses snapshot semantics—that is, it creates a separate copy of the new content before replacing the contents of the current element with the new content.</span></span> <span data-ttu-id="45002-737">Ciò significa che è possibile eseguire query sul contenuto dell'elemento corrente e utilizzare i risultati della query come il nuovo contenuto specificato.</span><span class="sxs-lookup"><span data-stu-id="45002-737">This means that you can query the contents of the current element and use the results of the query as the specified new content.</span></span>  
  
 <span data-ttu-id="45002-738">Per informazioni dettagliate sul contenuto valido che può essere passato a questa funzione, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="45002-738">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="45002-739">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="45002-739">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-740">Nell'esempio seguente passa i risultati di una query LINQ per questo metodo, sostituendo il contenuto di un elemento con i risultati della query.</span><span class="sxs-lookup"><span data-stu-id="45002-740">The following example passes the results of a LINQ query to this method, replacing the contents of an element with the query results.</span></span>  
  
```csharp  
XElement xmlTree1 = new XElement("Root",  
    new XElement("Child1", 1),  
    new XElement("Child2", 2),  
    new XElement("Child3", 3),  
    new XElement("Child4", 4),  
    new XElement("Child5", 5),  
    new XElement("Child6", 6)  
);  
  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
  
root.ReplaceAll(  
    from el in xmlTree1.Elements()  
    where((int)el >= 3 && (int)el <= 5)  
    select el  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim xmlTree1 As XElement = _   
        <Root>  
            <Child1>1</Child1>  
            <Child2>2</Child2>  
            <Child3>3</Child3>  
            <Child4>4</Child4>  
            <Child5>5</Child5>  
            <Child6>6</Child6>  
        </Root>  
  
Dim root As XElement = <Root>  
                           <Child>child content</Child>  
                       </Root>  
  
root.ReplaceAll( _  
    From el In xmlTree1.Elements() _  
    Where el.Value >= 3 And el.Value <= 5 _  
    Select el _  
)  
  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-741">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-741">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child3>3</Child3>  
  <Child4>4</Child4>  
  <Child5>5</Child5>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReplaceAttributes">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45002-742">Sostituisce gli attributi di questo elemento con il contenuto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-742">Replaces the attributes of this element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-743">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="45002-743">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="45002-744">Per informazioni dettagliate sul contenuto valido che può essere passato a questa funzione, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="45002-744">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-745">Nell'esempio seguente viene creato un elemento con tre attributi.</span><span class="sxs-lookup"><span data-stu-id="45002-745">The following example creates an element with three attributes.</span></span> <span data-ttu-id="45002-746">Viene quindi utilizzato questo metodo per sostituire tutti gli attributi dell'elemento con un singolo attributo.</span><span class="sxs-lookup"><span data-stu-id="45002-746">It then uses this method to replace all of the attributes of the element with a single attribute.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes(New XAttribute("NewAtt1", 101))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-747">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-747">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReplaceAttributes">
      <MemberSignature Language="C#" Value="public void ReplaceAttributes (object content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAttributes(object content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAttributes (content As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAttributes(System::Object ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="45002-748">Contenuto che sostituisce gli attributi di questo elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-748">The content that will replace the attributes of this element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-749">Sostituisce gli attributi di questo elemento con il contenuto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-749">Replaces the attributes of this element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-750">Innanzitutto, questo metodo rimuove gli attributi esistenti.</span><span class="sxs-lookup"><span data-stu-id="45002-750">This method first removes existing attributes.</span></span> <span data-ttu-id="45002-751">Viene quindi aggiunto l'oggetto specificato `content`.</span><span class="sxs-lookup"><span data-stu-id="45002-751">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="45002-752">Per informazioni dettagliate sul contenuto valido che può essere passato a questa funzione, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="45002-752">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="45002-753">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="45002-753">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-754">Nell'esempio seguente viene creato un elemento con tre attributi.</span><span class="sxs-lookup"><span data-stu-id="45002-754">The following example creates an element with three attributes.</span></span> <span data-ttu-id="45002-755">Viene quindi utilizzato questo metodo per sostituire tutti gli attributi dell'elemento con un singolo attributo.</span><span class="sxs-lookup"><span data-stu-id="45002-755">It then uses this method to replace all of the attributes of the element with a single attribute.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes(New XAttribute("NewAtt1", 101))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-756">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-756">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAttributes">
      <MemberSignature Language="C#" Value="public void ReplaceAttributes (params object[] content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceAttributes(object[] content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceAttributes (ParamArray content As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceAttributes(... cli::array &lt;System::Object ^&gt; ^ content);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="content">
          <span data-ttu-id="45002-757">Elenco di parametri di oggetti contenuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-757">A parameter list of content objects.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-758">Sostituisce gli attributi di questo elemento con il contenuto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-758">Replaces the attributes of this element with the specified content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-759">Innanzitutto, questo metodo rimuove gli attributi esistenti.</span><span class="sxs-lookup"><span data-stu-id="45002-759">This method first removes existing attributes.</span></span> <span data-ttu-id="45002-760">Viene quindi aggiunto l'oggetto specificato `content`.</span><span class="sxs-lookup"><span data-stu-id="45002-760">It then adds the specified `content`.</span></span>  
  
 <span data-ttu-id="45002-761">Per informazioni dettagliate sul contenuto valido che può essere passato a questa funzione, vedere [valida contenuto di oggetti XElement e XDocument](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span><span class="sxs-lookup"><span data-stu-id="45002-761">For details about the valid content that can be passed to this function, see [Valid Content of XElement and XDocument Objects](http://msdn.microsoft.com/library/aee2d319-5c5f-4b99-9bb4-2f58232577ae).</span></span>  
  
 <span data-ttu-id="45002-762">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="45002-762">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-763">Nell'esempio seguente viene creato un elemento con tre attributi.</span><span class="sxs-lookup"><span data-stu-id="45002-763">The following example creates an element with three attributes.</span></span> <span data-ttu-id="45002-764">Gli attributi vengono quindi sostituiti con altri attributi.</span><span class="sxs-lookup"><span data-stu-id="45002-764">It then replaces the attributes with other attributes.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute("Att1", 1),  
    new XAttribute("Att2", 2),  
    new XAttribute("Att3", 3)  
);  
root.ReplaceAttributes(  
    new XAttribute("NewAtt1", 101),  
    new XAttribute("NewAtt2", 102),  
    new XAttribute("NewAtt3", 103)  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = <Root Att1="1" Att2="2" Att3="3"/>  
root.ReplaceAttributes( _  
New XAttribute("NewAtt1", 101), _  
New XAttribute("NewAtt2", 102), _  
New XAttribute("NewAtt3", 103))  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-765">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-765">This example produces the following output:</span></span>  
  
```xml  
<Root NewAtt1="101" NewAtt2="102" NewAtt3="103" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45002-766">Serializza l'albero XML sottostante dell'elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-766">Serialize this element's underlying XML tree.</span>
          </span>
          <span data-ttu-id="45002-767">L'output può essere salvato in un file oppure in un oggetto <see cref="T:System.Xml.XmlTextWriter" />, <see cref="T:System.IO.TextWriter" /> o <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-767">The output can be saved to a file, an <see cref="T:System.Xml.XmlTextWriter" />, a <see cref="T:System.IO.TextWriter" />, or an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
          <span data-ttu-id="45002-768">Facoltativamente, è possibile disabilitare la formattazione (rientro).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-768">Optionally, formatting (indenting) can be disabled.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="45002-769">Flusso in cui restituire l'oggetto <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-769">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-770">Restituisce l'oggetto <see cref="T:System.Xml.Linq.XElement" /> nell'oggetto <see cref="T:System.IO.Stream" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-770">Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-771">Il codice XML serializzato verrà aumentato il rientro.</span><span class="sxs-lookup"><span data-stu-id="45002-771">The serialized XML will be indented.</span></span> <span data-ttu-id="45002-772">Verranno rimossi tutti gli spazi vuoti non significativi e verrà aggiunto uno spazio vuoto aggiuntivo in modo che il codice XML rientrato correttamente.</span><span class="sxs-lookup"><span data-stu-id="45002-772">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="45002-773">Il comportamento di questo metodo è che gli spazi vuoti non significativi non verranno mantenuti.</span><span class="sxs-lookup"><span data-stu-id="45002-773">The behavior of this method is that insignificant white space will not be preserved.</span></span>  
  
 <span data-ttu-id="45002-774">Se si desidera controllare lo spazio vuoto, utilizzare l'overload di <xref:System.Xml.Linq.XElement.Save%2A> che accetta <xref:System.Xml.Linq.SaveOptions> come parametro.</span><span class="sxs-lookup"><span data-stu-id="45002-774">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that takes <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="45002-775">Utilizzare il <xref:System.Xml.Linq.SaveOptions.DisableFormatting> opzione per salvare il codice XML.</span><span class="sxs-lookup"><span data-stu-id="45002-775">Use the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> option to save unindented XML.</span></span> <span data-ttu-id="45002-776">In questo modo il writer scriverà tutti gli spazi vuoti, esattamente come rappresentato nella struttura ad albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-776">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="45002-777">Utilizzare il <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> opzione se si desidera rimuovere le dichiarazioni dello spazio dei nomi duplicati.</span><span class="sxs-lookup"><span data-stu-id="45002-777">Use the <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <span data-ttu-id="45002-778">Oggetto <see cref="T:System.IO.TextWriter" /> in cui verrà scritto l'oggetto <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-778">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-779">Serializza questo elemento in <see cref="T:System.IO.TextWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-779">Serialize this element to a <see cref="T:System.IO.TextWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-780">Il codice XML serializzato verrà aumentato il rientro.</span><span class="sxs-lookup"><span data-stu-id="45002-780">The serialized XML will be indented.</span></span> <span data-ttu-id="45002-781">Verranno rimossi tutti gli spazi vuoti non significativi e verrà aggiunto uno spazio vuoto aggiuntivo in modo che il codice XML rientrato correttamente.</span><span class="sxs-lookup"><span data-stu-id="45002-781">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="45002-782">Il comportamento di questo metodo è che lo spazio vuoto non verranno mantenuto.</span><span class="sxs-lookup"><span data-stu-id="45002-782">The behavior of this method is that white space will not be preserved.</span></span>  
  
 <span data-ttu-id="45002-783">Se si desidera controllare lo spazio vuoto, utilizzare l'overload di <xref:System.Xml.Linq.XElement.Save%2A> che consente di specificare <xref:System.Xml.Linq.SaveOptions> come parametro.</span><span class="sxs-lookup"><span data-stu-id="45002-783">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="45002-784">Per ulteriori informazioni, vedere [conservare lo spazio vuoto durante il caricamento o l'analisi XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [conservare gli spazi vuoti durante la serializzazione](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="45002-784">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-785">Nell'esempio seguente viene creato un <xref:System.Xml.Linq.XElement>, Salva il documento a un <xref:System.IO.StringWriter>e quindi Visualizza la stringa nella console.</span><span class="sxs-lookup"><span data-stu-id="45002-785">The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a <xref:System.IO.StringWriter>, and then prints the string to the console.</span></span>  
  
```csharp  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
using (StringWriter sw = new StringWriter()) {  
    root.Save(sw);  
    Console.WriteLine(sw.ToString());  
}  
```  
  
```vb  
Dim root As XElement = <Root><Child> Text </Child></Root>  
Using sw = New StringWriter()  
    root.Save(sw)  
    Console.WriteLine(sw.ToString())  
End Using  
```  
  
 <span data-ttu-id="45002-786">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-786">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="45002-787">Oggetto <see cref="T:System.String" /> che contiene il nome del file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-787">A <see cref="T:System.String" /> that contains the name of the file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-788">Serializza questo elemento in un file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-788">Serialize this element to a file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-789">Il codice XML serializzato verrà aumentato il rientro.</span><span class="sxs-lookup"><span data-stu-id="45002-789">The serialized XML will be indented.</span></span> <span data-ttu-id="45002-790">Verranno rimossi tutti gli spazi vuoti non significativi e verrà aggiunto uno spazio vuoto aggiuntivo in modo che il codice XML rientrato correttamente.</span><span class="sxs-lookup"><span data-stu-id="45002-790">All insignificant white space will be removed, and additional white space will be added so that the XML will be properly indented.</span></span> <span data-ttu-id="45002-791">Il comportamento di questo metodo è che lo spazio vuoto non significativo nodi dell'albero XML non verranno mantenuti.</span><span class="sxs-lookup"><span data-stu-id="45002-791">The behavior of this method is that insignificant white space nodes in the XML tree will not be preserved.</span></span>  
  
 <span data-ttu-id="45002-792">Se si desidera controllare lo spazio vuoto, utilizzare l'overload di <xref:System.Xml.Linq.XElement.Save%2A> che consente di specificare <xref:System.Xml.Linq.SaveOptions> come parametro.</span><span class="sxs-lookup"><span data-stu-id="45002-792">If you want to control white space, use the overload of <xref:System.Xml.Linq.XElement.Save%2A> that allows you to specify <xref:System.Xml.Linq.SaveOptions> as a parameter.</span></span> <span data-ttu-id="45002-793">Per ulteriori informazioni, vedere [conservare lo spazio vuoto durante il caricamento o l'analisi XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [conservare gli spazi vuoti durante la serializzazione](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="45002-793">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-794">Nell'esempio seguente viene creato un <xref:System.Xml.Linq.XElement>, Salva il documento in un file e quindi stampato il file nella console.</span><span class="sxs-lookup"><span data-stu-id="45002-794">The following example creates an <xref:System.Xml.Linq.XElement>, saves the document to a file, and then prints the file to the console.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
root.Save("Root.xml");  
string str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Child>child content</Child>  
        </Root>  
root.Save("Root.xml")  
Dim Str As String = File.ReadAllText("Root.xml")  
Console.WriteLine(Str)  
```  
  
 <span data-ttu-id="45002-795">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-795">This example produces the following output:</span></span>  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child>child content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="45002-796">Oggetto <see cref="T:System.Xml.XmlWriter" /> in cui verrà scritto l'oggetto <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-796">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-797">Serializza questo elemento in <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-797">Serialize this element to an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="45002-798">Nell'esempio seguente viene illustrato come salvare <xref:System.Xml.Linq.XElement> in <xref:System.Xml.XmlWriter>.</span><span class="sxs-lookup"><span data-stu-id="45002-798">The following example shows how to save an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    XElement root = new XElement("Root",  
        new XElement("Child", "child content")  
    );  
    root.Save(xw);  
}  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
Using xw = XmlWriter.Create(sb, xws)  
    Dim root As XElement = <Root>  
                               <Child>child content</Child>  
                           </Root>  
    root.Save(xw)  
End Using  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="45002-799">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-799">This example produces the following output:</span></span>  
  
```xml  
<Root><Child>child content</Child></Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="45002-800">Flusso in cui restituire l'oggetto <see cref="T:System.Xml.Linq.XElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-800">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="45002-801">Oggetto <see cref="T:System.Xml.Linq.SaveOptions" /> che specifica il comportamento della formattazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-801">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-802">Restituisce l'oggetto <see cref="T:System.Xml.Linq.XElement" /> nell'oggetto <see cref="T:System.IO.Stream" /> specificato, indicando facoltativamente il comportamento di formattazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-802">Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-803">Per impostazione predefinita il `options` sono impostate su <xref:System.Xml.Linq.SaveOptions.None>.</span><span class="sxs-lookup"><span data-stu-id="45002-803">By default the `options` are set to <xref:System.Xml.Linq.SaveOptions.None>.</span></span> <span data-ttu-id="45002-804">Questa opzione verrà rimuovere tutti gli spazi vuoti non significativi estranei e aggiungere gli spazi vuoti non significativi appropriato in modo che il codice XML rientrato correttamente.</span><span class="sxs-lookup"><span data-stu-id="45002-804">This option will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span>  
  
 <span data-ttu-id="45002-805">Se si desidera salvare il codice XML, specificare il <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag per `options`.</span><span class="sxs-lookup"><span data-stu-id="45002-805">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="45002-806">In questo modo il writer scriverà tutti gli spazi vuoti, esattamente come rappresentato nella struttura ad albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-806">This will cause the writer to write all white spaces exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="45002-807">Utilizzare <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> opzione se si desidera rimuovere le dichiarazioni dello spazio dei nomi duplicati.</span><span class="sxs-lookup"><span data-stu-id="45002-807">Use <xref:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces> option if you want to remove duplicate namespace declarations.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="textWriter">
          <span data-ttu-id="45002-808">Oggetto <see cref="T:System.IO.TextWriter" /> nel quale deve essere restituito il codice XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-808">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="45002-809">Oggetto <see cref="T:System.Xml.Linq.SaveOptions" /> che specifica il comportamento di formattazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-809">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-810">Serializza questo elemento in <see cref="T:System.IO.TextWriter" />, facoltativamente disabilitando la formattazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-810">Serialize this element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-811">Se si desidera salvare il codice XML, specificare il <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag per `options`.</span><span class="sxs-lookup"><span data-stu-id="45002-811">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="45002-812">In questo modo il writer scriverà tutti gli spazi vuoti, esattamente come rappresentato nella struttura ad albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-812">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="45002-813">Se si desidera salvare il codice XML rientrato, non si specifica il <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag per `options`.</span><span class="sxs-lookup"><span data-stu-id="45002-813">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="45002-814">Questa operazione rimuoverà tutti gli spazi vuoti non significativi estranei e aggiungere gli spazi vuoti non significativi appropriato in modo che il codice XML rientrato correttamente.</span><span class="sxs-lookup"><span data-stu-id="45002-814">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="45002-815">Questo è il comportamento predefinito e il comportamento degli overload di <xref:System.Xml.Linq.XElement.Save%2A> metodi che non accettano `options` come parametro.</span><span class="sxs-lookup"><span data-stu-id="45002-815">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="45002-816">Per ulteriori informazioni, vedere [conservare lo spazio vuoto durante il caricamento o l'analisi XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [conservare gli spazi vuoti durante la serializzazione](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="45002-816">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-817">Nell'esempio seguente mostra due usi di questo metodo.</span><span class="sxs-lookup"><span data-stu-id="45002-817">The following example shows two uses of this method.</span></span> <span data-ttu-id="45002-818">Il primo utilizzo mantiene gli spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="45002-818">The first use preserves white space.</span></span> <span data-ttu-id="45002-819">Il secondo serializza il <xref:System.Xml.Linq.XElement> con la formattazione.</span><span class="sxs-lookup"><span data-stu-id="45002-819">The second serializes the <xref:System.Xml.Linq.XElement> with formatting.</span></span> <span data-ttu-id="45002-820">Poiché il documento non ha spazio vuoto come costruito, mantenimento dello spazio vuoto restituisce il codice XML senza alcun rientro.</span><span class="sxs-lookup"><span data-stu-id="45002-820">Because the document has no white space in it as constructed, preserving white space outputs the XML without any indenting.</span></span>  
  
```csharp  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
  
using (StringWriter sw = new StringWriter())  
{  
    root.Save(sw, SaveOptions.DisableFormatting);  
    Console.WriteLine(sw.ToString());  
}  
  
Console.WriteLine("=====");  
  
using (StringWriter sw = new StringWriter())  
{  
    root.Save(sw, SaveOptions.None);  
    Console.WriteLine(sw.ToString());  
}  
```  
  
```vb  
Dim root As XElement = <Root><Child> Text </Child></Root>  
  
Using sw = New StringWriter()  
    root.Save(sw, SaveOptions.DisableFormatting)  
    Console.WriteLine(sw.ToString())  
End Using  
  
Console.WriteLine("=====")  
  
Using sw = New StringWriter()  
    root.Save(sw, SaveOptions.None)  
    Console.WriteLine(sw.ToString())  
End Using  
```  
  
 <span data-ttu-id="45002-821">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-821">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-16"?><Root><Child> Text </Child></Root>  
=====  
<?xml version="1.0" encoding="utf-16"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string fileName, System.Xml.Linq.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string fileName, valuetype System.Xml.Linq.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (fileName As String, options As SaveOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ fileName, System::Xml::Linq::SaveOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="45002-822">Oggetto <see cref="T:System.String" /> che contiene il nome del file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-822">A <see cref="T:System.String" /> that contains the name of the file.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="45002-823">Oggetto <see cref="T:System.Xml.Linq.SaveOptions" /> che specifica il comportamento di formattazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-823">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-824">Serializza questo elemento in un file, facoltativamente disabilitando la formattazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-824">Serialize this element to a file, optionally disabling formatting.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-825">Se si desidera salvare il codice XML, specificare il <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag per `options`.</span><span class="sxs-lookup"><span data-stu-id="45002-825">If you want to save unindented XML, specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="45002-826">In questo modo il writer scriverà tutti gli spazi vuoti, esattamente come rappresentato nella struttura ad albero XML.</span><span class="sxs-lookup"><span data-stu-id="45002-826">This will cause the writer to write all white space exactly as represented in the XML tree.</span></span>  
  
 <span data-ttu-id="45002-827">Se si desidera salvare il codice XML rientrato, non si specifica il <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag per `options`.</span><span class="sxs-lookup"><span data-stu-id="45002-827">If you want to save indented XML, do not specify the <xref:System.Xml.Linq.SaveOptions.DisableFormatting> flag for `options`.</span></span> <span data-ttu-id="45002-828">Questa operazione rimuoverà tutti gli spazi vuoti non significativi estranei e aggiungere gli spazi vuoti non significativi appropriato in modo che il codice XML rientrato correttamente.</span><span class="sxs-lookup"><span data-stu-id="45002-828">This will remove all extraneous insignificant white space, and add appropriate insignificant white space so that the XML is properly indented.</span></span> <span data-ttu-id="45002-829">Questo è il comportamento predefinito e il comportamento degli overload di <xref:System.Xml.Linq.XElement.Save%2A> metodi che non accettano `options` come parametro.</span><span class="sxs-lookup"><span data-stu-id="45002-829">This is the default behavior, and the behavior of the overloads of the <xref:System.Xml.Linq.XElement.Save%2A> methods that do not take `options` as a parameter.</span></span>  
  
 <span data-ttu-id="45002-830">Per ulteriori informazioni, vedere [conservare lo spazio vuoto durante il caricamento o l'analisi XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) e [conservare gli spazi vuoti durante la serializzazione](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span><span class="sxs-lookup"><span data-stu-id="45002-830">For more information, see [Preserving White Space while Loading or Parsing XML](http://msdn.microsoft.com/library/093a7169-a04e-4638-b08c-d1cb98aa650d) and [Preserving White Space While Serializing](http://msdn.microsoft.com/library/fb146217-0a49-4efc-ac84-7265b91d3939).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-831">Nell'esempio seguente mostra due usi di questo metodo.</span><span class="sxs-lookup"><span data-stu-id="45002-831">The following example shows two uses of this method.</span></span> <span data-ttu-id="45002-832">Il primo utilizzo mantiene gli spazi vuoti.</span><span class="sxs-lookup"><span data-stu-id="45002-832">The first use preserves white space.</span></span> <span data-ttu-id="45002-833">Il secondo serializza il <xref:System.Xml.Linq.XElement> con la formattazione.</span><span class="sxs-lookup"><span data-stu-id="45002-833">The second one serializes the <xref:System.Xml.Linq.XElement> with formatting.</span></span>  
  
```csharp  
string str;  
XElement root = XElement.Parse(@"<Root> <Child> Text </Child> </Root>");  
  
root.Save("Root.xml", SaveOptions.DisableFormatting);  
str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
  
Console.WriteLine("=====");  
  
root.Save("Root.xml", SaveOptions.None);  
str = File.ReadAllText("Root.xml");  
Console.WriteLine(str);  
```  
  
```vb  
Dim str As String  
Dim root As XElement = <Root><Child> Text </Child></Root>  
  
root.Save("Root.xml", SaveOptions.DisableFormatting)  
str = File.ReadAllText("Root.xml")  
Console.WriteLine(str)  
  
Console.WriteLine("=====")  
  
root.Save("Root.xml", SaveOptions.None)  
str = File.ReadAllText("Root.xml")  
Console.WriteLine(str)  
```  
  
 <span data-ttu-id="45002-834">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-834">This example produces the following output:</span></span>  
  
```  
<?xml version="1.0" encoding="utf-8"?><Root><Child> Text </Child></Root>  
=====  
<?xml version="1.0" encoding="utf-8"?>  
<Root>  
  <Child> Text </Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.Stream stream, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.Stream stream, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::Stream ^ stream, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveAsync (System.IO.TextWriter textWriter, System.Xml.Linq.SaveOptions options, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SaveAsync(class System.IO.TextWriter textWriter, valuetype System.Xml.Linq.SaveOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ SaveAsync(System::IO::TextWriter ^ textWriter, System::Xml::Linq::SaveOptions options, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.Xml.Linq.SaveOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="textWriter">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttributeValue">
      <MemberSignature Language="C#" Value="public void SetAttributeValue (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAttributeValue(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttributeValue (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAttributeValue(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="45002-835">Oggetto <see cref="T:System.Xml.Linq.XName" /> che contiene il nome dell'attributo da cambiare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-835">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the attribute to change.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="45002-836">Valore da assegnare all'attributo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-836">The value to assign to the attribute.</span>
          </span>
          <span data-ttu-id="45002-837">L'attributo viene rimosso se il valore è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-837">The attribute is removed if the value is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45002-838">In caso contrario, il valore viene convertito in una rappresentazione di stringa e assegnato alla proprietà <see cref="P:System.Xml.Linq.XAttribute.Value" /> dell'attributo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-838">Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value" /> property of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-839">Imposta il valore di un attributo oppure lo aggiunge o lo rimuove.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-839">Sets the value of an attribute, adds an attribute, or removes an attribute.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-840">Questo metodo è progettato per facilitare la conservazione di un elenco di coppie nome/valore come un set di attributi.</span><span class="sxs-lookup"><span data-stu-id="45002-840">This method is designed to make it easy to maintain a list of name/value pairs as a set of attributes.</span></span> <span data-ttu-id="45002-841">Quando si gestisce l'elenco, è necessario aggiungere coppie, coppie di modificare o eliminare coppie.</span><span class="sxs-lookup"><span data-stu-id="45002-841">When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</span></span> <span data-ttu-id="45002-842">Se si chiama questo metodo passando un nome che non esiste come un attributo, questo metodo crea un attributo per l'utente.</span><span class="sxs-lookup"><span data-stu-id="45002-842">If you call this method passing a name that does not exist as an attribute, this method creates an attribute for you.</span></span> <span data-ttu-id="45002-843">Se si chiama questo metodo passando il nome di un attributo esistente, questo metodo consente di modificare il valore dell'attributo sul valore specificato.</span><span class="sxs-lookup"><span data-stu-id="45002-843">If you call this method passing the name of an existing attribute, this method modifies the value of the attribute to the value that you specify.</span></span> <span data-ttu-id="45002-844">Se si passa `null` per `value`, questo metodo rimuove l'attributo.</span><span class="sxs-lookup"><span data-stu-id="45002-844">If you pass `null` for `value`, this method removes the attribute.</span></span>  
  
 <span data-ttu-id="45002-845">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="45002-845">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="45002-846">Il valore viene assegnato all'attributo con il nome specificato.</span><span class="sxs-lookup"><span data-stu-id="45002-846">The value is assigned to the attribute with the specified name.</span></span> <span data-ttu-id="45002-847">Se non esiste alcun attributo con il nome specificato, viene aggiunto un nuovo attributo.</span><span class="sxs-lookup"><span data-stu-id="45002-847">If no attribute with the specified name exists, a new attribute is added.</span></span> <span data-ttu-id="45002-848">Se il valore è `null`, l'attributo con il nome specificato, se presente, viene eliminato.</span><span class="sxs-lookup"><span data-stu-id="45002-848">If the value is `null`, the attribute with the specified name, if any, is deleted.</span></span>  
  
 <span data-ttu-id="45002-849">Per ulteriori informazioni, vedere [gestione di coppie nome/valore](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span><span class="sxs-lookup"><span data-stu-id="45002-849">For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-850">Nell'esempio seguente viene creato un elemento con un attributo.</span><span class="sxs-lookup"><span data-stu-id="45002-850">The following example creates an element with an attribute.</span></span> <span data-ttu-id="45002-851">Viene quindi utilizzato questo metodo per sostituire il contenuto dell'attributo.</span><span class="sxs-lookup"><span data-stu-id="45002-851">It then uses this method to replace the content of the attribute.</span></span>  
  
```csharp  
// Create an element with no content.  
XElement root = new XElement("Root");  
  
// Add some name/value pairs.  
root.SetAttributeValue("Att1", 1);  
root.SetAttributeValue("Att2", 2);  
root.SetAttributeValue("Att3", 3);  
Console.WriteLine(root);  
  
// Modify one of the name/value pairs.  
root.SetAttributeValue("Att2", 22);  
Console.WriteLine(root);  
  
// Remove one of the name/value pairs.  
root.SetAttributeValue("Att3", null);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an element with no content.  
Dim root As XElement = <Root/>  
  
' Add some name/value pairs.  
root.SetAttributeValue("Att1", 1)  
root.SetAttributeValue("Att2", 2)  
root.SetAttributeValue("Att3", 3)  
Console.WriteLine(root)  
  
' Modify one of the name/value pairs.  
root.SetAttributeValue("Att2", 22)  
Console.WriteLine(root)  
  
' Remove one of the name/value pairs.  
root.SetAttributeValue("Att3", Nothing)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-852">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-852">This example produces the following output:</span></span>  
  
```  
<Root Att1="1" Att2="2" Att3="3" />  
<Root Att1="1" Att2="22" Att3="3" />  
<Root Att1="1" Att2="22" />  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45002-853">
            <paramref name="value" /> è un'istanza di <see cref="T:System.Xml.Linq.XObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-853">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetElementValue">
      <MemberSignature Language="C#" Value="public void SetElementValue (System.Xml.Linq.XName name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetElementValue(class System.Xml.Linq.XName name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetElementValue (name As XName, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetElementValue(System::Xml::Linq::XName ^ name, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="45002-854">Oggetto <see cref="T:System.Xml.Linq.XName" /> che contiene il nome dell'elemento figlio da cambiare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-854">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the child element to change.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="45002-855">Valore da assegnare all'elemento figlio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-855">The value to assign to the child element.</span>
          </span>
          <span data-ttu-id="45002-856">L'elemento figlio viene rimosso se il valore è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-856">The child element is removed if the value is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45002-857">In caso contrario, il valore viene convertito in una rappresentazione di stringa e assegnato alla proprietà <see cref="P:System.Xml.Linq.XElement.Value" /> dell'elemento figlio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-857">Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property of the child element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-858">Imposta il valore di un elemento figlio oppure lo aggiunge o lo rimuove.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-858">Sets the value of a child element, adds a child element, or removes a child element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-859">Questo metodo è progettato per facilitare la conservazione di un elenco di coppie nome/valore come un set di elementi figlio.</span><span class="sxs-lookup"><span data-stu-id="45002-859">This method is designed to make it easy to maintain a list of name/value pairs as a set of children elements.</span></span> <span data-ttu-id="45002-860">Quando si gestisce l'elenco, è necessario aggiungere coppie, coppie di modificare o eliminare coppie.</span><span class="sxs-lookup"><span data-stu-id="45002-860">When maintaining the list, you need to add pairs, modify pairs, or delete pairs.</span></span> <span data-ttu-id="45002-861">Se si chiama questo metodo passando un nome che non esiste come elemento figlio, questo metodo crea un elemento figlio per l'utente.</span><span class="sxs-lookup"><span data-stu-id="45002-861">If you call this method passing a name that does not exist as a child element, this method creates a child element for you.</span></span> <span data-ttu-id="45002-862">Se si chiama questo metodo passando il nome di un elemento figlio esistente, questo metodo consente di modificare il valore dell'elemento figlio per il valore specificato.</span><span class="sxs-lookup"><span data-stu-id="45002-862">If you call this method passing the name of an existing child element, this method modifies the value of the child element to the value that you specify.</span></span> <span data-ttu-id="45002-863">Se si passa `null` per `value`, questo metodo rimuove l'elemento figlio.</span><span class="sxs-lookup"><span data-stu-id="45002-863">If you pass `null` for `value`, this method removes the child element.</span></span>  
  
 <span data-ttu-id="45002-864">Questo metodo genererà gli eventi.</span><span class="sxs-lookup"><span data-stu-id="45002-864">This method will raise events.</span></span>  
  
 <span data-ttu-id="45002-865">Il valore viene assegnato al primo elemento figlio con il nome specificato.</span><span class="sxs-lookup"><span data-stu-id="45002-865">The value is assigned to the first child element with the specified name.</span></span> <span data-ttu-id="45002-866">Se l'elemento figlio con il nome specificato non esiste, viene aggiunto un nuovo elemento figlio.</span><span class="sxs-lookup"><span data-stu-id="45002-866">If no child element with the specified name exists, a new child element is added.</span></span> <span data-ttu-id="45002-867">Se il valore è null, il primo elemento figlio con il nome specificato, se presente, viene eliminato.</span><span class="sxs-lookup"><span data-stu-id="45002-867">If the value is null, the first child element with the specified name, if any, is deleted.</span></span>  
  
 <span data-ttu-id="45002-868">Questo metodo non aggiunge attributi o nodi figlio per l'elemento figlio specificato.</span><span class="sxs-lookup"><span data-stu-id="45002-868">This method does not add child nodes or attributes to the specified child element.</span></span> <span data-ttu-id="45002-869">Questo metodo genera un'eccezione se qualsiasi oggetto che deriva da <xref:System.Xml.Linq.XObject> viene passato come `value`.</span><span class="sxs-lookup"><span data-stu-id="45002-869">This method throws an exception if any object that derives from <xref:System.Xml.Linq.XObject> is passed as `value`.</span></span>  
  
 <span data-ttu-id="45002-870">Per ulteriori informazioni, vedere [gestione di coppie nome/valore](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span><span class="sxs-lookup"><span data-stu-id="45002-870">For more information, see [Maintaining Name/Value Pairs](http://msdn.microsoft.com/library/fe9798bf-b5e2-4a3c-a86c-7f8638912691).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-871">Nell'esempio seguente viene creato un elemento con un elemento figlio.</span><span class="sxs-lookup"><span data-stu-id="45002-871">The following example creates an element with a child element.</span></span> <span data-ttu-id="45002-872">Viene quindi utilizzato questo metodo per impostare il valore dell'elemento figlio.</span><span class="sxs-lookup"><span data-stu-id="45002-872">It then uses this method to set the value of the child element.</span></span>  
  
```csharp  
// Create an element with no content  
XElement root = new XElement("Root");  
  
// Add some name/value pairs.  
root.SetElementValue("Ele1", 1);  
root.SetElementValue("Ele2", 2);  
root.SetElementValue("Ele3", 3);  
Console.WriteLine(root);  
  
// Modify one of the name/value pairs.  
root.SetElementValue("Ele2", 22);  
Console.WriteLine(root);  
  
// Remove one of the name/value pairs.  
root.SetElementValue("Ele3", null);  
Console.WriteLine(root);  
```  
  
```vb  
' Create an element with no content.  
Dim root As XElement = <Root/>  
  
' Add some name/value pairs.  
root.SetElementValue("Ele1", 1)  
root.SetElementValue("Ele2", 2)  
root.SetElementValue("Ele3", 3)  
Console.WriteLine(root)  
  
' Modify one of the name/value pairs.  
root.SetElementValue("Ele2", 22)  
Console.WriteLine(root)  
  
' Remove one of the name/value pairs.  
root.SetElementValue("Ele3", Nothing)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-873">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-873">This example produces the following output:</span></span>  
  
```  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>2</Ele2>  
  <Ele3>3</Ele3>  
</Root>  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>22</Ele2>  
  <Ele3>3</Ele3>  
</Root>  
<Root>  
  <Ele1>1</Ele1>  
  <Ele2>22</Ele2>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45002-874">
            <paramref name="value" /> è un'istanza di <see cref="T:System.Xml.Linq.XObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-874">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="45002-875">Valore da assegnare all'elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-875">The value to assign to this element.</span>
          </span>
          <span data-ttu-id="45002-876">Il valore viene convertito in una rappresentazione di stringa e assegnato alla proprietà <see cref="P:System.Xml.Linq.XElement.Value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-876">The value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-877">Imposta il valore dell'elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-877">Sets the value of this element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-878">Questo metodo genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="45002-878">This method will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="45002-879">Non è possibile passare un'istanza di una classe che deriva da <xref:System.Xml.Linq.XObject>, ad esempio <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="45002-879">It is invalid to pass an instance of a class that derives from <xref:System.Xml.Linq.XObject>, such as <xref:System.Xml.Linq.XElement>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-880">Nell'esempio seguente viene creato un elemento che contiene un elemento figlio.</span><span class="sxs-lookup"><span data-stu-id="45002-880">The following example creates an element that contains a child element.</span></span> <span data-ttu-id="45002-881">Viene quindi impostato il valore dell'elemento utilizzando questo metodo.</span><span class="sxs-lookup"><span data-stu-id="45002-881">It then sets the value of the element using this method.</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XElement("Child", "child content")  
);  
root.SetValue("new content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _   
        <Root>  
            <Child>child content</Child>  
        </Root>  
  
root.SetValue("new content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="45002-882">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-882">This example produces the following output:</span></span>  
  
```xml  
<Root>new content</Root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45002-883">L'elemento <paramref name="value" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-883">The <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45002-884">Il <paramref name="value" /> è un <see cref="T:System.Xml.Linq.XObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-884">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)" />
        <altmember cref="M:System.Xml.Linq.XElement.SetValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45002-885">Ottiene una definizione XML Schema che descrive la rappresentazione XML di questo oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-885">Gets an XML schema definition that describes the XML representation of this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45002-886">Oggetto <see cref="T:System.Xml.Schema.XmlSchema" /> che descrive la rappresentazione XML dell'oggetto prodotto dal metodo <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> e usato dal metodo <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-886">An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-887">Questo metodo fa parte dell'implementazione del <xref:System.Xml.Serialization.IXmlSerializable> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="45002-887">This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 <span data-ttu-id="45002-888">Questo metodo viene utilizzato internamente per la serializzazione di oggetti grafici contenenti LINQ agli oggetti XML.</span><span class="sxs-lookup"><span data-stu-id="45002-888">This method is used internally for serializing object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="45002-889">Per un esempio di serializzazione di un oggetto grafico che contiene XML oggetti LINQ to, vedere [Serializing oggetti grafici che contengono oggetti XElement](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span><span class="sxs-lookup"><span data-stu-id="45002-889">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="45002-890">Oggetto <see cref="T:System.Xml.XmlReader" /> da cui viene deserializzato l'oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-890">The <see cref="T:System.Xml.XmlReader" /> from which the object is deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-891">Genera un oggetto dalla relativa rappresentazione XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-891">Generates an object from its XML representation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-892">Questo metodo fa parte dell'implementazione del <xref:System.Xml.Serialization.IXmlSerializable> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="45002-892">This method is part of implementation of the <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 <span data-ttu-id="45002-893">Questo metodo viene utilizzato internamente per la serializzazione di oggetti grafici contenenti LINQ agli oggetti XML.</span><span class="sxs-lookup"><span data-stu-id="45002-893">This method is used internally for serializing object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="45002-894">Per un esempio di serializzazione di un oggetto grafico che contiene XML oggetti LINQ to, vedere [Serializing oggetti grafici che contengono oggetti XElement](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span><span class="sxs-lookup"><span data-stu-id="45002-894">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="45002-895">Oggetto <see cref="T:System.Xml.XmlWriter" /> in cui viene serializzato l'oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-895">The <see cref="T:System.Xml.XmlWriter" /> to which this object is serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-896">Converte un oggetto nella relativa rappresentazione XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-896">Converts an object into its XML representation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-897">Questo metodo viene utilizzato internamente per il marshalling di oggetti grafici contenenti LINQ agli oggetti XML.</span><span class="sxs-lookup"><span data-stu-id="45002-897">This method is used internally for marshaling object graphs that contain LINQ to XML objects.</span></span> <span data-ttu-id="45002-898">Per un esempio di serializzazione di un oggetto grafico che contiene XML oggetti LINQ to, vedere [Serializing oggetti grafici che contengono oggetti XElement](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span><span class="sxs-lookup"><span data-stu-id="45002-898">For an example of serializing an object graph that contains LINQ to XML objects, see [Serializing Object Graphs that Contain XElement Objects](http://msdn.microsoft.com/library/443d7904-a6f0-450a-b1a4-5d7ed869d1d5).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XElement.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45002-899">Ottiene o imposta i contenuti di testo concatenati di questo elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-899">Gets or sets the concatenated text contents of this element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45002-900">Oggetto <see cref="T:System.String" /> che contiene tutti i contenuti di testo dell'elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-900">A <see cref="T:System.String" /> that contains all of the text content of this element.</span>
          </span>
          <span data-ttu-id="45002-901">Se sono presenti più nodi testo, saranno concatenati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-901">If there are multiple text nodes, they will be concatenated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45002-902">Utilizzare questa proprietà, è possibile ottenere o impostare il valore di un elemento.</span><span class="sxs-lookup"><span data-stu-id="45002-902">Using this property, you can get or set the value of an element.</span></span>  
  
 <span data-ttu-id="45002-903">Impostazione di questa proprietà genererà il <xref:System.Xml.Linq.XObject.Changed> e <xref:System.Xml.Linq.XObject.Changing> eventi.</span><span class="sxs-lookup"><span data-stu-id="45002-903">Setting this property will raise the <xref:System.Xml.Linq.XObject.Changed> and the <xref:System.Xml.Linq.XObject.Changing> events.</span></span>  
  
 <span data-ttu-id="45002-904">Se si desidera ottenere il valore di un elemento ma non si è certi che sia presente, è preferibile usare gli operatori di conversione esplicita e assegnare l'elemento a un tipo nullable, ad esempio `string` o <xref:System.Nullable%601> di <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="45002-904">If you want to get the value of an element but you are not sure that it exists, it is more convenient to use the explicit conversion operators, and assign the element to a nullable type such as `string` or <xref:System.Nullable%601> of <xref:System.Int32>.</span></span> <span data-ttu-id="45002-905">Se l'elemento non esiste, il tipo che ammette valori null è impostato su `null`.</span><span class="sxs-lookup"><span data-stu-id="45002-905">If the element does not exist, the nullable type is set to `null`.</span></span> <span data-ttu-id="45002-906">Al contrario, se si desidera utilizzare questa proprietà, è necessario assicurarsi che il <xref:System.Xml.Linq.XContainer.Element%2A> metodo non restituisce `null` prima di accedere a questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="45002-906">By contrast, if you want to use this property, you must make sure that the <xref:System.Xml.Linq.XContainer.Element%2A> method does not return `null` before you access this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45002-907">Nell'esempio seguente viene utilizzata questa proprietà per recuperare il testo di un elemento con contenuto misto.</span><span class="sxs-lookup"><span data-stu-id="45002-907">The following example uses this property to retrieve the text of an element with mixed content.</span></span>  
  
```csharp  
XElement el = XElement.Parse("<Root>This is <b>mixed</b> content</Root>");  
Console.WriteLine("{0}", el.Value);  
```  
  
```vb  
Dim el As XElement = <Root>This is <b>mixed</b> content</Root>  
Console.WriteLine("{0}", el.Value)  
```  
  
 <span data-ttu-id="45002-908">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-908">This example produces the following output:</span></span>  
  
```  
This is mixed content  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">
          <span data-ttu-id="45002-909">Oggetto <see cref="T:System.Xml.XmlWriter" /> in cui scriverà questo metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-909">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45002-910">Scrive l'elemento in <see cref="T:System.Xml.XmlWriter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45002-910">Write this element to an <see cref="T:System.Xml.XmlWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="45002-911">Nell'esempio seguente viene illustrato come scrivere un <xref:System.Xml.Linq.XElement> per un <xref:System.Xml.XmlWriter>.</span><span class="sxs-lookup"><span data-stu-id="45002-911">The following example shows how to write an <xref:System.Xml.Linq.XElement> to an <xref:System.Xml.XmlWriter>.</span></span> <span data-ttu-id="45002-912">Si noti che nell'esempio non ha scritto una dichiarazione XML.</span><span class="sxs-lookup"><span data-stu-id="45002-912">Note that the example did not write an XML declaration.</span></span>  
  
```csharp  
StringBuilder sb = new StringBuilder();  
XmlWriterSettings xws = new XmlWriterSettings();  
xws.OmitXmlDeclaration = true;  
xws.Indent = true;  
  
using (XmlWriter xw = XmlWriter.Create(sb, xws)) {  
    xw.WriteStartElement("Root");  
  
    XElement child1 = new XElement("Child",  
        new XElement("GrandChild", "some content")  
    );  
    child1.WriteTo(xw);  
  
    XElement child2 = new XElement("AnotherChild",  
        new XElement("GrandChild", "different content")  
    );  
    child2.WriteTo(xw);  
  
    xw.WriteEndElement();  
}  
  
Console.WriteLine(sb.ToString());  
```  
  
```vb  
Dim sb As StringBuilder = New StringBuilder()  
Dim xws As XmlWriterSettings = New XmlWriterSettings()  
xws.OmitXmlDeclaration = True  
xws.Indent = True  
  
Using xw = XmlWriter.Create(sb, xws)  
    xw.WriteStartElement("Root")  
    Dim child1 As XElement = _  
        <Child>  
            <GrandChild>some content</GrandChild>  
        </Child>  
    child1.WriteTo(xw)  
    Dim child2 As XElement = _   
        <AnotherChild>  
            <GrandChild>different content</GrandChild>  
        </AnotherChild>  
    child2.WriteTo(xw)  
    xw.WriteEndElement()  
End Using  
  
Console.WriteLine(sb.ToString())  
```  
  
 <span data-ttu-id="45002-913">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="45002-913">This example produces the following output:</span></span>  
  
```xml  
<Root>  
  <Child>  
    <GrandChild>some content</GrandChild>  
  </Child>  
  <AnotherChild>  
    <GrandChild>different content</GrandChild>  
  </AnotherChild>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteToAsync (System.Xml.XmlWriter writer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteToAsync(class System.Xml.XmlWriter writer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteToAsync(System::Xml::XmlWriter ^ writer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>