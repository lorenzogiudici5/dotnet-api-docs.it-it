<Type Name="XNamespace" FullName="System.Xml.Linq.XNamespace">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="08512bdbf7b76a91569767f19a70bac5c65b423f" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51904971" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XNamespace" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XNamespace extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNamespace" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XNamespace" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNamespace sealed" />
  <TypeSignature Language="F#" Value="type XNamespace = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e1a03-101">Rappresenta uno spazio dei nomi XML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e1a03-101">Represents an XML namespace.</span>
      </span>
      <span data-ttu-id="e1a03-102">Questa classe non può essere ereditata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e1a03-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1a03-103">Questa classe rappresenta il costrutto XML degli spazi dei nomi.</span><span class="sxs-lookup"><span data-stu-id="e1a03-103">This class represents the XML construct of namespaces.</span></span>  
  
 <span data-ttu-id="e1a03-104">Ogni <xref:System.Xml.Linq.XName> contiene un <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="e1a03-104">Every <xref:System.Xml.Linq.XName> contains an <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="e1a03-105">Anche se un elemento non è incluso in uno spazio dei nomi, l'oggetto <xref:System.Xml.Linq.XName> dell'elemento contiene comunque uno spazio dei nomi, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e1a03-105">Even if an element is not in a namespace, the element's <xref:System.Xml.Linq.XName> still contains a namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e1a03-106">La proprietà <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> non è `null`.</span><span class="sxs-lookup"><span data-stu-id="e1a03-106">The <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> property is guaranteed to not be `null`.</span></span>  
  
## <a name="creating-an-xnamespace-object"></a><span data-ttu-id="e1a03-107">Creazione di un oggetto XNamespace</span><span class="sxs-lookup"><span data-stu-id="e1a03-107">Creating an XNamespace Object</span></span>  
 <span data-ttu-id="e1a03-108">Il modo più comune per creare un <xref:System.Xml.Linq.XNamespace> oggetto è sufficiente assegnare una stringa a esso.</span><span class="sxs-lookup"><span data-stu-id="e1a03-108">The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it.</span></span> <span data-ttu-id="e1a03-109">È quindi possibile combinare lo spazio dei nomi con un nome locale mediante l'override dell'operatore di addizione.</span><span class="sxs-lookup"><span data-stu-id="e1a03-109">You can then combine the namespace with a local name by using the override of the addition operator.</span></span> <span data-ttu-id="e1a03-110">L'esempio seguente illustra questo linguaggio:</span><span class="sxs-lookup"><span data-stu-id="e1a03-110">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e1a03-111">Tuttavia, in Visual Basic, si sarebbe in genere dichiarare uno spazio dei nomi globale predefinito, come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="e1a03-111">However, in Visual Basic, you would typically declare a global default namespace, as follows:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>Content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-112">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-112">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">Content</Root>  
```  
  
 <span data-ttu-id="e1a03-113">Assegnazione di una stringa a un <xref:System.Xml.Linq.XNamespace> utilizza la conversione implicita da <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="e1a03-113">Assigning a string to an <xref:System.Xml.Linq.XNamespace> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="e1a03-114">Visualizzare [procedura: creare un documento con spazi dei nomi (c#) (LINQ to XML)](https://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) per altre informazioni ed esempi.</span><span class="sxs-lookup"><span data-stu-id="e1a03-114">See [How to: Create a Document with Namespaces (C#) (LINQ to XML)](https://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) for more information and examples.</span></span>  
  
 <span data-ttu-id="e1a03-115">Visualizzare [spazi dei nomi in Visual Basic (LINQ to XML)](https://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) per altre informazioni sull'uso degli spazi dei nomi in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e1a03-115">See [Namespaces in Visual Basic (LINQ to XML)](https://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) for more information on using namespaces in Visual Basic.</span></span>  
  
## <a name="controlling-namespace-prefixes"></a><span data-ttu-id="e1a03-116">Controllo Namespace prefissi</span><span class="sxs-lookup"><span data-stu-id="e1a03-116">Controlling Namespace Prefixes</span></span>  
 <span data-ttu-id="e1a03-117">Se si crea un attributo che dichiara uno spazio dei nomi, il prefisso specificato nell'attributo verrà rese persistenti nel XML serializzato.</span><span class="sxs-lookup"><span data-stu-id="e1a03-117">If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML.</span></span> <span data-ttu-id="e1a03-118">Per creare un attributo che dichiara uno spazio dei nomi con un prefisso, viene creato un attributo in cui lo spazio dei nomi del nome dell'attributo è <xref:System.Xml.Linq.XNamespace.Xmlns%2A> e il nome dell'attributo è il prefisso dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="e1a03-118">To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix.</span></span> <span data-ttu-id="e1a03-119">Il valore dell'attributo è l'URI dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="e1a03-119">The value of the attribute is the URI of the namespace.</span></span> <span data-ttu-id="e1a03-120">L'esempio seguente illustra questo linguaggio:</span><span class="sxs-lookup"><span data-stu-id="e1a03-120">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"), _  
    "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e1a03-121">In Visual Basic, invece di creare un nodo dello spazio dei nomi per controllare i prefissi dello spazio dei nomi, è utilizzata in genere una dichiarazione dello spazio dei nomi globale:</span><span class="sxs-lookup"><span data-stu-id="e1a03-121">In Visual Basic, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>Content</aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-122">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-122">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">Content</aw:Root>  
```  
  
 <span data-ttu-id="e1a03-123">Per altre informazioni, vedere [procedura: controllo prefissi Namespace (c#) (LINQ to XML)](https://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span><span class="sxs-lookup"><span data-stu-id="e1a03-123">For more information, see [How to: Control Namespace Prefixes (C#) (LINQ to XML)](https://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span></span>  
  
## <a name="creating-a-default-namespace"></a><span data-ttu-id="e1a03-124">Creazione di un Namespace predefinito</span><span class="sxs-lookup"><span data-stu-id="e1a03-124">Creating a Default Namespace</span></span>  
 <span data-ttu-id="e1a03-125">Quando si crea un attributo che fungerà da uno spazio dei nomi, se il nome dell'attributo è il valore speciale "xmlns", quando viene serializzato l'albero XML, lo spazio dei nomi verrà dichiarato come spazio dei nomi predefinito.</span><span class="sxs-lookup"><span data-stu-id="e1a03-125">When constructing an attribute that will be a namespace, if the attribute name has the special value of "xmlns", then when the XML tree is serialized, the namespace will be declared as the default namespace.</span></span> <span data-ttu-id="e1a03-126">L'attributo speciale con il nome del "xmlns" stesso non è presente in spazi dei nomi.</span><span class="sxs-lookup"><span data-stu-id="e1a03-126">The special attribute with the name of "xmlns" itself is not in any namespace.</span></span> <span data-ttu-id="e1a03-127">Il valore dell'attributo è l'URI dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="e1a03-127">The value of the attribute is the namespace URI.</span></span>  
  
 <span data-ttu-id="e1a03-128">L'esempio seguente crea un albero XML che contiene un attributo dichiarato in modo tale che lo spazio dei nomi diventerà lo spazio dei nomi predefinito:</span><span class="sxs-lookup"><span data-stu-id="e1a03-128">The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute("xmlns", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute("xmlns", "http://www.adventure-works.com"), _  
    New XElement(aw + "Child", "content") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e1a03-129">In Visual Basic, invece di creare un nodo dello spazio dei nomi per creare uno spazio dei nomi predefinito, è utilizzata in genere una dichiarazione dello spazio dei nomi globale predefinito:</span><span class="sxs-lookup"><span data-stu-id="e1a03-129">In Visual Basic, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <Child>content</Child>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-130">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-130">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child>content</Child>  
</Root>  
```  
  
## <a name="xnamespace-atomization"></a><span data-ttu-id="e1a03-131">Atomizzazione XNamespace</span><span class="sxs-lookup"><span data-stu-id="e1a03-131">XNamespace Atomization</span></span>  
 <span data-ttu-id="e1a03-132">Gli oggetti <xref:System.Xml.Linq.XNamespace> vengono suddivisi in elementi di base; ovvero, se due oggetti <xref:System.Xml.Linq.XNamespace> hanno esattamente lo stesso URI, condivideranno la stessa istanza.</span><span class="sxs-lookup"><span data-stu-id="e1a03-132"><xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance.</span></span> <span data-ttu-id="e1a03-133">Gli operatori di uguaglianza e confronto vengono forniti in modo esplicito per questo scopo.</span><span class="sxs-lookup"><span data-stu-id="e1a03-133">The equality and comparison operators are provided explicitly for this purpose.</span></span>  
  
## <a name="using-expanded-names"></a><span data-ttu-id="e1a03-134">Usando nomi espansi</span><span class="sxs-lookup"><span data-stu-id="e1a03-134">Using Expanded Names</span></span>  
 <span data-ttu-id="e1a03-135">Un altro modo per specificare un nome locale e uno spazio dei nomi consiste nell'utilizzare un nome espanso nel formato `{namespace}name`:</span><span class="sxs-lookup"><span data-stu-id="e1a03-135">Another way to specify a namespace and a local name is to use an expanded name in the form `{namespace}name`:</span></span>  
  
```csharp  
XElement e = new XElement("{http://www.adventure-works.com}Root",  
     new XAttribute("{http://www.adventure-works.com}Att", "content")  
);  
Console.WriteLine(e);  
```  
  
```vb  
Dim e As XElement = New XElement("{http://www.adventure-works.com}Root", _  
     New XAttribute("{http://www.adventure-works.com}Att", "content") _  
)  
Console.WriteLine(e)  
```  
  
 <span data-ttu-id="e1a03-136">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-136">This example produces the following output:</span></span>  
  
```  
<Root p1:Att="content" xmlns:p1="http://www.adventure-works.com" xmlns="http://www.adventure-works.com" />  
```  
  
 <span data-ttu-id="e1a03-137">Questo approccio può tuttavia incidere sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="e1a03-137">This approach has performance implications.</span></span> <span data-ttu-id="e1a03-138">Ogni volta che si passa una stringa che contiene un nome esteso a [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], è infatti necessario analizzare il nome e individuare trovare lo spazio dei nomi e il nome suddivisi in elementi di base.</span><span class="sxs-lookup"><span data-stu-id="e1a03-138">Each time that you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], it must parse the name, find the atomized namespace, and find the atomized name.</span></span> <span data-ttu-id="e1a03-139">Questo processo impiega il tempo della CPU.</span><span class="sxs-lookup"><span data-stu-id="e1a03-139">This process takes CPU time.</span></span> <span data-ttu-id="e1a03-140">Se le prestazioni sono importanti, è possibile usare un approccio diverso.</span><span class="sxs-lookup"><span data-stu-id="e1a03-140">If performance is important, you may want to use a different approach.</span></span>  
  
 <span data-ttu-id="e1a03-141">Con Visual Basic, l'approccio consigliato è usare valori letterali XML, che non comporta l'utilizzo di nomi espansi.</span><span class="sxs-lookup"><span data-stu-id="e1a03-141">With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
      <span data-ttu-id="e1a03-142">LINQ to XML</span>
      <span class="sxs-lookup">
        <span data-stu-id="e1a03-142">LINQ to XML</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xNamespace.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="e1a03-143">L'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> da confrontare con l'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-143">The <see cref="T:System.Xml.Linq.XNamespace" /> to compare to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1a03-144">Determina se l'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> specificato è uguale all'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-144">Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1a03-145">
            <see cref="T:System.Boolean" /> che indica se l'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> specificato è uguale all'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-145">A <see cref="T:System.Boolean" /> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1a03-146">Per due <xref:System.Xml.Linq.XNamespace> oggetti siano uguali, devono avere lo stesso URI.</span><span class="sxs-lookup"><span data-stu-id="e1a03-146">For two <xref:System.Xml.Linq.XNamespace> objects to be equal, they must have the same URI.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1a03-147">Nell'esempio seguente vengono confrontate due spazi dei nomi che fanno riferimento allo stesso URI.</span><span class="sxs-lookup"><span data-stu-id="e1a03-147">The following example compares two namespaces that refer to the same URI.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Console.WriteLine(GetXmlNamespace(aw) = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-148">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-148">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e1a03-149">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-149">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Get (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XNamespace Get(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XNamespace ^ Get(System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member Get : string -&gt; System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Get namespaceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">
          <span data-ttu-id="e1a03-150">
            <see cref="T:System.String" /> che contiene un URI dello spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-150">A <see cref="T:System.String" /> that contains a namespace URI.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1a03-151">Ottiene uno <see cref="T:System.Xml.Linq.XNamespace" /> per l'URI (Uniform Resource Identifier) specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-151">Gets an <see cref="T:System.Xml.Linq.XNamespace" /> for the specified Uniform Resource Identifier (URI).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1a03-152">
            <see cref="T:System.Xml.Linq.XNamespace" /> creato dall'URI specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-152">An <see cref="T:System.Xml.Linq.XNamespace" /> created from the specified URI.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1a03-153">L'oggetto restituito <xref:System.Xml.Linq.XNamespace> oggetto viene garantito ai fini dell'atomicità (vale a dire, è l'unica nel sistema per quel determinato URI).</span><span class="sxs-lookup"><span data-stu-id="e1a03-153">The returned <xref:System.Xml.Linq.XNamespace> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1a03-154">L'esempio seguente ottiene un <xref:System.Xml.Linq.XNamespace> da un URI specificato.</span><span class="sxs-lookup"><span data-stu-id="e1a03-154">The following example gets a <xref:System.Xml.Linq.XNamespace> from a specified URI.</span></span>  
  
```csharp  
XNamespace aw = XNamespace.Get("http://www.adventure-works.com");  
  
// This is the preferred form.  
XNamespace aw2 = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
Console.WriteLine(aw2);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = XNamespace.Get("http://www.adventure-works.com")  
  
        ' This is the preferred form.  
        Dim aw2 As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine(aw)  
        Console.WriteLine(aw2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-155">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-155">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e1a03-156">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-156">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xNamespace.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1a03-157">Ottiene un codice hash per l'oggetto <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-157">Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1a03-158">Oggetto <see cref="T:System.Int32" /> che contiene il codice hash per <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-158">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1a03-159">Questo metodo serve come funzione hash per <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="e1a03-159">This method serves as a hash function for <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="e1a03-160">È possibile usare <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> negli algoritmi e strutture di dati, ad esempio una tabella hash di hash.</span><span class="sxs-lookup"><span data-stu-id="e1a03-160">You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e1a03-161">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-161">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName GetName (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XName GetName(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XName ^ GetName(System::String ^ localName);" />
      <MemberSignature Language="F#" Value="member this.GetName : string -&gt; System.Xml.Linq.XName" Usage="xNamespace.GetName localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="e1a03-162">
            <see cref="T:System.String" /> che contiene un nome locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-162">A <see cref="T:System.String" /> that contains a local name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1a03-163">Restituisce un oggetto <see cref="T:System.Xml.Linq.XName" /> creato da questo <see cref="T:System.Xml.Linq.XNamespace" /> e il nome locale specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-163">Returns an <see cref="T:System.Xml.Linq.XName" /> object created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1a03-164">
            <see cref="T:System.Xml.Linq.XName" /> creato da questo <see cref="T:System.Xml.Linq.XNamespace" /> e il nome locale specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-164">An <see cref="T:System.Xml.Linq.XName" /> created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1a03-165">L'oggetto restituito <xref:System.Xml.Linq.XName> oggetto viene garantito ai fini dell'atomicità (vale a dire, è l'unica nel sistema per un nome esteso specifico).</span><span class="sxs-lookup"><span data-stu-id="e1a03-165">The returned <xref:System.Xml.Linq.XName> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1a03-166">L'esempio seguente usa questa proprietà per recuperare un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="e1a03-166">The following example uses this property to retrieve an <xref:System.Xml.Linq.XName>.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XName name = aw.GetName("Root");  
Console.WriteLine("{0}", name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim name As XName = aw.GetName("Root")  
        Console.WriteLine("{0}", name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-167">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-167">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e1a03-168">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-168">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceName : string" Usage="System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1a03-169">Ottiene l'URI (Uniform Resource Identifier) dello spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-169">Gets the Uniform Resource Identifier (URI) of this namespace.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1a03-170">
            <see cref="T:System.String" /> che contiene l'URI dello spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-170">A <see cref="T:System.String" /> that contains the URI of the namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e1a03-171">Nell'esempio seguente viene illustrato come utilizzare questa proprietà:</span><span class="sxs-lookup"><span data-stu-id="e1a03-171">The following example shows how to use this property:</span></span>  
  
```csharp  
string markup =  
@"<aw:Root  
    xmlns:aw='http://www.adventure-works.com'/>";  
XElement root = XElement.Parse(markup);  
Console.WriteLine(root.Name.Namespace.NamespaceName);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim root As XElement = <aw:Root/>  
        Console.WriteLine(root.Name.Namespace.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-172">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-172">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e1a03-173">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-173">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace None" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ None { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1a03-174">Ottiene l'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> che non corrisponde ad alcuno spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-174">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to no namespace.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1a03-175">
            <see cref="T:System.Xml.Linq.XNamespace" /> che non corrisponde ad alcuno spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-175">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to no namespace.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1a03-176">Se un elemento o attributo è in nessuno spazio dei nomi, allo spazio dei nomi restituito da questa proprietà verrà impostato lo spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="e1a03-176">If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1a03-177">L'esempio seguente illustra questa proprietà per determinare quali elementi sono in nessuno spazio dei nomi viene utilizzato.</span><span class="sxs-lookup"><span data-stu-id="e1a03-177">The following example shows uses this property to determine which elements are in no namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
  
XElement root = new XElement("Root",  
    new XElement(aw + "ChildInNamespace", "content"),  
    new XElement("ChildInNoNamespace", "content")  
);  
  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("Root element is in no namespace");  
else  
    Console.WriteLine("Root element is in a namespace");  
  
if (root.Element(aw + "ChildInNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNamespace element is in a namespace");  
  
if (root.Element("ChildInNoNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNoNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNoNamespace element is in a namespace");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <aw:ChildInNamespace>content</aw:ChildInNamespace>  
                <ChildInNoNamespace>content</ChildInNoNamespace>  
            </Root>  
  
        If (root.Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("Root element is in no namespace")  
        Else  
            Console.WriteLine("Root element is in a namespace")  
        End If  
  
        If (root.Element(GetXmlNamespace(aw) + "ChildInNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNamespace element is in a namespace")  
        End If  
  
        If (root.Element("ChildInNoNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNoNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNoNamespace element is in a namespace")  
        End If  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-178">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-178">This example produces the following output:</span></span>  
  
```  
Root element is in no namespace  
ChildInNamespace element is in a namespace  
ChildInNoNamespace element is in no namespace  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e1a03-179">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-179">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName operator + (System.Xml.Linq.XNamespace ns, string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Addition(class System.Xml.Linq.XNamespace ns, string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (ns As XNamespace, localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ operator +(System::Xml::Linq::XNamespace ^ ns, System::String ^ localName);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Xml.Linq.XNamespace * string -&gt; System.Xml.Linq.XName" Usage="ns + localName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">
          <span data-ttu-id="e1a03-180">
            <see cref="T:System.Xml.Linq.XNamespace" /> che contiene lo spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-180">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace.</span>
          </span>
        </param>
        <param name="localName">
          <span data-ttu-id="e1a03-181">
            <see cref="T:System.String" /> che contiene il nome locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-181">A <see cref="T:System.String" /> that contains the local name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1a03-182">Combina un oggetto <see cref="T:System.Xml.Linq.XNamespace" /> con un nome locale per creare un <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-182">Combines an <see cref="T:System.Xml.Linq.XNamespace" /> object with a local name to create an <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1a03-183">Nuovo <see cref="T:System.Xml.Linq.XName" /> costruito dallo spazio dei nomi e dal nome locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-183">The new <see cref="T:System.Xml.Linq.XName" /> constructed from the namespace and local name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1a03-184">Questo operatore consente l'idioma comune della combinazione di uno spazio dei nomi e un nome locale per la costruzione di un elemento o attributo.</span><span class="sxs-lookup"><span data-stu-id="e1a03-184">This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute.</span></span> <span data-ttu-id="e1a03-185">Il linguaggio fornisce alcuni dei vantaggi di avere i prefissi dello spazio dei nomi, in quanto è possibile fare riferimento a uno spazio dei nomi usando una variabile che è breve.</span><span class="sxs-lookup"><span data-stu-id="e1a03-185">This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short.</span></span> <span data-ttu-id="e1a03-186">In questo modo viene eliminata sintattico rumore nel codice che consente di creare alberi XML.</span><span class="sxs-lookup"><span data-stu-id="e1a03-186">This eliminates syntactic noise in the code that creates XML trees.</span></span>  
  
## Examples  
 <span data-ttu-id="e1a03-187">L'esempio seguente illustra l'uso del `+` operatore per creare un' <xref:System.Xml.Linq.XName> da un <xref:System.Xml.Linq.XNamespace> e un nome locale.</span><span class="sxs-lookup"><span data-stu-id="e1a03-187">The following example shows the use of the `+` operator to create an <xref:System.Xml.Linq.XName> from an <xref:System.Xml.Linq.XNamespace> and a local name.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XElement(aw + "Child") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e1a03-188">In Visual Basic, questo è il linguaggio preferito:</span><span class="sxs-lookup"><span data-stu-id="e1a03-188">In Visual Basic, this is the preferred idiom:</span></span>  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Dim root As XElement = _  
            <Root>  
                <Child/>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-189">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-189">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e1a03-190">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-190">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xml.Linq.XNamespace * System.Xml.Linq.XNamespace -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e1a03-191">Primo oggetto <see cref="T:System.Xml.Linq.XNamespace" /> da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-191">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e1a03-192">Secondo oggetto <see cref="T:System.Xml.Linq.XNamespace" /> da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-192">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1a03-193">Restituisce un valore che indica se due istanze di <see cref="T:System.Xml.Linq.XNamespace" /> sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-193">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1a03-194">Valore <see cref="T:System.Boolean" /> che indica se <paramref name="left" /> e <paramref name="right" /> sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-194">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1a03-195">L'overload degli operatori `==` e `!=` vengono forniti per consentire confronti tra <xref:System.Xml.Linq.XNamespace> e la stringa (ad esempio, `element.Name.Namespace == "http://www.adventure-works.com"`).</span><span class="sxs-lookup"><span data-stu-id="e1a03-195">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="e1a03-196">Gli operatori di uguaglianza di riferimenti predefiniti in c# richiede un operando sia convertibile nel tipo di altro tramite solo le conversioni dei riferimenti e non considerare la conversione implicita da stringa a <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="e1a03-196">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>  
   
## Examples  
 <span data-ttu-id="e1a03-197">Nell'esempio seguente vengono messe a confronto una <xref:System.Xml.Linq.XNamespace> e una stringa.</span><span class="sxs-lookup"><span data-stu-id="e1a03-197">The following example shows the comparison of an <xref:System.Xml.Linq.XNamespace> and a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-198">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-198">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e1a03-199">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-199">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XNamespace (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XNamespace op_Implicit(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XNamespace ^(System::String ^ namespaceName);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.op_Implicit namespaceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">
          <span data-ttu-id="e1a03-200">
            <see cref="T:System.String" /> che contiene l'URI dello spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-200">A <see cref="T:System.String" /> that contains the namespace URI.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1a03-201">Converte una stringa che contiene un URI (Uniform Resource Identifier) in un <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-201">Converts a string containing a Uniform Resource Identifier (URI) to an <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1a03-202">
            <see cref="T:System.Xml.Linq.XNamespace" /> costruito dalla stringa URI.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-202">An <see cref="T:System.Xml.Linq.XNamespace" /> constructed from the URI string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="e1a03-203">L'esempio seguente mostra l'inizializzazione di un <xref:System.Xml.Linq.XNamespace> variabile assegnando una stringa a esso.</span><span class="sxs-lookup"><span data-stu-id="e1a03-203">The following example shows the initialization of an <xref:System.Xml.Linq.XNamespace> variable by assigning a string to it.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-204">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-204">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e1a03-205">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-205">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xml.Linq.XNamespace * System.Xml.Linq.XNamespace -&gt; bool" Usage="System.Xml.Linq.XNamespace.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="e1a03-206">Primo oggetto <see cref="T:System.Xml.Linq.XNamespace" /> da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-206">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="e1a03-207">Secondo oggetto <see cref="T:System.Xml.Linq.XNamespace" /> da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-207">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e1a03-208">Restituisce un valore che indica se due istanze di <see cref="T:System.Xml.Linq.XNamespace" /> non sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-208">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1a03-209">Valore <see cref="T:System.Boolean" /> che indica se <paramref name="left" /> e <paramref name="right" /> non sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-209">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are not equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1a03-210">L'overload degli operatori `==` e `!=` vengono forniti per consentire confronti tra <xref:System.Xml.Linq.XNamespace> e la stringa (ad esempio, `element.Name.Namespace == "http://www.adventure-works.com"`).</span><span class="sxs-lookup"><span data-stu-id="e1a03-210">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="e1a03-211">Gli operatori di uguaglianza di riferimenti predefiniti in c# richiede un operando sia convertibile nel tipo di altro tramite solo le conversioni dei riferimenti e non considerare la conversione implicita da stringa a <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="e1a03-211">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>   
  
## Examples  
 <span data-ttu-id="e1a03-212">L'esempio seguente illustra un confronto tra un <xref:System.Xml.Linq.XNamespace> in una stringa.</span><span class="sxs-lookup"><span data-stu-id="e1a03-212">The following example shows a comparison of a <xref:System.Xml.Linq.XNamespace> to a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw != "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw <> "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-213">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-213">This example produces the following output:</span></span>  
  
```  
False  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e1a03-214">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-214">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xNamespace.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e1a03-215">Restituisce l'URI del <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-215">Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e1a03-216">URI del <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-216">The URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e1a03-217">Nell'esempio seguente usa questo metodo per uno spazio dei nomi di stampa nella console.</span><span class="sxs-lookup"><span data-stu-id="e1a03-217">The following example uses this method to print a namespace on the console.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine("{0}", aw.ToString());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine("{0}", aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-218">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-218">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e1a03-219">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-219">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Xml">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xml" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xml" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xml As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xml { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Xml : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Xml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1a03-220">Ottiene l'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> che corrisponde all'URI XML (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-220">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1a03-221">Il <see cref="T:System.Xml.Linq.XNamespace" /> che corrisponde all'URI XML (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-221">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1a03-222">Determinati attributi standardizzati, ad esempio `space`, sono nel `http://www.w3.org/XML/1998/namespace` dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="e1a03-222">Certain standardized attributes, such as `space`, are in the `http://www.w3.org/XML/1998/namespace` namespace.</span></span> <span data-ttu-id="e1a03-223">Lo standard W3C specifica che questo spazio dei nomi non devono essere dichiarati come attributo dell'albero XML.</span><span class="sxs-lookup"><span data-stu-id="e1a03-223">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="e1a03-224">È uno spazio dei nomi riservato che è sempre automaticamente disponibile nel parser XML.</span><span class="sxs-lookup"><span data-stu-id="e1a03-224">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1a03-225">Nell'esempio seguente viene illustrato come creare un `xml:space="preserve"` attributo in un albero XML:</span><span class="sxs-lookup"><span data-stu-id="e1a03-225">The following example shows how to create an `xml:space="preserve"` attribute in an XML tree:</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute(XNamespace.Xml + "space", "preserve"),  
    new XElement("Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _  
    <Root xml:space="preserve">  
        <Child>content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e1a03-226">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-226">This example produces the following output:</span></span>  
  
```  
<Root xml:space="preserve">  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e1a03-227">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-227">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xmlns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xmlns" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xmlns" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xmlns As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xmlns { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Xmlns : System.Xml.Linq.XNamespace" Usage="System.Xml.Linq.XNamespace.Xmlns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e1a03-228">Ottiene l'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> che corrisponde all'URI xmlns (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-228">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the xmlns URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e1a03-229">Il <see cref="T:System.Xml.Linq.XNamespace" /> corrispondente per il **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-229">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e1a03-230">Quando si dichiarano gli spazi dei nomi, gli stessi attributi dello spazio dei nomi sono nel **xmlns** dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="e1a03-230">When you declare namespaces, the namespace attributes themselves are in the **xmlns** namespace.</span></span> <span data-ttu-id="e1a03-231">Lo standard W3C specifica che questo spazio dei nomi non devono essere dichiarati come attributo dell'albero XML.</span><span class="sxs-lookup"><span data-stu-id="e1a03-231">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="e1a03-232">È uno spazio dei nomi riservato che è sempre automaticamente disponibile nel parser XML.</span><span class="sxs-lookup"><span data-stu-id="e1a03-232">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e1a03-233">Nell'esempio seguente viene illustrato come aggiungere uno spazio dei nomi a un albero XML.</span><span class="sxs-lookup"><span data-stu-id="e1a03-233">The following example shows how to add a namespace to an XML tree.</span></span> <span data-ttu-id="e1a03-234">Lo spazio dei nomi per l'attributo che dichiara lo spazio dei nomi è lo spazio dei nomi restituito da questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="e1a03-234">The namespace for the attribute that declares the namespace is the namespace returned by this property.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root = <aw:Root xmlns:aw="http://www.adventure-works.com">  
               <aw:Child>content</aw:Child>  
           </aw:Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="e1a03-235">In Visual Basic, il linguaggio preferito è:</span><span class="sxs-lookup"><span data-stu-id="e1a03-235">In Visual Basic, the preferred idiom is:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>  
                <aw:Child>content</aw:Child>  
            </aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="e1a03-236">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="e1a03-236">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">  
  <aw:Child>content</aw:Child>  
</aw:Root>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13">
          <span data-ttu-id="e1a03-237">LINQ to XML</span>
          <span class="sxs-lookup">
            <span data-stu-id="e1a03-237">LINQ to XML</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>