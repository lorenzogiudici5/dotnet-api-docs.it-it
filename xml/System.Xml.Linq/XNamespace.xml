<Type Name="XNamespace" FullName="System.Xml.Linq.XNamespace">
  <TypeSignature Language="C#" Value="public sealed class XNamespace" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XNamespace extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XNamespace" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XNamespace" />
  <TypeSignature Language="C++ CLI" Value="public ref class XNamespace sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ec6a1-101">Rappresenta uno spazio dei nomi XML.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-101">Represents an XML namespace.</span></span> <span data-ttu-id="ec6a1-102">Questa classe non può essere ereditata.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec6a1-103">Questa classe rappresenta il costrutto XML degli spazi dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-103">This class represents the XML construct of namespaces.</span></span>  
  
 <span data-ttu-id="ec6a1-104">Ogni <xref:System.Xml.Linq.XName> contiene un <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-104">Every <xref:System.Xml.Linq.XName> contains an <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="ec6a1-105">Anche se un elemento non è incluso in uno spazio dei nomi, l'oggetto <xref:System.Xml.Linq.XName> dell'elemento contiene comunque uno spazio dei nomi, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-105">Even if an element is not in a namespace, the element's <xref:System.Xml.Linq.XName> still contains a namespace, <xref:System.Xml.Linq.XNamespace.None%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ec6a1-106">La proprietà <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> non è `null`.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-106">The <xref:System.Xml.Linq.XName.Namespace%2A?displayProperty=nameWithType> property is guaranteed to not be `null`.</span></span>  
  
## <a name="creating-an-xnamespace-object"></a><span data-ttu-id="ec6a1-107">Creazione di un oggetto XNamespace</span><span class="sxs-lookup"><span data-stu-id="ec6a1-107">Creating an XNamespace Object</span></span>  
 <span data-ttu-id="ec6a1-108">Il modo più comune per creare un <xref:System.Xml.Linq.XNamespace> è sufficiente assegnare una stringa all'oggetto.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-108">The most common way to create an <xref:System.Xml.Linq.XNamespace> object is to simply assign a string to it.</span></span> <span data-ttu-id="ec6a1-109">È quindi possibile combinare lo spazio dei nomi con un nome locale tramite l'override dell'operatore di addizione.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-109">You can then combine the namespace with a local name by using the override of the addition operator.</span></span> <span data-ttu-id="ec6a1-110">Nell'esempio seguente viene illustrato questo linguaggio:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-110">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="ec6a1-111">Tuttavia, in Visual Basic, in genere dichiarare uno spazio dei nomi predefinito globale, come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-111">However, in Visual Basic, you would typically declare a global default namespace, as follows:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>Content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-112">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-112">This example produces the following output:</span></span>  
  
```xml  
<Root xmlns="http://www.adventure-works.com">Content</Root>  
```  
  
 <span data-ttu-id="ec6a1-113">Assegnare una stringa a un <xref:System.Xml.Linq.XNamespace> utilizza la conversione implicita da <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-113">Assigning a string to an <xref:System.Xml.Linq.XNamespace> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="ec6a1-114">Vedere [procedura: creare un documento con spazi dei nomi (c#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) per ulteriori informazioni ed esempi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-114">See [How to: Create a Document with Namespaces (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c) for more information and examples.</span></span>  
  
 <span data-ttu-id="ec6a1-115">Vedere [spazi dei nomi in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) per ulteriori informazioni sull'utilizzo di spazi dei nomi in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-115">See [Namespaces in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc) for more information on using namespaces in Visual Basic.</span></span>  
  
## <a name="controlling-namespace-prefixes"></a><span data-ttu-id="ec6a1-116">Controllo Namespace prefissi</span><span class="sxs-lookup"><span data-stu-id="ec6a1-116">Controlling Namespace Prefixes</span></span>  
 <span data-ttu-id="ec6a1-117">Se si crea un attributo che dichiara uno spazio dei nomi, il prefisso specificato nell'attributo verrà rese persistenti nel XML serializzato.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-117">If you create an attribute that declares a namespace, the prefix specified in the attribute will be persisted in the serialized XML.</span></span> <span data-ttu-id="ec6a1-118">Per creare un attributo che dichiara uno spazio dei nomi con un prefisso, viene creato un attributo in cui lo spazio dei nomi del nome dell'attributo è <xref:System.Xml.Linq.XNamespace.Xmlns%2A> e il nome dell'attributo è il prefisso dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-118">To create an attribute that declares a namespace with a prefix, you create an attribute where the namespace of the name of the attribute is <xref:System.Xml.Linq.XNamespace.Xmlns%2A>, and the name of the attribute is the namespace prefix.</span></span> <span data-ttu-id="ec6a1-119">Il valore dell'attributo è l'URI dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-119">The value of the attribute is the URI of the namespace.</span></span> <span data-ttu-id="ec6a1-120">Nell'esempio seguente viene illustrato questo linguaggio:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-120">The following example shows this idiom:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    "Content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"), _  
    "Content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="ec6a1-121">In Visual Basic, anziché creare un nodo dello spazio dei nomi per controllare i prefissi dello spazio dei nomi, si utilizzerebbe in genere una dichiarazione di spazio dei nomi globale:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-121">In Visual Basic, instead of creating a namespace node to control namespace prefixes, you would typically use a global namespace declaration:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>Content</aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-122">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-122">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">Content</aw:Root>  
```  
  
 <span data-ttu-id="ec6a1-123">Per ulteriori informazioni, vedere [procedura: controllo prefissi Namespace (c#) (LINQ to XML)](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span><span class="sxs-lookup"><span data-stu-id="ec6a1-123">For more information, see [How to: Control Namespace Prefixes (C#) (LINQ to XML)](http://msdn.microsoft.com/library/a40d4479-f1b9-4d8b-8623-445648caed28).</span></span>  
  
## <a name="creating-a-default-namespace"></a><span data-ttu-id="ec6a1-124">Creazione di un Namespace predefinito</span><span class="sxs-lookup"><span data-stu-id="ec6a1-124">Creating a Default Namespace</span></span>  
 <span data-ttu-id="ec6a1-125">Quando si crea un attributo che fungerà da uno spazio dei nomi, se il nome dell'attributo è associato il valore speciale "xmlns", quando la struttura ad albero XML viene serializzato, lo spazio dei nomi verrà dichiarato come spazio dei nomi predefinito.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-125">When constructing an attribute that will be a namespace, if the attribute name has the special value of "xmlns", then when the XML tree is serialized, the namespace will be declared as the default namespace.</span></span> <span data-ttu-id="ec6a1-126">L'attributo speciale con il nome del "xmlns" stesso non è presente in qualsiasi spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-126">The special attribute with the name of "xmlns" itself is not in any namespace.</span></span> <span data-ttu-id="ec6a1-127">Il valore dell'attributo è l'URI dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-127">The value of the attribute is the namespace URI.</span></span>  
  
 <span data-ttu-id="ec6a1-128">Nell'esempio seguente viene creato un albero XML che contiene un attributo che è dichiarato in modo che lo spazio dei nomi diventerà lo spazio dei nomi predefinito:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-128">The following example creates an XML tree that contains an attribute that is declared in such a way that the namespace will become the default namespace:</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute("xmlns", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XAttribute("xmlns", "http://www.adventure-works.com"), _  
    New XElement(aw + "Child", "content") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="ec6a1-129">In Visual Basic, anziché creare un nodo dello spazio dei nomi per creare uno spazio dei nomi predefinito, si utilizzerebbe in genere una dichiarazione dello spazio dei nomi globale predefinito:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-129">In Visual Basic, instead of creating a namespace node to create a default namespace, you would typically use a global default namespace declaration:</span></span>  
  
```vb  
Imports <xmlns='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <Child>content</Child>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-130">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-130">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child>content</Child>  
</Root>  
```  
  
## <a name="xnamespace-atomization"></a><span data-ttu-id="ec6a1-131">Atomizzazione XNamespace</span><span class="sxs-lookup"><span data-stu-id="ec6a1-131">XNamespace Atomization</span></span>  
 <span data-ttu-id="ec6a1-132">Gli oggetti <xref:System.Xml.Linq.XNamespace> vengono suddivisi in elementi di base; ovvero, se due oggetti <xref:System.Xml.Linq.XNamespace> hanno esattamente lo stesso URI, condivideranno la stessa istanza.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-132"><xref:System.Xml.Linq.XNamespace> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XNamespace> objects have exactly the same URI, they will share the same instance.</span></span> <span data-ttu-id="ec6a1-133">Gli operatori di uguaglianza e confronto vengono forniti in modo esplicito a questo scopo.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-133">The equality and comparison operators are provided explicitly for this purpose.</span></span>  
  
## <a name="using-expanded-names"></a><span data-ttu-id="ec6a1-134">Utilizzo di nomi estesi</span><span class="sxs-lookup"><span data-stu-id="ec6a1-134">Using Expanded Names</span></span>  
 <span data-ttu-id="ec6a1-135">Un altro modo per specificare un nome locale e uno spazio dei nomi consiste nell'utilizzare un nome espanso nel formato `{namespace}name`:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-135">Another way to specify a namespace and a local name is to use an expanded name in the form `{namespace}name`:</span></span>  
  
```csharp  
XElement e = new XElement("{http://www.adventure-works.com}Root",  
     new XAttribute("{http://www.adventure-works.com}Att", "content")  
);  
Console.WriteLine(e);  
```  
  
```vb  
Dim e As XElement = New XElement("{http://www.adventure-works.com}Root", _  
     New XAttribute("{http://www.adventure-works.com}Att", "content") _  
)  
Console.WriteLine(e)  
```  
  
 <span data-ttu-id="ec6a1-136">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-136">This example produces the following output:</span></span>  
  
```  
<Root p1:Att="content" xmlns:p1="http://www.adventure-works.com" xmlns="http://www.adventure-works.com" />  
```  
  
 <span data-ttu-id="ec6a1-137">Questo approccio può tuttavia incidere sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-137">This approach has performance implications.</span></span> <span data-ttu-id="ec6a1-138">Ogni volta che si passa una stringa che contiene un nome esteso a [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], è infatti necessario analizzare il nome e individuare trovare lo spazio dei nomi e il nome suddivisi in elementi di base.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-138">Each time that you pass a string that contains an expanded name to [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)], it must parse the name, find the atomized namespace, and find the atomized name.</span></span> <span data-ttu-id="ec6a1-139">Questo processo impiega il tempo della CPU.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-139">This process takes CPU time.</span></span> <span data-ttu-id="ec6a1-140">Se le prestazioni sono importanti, si consiglia di utilizzare un approccio diverso.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-140">If performance is important, you may want to use a different approach.</span></span>  
  
 <span data-ttu-id="ec6a1-141">Con Visual Basic, l'approccio consigliato consiste nell'utilizzare i valori letterali XML, che non comportano l'uso di nomi espansi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-141">With Visual Basic, the recommended approach is to use XML literals, which does not involve the use of expanded names.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="ec6a1-142">L'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> da confrontare con l'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> corrente.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-142">The <see cref="T:System.Xml.Linq.XNamespace" /> to compare to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></param>
        <summary><span data-ttu-id="ec6a1-143">Determina se l'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> specificato è uguale all'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> corrente.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-143">Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="ec6a1-144"><see cref="T:System.Boolean" /> che indica se l'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> specificato è uguale all'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> corrente.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-144">A <see cref="T:System.Boolean" /> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec6a1-145">Per due <xref:System.Xml.Linq.XNamespace> oggetti siano uguali, devono avere lo stesso URI.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-145">For two <xref:System.Xml.Linq.XNamespace> objects to be equal, they must have the same URI.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec6a1-146">L'esempio seguente confronta due spazi dei nomi che fanno riferimento allo stesso URI.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-146">The following example compares two namespaces that refer to the same URI.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Console.WriteLine(GetXmlNamespace(aw) = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-147">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-147">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Get (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XNamespace Get(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XNamespace ^ Get(System::String ^ namespaceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName"><span data-ttu-id="ec6a1-148"><see cref="T:System.String" /> che contiene un URI dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-148">A <see cref="T:System.String" /> that contains a namespace URI.</span></span></param>
        <summary><span data-ttu-id="ec6a1-149">Ottiene uno <see cref="T:System.Xml.Linq.XNamespace" /> per l'URI (Uniform Resource Identifier) specificato.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-149">Gets an <see cref="T:System.Xml.Linq.XNamespace" /> for the specified Uniform Resource Identifier (URI).</span></span></summary>
        <returns><span data-ttu-id="ec6a1-150"><see cref="T:System.Xml.Linq.XNamespace" /> creato dall'URI specificato.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-150">An <see cref="T:System.Xml.Linq.XNamespace" /> created from the specified URI.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec6a1-151">L'oggetto restituito <xref:System.Xml.Linq.XNamespace> oggetto è sicuramente atomico (ovvero, è l'unico nel sistema per quel determinato URI).</span><span class="sxs-lookup"><span data-stu-id="ec6a1-151">The returned <xref:System.Xml.Linq.XNamespace> object is guaranteed to be atomic (that is, it is the only one in the system for that particular URI).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec6a1-152">Nell'esempio seguente viene ottenuto un <xref:System.Xml.Linq.XNamespace> da un URI specificato.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-152">The following example gets a <xref:System.Xml.Linq.XNamespace> from a specified URI.</span></span>  
  
```csharp  
XNamespace aw = XNamespace.Get("http://www.adventure-works.com");  
  
// This is the preferred form.  
XNamespace aw2 = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
Console.WriteLine(aw2);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = XNamespace.Get("http://www.adventure-works.com")  
  
        ' This is the preferred form.  
        Dim aw2 As XNamespace = GetXmlNamespace(aw)  
        Console.WriteLine(aw)  
        Console.WriteLine(aw2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-153">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-153">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ec6a1-154">Ottiene un codice hash per l'oggetto <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-154">Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="ec6a1-155">Oggetto <see cref="T:System.Int32" /> che contiene il codice hash per <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-155">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec6a1-156">Questo metodo serve come funzione hash per <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-156">This method serves as a hash function for <xref:System.Xml.Linq.XNamespace>.</span></span> <span data-ttu-id="ec6a1-157">È possibile utilizzare <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in algoritmi hash e dati strutture come una tabella hash.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-157">You can use <xref:System.Xml.Linq.XNamespace.GetHashCode%2A> in hashing algorithms and data structures like a hash table.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XName GetName (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Linq.XName GetName(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.GetName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetName (localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Linq::XName ^ GetName(System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName"><span data-ttu-id="ec6a1-158"><see cref="T:System.String" /> che contiene un nome locale.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-158">A <see cref="T:System.String" /> that contains a local name.</span></span></param>
        <summary><span data-ttu-id="ec6a1-159">Restituisce un oggetto <see cref="T:System.Xml.Linq.XName" /> creato da questo <see cref="T:System.Xml.Linq.XNamespace" /> e il nome locale specificato.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-159">Returns an <see cref="T:System.Xml.Linq.XName" /> object created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span></span></summary>
        <returns><span data-ttu-id="ec6a1-160"><see cref="T:System.Xml.Linq.XName" /> creato da questo <see cref="T:System.Xml.Linq.XNamespace" /> e il nome locale specificato.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-160">An <see cref="T:System.Xml.Linq.XName" /> created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec6a1-161">L'oggetto restituito <xref:System.Xml.Linq.XName> oggetto è sicuramente atomico (ovvero, è l'unico nel sistema per un nome esteso specifico).</span><span class="sxs-lookup"><span data-stu-id="ec6a1-161">The returned <xref:System.Xml.Linq.XName> object is guaranteed to be atomic (that is, it is the only one in the system for a specific expanded name).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec6a1-162">L'esempio seguente usa questa proprietà per recuperare un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-162">The following example uses this property to retrieve an <xref:System.Xml.Linq.XName>.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XName name = aw.GetName("Root");  
Console.WriteLine("{0}", name);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim name As XName = aw.GetName("Root")  
        Console.WriteLine("{0}", name)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-163">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-163">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ec6a1-164">Ottiene l'URI (Uniform Resource Identifier) dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-164">Gets the Uniform Resource Identifier (URI) of this namespace.</span></span></summary>
        <value><span data-ttu-id="ec6a1-165"><see cref="T:System.String" /> che contiene l'URI dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-165">A <see cref="T:System.String" /> that contains the URI of the namespace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ec6a1-166">Nell'esempio seguente viene illustrato come utilizzare questa proprietà:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-166">The following example shows how to use this property:</span></span>  
  
```csharp  
string markup =  
@"<aw:Root  
    xmlns:aw='http://www.adventure-works.com'/>";  
XElement root = XElement.Parse(markup);  
Console.WriteLine(root.Name.Namespace.NamespaceName);  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace(aw)  
        Dim root As XElement = <aw:Root/>  
        Console.WriteLine(root.Name.Namespace.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-167">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-167">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace None" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ None { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ec6a1-168">Ottiene l'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> che non corrisponde ad alcuno spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-168">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to no namespace.</span></span></summary>
        <value><span data-ttu-id="ec6a1-169"><see cref="T:System.Xml.Linq.XNamespace" /> che non corrisponde ad alcuno spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-169">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to no namespace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec6a1-170">Se un elemento o attributo è in nessuno spazio dei nomi, allo spazio dei nomi restituito da questa proprietà verrà impostato lo spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-170">If an element or attribute is in no namespace, its namespace will be set to the namespace returned by this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec6a1-171">Nell'esempio seguente viene utilizzata questa proprietà per determinare quali elementi sono in nessuno spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-171">The following example shows uses this property to determine which elements are in no namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
  
XElement root = new XElement("Root",  
    new XElement(aw + "ChildInNamespace", "content"),  
    new XElement("ChildInNoNamespace", "content")  
);  
  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("Root element is in no namespace");  
else  
    Console.WriteLine("Root element is in a namespace");  
  
if (root.Element(aw + "ChildInNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNamespace element is in a namespace");  
  
if (root.Element("ChildInNoNamespace").Name.Namespace == XNamespace.None)  
    Console.WriteLine("ChildInNoNamespace element is in no namespace");  
else  
    Console.WriteLine("ChildInNoNamespace element is in a namespace");  
```  
  
```vb  
Imports <xmlns:aw="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <Root>  
                <aw:ChildInNamespace>content</aw:ChildInNamespace>  
                <ChildInNoNamespace>content</ChildInNoNamespace>  
            </Root>  
  
        If (root.Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("Root element is in no namespace")  
        Else  
            Console.WriteLine("Root element is in a namespace")  
        End If  
  
        If (root.Element(GetXmlNamespace(aw) + "ChildInNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNamespace element is in a namespace")  
        End If  
  
        If (root.Element("ChildInNoNamespace") _  
                .Name.Namespace Is XNamespace.None) Then  
            Console.WriteLine("ChildInNoNamespace element is in no namespace")  
        Else  
            Console.WriteLine("ChildInNoNamespace element is in a namespace")  
        End If  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-172">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-172">This example produces the following output:</span></span>  
  
```  
Root element is in no namespace  
ChildInNamespace element is in a namespace  
ChildInNoNamespace element is in no namespace  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName operator + (System.Xml.Linq.XNamespace ns, string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Addition(class System.Xml.Linq.XNamespace ns, string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (ns As XNamespace, localName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ operator +(System::Xml::Linq::XNamespace ^ ns, System::String ^ localName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns"><span data-ttu-id="ec6a1-173"><see cref="T:System.Xml.Linq.XNamespace" /> che contiene lo spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-173">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace.</span></span></param>
        <param name="localName"><span data-ttu-id="ec6a1-174"><see cref="T:System.String" /> che contiene il nome locale.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-174">A <see cref="T:System.String" /> that contains the local name.</span></span></param>
        <summary><span data-ttu-id="ec6a1-175">Combina un oggetto <see cref="T:System.Xml.Linq.XNamespace" /> con un nome locale per creare un <see cref="T:System.Xml.Linq.XName" />.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-175">Combines an <see cref="T:System.Xml.Linq.XNamespace" /> object with a local name to create an <see cref="T:System.Xml.Linq.XName" />.</span></span></summary>
        <returns><span data-ttu-id="ec6a1-176">Nuovo <see cref="T:System.Xml.Linq.XName" /> costruito dallo spazio dei nomi e dal nome locale.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-176">The new <see cref="T:System.Xml.Linq.XName" /> constructed from the namespace and local name.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec6a1-177">Questo operatore consente il linguaggio comune della combinazione di uno spazio dei nomi e nome locale nella costruzione di un elemento o attributo.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-177">This operator enables the common idiom of combining a namespace and a local name in the construction of an element or attribute.</span></span> <span data-ttu-id="ec6a1-178">Il linguaggio fornisce alcuni dei vantaggi di avere i prefissi dello spazio dei nomi, in quanto è possibile fare riferimento a uno spazio dei nomi utilizzando una variabile che è breve.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-178">This idiom provides some of the benefits of having namespace prefixes, in that you can refer to a namespace using a variable that is short.</span></span> <span data-ttu-id="ec6a1-179">In questo modo si evita il rumore sintattico nel codice che consente di creare strutture ad albero XML.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-179">This eliminates syntactic noise in the code that creates XML trees.</span></span>  
  
## Examples  
 <span data-ttu-id="ec6a1-180">Nell'esempio seguente viene illustrato come utilizzare il `+` operatore per creare un <xref:System.Xml.Linq.XName> da un <xref:System.Xml.Linq.XNamespace> e un nome locale.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-180">The following example shows the use of the `+` operator to create an <xref:System.Xml.Linq.XName> from an <xref:System.Xml.Linq.XNamespace> and a local name.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XElement(aw + "Child")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim aw As XNamespace = "http://www.adventure-works.com"  
Dim root As XElement = New XElement(aw + "Root", _  
    New XElement(aw + "Child") _  
)  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="ec6a1-181">In Visual Basic, questo è il linguaggio preferito:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-181">In Visual Basic, this is the preferred idiom:</span></span>  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Dim root As XElement = _  
            <Root>  
                <Child/>  
            </Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-182">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-182">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">  
  <Child />  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="ec6a1-183">Primo oggetto <see cref="T:System.Xml.Linq.XNamespace" /> da confrontare.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-183">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="ec6a1-184">Secondo oggetto <see cref="T:System.Xml.Linq.XNamespace" /> da confrontare.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-184">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <summary><span data-ttu-id="ec6a1-185">Restituisce un valore che indica se due istanze di <see cref="T:System.Xml.Linq.XNamespace" /> sono uguali.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-185">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are equal.</span></span></summary>
        <returns><span data-ttu-id="ec6a1-186">Valore <see cref="T:System.Boolean" /> che indica se <paramref name="left" /> e <paramref name="right" /> sono uguali.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-186">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are equal.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec6a1-187">Gli overload dell'operatore `==` e `!=` viene fornita per abilitare i confronti tra <xref:System.Xml.Linq.XNamespace> e stringa (ad esempio, `element.Name.Namespace == "http://www.adventure-works.com"`).</span><span class="sxs-lookup"><span data-stu-id="ec6a1-187">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="ec6a1-188">Gli operatori di uguaglianza di riferimenti predefiniti in c# richiede un operando sia convertibile nel tipo di altro tramite solo le conversioni dei riferimenti e non considera la conversione implicita da stringa a <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-188">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>  
   
## Examples  
 <span data-ttu-id="ec6a1-189">L'esempio seguente illustra il confronto di un <xref:System.Xml.Linq.XNamespace> e una stringa.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-189">The following example shows the comparison of an <xref:System.Xml.Linq.XNamespace> and a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw == "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw = "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-190">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-190">This example produces the following output:</span></span>  
  
```  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XNamespace (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XNamespace op_Implicit(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (namespaceName As String) As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XNamespace ^(System::String ^ namespaceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName"><span data-ttu-id="ec6a1-191"><see cref="T:System.String" /> che contiene l'URI dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-191">A <see cref="T:System.String" /> that contains the namespace URI.</span></span></param>
        <summary><span data-ttu-id="ec6a1-192">Converte una stringa che contiene un URI (Uniform Resource Identifier) in un <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-192">Converts a string containing a Uniform Resource Identifier (URI) to an <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="ec6a1-193"><see cref="T:System.Xml.Linq.XNamespace" /> costruito dalla stringa URI.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-193">An <see cref="T:System.Xml.Linq.XNamespace" /> constructed from the URI string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[## Examples  
 <span data-ttu-id="ec6a1-194">Nell'esempio seguente viene illustrata l'inizializzazione di un <xref:System.Xml.Linq.XNamespace> variabile assegnandole una stringa.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-194">The following example shows the initialization of an <xref:System.Xml.Linq.XNamespace> variable by assigning a string to it.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-195">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-195">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XNamespace left, System.Xml.Linq.XNamespace right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XNamespace left, class System.Xml.Linq.XNamespace right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XNamespace, right As XNamespace) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XNamespace ^ left, System::Xml::Linq::XNamespace ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XNamespace" />
        <Parameter Name="right" Type="System.Xml.Linq.XNamespace" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="ec6a1-196">Primo oggetto <see cref="T:System.Xml.Linq.XNamespace" /> da confrontare.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-196">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <param name="right"><span data-ttu-id="ec6a1-197">Secondo oggetto <see cref="T:System.Xml.Linq.XNamespace" /> da confrontare.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-197">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</span></span></param>
        <summary><span data-ttu-id="ec6a1-198">Restituisce un valore che indica se due istanze di <see cref="T:System.Xml.Linq.XNamespace" /> non sono uguali.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-198">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are not equal.</span></span></summary>
        <returns><span data-ttu-id="ec6a1-199">Valore <see cref="T:System.Boolean" /> che indica se <paramref name="left" /> e <paramref name="right" /> non sono uguali.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-199">A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are not equal.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec6a1-200">Gli overload dell'operatore `==` e `!=` viene fornita per abilitare i confronti tra <xref:System.Xml.Linq.XNamespace> e stringa (ad esempio, `element.Name.Namespace == "http://www.adventure-works.com"`).</span><span class="sxs-lookup"><span data-stu-id="ec6a1-200">The operator overloads `==` and `!=` are provided to enable comparisons between <xref:System.Xml.Linq.XNamespace> and string (for example, `element.Name.Namespace == "http://www.adventure-works.com"`).</span></span> <span data-ttu-id="ec6a1-201">Gli operatori di uguaglianza di riferimenti predefiniti in c# richiede un operando sia convertibile nel tipo di altro tramite solo le conversioni dei riferimenti e non considera la conversione implicita da stringa a <xref:System.Xml.Linq.XNamespace>.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-201">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only, and do not consider the implicit conversion from string to <xref:System.Xml.Linq.XNamespace>.</span></span>   
  
## Examples  
 <span data-ttu-id="ec6a1-202">Nell'esempio seguente viene illustrato un confronto tra un <xref:System.Xml.Linq.XNamespace> in una stringa.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-202">The following example shows a comparison of a <xref:System.Xml.Linq.XNamespace> to a string.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine(aw != "http://www.adventure-works.com");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine(aw <> "http://www.adventure-works.com")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-203">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-203">This example produces the following output:</span></span>  
  
```  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XNamespace.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ec6a1-204">Restituisce l'URI del <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-204">Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></summary>
        <returns><span data-ttu-id="ec6a1-205">URI del <see cref="T:System.Xml.Linq.XNamespace" />.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-205">The URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ec6a1-206">L'esempio seguente usa questo metodo per stampare uno spazio dei nomi nella console.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-206">The following example uses this method to print a namespace on the console.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
Console.WriteLine("{0}", aw.ToString());  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim aw As XNamespace = GetXmlNamespace()  
        Console.WriteLine("{0}", aw)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-207">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-207">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xml">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xml" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xml" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xml As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xml { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ec6a1-208">Ottiene l'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> che corrisponde all'URI XML (<c>http://www.w3.org/XML/1998/namespace</c>).</span><span class="sxs-lookup"><span data-stu-id="ec6a1-208">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span></span></summary>
        <value><span data-ttu-id="ec6a1-209">Il <see cref="T:System.Xml.Linq.XNamespace" /> che corrisponde all'URI XML (<c>http://www.w3.org/XML/1998/namespace</c>).</span><span class="sxs-lookup"><span data-stu-id="ec6a1-209">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the XML URI (<c>http://www.w3.org/XML/1998/namespace</c>).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec6a1-210">Alcuni attributi standardizzati, ad esempio `space`, presenti il `http://www.w3.org/XML/1998/namespace` dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-210">Certain standardized attributes, such as `space`, are in the `http://www.w3.org/XML/1998/namespace` namespace.</span></span> <span data-ttu-id="ec6a1-211">Lo standard W3C specifica che questo spazio dei nomi non devono essere dichiarati come attributo nella struttura ad albero XML.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-211">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="ec6a1-212">È uno spazio dei nomi riservato è sempre automaticamente disponibile nel parser XML.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-212">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec6a1-213">Nell'esempio seguente viene illustrato come creare un `xml:space="preserve"` attributo in un albero XML:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-213">The following example shows how to create an `xml:space="preserve"` attribute in an XML tree:</span></span>  
  
```csharp  
XElement root = new XElement("Root",  
    new XAttribute(XNamespace.Xml + "space", "preserve"),  
    new XElement("Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = _  
    <Root xml:space="preserve">  
        <Child>content</Child>  
    </Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="ec6a1-214">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-214">This example produces the following output:</span></span>  
  
```  
<Root xml:space="preserve">  
  <Child>content</Child>  
</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xmlns">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XNamespace Xmlns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Xml.Linq.XNamespace Xmlns" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XNamespace.Xmlns" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Xmlns As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Xml::Linq::XNamespace ^ Xmlns { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ec6a1-215">Ottiene l'oggetto <see cref="T:System.Xml.Linq.XNamespace" /> che corrisponde all'URI xmlns (<c>http://www.w3.org/2000/xmlns/</c>).</span><span class="sxs-lookup"><span data-stu-id="ec6a1-215">Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the xmlns URI (<c>http://www.w3.org/2000/xmlns/</c>).</span></span></summary>
        <value><span data-ttu-id="ec6a1-216">Il <see cref="T:System.Xml.Linq.XNamespace" /> corrispondente per il **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span><span class="sxs-lookup"><span data-stu-id="ec6a1-216">The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the **xmlns** URI (<c>http://www.w3.org/2000/xmlns/</c>).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ec6a1-217">Quando si dichiarano gli spazi dei nomi, gli stessi attributi dello spazio dei nomi sono nel **xmlns** dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-217">When you declare namespaces, the namespace attributes themselves are in the **xmlns** namespace.</span></span> <span data-ttu-id="ec6a1-218">Lo standard W3C specifica che questo spazio dei nomi non devono essere dichiarati come attributo nella struttura ad albero XML.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-218">The W3C standard specifies that this namespace does not have to be declared as an attribute in the XML tree.</span></span> <span data-ttu-id="ec6a1-219">È uno spazio dei nomi riservato è sempre automaticamente disponibile nel parser XML.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-219">It is a reserved namespace that is always automatically available in the XML parser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ec6a1-220">Nell'esempio seguente viene illustrato come aggiungere uno spazio dei nomi a un albero XML.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-220">The following example shows how to add a namespace to an XML tree.</span></span> <span data-ttu-id="ec6a1-221">Lo spazio dei nomi per l'attributo che dichiara lo spazio dei nomi è lo spazio dei nomi restituito da questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="ec6a1-221">The namespace for the attribute that declares the namespace is the namespace returned by this property.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root",  
    new XAttribute(XNamespace.Xmlns + "aw", "http://www.adventure-works.com"),  
    new XElement(aw + "Child", "content")  
);  
Console.WriteLine(root);  
```  
  
```vb  
Dim root = <aw:Root xmlns:aw="http://www.adventure-works.com">  
               <aw:Child>content</aw:Child>  
           </aw:Root>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="ec6a1-222">In Visual Basic, il linguaggio preferito è:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-222">In Visual Basic, the preferred idiom is:</span></span>  
  
```vb  
Imports <xmlns:aw='http://www.adventure-works.com'>  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = _  
            <aw:Root>  
                <aw:Child>content</aw:Child>  
            </aw:Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="ec6a1-223">Questo esempio produce il seguente output:</span><span class="sxs-lookup"><span data-stu-id="ec6a1-223">This example produces the following output:</span></span>  
  
```  
<aw:Root xmlns:aw="http://www.adventure-works.com">  
  <aw:Child>content</aw:Child>  
</aw:Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>