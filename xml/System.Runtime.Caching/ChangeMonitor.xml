<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7f673552db74d3ed1ff4f6fe8dcc10612167e5c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36542112" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type ChangeMonitor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornisce una classe base per un tipo personalizzato derivato che monitora le modifiche dello stato dei dati da cui dipende un elemento della cache.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Runtime.Caching.ChangeMonitor> classe viene utilizzata come classe base per classi derivate di monitoraggio che sono specializzate per le implementazioni di specifica della cache. Oggetto <xref:System.Runtime.Caching.ChangeMonitor> istanza consente di monitorare le modifiche nello stato di dati che dipende da un elemento della cache. Ad esempio, l'elemento può essere un'entità di file o i dati viene memorizzati nella cache il cui contenuto. Se l'entità di file o i dati verrà aggiornato, è necessario modificare anche la voce della cache associata. Gli elementi comuni che possono essere monitorati includono dati entità (ad esempio campi di database, i valori, righe o tabelle), un'altra voce di cache e i file e gli attributi di file.  
  
 Una modifica di dipendenza è una modifica nello stato di una dipendenza. In un'implementazione tipica della cache dopo un <xref:System.Runtime.Caching.ChangeMonitor> istanza notifica cache che ha modificato una dipendenza, la cache esegue l'azione richiesta, ad esempio invalidazione voce cache inserite.  
  
 Derivato <xref:System.Runtime.Caching.ChangeMonitor> classi possono essere personalizzate per monitorare le modifiche di dipendenza per gli archivi dati diversi specifici. Ad esempio, sono disponibili implementazioni di cache per un file system, memoria fisica o un database. Il <xref:System.Runtime.Caching.ChangeMonitor> classe esamina le modifiche che avvengono all'esterno della cache e quindi avvisa la cache che sono state apportate modifiche.  
  
 Il [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] include le seguenti classi che derivano da <xref:System.Runtime.Caching.ChangeMonitor> classe:  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 Ognuna di queste classi collabora con diversi tipi di dipendenze. Ad esempio, derivato <xref:System.Runtime.Caching.FileChangeMonitor> classe consente di monitorare le modifiche apportate a una cache di dati del file system (file e cartelle) che varia in base all'elemento della cache.  
  
 ]]></format>
    </remarks>
    <threadsafe>Questo tipo è thread-safe.</threadsafe>
    <block subset="none" type="overrides">
      <para>Se si crea un oggetto personalizzato implementazione della cache o una monitoraggio di tipo, delle modifiche derivato è necessario seguire determinate linee guida. Nell'elenco seguente sono riepilogate queste linee guida. Per altre informazioni, vedere la documentazione per i singoli metodi o proprietà.  -Il costruttore di una classe derivata deve impostare il <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> proprietà, iniziare il monitoraggio e chiamare <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metodo prima il metodo restituisce. Se un costruttore rileva un errore durante la costruzione e deve disporre per eliminare le risorse, è possibile chiamare solo il costruttore di <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload dopo il <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metodo viene chiamato perché il <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload genererà un <see cref="T:System.InvalidOperationException" /> eccezione se l'inizializzazione non è stata completata.  -Se si verificano modifiche nel completare i dati che viene monitorati prima dell'inizializzazione, il costruttore deve chiamare il <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metodo prima di chiamare il <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metodo.  -Dopo un oggetto derivato <see cref="T:System.Runtime.Caching.ChangeMonitor" /> viene creata un'istanza di tipo, è necessario inserire il monitoraggio in un oggetto personalizzato <see cref="T:System.Runtime.Caching.ObjectCache" /> implementazione. O se desidera più utilizzare il monitoraggio delle modifiche, chiamare il <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metodo.  -Dopo una <see cref="T:System.Runtime.Caching.ChangeMonitor" /> istanza viene inserita in un <see cref="T:System.Runtime.Caching.ObjectCache" /> implementazione, il <see cref="T:System.Runtime.Caching.ObjectCache" /> istanza richiedono che venga eliminato il monitoraggio delle modifiche. Anche se l'inserimento non è valida e genera un'eccezione, il <see cref="T:System.Runtime.Caching.ObjectCache" /> implementazione deve chiamare il <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> rapporto di overload.  -Dopo un monitoraggio delle modifiche derivato viene inserito in una cache, il <see cref="T:System.Runtime.Caching.ObjectCache" /> implementazione deve chiamare <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, passando un <see cref="T:System.Runtime.Caching.OnChangedCallback" /> oggetto. Il <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> metodo può essere chiamato solo una volta. Se una modifica di dipendenza è già verificato, il <see cref="T:System.Runtime.Caching.OnChangedCallback" /> chiamata immediata istanza quando <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> viene chiamato. In caso contrario, il <see cref="T:System.Runtime.Caching.OnChangedCallback" /> istanza verrà chiamata solo una volta. Questo una volta chiamata si verifica quando il <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metodo viene chiamato perché il <see cref="T:System.Runtime.Caching.ChangeMonitor" /> istanza ha rilevato una modifica, o quando il <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metodo viene chiamato sul <see cref="T:System.Runtime.Caching.ChangeMonitor" />, qualunque si verifichi prima.  -La <see cref="T:System.Runtime.Caching.OnChangedCallback" /> istanza che viene fornito da un' <see cref="T:System.Runtime.Caching.ObjectCache" /> implementazione deve rimuovere la voce della cache associata e specificare un motivo tramite il <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> enumerazione.  -A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> istanza può chiamare il <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metodo prima che un'implementazione della cache è chiamato <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> metodo o dopo. Se il <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metodo viene chiamato prima <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> viene chiamato, la base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementazione informerà cache che ciò è accaduto e attiverà il callback deve essere passato <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> immediatamente quando <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> viene richiamato. I dati di stato che viene passati per il <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> salvato dal monitoraggio delle modifiche e successivamente passato al metodo il <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> (metodo) quando il <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> metodo viene richiamato.  -Un monitoraggio delle modifiche deve implementare il <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> metodo. Per altre informazioni, vedere il <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> documentazione relativa al metodo.  -La <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload del metodo deve essere chiamato per eliminare il <see cref="T:System.Runtime.Caching.ChangeMonitor" /> istanza. Le regole per la chiamata a Dispose sono i seguenti:-prima di un elemento viene inserito nella cache, è responsabilità del chiamante per eliminare un <see cref="T:System.Runtime.Caching.ChangeMonitor" /> istanza.  -Una volta l'elemento della cache e il <see cref="T:System.Runtime.Caching.ChangeMonitor" /> le istanze che esso associati vengono passate a una cache, il responsabile dell'implementazione della cache deve assicurarsi che il <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metodo viene chiamato, anche se l'inserimento ha esito negativo.  -Dopo un elemento e a essa associati <see cref="T:System.Runtime.Caching.ChangeMonitor" /> le istanze sono passate a una cache, il chiamante non deve eliminare la dipendenza perché quando il <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metodo viene chiamato, la chiamata viene considerata come se la dipendenza è stata modificata. Di conseguenza, il <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metodo viene richiamato automaticamente.  -Prendendo in considerazione, queste regole di <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metodo deve essere chiamato in uno dei modi seguenti:-gli utenti devono chiamare il <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload del metodo se si decide di non inserire l'istanza di monitoraggio delle modifiche in una cache.  -Se l'implementazione tenta di inserire l'istanza di monitoraggio delle modifiche in una cache oggetti ha esito negativo dell'operazione di inserimento, l'implementazione della cache è responsabile della chiamata di <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> rapporto di overload. Quando il tentativo di inserimento provoca un'eccezione, l'implementazione della cache deve eliminare le relative dipendenze.  -Se la voce della cache viene rimosso, l'implementazione della cache deve eliminare anche della dipendenza.  -L'implementazione interna del <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> chiama automaticamente il <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metodo dopo aver chiamato un callback registrato tramite <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.  <block subset="none" type="note"><para> Questa chiamata automatica al metodo dispose durante la generazione dell'evento si verifica solo se l'inizializzazione del <see cref="T:System.Runtime.Caching.ChangeMonitor" /> istanza è stata completata in precedenza.  </para></block>  Quando chiama il metodo costruttore di un monitoraggio delle modifiche derivato il <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metodo, se lo stato del monitoraggio delle modifiche è già stato modificato (vale a dire, lo stato che viene monitorato già cambiato quando il costruttore è stato ancora attivo) il <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> verrà (metodo) Elimina automaticamente il monitoraggio delle modifiche.  -La <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> è impostata su <see langword="true" /> dopo il <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> viene chiamato dall'istanza del monitoraggio delle modifiche, indipendentemente dal fatto che un <see cref="T:System.Runtime.Caching.OnChangedCallback" /> oggetto è stato impostato da una chiamata al <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> metodo o non.</para>
    </block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Runtime.Caching.ChangeMonitor" />. Questo costruttore viene chiamato da costruttori in classi derivate per inizializzare la classe base.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Runtime.Caching.ChangeMonitor> classe ha un costruttore predefinito. Tuttavia, le classi che ereditano dalla base <xref:System.Runtime.Caching.ChangeMonitor> classe e definire personalizzato il monitoraggio modifica il comportamento necessario eseguire l'inizializzazione nel costruttore. Per altre informazioni, vedere la sezione Note per gli eredi.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il costruttore di una classe derivata deve impostare il <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> proprietà, iniziare il monitoraggio e chiamare il <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> classe prima della restituzione. Se una dipendenza viene modificata prima dell'inizializzazione è completa (ad esempio, se una chiave di cache dipendenti non viene trovata nella cache), è necessario chiamare il costruttore di <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metodo prima di chiamare il <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metodo. In questo caso, è possibile chiamare costruttore il <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metodo solo dopo che il <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> viene chiamato, perché il <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metodo genera un'eccezione se l'inizializzazione non è stata completata.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo viene utilizzato per rilasciare il <xref:System.Runtime.Caching.ChangeMonitor> istanza e le relative risorse. Pubblico <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo viene richiamato per coordinare il processo di eliminazione con gli eventi principali del ciclo di vita delle classi di monitoraggio delle modifiche (ad esempio inizializzazione) e rilasciare il <xref:System.Runtime.Caching.ChangeMonitor> istanza in modo che l'istanza può essere sottoposto a garbage collection. Il <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo viene implementato dalle classi di monitoraggio delle modifiche per eliminare le relative risorse gestite e non gestite.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="changeMonitor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo richiama il <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo delle classi derivate solo una volta, la prima volta che viene chiamato. Le chiamate successive al <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> (metodo) non hanno alcun effetto. Dopo che è stato chiamato il metodo, il <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> è impostata su `true`.  
  
 Il <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload deve essere chiamato per eliminare un <xref:System.Runtime.Caching.ChangeMonitor> istanza. Di seguito è riportate le regole per la chiamata al metodo dispose:  
  
-   Prima di un elemento viene inserito nella cache, è responsabilità del chiamante per eliminare un <xref:System.Runtime.Caching.ChangeMonitor> istanza.  
  
-   Una volta l'elemento della cache e il <xref:System.Runtime.Caching.ChangeMonitor> le istanze che esso associati vengono passate a una cache, il responsabile dell'implementazione della cache che è necessario assicurarsi che <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> viene chiamato, anche se l'inserimento ha esito negativo.  
  
-   Dopo un elemento e a essa associati <xref:System.Runtime.Caching.ChangeMonitor> le istanze sono passate a una cache, il chiamante non deve eliminare la dipendenza perché quando il <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo viene chiamato, la chiamata viene considerata come se la dipendenza è stata modificata. Di conseguenza, il <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodo viene richiamato automaticamente.  
  
-   Tenendo conto, queste regole di <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo deve essere chiamato in uno dei modi seguenti:  
  
    -   Gli utenti devono chiamare il <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload del metodo se si decide di non inserire l'istanza di monitoraggio delle modifiche in una cache.  
  
    -   L'implementazione della cache è responsabile della chiamata di <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload se l'implementazione tenta di inserire l'istanza di monitoraggio delle modifiche in una cache dell'oggetto, ma l'inserimento ha esito negativo. Quando il tentativo di inserimento provoca un'eccezione, l'implementazione della cache deve eliminare le relative dipendenze.  
  
    -   Se la voce della cache viene rimosso, l'implementazione della cache deve anche eliminare la dipendenza.  
  
 L'implementazione interna del <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> chiama automaticamente il <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo dopo aver chiamato un callback registrato tramite il <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metodo.  
  
> [!NOTE]
>  Questa eliminazione automatica durante la generazione dell'evento si verifica solo se l'inizializzazione del <xref:System.Runtime.Caching.ChangeMonitor> istanza è stata completata in precedenza.  
  
 Quando chiama il metodo costruttore di un monitoraggio delle modifiche derivato di <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> metodo, se lo stato del monitoraggio delle modifiche è già stato modificato (vale a dire, lo stato in cui viene monitorato già modificata quando il costruttore è stato ancora attivo) quindi <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> verrà (metodo) Elimina automaticamente il monitoraggio delle modifiche.  
  
> [!NOTE]
>  Gli utenti non devono chiamare il <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo. È tuttavia, non è possibile impedire agli utenti di chiamata al metodo. Pertanto, in caso contrario, il <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodo viene richiamato. In tal caso, la voce della cache riceve una notifica come se la dipendenza è stata modificata.  
  
 Per impedire alle classi derivate di eseguire l'override <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo, il metodo non è un'implementazione esplicita dell'interfaccia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'inizializzazione non è completa nella classe derivata di monitoraggio delle modifiche che ha chiamato il metodo di base <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" />.</exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="changeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> per rilasciare le risorse gestite e non gestite ed eventuali riferimenti a un'istanza di <see cref="T:System.Runtime.Caching.ChangeMonitor" />. <see langword="false" /> per rilasciare solo le risorse non gestite. Quando viene passato <see langword="false" />, il metodo <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> viene chiamato da un thread <see langword="finalizer" /> e i riferimenti gestiti esterni probabilmente non sono più validi perché sono già stati raccolti nel Garbage Collector.</param>
        <summary>Rilascia tutte le risorse gestite e non gestite ed eventuali riferimenti all'istanza di <see cref="T:System.Runtime.Caching.ChangeMonitor" />. Questo overload deve essere implementato dalle classi derivate di monitoraggio delle modifiche.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando il valore di `disposing` valore `true`, tutte le risorse gestite e non gestite vengano eliminate e vengono rilasciati tutti i riferimenti a questo oggetto in modo che l'istanza di monitoraggio delle modifiche può essere sottoposto a garbage collection. Viene garantito che la base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo richiamerà implementato <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo solo una volta.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Monitoraggio delle modifiche deve implementare il <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload per rilasciare tutte le risorse gestite e quando il valore di <paramref name="disposing" /> è <see langword="true" />. Il <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload del metodo con un <paramref name="disposing" /> valore <see langword="true" /> viene chiamato solo una volta, vale a dire, quando viene eliminata l'istanza per la prima volta. Monitoraggio delle modifiche non deve chiamare il <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> sottoposto a overload direttamente. Un monitoraggio delle modifiche derivato può chiamare pubblico senza parametri <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metodo sulla base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> classe.  In alternativa, un monitoraggio delle modifiche può implementare un metodo finalizzatore. In tal caso, è possibile richiamare il finalizzatore il <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> metodo e passarlo una <paramref name="disposing" /> valore <see langword="false" />. Tuttavia, si tratta in genere non necessario. Monitoraggio delle modifiche di dipendenza viene solitamente eseguito da un servizio che mantiene un riferimento all'istanza di monitoraggio delle modifiche. Il riferimento ne impedisce l'istanza di garbage collection e pertanto un metodo finalizzatore non necessari. Per evitare perdite di memoria, quando viene modificata una dipendenza, il <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metodo elimina l'istanza di monitoraggio delle modifiche (a meno che l'inizializzazione non è ancora terminata).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica che lo stato monitorato dalla classe <see cref="T:System.Runtime.Caching.ChangeMonitor" /> è stato modificato.</summary>
        <value>
          <see langword="true" /> se lo stato monitorato dall'istanza di <see cref="T:System.Runtime.Caching.ChangeMonitor" /> è stato modificato; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile controllare il valore di questa proprietà in un oggetto derivato <xref:System.Runtime.Caching.ChangeMonitor> classe per determinare se una dipendenza è stato modificato.  
  
 Il valore è impostato su `true` quando si verifica una modifica dipendenza (ovvero, quando il <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodo viene chiamato). Dopo il <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodo viene chiamato dalla classe derivata, il valore della <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> proprietà sarà `true`, indipendentemente dal fatto che un <xref:System.Runtime.Caching.OnChangedCallback> istanza ha ricevuto alcuna notifica tramite una chiamata al <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metodo.  
  
> [!NOTE]
>  I chiamanti possono controllare il <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> proprietà per verificare se una dipendenza è stato modificato. Tuttavia, in un ambiente a thread multipli, un approccio più semplice e più gestibile è per inserire dati in un'implementazione della cache senza verificare il <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> proprietà. Le implementazioni della cache devono controllare il <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> proprietà automaticamente e non deve eseguire un'istruzione insert o operazione set se uno o più dipendenze associate sono già stati modificati.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberSignature Language="F#" Value="member this.InitializationComplete : unit -&gt; unit" Usage="changeMonitor.InitializationComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiamato dal costruttore di classi derivate per indicare che l'inizializzazione è terminata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se una dipendenza viene modificata prima che l'inizializzazione è completa in una classe derivata, è necessario richiamare il costruttore della classe derivata di <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodo.  
  
 Quando il <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodo viene richiamato, il <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> è impostata automaticamente su `true` dal monitoraggio delle modifiche. Di conseguenza, quando chiama il costruttore monitoraggio delle modifiche la <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> metodo, la classe di base chiama automaticamente il <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo. Se l'inizializzazione è completa, il <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodo elimina automaticamente l'istanza di monitoraggio delle modifiche.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il costruttore di una classe derivata deve chiamare la base <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metodo prima di restituire il costruttore. Può chiamare il costruttore di una classe derivata il <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metodo solo dopo che <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> viene chiamato, perché il <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metodo genera un'eccezione se l'inizializzazione non è stata completata.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica che viene eliminata un'istanza derivata di una classe <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</summary>
        <value>
          <see langword="true" /> se l'istanza è stata eliminata. In caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La proprietà è impostata su `true` dopo la base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> chiamate al metodo di <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodo in una classe derivata per l'eliminazione dell'istanza.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberSignature Language="F#" Value="member this.NotifyOnChanged : System.Runtime.Caching.OnChangedCallback -&gt; unit" Usage="changeMonitor.NotifyOnChanged onChangedCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback">Riferimento a un metodo richiamato quando viene modificata una dipendenza.</param>
        <summary>Chiamato dalle implementazioni della cache per registrare un callback e notificare a un'istanza <see cref="T:System.Runtime.Caching.ObjectCache" /> tramite il delegato <see cref="T:System.Runtime.Caching.OnChangedCallback" /> quando una dipendenza viene modificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I responsabili dell'implementazione della cache utilizzare questo metodo per associarsi a un monitoraggio delle modifiche. Se si associa uno o più monitoraggi con l'elemento della cache delle modifiche, si passa un <xref:System.Runtime.Caching.CacheItemPolicy> istanza con una proprietà di monitoraggi modifiche compilata per l'elemento della cache. Un implementatore di cache che supporta modifiche monitoraggi è responsabile per l'iterazione di <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> proprietà e registrare il <xref:System.Runtime.Caching.OnChangedCallback> delegati con ogni monitoraggio delle modifiche che trova.  
  
 Poiché il <xref:System.Runtime.Caching.OnChangedCallback> delegato include un parametro di stato facoltative, un'implementazione di monitoraggio modifiche concreto possibile passare le informazioni di stato facoltative. Il responsabile dell'implementazione della cache determina se una dipendenza esplicita del tipo di stato di monitoraggio delle modifiche personalizzato passa come parte del metodo di callback può essere ottenuta.  
  
> [!NOTE]
>  API di estensibilità della cache di base non presenta requisiti per la dipendenza esplicita del tipo di stato.  
  
 L'implementazione del <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metodo determina automaticamente se lo stato del monitoraggio è già stato modificato al momento <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metodo viene chiamato. Se il <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> proprietà è `true`, quindi il metodo viene chiamato automaticamente il <xref:System.Runtime.Caching.OnChangedCallback> gestore dell'evento, che è stato registrato, tramite il <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodo. Questo errore si verifica poiché è possibile che dal momento in cui che un'implementazione della cache consente di creare un monitoraggio delle modifiche, all'ora di un'implementazione della cache Ottiene il monitoraggio e collega ad esso, lo stato monitorato sottostante è stato modificato. Se lo stato è già stato modificato quindi l'oggetto passato per il <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodo `null`.  
  
 Il <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metodo può essere richiamato solo una volta e verrà generata un'eccezione in chiamate successive.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il metodo callback è stato già richiamato.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="onChangedCallback" /> è <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>1.  È necessario chiamare il <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> metodo ricevere notifica delle modifiche di dipendenza. Se una modifica di dipendenza è già verificato, il <see cref="T:System.Runtime.Caching.OnChangedCallback" /> istanza verrà chiamata quando <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> viene chiamato. In caso contrario, il <see cref="T:System.Runtime.Caching.OnChangedCallback" /> istanza verrà chiamata una sola volta, quando il <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> viene chiamato o quando il <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metodo viene chiamato, qualunque si verifichi prima. Il <see cref="T:System.Runtime.Caching.OnChangedCallback" /> istanza fornito dall'implementazione della cache deve rimuovere la voce della cache e se è richiesto dal chiamante della cache, generare la modifica necessaria o aggiornare l'evento al chiamante originale della cache.  2.  L'implementazione di cache oggetto necessario rimuovere la voce della cache associata a una modifica della dipendenza.</para>
        </block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : obj -&gt; unit" Usage="changeMonitor.OnChanged state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">Dati per l'evento di modifica. Il valore può essere <see langword="null" />.</param>
        <summary>Chiamato dalle classi derivate per generare l'evento quando viene modificata una dipendenza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, il <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodo viene chiamato quando si verificano le modifiche di dipendenza. Il <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodo viene richiamato anche quando un'istanza di monitoraggio delle modifiche è stata eliminata, ma l'eliminazione si verifica solo se non è già stato richiamato il callback.  
  
 Se il <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodo viene chiamato prima il <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> viene chiamato, i dati dello stato dalla chiamata al <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodo viene salvato dall'implementazione della cache. Inoltre, il callback per la <xref:System.Runtime.Caching.OnChangedCallback> metodo viene richiamato immediatamente quando il <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metodo viene richiamato.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che rappresenta l'istanza della classe <see cref="T:System.Runtime.Caching.ChangeMonitor" />.</summary>
        <value>Identificatore di un'istanza di monitoraggio delle modifiche.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> valore della proprietà consiste in genere in dipendenza nomi combinato dei dati di stringa che identifica in modo univoco gli identificatori i dati che viene monitorati utilizzando un <xref:System.Runtime.Caching.ChangeMonitor> istanza. Il valore di <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> proprietà è una stringa. Il valore della stringa viene utilizzato per assegnare l'ID univoco del <xref:System.Runtime.Caching.ChangeMonitor> istanza.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Eseguendo l'override della proprietà, è possibile definire un'implementazione personalizzata per il valore stringa della proprietà per assegnare un ID univoco.</para>
        </block>
        <block subset="none" type="overrides">
          <para>Nelle classi derivate, è necessario impostare il valore della proprietà nel costruttore.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>