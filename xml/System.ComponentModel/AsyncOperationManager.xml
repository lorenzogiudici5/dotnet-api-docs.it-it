<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="606bfa8ffd9f758de42817a0e4e7eaf9e11c8260" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30368675" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce la gestione della concorrenza per le classi che supportano le chiamate asincrone. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se la classe deve avere un comportamento asincrono in base al [Panoramica del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), verrà visualizzato un numero di problemi di gestione della concorrenza. Tra questi è il requisito per garantire che i gestori eventi vengono chiamati in un thread o contesto adeguato per il modello di applicazione (ad esempio, applicazioni Windows Forms, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] applicazioni, applicazioni console e così via). Il <xref:System.ComponentModel.AsyncOperationManager> fornisce un modo pratico per creare una classe che viene eseguito correttamente in tutti i modelli di applicazione supportati dal [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 Il <xref:System.ComponentModel.AsyncOperationManager> classe dispone di un metodo, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, che restituisce un <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> che può essere usato per tenere traccia della durata di una particolare attività asincrona. Il <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> per un'attività può essere utilizzato per avvisare i client quando un'attività viene completata. E può essere utilizzato anche per pubblicare aggiornamenti sull'avanzamento e risultati incrementali senza interrompere l'operazione.  
  
 Per ulteriori informazioni sull'implementazione di classi asincrone, vedere [implementazione del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di <xref:System.ComponentModel.AsyncOperationManager> classe per creare una classe che supporta le operazioni asincrone per qualsiasi modello di applicazione. Viene illustrato come implementare una classe che consente di verificare un numero per determinare se è un numero primo. Questo calcolo può richiedere tempi lunghe, quindi viene eseguito in un thread separato. Report stato di avanzamento, sui risultati incrementali e le notifiche di completamento sono di competenza di <xref:System.ComponentModel.AsyncOperation> (classe), che assicura che i gestori eventi del client vengono chiamati nel thread appropriato o contesto.  
  
 Per un elenco completo di codice, vedere [procedura: implementare un componente che supporta il modello asincrono basato su eventi](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Per un elenco di codice completo di un form di client, vedere [procedura: implementare un Client del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">Oggetto utilizzato per associare informazioni sullo stato del client, ad esempio un ID attività, a un'operazione asincrona specifica.</param>
        <summary>Restituisce un oggetto <see cref="T:System.ComponentModel.AsyncOperation" /> per rilevare la durata di una particolare operazione asincrona.</summary>
        <returns>Un oggetto <see cref="T:System.ComponentModel.AsyncOperation" /> utilizzabile per tenere traccia della durata di una chiamata asincrona a un metodo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> metodo restituisce un <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> che è possibile utilizzare per tenere traccia della durata di una determinata operazione asincrona e per avvisare il modello di applicazione al termine dell'operazione. È possibile inoltre utilizzare per pubblicare aggiornamenti sull'avanzamento e risultati incrementali senza interrompere l'operazione. Il <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> correttamente eseguirà il marshalling di chiamate al thread desiderato o sul contesto per il modello di applicazione.  
  
 Se si implementa una classe che supporta il modello asincrono basato su eventi, la classe dovrà chiamare <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> ogni volta che il *NomeMetodo* `Async` metodo viene chiamato. L'applicazione client che effettua chiamate al metodo può utilizzare il `userSuppliedState` parametro per identificare in modo univoco ogni chiamata, in modo da distinguere gli eventi generati durante l'esecuzione dell'operazione asincrona.  
  
> [!CAUTION]
>  Il codice client deve fornire un valore univoco per il `userSuppliedState` parametro. ID attività non univoci può causare l'implementazione segnalare lo stato di avanzamento e altri eventi in modo non corretto. Il codice deve verificare la presenza di un ID attività non univoci e generare un <xref:System.ArgumentException?displayProperty=nameWithType> se viene rilevata.  
  
 Il codice deve rilevare ogni <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> restituito da <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> e utilizzare l'oggetto nell'operazione asincrona sottostante corrispondente per pubblicare gli aggiornamenti e terminare l'operazione. Questo rilevamento può essere semplice come passaggio di <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> come parametro tra i delegati. In progettazioni più sofisticate, la classe può conservare una raccolta di <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> oggetti, aggiungere oggetti all'avvio delle attività e rimuoverle quando le attività vengono completate o annullate. Questo approccio consente di verificare la presenza di univoco `userSuppliedState` parametro valori ed è il metodo da utilizzare quando si utilizzano le classi che supportano più chiamate simultanee.  
  
 Per ulteriori informazioni sull'implementazione di classi asincrone, vedere [implementazione del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> metodo per creare un <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> per rilevare la durata delle operazioni asincrone. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.ComponentModel.AsyncOperationManager> classe.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il contesto di sincronizzazione per l'operazione asincrona.</summary>
        <value>Il contesto di sincronizzazione per l'operazione asincrona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione predefinita è l'implementazione a thread libero.  
  
 Un thread imposti il <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> proprietà `null` per rilasciare la factory a thread libero al termine dell'operazione, altrimenti non verrà eliminato mai la factory.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">Per impostare il contesto di sincronizzazione. Valore richiesta: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Stato associato:</permission>
      </Docs>
    </Member>
  </Members>
</Type>