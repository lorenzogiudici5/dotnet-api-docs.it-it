<Type Name="ISynchronizeInvoke" FullName="System.ComponentModel.ISynchronizeInvoke">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ac5648d586e03aebeb7db72bd148861e02bc6f37" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISynchronizeInvoke" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizeInvoke" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ISynchronizeInvoke" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizeInvoke" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizeInvoke" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="cebd7-101">Consente l'esecuzione sincrona o asincrona di un delegato.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cebd7-101">Provides a way to synchronously or asynchronously execute a delegate.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cebd7-102">Il <xref:System.ComponentModel.ISynchronizeInvoke> interfaccia fornisce comunicazione sincrona e asincrona tra oggetti relativamente all'occorrenza di un evento.</span><span class="sxs-lookup"><span data-stu-id="cebd7-102">The <xref:System.ComponentModel.ISynchronizeInvoke> interface provides synchronous and asynchronous communication between objects about the occurrence of an event.</span></span> <span data-ttu-id="cebd7-103">Gli oggetti che implementano questa interfaccia possono ricevere una notifica che si è verificato un evento e rispondono alle query sull'evento.</span><span class="sxs-lookup"><span data-stu-id="cebd7-103">Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event.</span></span> <span data-ttu-id="cebd7-104">In questo modo, i client possono garantire che una richiesta è stata elaborata prima di inviare una richiesta successiva che dipende dal completamento del primo.</span><span class="sxs-lookup"><span data-stu-id="cebd7-104">In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.</span></span>  
  
 <span data-ttu-id="cebd7-105">La <xref:System.ComponentModel.ISynchronizeInvoke> classe fornisce due modi per richiamare un processo:</span><span class="sxs-lookup"><span data-stu-id="cebd7-105">The <xref:System.ComponentModel.ISynchronizeInvoke> class provides two ways to invoke a process:</span></span>  
  
1.  <span data-ttu-id="cebd7-106">In modo asincrono, tramite il <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cebd7-106">Asynchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> method.</span></span> <span data-ttu-id="cebd7-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> Avvia un processo e quindi restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="cebd7-107"><xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately.</span></span> <span data-ttu-id="cebd7-108">Utilizzare <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> per attendere finché il processo avviato dal <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> viene completata.</span><span class="sxs-lookup"><span data-stu-id="cebd7-108">Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.</span></span>  
  
2.  <span data-ttu-id="cebd7-109">In modo sincrono, utilizzando il <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cebd7-109">Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method.</span></span> <span data-ttu-id="cebd7-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> Avvia un processo, attende il completamento e quindi restituisce.</span><span class="sxs-lookup"><span data-stu-id="cebd7-110"><xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns.</span></span> <span data-ttu-id="cebd7-111">Utilizzare <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> quando il controllo principale del thread è diverso dal thread chiamante per il marshalling della chiamata al thread appropriato.</span><span class="sxs-lookup"><span data-stu-id="cebd7-111">Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cebd7-112">Il <xref:System.Security.Permissions.HostProtectionAttribute> attributo applicato a questa classe offre i seguenti <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> valore della proprietà: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>.</span><span class="sxs-lookup"><span data-stu-id="cebd7-112">The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>.</span></span> <span data-ttu-id="cebd7-113">L'oggetto <xref:System.Security.Permissions.HostProtectionAttribute> non influisce sulle applicazioni desktop, che in genere vengono avviate facendo doppio clic sull'icona, digitando un comando oppure immettendo un URL in un browser.</span><span class="sxs-lookup"><span data-stu-id="cebd7-113">The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).</span></span> <span data-ttu-id="cebd7-114">Per ulteriori informazioni, vedere il <xref:System.Security.Permissions.HostProtectionAttribute> classe o [programmazione in SQL Server e attributi di protezione Host](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span><span class="sxs-lookup"><span data-stu-id="cebd7-114">For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="cebd7-115">Classe <see cref="T:System.Delegate" /> di un metodo che accetta parametri dello stesso numero e tipo di quelli contenuti in <c>args</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-115">A <see cref="T:System.Delegate" /> to a method that takes parameters of the same number and type that are contained in <c>args</c>.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="cebd7-116">Una matrice di tipo <see cref="T:System.Object" /> da passare come argomenti al metodo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-116">An array of type <see cref="T:System.Object" /> to pass as arguments to the given method.</span>
          </span>
          <span data-ttu-id="cebd7-117">Se non sono richiesti argomenti, può corrispondere a <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-117">This can be <see langword="null" /> if no arguments are needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cebd7-118">Esegue in modo asincrono il delegato sul thread che ha creato questo oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-118">Asynchronously executes the delegate on the thread that created this object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cebd7-119">Interfaccia <see cref="T:System.IAsyncResult" /> che rappresenta l'operazione asincrona avviata con la chiamata a questo metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-119">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling this method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cebd7-120">Il `method` delegato viene eseguito sul thread che ha creato l'oggetto, anziché nel thread in cui <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> è stato chiamato.</span><span class="sxs-lookup"><span data-stu-id="cebd7-120">The `method` delegate is executed on the thread that created the object, instead of the thread on which <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> was called.</span></span>  
  
 <span data-ttu-id="cebd7-121">Il delegato viene chiamato in modo asincrono e questo metodo restituisce immediatamente.</span><span class="sxs-lookup"><span data-stu-id="cebd7-121">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="cebd7-122">Questo metodo è possibile chiamare da qualsiasi thread.</span><span class="sxs-lookup"><span data-stu-id="cebd7-122">You can call this method from any thread.</span></span> <span data-ttu-id="cebd7-123">Il valore restituito da un processo avviato con questo metodo, è necessario chiamare <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> per ottenere il valore.</span><span class="sxs-lookup"><span data-stu-id="cebd7-123">If you need the return value from a process started with this method, call <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to get the value.</span></span>  
  
 <span data-ttu-id="cebd7-124">Se è necessario chiamare il delegato in modo sincrono, utilizzare il <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> metodo invece.</span><span class="sxs-lookup"><span data-stu-id="cebd7-124">If you need to call the delegate synchronously, use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="cebd7-125">Interfaccia <see cref="T:System.IAsyncResult" /> che rappresenta l'operazione asincrona avviata con la chiamata al metodo <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-125">An <see cref="T:System.IAsyncResult" /> interface that represents the asynchronous operation started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cebd7-126">Consente di attendere il completamento del processo avviato con la chiamata al metodo <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> e di restituire quindi il valore generato dal processo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-126">Waits until the process started by calling <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> completes, and then returns the value generated by the process.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cebd7-127">Oggetto <see cref="T:System.Object" /> che rappresenta il valore restituito generato dall'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-127">An <see cref="T:System.Object" /> that represents the return value generated by the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cebd7-128">Questo metodo ottiene il valore restituito dell'operazione asincrona rappresentata la <xref:System.IAsyncResult> passato da questa interfaccia.</span><span class="sxs-lookup"><span data-stu-id="cebd7-128">This method gets the return value of the asynchronous operation represented by the <xref:System.IAsyncResult> passed by this interface.</span></span> <span data-ttu-id="cebd7-129">Se l'operazione asincrona è stata completata, questo metodo attende il risultato è disponibile.</span><span class="sxs-lookup"><span data-stu-id="cebd7-129">If the asynchronous operation has not completed, this method will wait until the result is available.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="cebd7-130">Oggetto <see cref="T:System.Delegate" /> contenente il metodo da chiamare, nel contesto del thread per il controllo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-130">A <see cref="T:System.Delegate" /> that contains a method to call, in the context of the thread for the control.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="cebd7-131">Matrice di tipo <see cref="T:System.Object" /> che rappresenta gli argomenti che devono essere passati al metodo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-131">An array of type <see cref="T:System.Object" /> that represents the arguments to pass to the given method.</span>
          </span>
          <span data-ttu-id="cebd7-132">Se non sono richiesti argomenti, può corrispondere a <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-132">This can be <see langword="null" /> if no arguments are needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cebd7-133">Esegue in modo sincrono il delegato sul thread che ha creato questo oggetto ed esegue il marshalling della chiamata al thread di creazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-133">Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cebd7-134">Un oggetto <see cref="T:System.Object" /> che rappresenta il valore restituito dal delegato richiamato oppure <see langword="null" /> se il delegato non restituisce alcun valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-134">An <see cref="T:System.Object" /> that represents the return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cebd7-135">A differenza di <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, questo metodo funziona in modo sincrono, vale a dire, attende il completamento del processo prima della restituzione.</span><span class="sxs-lookup"><span data-stu-id="cebd7-135">Unlike <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, this method operates synchronously, that is, it waits until the process completes before returning.</span></span> <span data-ttu-id="cebd7-136">Le eccezioni generate durante la chiamata vengono propagate al chiamante.</span><span class="sxs-lookup"><span data-stu-id="cebd7-136">Exceptions raised during the call are propagated back to the caller.</span></span>  
  
 <span data-ttu-id="cebd7-137">Utilizzare questo metodo quando si chiama un metodo da un thread diverso per il marshalling della chiamata al thread appropriato.</span><span class="sxs-lookup"><span data-stu-id="cebd7-137">Use this method when calling a method from a different thread to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cebd7-138">Ottiene un valore che indica se il chiamante deve chiamare il metodo <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> quando viene chiamato un oggetto che implementa questa interfaccia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-138">Gets a value indicating whether the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> when calling an object that implements this interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cebd7-139">
            <see langword="true" /> se il chiamante deve chiamare il metodo <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cebd7-139">
              <see langword="true" /> if the caller must call <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cebd7-140">Questa proprietà determina se il chiamante deve chiamare <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> quando effettua chiamate al metodo a un oggetto che implementa questa interfaccia.</span><span class="sxs-lookup"><span data-stu-id="cebd7-140">This property determines whether the caller must call <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when making method calls to an object that implements this interface.</span></span> <span data-ttu-id="cebd7-141">Tali oggetti sono associati a un thread specifico e non sono thread-safe.</span><span class="sxs-lookup"><span data-stu-id="cebd7-141">Such objects are bound to a specific thread and are not thread-safe.</span></span> <span data-ttu-id="cebd7-142">Se si chiama un metodo da un thread differente, è necessario utilizzare il <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> metodo per il marshalling della chiamata al thread appropriato.</span><span class="sxs-lookup"><span data-stu-id="cebd7-142">If you are calling a method from a different thread, you must use the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method to marshal the call to the proper thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>