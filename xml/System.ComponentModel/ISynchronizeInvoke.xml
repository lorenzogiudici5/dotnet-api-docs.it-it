<Type Name="ISynchronizeInvoke" FullName="System.ComponentModel.ISynchronizeInvoke">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="487d8f80afe19a48da2d943e861f20020a0daf20" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52196569" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISynchronizeInvoke" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISynchronizeInvoke" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.ISynchronizeInvoke" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISynchronizeInvoke" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISynchronizeInvoke" />
  <TypeSignature Language="F#" Value="type ISynchronizeInvoke = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Consente l'esecuzione sincrona o asincrona di un delegato.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.ISynchronizeInvoke> interfaccia fornisce la comunicazione sincrona e asincrona tra oggetti sull'occorrenza di un evento. Gli oggetti che implementano questa interfaccia possono ricevere una notifica che si è verificato un evento e poter rispondere alle query sull'evento. In questo modo, i client possono assicurarsi che una richiesta è stata elaborata prima di inviare una richiesta successiva che dipende dal completamento del primo.  
  
 Il <xref:System.ComponentModel.ISynchronizeInvoke> classe offre due modi per richiamare un processo:  
  
1.  In modo asincrono, tramite il <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> (metodo). <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> Avvia un processo e quindi restituisce immediatamente. Uso <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> per attendere finché il processo avviato da <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> viene completata.  
  
2.  In modo sincrono, utilizzando il <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> (metodo). <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> Avvia un processo, attende il completamento e quindi restituisce. Usare <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> quando il controllo principale del thread è diverso dal thread chiamante per il marshalling della chiamata al thread appropriato.  
  
> [!NOTE]
>  Il <xref:System.Security.Permissions.HostProtectionAttribute> attributo applicato a questa classe ha i seguenti elementi <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> valore proprietà: <xref:System.Security.Permissions.HostProtectionResource.Synchronization> &#124; <xref:System.Security.Permissions.HostProtectionResource.ExternalThreading>. L'oggetto <xref:System.Security.Permissions.HostProtectionAttribute> non influisce sulle applicazioni desktop, che in genere vengono avviate facendo doppio clic sull'icona, digitando un comando oppure immettendo un URL in un browser. Per altre informazioni, vedere la <xref:System.Security.Permissions.HostProtectionAttribute> classe oppure [programmazione in SQL Server e attributi di protezione Host](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
    <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="iSynchronizeInvoke.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">Oggetto <see cref="T:System.Delegate" /> a un metodo che accetta parametri dello stesso tipo e numero di quelli contenuti in <paramref name="args" />.</param>
        <param name="args">Una matrice di tipo <see cref="T:System.Object" /> da passare come argomenti al metodo specificato. Se non sono richiesti argomenti, può corrispondere a <see langword="null" />.</param>
        <summary>Esegue in modo asincrono il delegato sul thread che ha creato questo oggetto.</summary>
        <returns>Interfaccia <see cref="T:System.IAsyncResult" /> che rappresenta l'operazione asincrona avviata con la chiamata a questo metodo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `method` delegato viene eseguito sul thread che ha creato l'oggetto, invece di thread al quale <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> è stato chiamato.  
  
 Il delegato viene chiamato in modo asincrono e questo metodo viene restituito immediatamente. È possibile chiamare questo metodo da qualsiasi thread. Se è necessario il valore restituito da un processo avviato con questo metodo, chiamare <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> per ottenere il valore.  
  
 Se è necessario chiamare in modo sincrono il delegato, usare il <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> metodo invece.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj" Usage="iSynchronizeInvoke.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Interfaccia <see cref="T:System.IAsyncResult" /> che rappresenta l'operazione asincrona avviata con la chiamata al metodo <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />.</param>
        <summary>Consente di attendere il completamento del processo avviato con la chiamata al metodo <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> e di restituire quindi il valore generato dal processo.</summary>
        <returns>Oggetto <see cref="T:System.Object" /> che rappresenta il valore restituito generato dall'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo ottiene il valore restituito dell'operazione asincrona rappresentata dal <xref:System.IAsyncResult> passato da questa interfaccia. Se l'operazione asincrona non è stata completata, il metodo attenderà fino a quando il risultato è disponibile.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj" Usage="iSynchronizeInvoke.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">Oggetto <see cref="T:System.Delegate" /> contenente il metodo da chiamare, nel contesto del thread per il controllo.</param>
        <param name="args">Matrice di tipo <see cref="T:System.Object" /> che rappresenta gli argomenti che devono essere passati al metodo specificato. Se non sono richiesti argomenti, può corrispondere a <see langword="null" />.</param>
        <summary>Esegue in modo sincrono il delegato sul thread che ha creato questo oggetto ed esegue il marshalling della chiamata al thread di creazione.</summary>
        <returns>Un oggetto <see cref="T:System.Object" /> che rappresenta il valore restituito dal delegato richiamato oppure <see langword="null" /> se il delegato non restituisce alcun valore.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza di <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, questo metodo funziona in modo sincrono, vale a dire, resta in attesa fino a quando non viene completato il processo prima della restituzione. Le eccezioni generate durante la chiamata vengono propagate al chiamante.  
  
 Usare questo metodo quando si chiama un metodo da un altro thread per il marshalling della chiamata al thread corretto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.ComponentModel.ISynchronizeInvoke.InvokeRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il chiamante deve chiamare il metodo <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> quando viene chiamato un oggetto che implementa questa interfaccia.</summary>
        <value>
          <see langword="true" /> se il chiamante deve chiamare il metodo <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />, in caso contrario <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà determina se il chiamante deve chiamare <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> quando effettua chiamate al metodo a un oggetto che implementa questa interfaccia. Tali oggetti sono associati a un thread specifico e non sono thread-safe. Se si chiama un metodo da un thread diverso, è necessario usare il <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> metodo per il marshalling della chiamata al thread corretto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>