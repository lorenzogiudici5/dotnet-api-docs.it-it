<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ISynchronizeInvoke.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ac5648d586e03aebeb7db72bd148861e02bc6f37.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac5648d586e03aebeb7db72bd148861e02bc6f37</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Provides a way to synchronously or asynchronously execute a delegate.</source>
          <target state="translated">Consente l'esecuzione sincrona o asincrona di un delegato.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> interface provides synchronous and asynchronous communication between objects about the occurrence of an event.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> interfaccia fornisce comunicazione sincrona e asincrona tra oggetti relativamente all'occorrenza di un evento.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event.</source>
          <target state="translated">Gli oggetti che implementano questa interfaccia possono ricevere una notifica che si è verificato un evento e rispondono alle query sull'evento.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.</source>
          <target state="translated">In questo modo, i client possono garantire che una richiesta è stata elaborata prima di inviare una richiesta successiva che dipende dal completamento del primo.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> class provides two ways to invoke a process:</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke&gt;</ph> classe fornisce due modi per richiamare un processo:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Asynchronously, by using the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> method.</source>
          <target state="translated">In modo asincrono, tramite il <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> starts a process and then returns immediately.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> Avvia un processo e quindi restituisce immediatamente.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Use <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> to wait until the process started by <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> completes.</source>
          <target state="translated">Utilizzare <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> per attendere finché il processo avviato dal <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> viene completata.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Synchronously, by using the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">In modo sincrono, utilizzando il <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> starts a process, waits until it completes, and then returns.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> Avvia un processo, attende il completamento e quindi restituisce.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>Use <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> when the control's main thread is different from the calling thread to marshal the call to the proper thread.</source>
          <target state="translated">Utilizzare <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> quando il controllo principale del thread è diverso dal thread chiamante per il marshalling della chiamata al thread appropriato.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> attribute applied to this class has the following <ph id="ph2">&lt;xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A&gt;</ph> property value: <ph id="ph3">&lt;xref:System.Security.Permissions.HostProtectionResource.Synchronization&gt;</ph> &amp;#124; <ph id="ph4">&lt;xref:System.Security.Permissions.HostProtectionResource.ExternalThreading&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> attributo applicato a questa classe offre i seguenti <ph id="ph2">&lt;xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A&gt;</ph> valore della proprietà: <ph id="ph3">&lt;xref:System.Security.Permissions.HostProtectionResource.Synchronization&gt;</ph> &amp;#124; <ph id="ph4">&lt;xref:System.Security.Permissions.HostProtectionResource.ExternalThreading&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>The <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser).</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> non influisce sulle applicazioni desktop, che in genere vengono avviate facendo doppio clic sull'icona, digitando un comando oppure immettendo un URL in un browser.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.ISynchronizeInvoke">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> class or <bpt id="p1">[</bpt>SQL Server Programming and Host Protection Attributes<ept id="p1">](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere il <ph id="ph1">&lt;xref:System.Security.Permissions.HostProtectionAttribute&gt;</ph> classe o <bpt id="p1">[</bpt>programmazione in SQL Server e attributi di protezione Host<ept id="p1">](~/docs/framework/performance/sql-server-programming-and-host-protection-attributes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> to a method that takes parameters of the same number and type that are contained in <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> di un metodo che accetta parametri dello stesso numero e tipo di quelli contenuti in <bpt id="p1">&lt;c&gt;</bpt>args<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to pass as arguments to the given method.</source>
          <target state="translated">Una matrice di tipo <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> da passare come argomenti al metodo specificato.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no arguments are needed.</source>
          <target state="translated">Se non sono richiesti argomenti, può corrispondere a <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>Asynchronously executes the delegate on the thread that created this object.</source>
          <target state="translated">Esegue in modo asincrono il delegato sul thread che ha creato questo oggetto.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that represents the asynchronous operation started by calling this method.</source>
          <target state="translated">Interfaccia <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> che rappresenta l'operazione asincrona avviata con la chiamata a questo metodo.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>The <ph id="ph1">`method`</ph> delegate is executed on the thread that created the object, instead of the thread on which <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> was called.</source>
          <target state="translated">Il <ph id="ph1">`method`</ph> delegato viene eseguito sul thread che ha creato l'oggetto, anziché nel thread in cui <ph id="ph2">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph> è stato chiamato.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>The delegate is called asynchronously, and this method returns immediately.</source>
          <target state="translated">Il delegato viene chiamato in modo asincrono e questo metodo restituisce immediatamente.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>You can call this method from any thread.</source>
          <target state="translated">Questo metodo è possibile chiamare da qualsiasi thread.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>If you need the return value from a process started with this method, call <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> to get the value.</source>
          <target state="translated">Il valore restituito da un processo avviato con questo metodo, è necessario chiamare <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A&gt;</ph> per ottenere il valore.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
          <source>If you need to call the delegate synchronously, use the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method instead.</source>
          <target state="translated">Se è necessario chiamare il delegato in modo sincrono, utilizzare il <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> metodo invece.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that represents the asynchronous operation started by calling <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph>.</source>
          <target state="translated">Interfaccia <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> che rappresenta l'operazione asincrona avviata con la chiamata al metodo <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>Waits until the process started by calling <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph> completes, and then returns the value generated by the process.</source>
          <target state="translated">Consente di attendere il completamento del processo avviato con la chiamata al metodo <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /&gt;</ph> e di restituire quindi il valore generato dal processo.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the return value generated by the asynchronous operation.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> che rappresenta il valore restituito generato dall'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>This method gets the return value of the asynchronous operation represented by the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> passed by this interface.</source>
          <target state="translated">Questo metodo ottiene il valore restituito dell'operazione asincrona rappresentata la <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> passato da questa interfaccia.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
          <source>If the asynchronous operation has not completed, this method will wait until the result is available.</source>
          <target state="translated">Se l'operazione asincrona è stata completata, questo metodo attende il risultato è disponibile.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> that contains a method to call, in the context of the thread for the control.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> contenente il metodo da chiamare, nel contesto del thread per il controllo.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the arguments to pass to the given method.</source>
          <target state="translated">Matrice di tipo <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> che rappresenta gli argomenti che devono essere passati al metodo specificato.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>This can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no arguments are needed.</source>
          <target state="translated">Se non sono richiesti argomenti, può corrispondere a <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Synchronously executes the delegate on the thread that created this object and marshals the call to the creating thread.</source>
          <target state="translated">Esegue in modo sincrono il delegato sul thread che ha creato questo oggetto ed esegue il marshalling della chiamata al thread di creazione.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that represents the return value from the delegate being invoked, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the delegate has no return value.</source>
          <target state="translated">Un oggetto <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> che rappresenta il valore restituito dal delegato richiamato oppure <ph id="ph2">&lt;see langword="null" /&gt;</ph> se il delegato non restituisce alcun valore.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Unlike <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph>, this method operates synchronously, that is, it waits until the process completes before returning.</source>
          <target state="translated">A differenza di <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A&gt;</ph>, questo metodo funziona in modo sincrono, vale a dire, attende il completamento del processo prima della restituzione.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Exceptions raised during the call are propagated back to the caller.</source>
          <target state="translated">Le eccezioni generate durante la chiamata vengono propagate al chiamante.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
          <source>Use this method when calling a method from a different thread to marshal the call to the proper thread.</source>
          <target state="translated">Utilizzare questo metodo quando si chiama un metodo da un thread diverso per il marshalling della chiamata al thread appropriato.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>Gets a value indicating whether the caller must call <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph> when calling an object that implements this interface.</source>
          <target state="translated">Ottiene un valore che indica se il chiamante deve chiamare il metodo <ph id="ph1">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph> quando viene chiamato un oggetto che implementa questa interfaccia.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the caller must call <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il chiamante deve chiamare il metodo <ph id="ph2">&lt;see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /&gt;</ph>, in caso contrario <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>This property determines whether the caller must call <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> when making method calls to an object that implements this interface.</source>
          <target state="translated">Questa proprietà determina se il chiamante deve chiamare <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> quando effettua chiamate al metodo a un oggetto che implementa questa interfaccia.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>Such objects are bound to a specific thread and are not thread-safe.</source>
          <target state="translated">Tali oggetti sono associati a un thread specifico e non sono thread-safe.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
          <source>If you are calling a method from a different thread, you must use the <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> method to marshal the call to the proper thread.</source>
          <target state="translated">Se si chiama un metodo da un thread differente, è necessario utilizzare il <ph id="ph1">&lt;xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A&gt;</ph> metodo per il marshalling della chiamata al thread appropriato.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>