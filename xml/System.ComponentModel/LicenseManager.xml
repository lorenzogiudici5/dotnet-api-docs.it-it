<Type Name="LicenseManager" FullName="System.ComponentModel.LicenseManager">
  <TypeSignature Language="C#" Value="public sealed class LicenseManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LicenseManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.LicenseManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LicenseManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class LicenseManager sealed" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e9bf5-101">Offre proprietà e metodi per aggiungere una licenza a un componente e gestire <see cref="T:System.ComponentModel.LicenseProvider" />.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-101">Provides properties and methods to add a license to a component and to manage a <see cref="T:System.ComponentModel.LicenseProvider" />.</span></span> <span data-ttu-id="e9bf5-102">Questa classe non può essere ereditata.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9bf5-103">Il <xref:System.ComponentModel.LicenseManager> classe fornisce le seguenti `static` proprietà: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> e <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-103">The <xref:System.ComponentModel.LicenseManager> class provides the following `static` properties: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> and <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</span></span> <span data-ttu-id="e9bf5-104">La classe fornisce anche le seguenti `static` metodi: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, e <xref:System.ComponentModel.LicenseManager.Validate%2A>.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-104">The class also provides the following `static` methods: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>, and <xref:System.ComponentModel.LicenseManager.Validate%2A>.</span></span>  
  
 <span data-ttu-id="e9bf5-105">Quando si crea un componente che si desidera concedere una licenza, è necessario eseguire le operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="e9bf5-105">When you create a component that you want to license, you must do the following:</span></span>  
  
1.  <span data-ttu-id="e9bf5-106">Specificare il <xref:System.ComponentModel.LicenseProvider> contrassegnando il componente con un <xref:System.ComponentModel.LicenseProviderAttribute>.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-106">Specify the <xref:System.ComponentModel.LicenseProvider> by marking the component with a <xref:System.ComponentModel.LicenseProviderAttribute>.</span></span>  
  
2.  <span data-ttu-id="e9bf5-107">Chiamare <xref:System.ComponentModel.LicenseManager.Validate%2A> o <xref:System.ComponentModel.LicenseManager.IsValid%2A> nel costruttore del componente.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-107">Call <xref:System.ComponentModel.LicenseManager.Validate%2A> or <xref:System.ComponentModel.LicenseManager.IsValid%2A> in the constructor of the component.</span></span> <span data-ttu-id="e9bf5-108"><xref:System.ComponentModel.LicenseManager.Validate%2A> Genera un <xref:System.ComponentModel.LicenseException> quando tenta di creare un'istanza senza una licenza valida.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-108"><xref:System.ComponentModel.LicenseManager.Validate%2A> throws a <xref:System.ComponentModel.LicenseException> when it tries to create an instance without a valid license.</span></span> <span data-ttu-id="e9bf5-109"><xref:System.ComponentModel.LicenseManager.IsValid%2A> non genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-109"><xref:System.ComponentModel.LicenseManager.IsValid%2A> does not throw an exception.</span></span>  
  
3.  <span data-ttu-id="e9bf5-110">Chiamare <xref:System.ComponentModel.License.Dispose%2A> per tutte le licenze concesse quando il componente viene eliminato o finalizzato.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-110">Call <xref:System.ComponentModel.License.Dispose%2A> on any license that is granted when the component is disposed or finalized.</span></span>  
  
 <span data-ttu-id="e9bf5-111">Per ulteriori informazioni sulle licenze, vedere [come: licenza componenti e controlli](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).</span><span class="sxs-lookup"><span data-stu-id="e9bf5-111">For more information on licensing, see [How to: License Components and Controls](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e9bf5-112">L'esempio di codice seguente viene creato un controllo concesso in licenza tramite il <xref:System.ComponentModel.LicenseManager.Validate%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-112">The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method.</span></span> <span data-ttu-id="e9bf5-113">Usa un <xref:System.ComponentModel.LicenseProvider> implementato dalla <xref:System.ComponentModel.LicFileLicenseProvider> classe.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-113">It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.</span></span>  
  
 [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]
 [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.License" />
    <altmember cref="T:System.ComponentModel.LicenseContext" />
    <altmember cref="T:System.ComponentModel.LicenseException" />
    <altmember cref="T:System.ComponentModel.LicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
    <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
    <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateWithContext">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e9bf5-114">Consente di creare un'istanza di un tipo di oggetto con un contesto di licenza.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-114">Creates an instance of an object type with a license context.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateWithContext">
      <MemberSignature Language="C#" Value="public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateWithContext(class System.Type type, class System.ComponentModel.LicenseContext creationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateWithContext(Type ^ type, System::ComponentModel::LicenseContext ^ creationContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="creationContext" Type="System.ComponentModel.LicenseContext" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e9bf5-115">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo da creare.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-115">A <see cref="T:System.Type" /> that represents the type to create.</span></span></param>
        <param name="creationContext"><span data-ttu-id="e9bf5-116">Oggetto <see cref="T:System.ComponentModel.LicenseContext" /> che specifica quando è possibile utilizzare l'istanza concessa in licenza.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-116">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed instance.</span></span></param>
        <summary><span data-ttu-id="e9bf5-117">Consente di creare un'istanza del tipo specificato, dato il contesto in cui è possibile utilizzare l'istanza concessa in licenza.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-117">Creates an instance of the specified type, given a context in which you can use the licensed instance.</span></span></summary>
        <returns><span data-ttu-id="e9bf5-118">Istanza del tipo specificato.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-118">An instance of the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9bf5-119">Il <xref:System.ComponentModel.LicenseContext> si specifica come il `creationContext` parametro viene utilizzato come il <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> per tutta la durata di questo <xref:System.ComponentModel.License>.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-119">The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="e9bf5-120">Il <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> metodo impedisce a tutti gli altri thread il <xref:System.AppDomain> di modificare il <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, consentendo <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> si comporti come operazione atomica.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-120">The <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="e9bf5-121">per l'accesso ai membri privati della classe e ai metadati.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-121">for access to private class members and metadata.</span></span> <span data-ttu-id="e9bf5-122">Enumerazione associata: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="e9bf5-122">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="CreateWithContext">
      <MemberSignature Language="C#" Value="public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateWithContext(class System.Type type, class System.ComponentModel.LicenseContext creationContext, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CreateWithContext(Type ^ type, System::ComponentModel::LicenseContext ^ creationContext, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="creationContext" Type="System.ComponentModel.LicenseContext" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e9bf5-123">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo da creare.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-123">A <see cref="T:System.Type" /> that represents the type to create.</span></span></param>
        <param name="creationContext"><span data-ttu-id="e9bf5-124">Oggetto <see cref="T:System.ComponentModel.LicenseContext" /> che specifica quando è possibile utilizzare l'istanza concessa in licenza.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-124">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed instance.</span></span></param>
        <param name="args"><span data-ttu-id="e9bf5-125">Matrice di tipo <see cref="T:System.Object" /> che rappresenta gli argomenti per il tipo.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-125">An array of type <see cref="T:System.Object" /> that represents the arguments for the type.</span></span></param>
        <summary><span data-ttu-id="e9bf5-126">Consente di creare un'istanza del tipo specificato con gli argomenti indicati, dato il contesto in cui è possibile utilizzare l'istanza concessa in licenza.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-126">Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.</span></span></summary>
        <returns><span data-ttu-id="e9bf5-127">Istanza del tipo specificato con la determinata matrice di argomenti.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-127">An instance of the specified type with the given array of arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9bf5-128">Il <xref:System.ComponentModel.LicenseContext> si specifica come il `creationContext` parametro viene utilizzato come il <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> per tutta la durata di questo <xref:System.ComponentModel.License>.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-128">The <xref:System.ComponentModel.LicenseContext> you specify as the `creationContext` parameter is used as the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> for the life of this <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="e9bf5-129">Questo metodo blocca tutti gli altri thread <xref:System.AppDomain> di modificare il <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>consentendo <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> si comporti come operazione atomica.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-129">This method blocks all other threads in the <xref:System.AppDomain> from modifying the <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, allowing <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> to behave as an atomic operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="CurrentContext">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.LicenseContext CurrentContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ComponentModel.LicenseContext CurrentContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.LicenseManager.CurrentContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentContext As LicenseContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ComponentModel::LicenseContext ^ CurrentContext { System::ComponentModel::LicenseContext ^ get(); void set(System::ComponentModel::LicenseContext ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.LicenseContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e9bf5-130">Viene poi ottenuto o impostato l'oggetto <see cref="T:System.ComponentModel.LicenseContext" /> corrente, che specifica quando è possibile utilizzare l'oggetto concesso in licenza.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-130">Gets or sets the current <see cref="T:System.ComponentModel.LicenseContext" />, which specifies when you can use the licensed object.</span></span></summary>
        <value><span data-ttu-id="e9bf5-131">Oggetto <see cref="T:System.ComponentModel.LicenseContext" /> che specifica quando è possibile utilizzare l'oggetto concesso in licenza.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-131">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies when you can use the licensed object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9bf5-132">Quando l'utente richiede un valore valido <xref:System.ComponentModel.License>, l'utente deve fornire il contesto in cui il <xref:System.ComponentModel.License> è valido per il <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-132">When the user requests a valid <xref:System.ComponentModel.License>, the user must give the context in which the <xref:System.ComponentModel.License> is valid to the <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e9bf5-133">Il <xref:System.ComponentModel.LicenseContext> restituita da questa proprietà deve essere passato a tutti i <xref:System.ComponentModel.LicenseProvider> classi.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-133">The <xref:System.ComponentModel.LicenseContext> returned by this property should be passed to all <xref:System.ComponentModel.LicenseProvider> classes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e9bf5-134">Attualmente la proprietà <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> è bloccata e non può essere modificata.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-134">The <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> property is currently locked and cannot be changed.</span></span></exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsLicensed">
      <MemberSignature Language="C#" Value="public static bool IsLicensed (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLicensed(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLicensed(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e9bf5-135">Oggetto <see cref="T:System.Type" /> per il quale trovare una licenza valida.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-135">The <see cref="T:System.Type" /> to find a valid license for.</span></span></param>
        <summary><span data-ttu-id="e9bf5-136">Indica se il tipo specificato dispone di una licenza valida.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-136">Returns whether the given type has a valid license.</span></span></summary>
        <returns>
          <span data-ttu-id="e9bf5-137"><see langword="true" /> se il tipo specificato dispone di licenza, in caso contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-137"><see langword="true" /> if the given type is licensed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsValid">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e9bf5-138">Determina se può essere concessa una licenza valida.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-138">Determines whether a valid license can be granted.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsValid(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e9bf5-139">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di oggetto che richiede <see cref="T:System.ComponentModel.License" />.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-139">A <see cref="T:System.Type" /> that represents the type of object that requests the <see cref="T:System.ComponentModel.License" />.</span></span></param>
        <summary><span data-ttu-id="e9bf5-140">Determina se può essere concessa una licenza valida per il tipo specificato.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-140">Determines whether a valid license can be granted for the specified type.</span></span></summary>
        <returns>
          <span data-ttu-id="e9bf5-141"><see langword="true" /> se può essere concessa una licenza valida, in caso contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-141"><see langword="true" /> if a valid license can be granted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9bf5-142">Il <xref:System.ComponentModel.LicenseManager.IsValid%2A> restituisce `true` quando il tipo non è autorizzato o è concesso in licenza e la licenza è valida.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-142">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the type is either not licensed, or is licensed and the license is valid.</span></span>  
  
 <span data-ttu-id="e9bf5-143">Questo metodo non genera un <xref:System.ComponentModel.LicenseException> quando non è possibile concedere un valido <xref:System.ComponentModel.License>.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-143">This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="e9bf5-144">Il <xref:System.ComponentModel.LicenseManager.Validate%2A> metodo genera eccezioni.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-144">The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(class System.Type type, object instance, [out] class System.ComponentModel.License&amp; license) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValid(Type ^ type, System::Object ^ instance, [Runtime::InteropServices::Out] System::ComponentModel::License ^ % license);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="license" Type="System.ComponentModel.License&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e9bf5-145">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di oggetto che richiede la licenza.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-145">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</span></span></param>
        <param name="instance"><span data-ttu-id="e9bf5-146">Oggetto del tipo specificato o un tipo derivato dal tipo specificato.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-146">An object of the specified type or a type derived from the specified type.</span></span></param>
        <param name="license"><span data-ttu-id="e9bf5-147">Oggetto <see cref="T:System.ComponentModel.License" /> che rappresenta una licenza valida oppure <see langword="null" /> se non è possibile concedere una licenza valida.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-147">A <see cref="T:System.ComponentModel.License" /> that is a valid license, or <see langword="null" /> if a valid license cannot be granted.</span></span></param>
        <summary><span data-ttu-id="e9bf5-148">Consente di determinare se può essere concessa una licenza valida per l'istanza specificata del tipo.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-148">Determines whether a valid license can be granted for the specified instance of the type.</span></span> <span data-ttu-id="e9bf5-149">Questo metodo crea un oggetto <see cref="T:System.ComponentModel.License" /> valido.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-149">This method creates a valid <see cref="T:System.ComponentModel.License" />.</span></span></summary>
        <returns>
          <span data-ttu-id="e9bf5-150"><see langword="true" /> se è possibile concedere un oggetto <see cref="T:System.ComponentModel.License" /> valido, in caso contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-150"><see langword="true" /> if a valid <see cref="T:System.ComponentModel.License" /> can be granted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9bf5-151">Il <xref:System.ComponentModel.LicenseManager.IsValid%2A> restituisce `true` quando il `type` parametro non è concesso in licenza o se dispone di licenza e `license` parametro è valido.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-151">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method returns `true` when the `type` parameter is not licensed, or when it is licensed and the `license` parameter is valid.</span></span>  
  
 <span data-ttu-id="e9bf5-152">Questo metodo non genera un <xref:System.ComponentModel.LicenseException> quando non è possibile concedere un valido <xref:System.ComponentModel.License>.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-152">This method does not throw a <xref:System.ComponentModel.LicenseException> when it cannot grant a valid <xref:System.ComponentModel.License>.</span></span> <span data-ttu-id="e9bf5-153">Il <xref:System.ComponentModel.LicenseManager.Validate%2A> metodo genera eccezioni.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-153">The <xref:System.ComponentModel.LicenseManager.Validate%2A> method throws exceptions.</span></span>  
  
 <span data-ttu-id="e9bf5-154">Se il `license` parametro non è `null` dopo questa chiamata, l'oggetto che richiede un <xref:System.ComponentModel.License> deve eliminare la licenza chiamando il <xref:System.ComponentModel.License.Dispose%2A> metodo quando l'oggetto viene eliminato o finalizzato.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-154">If the `license` parameter is not `null` after this call, the object asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="LockContext">
      <MemberSignature Language="C#" Value="public static void LockContext (object contextUser);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LockContext(object contextUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub LockContext (contextUser As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void LockContext(System::Object ^ contextUser);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextUser" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contextUser"><span data-ttu-id="e9bf5-155">Oggetto il cui contesto corrente si desidera bloccare.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-155">The object whose current context you want to lock.</span></span></param>
        <summary><span data-ttu-id="e9bf5-156">Impedisce di apportare modifiche all'oggetto <see cref="T:System.ComponentModel.LicenseContext" /> corrente dell'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-156">Prevents changes being made to the current <see cref="T:System.ComponentModel.LicenseContext" /> of the given object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9bf5-157">Utilizzare il <xref:System.ComponentModel.LicenseContext> per ottenere il <xref:System.ComponentModel.License> di un oggetto.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-157">Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object.</span></span> <span data-ttu-id="e9bf5-158">Questo metodo blocca il <xref:System.ComponentModel.LicenseContext>, impedendo il <xref:System.ComponentModel.License> vengano recuperate.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-158">This method locks the <xref:System.ComponentModel.LicenseContext>, preventing the <xref:System.ComponentModel.License> from being retrieved.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e9bf5-159">Il contesto è già bloccato.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-159">The context is already locked.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UnlockContext">
      <MemberSignature Language="C#" Value="public static void UnlockContext (object contextUser);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnlockContext(object contextUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnlockContext (contextUser As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnlockContext(System::Object ^ contextUser);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contextUser" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="contextUser"><span data-ttu-id="e9bf5-160">Oggetto il cui contesto corrente si desidera sbloccare.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-160">The object whose current context you want to unlock.</span></span></param>
        <summary><span data-ttu-id="e9bf5-161">Consente di apportare modifiche all'oggetto <see cref="T:System.ComponentModel.LicenseContext" /> corrente dell'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-161">Allows changes to be made to the current <see cref="T:System.ComponentModel.LicenseContext" /> of the given object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9bf5-162">Utilizzare il <xref:System.ComponentModel.LicenseContext> per ottenere il <xref:System.ComponentModel.License> di un oggetto.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-162">Use the <xref:System.ComponentModel.LicenseContext> to get the <xref:System.ComponentModel.License> of an object.</span></span> <span data-ttu-id="e9bf5-163">Questo metodo consente di sbloccare il <xref:System.ComponentModel.LicenseContext>, consentendo di <xref:System.ComponentModel.License> da recuperare.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-163">This method unlocks the <xref:System.ComponentModel.LicenseContext>, allowing the <xref:System.ComponentModel.License> to be retrieved.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e9bf5-164"><paramref name="contextUser" /> rappresenta un utente diverso da quello specificato in una precedente chiamata a <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-164"><paramref name="contextUser" /> represents a different user than the one specified in a previous call to <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UsageMode">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.LicenseUsageMode UsageMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ComponentModel.LicenseUsageMode UsageMode" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.LicenseManager.UsageMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UsageMode As LicenseUsageMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ComponentModel::LicenseUsageMode UsageMode { System::ComponentModel::LicenseUsageMode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.LicenseUsageMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e9bf5-165">Ottiene l'oggetto <see cref="T:System.ComponentModel.LicenseUsageMode" /> che specifica quando è possibile utilizzare l'oggetto concesso in licenza per la proprietà <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-165">Gets the <see cref="T:System.ComponentModel.LicenseUsageMode" /> which specifies when you can use the licensed object for the <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</span></span></summary>
        <value><span data-ttu-id="e9bf5-166">Uno dei valori di <see cref="T:System.ComponentModel.LicenseUsageMode" />, come specificato nella proprietà <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-166">One of the <see cref="T:System.ComponentModel.LicenseUsageMode" /> values, as specified in the <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9bf5-167">Se questa proprietà non è possibile trovare un <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> valore, viene restituito <xref:System.ComponentModel.LicenseUsageMode.Runtime>.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-167">If this property cannot find a <xref:System.ComponentModel.LicenseManager.CurrentContext%2A> value, it returns <xref:System.ComponentModel.LicenseUsageMode.Runtime>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.LicenseManager.CurrentContext" />
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e9bf5-168">Determina se può essere concessa una licenza.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-168">Determines whether a license can be granted.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static void Validate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Validate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.Validate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Validate(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e9bf5-169">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di oggetto che richiede la licenza.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-169">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</span></span></param>
        <summary><span data-ttu-id="e9bf5-170">Determina se può essere concessa una licenza per il tipo specificato.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-170">Determines whether a license can be granted for the specified type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9bf5-171">Questo metodo genera un <xref:System.ComponentModel.LicenseException> quando un oggetto valido <xref:System.ComponentModel.License> non può essere concessa.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-171">This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted.</span></span> <span data-ttu-id="e9bf5-172">Il <xref:System.ComponentModel.LicenseManager.IsValid%2A> metodo non genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-172">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.LicenseException"><span data-ttu-id="e9bf5-173">Non è possibile concedere un oggetto <see cref="T:System.ComponentModel.License" />.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-173">A <see cref="T:System.ComponentModel.License" /> cannot be granted.</span></span></exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.License Validate (Type type, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.License Validate(class System.Type type, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::License ^ Validate(Type ^ type, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.License</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="e9bf5-174">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di oggetto che richiede la licenza.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-174">A <see cref="T:System.Type" /> that represents the type of object that requests the license.</span></span></param>
        <param name="instance"><span data-ttu-id="e9bf5-175">Oggetto <see cref="T:System.Object" /> del tipo specificato o un tipo derivato dal tipo specificato.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-175">An <see cref="T:System.Object" /> of the specified type or a type derived from the specified type.</span></span></param>
        <summary><span data-ttu-id="e9bf5-176">Consente di determinare se è possibile concedere una licenza per l'istanza del tipo specificato.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-176">Determines whether a license can be granted for the instance of the specified type.</span></span></summary>
        <returns><span data-ttu-id="e9bf5-177">Oggetto <see cref="T:System.ComponentModel.License" /> valido.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-177">A valid <see cref="T:System.ComponentModel.License" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9bf5-178">Questo metodo genera un <xref:System.ComponentModel.LicenseException> quando un oggetto valido <xref:System.ComponentModel.License> non può essere concessa.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-178">This method throws a <xref:System.ComponentModel.LicenseException> when a valid <xref:System.ComponentModel.License> cannot be granted.</span></span> <span data-ttu-id="e9bf5-179">Il <xref:System.ComponentModel.LicenseManager.IsValid%2A> metodo non genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-179">The <xref:System.ComponentModel.LicenseManager.IsValid%2A> method does not throw an exception.</span></span>  
  
 <span data-ttu-id="e9bf5-180">Tutti gli oggetti che richiede un <xref:System.ComponentModel.License> deve eliminare la licenza chiamando il <xref:System.ComponentModel.License.Dispose%2A> metodo quando l'oggetto viene eliminato o finalizzato.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-180">All objects asking for a <xref:System.ComponentModel.License> must dispose of the license by calling the <xref:System.ComponentModel.License.Dispose%2A> method when the object is disposed of or finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.LicenseException"><span data-ttu-id="e9bf5-181">Il tipo dispone di licenza, ma non è possibile concedere un oggetto <see cref="T:System.ComponentModel.License" />.</span><span class="sxs-lookup"><span data-stu-id="e9bf5-181">The type is licensed, but a <see cref="T:System.ComponentModel.License" /> cannot be granted.</span></span></exception>
        <altmember cref="T:System.ComponentModel.License" />
        <altmember cref="T:System.ComponentModel.LicenseContext" />
        <altmember cref="T:System.ComponentModel.LicenseException" />
        <altmember cref="T:System.ComponentModel.LicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseProviderAttribute" />
        <altmember cref="T:System.ComponentModel.LicFileLicenseProvider" />
        <altmember cref="T:System.ComponentModel.LicenseUsageMode" />
      </Docs>
    </Member>
  </Members>
</Type>