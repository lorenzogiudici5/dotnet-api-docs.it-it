<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d602d1b35d6f801e9200e323481a7b2254b07e24" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46653382" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="a24c3-101">Rileva la durata di un'operazione asincrona.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a24c3-101">Tracks the lifetime of an asynchronous operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a24c3-102">Quando si implementa una classe base per il [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), potrebbe essere necessario tenere traccia della durata di ogni operazione asincrona richiamata in un'istanza della classe.</span><span class="sxs-lookup"><span data-stu-id="a24c3-102">When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</span></span> <span data-ttu-id="a24c3-103">Il <xref:System.ComponentModel.AsyncOperation> classe fornisce metodi per rilevare e segnalare lo stato di avanzamento di un'attività asincrona.</span><span class="sxs-lookup"><span data-stu-id="a24c3-103">The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.</span></span>  
  
 <span data-ttu-id="a24c3-104">Nell'elenco seguente vengono indicati alcuni modi per usare un <xref:System.ComponentModel.AsyncOperation> oggetto:</span><span class="sxs-lookup"><span data-stu-id="a24c3-104">The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:</span></span>  
  
-   <span data-ttu-id="a24c3-105">Per segnalare lo stato di avanzamento e i risultati intermedi nel client, chiamare <xref:System.ComponentModel.AsyncOperation.Post%2A> dal codice lavoro asincrono.</span><span class="sxs-lookup"><span data-stu-id="a24c3-105">To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.</span></span>  
  
-   <span data-ttu-id="a24c3-106">Per indicare che è stata completata un'attività asincrona o annullare un'attività asincrona in sospeso, chiamare <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span><span class="sxs-lookup"><span data-stu-id="a24c3-106">To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span>  
  
 <span data-ttu-id="a24c3-107">La classe deve ottenere un <xref:System.ComponentModel.AsyncOperation> oggetto per ogni attività asincrone chiamando <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> all'avvio di ogni attività.</span><span class="sxs-lookup"><span data-stu-id="a24c3-107">Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> when each task starts.</span></span> <span data-ttu-id="a24c3-108">Per consentire al client di distinguere le varie attività asincrone, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> accetta un parametro per un token univoco generato dal client, che diventa il <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="a24c3-108">To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="a24c3-109">Può quindi essere utilizzato dal codice client per identificare l'attività asincrona specifico che genera gli eventi di stato di avanzamento o il completamento.</span><span class="sxs-lookup"><span data-stu-id="a24c3-109">It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a24c3-110">Esempio di codice seguente viene illustrato come utilizzare un <xref:System.ComponentModel.AsyncOperation> oggetti per tenere traccia della durata delle operazioni asincrone.</span><span class="sxs-lookup"><span data-stu-id="a24c3-110">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> object to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="a24c3-111">Questo esempio di codice è parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="a24c3-111">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="a24c3-112">Per un listato di codice completo, vedere [procedura: implementare un componente che supporta il modello asincrono basato su eventi](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span><span class="sxs-lookup"><span data-stu-id="a24c3-112">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="a24c3-113">Per un listato di codice completo di un form di client, vedere [procedura: implementare un Client del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="a24c3-113">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="a24c3-114">Gli implementatori devono assicurare i <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> e <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> chiamate sono asincrone, in modo che il provider di librerie di classe non è necessario preoccupino con stack potenziale causa un overflow se presuppongono un comportamento asincrono in un'applicazione specifica modello sincrono.</span>
        <span class="sxs-lookup">
          <span data-stu-id="a24c3-114">Implementers must ensure the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> and <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.</span>
        </span>
        <span data-ttu-id="a24c3-115">Per altre informazioni sull'implementazione di classi asincroni, vedere [implementazione del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span>
        <span class="sxs-lookup">
          <span data-stu-id="a24c3-115">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span>
        </span>
      </para>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
    <related type="Article" href="http://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">
      <span data-ttu-id="a24c3-116">Suggerimenti per l'utilizzo del threading gestito</span>
      <span class="sxs-lookup">
        <span data-stu-id="a24c3-116">Managed Threading Best Practices</span>
      </span>
    </related>
    <related type="Article" href="http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">
      <span data-ttu-id="a24c3-117">Procedura: implementare un componente che supporta il modello asincrono basato su eventi</span>
      <span class="sxs-lookup">
        <span data-stu-id="a24c3-117">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a24c3-118">Finalizza l'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-118">Finalizes the asynchronous operation.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a24c3-119">Pone fine alla durata di un'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-119">Ends the lifetime of an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a24c3-120">Chiamare il <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> metodo a terminare il ciclo di vita di un'operazione asincrona.</span><span class="sxs-lookup"><span data-stu-id="a24c3-120">Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="a24c3-121">Dopo che questo metodo viene chiamato per una determinata attività, le chiamate a corrispondente <xref:System.ComponentModel.AsyncOperation> genererà un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="a24c3-121">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a24c3-122">Il metodo <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> è già stato chiamato per l'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-122">
              <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="a24c3-123">Oggetto <see cref="T:System.Threading.SendOrPostCallback" /> che esegue il wrapping del delegato da chiamare al completamento dell'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-123">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="a24c3-124">Argomento per il delegato contenuto nel parametro <c>d</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-124">An argument for the delegate contained in the <c>d</c> parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a24c3-125">Richiama un delegato nel thread o contesto adeguato al modello di applicazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-125">Invokes a delegate on the thread or context appropriate for the application model.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a24c3-126">Il <xref:System.ComponentModel.AsyncOperation.Post%2A> metodo richiama il delegato specificato da di `arg` parametro senza terminare la durata dell'operazione asincrona.</span><span class="sxs-lookup"><span data-stu-id="a24c3-126">The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.</span></span>  
  
 <span data-ttu-id="a24c3-127">È possibile chiamare il <xref:System.ComponentModel.AsyncOperation.Post%2A> ogni volta che si desidera che durante la durata dell'operazione asincrona non è stata terminata da una chiamata al metodo <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span><span class="sxs-lookup"><span data-stu-id="a24c3-127">You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span> <span data-ttu-id="a24c3-128">È possibile usare il metodo per segnalare lo stato di avanzamento o i risultati intermedi ai client.</span><span class="sxs-lookup"><span data-stu-id="a24c3-128">You can use the method to report progress or interim results back to clients.</span></span>  
  
 <span data-ttu-id="a24c3-129">Il `d` parametro esegue il wrapping del delegato che deve essere chiamato quando si desidera pubblicare un aggiornamento sullo stato dell'attività asincrona.</span><span class="sxs-lookup"><span data-stu-id="a24c3-129">The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</span></span> <span data-ttu-id="a24c3-130">Il <xref:System.ComponentModel.AsyncOperation> oggetto assicurerà che il delegato viene richiamato sul thread o contesto adeguato al modello di applicazione.</span><span class="sxs-lookup"><span data-stu-id="a24c3-130">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="a24c3-131">Il metodo può facoltativamente generare un evento che notifica ai client di una modifica dello stato, aggiornamento dello stato o i risultati incrementali appena disponibili.</span><span class="sxs-lookup"><span data-stu-id="a24c3-131">Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</span></span>  
  
 <span data-ttu-id="a24c3-132">Il `arg` parametro deve essere usato per passare lo stato al delegato racchiuso il `d` parametro.</span><span class="sxs-lookup"><span data-stu-id="a24c3-132">The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter.</span></span> <span data-ttu-id="a24c3-133">Potrebbe essere un riferimento a un <xref:System.ComponentModel.AsyncOperation>, o potrebbe essere un <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> oggetto.</span><span class="sxs-lookup"><span data-stu-id="a24c3-133">It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="a24c3-134">Potrebbe essere utile per derivare la propria classe da <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> per fornire l'archiviazione dello stato aggiuntivi.</span><span class="sxs-lookup"><span data-stu-id="a24c3-134">It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> to provide additional state storage.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a24c3-135">Esempio di codice seguente illustra l'uso di <xref:System.ComponentModel.AsyncOperation.Post%2A> metodo per segnalare lo stato e sui risultati incrementali di un'operazione asincrona.</span><span class="sxs-lookup"><span data-stu-id="a24c3-135">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.Post%2A> method for reporting progress and incremental results of an asynchronous operation.</span></span> <span data-ttu-id="a24c3-136">Questo esempio di codice è parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="a24c3-136">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a24c3-137">Il metodo <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> è già stato chiamato per l'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-137">The <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> method has been called previously for this task.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a24c3-138">
            <paramref name="d" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-138">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="a24c3-139">Gli eredi devono rendere la <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> chiamata asincrona, in modo che il provider di librerie di classe non è necessario preoccupino dei potenziali stack overflow se assumono la modalità asincrona, ma si verifica un modello di applicazione specifico per essere sincrona.</span>
            <span class="sxs-lookup">
              <span data-stu-id="a24c3-139">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span>
            </span>
            <block subset="none" type="note">
              <para>
                <span data-ttu-id="a24c3-140">Le applicazioni console non sincronizzano l'esecuzione delle chiamate del metodo <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="a24c3-140">Console applications do not synchronize the execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls.</span>
                </span>
                <span data-ttu-id="a24c3-141">L'ordine di generazione degli eventi <see langword="ProgressChanged" /> potrebbe quindi non essere corretto.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="a24c3-141">This can cause <see langword="ProgressChanged" /> events to be raised out of order.</span>
                </span>
                <span data-ttu-id="a24c3-142">Se si vuole l'esecuzione serializzata delle chiamate al metodo <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />, implementare e installare una classe <see cref="T:System.Threading.SynchronizationContext" />.</span>
                <span class="sxs-lookup">
                  <span data-stu-id="a24c3-142">If you wish to have serialized execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls, implement and install a <see cref="T:System.Threading.SynchronizationContext" /> class.</span>
                </span>
              </para>
            </block>
            <span data-ttu-id="a24c3-143">Per altre informazioni sull'implementazione di classi asincroni, vedere [implementazione del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span>
            <span class="sxs-lookup">
              <span data-stu-id="a24c3-143">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="http://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">
          <span data-ttu-id="a24c3-144">Suggerimenti per l'utilizzo del threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-144">Managed Threading Best Practices</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">
          <span data-ttu-id="a24c3-145">Procedura: implementare un componente che supporta il modello asincrono basato su eventi</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-145">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="a24c3-146">Oggetto <see cref="T:System.Threading.SendOrPostCallback" /> che esegue il wrapping del delegato da chiamare al completamento dell'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-146">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="a24c3-147">Argomento per il delegato contenuto nel parametro <c>d</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-147">An argument for the delegate contained in the <c>d</c> parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a24c3-148">Pone fine alla durata di un'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-148">Ends the lifetime of an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a24c3-149">Chiamare il <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> metodo a terminare il ciclo di vita di un'operazione asincrona.</span><span class="sxs-lookup"><span data-stu-id="a24c3-149">Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="a24c3-150">Dopo che questo metodo viene chiamato per una determinata attività, le chiamate a corrispondente <xref:System.ComponentModel.AsyncOperation> oggetto genererà un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="a24c3-150">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.</span></span>  
  
 <span data-ttu-id="a24c3-151">Il `d` parametro esegue il wrapping del delegato da chiamare quando l'attività termina a causa di un completamento, l'annullamento o errore dell'attività tramite la classe.</span><span class="sxs-lookup"><span data-stu-id="a24c3-151">The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</span></span> <span data-ttu-id="a24c3-152">Il <xref:System.ComponentModel.AsyncOperation> oggetto assicurerà che il delegato viene richiamato sul thread o contesto adeguato al modello di applicazione.</span><span class="sxs-lookup"><span data-stu-id="a24c3-152">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="a24c3-153">Il delegato può facoltativamente generare un evento che notifica ai client che è stata terminata la durata dell'attività asincrona.</span><span class="sxs-lookup"><span data-stu-id="a24c3-153">Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</span></span>  
  
 <span data-ttu-id="a24c3-154">Il `arg` parametro viene usato per passare le informazioni sullo stato per il delegato di completamento `d`.</span><span class="sxs-lookup"><span data-stu-id="a24c3-154">The `arg` parameter is used to pass state information to the completion delegate `d`.</span></span> <span data-ttu-id="a24c3-155">È possibile usare un <xref:System.ComponentModel.AsyncOperation> oggetto, o un <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> oggetto come valore del parametro.</span><span class="sxs-lookup"><span data-stu-id="a24c3-155">You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> object as the parameter value.</span></span> <span data-ttu-id="a24c3-156">In alternativa, se si desidera fornire l'archiviazione dello stato aggiuntivi, è possibile usare un'istanza di una classe di derivazione di <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="a24c3-156">Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a24c3-157">Esempio di codice seguente illustra l'uso di <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> metodo a terminare il ciclo di vita di un'operazione asincrona.</span><span class="sxs-lookup"><span data-stu-id="a24c3-157">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="a24c3-158">Questo esempio di codice è parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="a24c3-158">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a24c3-159">Il metodo <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> è già stato chiamato per l'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-159">
              <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a24c3-160">
            <paramref name="d" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-160">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="a24c3-161">Gli eredi devono rendere la <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> chiamata asincrona, in modo che il provider di librerie di classe non è necessario preoccupino dei potenziali stack overflow se assumono la modalità asincrona, ma si verifica un modello di applicazione specifico per essere sincrona.</span>
            <span class="sxs-lookup">
              <span data-stu-id="a24c3-161">Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.</span>
            </span>
            <span data-ttu-id="a24c3-162">Il metodo deve essere interpretato come una chiamata "termina il ciclo di vita", vale a dire che l'implementazione deve eseguire siano appropriato per il modello di applicazione.</span>
            <span class="sxs-lookup">
              <span data-stu-id="a24c3-162">The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model.</span>
            </span>
            <span data-ttu-id="a24c3-163">Ad esempio, ASP.NET ridurrà il numero di operazioni asincrone in sospeso.</span>
            <span class="sxs-lookup">
              <span data-stu-id="a24c3-163">For instance, ASP.NET will decrement its count of outstanding asynchronous operations.</span>
            </span>
            <span data-ttu-id="a24c3-164">Questo dovrebbe inoltre mettere l'operazione in uno stato in modo che tutte le chiamate successive al suo interno avrà esito negativo, poiché ora è stata completata.</span>
            <span class="sxs-lookup">
              <span data-stu-id="a24c3-164">This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.</span>
            </span>
            <span data-ttu-id="a24c3-165">Per altre informazioni sull'implementazione di classi asincroni, vedere [implementazione del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span>
            <span class="sxs-lookup">
              <span data-stu-id="a24c3-165">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span>
            </span>
          </para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="http://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">
          <span data-ttu-id="a24c3-166">Suggerimenti per l'utilizzo del threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-166">Managed Threading Best Practices</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf">
          <span data-ttu-id="a24c3-167">Procedura: implementare un componente che supporta il modello asincrono basato su eventi</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-167">How to: Implement a Component that Supports the Event-based Asynchronous Pattern</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a24c3-168">Ottiene l'oggetto <see cref="T:System.Threading.SynchronizationContext" /> passato al costruttore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-168">Gets the <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a24c3-169">Oggetto <see cref="T:System.Threading.SynchronizationContext" /> passato al costruttore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-169">The <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a24c3-170">Ottiene o imposta un oggetto usato per identificare in modo univoco un'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-170">Gets or sets an object used to uniquely identify an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a24c3-171">Oggetto di stato passato alla chiamata di metodo asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-171">The state object passed to the asynchronous method invocation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a24c3-172">Se la classe supporta più chiamate di un singolo metodo asincrono o più metodi asincroni, i client saranno necessario un modo per determinare quali attività asincrona è la generazione di eventi.</span><span class="sxs-lookup"><span data-stu-id="a24c3-172">If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</span></span> <span data-ttu-id="a24c3-173">I `MethodNameAsync` metodo deve accettare un parametro di tipo <xref:System.Object> che fungerà da un ID dell'attività.</span><span class="sxs-lookup"><span data-stu-id="a24c3-173">Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID.</span></span> <span data-ttu-id="a24c3-174">Si userà questo ID di attività quando si chiama il <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, metodo e si assocerà un ID attività del client con una particolare chiamata dell'operazione asincrona.</span><span class="sxs-lookup"><span data-stu-id="a24c3-174">You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</span></span> <span data-ttu-id="a24c3-175">Questo ID attività viene reso disponibile per l'implementazione tramite il <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="a24c3-175">This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a24c3-176">Il codice client necessario prestare attenzione fornire un valore univoco per il <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="a24c3-176">Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="a24c3-177">ID attività non univoco potrebbe causare l'implementazione segnalare lo stato di avanzamento e altri eventi in modo non corretto.</span><span class="sxs-lookup"><span data-stu-id="a24c3-177">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="a24c3-178">Il codice deve verificare la presenza di un ID attività non univoci e generare un <xref:System.ArgumentException> se viene rilevata.</span><span class="sxs-lookup"><span data-stu-id="a24c3-178">Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a24c3-179">Esempio di codice seguente viene illustrato come utilizzare <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> per tenere traccia della durata delle operazioni asincrone.</span><span class="sxs-lookup"><span data-stu-id="a24c3-179">The following code example demonstrates using <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="a24c3-180">Questo esempio di codice è parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.</span><span class="sxs-lookup"><span data-stu-id="a24c3-180">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
        <related type="Article" href="http://msdn.microsoft.com/library/e51988e7-7f4b-4646-a06d-1416cee8d557">
          <span data-ttu-id="a24c3-181">Suggerimenti per l'utilizzo del threading gestito</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-181">Managed Threading Best Practices</span>
          </span>
        </related>
        <related type="Article" href="http://msdn.microsoft.com/library/792aa8da-918b-458e-b154-9836b97735f3">
          <span data-ttu-id="a24c3-182">Cenni preliminari sul modello asincrono basato su eventi</span>
          <span class="sxs-lookup">
            <span data-stu-id="a24c3-182">Event-based Asynchronous Pattern Overview</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>