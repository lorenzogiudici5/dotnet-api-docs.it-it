<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="27b3f4ff3ed46bf8dc07465aaecd985e0ada7d95" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30369565" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rileva la durata di un'operazione asincrona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si implementa una classe base per il [Panoramica del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), potrebbe essere necessario tenere traccia della durata di ogni operazione asincrona richiamata per un'istanza della classe. La <xref:System.ComponentModel.AsyncOperation> classe fornisce metodi per rilevare e segnalare lo stato di avanzamento di un'attività asincrona.  
  
 Nell'elenco seguente vengono indicati alcuni modi per utilizzare un <xref:System.ComponentModel.AsyncOperation> oggetto:  
  
-   Per segnalare lo stato di avanzamento e i risultati temporanei al client, chiamare <xref:System.ComponentModel.AsyncOperation.Post%2A> dal codice lavoro asincrono.  
  
-   Per indicare che è stata completata un'attività asincrona o per annullare un'attività asincrona in sospeso, chiamare il metodo <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.  
  
 La classe deve ottenere un <xref:System.ComponentModel.AsyncOperation> oggetto per ogni attività asincrona chiamando <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> all'avvio di ogni attività. Per consentire al client di distinguere tra attività asincrone distinte, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> accetta un parametro per un token univoco fornito dal client, che diventa il <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> proprietà. E può quindi essere utilizzato dal codice client per identificare la specifica attività asincrona che genera gli eventi di avanzamento o di completamento.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.ComponentModel.AsyncOperation> oggetti per tenere traccia della durata delle operazioni asincrone. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
 Per un elenco completo di codice, vedere [procedura: implementare un componente che supporta il modello asincrono basato su eventi](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Per un elenco di codice completo di un form di client, vedere [procedura: implementare un Client del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Gli implementatori devono assicurare i <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> e <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> chiamate sono asincrone, in modo che il provider di librerie di classe non è necessario preoccuparsi con potenziali gli overflow dello stack se presuppongono un comportamento asincrono in una determinata applicazione modello sincrono.  
  
 Per ulteriori informazioni sull'implementazione di classi asincrone, vedere [implementazione del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizza l'operazione asincrona.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pone fine alla durata di un'operazione asincrona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> metodo per terminare la durata di un'operazione asincrona. Dopo che questo metodo viene chiamato per una determinata attività, le chiamate a corrispondente <xref:System.ComponentModel.AsyncOperation> genererà un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          Il metodo <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> è già stato chiamato per l'attività.</exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Oggetto <see cref="T:System.Threading.SendOrPostCallback" /> che esegue il wrapping del delegato da chiamare al completamento dell'operazione.</param>
        <param name="arg">Argomento per il delegato contenuto nel parametro <c>d</c>.</param>
        <summary>Richiama un delegato nel thread o contesto adeguato al modello di applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.AsyncOperation.Post%2A> metodo richiama il delegato specificato per il `arg` parametro senza terminare la durata dell'operazione asincrona.  
  
 È possibile chiamare il <xref:System.ComponentModel.AsyncOperation.Post%2A> spesso si desidera che durante la durata dell'operazione asincrona non è stata terminata da una chiamata al metodo <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>. È possibile utilizzare il metodo per segnalare lo stato di avanzamento o i risultati intermedi ai client.  
  
 Il `d` parametro esegue il wrapping del delegato che deve essere chiamato quando si desidera pubblicare un aggiornamento sullo stato dell'attività asincrona. Il <xref:System.ComponentModel.AsyncOperation> oggetto assicurerà che il delegato viene richiamato sul thread o sul contesto appropriato per il modello di applicazione. Il metodo può facoltativamente generare un evento che notifica ai client di una modifica dello stato, l'aggiornamento dello stato o risultati incrementali rese disponibili.  
  
 Il `arg` parametro deve essere utilizzato per passare uno stato al delegato racchiuso il `d` parametro. Potrebbe essere un riferimento a un <xref:System.ComponentModel.AsyncOperation>, o potrebbe essere un <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> oggetto. Potrebbe essere auspicabile per derivare la propria classe dal <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> per fornire l'archiviazione dello stato.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di <xref:System.ComponentModel.AsyncOperation.Post%2A> metodo per segnalare lo stato di avanzamento e risultati incrementali di un'operazione asincrona. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> è già stato chiamato per l'attività.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> è <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Gli eredi necessario apportare la <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> chiamata asincrona, in modo che il provider di librerie di classe non è necessario occuparsi stack potenziale causa un overflow se presuppongono una modalità asincrona, ma un particolare modello applicazione possono essere sincrone.  
  
 <block subset="none" type="note"><para>  
 Le applicazioni console non sincronizzano l'esecuzione delle chiamate del metodo <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />. L'ordine di generazione degli eventi <see langword="ProgressChanged" /> potrebbe quindi non essere corretto. Se si vuole l'esecuzione serializzata delle chiamate al metodo <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />, implementare e installare una classe <see cref="T:System.Threading.SynchronizationContext" />.  
  
</para></block>  
  
 Per ulteriori informazioni sull'implementazione di classi asincrone, vedere [implementazione del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Oggetto <see cref="T:System.Threading.SendOrPostCallback" /> che esegue il wrapping del delegato da chiamare al completamento dell'operazione.</param>
        <param name="arg">Argomento per il delegato contenuto nel parametro <c>d</c>.</param>
        <summary>Pone fine alla durata di un'operazione asincrona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> metodo per terminare la durata di un'operazione asincrona. Dopo che questo metodo viene chiamato per una determinata attività, le chiamate a corrispondente <xref:System.ComponentModel.AsyncOperation> oggetto genererà un'eccezione.  
  
 Il `d` parametro esegue il wrapping del delegato da chiamare quando l'attività termina a causa di completamento, annullamento o interruzione dell'attività tramite la classe. Il <xref:System.ComponentModel.AsyncOperation> oggetto assicurerà che il delegato viene richiamato sul thread o sul contesto appropriato per il modello di applicazione. Il delegato può facoltativamente generare un evento che notifica ai client che la durata dell'attività asincrona è stata terminata.  
  
 Il `arg` parametro viene utilizzato per passare informazioni sullo stato al delegato di completamento `d`. È possibile utilizzare un <xref:System.ComponentModel.AsyncOperation> oggetto, o un <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> oggetto come valore del parametro. In alternativa, se si desidera fornire l'archiviazione dello stato, è possibile utilizzare un'istanza di una classe di derivazione di <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo di <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> metodo per terminare la durata di un'operazione asincrona. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          Il metodo <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> è già stato chiamato per l'attività.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> è <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Gli eredi necessario apportare la <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> chiamata asincrona, in modo che il provider di librerie di classe non è necessario occuparsi stack potenziale causa un overflow se presuppongono una modalità asincrona, ma un particolare modello applicazione possono essere sincrone. Il metodo deve essere interpretato come una chiamata "fine della durata", ovvero che l'implementazione deve eseguire l'impostazione appropriata per il modello di applicazione. Ad esempio, ASP.NET ridurrà il totale di operazioni asincrone in sospeso. Questo dovrebbe inoltre mettere l'operazione in uno stato in modo che tutte le chiamate successive al suo interno non riuscirà, poiché ora completata.  
  
 Per ulteriori informazioni sull'implementazione di classi asincrone, vedere [implementazione del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Threading.SynchronizationContext" /> passato al costruttore.</summary>
        <value>Oggetto <see cref="T:System.Threading.SynchronizationContext" /> passato al costruttore.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un oggetto usato per identificare in modo univoco un'operazione asincrona.</summary>
        <value>Oggetto di stato passato alla chiamata di metodo asincrona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se la classe supporta più metodi asincroni o più chiamate a un singolo metodo asincrono, i client saranno necessario un modo per determinare quale attività asincrona è la generazione di eventi. Il `MethodNameAsync` metodo deve accettare un parametro di tipo <xref:System.Object> che fungerà da ID attività. ID attività verrà utilizzato quando si chiama il <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, metodo e si assocerà ID attività del client con una particolare chiamata dell'operazione asincrona. Questo ID attività viene reso disponibile per l'implementazione tramite il <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> proprietà.  
  
> [!CAUTION]
>  Il codice client necessario prestare attenzione fornire un valore univoco per il <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> proprietà. ID attività non univoci può causare l'implementazione segnalare lo stato di avanzamento e altri eventi in modo non corretto. Il codice deve verificare la presenza di un ID attività non univoci e generare un <xref:System.ArgumentException> se viene rilevata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> per tenere traccia della durata delle operazioni asincrone. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
  </Members>
</Type>