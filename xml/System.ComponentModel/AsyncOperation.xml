<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7f80cce11905afe34dcbe6df6aa924c4b2148e01" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39837600" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rileva la durata di un'operazione asincrona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si implementa una classe base per il [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), potrebbe essere necessario tenere traccia della durata di ogni operazione asincrona richiamata in un'istanza della classe. Il <xref:System.ComponentModel.AsyncOperation> classe fornisce metodi per rilevare e segnalare lo stato di avanzamento di un'attività asincrona.  
  
 Nell'elenco seguente vengono indicati alcuni modi per usare un <xref:System.ComponentModel.AsyncOperation> oggetto:  
  
-   Per segnalare lo stato di avanzamento e i risultati intermedi nel client, chiamare <xref:System.ComponentModel.AsyncOperation.Post%2A> dal codice lavoro asincrono.  
  
-   Per indicare che è stata completata un'attività asincrona o annullare un'attività asincrona in sospeso, chiamare <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.  
  
 La classe deve ottenere un <xref:System.ComponentModel.AsyncOperation> oggetto per ogni attività asincrone chiamando <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> all'avvio di ogni attività. Per consentire al client di distinguere le varie attività asincrone, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> accetta un parametro per un token univoco generato dal client, che diventa il <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> proprietà. Può quindi essere utilizzato dal codice client per identificare l'attività asincrona specifico che genera gli eventi di stato di avanzamento o il completamento.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare un <xref:System.ComponentModel.AsyncOperation> oggetti per tenere traccia della durata delle operazioni asincrone. Questo esempio di codice è parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
 Per un listato di codice completo, vedere [procedura: implementare un componente che supporta il modello asincrono basato su eventi](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Per un listato di codice completo di un form di client, vedere [procedura: implementare un Client del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Gli implementatori devono assicurare i <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> e <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> chiamate sono asincrone, in modo che il provider di librerie di classe non è necessario preoccupino con stack potenziale causa un overflow se presuppongono un comportamento asincrono in un'applicazione specifica modello sincrono.  Per altre informazioni sull'implementazione di classi asincroni, vedere [implementazione del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizza l'operazione asincrona.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pone fine alla durata di un'operazione asincrona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> metodo a terminare il ciclo di vita di un'operazione asincrona. Dopo che questo metodo viene chiamato per una determinata attività, le chiamate a corrispondente <xref:System.ComponentModel.AsyncOperation> genererà un'eccezione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> è già stato chiamato per l'attività.</exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Oggetto <see cref="T:System.Threading.SendOrPostCallback" /> che esegue il wrapping del delegato da chiamare al completamento dell'operazione.</param>
        <param name="arg">Argomento per il delegato contenuto nel parametro <c>d</c>.</param>
        <summary>Richiama un delegato nel thread o contesto adeguato al modello di applicazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ComponentModel.AsyncOperation.Post%2A> metodo richiama il delegato specificato da di `arg` parametro senza terminare la durata dell'operazione asincrona.  
  
 È possibile chiamare il <xref:System.ComponentModel.AsyncOperation.Post%2A> ogni volta che si desidera che durante la durata dell'operazione asincrona non è stata terminata da una chiamata al metodo <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>. È possibile usare il metodo per segnalare lo stato di avanzamento o i risultati intermedi ai client.  
  
 Il `d` parametro esegue il wrapping del delegato che deve essere chiamato quando si desidera pubblicare un aggiornamento sullo stato dell'attività asincrona. Il <xref:System.ComponentModel.AsyncOperation> oggetto assicurerà che il delegato viene richiamato sul thread o contesto adeguato al modello di applicazione. Il metodo può facoltativamente generare un evento che notifica ai client di una modifica dello stato, aggiornamento dello stato o i risultati incrementali appena disponibili.  
  
 Il `arg` parametro deve essere usato per passare lo stato al delegato racchiuso il `d` parametro. Potrebbe essere un riferimento a un <xref:System.ComponentModel.AsyncOperation>, o potrebbe essere un <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> oggetto. Potrebbe essere utile per derivare la propria classe da <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> per fornire l'archiviazione dello stato aggiuntivi.  
  
   
  
## Examples  
 Esempio di codice seguente illustra l'uso di <xref:System.ComponentModel.AsyncOperation.Post%2A> metodo per segnalare lo stato e sui risultati incrementali di un'operazione asincrona. Questo esempio di codice è parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> è già stato chiamato per l'attività.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> è <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Gli eredi devono rendere la <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> chiamata asincrona, in modo che il provider di librerie di classe non è necessario preoccupino dei potenziali stack overflow se assumono la modalità asincrona, ma si verifica un modello di applicazione specifico per essere sincrona.  <block subset="none" type="note"><para> Le applicazioni console non sincronizzano l'esecuzione di <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> chiamate. L'ordine di generazione degli eventi <see langword="ProgressChanged" /> potrebbe quindi non essere corretto. Se si vuole l'esecuzione serializzata delle chiamate al metodo <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />, implementare e installare una classe <see cref="T:System.Threading.SynchronizationContext" />.  </para></block>  Per altre informazioni sull'implementazione di classi asincroni, vedere [implementazione del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">Oggetto <see cref="T:System.Threading.SendOrPostCallback" /> che esegue il wrapping del delegato da chiamare al completamento dell'operazione.</param>
        <param name="arg">Argomento per il delegato contenuto nel parametro <c>d</c>.</param>
        <summary>Pone fine alla durata di un'operazione asincrona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> metodo a terminare il ciclo di vita di un'operazione asincrona. Dopo che questo metodo viene chiamato per una determinata attività, le chiamate a corrispondente <xref:System.ComponentModel.AsyncOperation> oggetto genererà un'eccezione.  
  
 Il `d` parametro esegue il wrapping del delegato da chiamare quando l'attività termina a causa di un completamento, l'annullamento o errore dell'attività tramite la classe. Il <xref:System.ComponentModel.AsyncOperation> oggetto assicurerà che il delegato viene richiamato sul thread o contesto adeguato al modello di applicazione. Il delegato può facoltativamente generare un evento che notifica ai client che è stata terminata la durata dell'attività asincrona.  
  
 Il `arg` parametro viene usato per passare le informazioni sullo stato per il delegato di completamento `d`. È possibile usare un <xref:System.ComponentModel.AsyncOperation> oggetto, o un <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> oggetto come valore del parametro. In alternativa, se si desidera fornire l'archiviazione dello stato aggiuntivi, è possibile usare un'istanza di una classe di derivazione di <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> classe.  
  
   
  
## Examples  
 Esempio di codice seguente illustra l'uso di <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> metodo a terminare il ciclo di vita di un'operazione asincrona. Questo esempio di codice è parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> è già stato chiamato per l'attività.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> è <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Gli eredi devono rendere la <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> chiamata asincrona, in modo che il provider di librerie di classe non è necessario preoccupino dei potenziali stack overflow se assumono la modalità asincrona, ma si verifica un modello di applicazione specifico per essere sincrona. Il metodo deve essere interpretato come una chiamata "termina il ciclo di vita", vale a dire che l'implementazione deve eseguire siano appropriato per il modello di applicazione. Ad esempio, ASP.NET ridurrà il numero di operazioni asincrone in sospeso. Questo dovrebbe inoltre mettere l'operazione in uno stato in modo che tutte le chiamate successive al suo interno avrà esito negativo, poiché ora è stata completata.  Per altre informazioni sull'implementazione di classi asincroni, vedere [implementazione del modello asincrono basato su eventi](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Threading.SynchronizationContext" /> passato al costruttore.</summary>
        <value>Oggetto <see cref="T:System.Threading.SynchronizationContext" /> passato al costruttore.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un oggetto usato per identificare in modo univoco un'operazione asincrona.</summary>
        <value>Oggetto di stato passato alla chiamata di metodo asincrona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se la classe supporta più chiamate di un singolo metodo asincrono o più metodi asincroni, i client saranno necessario un modo per determinare quali attività asincrona è la generazione di eventi. I `MethodNameAsync` metodo deve accettare un parametro di tipo <xref:System.Object> che fungerà da un ID dell'attività. Si userà questo ID di attività quando si chiama il <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, metodo e si assocerà un ID attività del client con una particolare chiamata dell'operazione asincrona. Questo ID attività viene reso disponibile per l'implementazione tramite il <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> proprietà.  
  
> [!CAUTION]
>  Il codice client necessario prestare attenzione fornire un valore univoco per il <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> proprietà. ID attività non univoco potrebbe causare l'implementazione segnalare lo stato di avanzamento e altri eventi in modo non corretto. Il codice deve verificare la presenza di un ID attività non univoci e generare un <xref:System.ArgumentException> se viene rilevata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> per tenere traccia della durata delle operazioni asincrone. Questo esempio di codice è parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> classe.  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
  </Members>
</Type>