<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="NestedContainer.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a124ee078be65668efae6c08b17c83ac01930fb7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a124ee078be65668efae6c08b17c83ac01930fb7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ComponentModel.NestedContainer">
          <source>Provides the base implementation for the <ph id="ph1">&lt;see cref="T:System.ComponentModel.INestedContainer" /&gt;</ph> interface, which enables containers to have an owning component.</source>
          <target state="translated">Fornisce l'implementazione di base per l'interfaccia <ph id="ph1">&lt;see cref="T:System.ComponentModel.INestedContainer" /&gt;</ph> che consente ai contenitori di disporre di un componente proprietario.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> class is a simple implementation of the <ph id="ph2">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> interface, which defines a component that logically contains zero or more other components and is owned by a parent component.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> classe è un'implementazione semplice del <ph id="ph2">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> interfaccia che definisce un componente che contiene zero o più componenti in modo logico e appartiene a un componente padre.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>The behavior of nested containers differs from a standard <ph id="ph1">&lt;xref:System.ComponentModel.Container&gt;</ph> in a number of ways, including the following:</source>
          <target state="translated">Il comportamento di contenitori nidificati differisce dal standard <ph id="ph1">&lt;xref:System.ComponentModel.Container&gt;</ph> in diversi modi, inclusi i seguenti:</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>Site characteristics such as <ph id="ph1">&lt;xref:System.ComponentModel.Component.DesignMode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.Component.GetService%2A&gt;</ph> are routed through the owning component’s site.</source>
          <target state="translated">Le caratteristiche del sito, ad esempio <ph id="ph1">&lt;xref:System.ComponentModel.Component.DesignMode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.ComponentModel.Component.GetService%2A&gt;</ph> vengono indirizzate tramite sito del componente proprietario.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>The site’s <ph id="ph1">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> property is a qualified name that includes the owning component’s name followed by a period (.) and the child component’s name.</source>
          <target state="translated">Il sito <ph id="ph1">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> proprietà è un nome completo che include il nome del componente proprietario seguito da un punto (.) e il nome del componente figlio.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.NestedContainer.GetService%2A&gt;</ph> provides support for the <ph id="ph2">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> as a service.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.NestedContainer.GetService%2A&gt;</ph> fornisce il supporto per il <ph id="ph2">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> come servizio.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>When the owning component is disposed, the container is disposed as well.</source>
          <target state="translated">Quando il componente proprietario viene eliminato, viene eliminato anche il contenitore.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>In addition, designers treat nested containers differently.</source>
          <target state="translated">Inoltre, le finestre di progettazione gestiscono i contenitori nidificati in modo diverso.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>A designer host is only interested in one container—the one associated with the host.</source>
          <target state="translated">Un host di progettazione è solo interessato in un contenitore, ovvero quello associato all'host.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>Therefore, component add and remove events are not raised when a component is added to or removed from a nested container.</source>
          <target state="translated">Pertanto, aggiungere e rimuovere gli eventi non vengono generati quando un componente viene aggiunto o rimosso da un contenitore annidato.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>However, because services flow through to the nested container, component change events are raised when a component in a nested container is changed.</source>
          <target state="translated">Tuttavia, poiché servizi passano al contenitore annidato, vengono generati gli eventi di modifica componente quando viene modificato un componente in un contenitore annidato.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>This disparity in event tracking also impacts undo functionality, which is closely tied to serialization.</source>
          <target state="translated">Questa disparità di monitoraggio degli eventi influisce anche sulle funzionalità di annullamento, è strettamente legata alla serializzazione.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>The standard undo engine uses <ph id="ph1">&lt;xref:System.ComponentModel.Design.IReferenceService&gt;</ph> to track changes made to components.</source>
          <target state="translated">Il motore di annullamento standard utilizza <ph id="ph1">&lt;xref:System.ComponentModel.Design.IReferenceService&gt;</ph> per rilevare le modifiche apportate ai componenti.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>If the undo engine cannot identify a name for a component through the reference service, the engine will ignore any changes for that component.</source>
          <target state="translated">Se il motore di annullamento non è possibile identificare un nome per un componente tramite il servizio di riferimento, il motore ignorerà le modifiche per il componente.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>This service automatically recognizes changes to contained components only if they are exposed as public read-only properties of the same name in their owners.</source>
          <target state="translated">Il servizio riconosce automaticamente le modifiche apportate ai componenti contenuti solo se sono esposte come proprietà pubbliche di sola lettura con lo stesso nome nei relativi proprietari.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>Otherwise, the developer must pass component change events up to the owner.</source>
          <target state="translated">In caso contrario, lo sviluppatore deve superare gli eventi di modifica componente fino al proprietario.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ComponentModel.NestedContainer">
          <source>For example, if a nested component’s <ph id="ph1">`Text`</ph> property is resurfaced on its owning component as an <ph id="ph2">`Address`</ph> property, when the <ph id="ph3">`Text`</ph> property is changed, a property change must be programmatically made for the corresponding <ph id="ph4">`Address`</ph> property or else that change will not be tracked by undo.</source>
          <target state="translated">Ad esempio, se un componente annidato <ph id="ph1">`Text`</ph> proprietà è riapparire nel componente proprietario come un <ph id="ph2">`Address`</ph> proprietà, quando il <ph id="ph3">`Text`</ph> proprietà viene modificata, modifica di una proprietà deve essere eseguita a livello di codice per il corrispondente <ph id="ph4">`Address`</ph> proprietà o in caso contrario, tale modifica non vengono registrata da annullare.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> that owns this nested container.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> che possiede questo contenitore annidato.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ComponentModel.NestedContainer" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.ComponentModel.NestedContainer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
          <source>This constructor enlists in its owner's <ph id="ph1">&lt;xref:System.ComponentModel.IComponent.Disposed&gt;</ph> event so that the nested container's <ph id="ph2">&lt;xref:System.ComponentModel.NestedContainer.Dispose%2A&gt;</ph> method will automatically be called.</source>
          <target state="translated">Questo costruttore è incluso nel relativo proprietario <ph id="ph1">&lt;xref:System.ComponentModel.IComponent.Disposed&gt;</ph> evento in modo che il contenitore annidato <ph id="ph2">&lt;xref:System.ComponentModel.NestedContainer.Dispose%2A&gt;</ph> metodo verrà chiamato automaticamente.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> to create a site for.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> per il quale creare un sito.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>The name to assign to <bpt id="p1">&lt;c&gt;</bpt>component<ept id="p1">&lt;/c&gt;</ept>, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> to skip the name assignment.</source>
          <target state="translated">Nome da assegnare al <bpt id="p1">&lt;c&gt;</bpt>componente<ept id="p1">&lt;/c&gt;</ept> oppure <ph id="ph1">&lt;see langword="null" /&gt;</ph> per non assegnare alcun nome.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>Creates a site for the component within the container.</source>
          <target state="translated">Crea un sito per il componente all'interno del contenitore.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>The newly created <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.ComponentModel.ISite" /&gt;</ph> appena creato.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source>If the <ph id="ph1">`name`</ph> parameter is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.ComponentModel.IComponent&gt;</ph> is added to the nested container without an identifying name.</source>
          <target state="translated">Se il <ph id="ph1">`name`</ph> parametro <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.ComponentModel.IComponent&gt;</ph> viene aggiunto al contenitore annidato senza un nome significativo.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
          <source><ph id="ph1">&lt;paramref name="component" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="component" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> per rilasciare sia le risorse gestite sia quelle non gestite; <ph id="ph2">&lt;see langword="false" /&gt;</ph> per rilasciare solo le risorse non gestite.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>Releases the resources used by the nested container.</source>
          <target state="translated">Rilascia le risorse utilizzate dal contenitore annidato.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose()`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Questo metodo viene chiamato dal metodo pubblico <ph id="ph1">`Dispose()`</ph> (metodo) e <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> richiama il metodo protetto <ph id="ph2">`Dispose(Boolean)`</ph> metodo con il <ph id="ph3">`disposing`</ph> parametro impostato su <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> richiama <ph id="ph2">`Dispose`</ph> con <ph id="ph3">`disposing`</ph> impostato su <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is true, this method releases all resources held by any managed objects that this <ph id="ph2">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> references.</source>
          <target state="translated">Quando il <ph id="ph1">`disposing`</ph> parametro è true, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti da questo <ph id="ph2">&lt;xref:System.ComponentModel.NestedContainer&gt;</ph> riferimenti.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">Il metodo richiama il metodo <ph id="ph1">`Dispose()`</ph> di ciascun oggetto cui viene fatto riferimento.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated">Il metodo <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> può essere chiamato più volte da altri oggetti.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">Quando si esegue l'override <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph> prestare attenzione a non fare riferimento a oggetti che sono stati eliminati in una precedente chiamata a <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni su come implementare <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, vedere <bpt id="p1">[</bpt>implementazione di un metodo Dispose<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> e <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, vedere <bpt id="p1">[</bpt>la pulizia di risorse non gestite<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> e <bpt id="p2">[</bpt>si esegue l'override del metodo Finalize<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the service to retrieve.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> del servizio da recuperare.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>Gets the service object of the specified type, if it is available.</source>
          <target state="translated">Ottiene l'oggetto servizio del tipo specificato, se disponibile.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that implements the requested service, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the service cannot be resolved.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> che implementa il servizio richiesto, oppure <ph id="ph2">&lt;see langword="null" /&gt;</ph> se non è possibile risolvere il servizio.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>This method overrides the <ph id="ph1">&lt;xref:System.ComponentModel.Container.GetService%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Questo metodo esegue l'override di <ph id="ph1">&lt;xref:System.ComponentModel.Container.GetService%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
          <source>This implementation only resolves requests for the <ph id="ph1">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.IContainer&gt;</ph> services.</source>
          <target state="translated">Questa implementazione risolve solo le richieste per il <ph id="ph1">&lt;xref:System.ComponentModel.INestedContainer&gt;</ph> e <ph id="ph2">&lt;xref:System.ComponentModel.IContainer&gt;</ph> servizi.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.NestedContainer.Owner">
          <source>Gets the owning component for this nested container.</source>
          <target state="translated">Ottiene il componente proprietario per questo contenitore annidato.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.Owner">
          <source>The <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> that owns this nested container.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.ComponentModel.IComponent" /&gt;</ph> che possiede questo contenitore annidato.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.Owner">
          <source>The owning component is the characteristic that differentiates nested containers from ordinary containers.</source>
          <target state="translated">Il componente proprietario è la caratteristica che differenzia contenitori nidificati da quelli standard.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>Gets the name of the owning component.</source>
          <target state="translated">Ottiene il nome del componente proprietario.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>The name of the owning component.</source>
          <target state="translated">Nome del componente proprietario.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>This property may be overridden to provide a custom owner name.</source>
          <target state="translated">Questa proprietà può essere sottoposto a override per fornire un nome di proprietario personalizzato.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>The default implementation searches the owner's site for <ph id="ph1">&lt;xref:System.ComponentModel.INestedSite&gt;</ph> and calls <ph id="ph2">&lt;xref:System.ComponentModel.INestedSite.FullName%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> if there is no nested site.</source>
          <target state="translated">L'implementazione predefinita esegue una ricerca nel sito del proprietario per <ph id="ph1">&lt;xref:System.ComponentModel.INestedSite&gt;</ph> e chiama <ph id="ph2">&lt;xref:System.ComponentModel.INestedSite.FullName%2A&gt;</ph>, o <ph id="ph3">&lt;xref:System.ComponentModel.ISite.Name%2A&gt;</ph> se è presente alcun sito annidato.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ComponentModel.NestedContainer.OwnerName">
          <source>If neither is available, this property returns <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Se non sono disponibili, questa proprietà restituisce <ph id="ph1">`null`</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>