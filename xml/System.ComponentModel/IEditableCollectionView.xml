<Type Name="IEditableCollectionView" FullName="System.ComponentModel.IEditableCollectionView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="48583191bc3dd055645c028f233ccbaadaba5d5c" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34244813" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEditableCollectionView" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEditableCollectionView" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.IEditableCollectionView" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEditableCollectionView" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEditableCollectionView" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definisce i metodi e le proprietà implementati da <see cref="T:System.Windows.Data.CollectionView" /> per fornire funzionalità di modifica a un insieme.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando una visualizzazione di raccolta implementa il <xref:System.ComponentModel.IEditableCollectionView> interfaccia, è possibile modificare direttamente la raccolta sottostante, se le modifiche apportate, utilizzando i metodi e proprietà che <xref:System.ComponentModel.IEditableCollectionView> espone, indipendentemente dal tipo della raccolta.  
  
 I tipi di <xref:System.Windows.Controls.ItemCollection>, <xref:System.Windows.Data.BindingListCollectionView>, e <xref:System.Windows.Data.ListCollectionView> sono i tipi forniti con [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] che ereditano da <xref:System.Windows.Data.CollectionView>.  Questi tipi implementano anche il <xref:System.ComponentModel.IEditableCollectionView>, pertanto è possibile modificare una raccolta che utilizza uno di tali tipi.  <xref:System.Windows.Controls.ItemCollection>, in particolare, viene utilizzato spesso in quanto il <xref:System.Windows.Controls.ItemsControl.Items%2A?displayProperty=nameWithType> proprietà è un <xref:System.Windows.Controls.ItemCollection>.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come aggiungere un elemento a una raccolta utilizzando i metodi definiti da <xref:System.ComponentModel.IEditableCollectionView>.  Questa applicazione consente di visualizzare un elenco di elementi per la vendita e consente all'utente di aggiunta, modifica o rimozione di un elemento.  Quando l'utente aggiunge o modifica un elemento, un modulo chiede all'utente di immettere un nuovo elemento.  Se l'utente invia il form, l'elemento viene eseguito alla raccolta.  Se l'utente annulla il form, l'elemento verrà ignorato. Per l'esempio completo, vedere [modifica di una raccolta da utilizzare l'esempio IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddNew">
      <MemberSignature Language="C#" Value="public object AddNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.AddNew" />
      <MemberSignature Language="VB.NET" Value="Public Function AddNew () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddNew();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aggiunge un nuovo elemento alla raccolta.</summary>
        <returns>Nuovo elemento aggiunto alla raccolta.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chiamata <xref:System.ComponentModel.IEditableCollectionView.AddNew%2A> inizia una transazione di aggiunta.  È necessario chiamare <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> o <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> per terminare la transazione di aggiunta. Un nuovo elemento viene sempre visualizzata nella visualizzazione raccolta. Applicato un filtro, ordinamento o raggruppamento per la visualizzazione applicata al nuovo elemento quando <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> viene chiamato.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Windows.Window> che richiede all'utente di aggiungere un nuovo elemento.  Viene quindi chiamato <xref:System.ComponentModel.IEditableCollectionView.AddNew%2A> per creare un nuovo oggetto e imposta il <xref:System.Windows.FrameworkElement.DataContext%2A> del <xref:System.Windows.Window> a tale oggetto. Per l'esempio completo, vedere [modifica di una raccolta da utilizzare l'esempio IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAddNew">
      <MemberSignature Language="C#" Value="public bool CanAddNew { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanAddNew" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CanAddNew" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanAddNew As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanAddNew { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se è possibile aggiungere un nuovo elemento alla raccolta.</summary>
        <value>
          <see langword="true" /> se è possibile aggiungere un nuovo elemento alla raccolta. In caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.ComponentModel.IEditableCollectionView> possibile aggiungere un nuovo elemento, se vengono soddisfatte le seguenti:  
  
-   Un elemento può essere aggiunto alla raccolta sottostante.  Se la raccolta è di sola lettura, ad esempio <xref:System.ComponentModel.IEditableCollectionView.CanAddNew%2A> è `false`.  
  
-   Il <xref:System.ComponentModel.IEditableCollectionView> possibile creare un oggetto del tipo che è presente nella raccolta.  Ad esempio, se la raccolta è di tipo <xref:System.Collections.ObjectModel.ObservableCollection%601>, <xref:System.ComponentModel.IEditableCollectionView> deve essere in grado di creare un oggetto di tipo `T`.  
  
   
  
## Examples  
 L'esempio seguente verifica se un elemento può essere aggiunto alla raccolta.  Se <xref:System.ComponentModel.IEditableCollectionView.CanAddNew%2A> è `false`, l'esempio indica che non è possibile aggiungere un elemento.  In caso contrario, viene visualizzato un form che richiede all'utente di aggiungere un nuovo elemento. Per l'esempio completo, vedere [modifica di una raccolta da utilizzare l'esempio IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections) .  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCancelEdit">
      <MemberSignature Language="C#" Value="public bool CanCancelEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanCancelEdit" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanCancelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanCancelEdit { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la visualizzazione raccolta può annullare le modifiche in sospeso e ripristinare i valori originali di un oggetto modificato.</summary>
        <value>
          <see langword="true" /> se la visualizzazione raccolta può annullare le modifiche in sospeso e ripristinare i valori originali di un oggetto modificato. In caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> è `true` se la visualizzazione supporta il concetto di "modifiche in sospeso" per l'elemento attualmente modificato.   Ad esempio, in cui potrebbe restituire una visualizzazione di raccolta `true` se l'elemento modificato implementa <xref:System.ComponentModel.IEditableObject>, o se la vista dispone di informazioni sullo stato dell'elemento che è possibile utilizzare per eseguire il rollback delle modifiche di nuovo. <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> è `false` se la visualizzazione non è possibile annullare le modifiche in un oggetto.  In tal caso, chiamare <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> della visualizzazione uscire dallo stato di modifica e fornire la logica per annullare le modifiche per l'oggetto che è stato modificato.  
  
   
  
## Examples  
 Nell'esempio seguente ottiene <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> per verificare se i valori originali dell'elemento modificato possano essere ripristinati prima di chiamare <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>.  Se non è possibile ripristinare i valori, è necessario fornire la logica aggiuntiva per eseguire questa operazione.  In caso contrario, vengono ripristinati i valori quando viene chiamato <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>.   Per l'esempio completo, vedere [modifica di una raccolta da utilizzare l'esempio IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#canceledit)]
 [!code-vb[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#canceledit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public void CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelEdit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Termina la transazione di modifica e, se possibile, ripristina il valore originale dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> imposta <xref:System.ComponentModel.IEditableCollectionView.CurrentEditItem%2A> a `null` e determina la visualizzazione di raccolta uscire dallo stato di modifica.  Se <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> è `true`, <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> Ripristina inoltre i valori originali dell'oggetto modificato.  
  
   
  
## Examples  
 Nell'esempio seguente ottiene <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> per verificare se i valori originali dell'elemento modificato possano essere ripristinati prima di chiamare <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>.  Se non è possibile ripristinare i valori, è necessario fornire la logica aggiuntiva per eseguire questa operazione.  In caso contrario, vengono ripristinati i valori quando viene chiamato <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>. Per l'esempio completo, vedere [modifica di una raccolta da utilizzare l'esempio IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#canceledit)]
 [!code-vb[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#canceledit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelNew">
      <MemberSignature Language="C#" Value="public void CancelNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CancelNew" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelNew();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Termina la transazione di aggiunta ed elimina il nuovo elemento in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene visualizzato un form che richiede all'utente di aggiungere un nuovo elemento.  Se l'utente invia il form, viene chiamato <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> ad aggiungere l'elemento alla raccolta.  Se l'utente annulla il form, viene chiamato <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> per cancellare l'elemento. Per l'esempio completo, vedere [modifica di una raccolta da utilizzare l'esempio IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemove">
      <MemberSignature Language="C#" Value="public bool CanRemove { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRemove" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CanRemove" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanRemove As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanRemove { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se è possibile rimuovere un elemento dalla raccolta.</summary>
        <value>
          <see langword="true" /> se è possibile rimuovere un elemento dalla raccolta. In caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView.CanRemove%2A> è `false` se la raccolta sottostante è di sola lettura.  
  
   
  
## Examples  
 L'esempio seguente chiama <xref:System.ComponentModel.IEditableCollectionView.CanRemove%2A> per verificare se è possibile rimuovere un elemento dalla raccolta.  Se è possibile rimuovere un elemento, nell'esempio viene richiesto all'utente di confermare l'azione e chiamate <xref:System.ComponentModel.IEditableCollectionView.Remove%2A> se l'utente fa clic **Sì**. Per l'esempio completo, vedere [modifica di una raccolta da utilizzare l'esempio IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#removeitem)]
 [!code-vb[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#removeitem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitEdit">
      <MemberSignature Language="C#" Value="public void CommitEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CommitEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommitEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CommitEdit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Termina la transazione di modifica e salva le modifiche in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente crea un modulo che richiede all'utente di modificare un elemento esistente.  Se l'utente invia il form, viene chiamato <xref:System.ComponentModel.IEditableCollectionView.CommitEdit%2A> per salvare le modifiche alla raccolta.  Se l'utente annulla il form, viene chiamato <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> per annullare le modifiche. Per l'esempio completo, vedere [modifica di una raccolta da utilizzare l'esempio IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#EditItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#edititem)]
 [!code-vb[EditingCollectionsSnippets#EditItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#edititem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitNew">
      <MemberSignature Language="C#" Value="public void CommitNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CommitNew" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommitNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CommitNew();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Termina la transazione di aggiunta e salva il nuovo elemento in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Applicato un filtro, ordinamento o raggruppamento per il <xref:System.Windows.Data.CollectionView> viene applicato al nuovo elemento quando <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> viene chiamato.  
  
   
  
## Examples  
 Nell'esempio seguente viene visualizzato un form che richiede all'utente di aggiungere un nuovo elemento.  Se l'utente invia il form, viene chiamato <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> ad aggiungere l'elemento alla raccolta.  Se l'utente annulla il form, viene chiamato <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> per cancellare l'elemento. Per l'esempio completo, vedere [modifica di una raccolta da utilizzare l'esempio IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentAddItem">
      <MemberSignature Language="C#" Value="public object CurrentAddItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentAddItem" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentAddItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CurrentAddItem { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'elemento che viene aggiunto durante la transazione di aggiunta corrente.</summary>
        <value>Elemento aggiunto se <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> è <see langword="true" />. In caso contrario, <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentEditItem">
      <MemberSignature Language="C#" Value="public object CurrentEditItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentEditItem" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentEditItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CurrentEditItem { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'elemento della raccolta che viene modificato.</summary>
        <value>Elemento della raccolta che viene modificato se <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> è <see langword="true" />. In caso contrario, <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditItem">
      <MemberSignature Language="C#" Value="public void EditItem (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EditItem(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EditItem (item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EditItem(System::Object ^ item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Elemento da modificare.</param>
        <summary>Avvia una transazione di modifica dell'elemento specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente crea un modulo che richiede all'utente di modificare un elemento esistente.  Se l'utente invia il form, le modifiche vengono salvate per la raccolta.  Se l'utente annulla il form, le modifiche vengono ignorate. Per l'esempio completo, vedere [modifica di una raccolta da utilizzare l'esempio IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections) .  
  
 [!code-csharp[EditingCollectionsSnippets#EditItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#edititem)]
 [!code-vb[EditingCollectionsSnippets#EditItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#edititem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddingNew">
      <MemberSignature Language="C#" Value="public bool IsAddingNew { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAddingNew" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAddingNew As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAddingNew { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se è in corso una transazione di aggiunta.</summary>
        <value>
          <see langword="true" /> se è in corso una transazione di aggiunta; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per avviare una transazione di aggiunta, chiamare <xref:System.ComponentModel.IEditableCollectionView.AddNew%2A> e terminare la transazione di aggiunta chiamando <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> o <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEditingItem">
      <MemberSignature Language="C#" Value="public bool IsEditingItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEditingItem" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEditingItem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEditingItem { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se è in corso una transazione di modifica.</summary>
        <value>
          <see langword="true" /> se è in corso una transazione di modifica. In caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per avviare una transazione di modifica chiamando <xref:System.ComponentModel.IEditableCollectionView.EditItem%2A> e terminare la transazione chiamando <xref:System.ComponentModel.IEditableCollectionView.CommitEdit%2A> o <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewItemPlaceholderPosition">
      <MemberSignature Language="C#" Value="public System.ComponentModel.NewItemPlaceholderPosition NewItemPlaceholderPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.NewItemPlaceholderPosition NewItemPlaceholderPosition" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition" />
      <MemberSignature Language="VB.NET" Value="Public Property NewItemPlaceholderPosition As NewItemPlaceholderPosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::NewItemPlaceholderPosition NewItemPlaceholderPosition { System::ComponentModel::NewItemPlaceholderPosition get(); void set(System::ComponentModel::NewItemPlaceholderPosition value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.NewItemPlaceholderPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la posizione del segnaposto del nuovo elemento nella visualizzazione raccolta.</summary>
        <value>Uno dei valori di enumerazione che specifica la posizione del segnaposto del nuovo elemento nella visualizzazione raccolta.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Object ^ item);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Elemento da rimuovere.</param>
        <summary>Rimuove l'elemento specificato dalla raccolta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `item` non è presente nella raccolta, <xref:System.ComponentModel.IEditableCollectionView.Remove%2A> non esegue alcuna operazione.  
  
   
  
## Examples  
 L'esempio seguente chiama <xref:System.ComponentModel.IEditableCollectionView.CanRemove%2A> per verificare se è possibile rimuovere un elemento dalla raccolta.  Se è possibile rimuovere un elemento, nell'esempio viene richiesto all'utente di confermare l'azione e chiamate <xref:System.ComponentModel.IEditableCollectionView.Remove%2A> se l'utente fa clic **Sì**. Per l'esempio completo, vedere [modifica di una raccolta da utilizzare l'esempio IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#removeitem)]
 [!code-vb[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#removeitem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Posizione dell'elemento da rimuovere.</param>
        <summary>Rimuove dalla raccolta l'elemento in corrispondenza della posizione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `index` è relativo alla visualizzazione raccolta, non la raccolta.  Ad esempio, se la raccolta contiene 10 elementi e la visualizzazione include un <xref:System.ComponentModel.ICollectionView.Filter%2A> in modo che vengano visualizzati solo 7, i valori validi di `index` sono da 0 a 6.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> è minore di 0 o maggiore del numero di elementi nella visualizzazione dell'insieme.</exception>
      </Docs>
    </Member>
  </Members>
</Type>