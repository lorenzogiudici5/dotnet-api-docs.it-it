<Type Name="BackgroundWorker" FullName="System.ComponentModel.BackgroundWorker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="053b0518e8cc183ffa09c4955d3ee95189700f76" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36705021" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BackgroundWorker : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BackgroundWorker extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.BackgroundWorker" />
  <TypeSignature Language="VB.NET" Value="Public Class BackgroundWorker&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class BackgroundWorker : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type BackgroundWorker = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("DoWork")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e6d36-101">Esegue un'operazione su un thread separato.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e6d36-101">Executes an operation on a separate thread.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-102">Il <xref:System.ComponentModel.BackgroundWorker> classe consente di eseguire un'operazione su un thread dedicato separato.</span><span class="sxs-lookup"><span data-stu-id="e6d36-102">The <xref:System.ComponentModel.BackgroundWorker> class allows you to run an operation on a separate, dedicated thread.</span></span> <span data-ttu-id="e6d36-103">Le operazioni molto tempo come download e le transazioni di database possono causare l'interfaccia utente (UI) a sembrare come se ha smesso di rispondere mentre sono in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="e6d36-103">Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running.</span></span> <span data-ttu-id="e6d36-104">Quando si desidera un'interfaccia utente reattiva e si vogliano evitare ritardi associati a tali operazioni, il <xref:System.ComponentModel.BackgroundWorker> classe costituisce la soluzione ideale.</span><span class="sxs-lookup"><span data-stu-id="e6d36-104">When you want a responsive UI and you are faced with long delays associated with such operations, the <xref:System.ComponentModel.BackgroundWorker> class provides a convenient solution.</span></span>  
  
 <span data-ttu-id="e6d36-105">Per eseguire un'operazione impegnativa in background, creare un <xref:System.ComponentModel.BackgroundWorker> e restare in attesa per gli eventi che indicano lo stato di avanzamento dell'operazione e ne indicano quando l'operazione è stata completata.</span><span class="sxs-lookup"><span data-stu-id="e6d36-105">To execute a time-consuming operation in the background, create a <xref:System.ComponentModel.BackgroundWorker> and listen for events that report the progress of your operation and signal when your operation is finished.</span></span> <span data-ttu-id="e6d36-106">È possibile creare il <xref:System.ComponentModel.BackgroundWorker> a livello di codice o è possibile trascinare nel form dal **componenti** scheda della finestra il **casella degli strumenti**.</span><span class="sxs-lookup"><span data-stu-id="e6d36-106">You can create the <xref:System.ComponentModel.BackgroundWorker> programmatically or you can drag it onto your form from the **Components** tab of the **Toolbox**.</span></span> <span data-ttu-id="e6d36-107">Se si crea il <xref:System.ComponentModel.BackgroundWorker> in Progettazione Windows Form, essa verrà visualizzata nella barra dei componenti e le relative proprietà verranno visualizzate nella finestra Proprietà.</span><span class="sxs-lookup"><span data-stu-id="e6d36-107">If you create the <xref:System.ComponentModel.BackgroundWorker> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.</span></span>  
  
 <span data-ttu-id="e6d36-108">Per impostare un'operazione in background, aggiungere un gestore eventi per il <xref:System.ComponentModel.BackgroundWorker.DoWork> evento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-108">To set up for a background operation, add an event handler for the <xref:System.ComponentModel.BackgroundWorker.DoWork> event.</span></span> <span data-ttu-id="e6d36-109">In questo gestore eventi, chiamare l'operazione richiede molto tempo.</span><span class="sxs-lookup"><span data-stu-id="e6d36-109">Call your time-consuming operation in this event handler.</span></span> <span data-ttu-id="e6d36-110">Per avviare l'operazione, chiamare <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-110">To start the operation, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span> <span data-ttu-id="e6d36-111">Per ricevere le notifiche degli aggiornamenti di stato di avanzamento, gestire il <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> evento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-111">To receive notifications of progress updates, handle the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="e6d36-112">Per ricevere una notifica quando l'operazione è completata, gestire il <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> evento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-112">To receive a notification when the operation is completed, handle the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e6d36-113">È necessario prestare attenzione a non modificare oggetti dell'interfaccia utente nel <xref:System.ComponentModel.BackgroundWorker.DoWork> gestore dell'evento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-113">You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span> <span data-ttu-id="e6d36-114">Invece, di comunicare con l'interfaccia utente tramite il <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> e <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> eventi.</span><span class="sxs-lookup"><span data-stu-id="e6d36-114">Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> events.</span></span>  
>   
>  <span data-ttu-id="e6d36-115"><xref:System.ComponentModel.BackgroundWorker> gli eventi non vengono effettuato il marshalling tra <xref:System.AppDomain> limiti.</span><span class="sxs-lookup"><span data-stu-id="e6d36-115"><xref:System.ComponentModel.BackgroundWorker> events are not marshaled across <xref:System.AppDomain> boundaries.</span></span> <span data-ttu-id="e6d36-116">Non utilizzare un <xref:System.ComponentModel.BackgroundWorker> componente per eseguire operazioni a thread multipli in una o più <xref:System.AppDomain>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-116">Do not use a <xref:System.ComponentModel.BackgroundWorker> component to perform multithreaded operations in more than one <xref:System.AppDomain>.</span></span>  
  
 <span data-ttu-id="e6d36-117">Se l'operazione in background richiede un parametro, chiamare <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> con il parametro.</span><span class="sxs-lookup"><span data-stu-id="e6d36-117">If your background operation requires a parameter, call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> with your parameter.</span></span> <span data-ttu-id="e6d36-118">All'interno di <xref:System.ComponentModel.BackgroundWorker.DoWork> gestore eventi, è possibile estrarre il parametro dal <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="e6d36-118">Inside the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can extract the parameter from the <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="e6d36-119">Per altre informazioni su <xref:System.ComponentModel.BackgroundWorker>, vedere [Procedura: eseguire un'operazione in background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span><span class="sxs-lookup"><span data-stu-id="e6d36-119">For more information about <xref:System.ComponentModel.BackgroundWorker>, see [How to: Run an Operation in the Background](~/docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6d36-120">Esempio di codice seguente illustra i concetti di base di <xref:System.ComponentModel.BackgroundWorker> classe per l'esecuzione di un'operazione richiede molto tempo in modo asincrono.</span><span class="sxs-lookup"><span data-stu-id="e6d36-120">The following code example demonstrates the basics of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously.</span></span> <span data-ttu-id="e6d36-121">Nella figura seguente viene illustrato un esempio dell'output.</span><span class="sxs-lookup"><span data-stu-id="e6d36-121">The following illustration shows an example of the output.</span></span>  
  
 <span data-ttu-id="e6d36-122">![Esempio di BackgroundWorker semplice](~/add/media/backgroundworker-simple.png "esempio di BackgroundWorker semplice")</span><span class="sxs-lookup"><span data-stu-id="e6d36-122">![BackgroundWorker simple example](~/add/media/backgroundworker-simple.png "BackgroundWorker simple example")</span></span>  
  
 <span data-ttu-id="e6d36-123">Per provare questo codice, creare un'applicazione Windows Forms.</span><span class="sxs-lookup"><span data-stu-id="e6d36-123">To try this code, create a Windows Forms application.</span></span> <span data-ttu-id="e6d36-124">Aggiungere un <xref:System.Windows.Forms.Label> controllo denominato `resultLabel` e aggiungere due <xref:System.Windows.Forms.Button> controlli denominati `startAsyncButton` e `cancelAsyncButton`.</span><span class="sxs-lookup"><span data-stu-id="e6d36-124">Add a <xref:System.Windows.Forms.Label> control named `resultLabel` and add two <xref:System.Windows.Forms.Button> controls named `startAsyncButton` and `cancelAsyncButton`.</span></span> <span data-ttu-id="e6d36-125">Creare <xref:System.Windows.Forms.Control.Click> gestori eventi per entrambi i pulsanti.</span><span class="sxs-lookup"><span data-stu-id="e6d36-125">Create <xref:System.Windows.Forms.Control.Click> event handlers for both buttons.</span></span> <span data-ttu-id="e6d36-126">Dal **componenti** scheda della casella degli strumenti, aggiungere un <xref:System.ComponentModel.BackgroundWorker> componente denominato `backgroundWorker1`.</span><span class="sxs-lookup"><span data-stu-id="e6d36-126">From the **Components** tab of the Toolbox, add a <xref:System.ComponentModel.BackgroundWorker> component named `backgroundWorker1`.</span></span> <span data-ttu-id="e6d36-127">Creare <xref:System.ComponentModel.BackgroundWorker.DoWork>, <xref:System.ComponentModel.BackgroundWorker.ProgressChanged>, e <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> gestori eventi per il <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-127">Create <xref:System.ComponentModel.BackgroundWorker.DoWork>, <xref:System.ComponentModel.BackgroundWorker.ProgressChanged>, and <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handlers for the <xref:System.ComponentModel.BackgroundWorker>.</span></span> <span data-ttu-id="e6d36-128">Nel codice per il form, sostituire il codice esistente con il codice seguente.</span><span class="sxs-lookup"><span data-stu-id="e6d36-128">In the code for the form, replace the existing code with the following code.</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/cs/form1.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorkerSimple#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/vb/form1.vb#1)]  
  
 <span data-ttu-id="e6d36-129">Esempio di codice seguente illustra l'uso della <xref:System.ComponentModel.BackgroundWorker> classe per l'esecuzione di un'operazione richiede molto tempo in modo asincrono.</span><span class="sxs-lookup"><span data-stu-id="e6d36-129">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker> class for executing a time-consuming operation asynchronously.</span></span> <span data-ttu-id="e6d36-130">Nella figura seguente viene illustrato un esempio dell'output.</span><span class="sxs-lookup"><span data-stu-id="e6d36-130">The following illustration shows an example of the output.</span></span>  
  
 <span data-ttu-id="e6d36-131">![Esempio di BackgroundWorker Fibonacci](~/add/media/backgroundworker-fibonacci.png "esempio di BackgroundWorker Fibonacci")</span><span class="sxs-lookup"><span data-stu-id="e6d36-131">![BackgroundWorker Fibonacci example](~/add/media/backgroundworker-fibonacci.png "BackgroundWorker Fibonacci example")</span></span>  
  
 <span data-ttu-id="e6d36-132">L'operazione calcola il numero di Fibonacci selezionato provvede agli aggiornamenti di stato di avanzamento durante il calcolo e consente un calcolo in sospeso da annullare.</span><span class="sxs-lookup"><span data-stu-id="e6d36-132">The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#1)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorker#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BackgroundWorker ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BackgroundWorker();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e6d36-133">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.BackgroundWorker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-133">Initializes a new instance of the <see cref="T:System.ComponentModel.BackgroundWorker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-134">Questo costruttore inizializza un <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-134">This constructor initializes a <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="backgroundWorker.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e6d36-135">Richiede l'annullamento di un'operazione in background in attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-135">Requests cancellation of a pending background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-136"><xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> Invia una richiesta per terminare l'operazione in background in sospeso e imposta il <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="e6d36-136"><xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> submits a request to terminate the pending background operation and sets the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="e6d36-137">Quando si chiama <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, metodo di lavoro ha la possibilità di arrestare l'esecuzione e uscire.</span><span class="sxs-lookup"><span data-stu-id="e6d36-137">When you call <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, your worker method has an opportunity to stop its execution and exit.</span></span> <span data-ttu-id="e6d36-138">Il codice di lavoro debba verificare periodicamente la <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> proprietà per vedere se è stata impostata `true`.</span><span class="sxs-lookup"><span data-stu-id="e6d36-138">The worker code should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to see if it has been set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e6d36-139">Tenere presente che il codice nel <xref:System.ComponentModel.BackgroundWorker.DoWork> gestore dell'evento potrebbe terminare il proprio lavoro nel caso di una richiesta di annullamento e il ciclo di polling potrebbe non essere implementato <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> viene impostata su `true`.</span><span class="sxs-lookup"><span data-stu-id="e6d36-139">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="e6d36-140">In questo caso, il <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag del <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> nel <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> gestore dell'evento non verrà impostato `true`, anche se è stata effettuata una richiesta di annullamento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-140">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="e6d36-141">Questa situazione viene chiamata un *situazioni di race condition* e costituisce un problema comune nella programmazione multithreading.</span><span class="sxs-lookup"><span data-stu-id="e6d36-141">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="e6d36-142">Per ulteriori informazioni sulla progettazione multithreading problemi, vedere [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span><span class="sxs-lookup"><span data-stu-id="e6d36-142">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6d36-143">Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> metodo annullare un'operazione asincrona ("in background").</span><span class="sxs-lookup"><span data-stu-id="e6d36-143">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to cancel an asynchronous ("background") operation.</span></span> <span data-ttu-id="e6d36-144">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="e6d36-144">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#4)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#4)]
 [!code-vb[System.ComponentModel.BackgroundWorker#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e6d36-145">
            <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> è <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-145">
              <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> is <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CancellationPending">
      <MemberSignature Language="C#" Value="public bool CancellationPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancellationPending" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.CancellationPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CancellationPending As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancellationPending { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CancellationPending : bool" Usage="System.ComponentModel.BackgroundWorker.CancellationPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e6d36-146">Ottiene un valore che indica se l'applicazione ha richiesto l'annullamento di un'operazione in background.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-146">Gets a value indicating whether the application has requested cancellation of a background operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e6d36-147">
            <see langword="true" /> se l'applicazione ha richiesto l'annullamento di un operazione in background; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-147">
              <see langword="true" /> if the application has requested cancellation of a background operation; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e6d36-148">Il valore predefinito è <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-148">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-149">Se <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> viene `true`, quindi il <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> metodo è stato chiamato sul <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-149">If <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> is `true`, then the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method has been called on the <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
 <span data-ttu-id="e6d36-150">Questa proprietà è destinata all'utilizzo dal thread di lavoro, deve verificare periodicamente <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> e interrompere l'operazione in background quando è impostata su `true`.</span><span class="sxs-lookup"><span data-stu-id="e6d36-150">This property is meant for use by the worker thread, which should periodically check <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> and abort the background operation when it is set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6d36-151">Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> proprietà per ottenere un <xref:System.ComponentModel.BackgroundWorker> sul relativo stato di annullamento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-151">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property to query a <xref:System.ComponentModel.BackgroundWorker> about its cancellation state.</span></span> <span data-ttu-id="e6d36-152">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="e6d36-152">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="backgroundWorker.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="backgroundWorker.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoWork">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.DoWorkEventHandler DoWork;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.DoWorkEventHandler DoWork" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.DoWork" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoWork As DoWorkEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::DoWorkEventHandler ^ DoWork;" />
      <MemberSignature Language="F#" Value="member this.DoWork : System.ComponentModel.DoWorkEventHandler " Usage="member this.DoWork : System.ComponentModel.DoWorkEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DoWorkEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e6d36-153">Si verifica quando viene chiamato il metodo <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-153">Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> is called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-154">Questo evento viene generato quando si chiama il <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="e6d36-154">This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method.</span></span> <span data-ttu-id="e6d36-155">Si tratta in cui viene avviata l'operazione che esegua l'operazione potrebbe richiedere molto tempo.</span><span class="sxs-lookup"><span data-stu-id="e6d36-155">This is where you start the operation that performs the potentially time-consuming work.</span></span>  
  
 <span data-ttu-id="e6d36-156">Il codice nel <xref:System.ComponentModel.BackgroundWorker.DoWork> gestore dell'evento deve verificare periodicamente la <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> valore della proprietà e interrompere l'operazione se è `true`.</span><span class="sxs-lookup"><span data-stu-id="e6d36-156">Your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler should periodically check the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> property value and abort the operation if it is `true`.</span></span> <span data-ttu-id="e6d36-157">In questo caso, è possibile impostare il <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag di <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> a `true`e il <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag di <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> nel <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> gestore dell'evento verrà impostato su `true`.</span><span class="sxs-lookup"><span data-stu-id="e6d36-157">When this occurs, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> to `true`, and the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will be set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e6d36-158">Tenere presente che il codice nel <xref:System.ComponentModel.BackgroundWorker.DoWork> gestore dell'evento potrebbe terminare il proprio lavoro nel caso di una richiesta di annullamento e il ciclo di polling potrebbe non essere implementato <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> viene impostata su `true`.</span><span class="sxs-lookup"><span data-stu-id="e6d36-158">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="e6d36-159">In questo caso, il <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag del <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> nel <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> gestore dell'evento non verrà impostato `true`, anche se è stata effettuata una richiesta di annullamento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-159">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="e6d36-160">Questa situazione viene chiamata un *situazioni di race condition* e costituisce un problema comune nella programmazione multithreading.</span><span class="sxs-lookup"><span data-stu-id="e6d36-160">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="e6d36-161">Per ulteriori informazioni sulla progettazione multithreading problemi, vedere [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span><span class="sxs-lookup"><span data-stu-id="e6d36-161">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
 <span data-ttu-id="e6d36-162">Se l'operazione produce un risultato, è possibile assegnare il risultato per il <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="e6d36-162">If your operation produces a result, you can assign the result to the <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="e6d36-163">Questo sarà disponibile per il <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> gestore dell'evento nel <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="e6d36-163">This will be available to the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler in the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="e6d36-164">Se l'operazione genera un'eccezione che non gestisce il codice, il <xref:System.ComponentModel.BackgroundWorker> intercetta l'eccezione e la passa nel <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> gestore dell'evento, in cui viene esposta come il <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> proprietà di <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-164">If the operation raises an exception that your code does not handle, the <xref:System.ComponentModel.BackgroundWorker> catches the exception and passes it into the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler, where it is exposed as the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e6d36-165">Se si esegue il debugger di Visual Studio, il debugger interromperà in corrispondenza del punto nel <xref:System.ComponentModel.BackgroundWorker.DoWork> gestore dell'evento in cui è stata generata l'eccezione non gestita.</span><span class="sxs-lookup"><span data-stu-id="e6d36-165">If you are running under the Visual Studio debugger, the debugger will break at the point in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler where the unhandled exception was raised.</span></span> <span data-ttu-id="e6d36-166">Se si dispone di una o più <xref:System.ComponentModel.BackgroundWorker>, è consigliabile non fare riferimento ad esse direttamente, per evitare di associare il <xref:System.ComponentModel.BackgroundWorker.DoWork> gestore eventi per un'istanza specifica di <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-166">If you have more than one <xref:System.ComponentModel.BackgroundWorker>, you should not reference any of them directly, as this would couple your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler to a specific instance of <xref:System.ComponentModel.BackgroundWorker>.</span></span> <span data-ttu-id="e6d36-167">Al contrario, è necessario accedere ai <xref:System.ComponentModel.BackgroundWorker> eseguendo il cast il `sender` parametro nel <xref:System.ComponentModel.BackgroundWorker.DoWork> gestore dell'evento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-167">Instead, you should access your <xref:System.ComponentModel.BackgroundWorker> by casting the `sender` parameter in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span>  
  
 <span data-ttu-id="e6d36-168">È necessario prestare attenzione a non modificare oggetti dell'interfaccia utente nel <xref:System.ComponentModel.BackgroundWorker.DoWork> gestore dell'evento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-168">You must be careful not to manipulate any user-interface objects in your <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler.</span></span> <span data-ttu-id="e6d36-169">Invece, di comunicare con l'interfaccia utente tramite il <xref:System.ComponentModel.BackgroundWorker> eventi.</span><span class="sxs-lookup"><span data-stu-id="e6d36-169">Instead, communicate to the user interface through the <xref:System.ComponentModel.BackgroundWorker> events.</span></span>  
  
 <span data-ttu-id="e6d36-170">Per ulteriori informazioni sulla gestione degli eventi, vedere [NIB: utilizzo degli eventi](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span><span class="sxs-lookup"><span data-stu-id="e6d36-170">For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6d36-171">Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.ComponentModel.BackgroundWorker.DoWork> evento per avviare un'operazione asincrona.</span><span class="sxs-lookup"><span data-stu-id="e6d36-171">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.DoWork> event to start an asynchronous operation.</span></span> <span data-ttu-id="e6d36-172">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="e6d36-172">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#5)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#5)]
 [!code-vb[System.ComponentModel.BackgroundWorker#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBusy : bool" Usage="System.ComponentModel.BackgroundWorker.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e6d36-173">Ottiene un valore che indica se <see cref="T:System.ComponentModel.BackgroundWorker" /> sta eseguendo un'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-173">Gets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e6d36-174">
            <see langword="true" /> se la classe <see cref="T:System.ComponentModel.BackgroundWorker" /> sta eseguendo un'operazione asincrona; in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-174">
              <see langword="true" />, if the <see cref="T:System.ComponentModel.BackgroundWorker" /> is running an asynchronous operation; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-175">Il <xref:System.ComponentModel.BackgroundWorker> avvia un'operazione asincrona, quando si chiama <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-175">The <xref:System.ComponentModel.BackgroundWorker> starts an asynchronous operation when you call <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6d36-176">Esempio di codice seguente viene illustrato come utilizzare il <xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> proprietà per attendere il completamento di un <xref:System.ComponentModel.BackgroundWorker> operazione.</span><span class="sxs-lookup"><span data-stu-id="e6d36-176">The following code example demonstrates how to use the <xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> property to wait for completion of a <xref:System.ComponentModel.BackgroundWorker> operation.</span></span> <span data-ttu-id="e6d36-177">Questo esempio di codice fa parte di un esempio più esaustivo descritto in [procedura: scaricare un File in Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span><span class="sxs-lookup"><span data-stu-id="e6d36-177">This code example is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
        <altmember cref="T:System.EventArgs" />
        <altmember cref="Overload:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
      </Docs>
    </Member>
    <Member MemberName="OnDoWork">
      <MemberSignature Language="C#" Value="protected virtual void OnDoWork (System.ComponentModel.DoWorkEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoWork(class System.ComponentModel.DoWorkEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDoWork (e As DoWorkEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDoWork(System::ComponentModel::DoWorkEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDoWork : System.ComponentModel.DoWorkEventArgs -&gt; unit&#xA;override this.OnDoWork : System.ComponentModel.DoWorkEventArgs -&gt; unit" Usage="backgroundWorker.OnDoWork e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.DoWorkEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e6d36-178">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-178">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6d36-179">Genera l'evento <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-179">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnProgressChanged (System.ComponentModel.ProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnProgressChanged(class System.ComponentModel.ProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnProgressChanged (e As ProgressChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnProgressChanged(System::ComponentModel::ProgressChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnProgressChanged : System.ComponentModel.ProgressChangedEventArgs -&gt; unit&#xA;override this.OnProgressChanged : System.ComponentModel.ProgressChangedEventArgs -&gt; unit" Usage="backgroundWorker.OnProgressChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.ProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e6d36-180">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-180">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6d36-181">Genera l'evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-181">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-182">Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato.</span><span class="sxs-lookup"><span data-stu-id="e6d36-182">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="e6d36-183">Per altre informazioni, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).</span><span class="sxs-lookup"><span data-stu-id="e6d36-183">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="e6d36-184">Il metodo <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato.</span><span class="sxs-lookup"><span data-stu-id="e6d36-184">The <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="e6d36-185">È la tecnica consigliata per la gestione dell'evento in una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="e6d36-185">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6d36-186">Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> metodo per segnalare lo stato di avanzamento di un'operazione asincrona.</span><span class="sxs-lookup"><span data-stu-id="e6d36-186">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> method to report the progress of an asynchronous operation.</span></span> <span data-ttu-id="e6d36-187">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.AsyncOperationManager> classe.</span><span class="sxs-lookup"><span data-stu-id="e6d36-187">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#24)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#24)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e6d36-188">
            <para>Quando si esegue l'override <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-188">
              <para>When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> method so that registered delegates receive the event.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnRunWorkerCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnRunWorkerCompleted (System.ComponentModel.RunWorkerCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRunWorkerCompleted(class System.ComponentModel.RunWorkerCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRunWorkerCompleted (e As RunWorkerCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRunWorkerCompleted(System::ComponentModel::RunWorkerCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventArgs -&gt; unit&#xA;override this.OnRunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventArgs -&gt; unit" Usage="backgroundWorker.OnRunWorkerCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.RunWorkerCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e6d36-189">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-189">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6d36-190">Genera l'evento <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-190">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-191">Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato.</span><span class="sxs-lookup"><span data-stu-id="e6d36-191">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="e6d36-192">Per altre informazioni, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).</span><span class="sxs-lookup"><span data-stu-id="e6d36-192">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="e6d36-193">Il metodo <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato.</span><span class="sxs-lookup"><span data-stu-id="e6d36-193">The <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="e6d36-194">È la tecnica consigliata per la gestione dell'evento in una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="e6d36-194">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e6d36-195">
            <para>Quando si esegue l'override <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-195">
              <para>When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> method so that registered delegates receive the event.</para>
            </span>
          </span>
        </block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
      </Docs>
    </Member>
    <Member MemberName="ProgressChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.ProgressChangedEventHandler ProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.ProgressChangedEventHandler ProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ProgressChanged As ProgressChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::ProgressChangedEventHandler ^ ProgressChanged;" />
      <MemberSignature Language="F#" Value="member this.ProgressChanged : System.ComponentModel.ProgressChangedEventHandler " Usage="member this.ProgressChanged : System.ComponentModel.ProgressChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e6d36-196">Si verifica quando viene chiamato il metodo <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-196">Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> is called.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-197">Questo evento viene generato quando si chiama il <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="e6d36-197">This event is raised when you call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method.</span></span>  
  
 <span data-ttu-id="e6d36-198">Per ulteriori informazioni sulla gestione degli eventi, vedere [NIB: utilizzo degli eventi](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span><span class="sxs-lookup"><span data-stu-id="e6d36-198">For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6d36-199">Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> evento per segnalare lo stato di avanzamento di un'operazione asincrona all'utente.</span><span class="sxs-lookup"><span data-stu-id="e6d36-199">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="e6d36-200">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="e6d36-200">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#7)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#7)]
 [!code-vb[System.ComponentModel.BackgroundWorker#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReportProgress">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e6d36-201">Genera l'evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-201">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportProgress (percentProgress As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportProgress(int percentProgress);" />
      <MemberSignature Language="F#" Value="member this.ReportProgress : int -&gt; unit" Usage="backgroundWorker.ReportProgress percentProgress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="percentProgress">
          <span data-ttu-id="e6d36-202">La percentuale di completamento, da 0 a 100, dell'operazione in background.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-202">The percentage, from 0 to 100, of the background operation that is complete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6d36-203">Genera l'evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-203">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-204">Se è necessario il report sullo stato di avanzamento dell'operazione in background, è possibile chiamare il <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> metodo per generare il <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> evento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-204">If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="e6d36-205">Il <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> valore della proprietà deve essere `true`, o <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> genererà un <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-205">The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must be `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="e6d36-206">È responsabilità dell'utente per implementare in modo corretto di misurare lo stato di avanzamento dell'operazione in background come percentuale totale completata dell'attività.</span><span class="sxs-lookup"><span data-stu-id="e6d36-206">It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</span></span>  
  
 <span data-ttu-id="e6d36-207">La chiamata al <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> metodo è asincrono e viene restituito immediatamente.</span><span class="sxs-lookup"><span data-stu-id="e6d36-207">The call to the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method is asynchronous and returns immediately.</span></span> <span data-ttu-id="e6d36-208">Il <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> gestore eventi viene eseguita sul thread che ha creato il <xref:System.ComponentModel.BackgroundWorker>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-208">The <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event handler executes on the thread that created the <xref:System.ComponentModel.BackgroundWorker>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6d36-209">Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> metodo per segnalare lo stato di avanzamento di un'operazione asincrona all'utente.</span><span class="sxs-lookup"><span data-stu-id="e6d36-209">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="e6d36-210">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="e6d36-210">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e6d36-211">La proprietà <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> è impostata su <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-211">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportProgress (percentProgress As Integer, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportProgress(int percentProgress, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.ReportProgress : int * obj -&gt; unit" Usage="backgroundWorker.ReportProgress (percentProgress, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="percentProgress">
          <span data-ttu-id="e6d36-212">La percentuale di completamento, da 0 a 100, dell'operazione in background.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-212">The percentage, from 0 to 100, of the background operation that is complete.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="e6d36-213">L'oggetto di stato passato a <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-213">The state object passed to <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6d36-214">Genera l'evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-214">Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-215">Se è necessario il report sullo stato di avanzamento dell'operazione in background, è possibile chiamare il <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> metodo per generare il <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> evento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-215">If you need the background operation to report on its progress, you can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span> <span data-ttu-id="e6d36-216">Il <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> valore della proprietà deve `true`, o <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> genererà un <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-216">The <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property value must `true`, or <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> will throw an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="e6d36-217">È responsabilità dell'utente per implementare in modo corretto di misurare lo stato di avanzamento dell'operazione in background come percentuale totale completata dell'attività.</span><span class="sxs-lookup"><span data-stu-id="e6d36-217">It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6d36-218">Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> metodo per segnalare lo stato di avanzamento di un'operazione asincrona all'utente.</span><span class="sxs-lookup"><span data-stu-id="e6d36-218">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to report the progress of an asynchronous operation to the user.</span></span> <span data-ttu-id="e6d36-219">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Windows.Forms.ToolStripProgressBar> classe.</span><span class="sxs-lookup"><span data-stu-id="e6d36-219">This code example is part of a larger example provided for the <xref:System.Windows.Forms.ToolStripProgressBar> class.</span></span>  
  
 [!code-csharp[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.ToolStripProgressBar#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e6d36-220">La proprietà <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> è impostata su <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-220">The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> property is set to <see langword="false" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RunWorkerAsync">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e6d36-221">Avvia l'esecuzione di un'operazione in background.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-221">Starts execution of a background operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunWorkerAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunWorkerAsync();" />
      <MemberSignature Language="F#" Value="member this.RunWorkerAsync : unit -&gt; unit" Usage="backgroundWorker.RunWorkerAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e6d36-222">Avvia l'esecuzione di un'operazione in background.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-222">Starts execution of a background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-223">Il <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> metodo invia una richiesta per avviare l'operazione in esecuzione in modo asincrono.</span><span class="sxs-lookup"><span data-stu-id="e6d36-223">The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously.</span></span> <span data-ttu-id="e6d36-224">Quando viene gestita la richiesta, il <xref:System.ComponentModel.BackgroundWorker.DoWork> evento viene generato, che a sua volta avvia l'esecuzione dell'operazione in background.</span><span class="sxs-lookup"><span data-stu-id="e6d36-224">When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.</span></span>  
  
 <span data-ttu-id="e6d36-225">Se l'operazione in background è già in esecuzione, la chiamata <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> nuovamente, verrà generato un <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-225">If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6d36-226">Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> metodo per avviare un'operazione asincrona.</span><span class="sxs-lookup"><span data-stu-id="e6d36-226">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation.</span></span> <span data-ttu-id="e6d36-227">Fa parte di un esempio più esaustivo descritto in [procedura: scaricare un File in Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span><span class="sxs-lookup"><span data-stu-id="e6d36-227">It is part of a larger example described in [How to: Download a File in the Background](~/docs/framework/winforms/controls/how-to-download-a-file-in-the-background.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e6d36-228">
            <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-228">
              <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
      </Docs>
    </Member>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync (object argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync(object argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunWorkerAsync (argument As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunWorkerAsync(System::Object ^ argument);" />
      <MemberSignature Language="F#" Value="member this.RunWorkerAsync : obj -&gt; unit" Usage="backgroundWorker.RunWorkerAsync argument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="argument">
          <span data-ttu-id="e6d36-229">Parametro che deve essere utilizzato dall'operazione in background da eseguire nell'evento <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-229">A parameter for use by the background operation to be executed in the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> event handler.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6d36-230">Avvia l'esecuzione di un'operazione in background.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-230">Starts execution of a background operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-231">Il <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> metodo invia una richiesta per avviare l'operazione in esecuzione in modo asincrono.</span><span class="sxs-lookup"><span data-stu-id="e6d36-231">The <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method submits a request to start the operation running asynchronously.</span></span> <span data-ttu-id="e6d36-232">Quando viene gestita la richiesta, il <xref:System.ComponentModel.BackgroundWorker.DoWork> evento viene generato, che a sua volta avvia l'esecuzione dell'operazione in background.</span><span class="sxs-lookup"><span data-stu-id="e6d36-232">When the request is serviced, the <xref:System.ComponentModel.BackgroundWorker.DoWork> event is raised, which in turn starts execution of your background operation.</span></span>  
  
 <span data-ttu-id="e6d36-233">Se l'operazione richiede un parametro, è possibile fornire come le `argument` parametro <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-233">If your operation requires a parameter, you can provide it as the `argument` parameter to <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>.</span></span>  
  
 <span data-ttu-id="e6d36-234">Se l'operazione in background è già in esecuzione, la chiamata <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> nuovamente, verrà generato un <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="e6d36-234">If the background operation is already running, calling <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> again will raise an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6d36-235">Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> metodo per avviare un'operazione asincrona.</span><span class="sxs-lookup"><span data-stu-id="e6d36-235">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> method to start an asynchronous operation.</span></span> <span data-ttu-id="e6d36-236">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="e6d36-236">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#3)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#3)]
 [!code-vb[System.ComponentModel.BackgroundWorker#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e6d36-237">
            <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-237">
              <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
      </Docs>
    </Member>
    <Member MemberName="RunWorkerCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RunWorkerCompleted As RunWorkerCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::RunWorkerCompletedEventHandler ^ RunWorkerCompleted;" />
      <MemberSignature Language="F#" Value="member this.RunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventHandler " Usage="member this.RunWorkerCompleted : System.ComponentModel.RunWorkerCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.RunWorkerCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e6d36-238">Viene generato quando l'operazione in background è stata annullata o ha generato un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-238">Occurs when the background operation has completed, has been canceled, or has raised an exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-239">Questo evento viene generato quando il <xref:System.ComponentModel.BackgroundWorker.DoWork> restituisce gestore dell'evento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-239">This event is raised when the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler returns.</span></span>  
  
 <span data-ttu-id="e6d36-240">Se l'operazione viene completata correttamente e il risultato viene assegnato il <xref:System.ComponentModel.BackgroundWorker.DoWork> gestore eventi, è possibile accedere al risultato tramite il <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="e6d36-240">If the operation completes successfully and its result is assigned in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler, you can access the result through the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="e6d36-241">Il <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> proprietà di <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indica che è stata generata un'eccezione dall'operazione.</span><span class="sxs-lookup"><span data-stu-id="e6d36-241">The <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indicates that an exception was thrown by the operation.</span></span>  
  
 <span data-ttu-id="e6d36-242">Il <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> proprietà di <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indica se una richiesta di annullamento è stata elaborata dall'operazione in background.</span><span class="sxs-lookup"><span data-stu-id="e6d36-242">The <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> indicates whether a cancellation request was processed by the background operation.</span></span> <span data-ttu-id="e6d36-243">Se il codice nel <xref:System.ComponentModel.BackgroundWorker.DoWork> gestore rileva una richiesta di annullamento controllando il <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> flag e impostando il <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag di <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> a `true`, il <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag di <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> anche verrà impostato su `true`.</span><span class="sxs-lookup"><span data-stu-id="e6d36-243">If your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler detects a cancellation request by checking the <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> flag and setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> flag of <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=nameWithType> to `true`, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> also will be set to `true`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e6d36-244">Tenere presente che il codice nel <xref:System.ComponentModel.BackgroundWorker.DoWork> gestore dell'evento potrebbe terminare il proprio lavoro nel caso di una richiesta di annullamento e il ciclo di polling potrebbe non essere implementato <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> viene impostata su `true`.</span><span class="sxs-lookup"><span data-stu-id="e6d36-244">Be aware that your code in the <xref:System.ComponentModel.BackgroundWorker.DoWork> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> being set to `true`.</span></span> <span data-ttu-id="e6d36-245">In questo caso, il <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag del <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> nel <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> gestore dell'evento non verrà impostato `true`, anche se è stata effettuata una richiesta di annullamento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-245">In this case, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> flag of <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=nameWithType> in your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler will not be set to `true`, even though a cancellation request was made.</span></span> <span data-ttu-id="e6d36-246">Questa situazione viene chiamata un *situazioni di race condition* e costituisce un problema comune nella programmazione multithreading.</span><span class="sxs-lookup"><span data-stu-id="e6d36-246">This situation is called a *race condition* and is a common concern in multithreaded programming.</span></span> <span data-ttu-id="e6d36-247">Per ulteriori informazioni sulla progettazione multithreading problemi, vedere [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span><span class="sxs-lookup"><span data-stu-id="e6d36-247">For more information about multithreading design issues, see [Managed Threading Best Practices](~/docs/standard/threading/managed-threading-best-practices.md).</span></span>  
  
 <span data-ttu-id="e6d36-248">il <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> gestore eventi deve verificare sempre il <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType> e <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType> proprietà prima di accedere il <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="e6d36-248">Your <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event handler should always check the <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=nameWithType> and <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=nameWithType> properties before accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="e6d36-249">Se è stata generata un'eccezione o se è stata annullata l'operazione, l'accesso al <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> proprietà genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="e6d36-249">If an exception was raised or if the operation was canceled, accessing the <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=nameWithType> property raises an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e6d36-250">Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> eventi per gestire il risultato di un'operazione asincrona.</span><span class="sxs-lookup"><span data-stu-id="e6d36-250">The following code example demonstrates the use of the <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> event to handle the result of an asynchronous operation.</span></span> <span data-ttu-id="e6d36-251">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.ComponentModel.BackgroundWorker> classe.</span><span class="sxs-lookup"><span data-stu-id="e6d36-251">This code example is part of a larger example provided for the <xref:System.ComponentModel.BackgroundWorker> class.</span></span>  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#6)]
 [!code-csharp[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#6)]
 [!code-vb[System.ComponentModel.BackgroundWorker#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkerReportsProgress">
      <MemberSignature Language="C#" Value="public bool WorkerReportsProgress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerReportsProgress" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkerReportsProgress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WorkerReportsProgress { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WorkerReportsProgress : bool with get, set" Usage="System.ComponentModel.BackgroundWorker.WorkerReportsProgress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e6d36-252">Ottiene o imposta un valore che indica se la classe <see cref="T:System.ComponentModel.BackgroundWorker" /> è in grado di segnalare gli aggiornamenti dello stato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-252">Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> can report progress updates.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e6d36-253">
            <see langword="true" /> se la classe <see cref="T:System.ComponentModel.BackgroundWorker" /> supporta gli aggiornamenti dello stato; in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-253">
              <see langword="true" /> if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports progress updates; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e6d36-254">Il valore predefinito è <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-254">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-255">Impostare il <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> proprietà da `true` se si desidera che il <xref:System.ComponentModel.BackgroundWorker> per supportare gli aggiornamenti di stato di avanzamento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-255">Set the <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support progress updates.</span></span> <span data-ttu-id="e6d36-256">Quando questa proprietà è `true`, il codice utente può chiamare le <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> metodo per generare il <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> evento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-256">When this property is `true`, user code can call the <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> method to raise the <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> event.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WorkerSupportsCancellation">
      <MemberSignature Language="C#" Value="public bool WorkerSupportsCancellation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerSupportsCancellation" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkerSupportsCancellation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WorkerSupportsCancellation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WorkerSupportsCancellation : bool with get, set" Usage="System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e6d36-257">Ottiene o imposta un valore che indica se la classe <see cref="T:System.ComponentModel.BackgroundWorker" /> supporta l'annullamento asincrono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-257">Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports asynchronous cancellation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e6d36-258">
            <see langword="true" /> se <see cref="T:System.ComponentModel.BackgroundWorker" /> supporta l'annullamento; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-258">
              <see langword="true" /> if the <see cref="T:System.ComponentModel.BackgroundWorker" /> supports cancellation; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e6d36-259">Il valore predefinito è <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6d36-259">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6d36-260">Impostare il <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> proprietà da `true` se si desidera che il <xref:System.ComponentModel.BackgroundWorker> per supportare l'annullamento.</span><span class="sxs-lookup"><span data-stu-id="e6d36-260">Set the <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> property to `true` if you want the <xref:System.ComponentModel.BackgroundWorker> to support cancellation.</span></span> <span data-ttu-id="e6d36-261">Quando questa proprietà è impostata `true`, è possibile chiamare il <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> metodo per interrompere un'operazione in background.</span><span class="sxs-lookup"><span data-stu-id="e6d36-261">When this property is `true`, you can call the <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> method to interrupt a background operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
      </Docs>
    </Member>
  </Members>
</Type>