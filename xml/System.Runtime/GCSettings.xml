<Type Name="GCSettings" FullName="System.Runtime.GCSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0baf797ee3c7130da2de1bdbad1affd3838bdcef" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30488835" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class GCSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit GCSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.GCSettings" />
  <TypeSignature Language="VB.NET" Value="Public Class GCSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class GCSettings abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Specifica le impostazioni di Garbage Collection per il processo corrente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Runtime.GCSettings.IsServerGC%2A> proprietà per determinare se garbage collection per server è abilitata per il processo corrente.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsServerGC">
      <MemberSignature Language="C#" Value="public static bool IsServerGC { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsServerGC" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.GCSettings.IsServerGC" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsServerGC As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsServerGC { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la procedura di Garbage Collection del server è abilitata.</summary>
        <value>
          <see langword="true" /> se la procedura di Garbage Collection del server è attivata; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per informazioni sulla garbage collection per server, vedere la sezione "Workstation e Garbage Collection per Server" in [principi fondamentali di Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md).  
  
 Se garbage collection per server non è abilitato, garbage collection della workstation è attiva (con o senza raccolta simultanea). Garbage collection per server è disponibile solo nei computer multiprocessore.  
  
 Un host non gestito può richiedere garbage collection per server, e la richiesta all'host esegue l'override delle impostazioni del file di configurazione. Se l'host non specifica il tipo di operazione di garbage collection, è possibile utilizzare un file di configurazione per specificare l'operazione di Garbage collection. Questa impostazione è valida solo nel file di configurazione dell'applicazione, non nel file di configurazione del computer (vedere [configurazione delle app](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)). Nell'esempio seguente viene illustrato il contenuto di un file di configurazione dell'applicazione di esempio che consente di garbage collection per server.  
  
```  
<configuration>  
  <runtime>  
    <gcServer enabled="true" />  
  </runtime>  
</configuration>  
```  
  
   
  
## Examples  
 Nell'esempio seguente indica se il computer host utilizza server o alla garbage collection per workstation.  
  
 [!code-csharp[Environment.IsServerGC#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.IsServerGC/CS/isg.cs#1)]
 [!code-vb[Environment.IsServerGC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.IsServerGC/VB/isg.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LargeObjectHeapCompactionMode">
      <MemberSignature Language="C#" Value="public static System.Runtime.GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LargeObjectHeapCompactionMode As GCLargeObjectHeapCompactionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode { System::Runtime::GCLargeObjectHeapCompactionMode get(); void set(System::Runtime::GCLargeObjectHeapCompactionMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLargeObjectHeapCompactionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[Supportato in .NET Framework 4.5.1 e versioni successive]  
  
 Ottiene o imposta un valore che indica se un'operazione completa di Garbage Collection bloccante comprime l'heap degli oggetti grandi (LOH).</summary>
        <value>Uno dei valori di enumerazione che indica se un'operazione completa di Garbage Collection bloccante comprime l'heap degli oggetti grandi (LOH).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'heap oggetti grandi viene utilizzato per l'allocazione della memoria per oggetti di grandi dimensioni (ad esempio matrici) che richiedono più di 85.000 byte. A causa dell'impatto sulle prestazioni di copia di grandi blocchi di memoria, il garbage collector esegue in genere lo sweep dell'heap oggetti grandi, che include la creazione di un elenco delle posizioni di memoria che sono state occupate dagli oggetti inutilizzati e che possono essere riutilizzati per soddisfare le richieste successive per allocazione di memoria per oggetti di grandi dimensioni. Tuttavia, nelle applicazioni in che modo diffuso utilizzare dell'heap oggetti grandi per archiviare gli oggetti temporanei, la frammentazione può inoltre negativamente sulle prestazioni di memoria. In questo caso, è possibile utilizzare il <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> proprietà compattare anziché semplicemente durante lo sweep dell'heap oggetti grandi durante un'operazione di garbage collection.  
  
 Il valore predefinito di <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> proprietà <xref:System.Runtime.GCLargeObjectHeapCompactionMode.Default?displayProperty=nameWithType>, che indica che l'heap oggetti grandi non viene compattato durante le garbage collection. Se si assegna la proprietà di un valore di <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>, comprimere l'heap oggetti grandi durante la successiva completa di garbage collection bloccante e il valore della proprietà viene reimpostato su <xref:System.Runtime.GCLargeObjectHeapCompactionMode.Default?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Le Garbage Collection in background non siano bloccate. Ciò significa che, se si imposta la <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> proprietà <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>qualsiasi dello sfondo di generazione 2 raccolte che si verificano successivamente non comprimere l'heap oggetti grandi. Solo la prima generazione blocco collection 2 comprime l'heap oggetti grandi.  
  
 Dopo il <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A> è impostata su <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>, il successivo completa di garbage collection bloccante e compressione dell'heap oggetti grandi, si verifica in un determinato momento futuro. È possibile compattare immediatamente l'heap oggetti grandi utilizzando codice simile al seguente:  
  
 [!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]
 [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.GCLargeObjectHeapCompactionMode" />
      </Docs>
    </Member>
    <Member MemberName="LatencyMode">
      <MemberSignature Language="C#" Value="public static System.Runtime.GCLatencyMode LatencyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.GCLatencyMode LatencyMode" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.GCSettings.LatencyMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property LatencyMode As GCLatencyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Runtime::GCLatencyMode LatencyMode { System::Runtime::GCLatencyMode get(); void set(System::Runtime::GCLatencyMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.GCLatencyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la modalità di latenza corrente per la procedura di Garbage Collection.</summary>
        <value>Uno dei valori di enumerazione che specifica la modalità di latenza.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile ridurre il livello di impatto del garbage collection nell'applicazione impostando il <xref:System.Runtime.GCLatencyMode> a <xref:System.Runtime.GCLatencyMode.LowLatency> durante le operazioni critiche. Dopo tali operazioni vengono completate, tornare a una modalità di latenza superiore, in modo che più oggetti che possono essere recuperati per aumentare la memoria.  
  
 In genere, si imposta il valore di <xref:System.Runtime.GCSettings.LatencyMode%2A> proprietà per definire la modalità di latenza del garbage collector. Tuttavia, è possibile impostare alcuna modalità di latenza delle aree di GC assegnando il <xref:System.Runtime.GCLatencyMode.NoGCRegion?displayProperty=nameWithType> valore di enumerazione per la <xref:System.Runtime.GCSettings.LatencyMode%2A> proprietà. Chiamare invece il <xref:System.GC.TryStartNoGCRegion%2A?displayProperty=nameWithType> chiamata del metodo per iniziare, nessuna modalità di latenza delle aree di GC ed è il <xref:System.GC.EndNoGCRegion%2A?displayProperty=nameWithType> per terminarla.  
  
 Vedere [modalità di latenza](~/docs/standard/garbage-collection/latency.md) per una discussione su come le impostazioni di configurazione di runtime per l'operazione di garbage collection influiscono sul valore predefinito del <xref:System.Runtime.GCLatencyMode> enumerazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La proprietà <see cref="P:System.Runtime.GCSettings.LatencyMode" /> viene impostata su un valore non valido.  
  
 oppure  
  
 La proprietà <see cref="P:System.Runtime.GCSettings.LatencyMode" /> non può essere impostata su <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">richiede l'attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</permission>
      </Docs>
    </Member>
  </Members>
</Type>