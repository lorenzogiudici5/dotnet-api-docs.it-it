<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ab5da6c93b04875493fea4cbb8aac2d44e9f9060" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36628640" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="d1d4c-101">Verifica la disponibilità di risorse di memoria sufficienti prima di eseguire un'operazione.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d1d4c-101">Checks for sufficient memory resources before executing an operation.</span>
      </span>
      <span data-ttu-id="d1d4c-102">Questa classe non può essere ereditata.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d1d4c-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="d1d4c-103">Questa classe è destinata all'uso nello sviluppo avanzato.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-103">This class is intended for use in advanced development.</span></span>  
  
 <span data-ttu-id="d1d4c-104">Creazione di un'istanza di <xref:System.Runtime.MemoryFailPoint> classe crea un gate di memoria.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-104">Creating an instance of the <xref:System.Runtime.MemoryFailPoint> class creates a memory gate.</span></span> <span data-ttu-id="d1d4c-105">Controlla un gate di memoria per le risorse sufficienti prima di avviare un'attività che richiede una grande quantità di memoria.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-105">A memory gate checks for sufficient resources before initiating an activity that requires a large amount of memory.</span></span> <span data-ttu-id="d1d4c-106">Superato il controllo comporta un <xref:System.InsufficientMemoryException> venga generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-106">Failing the check results in an <xref:System.InsufficientMemoryException> exception being thrown.</span></span> <span data-ttu-id="d1d4c-107">Questa eccezione impedisce un'operazione da in corso l'avvio e riduce la possibilità di errore a causa di mancanza di risorse.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-107">This exception prevents an operation from being started and reduces the possibility of failure due to lack of resources.</span></span> <span data-ttu-id="d1d4c-108">Questo consente ridurre le prestazioni per evitare un <xref:System.OutOfMemoryException> eccezione e qualsiasi stato di errore che può derivare da una gestione errata delle eccezioni in posizioni arbitrari nel codice.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-108">This enables you decrease performance to avoid an <xref:System.OutOfMemoryException> exception and any state corruption that may result from improper handling of the exception in arbitrary locations in your code.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d1d4c-109">Questo tipo implementa la <xref:System.IDisposable> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="d1d4c-110">Dopo aver utilizzato il tipo, è necessario eliminarlo direttamente o indirettamente.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="d1d4c-111">Per eliminare direttamente il tipo, chiamare il relativo <xref:System.IDisposable.Dispose%2A> metodo in un `try` / `catch` blocco.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="d1d4c-112">Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio come ad esempio `using` in C# o `Using` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="d1d4c-113">Per altre informazioni, vedere la sezione "Utilizzo di oggetti che implementano IDisposable" nel <xref:System.IDisposable> argomento relativo all'interfaccia.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="d1d4c-114">Generando un' <xref:System.InsufficientMemoryException> eccezione, un'applicazione può distinguere tra una stima che sarà in grado di completare un'operazione e un'operazione parzialmente completata che ha danneggiato lo stato dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-114">By throwing an <xref:System.InsufficientMemoryException> exception, an application can distinguish between an estimate that an operation will not be able to complete and  a partially completed operation that may have corrupted the application state.</span></span> <span data-ttu-id="d1d4c-115">In questo modo un'applicazione per ridurre la frequenza dei criteri di escalation pessimistica, che possono richiedere lo scaricamento corrente <xref:System.AppDomain> o il riciclo del processo.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-115">This allows an application to reduce the frequency of a pessimistic escalation policy, which may require unloading the current <xref:System.AppDomain> or recycling the process.</span></span>  
  
 <span data-ttu-id="d1d4c-116"><xref:System.Runtime.MemoryFailPoint> verifica se sono disponibili in tutte le operazione di garbage collection heap sufficiente memoria e spazio degli indirizzi virtuali consecutivi e di aumentare le dimensioni del file di scambio.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-116"><xref:System.Runtime.MemoryFailPoint> checks to see whether sufficient memory and consecutive virtual address space are available in all garbage collection heaps, and may increase the size of the swap file.</span></span>  <span data-ttu-id="d1d4c-117"><xref:System.Runtime.MemoryFailPoint> rende alcuna garanzia sulla disponibilità a lungo termine della memoria nel corso della durata del controllo, ma i chiamanti non debba utilizzare sempre il <xref:System.Runtime.MemoryFailPoint.Dispose%2A> metodo per garantire che le risorse associate <xref:System.Runtime.MemoryFailPoint> vengono rilasciati.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-117"><xref:System.Runtime.MemoryFailPoint> makes no guarantees regarding the long-term availability of the memory during the lifetime of the gate, but callers should always use the <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method to ensure that resources associated with <xref:System.Runtime.MemoryFailPoint> are released.</span></span>  
  
 <span data-ttu-id="d1d4c-118">Per utilizzare un gate di memoria, è necessario creare un <xref:System.Runtime.MemoryFailPoint> e specificare il numero di megabyte (MB) di memoria successiva operazione prevista da utilizzare.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-118">To use a memory gate, you must create a <xref:System.Runtime.MemoryFailPoint> object and specify the number of megabytes (MB) of memory that the next operation is expected to use.</span></span> <span data-ttu-id="d1d4c-119">Se non è disponibile, sufficiente memoria un <xref:System.InsufficientMemoryException> generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-119">If enough memory is not available, an <xref:System.InsufficientMemoryException> exception is thrown.</span></span>  
  
 <span data-ttu-id="d1d4c-120">Il parametro del costruttore deve essere un numero intero positivo.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-120">The parameter of the constructor must be a positive integer.</span></span> <span data-ttu-id="d1d4c-121">Un valore negativo genera un <xref:System.ArgumentOutOfRangeException> (eccezione).</span><span class="sxs-lookup"><span data-stu-id="d1d4c-121">A negative value raises an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 <span data-ttu-id="d1d4c-122"><xref:System.Runtime.MemoryFailPoint> funziona con una granularità di 16 MB.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-122"><xref:System.Runtime.MemoryFailPoint> operates at a granularity of 16 MB.</span></span> <span data-ttu-id="d1d4c-123">Tutti i valori inferiori a 16 MB vengono considerati come 16 MB e altri valori vengono considerati come il successivo multiplo più grande di 16 MB.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-123">Any values smaller than 16 MB are treated as 16 MB, and other values are treated as the next largest multiple of 16 MB.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1d4c-124"><xref:System.Runtime.MemoryFailPoint> consente a un'applicazione rallentano in modo da evitare l'esaurimento di memoria in modo che danneggiano.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-124"><xref:System.Runtime.MemoryFailPoint> enables an application to slow itself to avoid running out of memory in a corrupting manner.</span></span>  <span data-ttu-id="d1d4c-125">E deve essere utilizzato all'interno di un ambito lessicale.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-125">It should be used within a lexical scope.</span></span>  <span data-ttu-id="d1d4c-126">Nell'esempio seguente avvia i thread per elaborare gli elementi in una coda di lavoro.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-126">The following example launches threads to process items in a work queue.</span></span>  <span data-ttu-id="d1d4c-127">Prima di ogni thread viene avviato, le risorse di memoria disponibile vengono controllate usando <xref:System.Runtime.MemoryFailPoint>.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-127">Before each thread is launched, the available memory resources are checked using <xref:System.Runtime.MemoryFailPoint>.</span></span>  <span data-ttu-id="d1d4c-128">Se viene generata un'eccezione, il metodo principale resta in attesa fino a quando non è disponibile memoria prima di avviare il thread successivo.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-128">If an exception is thrown, the main method waits until memory is available before launching the next thread.</span></span>  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">
      <span data-ttu-id="d1d4c-129">per chiamare codice non gestito.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d1d4c-129">for calling unmanaged code.</span>
      </span>
      <span data-ttu-id="d1d4c-130">Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d1d4c-130">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
      </span>
      <span data-ttu-id="d1d4c-131">Azione di sicurezza: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span>
      <span class="sxs-lookup">
        <span data-stu-id="d1d4c-131">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></span>
      </span>
    </permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">
          <span data-ttu-id="d1d4c-132">Dimensione della memoria richiesta in megabyte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1d4c-132">The required memory size, in megabytes.</span>
          </span>
          <span data-ttu-id="d1d4c-133">Il valore deve essere positivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1d4c-133">This must be a positive value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d1d4c-134">Inizializza una nuova istanza della classe <see cref="T:System.Runtime.MemoryFailPoint" />, specificando la quantità di memoria richiesta per il completamento dell'esecuzione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1d4c-134">Initializes a new instance of the <see cref="T:System.Runtime.MemoryFailPoint" /> class, specifying the amount of memory required for successful execution.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1d4c-135">La quantità di memoria utilizzata dall'applicazione per elaborare un elemento di lavoro può essere determinata empiricamente.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-135">The amount of memory used by your application to process a work item can be determined empirically.</span></span>  <span data-ttu-id="d1d4c-136">Per stimare la quantità di memoria necessaria per elaborare una richiesta all'applicazione, si consiglia di utilizzare il <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> metodo per determinare la quantità di memoria disponibile prima e dopo la chiamata al metodo che elabora l'elemento di lavoro.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-136">To estimate the amount of memory your application needs to process a request, consider using the <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> method to determine the amount of memory available before and after calling the method that processes the work item.</span></span> <span data-ttu-id="d1d4c-137">Vedere la <xref:System.Runtime.MemoryFailPoint> classe per un esempio di codice che determina dinamicamente il valore per il `sizeInMegabytes` parametro.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-137">See the <xref:System.Runtime.MemoryFailPoint> class for a code example that dynamically determines the value for the `sizeInMegabytes` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d1d4c-138">Nell'esempio seguente viene illustrato come determinare la quantità di memoria di un metodo richiede che durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-138">The following example demonstrates how to determine the amount of memory a method requires when executing.</span></span> <span data-ttu-id="d1d4c-139">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Runtime.MemoryFailPoint> classe.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-139">This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.</span></span>  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="d1d4c-140">La dimensione di memoria specificata è negativa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1d4c-140">The specified memory size is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.InsufficientMemoryException">
          <span data-ttu-id="d1d4c-141">La memoria disponibile è insufficiente per iniziare l'esecuzione del codice protetto dalla verifica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1d4c-141">There is insufficient memory to begin execution of the code protected by the gate.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="d1d4c-142">richiede attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1d4c-142">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="d1d4c-143">L'istanza corrente è un proxy trasparente per un  in un altro dominio applicazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1d4c-143">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d1d4c-144">Rilascia tutte le risorse usate da <see cref="T:System.Runtime.MemoryFailPoint" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1d4c-144">Releases all resources used by the <see cref="T:System.Runtime.MemoryFailPoint" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1d4c-145">Chiamare il metodo <xref:System.Runtime.MemoryFailPoint.Dispose%2A> dopo aver terminato di utilizzare l'oggetto <xref:System.Runtime.MemoryFailPoint>.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-145">Call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> when you are finished using the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="d1d4c-146">Il metodo <xref:System.Runtime.MemoryFailPoint.Dispose%2A> lascia l'oggetto <xref:System.Runtime.MemoryFailPoint> in una condizione di inutilizzabilità.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-146">The <xref:System.Runtime.MemoryFailPoint.Dispose%2A> method leaves the <xref:System.Runtime.MemoryFailPoint> in an unusable state.</span></span> <span data-ttu-id="d1d4c-147">Dopo la chiamata <xref:System.Runtime.MemoryFailPoint>, è necessario rilasciare tutti i riferimenti per il <xref:System.Runtime.MemoryFailPoint> consentire al garbage collector di recuperare la memoria che il <xref:System.Runtime.MemoryFailPoint> occupata.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-147">After calling <xref:System.Runtime.MemoryFailPoint>, you must release all references to the <xref:System.Runtime.MemoryFailPoint> so the garbage collector can reclaim the memory that the <xref:System.Runtime.MemoryFailPoint> was occupying.</span></span> <span data-ttu-id="d1d4c-148">Per altre informazioni, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="d1d4c-148">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d1d4c-149">Chiamare sempre il metodo <xref:System.Runtime.MemoryFailPoint.Dispose%2A> prima di rilasciare l'ultimo riferimento a <xref:System.Runtime.MemoryFailPoint>.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-149">Always call <xref:System.Runtime.MemoryFailPoint.Dispose%2A> before you release your last reference to the <xref:System.Runtime.MemoryFailPoint>.</span></span> <span data-ttu-id="d1d4c-150">In caso contrario, le risorse utilizzate non verranno liberate finché il metodo <xref:System.Runtime.MemoryFailPoint> dell'oggetto `Finalize` non viene richiamato dal Garbage Collector.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-150">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.MemoryFailPoint> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d1d4c-151">Garantisce che le risorse vengano liberate e che vengano eseguite le altre operazioni di pulizia quando l'oggetto <see cref="T:System.Runtime.MemoryFailPoint" /> viene recuperato da Garbage Collector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d1d4c-151">Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <see cref="T:System.Runtime.MemoryFailPoint" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d1d4c-152">Il garbage collector chiama la <xref:System.Runtime.MemoryFailPoint.Finalize%2A> metodo quando l'oggetto corrente è pronto per essere completato.</span><span class="sxs-lookup"><span data-stu-id="d1d4c-152">The garbage collector calls the <xref:System.Runtime.MemoryFailPoint.Finalize%2A> method when the current object is ready to be finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>