<Type Name="MemoryFailPoint" FullName="System.Runtime.MemoryFailPoint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ab5da6c93b04875493fea4cbb8aac2d44e9f9060" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36628640" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MemoryFailPoint extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.MemoryFailPoint" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MemoryFailPoint&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryFailPoint sealed : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type MemoryFailPoint = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Verifica la disponibilità di risorse di memoria sufficienti prima di eseguire un'operazione. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Questa classe è destinata all'uso nello sviluppo avanzato.  
  
 Creazione di un'istanza di <xref:System.Runtime.MemoryFailPoint> classe crea un gate di memoria. Controlla un gate di memoria per le risorse sufficienti prima di avviare un'attività che richiede una grande quantità di memoria. Superato il controllo comporta un <xref:System.InsufficientMemoryException> venga generata un'eccezione. Questa eccezione impedisce un'operazione da in corso l'avvio e riduce la possibilità di errore a causa di mancanza di risorse. Questo consente ridurre le prestazioni per evitare un <xref:System.OutOfMemoryException> eccezione e qualsiasi stato di errore che può derivare da una gestione errata delle eccezioni in posizioni arbitrari nel codice.  
  
> [!IMPORTANT]
>  Questo tipo implementa la <xref:System.IDisposable> interfaccia. Dopo aver utilizzato il tipo, è necessario eliminarlo direttamente o indirettamente. Per eliminare direttamente il tipo, chiamare il relativo <xref:System.IDisposable.Dispose%2A> metodo in un `try` / `catch` blocco. Per eliminarlo indirettamente, utilizzare un costrutto di linguaggio come ad esempio `using` in C# o `Using` in Visual Basic. Per altre informazioni, vedere la sezione "Utilizzo di oggetti che implementano IDisposable" nel <xref:System.IDisposable> argomento relativo all'interfaccia.  
  
 Generando un' <xref:System.InsufficientMemoryException> eccezione, un'applicazione può distinguere tra una stima che sarà in grado di completare un'operazione e un'operazione parzialmente completata che ha danneggiato lo stato dell'applicazione. In questo modo un'applicazione per ridurre la frequenza dei criteri di escalation pessimistica, che possono richiedere lo scaricamento corrente <xref:System.AppDomain> o il riciclo del processo.  
  
 <xref:System.Runtime.MemoryFailPoint> verifica se sono disponibili in tutte le operazione di garbage collection heap sufficiente memoria e spazio degli indirizzi virtuali consecutivi e di aumentare le dimensioni del file di scambio.  <xref:System.Runtime.MemoryFailPoint> rende alcuna garanzia sulla disponibilità a lungo termine della memoria nel corso della durata del controllo, ma i chiamanti non debba utilizzare sempre il <xref:System.Runtime.MemoryFailPoint.Dispose%2A> metodo per garantire che le risorse associate <xref:System.Runtime.MemoryFailPoint> vengono rilasciati.  
  
 Per utilizzare un gate di memoria, è necessario creare un <xref:System.Runtime.MemoryFailPoint> e specificare il numero di megabyte (MB) di memoria successiva operazione prevista da utilizzare. Se non è disponibile, sufficiente memoria un <xref:System.InsufficientMemoryException> generata un'eccezione.  
  
 Il parametro del costruttore deve essere un numero intero positivo. Un valore negativo genera un <xref:System.ArgumentOutOfRangeException> (eccezione).  
  
 <xref:System.Runtime.MemoryFailPoint> funziona con una granularità di 16 MB. Tutti i valori inferiori a 16 MB vengono considerati come 16 MB e altri valori vengono considerati come il successivo multiplo più grande di 16 MB.  
  
   
  
## Examples  
 <xref:System.Runtime.MemoryFailPoint> consente a un'applicazione rallentano in modo da evitare l'esaurimento di memoria in modo che danneggiano.  E deve essere utilizzato all'interno di un ambito lessicale.  Nell'esempio seguente avvia i thread per elaborare gli elementi in una coda di lavoro.  Prima di ogni thread viene avviato, le risorse di memoria disponibile vengono controllate usando <xref:System.Runtime.MemoryFailPoint>.  Se viene generata un'eccezione, il metodo principale resta in attesa fino a quando non è disponibile memoria prima di avviare il thread successivo.  
  
 [!code-csharp[MemoryFailPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">per chiamare codice non gestito. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />. Azione di sicurezza: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryFailPoint (int sizeInMegabytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 sizeInMegabytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sizeInMegabytes As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MemoryFailPoint(int sizeInMegabytes);" />
      <MemberSignature Language="F#" Value="new System.Runtime.MemoryFailPoint : int -&gt; System.Runtime.MemoryFailPoint" Usage="new System.Runtime.MemoryFailPoint sizeInMegabytes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sizeInMegabytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sizeInMegabytes">Dimensione della memoria richiesta in megabyte. Il valore deve essere positivo.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Runtime.MemoryFailPoint" />, specificando la quantità di memoria richiesta per il completamento dell'esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La quantità di memoria utilizzata dall'applicazione per elaborare un elemento di lavoro può essere determinata empiricamente.  Per stimare la quantità di memoria necessaria per elaborare una richiesta all'applicazione, si consiglia di utilizzare il <xref:System.GC.GetTotalMemory%2A?displayProperty=nameWithType> metodo per determinare la quantità di memoria disponibile prima e dopo la chiamata al metodo che elabora l'elemento di lavoro. Vedere la <xref:System.Runtime.MemoryFailPoint> classe per un esempio di codice che determina dinamicamente il valore per il `sizeInMegabytes` parametro.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come determinare la quantità di memoria di un metodo richiede che durante l'esecuzione. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Runtime.MemoryFailPoint> classe.  
  
 [!code-csharp[MemoryFailPoint#2](~/samples/snippets/csharp/VS_Snippets_CLR/MemoryFailPoint/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La dimensione di memoria specificata è negativa.</exception>
        <exception cref="T:System.InsufficientMemoryException">La memoria disponibile è insufficiente per iniziare l'esecuzione del codice protetto dalla verifica.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">richiede attendibilità totale per il chiamante immediato. L'istanza corrente è un proxy trasparente per un  in un altro dominio applicazione.</permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="memoryFailPoint.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate da <see cref="T:System.Runtime.MemoryFailPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il metodo <xref:System.Runtime.MemoryFailPoint.Dispose%2A> dopo aver terminato di utilizzare l'oggetto <xref:System.Runtime.MemoryFailPoint>. Il metodo <xref:System.Runtime.MemoryFailPoint.Dispose%2A> lascia l'oggetto <xref:System.Runtime.MemoryFailPoint> in una condizione di inutilizzabilità. Dopo la chiamata <xref:System.Runtime.MemoryFailPoint>, è necessario rilasciare tutti i riferimenti per il <xref:System.Runtime.MemoryFailPoint> consentire al garbage collector di recuperare la memoria che il <xref:System.Runtime.MemoryFailPoint> occupata. Per altre informazioni, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Chiamare sempre il metodo <xref:System.Runtime.MemoryFailPoint.Dispose%2A> prima di rilasciare l'ultimo riferimento a <xref:System.Runtime.MemoryFailPoint>. In caso contrario, le risorse utilizzate non verranno liberate finché il metodo <xref:System.Runtime.MemoryFailPoint> dell'oggetto `Finalize` non viene richiamato dal Garbage Collector.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MemoryFailPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.MemoryFailPoint.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MemoryFailPoint ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="memoryFailPoint.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Garantisce che le risorse vengano liberate e che vengano eseguite le altre operazioni di pulizia quando l'oggetto <see cref="T:System.Runtime.MemoryFailPoint" /> viene recuperato da Garbage Collector.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il garbage collector chiama la <xref:System.Runtime.MemoryFailPoint.Finalize%2A> metodo quando l'oggetto corrente è pronto per essere completato.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
  </Members>
</Type>