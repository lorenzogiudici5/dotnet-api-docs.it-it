<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACRIPEMD160&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACRIPEMD160 : System::Security::Cryptography::HMAC" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d028e-101">Consente di calcolare un codice HMAC (Hash-based Message Authentication Code) utilizzando la funzione hash <see cref="T:System.Security.Cryptography.RIPEMD160" />.</span><span class="sxs-lookup"><span data-stu-id="d028e-101">Computes a Hash-based Message Authentication Code (HMAC) by using the <see cref="T:System.Security.Cryptography.RIPEMD160" /> hash function.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d028e-102"><xref:System.Security.Cryptography.HMACRIPEMD160> è un tipo di algoritmo hash con chiave costruito dalla funzione hash RIPEMD-160 e utilizzato come un codice HMAC (Hash-based messaggio Authentication Code).</span><span class="sxs-lookup"><span data-stu-id="d028e-102"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="d028e-103">Nel processo HMAC combina una chiave privata con i dati del messaggio, il risultato con la funzione hash, viene nuovamente combinato il valore hash con chiave privata e quindi applica una seconda volta la funzione hash.</span><span class="sxs-lookup"><span data-stu-id="d028e-103">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="d028e-104">L'output hash è di lunghezza pari a 160 bit.</span><span class="sxs-lookup"><span data-stu-id="d028e-104">The output hash is 160 bits in length.</span></span>  
  
 <span data-ttu-id="d028e-105">Un codice HMAC consente di determinare se un messaggio inviato tramite un canale non protetto è stato alterato, a condizione che il mittente e ricevitore condividono una chiave segreta.</span><span class="sxs-lookup"><span data-stu-id="d028e-105">An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.</span></span> <span data-ttu-id="d028e-106">Il mittente calcola il valore hash per i dati originali e invia i dati originali e il valore hash in un singolo messaggio.</span><span class="sxs-lookup"><span data-stu-id="d028e-106">The sender computes the hash value for the original data and sends both the original data and the hash value as a single message.</span></span> <span data-ttu-id="d028e-107">Il destinatario ricalcola il valore hash del messaggio ricevuto e verifica che il codice HMAC calcolato corrisponda a quello trasmesso.</span><span class="sxs-lookup"><span data-stu-id="d028e-107">The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.</span></span>  
  
 <span data-ttu-id="d028e-108">Qualsiasi modifica ai dati o il valore hash comporta una mancata corrispondenza, perché è necessario conoscere la chiave privata per modificare il messaggio e riprodurre il valore hash corretto.</span><span class="sxs-lookup"><span data-stu-id="d028e-108">Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.</span></span> <span data-ttu-id="d028e-109">Pertanto, se i valori hash originale e calcolato corrispondono, il messaggio viene autenticato.</span><span class="sxs-lookup"><span data-stu-id="d028e-109">Therefore, if the original and computed hash values match, the message is authenticated.</span></span>  
  
 <span data-ttu-id="d028e-110"><xref:System.Security.Cryptography.HMACRIPEMD160> accetta chiavi di qualsiasi dimensione e produce una sequenza di hash che è di 160 bit.</span><span class="sxs-lookup"><span data-stu-id="d028e-110"><xref:System.Security.Cryptography.HMACRIPEMD160> accepts keys of any size, and produces a hash sequence that is 160 bits long.</span></span>  
  
 <span data-ttu-id="d028e-111">L'algoritmo hash RIPEMD e dai suoi successori sono stati sviluppati dal progetto europeo prodotto.</span><span class="sxs-lookup"><span data-stu-id="d028e-111">The RIPEMD hash algorithm and its successors were developed by the European RIPE project.</span></span> <span data-ttu-id="d028e-112">L'algoritmo RIPEMD originale è stato progettato per sostituire MD4 e MD5 e versioni successive è stato rafforzato e rinominato RIPEMD-160.</span><span class="sxs-lookup"><span data-stu-id="d028e-112">The original RIPEMD algorithm was designed to replace MD4 and MD5 and was later strengthened and renamed RIPEMD-160.</span></span> <span data-ttu-id="d028e-113">L'algoritmo hash RIPEMD-160 produce un valore hash a 160 bit.</span><span class="sxs-lookup"><span data-stu-id="d028e-113">The RIPEMD-160 hash algorithm produces a 160-bit hash value.</span></span> <span data-ttu-id="d028e-114">Finestre di progettazione dell'algoritmo hanno inserito nel dominio pubblico.</span><span class="sxs-lookup"><span data-stu-id="d028e-114">The algorithm's designers have placed it in the public domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d028e-115">Nell'esempio seguente viene illustrato come firmare un file usando il <xref:System.Security.Cryptography.HMACRIPEMD160> oggetto e come verificare che il file.</span><span class="sxs-lookup"><span data-stu-id="d028e-115">The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACRIPEMD160> object and then how to verify the file.</span></span>  
  
 [!code-cpp[HMACRIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d028e-116">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />.</span><span class="sxs-lookup"><span data-stu-id="d028e-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d028e-117">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> con una chiave a 64 byte generata in modo casuale.</span><span class="sxs-lookup"><span data-stu-id="d028e-117">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with a randomly generated 64-byte key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d028e-118"><xref:System.Security.Cryptography.HMACRIPEMD160> è un tipo di algoritmo hash con chiave costruito dalla funzione hash RIPEMD-160 e utilizzato come un codice HMAC (Hash-based messaggio Authentication Code).</span><span class="sxs-lookup"><span data-stu-id="d028e-118"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="d028e-119">Nel processo HMAC combina una chiave privata con i dati del messaggio, il risultato con la funzione hash, viene nuovamente combinato il valore hash con chiave privata e quindi applica una seconda volta la funzione hash.</span><span class="sxs-lookup"><span data-stu-id="d028e-119">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="d028e-120">L'hash di output è 160 byte di lunghezza.</span><span class="sxs-lookup"><span data-stu-id="d028e-120">The output hash is 160 bytes in length.</span></span>  
  
 <span data-ttu-id="d028e-121">Questo costruttore utilizza una chiave generata in modo casuale a 64 byte.</span><span class="sxs-lookup"><span data-stu-id="d028e-121">This constructor uses a 64-byte, randomly generated key.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="d028e-122">Chiave privata per la crittografia <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />.</span><span class="sxs-lookup"><span data-stu-id="d028e-122">The secret key for <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> encryption.</span></span> <span data-ttu-id="d028e-123">La chiave può avere qualsiasi lunghezza, ma se supera i 64 byte viene generato per essa un hash (con SHA-1) per derivare una chiave a 64 byte.</span><span class="sxs-lookup"><span data-stu-id="d028e-123">The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.</span></span> <span data-ttu-id="d028e-124">Pertanto, la dimensione consigliata per la chiave segreta è 64 byte.</span><span class="sxs-lookup"><span data-stu-id="d028e-124">Therefore, the recommended size of the secret key is 64 bytes.</span></span></param>
        <summary><span data-ttu-id="d028e-125">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> con i dati della chiave specificata.</span><span class="sxs-lookup"><span data-stu-id="d028e-125">Initializes a new instance of the <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> class with the specified key data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d028e-126"><xref:System.Security.Cryptography.HMACRIPEMD160> è un tipo di algoritmo hash con chiave costruito dalla funzione hash RIPEMD-160 e utilizzato come un codice HMAC (Hash-based messaggio Authentication Code).</span><span class="sxs-lookup"><span data-stu-id="d028e-126"><xref:System.Security.Cryptography.HMACRIPEMD160> is a type of keyed hash algorithm that is constructed from the RIPEMD-160 hash function and used as a Hash-based Message Authentication Code (HMAC).</span></span> <span data-ttu-id="d028e-127">Nel processo HMAC combina una chiave privata con i dati del messaggio, il risultato con la funzione hash, viene nuovamente combinato il valore hash con chiave privata e quindi applica una seconda volta la funzione hash.</span><span class="sxs-lookup"><span data-stu-id="d028e-127">The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.</span></span> <span data-ttu-id="d028e-128">L'hash di output è 160 byte di lunghezza.</span><span class="sxs-lookup"><span data-stu-id="d028e-128">The output hash is 160 bytes in length.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d028e-129">Per un esempio di come utilizzare questo costruttore, vedere la <xref:System.Security.Cryptography.HMACRIPEMD160> classe.</span><span class="sxs-lookup"><span data-stu-id="d028e-129">For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d028e-130">Il valore del parametro <paramref name="key" /> è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="d028e-130">The <paramref name="key" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>