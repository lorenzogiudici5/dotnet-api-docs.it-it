<Type Name="HMACRIPEMD160" FullName="System.Security.Cryptography.HMACRIPEMD160">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8dbae615f73b276d9a73b731a30e0587151fc9c1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30495585" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HMACRIPEMD160 : System.Security.Cryptography.HMAC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMACRIPEMD160 extends System.Security.Cryptography.HMAC" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.HMACRIPEMD160" />
  <TypeSignature Language="VB.NET" Value="Public Class HMACRIPEMD160&#xA;Inherits HMAC" />
  <TypeSignature Language="C++ CLI" Value="public ref class HMACRIPEMD160 : System::Security::Cryptography::HMAC" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.HMAC</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Consente di calcolare un codice HMAC (Hash-based Message Authentication Code) utilizzando la funzione hash <see cref="T:System.Security.Cryptography.RIPEMD160" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.HMACRIPEMD160> è un tipo di algoritmo hash con chiave costruito dalla funzione hash RIPEMD-160 e utilizzato come un codice HMAC (Hash-based messaggio Authentication Code). Nel processo HMAC combina una chiave privata con i dati del messaggio, il risultato con la funzione hash, viene nuovamente combinato il valore hash con chiave privata e quindi applica una seconda volta la funzione hash. L'output hash è di lunghezza pari a 160 bit.  
  
 Un codice HMAC consente di determinare se un messaggio inviato tramite un canale non protetto è stato alterato, a condizione che il mittente e ricevitore condividono una chiave segreta. Il mittente calcola il valore hash per i dati originali e invia i dati originali e il valore hash in un singolo messaggio. Il destinatario ricalcola il valore hash del messaggio ricevuto e verifica che il codice HMAC calcolato corrisponda a quello trasmesso.  
  
 Qualsiasi modifica ai dati o il valore hash comporta una mancata corrispondenza, perché è necessario conoscere la chiave privata per modificare il messaggio e riprodurre il valore hash corretto. Pertanto, se i valori hash originale e calcolato corrispondono, il messaggio viene autenticato.  
  
 <xref:System.Security.Cryptography.HMACRIPEMD160> accetta chiavi di qualsiasi dimensione e produce una sequenza di hash che è di 160 bit.  
  
 L'algoritmo hash RIPEMD e dai suoi successori sono stati sviluppati dal progetto europeo prodotto. L'algoritmo RIPEMD originale è stato progettato per sostituire MD4 e MD5 e versioni successive è stato rafforzato e rinominato RIPEMD-160. L'algoritmo hash RIPEMD-160 produce un valore hash a 160 bit. Finestre di progettazione dell'algoritmo hanno inserito nel dominio pubblico.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come firmare un file usando il <xref:System.Security.Cryptography.HMACRIPEMD160> oggetto e come verificare che il file.  
  
 [!code-cpp[HMACRIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACRIPEMD160/CPP/hmacripemd160.cpp#1)]
 [!code-csharp[HMACRIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACRIPEMD160/CS/hmacripemd160.cs#1)]
 [!code-vb[HMACRIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACRIPEMD160/vb/hmacripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> con una chiave a 64 byte generata in modo casuale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.HMACRIPEMD160> è un tipo di algoritmo hash con chiave costruito dalla funzione hash RIPEMD-160 e utilizzato come un codice HMAC (Hash-based messaggio Authentication Code). Nel processo HMAC combina una chiave privata con i dati del messaggio, il risultato con la funzione hash, viene nuovamente combinato il valore hash con chiave privata e quindi applica una seconda volta la funzione hash. L'hash di output è 160 byte di lunghezza.  
  
 Questo costruttore utilizza una chiave generata in modo casuale a 64 byte.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMACRIPEMD160 (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HMACRIPEMD160(cli::array &lt;System::Byte&gt; ^ key);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key">Chiave privata per la crittografia <see cref="T:System.Security.Cryptography.HMACRIPEMD160" />. La chiave può avere qualsiasi lunghezza, ma se supera i 64 byte viene generato per essa un hash (con SHA-1) per derivare una chiave a 64 byte. Pertanto, la dimensione consigliata per la chiave segreta è 64 byte.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACRIPEMD160" /> con i dati della chiave specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Cryptography.HMACRIPEMD160> è un tipo di algoritmo hash con chiave costruito dalla funzione hash RIPEMD-160 e utilizzato come un codice HMAC (Hash-based messaggio Authentication Code). Nel processo HMAC combina una chiave privata con i dati del messaggio, il risultato con la funzione hash, viene nuovamente combinato il valore hash con chiave privata e quindi applica una seconda volta la funzione hash. L'hash di output è 160 byte di lunghezza.  
  
   
  
## Examples  
 Per un esempio di come utilizzare questo costruttore, vedere la <xref:System.Security.Cryptography.HMACRIPEMD160> classe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="key" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>