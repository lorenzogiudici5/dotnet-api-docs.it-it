<Type Name="ECDiffieHellmanCng" FullName="System.Security.Cryptography.ECDiffieHellmanCng">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="286bf918255ea8d29ba319f459e569551d533740" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30500955" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ECDiffieHellmanCng : System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ECDiffieHellmanCng extends System.Security.Cryptography.ECDiffieHellman" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDiffieHellmanCng" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ECDiffieHellmanCng&#xA;Inherits ECDiffieHellman" />
  <TypeSignature Language="C++ CLI" Value="public ref class ECDiffieHellmanCng sealed : System::Security::Cryptography::ECDiffieHellman" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.ECDiffieHellman</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="c1c08-101">Fornisce un'implementazione CNG (Cryptography Next Generation) dell'algoritmo ECDH (Diffie-Hellman a curva ellittica).</span>
      <span class="sxs-lookup">
        <span data-stu-id="c1c08-101">Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.</span>
      </span>
      <span data-ttu-id="c1c08-102">Questa classe viene utilizzata per eseguire operazioni di crittografia.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c1c08-102">This class is used to perform cryptographic operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-103">La <xref:System.Security.Cryptography.ECDiffieHellmanCng> classe consente a due parti per lo scambio di chiave privata anche se stanno comunicando tramite un canale pubblico.</span><span class="sxs-lookup"><span data-stu-id="c1c08-103">The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class enables two parties to exchange private key material even if they are communicating through a public channel.</span></span>  <span data-ttu-id="c1c08-104">Entrambe le parti è possono calcolare lo stesso valore segreto, che viene considerato il *privata* nelle classi Diffie-Hellman gestite.</span><span class="sxs-lookup"><span data-stu-id="c1c08-104">Both parties can calculate the same secret value, which is referred to as the *secret agreement* in the managed Diffie-Hellman classes.</span></span> <span data-ttu-id="c1c08-105">La chiave privata può essere utilizzata quindi per diversi scopi, tra cui come una chiave simmetrica.</span><span class="sxs-lookup"><span data-stu-id="c1c08-105">The secret agreement can then be used for a variety of purposes, including as a symmetric key.</span></span> <span data-ttu-id="c1c08-106">Tuttavia, anziché esporre direttamente, la chiave privata di <xref:System.Security.Cryptography.ECDiffieHellmanCng> classe esegue alcune operazioni di post-elaborazione nel contratto prima di fornire il valore.</span><span class="sxs-lookup"><span data-stu-id="c1c08-106">However, instead of exposing the secret agreement directly, the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class does some post-processing on the agreement before providing the value.</span></span> <span data-ttu-id="c1c08-107">Questo post-elaborazione viene definita il *chiave funzione derivazione ()*; è possibile selezionare quali utilizzo che si desidera utilizzare e impostare i parametri tramite un set di proprietà per l'istanza dell'oggetto Diffie-Hellman.</span><span class="sxs-lookup"><span data-stu-id="c1c08-107">This post processing is referred to as the *key derivation function (KDF)*; you can select which KDF you want to use and set its parameters through a set of properties on the instance of the Diffie-Hellman object.</span></span>  
  
|<span data-ttu-id="c1c08-108">Funzione di derivazione della chiave</span><span class="sxs-lookup"><span data-stu-id="c1c08-108">Key derivation function</span></span>|<span data-ttu-id="c1c08-109">Proprietà</span><span class="sxs-lookup"><span data-stu-id="c1c08-109">Properties</span></span>|  
|-----------------------------|----------------|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>|<span data-ttu-id="c1c08-110"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> -L'algoritmo hash utilizzato per elaborare la chiave privata.</span><span class="sxs-lookup"><span data-stu-id="c1c08-110"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.</span></span><br /><br /> <span data-ttu-id="c1c08-111"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> -Una matrice di byte facoltativa da anteporre alla chiave privata prima di hashing.</span><span class="sxs-lookup"><span data-stu-id="c1c08-111"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A> - An optional byte array to prepend to the secret agreement before hashing it.</span></span><br /><br /> <span data-ttu-id="c1c08-112"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> -Una matrice di byte facoltativa da aggiungere alla chiave privata prima di hashing.</span><span class="sxs-lookup"><span data-stu-id="c1c08-112"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.</span></span>|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>|<span data-ttu-id="c1c08-113"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> -L'algoritmo hash utilizzato per elaborare la chiave privata.</span><span class="sxs-lookup"><span data-stu-id="c1c08-113"><xref:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm%2A> - The hash algorithm that is used to process the secret agreement.</span></span><br /><br /> <span data-ttu-id="c1c08-114"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>-Una matrice di byte facoltativa da anteporre alla chiave privata prima di hashing.</span><span class="sxs-lookup"><span data-stu-id="c1c08-114"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend%2A>- An optional byte array to prepend to the secret agreement before hashing it.</span></span><br /><br /> <span data-ttu-id="c1c08-115"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> -Una matrice di byte facoltativa da aggiungere alla chiave privata prima di hashing.</span><span class="sxs-lookup"><span data-stu-id="c1c08-115"><xref:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend%2A> - An optional byte array to append to the secret agreement before hashing it.</span></span>|  
|<xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>|<span data-ttu-id="c1c08-116"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> -L'etichetta per la derivazione della chiave.</span><span class="sxs-lookup"><span data-stu-id="c1c08-116"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Label%2A> - The label for key derivation.</span></span><br /><br /> <span data-ttu-id="c1c08-117"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> -Il valore di inizializzazione per la derivazione della chiave.</span><span class="sxs-lookup"><span data-stu-id="c1c08-117"><xref:System.Security.Cryptography.ECDiffieHellmanCng.Seed%2A> - The seed for key derivation.</span></span>|  
  
 <span data-ttu-id="c1c08-118">Il risultato di passare la chiave privata tramite la funzione di derivazione della chiave è una matrice di byte che può essere utilizzata come chiavi per l'applicazione.</span><span class="sxs-lookup"><span data-stu-id="c1c08-118">The result of passing the secret agreement through the key derivation function is a byte array that may be used as key material for your application.</span></span> <span data-ttu-id="c1c08-119">Il numero di byte di materiale della chiave generato dipende la funzione di derivazione della chiave. ad esempio, SHA-256 genererà 256 bit materiale della chiave, mentre SHA-512 genererà 512 bit materiale della chiave. Il flusso di base di scambio di chiave ECDH è come segue:</span><span class="sxs-lookup"><span data-stu-id="c1c08-119">The number of bytes of key material generated is dependent on the key derivation function; for example, SHA-256 will generate 256 bits of key material, whereas SHA-512 will generate 512 bits of key material.The basic flow of an ECDH key exchange is as follows:</span></span>  
  
1.  <span data-ttu-id="c1c08-120">Alice e Bob creano una coppia di chiavi da utilizzare per l'operazione di scambio di chiave Diffie-Hellman</span><span class="sxs-lookup"><span data-stu-id="c1c08-120">Alice and Bob create a key pair to use for the Diffie-Hellman key exchange operation</span></span>  
  
2.  <span data-ttu-id="c1c08-121">Alice e Bob configurare l'utilizzo in parametri concordano.</span><span class="sxs-lookup"><span data-stu-id="c1c08-121">Alice and Bob configure the KDF using parameters the agree on.</span></span>  
  
3.  <span data-ttu-id="c1c08-122">Alice invia a Bob la chiave pubblica.</span><span class="sxs-lookup"><span data-stu-id="c1c08-122">Alice sends Bob her public key.</span></span>  
  
4.  <span data-ttu-id="c1c08-123">Bob invia ad Alice la chiave pubblica.</span><span class="sxs-lookup"><span data-stu-id="c1c08-123">Bob sends Alice his public key.</span></span>  
  
5.  <span data-ttu-id="c1c08-124">Alice e Bob utilizzare le rispettive chiavi pubbliche per generare la chiave privata e applicare l'utilizzo per la chiave privata per generare il materiale della chiave.</span><span class="sxs-lookup"><span data-stu-id="c1c08-124">Alice and Bob use each other's public keys to generate the secret agreement, and apply the KDF to the secret agreement to generate key material.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c1c08-125">Nell'esempio seguente viene illustrato come utilizzare la <xref:System.Security.Cryptography.ECDiffieHellmanCng> classe per stabilire uno scambio di chiavi e su come utilizzare la chiave per crittografare un messaggio che può essere inviato tramite un canale pubblico e può essere decrittografato dal destinatario.</span><span class="sxs-lookup"><span data-stu-id="c1c08-125">The following example shows how to use the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class to establish a key exchange and how to use that key to encrypt a message that can be sent over a public channel and decrypted by the receiver.</span></span>  
  
 [!code-csharp[ECDiffieHellmanCng#1](~/samples/snippets/csharp/VS_Snippets_CLR/ecdiffiehellmancng/cs/program.cs#1)]
 [!code-vb[ECDiffieHellmanCng#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ecdiffiehellmancng/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-126">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-126">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-127">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> con una coppia di chiavi casuale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-127">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-128">La coppia di chiavi casuale ha una lunghezza di chiave pubblica predefinito di 521 bit.</span><span class="sxs-lookup"><span data-stu-id="c1c08-128">The random key pair has a default public key length of 521 bits.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (int keySize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 keySize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keySize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(int keySize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keySize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="keySize">
          <span data-ttu-id="c1c08-129">Dimensione della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-129">The size of the key.</span>
          </span>
          <span data-ttu-id="c1c08-130">Le dimensioni della chiave valide sono 256, 384 e 521 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-130">Valid key sizes are 256, 384, and 521 bits.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-131">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> con una coppia di chiavi generata in modo casuale, usando le dimensioni specificate per la chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-131">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair, using the specified key size.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-132">La coppia di chiavi casuale avrà lunghezza della chiave pubblica definita per il `keySize` parametro.</span><span class="sxs-lookup"><span data-stu-id="c1c08-132">The random key pair will have the public key length defined by the `keySize` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c1c08-133">
            <paramref name="keySize" /> specifica una lunghezza non valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-133">
              <paramref name="keySize" /> specifies an invalid length.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="c1c08-134">Le classi CNG (Cryptography Next Generation) non sono supportate in questo sistema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-134">Cryptography Next Generation (CNG) classes are not supported on this system.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (System.Security.Cryptography.CngKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.CngKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As CngKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(System::Security::Cryptography::CngKey ^ key);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="key" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="c1c08-135">Chiave che verrà usata come input per le operazioni di crittografia eseguite dall'oggetto corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-135">The key that will be used as input to the cryptographic operations performed by the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-136">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> usando l'oggetto <see cref="T:System.Security.Cryptography.CngKey" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c1c08-137">
            <paramref name="key" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-137">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c1c08-138">
            <paramref name="key" /> non specifica un gruppo di algoritmi ECDH (Diffie-Hellman a curva ellittica).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-138">
              <paramref name="key" /> does not specify an Elliptic Curve Diffie-Hellman (ECDH) algorithm group.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="c1c08-139">Le classi CNG (Cryptography Next Generation) non sono supportate in questo sistema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-139">Cryptography Next Generation (CNG) classes are not supported on this system.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ECDiffieHellmanCng (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ECDiffieHellmanCng(System::Security::Cryptography::ECCurve curve);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve">
          <span data-ttu-id="c1c08-140">Curva usata per generare la coppia di chiavi pubblica/privata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-140">The curve used to generate the public/private key pair.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-141">Crea una nuova istanza della classe <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> la cui coppia di chiavi pubblica/privata viene generata per la curva specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-141">Creates a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class whose public/private key pair is generated over the specified curve.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-142">`curve` deve convalidare (ovvero, deve restituire `true`) quando viene passato per il <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> (metodo) e deve essere un primo denominato o esplicito.</span><span class="sxs-lookup"><span data-stu-id="c1c08-142">`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method and must be either a named or explicit prime.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="c1c08-143">
            <paramref name="curve" /> non viene convalidato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-143">
              <paramref name="curve" /> does not validate.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHash">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-144">Deriva i byte da usare come chiave mediante una funzione hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-144">Derives bytes that can be used as a key using a hash function .</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHash">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHash(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHash (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHash(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="c1c08-145">Chiave pubblica dell'altra parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-145">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="c1c08-146">Algoritmo hash da usare per derivare il materiale della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-146">The hash algorithm  to use to derive the key material.</span>
          </span>
        </param>
        <param name="secretPrepend">
          <span data-ttu-id="c1c08-147">Valore da anteporre al segreto derivato prima dell'hashing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-147">A value to prepend to the derived secret before hashing.</span>
          </span>
        </param>
        <param name="secretAppend">
          <span data-ttu-id="c1c08-148">Valore da aggiungere al segreto derivato prima dell'hashing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-148">A value to append to the derived secret before hashing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-149">Deriva byte da usare come chiave mediante una funzione hash, dati la chiave pubblica dell'altra parte, il nome dell'algoritmo hash, un valore anteposto e un valore di accodamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-149">Derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1c08-150">Materiale della chiave dallo scambio di chiave con la chiave pubblica dell'altra parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-150">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-151">Se il valore di `secretPrepend` o `secretAppend` è `null`, vengono considerate come matrici vuote.</span><span class="sxs-lookup"><span data-stu-id="c1c08-151">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c1c08-152">
            <paramref name="otherPartyPublicKey" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-152">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c1c08-153">
            <paramref name="otherPartyPublicKey" /> non è una chiave ECDH oppure non ha le dimensioni corrette.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-153">
              <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          </span>
          <span data-ttu-id="c1c08-154">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-154">-or-</span>
          </span>
          <span data-ttu-id="c1c08-155">
            <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-155">
              <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          </span>
          <span data-ttu-id="c1c08-156">è <see langword="null" /> o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-156">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="c1c08-157">Tutti gli altri errori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-157">All other errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyFromHmac">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-158">Deriva i byte da usare come chiave mediante un codice HMAC (Hash-based Message Authentication Code).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-158">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyFromHmac">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyFromHmac(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, unsigned int8[] hmacKey, unsigned int8[] secretPrepend, unsigned int8[] secretAppend) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyFromHmac (otherPartyPublicKey As ECDiffieHellmanPublicKey, hashAlgorithm As HashAlgorithmName, hmacKey As Byte(), secretPrepend As Byte(), secretAppend As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyFromHmac(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, cli::array &lt;System::Byte&gt; ^ hmacKey, cli::array &lt;System::Byte&gt; ^ secretPrepend, cli::array &lt;System::Byte&gt; ^ secretAppend);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="hmacKey" Type="System.Byte[]" />
        <Parameter Name="secretPrepend" Type="System.Byte[]" />
        <Parameter Name="secretAppend" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="c1c08-159">Chiave pubblica dell'altra parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-159">The other party's public key.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="c1c08-160">Algoritmo hash da usare per derivare il materiale della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-160">The hash algorithm to use to derive the key material.</span>
          </span>
        </param>
        <param name="hmacKey">
          <span data-ttu-id="c1c08-161">Chiave del valore HMAC.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-161">The key for the HMAC.</span>
          </span>
        </param>
        <param name="secretPrepend">
          <span data-ttu-id="c1c08-162">Valore da anteporre al segreto derivato prima dell'hashing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-162">A value to prepend to the derived secret before hashing.</span>
          </span>
        </param>
        <param name="secretAppend">
          <span data-ttu-id="c1c08-163">Valore da aggiungere al segreto derivato prima dell'hashing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-163">A value to append to the derived secret before hashing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-164">Deriva i byte da usare come chiave mediante un codice HMAC (Hash-based Message Authentication Code).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-164">Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1c08-165">Materiale della chiave dallo scambio di chiave con la chiave pubblica dell'altra parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-165">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-166">Se il valore di `secretPrepend` o `secretAppend` è `null`, vengono considerate come matrici vuote.</span><span class="sxs-lookup"><span data-stu-id="c1c08-166">If the value of `secretPrepend` or `secretAppend` is `null`, they are treated as empty arrays.</span></span> <span data-ttu-id="c1c08-167">Se il valore di `hmacKey` è `null`, il risultato dell'algoritmo di Diffie-Hellman a curva ellittica (ECDH) verrà utilizzato come chiave HMAC.</span><span class="sxs-lookup"><span data-stu-id="c1c08-167">If the value of `hmacKey` is `null`, the result of the Elliptic Curve Diffie-Hellman (ECDH) algorithm will be used as the HMAC key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c1c08-168">
            <paramref name="otherPartyPublicKey" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-168">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c1c08-169">
            <paramref name="otherPartyPublicKey" /> non è una chiave ECDH oppure non ha le dimensioni corrette.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-169">
              <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          </span>
          <span data-ttu-id="c1c08-170">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-170">-or-</span>
          </span>
          <span data-ttu-id="c1c08-171">
            <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-171">
              <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          </span>
          <span data-ttu-id="c1c08-172">è <see langword="null" /> o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-172">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="c1c08-173">Tutti gli altri errori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-173">All other errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveKeyMaterial">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-174">Deriva il materiale della chiave generato dalla chiave privata tra due parti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-174">Derives the key material that is generated from the secret agreement between two parties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-175">L'algoritmo di Diffie-Hellman a curva ellittica (ECDH) accetta la chiave privata e una chiave pubblica dell'entità come input e produce la chiave privata come output.</span><span class="sxs-lookup"><span data-stu-id="c1c08-175">The Elliptic Curve Diffie-Hellman (ECDH) algorithm accepts the private key and the other party’s public key as input, and produces the secret agreement as output.</span></span> <span data-ttu-id="c1c08-176">La derivazione della chiave della funzione quindi accetta la chiave privata e produce il materiale della chiave come output.</span><span class="sxs-lookup"><span data-stu-id="c1c08-176">The key derivation function (KDF) then takes the secret agreement and produces the key material as output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public byte[] DeriveKeyMaterial (System.Security.Cryptography.CngKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.CngKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveKeyMaterial (otherPartyPublicKey As CngKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::CngKey ^ otherPartyPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="c1c08-177">Oggetto contenente la parte pubblica della chiave ECDH (Diffie-Hellman a curva ellittica) della seconda parte nello scambio di chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-177">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-178">Deriva il materiale della chiave generato dalla chiave privata tra due parti, dato un oggetto <see cref="T:System.Security.Cryptography.CngKey" /> contenente la chiave pubblica della seconda parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-178">Derives the key material that is generated from the secret agreement between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1c08-179">Matrice di byte contenente il materiale della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-179">A byte array that contains the key material.</span>
          </span>
          <span data-ttu-id="c1c08-180">Queste informazioni vengono generate dalla chiave privata calcolata sulla base della chiave privata dell'oggetto corrente e della chiave pubblica specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-180">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c1c08-181">
            <paramref name="otherPartyPublicKey" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-181">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c1c08-182">
            <paramref name="otherPartyPublicKey" /> non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-182">
              <paramref name="otherPartyPublicKey" /> is invalid.</span>
          </span>
          <span data-ttu-id="c1c08-183">La proprietà <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> non specifica <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> oppure la dimensione della chiave non corrisponde alla dimensione della chiave di questa istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-183">Either its <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> property does not specify <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> or its key size does not match the key size of this instance.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c1c08-184">La proprietà <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> di questo oggetto specifica la funzione di derivazione di chiave <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />, ma <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> o <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-184">This object's <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> property specifies the <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> key derivation function, but either <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> or <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="c1c08-185">Tutti gli altri errori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-185">All other errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyMaterial">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyMaterial(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyMaterial (otherPartyPublicKey As ECDiffieHellmanPublicKey) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyMaterial(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="c1c08-186">Chiave pubblica della seconda parte nello scambio di chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-186">The public key from the other party in the key exchange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-187">Deriva il materiale della chiave generato dalla chiave privata tra due parti, dato un oggetto <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> contenente la chiave pubblica della seconda parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-187">Derives the key material that is generated from the secret agreement between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1c08-188">Matrice di byte contenente il materiale della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-188">A byte array that contains the key material.</span>
          </span>
          <span data-ttu-id="c1c08-189">Queste informazioni vengono generate dalla chiave privata calcolata sulla base della chiave privata dell'oggetto corrente e della chiave pubblica specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-189">This information is generated from the secret agreement that is calculated from the current object's private key and the specified public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c1c08-190">
            <paramref name="otherPartyPublicKey" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-190">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c1c08-191">
            <paramref name="otherPartyPublicKey" /> non è una chiave <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-191">
              <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> key.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeriveKeyTls">
      <MemberSignature Language="C#" Value="public override byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DeriveKeyTls(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, unsigned int8[] prfLabel, unsigned int8[] prfSeed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeriveKeyTls (otherPartyPublicKey As ECDiffieHellmanPublicKey, prfLabel As Byte(), prfSeed As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ DeriveKeyTls(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey, cli::array &lt;System::Byte&gt; ^ prfLabel, cli::array &lt;System::Byte&gt; ^ prfSeed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
        <Parameter Name="prfLabel" Type="System.Byte[]" />
        <Parameter Name="prfSeed" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="c1c08-192">Chiave pubblica dell'altra parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-192">The other party's public key.</span>
          </span>
        </param>
        <param name="prfLabel">
          <span data-ttu-id="c1c08-193">Etichetta PRF con codifica ASCII.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-193">The ASCII-encoded PRF label.</span>
          </span>
        </param>
        <param name="prfSeed">
          <span data-ttu-id="c1c08-194">Valore di inizializzazione PRF a 64 byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-194">The 64-byte PRF seed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-195">Deriva byte da usare come chiave usando un algoritmo di derivazione PRF (Pseudo-Random Function) TLS (Transport Layer Security).</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-195">Derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1c08-196">Materiale della chiave dallo scambio di chiave con la chiave pubblica dell'altra parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-196">The key material from the key exchange with the other party’s public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c1c08-197">
            <paramref name="otherPartyPublicKey" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-197">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c1c08-198">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-198">-or-</span>
          </span>
          <span data-ttu-id="c1c08-199">
            <paramref name="prfLabel" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-199">
              <paramref name="prfLabel" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c1c08-200">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-200">-or-</span>
          </span>
          <span data-ttu-id="c1c08-201">
            <paramref name="prfSeed" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-201">
              <paramref name="prfSeed" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c1c08-202">
            <paramref name="otherPartyPublicKey" /> non è una chiave ECDH oppure non ha le dimensioni corrette.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-202">
              <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="c1c08-203">
            <paramref name="prfSeed" /> non ha esattamente una lunghezza di 64 byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-203">
              <paramref name="prfSeed" /> is not exactly 64 bytes in length.</span>
          </span>
          <span data-ttu-id="c1c08-204">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-204">-or-</span>
          </span>
          <span data-ttu-id="c1c08-205">Tutti gli altri errori di crittografia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-205">All other cryptographic errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeriveSecretAgreementHandle">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-206">Ottiene un handle per la chiave privata generata tra due parti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-206">Gets a handle to the secret agreement generated between two parties.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-207">Il <xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle%2A> sono overload di metodi per gli utenti esperti che necessitano di un handle per la chiave privata non elaborato anziché il materiale della chiave.</span><span class="sxs-lookup"><span data-stu-id="c1c08-207">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle%2A> method overloads are for advanced users who need a handle to the raw secret agreement instead of the key material.</span></span> <span data-ttu-id="c1c08-208">L'handle di chiave privata può essere utilizzato in platform invoke chiama per eseguire le operazioni che non sono inclusa la <xref:System.Security.Cryptography.ECDiffieHellmanCng> classe.</span><span class="sxs-lookup"><span data-stu-id="c1c08-208">The secret agreement handle can be used in platform invoke calls to perform any work that is not wrapped by the <xref:System.Security.Cryptography.ECDiffieHellmanCng> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeriveSecretAgreementHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.CngKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle(class System.Security.Cryptography.CngKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveSecretAgreementHandle (otherPartyPublicKey As CngKey) As SafeNCryptSecretHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Win32::SafeHandles::SafeNCryptSecretHandle ^ DeriveSecretAgreementHandle(System::Security::Cryptography::CngKey ^ otherPartyPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.CngKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="c1c08-209">Oggetto contenente la parte pubblica della chiave ECDH (Diffie-Hellman a curva ellittica) della seconda parte nello scambio di chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-209">An object that contains the public part of the Elliptic Curve Diffie-Hellman (ECDH) key from the other party in the key exchange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-210">Ottiene un handle per la chiave privata generata tra due parti, dato un oggetto <see cref="T:System.Security.Cryptography.CngKey" /> contenente la chiave pubblica della seconda parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-210">Gets a handle to the secret agreement generated between two parties, given a <see cref="T:System.Security.Cryptography.CngKey" /> object that contains the second party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1c08-211">Handle per la chiave privata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-211">A handle to the secret agreement.</span>
          </span>
          <span data-ttu-id="c1c08-212">Queste informazioni vengono calcolate sulla base della chiave privata dell'oggetto corrente e della chiave pubblica specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-212">This information is calculated from the current object's private key and the specified public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c1c08-213">
            <paramref name="otherPartyPublicKey" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-213">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c1c08-214">
            <paramref name="otherPartyPublicKey" /> non è una chiave ECDH oppure non ha le dimensioni corrette.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-214">
              <paramref name="otherPartyPublicKey" /> is not an ECDH key, or it is not the correct size.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="c1c08-215">Tutti gli altri errori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-215">All other errors.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="c1c08-216">l'autorizzazione per chiamare codice non gestito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-216">for permission to call unmanaged code.</span>
          </span>
          <span data-ttu-id="c1c08-217">Valore richiesta: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-217">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span>
          </span>
          <span data-ttu-id="c1c08-218">Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-218">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="DeriveSecretAgreementHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle DeriveSecretAgreementHandle(class System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeriveSecretAgreementHandle (otherPartyPublicKey As ECDiffieHellmanPublicKey) As SafeNCryptSecretHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Win32::SafeHandles::SafeNCryptSecretHandle ^ DeriveSecretAgreementHandle(System::Security::Cryptography::ECDiffieHellmanPublicKey ^ otherPartyPublicKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherPartyPublicKey" Type="System.Security.Cryptography.ECDiffieHellmanPublicKey" />
      </Parameters>
      <Docs>
        <param name="otherPartyPublicKey">
          <span data-ttu-id="c1c08-219">Chiave pubblica della seconda parte nello scambio di chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-219">The public key from the other party in the key exchange.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-220">Ottiene un handle per la chiave privata generata tra due parti, dato un oggetto <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> contenente la chiave pubblica della seconda parte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-220">Gets a handle to the secret agreement generated between two parties, given an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> object that contains the second party's public key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1c08-221">Handle per la chiave privata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-221">A handle to the secret agreement.</span>
          </span>
          <span data-ttu-id="c1c08-222">Queste informazioni vengono calcolate sulla base della chiave privata dell'oggetto corrente e della chiave pubblica specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-222">This information is calculated from the current object's private key and the specified public key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c1c08-223">
            <paramref name="otherPartyPublicKey" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-223">
              <paramref name="otherPartyPublicKey" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c1c08-224">
            <paramref name="otherPartyPublicKey" /> non è una chiave <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-224">
              <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportExplicitParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportExplicitParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportExplicitParameters(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="c1c08-225">
            <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-225">
              <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-226">Esporta la chiave e i parametri della curva esplicita usati dall'oggetto <see cref="T:System.Security.Cryptography.ECCurve" /> in un oggetto <see cref="T:System.Security.Cryptography.ECParameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-226">Exports the key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1c08-227">Chiave e parametri della curva esplicita usati dall'oggetto <see cref="T:System.Security.Cryptography.ECCurve" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-227">The key and explicit curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="c1c08-228">Il metodo non può ottenere i valori della curva.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-228">The method cannot obtain curve values.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="c1c08-229">L'esportazione esplicita non è supportata da questa piattaforma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-229">Explicit export is not supported by this platform.</span>
          </span>
          <span data-ttu-id="c1c08-230">È necessario Windows 10 o versioni successive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-230">Windows 10 or higher is required.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExportParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::Cryptography::ECParameters ExportParameters(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="c1c08-231">
            <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-231">
              <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-232">Esporta la chiave usata dall'oggetto <see cref="T:System.Security.Cryptography.ECCurve" /> in un oggetto <see cref="T:System.Security.Cryptography.ECParameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-232">Exports the key used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object into an <see cref="T:System.Security.Cryptography.ECParameters" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1c08-233">Chiave e parametri della curva denominata usati dall'oggetto <see cref="T:System.Security.Cryptography.ECCurve" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-233">The key and named curve parameters used by the <see cref="T:System.Security.Cryptography.ECCurve" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-234">Se la chiave è stata creata come una curva denominata, il <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> campo contiene i parametri denominati curva.          in caso contrario, contiene parametri espliciti.</span><span class="sxs-lookup"><span data-stu-id="c1c08-234">If the key was created as a named curve, the <xref:System.Security.Cryptography.ECParameters.Curve?displayProperty=nameWithType> field contains named curve parameters;          otherwise,  it contains explicit parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="c1c08-235">Il metodo non può ottenere i valori della curva.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-235">The method cannot obtain curve values.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromXmlString">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-236">Deserializza le informazioni sulla chiave da una stringa XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-236">Deserializes the key information from an XML string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public override void FromXmlString (string xmlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXmlString(string xmlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXmlString (xmlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXmlString(System::String ^ xmlString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlString">
          <span data-ttu-id="c1c08-237">Informazioni sulla chiave basate su XML da deserializzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-237">The XML-based key information to be deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-238">Questo metodo non è implementato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-238">This method is not implemented.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-239">Per deserializzare una chiave XML, utilizzare il <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> invece l'overload.</span><span class="sxs-lookup"><span data-stu-id="c1c08-239">To deserialize an XML key, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29> overload instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="c1c08-240">L'override di questo metodo non è stato eseguito per questa istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-240">This method was not overridden for this instance.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromXmlString(string xml, valuetype System.Security.Cryptography.ECKeyXmlFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXmlString (xml As String, format As ECKeyXmlFormat)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FromXmlString(System::String ^ xml, System::Security::Cryptography::ECKeyXmlFormat format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xml" Type="System.String" />
        <Parameter Name="format" Type="System.Security.Cryptography.ECKeyXmlFormat" />
      </Parameters>
      <Docs>
        <param name="xml">
          <span data-ttu-id="c1c08-241">Informazioni sulla chiave basate su XML da deserializzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-241">The XML-based key information to be deserialized.</span>
          </span>
        </param>
        <param name="format">
          <span data-ttu-id="c1c08-242">Uno dei valori di enumerazione che specifica il formato della stringa XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-242">One of the enumeration values that specifies the format of the XML string.</span>
          </span>
          <span data-ttu-id="c1c08-243">L'unico formato attualmente accettato è <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-243">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-244">Deserializza le informazioni sulla chiave da una stringa XML utilizzando il formato specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-244">Deserializes the key information from an XML string by using the specified format.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c1c08-245">
            <paramref name="xml" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-245">
              <paramref name="xml" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c1c08-246">
            <paramref name="xml" /> non è corretto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-246">
              <paramref name="xml" /> is malformed.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c1c08-247">
            <paramref name="format" /> specifica un formato non valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-247">
              <paramref name="format" /> specifies an invalid format.</span>
          </span>
          <span data-ttu-id="c1c08-248">L'unico valore accettato è <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-248">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="c1c08-249">Tutti gli altri errori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-249">All other errors.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public override void GenerateKey (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GenerateKey(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GenerateKey (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GenerateKey(System::Security::Cryptography::ECCurve curve);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve">
          <span data-ttu-id="c1c08-250">Curva usata per generare una coppia di chiavi pubblica/privata temporanea.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-250">The curve used to generate an ephemeral public/private key pair.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-251">Genera una nuova coppia di chiavi pubblica/privata temporanea per la curva specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-251">Generates a new ephemeral public/private key pair for the specified curve.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-252">`curve` deve convalidare (ovvero, deve restituire true quando viene passato per il <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> (metodo)) e non può essere implicita.</span><span class="sxs-lookup"><span data-stu-id="c1c08-252">`curve` must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=nameWithType> method) and must not be implicit.</span></span>  
  
 <span data-ttu-id="c1c08-253">Curve caratteristica-2 non sono supportate in Windows.</span><span class="sxs-lookup"><span data-stu-id="c1c08-253">Characteristic-2 curves are not supported on Windows.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="c1c08-254">
            <paramref name="curve" /> non viene convalidato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-254">
              <paramref name="curve" /> does not validate.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.CngAlgorithm HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property HashAlgorithm As CngAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::CngAlgorithm ^ HashAlgorithm { System::Security::Cryptography::CngAlgorithm ^ get(); void set(System::Security::Cryptography::CngAlgorithm ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CngAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-255">Ottiene o imposta l'algoritmo hash da utilizzare durante la generazione del materiale della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-255">Gets or sets the hash algorithm to use when generating key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c1c08-256">Oggetto che specifica l'algoritmo hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-256">An object that specifies the hash algorithm.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-257">Questa proprietà è utilizzata dagli oggetti di Cryptography Next Generation (CNG) solo se il <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> o <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> valore è impostato il <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="c1c08-257">This property is used by Cryptography Next Generation (CNG) objects only if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.</span></span>  
  
 <span data-ttu-id="c1c08-258">Questa proprietà accetta i seguenti algoritmi: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, e <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.</span><span class="sxs-lookup"><span data-stu-id="c1c08-258">This property accepts the following algorithms: <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>, <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>, and <xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>.</span></span>  
  
 <span data-ttu-id="c1c08-259">Possono essere utilizzati anche altri algoritmi di hash personalizzato.</span><span class="sxs-lookup"><span data-stu-id="c1c08-259">Other custom hash algorithms may also be used.</span></span>  
  
 <span data-ttu-id="c1c08-260">L'algoritmo predefinito è <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.</span><span class="sxs-lookup"><span data-stu-id="c1c08-260">The default algorithm is <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c1c08-261">Il valore è <see langword="null." /></span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-261">The value is <see langword="null." /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HmacKey">
      <MemberSignature Language="C#" Value="public byte[] HmacKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] HmacKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" />
      <MemberSignature Language="VB.NET" Value="Public Property HmacKey As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ HmacKey { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-262">Ottiene o imposta la chiave HMAC (Hash-based Message Authentication Code) da utilizzare per la derivazione del materiale della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-262">Gets or sets the Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c1c08-263">La chiave HMAC (Hash-based Message Authentication Code) da utilizzare per la derivazione del materiale della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-263">The Hash-based Message Authentication Code (HMAC) key to use when deriving key material.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-264">Questa proprietà viene applicata solo quando il <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> valore viene impostato <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> , proprietà e <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> proprietà è `false`.</span><span class="sxs-lookup"><span data-stu-id="c1c08-264">This property applies only when the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property, and the <xref:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey%2A> property is `false`.</span></span> <span data-ttu-id="c1c08-265">Per impostazione predefinita, il valore è `null`.</span><span class="sxs-lookup"><span data-stu-id="c1c08-265">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public override void ImportParameters (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ImportParameters(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ImportParameters (parameters As ECParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ImportParameters(System::Security::Cryptography::ECParameters parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">
          <span data-ttu-id="c1c08-266">Parametri della curva da importare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-266">The curve's parameters to import.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-267">Importa i parametri specificati per un oggetto <see cref="T:System.Security.Cryptography.ECCurve" /> come chiave nell'istanza corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-267">Imports the specified parameters for an <see cref="T:System.Security.Cryptography.ECCurve" /> object as a key into the current instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-268">Il <xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> metodo sostituisce la chiave esistente che funziona con questo oggetto tramite la creazione di un nuovo <xref:System.Security.Cryptography.CngKey> oggetto.</span><span class="sxs-lookup"><span data-stu-id="c1c08-268">The <xref:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters%2A> method replaces the existing key that this object is working with by creating a         new <xref:System.Security.Cryptography.CngKey> object.</span></span> <span data-ttu-id="c1c08-269">Se `parameters` contiene solo il <xref:System.Security.Cryptography.ECParameters.Q> campo, quindi viene importata solo una chiave pubblica.</span><span class="sxs-lookup"><span data-stu-id="c1c08-269">If `parameters` contains only the <xref:System.Security.Cryptography.ECParameters.Q> field, then only a public key is imported.</span></span>         <span data-ttu-id="c1c08-270">Se `parameters` contiene inoltre <xref:System.Security.Cryptography.ECParameters.D>, quindi una coppia di chiavi completa è da importare.</span><span class="sxs-lookup"><span data-stu-id="c1c08-270">If `parameters` also contains <xref:System.Security.Cryptography.ECParameters.D>, then a full key pair is be imported.</span></span> <span data-ttu-id="c1c08-271">Il `parameter` <xref:System.Security.Cryptography.ECParameters.Curve> valore specifica il tipo di curva da importare.</span><span class="sxs-lookup"><span data-stu-id="c1c08-271">The `parameter` <xref:System.Security.Cryptography.ECParameters.Curve> value specifies the type of the curve to import.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <span data-ttu-id="c1c08-272">
            <paramref name="parameters" /> non viene convalidato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-272">
              <paramref name="parameters" /> does not validate.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c1c08-273">
            <paramref name="parameters" /> fa riferimento a una curva che non può essere importata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-273">
              <paramref name="parameters" /> references a curve that cannot be imported..</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="c1c08-274">
            <paramref name="parameters" /> fa riferimento a una curva che non è supportata da questa piattaforma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-274">
              <paramref name="parameters" /> references a curve that is not supported by this platform.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.CngKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.CngKey Key" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As CngKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::CngKey ^ Key { System::Security::Cryptography::CngKey ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.CngKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-275">Specifica l'oggetto <see cref="T:System.Security.Cryptography.CngKey" /> utilizzato dall'oggetto corrente per le operazioni di crittografia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-275">Specifies the <see cref="T:System.Security.Cryptography.CngKey" /> that is used by the current object for cryptographic operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c1c08-276">Coppia di chiavi utilizzata da questo oggetto per eseguire le operazioni di crittografia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-276">The key pair used by this object to perform cryptographic operations.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDerivationFunction">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyDerivationFunction As ECDiffieHellmanKeyDerivationFunction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction KeyDerivationFunction { System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction get(); void set(System::Security::Cryptography::ECDiffieHellmanKeyDerivationFunction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-277">Ottiene o imposta la funzione di derivazione di chiave per la classe <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-277">Gets or sets the key derivation function for the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c1c08-278">Uno dei valori di enumerazione <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" />: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" /> o <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-278">One of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> enumeration values: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />, or <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />.</span>
          </span>
          <span data-ttu-id="c1c08-279">Il valore predefinito è <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-279">The default value is <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-280">Questa proprietà specifica la funzione di derivazione della chiave che viene utilizzata per trasformare la chiave privata in materiale della chiave.</span><span class="sxs-lookup"><span data-stu-id="c1c08-280">This property specifies the key derivation function that is used to transform the secret agreement into key material.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c1c08-281">Il valore di enumerazione è esterno all'intervallo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-281">The enumeration value is out of range.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public byte[] Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Label" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Label { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-282">Ottiene o imposta il valore dell'etichetta utilizzato per la derivazione della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-282">Gets or sets the label value that is used for key derivation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c1c08-283">Valore dell'etichetta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-283">The label value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-284">Questo valore viene utilizzato per la derivazione della chiave, se il <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls> valore è impostato il <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="c1c08-284">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls> value is set in the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property.</span></span> <span data-ttu-id="c1c08-285">Per impostazione predefinita è `null`.</span><span class="sxs-lookup"><span data-stu-id="c1c08-285">By default, it is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PublicKey As ECDiffieHellmanPublicKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Cryptography::ECDiffieHellmanPublicKey ^ PublicKey { System::Security::Cryptography::ECDiffieHellmanPublicKey ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDiffieHellmanPublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-286">Ottiene la chiave pubblica che può essere utilizzata da un altro oggetto <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> per generare una chiave privata condivisa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-286">Gets the public key that can be used by another <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object to generate a shared secret agreement.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c1c08-287">Chiave pubblica associata a questa istanza dell'oggetto <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-287">The public key that is associated with this instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecretAppend">
      <MemberSignature Language="C#" Value="public byte[] SecretAppend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SecretAppend" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend" />
      <MemberSignature Language="VB.NET" Value="Public Property SecretAppend As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SecretAppend { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-288">Ottiene o imposta un valore che verrà aggiunto alla chiave privata durante la generazione del materiale della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-288">Gets or sets a value that will be appended to the secret agreement when generating key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c1c08-289">Valore aggiunto alla chiave privata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-289">The value that is appended to the secret agreement.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-290">Questo valore viene utilizzato per la derivazione della chiave, se il <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> o <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> viene utilizzata la derivazione della chiave della funzione.</span><span class="sxs-lookup"><span data-stu-id="c1c08-290">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash> or <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac> key derivation function (KDF) is used.</span></span> <span data-ttu-id="c1c08-291">Il valore viene aggiunto alla chiave privata e il valore combinato viene passato per l'utilizzo per generare il materiale della chiave.</span><span class="sxs-lookup"><span data-stu-id="c1c08-291">The value is appended to the secret agreement, and the combined value is passed to the KDF to generate the key material.</span></span> <span data-ttu-id="c1c08-292">Per impostazione predefinita, il valore è `null`.</span><span class="sxs-lookup"><span data-stu-id="c1c08-292">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecretPrepend">
      <MemberSignature Language="C#" Value="public byte[] SecretPrepend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SecretPrepend" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend" />
      <MemberSignature Language="VB.NET" Value="Public Property SecretPrepend As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SecretPrepend { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-293">Ottiene o imposta un valore che verrà aggiunto all'inizio della chiave privata durante la derivazione del materiale della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-293">Gets or sets a value that will be added to the beginning of the secret agreement when deriving key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c1c08-294">Valore aggiunto all'inizio della chiave privata durante la derivazione della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-294">The value that is appended to the beginning of the secret agreement during key derivation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-295">Questo valore viene utilizzato per la derivazione della chiave se la <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> proprietà è impostata su uno dei valori seguenti:</span><span class="sxs-lookup"><span data-stu-id="c1c08-295">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to one of the following values:</span></span>  
  
-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash>  
  
-   <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>  
  
 <span data-ttu-id="c1c08-296">Il valore viene anteposto alla chiave privata e il valore combinato viene passato per la funzione derivazione chiave () per generare il materiale della chiave.</span><span class="sxs-lookup"><span data-stu-id="c1c08-296">The value is prepended to the secret agreement, and the combined value is passed to the key derivation function (KDF) to generate the key material.</span></span> <span data-ttu-id="c1c08-297">Per impostazione predefinita, il valore è `null`.</span><span class="sxs-lookup"><span data-stu-id="c1c08-297">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seed">
      <MemberSignature Language="C#" Value="public byte[] Seed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Seed" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" />
      <MemberSignature Language="VB.NET" Value="Public Property Seed As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Seed { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-298">Ottiene o imposta il valore di inizializzazione che verrà utilizzato durante la derivazione del materiale della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-298">Gets or sets the seed value that will be used when deriving key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c1c08-299">Valore di inizializzazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-299">The seed value.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-300">Questo valore viene utilizzato per la derivazione della chiave, se il <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> è impostata su <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>.</span><span class="sxs-lookup"><span data-stu-id="c1c08-300">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls>.</span></span> <span data-ttu-id="c1c08-301">Per impostazione predefinita, il valore è `null`.</span><span class="sxs-lookup"><span data-stu-id="c1c08-301">By default, the value is `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToXmlString">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-302">Serializza le informazioni sulla chiave in una stringa XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-302">Serializes the key information to an XML string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public override string ToXmlString (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToXmlString(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXmlString (includePrivateParameters As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToXmlString(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="c1c08-303">
            <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-303">
              <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-304">Questo metodo non è implementato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-304">This method is not implemented.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1c08-305">Non applicabile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-305">Not applicable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c1c08-306">Per convertire la chiave corrente in una rappresentazione XML, utilizzare il <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> invece l'overload.</span><span class="sxs-lookup"><span data-stu-id="c1c08-306">To convert the current key to an XML representation, use the <xref:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29> overload instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="c1c08-307">L'override di questo metodo non è stato eseguito per questa istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-307">This method was not overridden for this instance.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToXmlString(valuetype System.Security.Cryptography.ECKeyXmlFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXmlString (format As ECKeyXmlFormat) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToXmlString(System::Security::Cryptography::ECKeyXmlFormat format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Security.Cryptography.ECKeyXmlFormat" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="c1c08-308">Uno dei valori di enumerazione che specifica il formato della stringa XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-308">One of the enumeration values that specifies the format of the XML string.</span>
          </span>
          <span data-ttu-id="c1c08-309">L'unico formato attualmente accettato è <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-309">The only currently accepted format is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c1c08-310">Serializza le informazioni sulla chiave in una stringa XML utilizzando il formato specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-310">Serializes the key information to an XML string by using the specified format.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c1c08-311">Oggetto stringa contenente le informazioni sulla chiave, serializzate in una stringa XML secondo il formato richiesto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-311">A string object that contains the key information, serialized to an XML string, according to the requested format.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c1c08-312">
            <paramref name="format" /> specifica un formato non valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-312">
              <paramref name="format" /> specifies an invalid format.</span>
          </span>
          <span data-ttu-id="c1c08-313">L'unico valore accettato è <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-313">The only accepted value is <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UseSecretAgreementAsHmacKey">
      <MemberSignature Language="C#" Value="public bool UseSecretAgreementAsHmacKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSecretAgreementAsHmacKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseSecretAgreementAsHmacKey As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSecretAgreementAsHmacKey { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c1c08-314">Ottiene un valore che indica se la chiave privata viene utilizzata o meno come chiave HMAC (Hash-based Message Authentication Code) per derivare il materiale della chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-314">Gets a value that indicates whether the secret agreement is used as a Hash-based Message Authentication Code (HMAC) key to derive key material.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c1c08-315">
            <see langword="true" /> se la chiave privata viene utilizzata come chiave HMAC per derivare il materiale della chiave; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c1c08-315">
              <see langword="true" /> if the secret agreement is used as an HMAC key to derive key material; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   <span data-ttu-id="c1c08-316">Questo valore viene utilizzato per la derivazione della chiave, se il <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> è impostata su <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>.</span><span class="sxs-lookup"><span data-stu-id="c1c08-316">This value is used for key derivation if the <xref:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction%2A> property is set to <xref:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac>.</span></span> <span data-ttu-id="c1c08-317">Per impostazione predefinita, il valore è `false`.</span><span class="sxs-lookup"><span data-stu-id="c1c08-317">By default, the value is `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>