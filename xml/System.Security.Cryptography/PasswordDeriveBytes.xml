<Type Name="PasswordDeriveBytes" FullName="System.Security.Cryptography.PasswordDeriveBytes">
  <TypeSignature Language="C#" Value="public class PasswordDeriveBytes : System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PasswordDeriveBytes extends System.Security.Cryptography.DeriveBytes" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.PasswordDeriveBytes" />
  <TypeSignature Language="VB.NET" Value="Public Class PasswordDeriveBytes&#xA;Inherits DeriveBytes" />
  <TypeSignature Language="C++ CLI" Value="public ref class PasswordDeriveBytes : System::Security::Cryptography::DeriveBytes" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.DeriveBytes</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a4892-101">Deriva una chiave da una password mediante un'estensione dell'algoritmo PBKDF1.</span><span class="sxs-lookup"><span data-stu-id="a4892-101">Derives a key from a password using an extension of the PBKDF1 algorithm.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4892-102">Questa classe utilizza un'estensione dell'algoritmo PBKDF1 definito nella versione 2.0 di PKCS #5 standard da cui per derivare byte adatti per l'uso come materiale della chiave con una password.</span><span class="sxs-lookup"><span data-stu-id="a4892-102">This class uses an extension of the PBKDF1 algorithm defined in the PKCS#5 v2.0 standard to derive bytes suitable for use as key material from a password.</span></span> <span data-ttu-id="a4892-103">Lo standard Ã¨ documentato in IETF RRC 2898.</span><span class="sxs-lookup"><span data-stu-id="a4892-103">The standard is documented in IETF RRC 2898.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a4892-104">Non codificare una password all'interno del codice sorgente.</span><span class="sxs-lookup"><span data-stu-id="a4892-104">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="a4892-105">Le password hardcoded possono essere recuperate da un assembly mediante il [Ildasm.exe (Disassembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) strumento, un editor esadecimale o semplicemente aprendo l'assembly in un editor di testo come notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="a4892-105">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4892-106">Esempio di codice seguente crea una chiave da una password utilizzando la <xref:System.Security.Cryptography.PasswordDeriveBytes> classe.</span><span class="sxs-lookup"><span data-stu-id="a4892-106">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a4892-107">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />.</span><span class="sxs-lookup"><span data-stu-id="a4892-107">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="a4892-108">Password per la quale derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-108">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="a4892-109">Salt della chiave da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-109">The key salt to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="a4892-110">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> specificando la password e il salt della chiave da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-110">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password and key salt to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a4892-111">Non codificare una password all'interno del codice sorgente.</span><span class="sxs-lookup"><span data-stu-id="a4892-111">Never hard code a password within your source code.</span></span>  <span data-ttu-id="a4892-112">Le password hardcoded possono essere recuperate da un assembly mediante il [Ildasm.exe (Disassembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), un editor esadecimale o semplicemente aprendo l'assembly in un editor di testo, ad esempio Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="a4892-112">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4892-113">Esempio di codice seguente crea una chiave da una password utilizzando la <xref:System.Security.Cryptography.PasswordDeriveBytes> classe.</span><span class="sxs-lookup"><span data-stu-id="a4892-113">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="a4892-114">Password per la quale derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-114">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="a4892-115">Salt della chiave da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-115">The key salt to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="a4892-116">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> con la password e il salt della chiave da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-116">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password and key salt to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a4892-117">Non codificare una password all'interno del codice sorgente.</span><span class="sxs-lookup"><span data-stu-id="a4892-117">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="a4892-118">Le password hardcoded possono essere recuperate da un assembly mediante il [Ildasm.exe (Disassembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) strumento, un editor esadecimale o semplicemente aprendo l'assembly in un editor di testo come notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="a4892-118">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="a4892-119">Password per la quale derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-119">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="a4892-120">Salt della chiave da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-120">The key salt to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="a4892-121">Parametri del provider del servizio di crittografia (CSP) per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-121">The cryptographic service provider (CSP) parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="a4892-122">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> specificando la password, il salt della chiave e i parametri del CSP (Cryptographic Service Provider) da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-122">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, and cryptographic service provider (CSP) to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a4892-123">Non codificare una password all'interno del codice sorgente.</span><span class="sxs-lookup"><span data-stu-id="a4892-123">Never hard code a password within your source code.</span></span>  <span data-ttu-id="a4892-124">Le password hardcoded possono essere recuperate da un assembly mediante il [Ildasm.exe (Disassembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) , un editor esadecimale, o semplicemente aprendo l'assembly in un editor di testo, ad esempio Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="a4892-124">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) l, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4892-125">Esempio di codice seguente crea una chiave da una password utilizzando la <xref:System.Security.Cryptography.PasswordDeriveBytes> classe.</span><span class="sxs-lookup"><span data-stu-id="a4892-125">The following code example creates a key from a password using the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#1)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#1)]
 [!code-vb[Cryptography.PasswordDerivedbytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="a4892-126">Password per la quale derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-126">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="a4892-127">Salt della chiave da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-127">The key salt to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="a4892-128">Parametri del CSP per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-128">The CSP parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="a4892-129">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> con la password, il salt della chiave e i parametri del CSP (Cryptographic Service Provider) da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-129">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, and cryptographic service provider (CSP) parameters to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a4892-130">Non codificare una password all'interno del codice sorgente.</span><span class="sxs-lookup"><span data-stu-id="a4892-130">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="a4892-131">Le password hardcoded possono essere recuperate da un assembly mediante il [Ildasm.exe (Disassembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) strumento, un editor esadecimale o semplicemente aprendo l'assembly in un editor di testo come notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="a4892-131">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="a4892-132">Password per la quale derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-132">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="a4892-133">Salt della chiave da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-133">The key salt to use to derive the key.</span></span></param>
        <param name="hashName"><span data-ttu-id="a4892-134">Algoritmo hash da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-134">The hash algorithm to use to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="a4892-135">Conteggio delle iterazioni da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-135">The iteration count to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="a4892-136">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> specificando la password, il salt della chiave, il nome hash e le iterazioni da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-136">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, and iterations to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a4892-137">Non codificare una password all'interno del codice sorgente.</span><span class="sxs-lookup"><span data-stu-id="a4892-137">Never hard code a password within your source code.</span></span>  <span data-ttu-id="a4892-138">Le password hardcoded possono essere recuperate da un assembly mediante il [Ildasm.exe (Disassembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), un editor esadecimale o semplicemente aprendo l'assembly in un editor di testo, ad esempio Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="a4892-138">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="a4892-139">Per un elenco di nomi di algoritmi di hash, vedere la <xref:System.Security.Cryptography.CryptoConfig> classe.</span><span class="sxs-lookup"><span data-stu-id="a4892-139">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="a4892-140">Password per la quale derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-140">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="a4892-141">Salt della chiave da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-141">The key salt to use to derive the key.</span></span></param>
        <param name="strHashName"><span data-ttu-id="a4892-142">Nome dell'algoritmo hash per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-142">The name of the hash algorithm for the operation.</span></span></param>
        <param name="iterations"><span data-ttu-id="a4892-143">Numero di iterazioni per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-143">The number of iterations for the operation.</span></span></param>
        <summary><span data-ttu-id="a4892-144">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> con la password, il salt della chiave, il nome hash e il numero di iterazioni da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-144">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, and number of iterations to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a4892-145">Non codificare una password all'interno del codice sorgente.</span><span class="sxs-lookup"><span data-stu-id="a4892-145">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="a4892-146">Le password hardcoded possono essere recuperate da un assembly mediante il [Ildasm.exe (Disassembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) strumento, un editor esadecimale o semplicemente aprendo l'assembly in un editor di testo come notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="a4892-146">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="a4892-147">Per un elenco di nomi di algoritmi di hash, vedere la <xref:System.Security.Cryptography.CryptoConfig> classe.</span><span class="sxs-lookup"><span data-stu-id="a4892-147">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] password, unsigned int8[] salt, string hashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.Byte[],System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (password As Byte(), salt As Byte(), hashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(cli::array &lt;System::Byte&gt; ^ password, cli::array &lt;System::Byte&gt; ^ salt, System::String ^ hashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="password" Type="System.Byte[]" />
        <Parameter Name="salt" Type="System.Byte[]" />
        <Parameter Name="hashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="password"><span data-ttu-id="a4892-148">Password per la quale derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-148">The password to derive the key for.</span></span></param>
        <param name="salt"><span data-ttu-id="a4892-149">Salt della chiave da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-149">The key salt to use to derive the key.</span></span></param>
        <param name="hashName"><span data-ttu-id="a4892-150">Algoritmo hash da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-150">The hash algorithm to use to derive the key.</span></span></param>
        <param name="iterations"><span data-ttu-id="a4892-151">Conteggio delle iterazioni da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-151">The iteration count to use to derive the key.</span></span></param>
        <param name="cspParams"><span data-ttu-id="a4892-152">Parametri del provider del servizio di crittografia (CSP) per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-152">The cryptographic service provider (CSP) parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="a4892-153">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> specificando la password, il salt della chiave, il nome hash, le iterazioni e i parametri del CSP (Cryptographic Service Provider) da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-153">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class specifying the password, key salt, hash name, iterations, and cryptographic service provider (CSP) to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a4892-154">Non codificare una password all'interno del codice sorgente.</span><span class="sxs-lookup"><span data-stu-id="a4892-154">Never hard code a password within your source code.</span></span>  <span data-ttu-id="a4892-155">Le password hardcoded possono essere recuperate da un assembly mediante il [Ildasm.exe (Disassembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), un editor esadecimale o semplicemente aprendo l'assembly in un editor di testo, ad esempio Notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="a4892-155">Hard-coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md), a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</span></span>  
  
 <span data-ttu-id="a4892-156">Per un elenco di nomi di algoritmi di hash, vedere la <xref:System.Security.Cryptography.CryptoConfig> classe.</span><span class="sxs-lookup"><span data-stu-id="a4892-156">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string strPassword, unsigned int8[] rgbSalt, string strHashName, int32 iterations, class System.Security.Cryptography.CspParameters cspParams) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.#ctor(System.String,System.Byte[],System.String,System.Int32,System.Security.Cryptography.CspParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (strPassword As String, rgbSalt As Byte(), strHashName As String, iterations As Integer, cspParams As CspParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PasswordDeriveBytes(System::String ^ strPassword, cli::array &lt;System::Byte&gt; ^ rgbSalt, System::String ^ strHashName, int iterations, System::Security::Cryptography::CspParameters ^ cspParams);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strPassword" Type="System.String" />
        <Parameter Name="rgbSalt" Type="System.Byte[]" />
        <Parameter Name="strHashName" Type="System.String" />
        <Parameter Name="iterations" Type="System.Int32" />
        <Parameter Name="cspParams" Type="System.Security.Cryptography.CspParameters" />
      </Parameters>
      <Docs>
        <param name="strPassword"><span data-ttu-id="a4892-157">Password per la quale derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-157">The password for which to derive the key.</span></span></param>
        <param name="rgbSalt"><span data-ttu-id="a4892-158">Salt della chiave da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-158">The key salt to use to derive the key.</span></span></param>
        <param name="strHashName"><span data-ttu-id="a4892-159">Nome dell'algoritmo hash per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-159">The name of the hash algorithm for the operation.</span></span></param>
        <param name="iterations"><span data-ttu-id="a4892-160">Numero di iterazioni per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-160">The number of iterations for the operation.</span></span></param>
        <param name="cspParams"><span data-ttu-id="a4892-161">Parametri del CSP per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-161">The CSP parameters for the operation.</span></span></param>
        <summary><span data-ttu-id="a4892-162">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> con la password, il salt della chiave, il nome hash, il numero di iterazioni e i parametri del CSP (Cryptographic Service Provider) da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-162">Initializes a new instance of the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class with the password, key salt, hash name, number of iterations, and cryptographic service provider (CSP) parameters to use to derive the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a4892-163">Non codificare una password all'interno del codice sorgente.</span><span class="sxs-lookup"><span data-stu-id="a4892-163">Never hard-code a password within your source code.</span></span>  <span data-ttu-id="a4892-164">Le password hardcoded possono essere recuperate da un assembly mediante il [Ildasm.exe (Disassembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) strumento, un editor esadecimale o semplicemente aprendo l'assembly in un editor di testo come notepad.exe.</span><span class="sxs-lookup"><span data-stu-id="a4892-164">Hard coded passwords can be retrieved from an assembly using the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) tool, a hex editor, or by simply opening up the assembly in a text editor like notepad.exe.</span></span>  
  
 <span data-ttu-id="a4892-165">Per un elenco di nomi di algoritmi di hash, vedere la <xref:System.Security.Cryptography.CryptoConfig> classe.</span><span class="sxs-lookup"><span data-stu-id="a4892-165">For a list of hash algorithm names, see the <xref:System.Security.Cryptography.CryptoConfig> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Cryptography.CryptoConfig" />
      </Docs>
    </Member>
    <Member MemberName="CryptDeriveKey">
      <MemberSignature Language="C#" Value="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] CryptDeriveKey(string algname, string alghashname, int32 keySize, unsigned int8[] rgbIV) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CryptDeriveKey (algname As String, alghashname As String, keySize As Integer, rgbIV As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ CryptDeriveKey(System::String ^ algname, System::String ^ alghashname, int keySize, cli::array &lt;System::Byte&gt; ^ rgbIV);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algname" Type="System.String" />
        <Parameter Name="alghashname" Type="System.String" />
        <Parameter Name="keySize" Type="System.Int32" />
        <Parameter Name="rgbIV" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algname"><span data-ttu-id="a4892-166">Nome dell'algoritmo per il quale derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-166">The algorithm name for which to derive the key.</span></span></param>
        <param name="alghashname"><span data-ttu-id="a4892-167">Nome dell'algoritmo hash da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-167">The hash algorithm name to use to derive the key.</span></span></param>
        <param name="keySize"><span data-ttu-id="a4892-168">Dimensione in bit della chiave da derivare.</span><span class="sxs-lookup"><span data-stu-id="a4892-168">The size of the key, in bits, to derive.</span></span></param>
        <param name="rgbIV"><span data-ttu-id="a4892-169">Vettore di inizializzazione da usare per derivare la chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-169">The initialization vector (IV) to use to derive the key.</span></span></param>
        <summary><span data-ttu-id="a4892-170">Deriva una chiave di crittografia dall'oggetto <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" />.</span><span class="sxs-lookup"><span data-stu-id="a4892-170">Derives a cryptographic key from the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> object.</span></span></summary>
        <returns><span data-ttu-id="a4892-171">Chiave derivata.</span><span class="sxs-lookup"><span data-stu-id="a4892-171">The derived key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4892-172">Questa funzione Ã¨ un wrapper per la funzione CryptoAPI CryptDeriveKey () e verrÃ  fornita interoperabilitÃ  con applicazioni tramite l'API di crittografia.</span><span class="sxs-lookup"><span data-stu-id="a4892-172">This function is a wrapper for the Crypto API function CryptDeriveKey(), and is intended to offer interoperability with applications using the Crypto API.</span></span>  
  
 <span data-ttu-id="a4892-173">Se il `keySize` parametro Ã¨ impostato su 0 bit, viene utilizzata la dimensione della chiave predefinita per l'algoritmo specificato.</span><span class="sxs-lookup"><span data-stu-id="a4892-173">If the `keySize` parameter is set to 0 bits, the default key size for the specified algorithm is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a4892-174">Questo esempio di codice fa parte di un esempio piÃ¹ esaustivo disponibile per la <xref:System.Security.Cryptography.PasswordDeriveBytes> classe.</span><span class="sxs-lookup"><span data-stu-id="a4892-174">This code example is part of a larger example provided for the <xref:System.Security.Cryptography.PasswordDeriveBytes> class.</span></span>  
  
 [!code-cpp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/cpp/sample.cpp#2)]
 [!code-csharp[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/CS/sample.cs#2)]
 [!code-vb[Cryptography.PasswordDerivedbytes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.PasswordDerivedbytes/VB/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="a4892-175">Il parametro <paramref name="keySize" /> non Ã¨ corretto.</span><span class="sxs-lookup"><span data-stu-id="a4892-175">The <paramref name="keySize" /> parameter is incorrect.</span></span>  
  
 <span data-ttu-id="a4892-176">oppure</span><span class="sxs-lookup"><span data-stu-id="a4892-176">-or-</span></span>  
  
 <span data-ttu-id="a4892-177">Non Ã¨ possibile acquisire il provider del servizio di crittografia (CSP).</span><span class="sxs-lookup"><span data-stu-id="a4892-177">The cryptographic service provider (CSP) cannot be acquired.</span></span>  
  
 <span data-ttu-id="a4892-178">oppure</span><span class="sxs-lookup"><span data-stu-id="a4892-178">-or-</span></span>  
  
 <span data-ttu-id="a4892-179">Il parametro <paramref name="algname" /> non corrisponde a un nome di algoritmo valido.</span><span class="sxs-lookup"><span data-stu-id="a4892-179">The <paramref name="algname" /> parameter is not a valid algorithm name.</span></span>  
  
 <span data-ttu-id="a4892-180">oppure</span><span class="sxs-lookup"><span data-stu-id="a4892-180">-or-</span></span>  
  
 <span data-ttu-id="a4892-181">Il parametro <paramref name="alghashname" /> non corrisponde a un nome di algoritmo hash valido.</span><span class="sxs-lookup"><span data-stu-id="a4892-181">The <paramref name="alghashname" /> parameter is not a valid hash algorithm name.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="a4892-182"><see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</span><span class="sxs-lookup"><span data-stu-id="a4892-182"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="a4892-183">Rilascia le risorse non gestite usate dalla classe <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> e facoltativamente le risorse gestite.</span><span class="sxs-lookup"><span data-stu-id="a4892-183">Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.PasswordDeriveBytes" /> class and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4892-184">Questo metodo viene chiamato dal metodo pubblico `Dispose()` (metodo) e `Finalize` metodo.</span><span class="sxs-lookup"><span data-stu-id="a4892-184">This method is called by the public `Dispose()` method and the `Finalize` method.</span></span> <span data-ttu-id="a4892-185">`Dispose()` richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`.</span><span class="sxs-lookup"><span data-stu-id="a4892-185">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="a4892-186">`Finalize` richiama `Dispose` con `disposing` impostato su `false`.</span><span class="sxs-lookup"><span data-stu-id="a4892-186">`Finalize` invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="a4892-187">Se il parametro `disposing` Ã¨ `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti a cui la classe <xref:System.Security.Cryptography.PasswordDeriveBytes> fa riferimento.</span><span class="sxs-lookup"><span data-stu-id="a4892-187">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.PasswordDeriveBytes> references.</span></span> <span data-ttu-id="a4892-188">Il metodo richiama il metodo `Dispose()` di ciascun oggetto cui viene fatto riferimento.</span><span class="sxs-lookup"><span data-stu-id="a4892-188">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="a4892-189">Il metodo <see langword="Dispose" /> puÃ² essere chiamato piÃ¹ volte da altri oggetti.</span><span class="sxs-lookup"><span data-stu-id="a4892-189"><see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="a4892-190">Quando si esegue l'override <see langword="Dispose(Boolean)" />, non fare riferimento a oggetti giÃ  eliminati in una precedente chiamata a <see langword="Dispose" />.</span><span class="sxs-lookup"><span data-stu-id="a4892-190">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="a4892-191">Per ulteriori informazioni su come implementare <see langword="Dispose(Boolean)" />, vedere [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="a4892-191">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 <span data-ttu-id="a4892-192">Per ulteriori informazioni su <see langword="Dispose" /> e <see langword="Finalize" />, vedere [la pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="a4892-192">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override byte[] GetBytes (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetBytes(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBytes (cb As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Byte&gt; ^ GetBytes(int cb);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Rfc2898DeriveBytes replaces PasswordDeriveBytes for deriving key material from a password and is preferred in new applications.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb"><span data-ttu-id="a4892-193">Numero di byte chiave pseudo-casuali da generare.</span><span class="sxs-lookup"><span data-stu-id="a4892-193">The number of pseudo-random key bytes to generate.</span></span></param>
        <summary><span data-ttu-id="a4892-194">Restituisce byte di chiave pseudo-casuali.</span><span class="sxs-lookup"><span data-stu-id="a4892-194">Returns pseudo-random key bytes.</span></span></summary>
        <returns><span data-ttu-id="a4892-195">Matrice di byte riempita con byte chiave pseudo-casuali.</span><span class="sxs-lookup"><span data-stu-id="a4892-195">A byte array filled with pseudo-random key bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4892-196">Questo metodo consente di creare qualsiasi numero di byte pseudo-casuali.</span><span class="sxs-lookup"><span data-stu-id="a4892-196">This method can create any number of pseudo-random bytes.</span></span> <span data-ttu-id="a4892-197">Tuttavia, il livello di attendibilitÃ  della sequenza di byte Ã¨ limitato dal numero di byte nell'output hash.</span><span class="sxs-lookup"><span data-stu-id="a4892-197">However, the strength of the byte sequence is limited by the number of bytes in the hash output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashName">
      <MemberSignature Language="C#" Value="public string HashName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HashName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.HashName" />
      <MemberSignature Language="VB.NET" Value="Public Property HashName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HashName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4892-198">Ottiene o imposta il nome dell'algoritmo hash per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-198">Gets or sets the name of the hash algorithm for the operation.</span></span></summary>
        <value><span data-ttu-id="a4892-199">Nome dell'algoritmo hash per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-199">The name of the hash algorithm for the operation.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="a4892-200">Il nome del valore hash Ã¨ fisso ma si Ã¨ tentato di modificare questo valore.</span><span class="sxs-lookup"><span data-stu-id="a4892-200">The name of the hash value is fixed and an attempt is made to change this value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IterationCount">
      <MemberSignature Language="C#" Value="public int IterationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IterationCount" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.IterationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IterationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IterationCount { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4892-201">Ottiene o imposta il numero di iterazioni per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-201">Gets or sets the number of iterations for the operation.</span></span></summary>
        <value><span data-ttu-id="a4892-202">Numero di iterazioni per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-202">The number of iterations for the operation.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="a4892-203">Il numero di iterazioni Ã¨ fisso ma si Ã¨ tentato di modificare questo valore.</span><span class="sxs-lookup"><span data-stu-id="a4892-203">The number of iterations is fixed and an attempt is made to change this value.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a4892-204">Non Ã¨ possibile impostare la proprietÃ  perchÃ© il relativo valore non Ã¨ compreso nell'intervallo.</span><span class="sxs-lookup"><span data-stu-id="a4892-204">The property cannot be set because its value is out of range.</span></span> <span data-ttu-id="a4892-205">Per questa proprietÃ  Ã¨ richiesto un numero non negativo.</span><span class="sxs-lookup"><span data-stu-id="a4892-205">This property requires a non-negative number.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.PasswordDeriveBytes.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a4892-206">Reimposta lo stato dell'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-206">Resets the state of the operation.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Salt">
      <MemberSignature Language="C#" Value="public byte[] Salt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Salt" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.PasswordDeriveBytes.Salt" />
      <MemberSignature Language="VB.NET" Value="Public Property Salt As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Salt { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Csp</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a4892-207">Ottiene o imposta il valore del salt della chiave per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-207">Gets or sets the key salt value for the operation.</span></span></summary>
        <value><span data-ttu-id="a4892-208">Valore del salt della chiave per l'operazione.</span><span class="sxs-lookup"><span data-stu-id="a4892-208">The key salt value for the operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a4892-209">Un attacco con dizionario Ã¨ un attacco in cui l'utente malintenzionato tenta di decrittografare un messaggio crittografato confrontando il valore crittografato con valori crittografati calcolati in precedenza per le chiavi piÃ¹ probabile.</span><span class="sxs-lookup"><span data-stu-id="a4892-209">A dictionary attack is an attack in which the attacker attempts to decrypt an encrypted message by comparing the encrypted value with previously computed encrypted values for the most likely keys.</span></span> <span data-ttu-id="a4892-210">Questo attacco Ã¨ molto piÃ¹ difficile grazie all'introduzione di byte casuali alla fine della password prima della derivazione della chiave.</span><span class="sxs-lookup"><span data-stu-id="a4892-210">This attack is made much more difficult by the introduction of random bytes at the end of the password before the key derivation.</span></span> <span data-ttu-id="a4892-211">Tali byte casuali sono noti come salt.</span><span class="sxs-lookup"><span data-stu-id="a4892-211">These random bytes are known as salt.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="a4892-212">Il valore del salt della chiave Ã¨ fisso ma si Ã¨ tentato di modificare questo valore.</span><span class="sxs-lookup"><span data-stu-id="a4892-212">The key salt value is fixed and an attempt is made to change this value.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>