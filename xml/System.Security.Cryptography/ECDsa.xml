<Type Name="ECDsa" FullName="System.Security.Cryptography.ECDsa">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1753d683dca03f6229c881f0b0aaec6781acfef0" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ECDsa : System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ECDsa extends System.Security.Cryptography.AsymmetricAlgorithm" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ECDsa" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ECDsa&#xA;Inherits AsymmetricAlgorithm" />
  <TypeSignature Language="C++ CLI" Value="public ref class ECDsa abstract : System::Security::Cryptography::AsymmetricAlgorithm" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.0.0</AssemblyVersion>
    <AssemblyVersion>4.3.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.AsymmetricAlgorithm</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="2eb00-101">Fornisce una classe base astratta che incapsula l'algoritmo ECDSA.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2eb00-101">Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2eb00-102">Questa classe funge da classe base astratta per <xref:System.Security.Cryptography.ECDsaCng> derivazioni.</span><span class="sxs-lookup"><span data-stu-id="2eb00-102">This class serves as the abstract base class for <xref:System.Security.Cryptography.ECDsaCng> derivations.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ECDsa ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ECDsa();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2eb00-103">Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.ECDsa" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-103">Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsa" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2eb00-104">Questo costruttore viene chiamato dalle classi che derivano dalla <xref:System.Security.Cryptography.ECDsa> classe.</span><span class="sxs-lookup"><span data-stu-id="2eb00-104">This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDsa> class.</span></span> <span data-ttu-id="2eb00-105">Il <xref:System.Security.Cryptography.ECDsaCng> classe è l'unica implementazione attualmente supportata dal [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2eb00-105">The <xref:System.Security.Cryptography.ECDsaCng> class is the only implementation currently supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span> <span data-ttu-id="2eb00-106">È possibile fornire un'implementazione personalizzata.</span><span class="sxs-lookup"><span data-stu-id="2eb00-106">You may provide your own custom implementation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2eb00-107">Crea una nuova istanza di un'implementazione dell'algoritmo ECDSA (Elliptic Curve Digital Signature Algorithm).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-107">Creates a new instance of an implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDsa Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDsa Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.Create" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create () As ECDsa" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDsa ^ Create();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDsa</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2eb00-108">Crea una nuova istanza dell'implementazione predefinita dell'algoritmo ECDSA (Elliptic Curve Digital Signature Algorithm).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-108">Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-109">Nuova istanza dell'implementazione predefinita (<see cref="T:System.Security.Cryptography.ECDsaCng" />) di questa classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-109">A new instance of the default implementation (<see cref="T:System.Security.Cryptography.ECDsaCng" />) of this class.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDsa Create (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDsa Create(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (curve As ECCurve) As ECDsa" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDsa ^ Create(System::Security::Cryptography::ECCurve curve);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve">
          <span data-ttu-id="2eb00-110">Curva da usare per la generazione delle chiavi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-110">The curve to use for key generation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-111">Crea una nuova istanza dell'implementazione predefinita dell'algoritmo ECDSA (Elliptic Curve Digital Signature Algorithm) con una chiave appena generata sulla curva specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-111">Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) with a newly generated key over the specified curve.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-112">Nuova istanza dell'implementazione predefinita (<see cref="T:System.Security.Cryptography.ECDsaCng" />) di questa classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-112">A new instance of the default implementation (<see cref="T:System.Security.Cryptography.ECDsaCng" />) of this class.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDsa Create (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDsa Create(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (parameters As ECParameters) As ECDsa" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDsa ^ Create(System::Security::Cryptography::ECParameters parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">
          <span data-ttu-id="2eb00-113">Parametri che rappresentano la chiave da usare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-113">The parameters representing the key to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-114">Crea una nuova istanza dell'implementazione predefinita dell'algoritmo ECDSA (Elliptic Curve Digital Signature Algorithm) usando i parametri specificati come chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-114">Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA) using the specified parameters as the key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-115">Nuova istanza dell'implementazione predefinita (<see cref="T:System.Security.Cryptography.ECDsaCng" />) di questa classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-115">A new instance of the default implementation (<see cref="T:System.Security.Cryptography.ECDsaCng" />) of this class.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.ECDsa Create (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.ECDsa Create(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.Create(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (algorithm As String) As ECDsa" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::Cryptography::ECDsa ^ Create(System::String ^ algorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECDsa</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm">
          <span data-ttu-id="2eb00-116">Nome di un'implementazione ECDSA.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-116">The name of an ECDSA implementation.</span>
          </span>
          <span data-ttu-id="2eb00-117">Le seguenti stringhe fanno tutte riferimento alla stessa implementazione, ovvero l'unica implementazione attualmente supportata in [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-117">The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:</span>
          </span>
          <span data-ttu-id="2eb00-118">\- "ECDsa"</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-118">\- "ECDsa"</span>
          </span>
          <span data-ttu-id="2eb00-119">\- "ECDsaCng"</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-119">\- "ECDsaCng"</span>
          </span>
          <span data-ttu-id="2eb00-120">\- "System.Security.Cryptography.ECDsaCng"</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-120">\- "System.Security.Cryptography.ECDsaCng"</span>
          </span>
          <span data-ttu-id="2eb00-121">È inoltre possibile fornire il nome di un'implementazione ECDSA personalizzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-121">You can also provide the name of a custom ECDSA implementation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-122">Crea una nuova istanza dell'implementazione specificata dell'algoritmo ECDSA (Elliptic Curve Digital Signature Algorithm).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-122">Creates a new instance of the specified implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-123">Nuova istanza dell'implementazione specificata di questa classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-123">A new instance of the specified implementation of this class.</span>
          </span>
          <span data-ttu-id="2eb00-124">Se il nome dell'algoritmo specificato non esegue il mapping a un'implementazione ECDSA, questo metodo restituisce <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-124">If the specified algorithm name does not map to an ECDSA implementation, this method returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2eb00-125">Se si sviluppa la propria implementazione di un <xref:System.Security.Cryptography.ECDsa> dell'oggetto, è possibile utilizzare il <xref:System.Security.Cryptography.ECDsa.Create%28System.String%29> overload del metodo per creare una classe personalizzata `algorithm` stringa che specifica l'implementazione.</span><span class="sxs-lookup"><span data-stu-id="2eb00-125">If you develop your own implementation of an <xref:System.Security.Cryptography.ECDsa> object, you can use the <xref:System.Security.Cryptography.ECDsa.Create%28System.String%29> method overload to create a custom `algorithm` string that specifies your implementation.</span></span>  
  
 <span data-ttu-id="2eb00-126">Se si specifica un valore personalizzato per il `algorithm` parametro, il <xref:System.Security.Cryptography.CryptoConfig> oggetto verrà utilizzato per determinare se è possibile creare un oggetto ECDSA.</span><span class="sxs-lookup"><span data-stu-id="2eb00-126">If you specify a custom value for the `algorithm` parameter, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDSA object can be created.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2eb00-127">Il valore del parametro <paramref name="algorithm" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-127">The <paramref name="algorithm" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExportExplicitParameters">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Security.Cryptography.ECParameters ExportExplicitParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportExplicitParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Cryptography::ECParameters ExportExplicitParameters(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="2eb00-128">
            <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-128">
              <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-129">Quando ne viene eseguito l'override in una classe derivata, esporta i parametri espliciti per una curva ellittica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-129">When overridden in a derived class, exports the explicit parameters for an elliptic curve.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-130">Parametri che rappresentano il punto sulla curva per questa chiave, usando il formato della curva esplicita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-130">The parameters representing the point on the curve for this key, using the explicit curve format.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2eb00-131">Una classe derivata deve eseguire l'override di questo metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-131">A derived class must override this method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Security.Cryptography.ECCurve" />
        <altmember cref="T:System.Security.Cryptography.ECParameters" />
      </Docs>
    </Member>
    <Member MemberName="ExportParameters">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Security.Cryptography.ECParameters ExportParameters(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExportParameters (includePrivateParameters As Boolean) As ECParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Cryptography::ECParameters ExportParameters(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ECParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">
          <span data-ttu-id="2eb00-132">
            <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-132">
              <see langword="true" /> to include private parameters; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-133">Quando ne viene eseguito l'override in una classe derivata, esporta i parametri denominati o espliciti per una curva ellittica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-133">When overridden in a derived class, exports the named or explicit parameters for an elliptic curve.</span>
          </span>
          <span data-ttu-id="2eb00-134">Se la curva ha un nome, il campo <see cref="F:System.Security.Cryptography.ECParameters.Curve" /> contiene i parametri della curva denominata. In caso contrario, contiene i parametri espliciti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-134">If the curve has a name, the <see cref="F:System.Security.Cryptography.ECParameters.Curve" /> field contains named curve parameters, otherwise it         contains explicit parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-135">Parametri che rappresentano il punto sulla curva per questa chiave.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-135">The parameters representing the point on the curve for this key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2eb00-136">Una classe derivata deve eseguire l'override di questo metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-136">A derived class must override this method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Security.Cryptography.ECCurve" />
        <altmember cref="T:System.Security.Cryptography.ECParameters" />
        <altmember cref="F:System.Security.Cryptography.ECParameters.Curve" />
      </Docs>
    </Member>
    <Member MemberName="FromXmlString">
      <MemberSignature Language="C#" Value="public override void FromXmlString (string xmlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXmlString(string xmlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.FromXmlString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXmlString (xmlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXmlString(System::String ^ xmlString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlString">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateKey">
      <MemberSignature Language="C#" Value="public virtual void GenerateKey (System.Security.Cryptography.ECCurve curve);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateKey(valuetype System.Security.Cryptography.ECCurve curve) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateKey (curve As ECCurve)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateKey(System::Security::Cryptography::ECCurve curve);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="curve" Type="System.Security.Cryptography.ECCurve" />
      </Parameters>
      <Docs>
        <param name="curve">
          <span data-ttu-id="2eb00-137">Curva da usare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-137">The curve to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-138">Quando ne viene eseguito l'override in una classe derivata, genera una nuova coppia di chiavi pubblica/privata per la curva specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-138">When overridden in a derived class, generates a new public/private key pair for the specified curve.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2eb00-139">Una classe derivata deve eseguire l'override di questo metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-139">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="HashData">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2eb00-140">Calcola il valore hash dei dati binari.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-140">Computes the hash value of binary data.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HashData">
      <MemberSignature Language="C#" Value="protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] HashData(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HashData (data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ HashData(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="data">
          <span data-ttu-id="2eb00-141">Flusso binario per la codifica hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-141">The binary stream to hash.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="2eb00-142">Algoritmo da usare per la codifica hash dei dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-142">The algorithm to use to hash the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-143">Quando sottoposto a override in una classe derivata, calcola il valore hash del flusso binario specificato usando l'algoritmo hash specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-143">When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-144">Dati con hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-144">The hashed data.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="2eb00-145">Una classe derivata deve eseguire l'override di questo metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-145">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="HashData">
      <MemberSignature Language="C#" Value="protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] HashData(unsigned int8[] data, int32 offset, int32 count, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function HashData (data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Byte&gt; ^ HashData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="data">
          <span data-ttu-id="2eb00-146">Dati per i quali si desidera generare un hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-146">The data to be hashed.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2eb00-147">Indice del primo byte in <c>data</c> per cui si deve calcolare il codice hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-147">The index of the first byte in <c>data</c> to be hashed.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2eb00-148">Numero di byte per cui calcolare il codice hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-148">The number of bytes to hash.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="2eb00-149">Algoritmo da usare per la codifica hash dei dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-149">The algorithm to use to hash the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-150">Quando sottoposto a override in una classe derivata, calcola il valore hash della parte specificata di una matrice di byte usando l'algoritmo hash specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-150">When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-151">Dati con hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-151">The hashed data.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="2eb00-152">Una classe derivata deve eseguire l'override di questo metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-152">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ImportParameters">
      <MemberSignature Language="C#" Value="public virtual void ImportParameters (System.Security.Cryptography.ECParameters parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportParameters(valuetype System.Security.Cryptography.ECParameters parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ImportParameters (parameters As ECParameters)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ImportParameters(System::Security::Cryptography::ECParameters parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Security.Cryptography.ECParameters" />
      </Parameters>
      <Docs>
        <param name="parameters">
          <span data-ttu-id="2eb00-153">Parametri della curva.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-153">The curve parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-154">Quando ne viene eseguito l'override in una classe derivata, importa i parametri specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-154">When overridden in a derived class, imports the specified parameters.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2eb00-155">Una classe derivata deve eseguire l'override di questo metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-155">A derived class must override this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="KeyExchangeAlgorithm">
      <MemberSignature Language="C#" Value="public override string KeyExchangeAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string KeyExchangeAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property KeyExchangeAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ KeyExchangeAlgorithm { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2eb00-156">Ottiene il nome dell'algoritmo di scambio delle chiavi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-156">Gets the name of the key exchange algorithm.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2eb00-157">Sempre <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-157">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2eb00-158">Questa proprietà viene ereditata dalla <xref:System.Security.Cryptography.AsymmetricAlgorithm> classe di base.</span><span class="sxs-lookup"><span data-stu-id="2eb00-158">This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.</span></span>  
  
 <span data-ttu-id="2eb00-159">L'algoritmo digitale firma algoritmo ECDSA (ELLIPTIC Curve) viene utilizzato per la generazione di firme digitali; non è utilizzato per la derivazione della chiave, pertanto, questa proprietà restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="2eb00-159">The Elliptic Curve Digital Signature Algorithm (ECDSA) is used for digital signature generation; it is not used for key derivation Therefore, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureAlgorithm">
      <MemberSignature Language="C#" Value="public override string SignatureAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignatureAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SignatureAlgorithm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SignatureAlgorithm { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2eb00-160">Ottiene il nome dell'algoritmo di firma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-160">Gets the name of the signature algorithm.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2eb00-161">Stringa "ECDsa".</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-161">The string "ECDsa".</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignData">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2eb00-162">Calcola il valore hash dei dati specificati e lo firma.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-162">Computes the hash value of the specified data and signs it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public virtual byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SignData(unsigned int8[] data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignData (data As Byte(), hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="data">
          <span data-ttu-id="2eb00-163">Dati di input per cui calcolare il valore hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-163">The input data for which to compute the hash.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="2eb00-164">Algoritmo hash da usare per creare il valore hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-164">The hash algorithm to use to create the hash value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-165">Calcola il valore hash della matrice di byte specificata usando l'algoritmo hash specificato e firma il valore hash risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-165">Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-166">Firma ECDSA per i dati specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-166">The ECDSA signature for the specified data.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2eb00-167">
            <paramref name="data" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-167">
              <paramref name="data" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2eb00-168">
            <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-168">
              <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          </span>
          <span data-ttu-id="2eb00-169">è <see langword="null" /> o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-169">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SignData(class System.IO.Stream data, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignData (data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignData(System::IO::Stream ^ data, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="data">
          <span data-ttu-id="2eb00-170">Flusso di input per cui calcolare il valore hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-170">The input stream for which to compute the hash.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="2eb00-171">Algoritmo hash da usare per creare il valore hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-171">The hash algorithm to use to create the hash value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-172">Calcola il valore hash del flusso specificato usando l'algoritmo hash specificato e firma il valore hash risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-172">Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-173">Firma ECDSA per i dati specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-173">The ECDSA signature for the specified data.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2eb00-174">
            <paramref name="data" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-174">
              <paramref name="data" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2eb00-175">
            <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-175">
              <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          </span>
          <span data-ttu-id="2eb00-176">è <see langword="null" /> o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-176">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignData">
      <MemberSignature Language="C#" Value="public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SignData(unsigned int8[] data, int32 offset, int32 count, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignData (data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ SignData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="data">
          <span data-ttu-id="2eb00-177">Dati di input per cui calcolare il valore hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-177">The input data for which to compute the hash.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2eb00-178">Offset nella matrice dal quale iniziare a usare i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-178">The offset into the array at which to begin using data.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2eb00-179">Numero di byte nella matrice da usare come dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-179">The number of bytes in the array to use as data.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="2eb00-180">Algoritmo hash da usare per creare il valore hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-180">The hash algorithm to use to create the hash value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-181">Calcola il valore hash di una parte della matrice di byte specificata usando l'algoritmo hash specificato e firma il valore hash risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-181">Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-182">Firma ECDSA per i dati specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-182">The ECDSA signature for the specified data.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2eb00-183">
            <paramref name="data" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-183">
              <paramref name="data" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2eb00-184">
            <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-184">
              <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          </span>
          <span data-ttu-id="2eb00-185">è <see langword="null" /> o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-185">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2eb00-186">
            <paramref name="offset" /> è minore di zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-186">
              <paramref name="offset" /> is less than zero.</span>
          </span>
          <span data-ttu-id="2eb00-187">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-187">-or-</span>
          </span>
          <span data-ttu-id="2eb00-188">
            <paramref name="count" /> è minore di zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-188">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="2eb00-189">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-189">-or-</span>
          </span>
          <span data-ttu-id="2eb00-190">
            <paramref name="offset" /> + <paramref name="count" /> - 1 restituisce un indice che eccede il limite superiore di <paramref name="data" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-190">
              <paramref name="offset" /> + <paramref name="count" /> – 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SignHash">
      <MemberSignature Language="C#" Value="public abstract byte[] SignHash (byte[] hash);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SignHash(unsigned int8[] hash) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SignHash (hash As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Byte&gt; ^ SignHash(cli::array &lt;System::Byte&gt; ^ hash);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hash">
          <span data-ttu-id="2eb00-191">Valore hash dei dati da firmare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-191">The hash value of the data that is being signed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-192">Genera una firma digitale per il valore hash specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-192">Generates a digital signature for the specified hash value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-193">Firma digitale costituita dal valore hash specificato crittografato con la chiave privata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-193">A digital signature that consists of the given hash value encrypted with the private key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2eb00-194">Il valore del parametro <paramref name="hash" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-194">The <paramref name="hash" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToXmlString">
      <MemberSignature Language="C#" Value="public override string ToXmlString (bool includePrivateParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToXmlString(bool includePrivateParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXmlString (includePrivateParameters As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToXmlString(bool includePrivateParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrivateParameters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrivateParameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryHashData">
      <MemberSignature Language="C#" Value="protected virtual bool TryHashData (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool TryHashData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function TryHashData (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool TryHashData(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="bytesWritten" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySignData">
      <MemberSignature Language="C#" Value="public virtual bool TrySignData (ReadOnlySpan&lt;byte&gt; data, Span&lt;byte&gt; destination, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySignData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.Span`1&lt;unsigned int8&gt; destination, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySignData (data As ReadOnlySpan(Of Byte), destination As Span(Of Byte), hashAlgorithm As HashAlgorithmName, ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySignData(ReadOnlySpan&lt;System::Byte&gt; data, Span&lt;System::Byte&gt; destination, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
        <Parameter Name="bytesWritten" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySignHash">
      <MemberSignature Language="C#" Value="public virtual bool TrySignHash (ReadOnlySpan&lt;byte&gt; hash, Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TrySignHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrySignHash (hash As ReadOnlySpan(Of Byte), destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TrySignHash(ReadOnlySpan&lt;System::Byte&gt; hash, Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="hash">To be added.</param>
        <param name="destination">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="VerifyData">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2eb00-195">Verifica che la firma digitale sia valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-195">Verifies that a digital signature is valid.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(unsigned int8[] data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="signature" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="data">
          <span data-ttu-id="2eb00-196">Dati firmati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-196">The signed data.</span>
          </span>
        </param>
        <param name="signature">
          <span data-ttu-id="2eb00-197">Dati della firma da verificare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-197">The signature data to be verified.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="2eb00-198">Algoritmo hash usato per creare il valore hash dei dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-198">The hash algorithm used to create the hash value of the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-199">Verifica che una firma digitale sia valida calcolando il valore hash dei dati specificati usando l'algoritmo hash specificato e confrontandolo con la firma fornita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-199">Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-200">
            <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-200">
              <see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2eb00-201">
            <paramref name="data" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-201">
              <paramref name="data" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2eb00-202">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-202">-or-</span>
          </span>
          <span data-ttu-id="2eb00-203">
            <paramref name="signature" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-203">
              <paramref name="signature" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2eb00-204">
            <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-204">
              <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          </span>
          <span data-ttu-id="2eb00-205">è <see langword="null" /> o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-205">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyData(class System.IO.Stream data, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Function VerifyData (data As Stream, signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool VerifyData(System::IO::Stream ^ data, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.IO.Stream" />
        <Parameter Name="signature" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="data">
          <span data-ttu-id="2eb00-206">Dati firmati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-206">The signed data.</span>
          </span>
        </param>
        <param name="signature">
          <span data-ttu-id="2eb00-207">Dati della firma da verificare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-207">The signature data to be verified.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="2eb00-208">Algoritmo hash usato per creare il valore hash dei dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-208">The hash algorithm used to create the hash value of the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-209">Verifica che una firma digitale sia valida calcolando il valore hash del flusso specificato usando l'algoritmo hash specificato e confrontandolo con la firma fornita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-209">Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-210">
            <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-210">
              <see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2eb00-211">
            <paramref name="data" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-211">
              <paramref name="data" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2eb00-212">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-212">-or-</span>
          </span>
          <span data-ttu-id="2eb00-213">
            <paramref name="signature" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-213">
              <paramref name="signature" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2eb00-214">
            <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-214">
              <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          </span>
          <span data-ttu-id="2eb00-215">è <see langword="null" /> o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-215">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public virtual bool VerifyData (ReadOnlySpan&lt;byte&gt; data, ReadOnlySpan&lt;byte&gt; signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyData(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; data, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyData (data As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifyData(ReadOnlySpan&lt;System::Byte&gt; data, ReadOnlySpan&lt;System::Byte&gt; signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="signature">To be added.</param>
        <param name="hashAlgorithm">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyData">
      <MemberSignature Language="C#" Value="public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyData(unsigned int8[] data, int32 offset, int32 count, unsigned int8[] signature, valuetype System.Security.Cryptography.HashAlgorithmName hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyData (data As Byte(), offset As Integer, count As Integer, signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifyData(cli::array &lt;System::Byte&gt; ^ data, int offset, int count, cli::array &lt;System::Byte&gt; ^ signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="signature" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="data">
          <span data-ttu-id="2eb00-216">Dati firmati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-216">The signed data.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2eb00-217">Indice iniziale dal quale calcolare il codice hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-217">The starting index at which to compute the hash.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2eb00-218">Numero di byte per cui calcolare il codice hash.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-218">The number of bytes to hash.</span>
          </span>
        </param>
        <param name="signature">
          <span data-ttu-id="2eb00-219">Dati della firma da verificare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-219">The signature data to be verified.</span>
          </span>
        </param>
        <param name="hashAlgorithm">
          <span data-ttu-id="2eb00-220">Algoritmo hash usato per creare il valore hash dei dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-220">The hash algorithm used to create the hash value of the data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-221">Verifica che una firma digitale sia valida calcolando il valore hash dei dati in una parte di matrice di byte usando l'algoritmo hash specificato e confrontandolo con la firma fornita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-221">Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-222">
            <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-222">
              <see langword="true" /> if the signature is valid; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2eb00-223">
            <paramref name="data" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-223">
              <paramref name="data" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="2eb00-224">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-224">-or-</span>
          </span>
          <span data-ttu-id="2eb00-225">
            <paramref name="signature" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-225">
              <paramref name="signature" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2eb00-226">
            <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-226">
              <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /></span>
          </span>
          <span data-ttu-id="2eb00-227">è <see langword="null" /> o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-227">is <see langword="null" /> or <see cref="F:System.String.Empty" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2eb00-228">
            <paramref name="offset" /> è minore di zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-228">
              <paramref name="offset" /> is less than zero.</span>
          </span>
          <span data-ttu-id="2eb00-229">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-229">-or-</span>
          </span>
          <span data-ttu-id="2eb00-230">
            <paramref name="count" /> è minore di zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-230">
              <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="2eb00-231">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-231">-or-</span>
          </span>
          <span data-ttu-id="2eb00-232">
            <paramref name="offset" /> + <paramref name="count" /> - 1 restituisce un indice che eccede il limite superiore di <paramref name="data" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-232">
              <paramref name="offset" /> + <paramref name="count" /> – 1 results in an index that is beyond the upper bound of <paramref name="data" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyHash">
      <MemberSignature Language="C#" Value="public abstract bool VerifyHash (byte[] hash, byte[] signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyHash(unsigned int8[] hash, unsigned int8[] signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function VerifyHash (hash As Byte(), signature As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool VerifyHash(cli::array &lt;System::Byte&gt; ^ hash, cli::array &lt;System::Byte&gt; ^ signature);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.0.0</AssemblyVersion>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.Byte[]" />
        <Parameter Name="signature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hash">
          <span data-ttu-id="2eb00-233">Valore hash di un blocco di dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-233">The hash value of a block of data.</span>
          </span>
        </param>
        <param name="signature">
          <span data-ttu-id="2eb00-234">Firma digitale da verificare per.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-234">The digital signature to be verified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2eb00-235">Verifica una firma digitale a fronte del valore hash specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-235">Verifies a digital signature against the specified hash value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2eb00-236">
            <see langword="true" /> se il valore hash è uguale alla firma decrittografata. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2eb00-236">
              <see langword="true" /> if the hash value equals the decrypted signature; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2eb00-237">La firma viene prima decrittografata con la chiave pubblica e confrontata con il valore hash per la verifica.</span><span class="sxs-lookup"><span data-stu-id="2eb00-237">The signature is first decrypted by using the public key, and then compared to the hash value for verification.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyHash">
      <MemberSignature Language="C#" Value="public virtual bool VerifyHash (ReadOnlySpan&lt;byte&gt; hash, ReadOnlySpan&lt;byte&gt; signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VerifyHash(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; hash, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyHash (hash As ReadOnlySpan(Of Byte), signature As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool VerifyHash(ReadOnlySpan&lt;System::Byte&gt; hash, ReadOnlySpan&lt;System::Byte&gt; signature);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Algorithms</AssemblyName>
        <AssemblyVersion>4.3.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="signature" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="hash">To be added.</param>
        <param name="signature">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>