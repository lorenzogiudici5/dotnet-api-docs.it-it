<Type Name="DispatcherObject" FullName="System.Windows.Threading.DispatcherObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="52344fe717e53f588da77f8014ea090d0adde624" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39886230" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DispatcherObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherObject abstract" />
  <TypeSignature Language="F#" Value="type DispatcherObject = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta un oggetto associato a un oggetto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo il thread che il <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> è stato creato sarà accessibile il <xref:System.Windows.Threading.DispatcherObject> direttamente.  Per accedere a un <xref:System.Windows.Threading.DispatcherObject> da un thread diverso da quello di <xref:System.Windows.Threading.DispatcherObject> è stato creato, chiamare <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> sul <xref:System.Windows.Threading.Dispatcher> il <xref:System.Windows.Threading.DispatcherObject> è associato.  
  
 Le sottoclassi della <xref:System.Windows.Threading.DispatcherObject> che devono applicare thread safety può effettuare una chiamata <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> su tutti i metodi pubblici.  In questo modo si garantisce il thread chiamante è il thread che la <xref:System.Windows.Threading.DispatcherObject> è stato creato.  
  
 Oggetto <xref:System.Windows.Threading.DispatcherObject> non è possibile creare in modo indipendente; vale a dire, vengono protetti tutti i costruttori.  
  
 Gli oggetti che derivano da <xref:System.Windows.Threading.DispatcherObject> presentano affinità di thread.  
  
 Gli oggetti che derivano da <xref:System.Windows.Freezable> sono a thread libero quando sono bloccati.  Per altre informazioni, vedere [Cenni preliminari sugli oggetti Freezable](~/docs/framework/wpf/advanced/freezable-objects-overview.md).  
  
 ]]></format>
    </remarks>
    <threadsafe>Qualsiasi membro pubblico <see langword="static" /> membri di questo tipo sono thread-safe. I membri di istanza non sono garantiti come thread-safe.  
  
Questo oggetto sono accessibili solo dal thread in cui è stato creato. Tenta di accedervi da altri thread genererà un <see cref="T:System.InvalidOperationException" />. <see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> o <see cref="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> forniscono supporto per il marshalling nel thread corretto.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DispatcherObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DispatcherObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcherObject.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina se il thread chiamante ha accesso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <returns>
          <see langword="true" /> se il thread chiamate ha accesso a questo oggetto; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo il thread di <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> è stato creato sarà accessibile il <xref:System.Windows.Threading.DispatcherObject>.  
  
 Qualsiasi thread può verificare se dispone di accesso a questo oggetto <xref:System.Windows.Threading.DispatcherObject>.  
  
 La differenza tra <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> e <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> è che <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> restituisce un valore booleano che specifica se il thread chiamante ha accesso a questa <xref:System.Windows.Threading.DispatcherObject> e <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> genera un'eccezione se il thread chiamante non ha accesso per il Ciò <xref:System.Windows.Threading.DispatcherObject>.  
  
 Chiamare questo metodo è identica alla chiamata <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> sull'oggetto associato <xref:System.Windows.Threading.Dispatcher> oggetto.  
  
   
  
## Examples  
 L'esempio seguente usa <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> per determinare se un thread abbia accesso al thread che un <xref:System.Windows.Controls.Button> è stato creato.  Il <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> metodo su di <xref:System.Windows.Controls.Button> viene chiamato per verificare l'accesso al thread.  Se il thread chiamante ha accesso, il <xref:System.Windows.Controls.Button> viene aggiornata tramite l'accesso solo i membri del <xref:System.Windows.Controls.Button>; in caso contrario, un delegato che accetta un <xref:System.Windows.Controls.Button> come argomento, viene inserito nel <xref:System.Windows.Threading.Dispatcher> del <xref:System.Windows.Controls.Button>.  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Windows.Threading.Dispatcher" /> associato a <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <value>Dispatcher.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo il thread che il <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> è stato creato sarà accessibile il <xref:System.Windows.Threading.DispatcherObject> direttamente.  Per accedere a un <xref:System.Windows.Threading.DispatcherObject> da un thread diverso da quello di <xref:System.Windows.Threading.DispatcherObject> è stato creato, chiamare <xref:System.Windows.Threading.Dispatcher.Invoke%2A> e <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> sul <xref:System.Windows.Threading.Dispatcher> il <xref:System.Windows.Threading.DispatcherObject> è associato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcherObject.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Impone che il thread chiamante abbia accesso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo il thread di <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> è stato creato sarà accessibile il <xref:System.Windows.Threading.DispatcherObject>.  
  
 Qualsiasi thread può verificare se dispone di accesso a questo oggetto <xref:System.Windows.Threading.DispatcherObject>.  
  
 La differenza tra <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> e <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> è che <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> restituisce un valore booleano che specifica se il thread chiamante ha accesso a questa <xref:System.Windows.Threading.DispatcherObject> e <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> genera un'eccezione se il thread chiamante non ha accesso per il Ciò <xref:System.Windows.Threading.DispatcherObject>.  
  
   
  
## Examples  
 L'esempio seguente usa <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> per determinare se un thread abbia accesso al thread che un <xref:System.Windows.Controls.Button> è stato creato.  Se il thread chiamante non ha accesso, un <xref:System.InvalidOperationException> viene generata un'eccezione.  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il thread chiamante non ha accesso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>