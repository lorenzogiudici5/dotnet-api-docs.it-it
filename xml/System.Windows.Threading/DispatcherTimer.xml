<Type Name="DispatcherTimer" FullName="System.Windows.Threading.DispatcherTimer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2a9d009098a7d8eaa53affce0dc2ed5c47170486" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36463689" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DispatcherTimer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DispatcherTimer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherTimer" />
  <TypeSignature Language="VB.NET" Value="Public Class DispatcherTimer" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherTimer" />
  <TypeSignature Language="F#" Value="type DispatcherTimer = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Timer integrato nella coda <see cref="T:System.Windows.Threading.Dispatcher" /> che viene elaborato in un intervallo di tempo specificato e con una priorità specificata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Threading.DispatcherTimer> viene rivalutata nella parte superiore di ogni <xref:System.Windows.Threading.Dispatcher> ciclo.  
  
 I timer non sono garantiti come eseguiti esattamente quando si verifica l'intervallo di tempo, ma essi vengono sicuramente non eseguito prima che si verifichi l'intervallo di tempo.  Infatti <xref:System.Windows.Threading.DispatcherTimer> operazioni vengono posizionate nel <xref:System.Windows.Threading.Dispatcher> coda come le altre operazioni.  Quando il <xref:System.Windows.Threading.DispatcherTimer> viene eseguita l'operazione è dipendente da altri processi in coda e le priorità.  
  
 Se un <xref:System.Timers.Timer?displayProperty=nameWithType> viene utilizzata in un [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] dell'applicazione, vale la pena notare che il <xref:System.Timers.Timer?displayProperty=nameWithType> viene eseguito in un altro thread il [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] thread.  Per accedere a oggetti nel [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] thread, è necessario inserire l'operazione nel <xref:System.Windows.Threading.Dispatcher> del [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] thread utilizzando <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. Motivi per l'utilizzo di un <xref:System.Windows.Threading.DispatcherTimer> anziché un <xref:System.Timers.Timer?displayProperty=nameWithType> prevedono che il <xref:System.Windows.Threading.DispatcherTimer> viene eseguito sullo stesso thread come il <xref:System.Windows.Threading.Dispatcher> e un <xref:System.Windows.Threading.DispatcherPriority> può essere impostata sul <xref:System.Windows.Threading.DispatcherTimer>.  
  
 Oggetto <xref:System.Windows.Threading.DispatcherTimer> verrà mantenere attivo un oggetto ogni volta che i metodi dell'oggetto sono associati al timer.  
  
## Examples  
 Nell'esempio seguente viene creata una <xref:System.Windows.Threading.DispatcherTimer> che consente di aggiornare il contenuto di un <xref:System.Windows.Controls.Label> e chiama il <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> metodo sul <xref:System.Windows.Input.CommandManager>.  
  
 Un <xref:System.Windows.Threading.DispatcherTimer> oggetto denominato `dispatcherTimer` viene creato.  Il gestore dell'evento `dispatcherTimer_Tick` viene aggiunto per il <xref:System.Windows.Threading.DispatcherTimer.Tick> evento di `dispatcherTimer`.  Il <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> è impostato su 1 secondo tramite un <xref:System.Windows.Duration.TimeSpan%2A> oggetto e il timer è stato avviato.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 Il <xref:System.Windows.Threading.DispatcherTimer.Tick> gestore eventi aggiorna un <xref:System.Windows.Controls.Label> che visualizza il secondo corrente, e chiama <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> sul <xref:System.Windows.Input.CommandManager>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> viene eseguito sul <xref:System.Windows.Threading.Dispatcher> del thread corrente <xref:System.Windows.Threading.DispatcherPriority.Background> priorità.  Per specificare un altro <xref:System.Windows.Threading.Dispatcher>, utilizzare il costruttore seguente: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer priority" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">Priorità con cui richiamare il timer.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Threading.DispatcherTimer" /> che elabora gli eventi del timer con la priorità specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> viene eseguito sul <xref:System.Windows.Threading.Dispatcher> del thread corrente.  Per specificare un altro <xref:System.Windows.Threading.Dispatcher>, utilizzare il costruttore seguente: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (priority, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="priority">Priorità con cui richiamare il timer.</param>
        <param name="dispatcher">Dispatcher cui è associato il timer.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Threading.DispatcherTimer" /> che viene eseguita sull'oggetto <see cref="T:System.Windows.Threading.Dispatcher" /> specificato con la priorità indicata.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dispatcher" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (TimeSpan interval, System.Windows.Threading.DispatcherPriority priority, EventHandler callback, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan interval, valuetype System.Windows.Threading.DispatcherPriority priority, class System.EventHandler callback, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(TimeSpan interval, System::Windows::Threading::DispatcherPriority priority, EventHandler ^ callback, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : TimeSpan * System.Windows.Threading.DispatcherPriority * EventHandler * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (interval, priority, callback, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="callback" Type="System.EventHandler" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="interval">Periodo tra unità di tempo.</param>
        <param name="priority">Priorità con cui richiamare il timer.</param>
        <param name="callback">Gestore eventi da chiamare quando si verifica l'evento <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" />.</param>
        <param name="dispatcher">Dispatcher cui è associato il timer.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Threading.DispatcherTimer" /> che utilizza l'intervallo di tempo, la priorità, il gestore eventi e l'oggetto <see cref="T:System.Windows.Threading.Dispatcher" /> specificati.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="interval" /> è minore di 0 o maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Windows.Threading.Dispatcher" /> associato a questo oggetto <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <value>Dispatcher.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Threading.DispatcherTimer.Dispatcher%2A> viene determinata al momento della creazione di proprietà di <xref:System.Windows.Threading.DispatcherTimer> oggetto.  Il <xref:System.Windows.Threading.Dispatcher> è impostata su corrente <xref:System.Windows.Threading.Dispatcher> al momento della creazione, a meno che un altro <xref:System.Windows.Threading.Dispatcher> è specificato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public TimeSpan Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Interval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : TimeSpan with get, set" Usage="System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il periodo tra unità di tempo del timer.</summary>
        <value>Periodo tra unità di tempo. Il valore predefinito è 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I timer non sono garantiti come eseguiti esattamente quando si verifica l'intervallo di tempo, ma essi vengono sicuramente non eseguito prima che si verifichi l'intervallo di tempo.  Infatti <xref:System.Windows.Threading.DispatcherTimer> operazioni vengono posizionate nel <xref:System.Windows.Threading.Dispatcher> coda come le altre operazioni.  Quando il <xref:System.Windows.Threading.DispatcherTimer> viene eseguita l'operazione è dipendente da altri processi in coda e le priorità.  
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Windows.Threading.DispatcherTimer>.  Un nuovo <xref:System.Windows.Threading.DispatcherTimer> oggetto denominato `dispatcherTimer` viene creato.  Il gestore dell'evento `dispatcherTimer_Tick` viene aggiunto per il <xref:System.Windows.Threading.DispatcherTimer.Tick> evento.  Il <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> è impostato su 1 secondo tramite un <xref:System.TimeSpan> oggetto.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="interval" /> è minore di 0 o maggiore di <see cref="F:System.Int32.MaxValue" /> millisecondi.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il timer è in esecuzione.</summary>
        <value>
          <see langword="true" /> se il timer è abilitato; in caso contrario, <see langword="false" />.  Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> deve essere impostato su `true` per il <xref:System.Windows.Threading.DispatcherTimer.Tick> evento da generare.  
  
 La chiamata <xref:System.Windows.Threading.DispatcherTimer.Start%2A> imposta <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `true`.  
  
 La chiamata <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> imposta <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `false`.  
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Windows.Threading.DispatcherTimer>.  Un nuovo <xref:System.Windows.Threading.DispatcherTimer> oggetto denominato `dispatcherTimer` viene creato.  Il gestore dell'evento `dispatcherTimer_Tick` viene aggiunto per il <xref:System.Windows.Threading.DispatcherTimer.Tick> evento.  Il <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> è impostato su 1 secondo tramite un <xref:System.TimeSpan> oggetto.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="dispatcherTimer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avvia <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'impostazione <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `false` quando viene avviato il timer si arresta il timer.  
  
 L'impostazione <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `true` quando viene arrestato il timer avvia il timer.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A> imposta <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `true`.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A> Reimposta il timer <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Windows.Threading.DispatcherTimer>.  Un nuovo <xref:System.Windows.Threading.DispatcherTimer> oggetto denominato `dispatcherTimer` viene creato.  Il gestore dell'evento `dispatcherTimer_Tick` viene aggiunto per il <xref:System.Windows.Threading.DispatcherTimer.Tick> evento.  Il <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> è impostato su 1 secondo tramite un <xref:System.Windows.Duration.TimeSpan%2A> oggetto.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="dispatcherTimer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Arresta <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'impostazione <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `false` quando viene avviato il timer si arresta il timer.  
  
 L'impostazione <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `true` quando viene arrestato il timer avvia il timer.  
  
 La chiamata <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> imposta <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un oggetto dati definiti dall'utente.</summary>
        <value>Dati definiti dall'utente.  Il valore predefinito è <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.DispatcherTimer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al termine dell'intervallo del timer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Windows.Threading.DispatcherTimer.Tick> gestore dell'evento.  Il gestore eventi aggiorna una <xref:System.Windows.Controls.Label> che visualizza il secondo corrente, e chiama <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> sul <xref:System.Windows.Input.CommandManager>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>