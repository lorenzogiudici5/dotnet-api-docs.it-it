<Type Name="StronglyTypedResourceBuilder" FullName="System.Resources.Tools.StronglyTypedResourceBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="73821694b44de6d89969923dba3f331aa67d31f0" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51903112" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class StronglyTypedResourceBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StronglyTypedResourceBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.Tools.StronglyTypedResourceBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class StronglyTypedResourceBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class StronglyTypedResourceBuilder abstract sealed" />
  <TypeSignature Language="F#" Value="type StronglyTypedResourceBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce il supporto per risorse fortemente tipizzate. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, le risorse di separano il codice dal contenuto all'interno di un'applicazione. Creazione e l'utilizzo di queste risorse semplifica lo sviluppo di applicazioni localizzabili. In .NET Framework, è in genere vengono utilizzate risorse usando il <xref:System.Resources.ResourceManager> (classe), che contiene metodi che forniscono l'accesso a risorse specifiche delle impostazioni cultura in fase di esecuzione. Per altre informazioni sulla creazione e l'utilizzo delle risorse, vedere [risorse nelle App Desktop](https://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890).  
  
 Supporto di risorse fortemente tipizzata è una funzionalità in fase di compilazione che incapsula l'accesso alle risorse creando classi che contengono un set di statico, sola lettura (`get`) le proprietà. Ciò fornisce un modo alternativo per l'utilizzo di risorse invece di chiamare il <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> e <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType> metodi.  
  
 La funzionalità di base per il supporto di risorse fortemente tipizzata avviene tramite il <xref:System.Resources.Tools.StronglyTypedResourceBuilder> classe (così come il `/str` opzione della riga di comando nelle [Resgen.exe (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)). L'output del <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> metodo è una classe contenente proprietà fortemente tipizzate che corrispondono alle risorse a cui vengono fatto riferimento nel parametro di input. Questa classe fornisce accesso in lettura alle risorse che sono disponibili nel file elaborato.  
  
   
  
## Examples  
 L'esempio seguente genera una classe denominata `DemoResources` che viene scritto in c# o Visual Basic (a seconda del codice sorgente dell'esempio). Questa classe si trova il `DemoApp` dello spazio dei nomi e dispone di proprietà che restituiscono la bitmap di un logo e il nome di un'applicazione. Nell'esempio viene chiamato un `CreateResourceFile` metodo per creare il file. resw necessarie e richiede che un file di mappa di bit denominato logo. bmp trovata nella directory corrente dell'esempio. L'esempio di codice Usa il seguente file di risorse, denominato demo. resx:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/example1.cs#1)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/example1.vb#1)]  
  
 Il codice dell'applicazione può quindi usare la classe come indicato di seguito:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/demoresources.cs#2)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/demoresources.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Genera un file di classe contenente proprietà fortemente tipizzate che corrispondono alle risorse specificate nel parametro di input.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">Raccolta <see cref="T:System.Collections.IDictionary" /> in cui ogni coppia di chiave/valore della voce del dizionario corrisponde al nome di una risorsa e al valore della risorsa.</param>
        <param name="baseName">Nome della classe da generare.</param>
        <param name="generatedCodeNamespace">Spazio dei nomi della classe da generare.</param>
        <param name="codeProvider">Classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> che specifica che il linguaggio in cui verrà generata la classe.</param>
        <param name="internalClass">
          <see langword="true" /> per generare una classe interna; <see langword="false" /> per generare una classe pubblica.</param>
        <param name="unmatchable">Matrice che contiene il nome di ogni risorsa per cui non è possibile generare una proprietà. Non è solitamente possibile generare una proprietà se il nome della risorsa non è un identificatore valido.</param>
        <summary>Genera un file di classe contenente proprietà fortemente tipizzate che corrispondono alle risorse a cui si fa riferimento nella raccolta specificata.</summary>
        <returns>Contenitore <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> metodo per generare una classe che fornisce un wrapper fortemente tipizzato e di sola lettura per accedere alle risorse contenute nel `resourceList` parametro.  
  
 Il <xref:System.Resources.Tools.StronglyTypedResourceBuilder> classe ignora qualsiasi nome di risorsa che inizia con i caratteri "$" o ">>". I nomi delle risorse "Culture" e "ResourceManager" sono gli identificatori non validi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceList" />, <paramref name="basename" /> o <paramref name="codeProvider" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome di un nodo della risorsa non corrisponde alla relativa chiave in <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Nome di un file RESX utilizzato come input.</param>
        <param name="baseName">Nome della classe da generare.</param>
        <param name="generatedCodeNamespace">Spazio dei nomi della classe da generare.</param>
        <param name="codeProvider">Classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> che specifica che il linguaggio in cui verrà generata la classe.</param>
        <param name="internalClass">
          <see langword="true" /> per generare una classe interna; <see langword="false" /> per generare una classe pubblica.</param>
        <param name="unmatchable">Matrice <see cref="T:System.String" /> che contiene il nome di ogni risorsa per cui non è possibile generare una proprietà. Non è solitamente possibile generare una proprietà se il nome della risorsa non è un identificatore valido.</param>
        <summary>Genera un file di classe contenente proprietà fortemente tipizzate che corrispondono alle risorse nel file RESX specificato.</summary>
        <returns>Contenitore <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> metodo per generare una classe che fornisce accesso fortemente tipizzata e di sola lettura alle risorse contenute nel `resxFile` parametro.  
  
 Il <xref:System.Resources.Tools.StronglyTypedResourceBuilder> classe ignora qualsiasi nome di risorsa che inizia con i caratteri "$" o ">>". I nomi delle risorse "Culture" e "ResourceManager" sono gli identificatori non validi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basename" /> o <paramref name="codeProvider" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">Raccolta <see cref="T:System.Collections.IDictionary" /> in cui ogni coppia di chiave/valore della voce del dizionario corrisponde al nome di una risorsa e al valore della risorsa.</param>
        <param name="baseName">Nome della classe da generare.</param>
        <param name="generatedCodeNamespace">Spazio dei nomi della classe da generare.</param>
        <param name="resourcesNamespace">Spazio dei nomi della risorsa da generare.</param>
        <param name="codeProvider">Oggetto <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> che specifica che il linguaggio in cui verrà generata la classe.</param>
        <param name="internalClass">
          <see langword="true" /> per generare una classe interna; <see langword="false" /> per generare una classe pubblica.</param>
        <param name="unmatchable">Matrice <see cref="T:System.String" /> che contiene il nome di ogni risorsa per cui non è possibile generare una proprietà. Non è solitamente possibile generare una proprietà se il nome della risorsa non è un identificatore valido.</param>
        <summary>Genera un file di classe contenente proprietà fortemente tipizzate che corrispondono alle risorse a cui si fa riferimento nella raccolta specificata.</summary>
        <returns>Contenitore <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload consente di utilizzare il `resourcesNamespace` parametro per specificare lo spazio dei nomi per le risorse generate. In questo caso, il codice generato viene visualizzato come segue:  
  
```  
System.Resources.ResourceManager rm = new System.Resources.ResourceManager("<resourceNamespace>.<baseName>",typeof(baseName).Assembly);  
```  
  
 Nella maggior parte dei casi, è necessario chiamare questo metodo dal codice dell'applicazione.  
  
 Il <xref:System.Resources.Tools.StronglyTypedResourceBuilder> classe ignora qualsiasi nome di risorsa che inizia con i caratteri "$" o ">>". I nomi delle risorse "Culture" e "ResourceManager" sono gli identificatori non validi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceList" />, <paramref name="basename" /> o <paramref name="codeProvider" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome di un nodo della risorsa non corrisponde alla relativa chiave in <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Nome di un file RESX utilizzato come input.</param>
        <param name="baseName">Nome della classe da generare.</param>
        <param name="generatedCodeNamespace">Spazio dei nomi della classe da generare.</param>
        <param name="resourcesNamespace">Spazio dei nomi della risorsa da generare.</param>
        <param name="codeProvider">Classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> che specifica che il linguaggio in cui verrà generata la classe.</param>
        <param name="internalClass">
          <see langword="true" /> per generare una classe interna; <see langword="false" /> per generare una classe pubblica.</param>
        <param name="unmatchable">Matrice <see cref="T:System.String" /> che contiene il nome di ogni risorsa per cui non è possibile generare una proprietà. Non è solitamente possibile generare una proprietà se il nome della risorsa non è un identificatore valido.</param>
        <summary>Genera un file di classe contenente proprietà fortemente tipizzate che corrispondono alle risorse nel file RESX specificato.</summary>
        <returns>Contenitore <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> metodo per generare una classe che fornisce accesso fortemente tipizzata e di sola lettura alle risorse contenute nel `resxFile` parametro.  
  
 Il <xref:System.Resources.Tools.StronglyTypedResourceBuilder> classe ignora qualsiasi nome di risorsa che inizia con i caratteri "$" o ">>". I nomi delle risorse "Culture" e "ResourceManager" sono gli identificatori non validi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="basename" /> o <paramref name="codeProvider" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyResourceName">
      <MemberSignature Language="C#" Value="public static string VerifyResourceName (string key, System.CodeDom.Compiler.CodeDomProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyResourceName(string key, class System.CodeDom.Compiler.CodeDomProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName(System.String,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyResourceName (key As String, provider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VerifyResourceName(System::String ^ key, System::CodeDom::Compiler::CodeDomProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member VerifyResourceName : string * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName (key, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="provider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="key">La stringa da verificare e, se necessario, da convertire in un nome di risorsa valido.</param>
        <param name="provider">Oggetto <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> che specifica la lingua di destinazione da utilizzare.</param>
        <summary>Genera una stringa di risorsa valida in base alla stringa di input specificata e al provider di codice.</summary>
        <returns>Nome di risorsa valido derivato dal parametro <paramref name="key" />. Tutti i token non validi vengono sostituiti dal carattere di sottolineatura (_) oppure <see langword="null" /> se la stringa derivata contiene ancora caratteri non validi per la lingua specificata dal parametro <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il `key` parametro è una stringa di caratteri valida, tale stringa viene restituita. Se il `key` parametro è una stringa non valida o una stringa che contiene caratteri non validi, il <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> metodo prova a generare una stringa valida in base il `key` e `provider` parametri. Se una stringa valida può essere generata, che viene restituita una stringa. in caso contrario, `null` viene restituito.  
  
 Se il `key` parametro è una stringa vuota (""), viene restituita una stringa costituita da un solo carattere di sottolineatura (_). Se il `key` parametro non è una stringa vuota, il <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> metodo confronta ogni carattere della stringa in un set di token non valido in base alla lingua specificata dal `provider` parametro. Qualsiasi carattere non valido nella stringa viene sostituito con un carattere di sottolineatura. I caratteri che verranno sostituiti con un carattere di sottolineatura sono i seguenti:  
  
 ' ' (spazio), U + 00A0 (spazio unificatore), '.' (punto), ',' (virgola), ';' (punto e virgola), '&#124;', ' ~', ' @', '#', '%', ' ^', '&', ' *', '+', '-', '/', '\\','\<', ' > ','?', ' [', ']', '(',')', ' {', '}', ' "' (virgolette), ' '(apostrofo),':', e '!'.  
  
> [!NOTE]
>  Le risorse fortemente tipizzate non consentono l'utilizzo di parole chiave del linguaggio (ad esempio `if`, `for`e così via) come i nomi delle chiavi di risorsa. Tuttavia, il <xref:System.CodeDom> schema progettuale consente di usare parole chiave del linguaggio aggiungendo il prefisso della parola chiave with il carattere di sottolineatura. Il <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> chiamate al metodo il <xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A> metodo per applicare questo modello. Ad esempio, se si usa un nome di risorsa che è lo stesso come una parola chiave del linguaggio, ad esempio `for`, il nome viene visualizzato come `_for` nella classe di risorse fortemente tipizzata generata.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> o <paramref name="provider" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>