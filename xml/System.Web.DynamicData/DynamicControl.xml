<Type Name="DynamicControl" FullName="System.Web.DynamicData.DynamicControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b4817cd42c2e4a6c3f07602e64b15d39b5d6b410" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37606716" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicControl : System.Web.UI.Control, System.Web.DynamicData.IFieldFormattingOptions, System.Web.DynamicData.IFieldTemplateHost, System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicControl extends System.Web.UI.Control implements class System.Web.DynamicData.IFieldFormattingOptions, class System.Web.DynamicData.IFieldTemplateHost, class System.Web.UI.IAttributeAccessor" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicControl" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicControl&#xA;Inherits Control&#xA;Implements IAttributeAccessor, IFieldFormattingOptions, IFieldTemplateHost" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicControl : System::Web::UI::Control, System::Web::DynamicData::IFieldFormattingOptions, System::Web::DynamicData::IFieldTemplateHost, System::Web::UI::IAttributeAccessor" />
  <TypeSignature Language="F#" Value="type DynamicControl = class&#xA;    inherit Control&#xA;    interface IAttributeAccessor&#xA;    interface IFieldTemplateHost&#xA;    interface IFieldFormattingOptions" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldFormattingOptions</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFieldTemplateHost</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IAttributeAccessor</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.DynamicData.DynamicControl), "DynamicControl.bmp")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Visualizza il contenuto definito per il campo nei controlli con associazione a dati basati su modelli mediante le funzionalità di ASP.NET Dynamic Data.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In questo argomento  
  
-   [Introduzione](#introduction)  
  
-   [Sintassi dichiarativa](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduzione  
 Il <xref:System.Web.DynamicData.DynamicControl> controllo viene utilizzato dai controlli con associazione a dati basati su modelli, ad esempio <xref:System.Web.UI.WebControls.FormView> o <xref:System.Web.UI.WebControls.ListView>, per visualizzare un campo di dati che usa le funzionalità ASP.NET Dynamic Data in una pagina personalizzata. È anche possibile usare una <xref:System.Web.DynamicData.DynamicControl> controllare in una <xref:System.Web.UI.WebControls.TemplateField> campo di un <xref:System.Web.UI.WebControls.GridView> o un <xref:System.Web.UI.WebControls.DetailsView> controllo.  
  
 Il <xref:System.Web.DynamicData.DynamicControl> controllo fornisce funzionalità che è simile a quella del <xref:System.Web.DynamicData.DynamicField> campo. Tuttavia, poiché il <xref:System.Web.DynamicData.DynamicControl> viene utilizzato solo all'interno dei modelli, offre maggiore flessibilità nel controllo del modo in cui i dati vengono visualizzati poiché è possibile aggiungere altri elementi HTML intorno al campo. Quando si usa un <xref:System.Web.DynamicData.DynamicControl> (controllo), è possibile sfruttare le funzionalità di Dynamic Data seguenti:  
  
-   Automaticamente il rendering del controllo appropriato per un campo usando i modelli di campo, in base al tipo di dati. I modelli di campo possono essere modificati a livello globale per l'intera applicazione.  
  
-   Che fornisce la convalida di dati incorporato basata sullo schema del database. È anche possibile aggiungere tipi di convalida personalizzando il modello di dati.  
  
-   Personalizzazione del rendering dei dati per i singoli campi usando gli attributi nel modello di dati o tramite il <xref:System.Web.DynamicData.DynamicField.UIHint%2A> proprietà.  
  
 Per specificare il campo da visualizzare in una <xref:System.Web.DynamicData.DynamicControl> , impostarne il <xref:System.Web.DynamicData.DynamicControl.DataField%2A> proprietà sul nome del campo. È possibile applicare una stringa di formattazione personalizzata per il valore del campo impostando la <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> proprietà. Per impostazione predefinita, la stringa di formattazione viene applicata ai valori di campo solo quando il controllo con associazione a dati è in modalità sola lettura. Per applicare la stringa di formattazione per i valori visualizzati quando il controllo con associazione a dati è in modalità di modifica, impostare il <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> proprietà `true`. Se è un valore del campo `null`, è possibile visualizzare un titolo personalizzato impostando il <xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A> proprietà. Il <xref:System.Web.DynamicData.DynamicControl> controllo automaticamente anche possibile convertire una stringa vuota ("") valori per i valori null del campo impostando la <xref:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull%2A> proprietà `true`.  
  
 Il <xref:System.Web.DynamicData.DynamicControl> controllo supporta diverse modalità di visualizzazione. Per specificare la modalità in cui visualizzare il <xref:System.Web.DynamicData.DynamicControl> , impostarne il <xref:System.Web.DynamicData.DynamicControl.Mode%2A> proprietà. La tabella seguente illustra le diverse modalità.  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>  
 per la modalità di visualizzazione. In questo modo si impedisce all'utente di modificare i valori di un record o un campo dati. Può essere utilizzato in uno dei modelli.  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.Edit>  
 per la modalità di modifica. Ciò consente agli utenti di aggiornare i valori di un record esistente. Viene usato nel modello di modifica (in genere denominato `EditItemTemplate`).  
  
 <xref:System.Web.UI.WebControls.DataBoundControlMode.Insert>  
 per la modalità di inserimento. Ciò consente agli utenti di immettere i valori per un nuovo record. Viene usato nel modello di inserimento (in genere denominato `InsertItemTemplate`).  
  
 È possibile nascondere una <xref:System.Web.DynamicData.DynamicControl> in un controllo con associazione a dati impostando i <xref:System.Web.UI.Control.Visible%2A> proprietà `false`.  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Sintassi dichiarativa  
  
```  
<asp:DynamicControl  
    ApplyFormatInEditMode="True|False"  
    ConvertEmptyStringToNull="True|False"  
    CssClass="string"  
    DataField="string"  
    DataFormatString="string"  
    EnableViewState="True|False"  
    HtmlEncode="True|False"  
    ID="string"  
    Mode="Edit|Insert|ReadOnly"  
    NullDisplayText="string"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    runat="server"  
    UIHint="string"  
    ValidationGroup="string"  
    Visible="True|False"  
>  
</asp:DynamicControl>  
```  
  
   
  
## Examples  
 Vedere un esempio di codice in fase di esecuzione di questa funzionalità: [eseguiti](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl).  
  
 L'esempio seguente illustra come usare il <xref:System.Web.DynamicData.DynamicControl> controllare in una <xref:System.Web.UI.WebControls.ListView> controllo per visualizzare, inserire, eliminare e modificare i valori di una tabella di database. È importante notare che per rendere l'operazione di inserimento al lavoro, il <xref:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated%2A> proprietà del `rowguid` e `ModifiedDate` le colonne sono impostate su `true`.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl/VB/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.DetailsView" />
    <altmember cref="T:System.Web.UI.WebControls.FormView" />
    <altmember cref="T:System.Web.UI.WebControls.GridView" />
    <altmember cref="T:System.Web.UI.WebControls.ListView" />
    <altmember cref="T:System.Web.UI.WebControls.Repeater" />
    <altmember cref="T:System.Web.DynamicData.DynamicField" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.DynamicData.DynamicControl" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.DynamicData.DynamicControl" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicControl (System.Web.UI.WebControls.DataBoundControlMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Web.UI.WebControls.DataBoundControlMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.#ctor(System.Web.UI.WebControls.DataBoundControlMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As DataBoundControlMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicControl(System::Web::UI::WebControls::DataBoundControlMode mode);" />
      <MemberSignature Language="F#" Value="new System.Web.DynamicData.DynamicControl : System.Web.UI.WebControls.DataBoundControlMode -&gt; System.Web.DynamicData.DynamicControl" Usage="new System.Web.DynamicData.DynamicControl mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Web.UI.WebControls.DataBoundControlMode" />
      </Parameters>
      <Docs>
        <param name="mode">Uno dei valori di enumerazione che specifica la modalità del controllo.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.DynamicData.DynamicControl" /> con la modalità specificata.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyFormatInEditMode">
      <MemberSignature Language="C#" Value="public bool ApplyFormatInEditMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApplyFormatInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplyFormatInEditMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ApplyFormatInEditMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ApplyFormatInEditMode : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se la stringa di formattazione specificata dalla proprietà <see cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" /> viene applicata ai valori di campo quando il campo è in modalità di modifica.</summary>
        <value>
          <see langword="true" /> se la stringa di formattazione viene applicata; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.DynamicData.DynamicControl> controllo ha diverse modalità di visualizzazione che consentono all'utente di leggere, modificare o inserire un campo. Per impostazione predefinita, la stringa di formattazione specificata dal <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> proprietà viene applicata a un valore di campo solo quando il <xref:System.Web.DynamicData.DynamicControl> in modalità di sola lettura. Per applicare la stringa di formattazione per i valori visualizzati quando il controllo con associazione a dati è in modalità di modifica, impostare il <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> proprietà `true`.  
  
> [!NOTE]
>  Il <xref:System.Web.DynamicData.DynamicControl> controllo non rimuove automaticamente la formattazione quando viene aggiornato il campo nell'origine dati. Se non si desidera la formattazione come parte del valore archiviato, è necessario rimuovere la formattazione a livello di codice.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Mode" />
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public System.Web.DynamicData.MetaColumn Column { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Column" />
      <MemberSignature Language="VB.NET" Value="Public Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); void set(System::Web::DynamicData::MetaColumn ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Column : System.Web.DynamicData.MetaColumn with get, set" Usage="System.Web.DynamicData.DynamicControl.Column" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto colonna associato al controllo.</summary>
        <value>Oggetto colonna associato al controllo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare il <xref:System.Web.DynamicData.DynamicControl.Column%2A> proprietà per ottenere informazioni sui metadati relative a una colonna specifica. Il <xref:System.Web.DynamicData.DynamicControl.Column%2A> viene impostata automaticamente il <xref:System.Web.DynamicData.DynamicControl> controllo basato sul nome del campo specificato per il <xref:System.Web.DynamicData.DynamicControl.DataField%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Table" />
      </Docs>
    </Member>
    <Member MemberName="ConvertEmptyStringToNull">
      <MemberSignature Language="C#" Value="public bool ConvertEmptyStringToNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertEmptyStringToNull" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      <MemberSignature Language="VB.NET" Value="Public Property ConvertEmptyStringToNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertEmptyStringToNull { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ConvertEmptyStringToNull : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se i valori di stringa vuota ("") vengono convertiti automaticamente in valori Null quando il campo dati viene aggiornato nell'origine dati.</summary>
        <value>
          <see langword="true" /> se i valori di stringa vuota vengono convertiti automaticamente in valori Null; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.WebControls.Parameter> oggetto del controllo origine dati include anche una proprietà denominata <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A?displayProperty=nameWithType>. Questa proprietà esegue la stessa funzione. Assicurarsi che entrambe le proprietà siano impostate in modo appropriato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CssClass">
      <MemberSignature Language="C#" Value="public virtual string CssClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CssClass" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.CssClass" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CssClass As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CssClass { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CssClass : string with get, set" Usage="System.Web.DynamicData.DynamicControl.CssClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.CssClassProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la classe CSS (Cascading Style Sheet) che specifica gli stili di visualizzazione per il contenuto del controllo <see cref="T:System.Web.DynamicData.DynamicControl" />.</summary>
        <value>Nome della classe CSS.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataField : string with get, set" Usage="System.Web.DynamicData.DynamicControl.DataField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome del campo dati a cui è associato il controllo <see cref="T:System.Web.DynamicData.DynamicControl" />.</summary>
        <value>Nome del campo dati da associare al controllo <see cref="T:System.Web.DynamicData.DynamicControl" />. Il valore predefinito è una stringa vuota (""), a indicare che questa proprietà non è impostata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.DynamicData.DynamicControl.DataField%2A> proprietà per specificare il campo di dati per l'associazione di <xref:System.Web.DynamicData.DynamicControl> controllo. Il campo dati può essere la colonna nome oppure, per colonne chiave esterna, il nome della relazione.  
  
 Per impostazione predefinita, viene visualizzato il campo dati specificato per il <xref:System.Web.DynamicData.DynamicControl> controllo usando il modello di campo che è associato il tipo di dati di campo. È possibile modificare il modello di campo che viene eseguito il rendering per il campo dati impostando il <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> proprietà. È anche possibile formattare il testo visualizzato mediante l'impostazione di <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> proprietà.  
  
 **Nota** se si desidera modificare la visualizzazione e il comportamento di un campo dati a livello globale, è necessario applicare attributi al modello di dati invece di impostare questa proprietà in un'istanza specifica del <xref:System.Web.DynamicData.DynamicControl> controllo. Per altre informazioni, vedere [ASP.NET Dynamic Data](http://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512).  
  
   
  
## Examples  
 L'esempio seguente illustra come usare il <xref:System.Web.DynamicData.DynamicControl.DataField%2A> proprietà per specificare il campo da visualizzare un <xref:System.Web.DynamicData.DynamicControl> controllo.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.DataField#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.DataField/VB/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.UIHint" />
      </Docs>
    </Member>
    <Member MemberName="DataFormatString">
      <MemberSignature Language="C#" Value="public string DataFormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFormatString" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property DataFormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataFormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFormatString : string with get, set" Usage="System.Web.DynamicData.DynamicControl.DataFormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta una stringa che specifica il formato di visualizzazione per il valore del campo.</summary>
        <value>Stringa di formattazione che specifica il formato di visualizzazione per il valore del campo. Il valore predefinito è una stringa vuota (""), a indicare che al valore di campo non è stata applicata alcuna formattazione speciale.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> proprietà per specificare un formato di visualizzazione personalizzata per i valori visualizzati di <xref:System.Web.DynamicData.DynamicControl> controllo. Se il <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> proprietà non è impostata, il valore del campo viene visualizzato senza alcuna formattazione speciale.  
  
 Per impostazione predefinita, la stringa di formattazione viene applicata al valore del campo solo quando la <xref:System.Web.DynamicData.DynamicControl.Mode%2A> è impostata su <xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>. Per applicare la stringa di formattazione per il valore del campo in modalità di modifica, impostare il <xref:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode%2A> proprietà `true`.  
  
 Il formato di visualizzazione specificato utilizzando il <xref:System.Web.DynamicData.DynamicControl.DataFormatString%2A> è specifica per questa istanza di proprietà di <xref:System.Web.DynamicData.DynamicControl> controllo. È anche possibile modificare il formato di visualizzazione per un campo dati nell'intera applicazione applicando la <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute> per il modello di data e l'impostazione di <xref:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString%2A?displayProperty=nameWithType> denominato parametro nel costruttore. Per altre informazioni, vedere [ASP.NET Dynamic Data](http://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ApplyFormatInEditMode" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute" />
        <altmember cref="P:System.ComponentModel.DataAnnotations.DisplayFormatAttribute.DataFormatString" />
      </Docs>
    </Member>
    <Member MemberName="FieldTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FieldTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FieldTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.FieldTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FieldTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FieldTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FieldTemplate : System.Web.UI.Control" Usage="System.Web.DynamicData.DynamicControl.FieldTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il modello di campo creato per il controllo <see cref="T:System.Web.DynamicData.DynamicControl" />.</summary>
        <value>Modello di campo creato per il controllo <see cref="T:System.Web.DynamicData.DynamicControl" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public string GetAttribute (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttribute (key As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetAttribute(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member GetAttribute : string -&gt; string&#xA;override this.GetAttribute : string -&gt; string" Usage="dynamicControl.GetAttribute key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nome dell'attributo.</param>
        <summary>Recupera il valore dell'attributo mediante la chiave specificata.</summary>
        <returns>Valore dell'attributo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se la raccolta di attributi è `null`, questo metodo restituisce una stringa vuota.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public bool HtmlEncode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HtmlEncode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.HtmlEncode" />
      <MemberSignature Language="VB.NET" Value="Public Property HtmlEncode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HtmlEncode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : bool with get, set" Usage="System.Web.DynamicData.DynamicControl.HtmlEncode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se i dati per il controllo sono codificati in HTML prima del rendering.</summary>
        <value>
          <see langword="true" /> se i dati per il controllo sono codificati in HTML prima del rendering; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.DynamicData.DynamicControl.HtmlEncode%2A> proprietà per specificare se i valori di campo sono codificati in HTML per le rispettive rappresentazioni di stringa prima che vengano visualizzati.  
  
> [!NOTE]
>  Consente di impedire attacchi di scripting intersito e contenuto dannoso venga visualizzata nuovamente i valori di campo codifica HTML. Questa proprietà deve essere abilitata quando possibile. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.DataBoundControlMode Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.DataBoundControlMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Mode" />
      <MemberSignature Language="VB.NET" Value="Public Property Mode As DataBoundControlMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::DataBoundControlMode Mode { System::Web::UI::WebControls::DataBoundControlMode get(); void set(System::Web::UI::WebControls::DataBoundControlMode value); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.Web.UI.WebControls.DataBoundControlMode with get, set" Usage="System.Web.DynamicData.DynamicControl.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataBoundControlMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la modalità di rendering.</summary>
        <value>Uno dei valori di enumerazione che specifica la modalità di rendering per il controllo. Il valore predefinito è <see cref="F:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.DynamicData.DynamicControl.Mode%2A> proprietà per specificare la modalità di rendering da utilizzare per visualizzare il <xref:System.Web.DynamicData.DynamicControl> controllo. La tabella seguente illustra le diverse modalità.  
  
|Modalità|Descrizione|  
|----------|-----------------|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.ReadOnly>|per la modalità di visualizzazione. In questo modo si impedisce all'utente di modificare i valori di un record o un campo dati. Può essere utilizzato in uno dei modelli. Rappresenta il valore predefinito.|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Edit>|per la modalità di modifica. Ciò consente agli utenti di aggiornare i valori di un record esistente. Viene utilizzato il `EditItemTemplate` modello.|  
|<xref:System.Web.UI.WebControls.DataBoundControlMode.Insert>|per la modalità di inserimento. Ciò consente agli utenti di immettere i valori per un nuovo record. Viene utilizzato il `InsertItemTemplate` modello.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullDisplayText">
      <MemberSignature Language="C#" Value="public string NullDisplayText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NullDisplayText" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.NullDisplayText" />
      <MemberSignature Language="VB.NET" Value="Public Property NullDisplayText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NullDisplayText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NullDisplayText : string with get, set" Usage="System.Web.DynamicData.DynamicControl.NullDisplayText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la didascalia visualizzata per un campo dati quando il valore di campo è <see langword="null" />.</summary>
        <value>Didascalia visualizzata per un campo dati quando il valore di campo è <see langword="null" />. Il valore predefinito è una stringa vuota (""), a indicare che questa proprietà non è impostata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In alcuni casi un valore del campo viene archiviato come null nell'origine dati. È possibile specificare una didascalia da visualizzare per i campi che dispongono di un valore null tramite l'impostazione personalizzata di <xref:System.Web.DynamicData.DynamicControl.NullDisplayText%2A> proprietà. Se questa proprietà non è impostata, i valori di campi con valori null vengono visualizzati come una stringa vuota ("").  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataFormatString" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.ConvertEmptyStringToNull" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInit : EventArgs -&gt; unit&#xA;override this.OnInit : EventArgs -&gt; unit" Usage="dynamicControl.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.Control.Init" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per altre informazioni, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Web.DynamicData.DynamicControl.OnInit%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Web.DynamicData.DynamicControl.DataField" /> non è impostata.</exception>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" /> in una classe derivata, accertarsi di chiamare la classe di base <see cref="M:System.Web.DynamicData.DynamicControl.OnInit(System.EventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member Render : System.Web.UI.HtmlTextWriter -&gt; unit&#xA;override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="dynamicControl.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto usato per eseguire il rendering del contenuto del controllo <see cref="T:System.Web.DynamicData.DynamicControl" /> nel browser del client.</param>
        <summary>Esegue il rendering del contenuto del controllo <see cref="T:System.Web.DynamicData.DynamicControl" /> nel browser del client mediante l'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.DynamicData.DynamicControl.Render%2A> metodo viene utilizzato principalmente dagli sviluppatori di controlli per estendere il <xref:System.Web.DynamicData.DynamicControl> controllo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttribute">
      <MemberSignature Language="C#" Value="public void SetAttribute (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAttribute(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicControl.SetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttribute (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetAttribute(System::String ^ key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetAttribute : string * string -&gt; unit&#xA;override this.SetAttribute : string * string -&gt; unit" Usage="dynamicControl.SetAttribute (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nome dell'attributo da impostare.</param>
        <param name="value">Valore da assegnare all'attributo.</param>
        <summary>Imposta l'attributo specificato sul valore specificato.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFieldTemplateHost.FormattingOptions">
      <MemberSignature Language="C#" Value="System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.System#Web#DynamicData#IFieldTemplateHost#FormattingOptions" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property FormattingOptions As IFieldFormattingOptions Implements IFieldTemplateHost.FormattingOptions" />
      <MemberSignature Language="C++ CLI" Value="property System::Web::DynamicData::IFieldFormattingOptions ^ System.Web.DynamicData.IFieldTemplateHost.FormattingOptions { System::Web::DynamicData::IFieldFormattingOptions ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.DynamicData.DynamicControl.System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.IFieldFormattingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Per una descrizione di questo membro, vedere <see cref="P:System.Web.DynamicData.IFieldTemplateHost.FormattingOptions" />.</summary>
        <value>Opzioni di formattazione da applicare al modello di campo.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public virtual System.Web.DynamicData.MetaTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.Table" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Table As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::DynamicData::MetaTable ^ Table { System::Web::DynamicData::MetaTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Table : System.Web.DynamicData.MetaTable" Usage="System.Web.DynamicData.DynamicControl.Table" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto tabella associato al controllo.</summary>
        <value>Oggetto tabella associato al controllo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.Web.DynamicData.DynamicControl.Table%2A> proprietà per accedere alle informazioni di metadati sulla tabella che viene associata al controllo con associazione a dati che contiene il <xref:System.Web.DynamicData.DynamicControl> controllo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Il controllo <see cref="T:System.Web.DynamicData.DynamicControl" /> si trova all'interno di un controllo con associazione a dati non associato a un controllo origine dati che implementa l'interfaccia <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</exception>
        <altmember cref="P:System.Web.DynamicData.DynamicControl.Column" />
      </Docs>
    </Member>
    <Member MemberName="UIHint">
      <MemberSignature Language="C#" Value="public virtual string UIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.UIHint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UIHint : string with get, set" Usage="System.Web.DynamicData.DynamicControl.UIHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome del modello di campo usato per eseguire il rendering del campo dati.</summary>
        <value>Nome del modello di campo usato per eseguire il rendering del campo dati. Il valore predefinito è una stringa vuota ("") che indica che verrà eseguito il rendering del modello di campo in base al tipo di campo dati o alle informazioni sui metadati applicate al modello dati.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> proprietà per specificare il modello di campo da utilizzare per visualizzare l'interfaccia utente per un campo dati. I modelli di campo per impostazione predefinita sono controlli utente e i relativi nomi contengono un suffisso per identificare i modelli di campo che vengono usati per operazioni di modifica e le operazioni di inserimento. I suffissi sono modifica e Inserisci, rispettivamente. Quando si imposta un valore il <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> proprietà, si imposta il nome senza il suffisso. I dati dinamici identificherà le corrette modalità valutando il <xref:System.Web.DynamicData.DynamicControl.Mode%2A> proprietà valore ed eseguirà il rendering del modello di campo corretto.  
  
 Se il <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> proprietà non è impostata, per impostazione predefinita i dati dinamici forniranno il modello di campo in base al tipo di campo. Per altre informazioni, vedere [Scaffolding di ASP.NET Dynamic Data](http://msdn.microsoft.com/library/e0166a58-9178-4660-81a6-175994b11b12).  
  
 Il modello di campo specificato utilizzando il <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> è specifica per questa istanza di proprietà di <xref:System.Web.DynamicData.DynamicControl> controllo. È inoltre possibile modificare il modello di campo utilizzato da un campo dati nell'intera applicazione applicando il <xref:System.ComponentModel.DataAnnotations.UIHintAttribute> al modello di dati. L'impostazione di <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> proprietà esegue l'override dei metadati applicati al modello di dati. Per altre informazioni sugli attributi dei metadati, vedere [ASP.NET Dynamic Data](http://msdn.microsoft.com/library/78c7fcd7-5f38-46a0-a4bc-48eff3c8a512).  
  
   
  
## Examples  
 Vedere un esempio di codice in fase di esecuzione di questa funzionalità: [eseguiti](http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.Web.DynamicData.DynamicControl.UIHint).  
  
 Nell'esempio seguente viene illustrato come è possibile specificare un campo di dati per l'uso di un modello di campo diversi per eseguire il rendering il relativo contenuto. Il secondo esempio viene illustrato il modello di campo personalizzato specificato dal <xref:System.Web.DynamicData.DynamicControl.UIHint%2A> proprietà.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Default.aspx#1)]  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/CS/Email.ascx#2)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicControl.UIHint#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DynamicData.DynamicControl.UIHint/VB/Email.ascx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DataAnnotations.UIHintAttribute" />
        <altmember cref="P:System.Web.DynamicData.DynamicControl.DataField" />
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicControl.ValidationGroup" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ValidationGroup As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ValidationGroup { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationGroup : string with get, set" Usage="System.Web.DynamicData.DynamicControl.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome del gruppo di convalida per il controllo.</summary>
        <value>Nome del gruppo di convalida per il controllo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gruppi di convalida consentono di assegnare i controlli di convalida in una pagina a una categoria specifica. Ogni gruppo di convalida può essere convalidato in modo indipendente da altri gruppi di convalida della pagina. Usare la <xref:System.Web.DynamicData.DynamicControl.ValidationGroup%2A> proprietà per specificare il nome del gruppo di convalida per il quale il <xref:System.Web.DynamicData.DynamicControl> controllo causa la convalida durante il postback della pagina al server.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>