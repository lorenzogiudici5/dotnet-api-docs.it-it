<Type Name="DynamicFilter" FullName="System.Web.DynamicData.DynamicFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="36d6b3cc1b6dd848285c0438db3c4d0fe11db41b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30539915" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DynamicFilter : System.Web.UI.Control, System.Web.DynamicData.IFilterExpressionProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicFilter extends System.Web.UI.Control implements class System.Web.DynamicData.IFilterExpressionProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.DynamicData.DynamicFilter" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicFilter&#xA;Inherits Control&#xA;Implements IFilterExpressionProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicFilter : System::Web::UI::Control, System::Web::DynamicData::IFilterExpressionProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web.DynamicData</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IFilterExpressionProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Visualizza l'interfaccia utente per filtrare le righe di tabella in base a una colonna specificata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In questo argomento  
  
-   [Introduzione](#introduction)  
  
-   [ClassContext](#ClassContext)  
  
-   [Sintassi dichiarativa](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introduzione  
 Il <xref:System.Web.DynamicData.DynamicFilter> è utilizzato in un markup della pagina per generare l'interfaccia utente per filtrare le righe di tabella. Dynamic Data crea l'interfaccia utente usando i modelli di filtro predefinito che si trovano nella cartella ~\DynamicData\Filters. Questi modelli supportano i tipi di colonna chiave esterna, booleani e di enumerazione.  
  
 Nella tabella seguente vengono illustrate alcune attività che è possibile eseguire.  
  
|Scenario|Descrizione|  
|--------------|-----------------|  
|Specificare la colonna da utilizzare per il filtro di riga di tabella.|Utilizzare la proprietà <xref:System.Web.DynamicData.DynamicFilter.DataField%2A> per specificare la colonna da utilizzare per il filtro di riga di tabella.|  
|Specificare il nome del modello di filtro da utilizzare per creare l'interfaccia utente.|Utilizzare la proprietà <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> per specificare il nome del modello di filtro da utilizzare per creare l'interfaccia utente.|  
|Eseguire operazioni personalizzate prima del rendering dell'interfaccia utente.|Utilizzare il <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> per eseguire operazioni personalizzate prima del rendering dell'interfaccia utente.|  
  
 È possibile specificare il modello di filtro da utilizzare nei modi seguenti:  
  
-   Tramite il <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> proprietà nel markup della pagina. Questo approccio è una personalizzazione a livello di presentazione, che è indipendente dallo schema (database) e che si applica a una singola pagina.  
  
-   Tramite il <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> attributo nel modello. Questo approccio è una personalizzazione a livello di dati, che dipende dallo schema specifico (database) e che si applica all'intera applicazione.  
  
 Se si utilizzano entrambi gli approcci, il modello di filtro specificato nel markup ha la precedenza sul modello che viene specificato nel modello di dati.  
  
<a name="ClassContext"></a>   
## <a name="class-context"></a>Contesto della classe  
 Il <xref:System.Web.DynamicData.DynamicFilter> controllo è progettato per funzionare con il <xref:System.Web.UI.WebControls.QueryExtender> controllo. Il <xref:System.Web.DynamicData.DynamicFilter> controllo fa riferimento un <xref:System.Web.DynamicData.DynamicFilterExpression> istanza all'interno di un <xref:System.Web.UI.WebControls.QueryExtender> oggetto nel markup della pagina.  
  
 La figura seguente illustra la procedura che segue Dynamic Data per implementare la riga della tabella applicando un filtro per una colonna chiave esterna.  
  
 ![Gli elementi di Query Dynamic Data](~/add/media/dynamic-dataquery.png "gli elementi di Query Dynamic Data")  
  
1.  Il <xref:System.Web.DynamicData.DynamicFilter> il valore selezionato per il controllo passa il <xref:System.Web.UI.WebControls.QueryExtender> controllo.  
  
2.  Il <xref:System.Web.UI.WebControls.QueryExtender> controllo utilizza il valore per creare le informazioni di filtro di query. Passa quindi queste informazioni per il controllo origine dati.  
  
3.  Il controllo origine dati passa le informazioni di query di filtro per il provider dell'origine dati.  
  
4.  Il provider dell'origine dati passa la query al database.  
  
5.  Il database restituisce le righe della tabella filtrata.  
  
6.  Il provider dell'origine dati invia dati al controllo origine dati.  
  
7.  Il controllo origine dati passa le righe della tabella filtrata al controllo con associazione a dati per la visualizzazione.  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Sintassi dichiarativa  
  
```  
<asp:DynamicFilter  
    ID="Control ID"  
    DataField="Name of the data field to use for filtering"  
    EnableViewState="True|False"   
    FilterUIHint="Name of the filter template to generate the UI"  
    OnFilterChanged="Filter changed event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"   
    Visible="True|False"  
    runat="server"/>  
```  
  
   
  
## Examples  
 In questa posizione è disponibile un progetto di Visual Studio con codice sorgente: [scaricare](http://go.microsoft.com/fwlink/?LinkId=168914).  
  
 Nell'esempio seguente il modello predefinito ForeignKey. ascx filtro consente di creare l'interfaccia utente per filtrare le righe della tabella Products in base alla colonna di chiave esterna ProductCategory. Quando l'utente seleziona un valore ProductCategory, vengono visualizzate solo le righe che contengono quel valore.  
  
 L'esempio presenta i requisiti seguenti:  
  
-   Un sito Web Dynamic Data o un'applicazione Web Dynamic Data. In questo modo è possibile creare il `AdventureWorksLTDataContext` contesto dati per il database e creare le classi per tabelle a cui accedere. Per ulteriori informazioni, vedere `Walkthrough: Creating a New Dynamic Data Web Site using Scaffolding`.  
  
 [!code-aspx-csharp[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx#1)]
 [!code-aspx-vb[System.Web.DynamicData.DynamicFilter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx#1)]  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#2)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.DynamicData.QueryableFilterRepeater" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.DynamicData.DynamicFilter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere non si chiama il <xref:System.Web.DynamicData.DynamicFilter.%23ctor%2A> costruttore direttamente. Utilizzare invece la <xref:System.Web.DynamicData.DynamicFilter> classe nel markup della pagina e la classe viene inizializzate quando viene caricata la pagina.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="protected internal System.Web.DynamicData.MetaColumn Column { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.DynamicData.MetaColumn Column" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.Column" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property Column As MetaColumn" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::DynamicData::MetaColumn ^ Column { System::Web::DynamicData::MetaColumn ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.DynamicData.MetaColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la colonna della tabella da utilizzare per il filtro.</summary>
        <value>Colonna della tabella da utilizzare per il filtro.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è solo per uso interno.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome della colonna da utilizzare per il filtro della riga di tabella.</summary>
        <value>Nome della colonna utilizzato per il filtro della riga di tabella.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato come specificare la colonna per la riga della tabella filtro nel markup.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    DataField="ProductCategory" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FilterChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FilterChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.DynamicData.DynamicFilter.FilterChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event FilterChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ FilterChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente seleziona un valore per la chiave esterna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.DynamicData.DynamicFilter.FilterChanged> evento viene generato quando l'utente seleziona un valore di chiave esterna e prima che il nuovo valore viene sottoposto a rendering. In questo modo è possibile fornire un metodo di gestione degli eventi che è possibile eseguire le operazioni personalizzate, ad esempio il paging personalizzato.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come gestire un evento di modifica filtro. Il gestore reimposta l'indice della pagina precedente vengono visualizzate le righe filtrate.  
  
 [!code-csharp[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/cs/dynamicfilter.aspx.cs#3)]
 [!code-vb[System.Web.DynamicData.DynamicFilter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.dynamicdata.dynamicfilter/vb/dynamicfilter.aspx.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTemplate">
      <MemberSignature Language="C#" Value="public System.Web.UI.Control FilterTemplate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control FilterTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterTemplate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilterTemplate As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::Control ^ FilterTemplate { System::Web::UI::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il modello di filtro associato all'istanza corrente di questo controllo.</summary>
        <value>Modello di filtro associato all'istanza corrente di questo controllo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dynamic Data genera l'interfaccia utente per filtrare le righe di tabella per i tipi di colonna supportati. Usa i modelli di filtro predefinito che si trovano nella cartella ~\DynamicData\Filters.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterUIHint">
      <MemberSignature Language="C#" Value="public string FilterUIHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilterUIHint" />
      <MemberSignature Language="DocId" Value="P:System.Web.DynamicData.DynamicFilter.FilterUIHint" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterUIHint As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilterUIHint { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome del modello di filtro utilizzato per creare l'interfaccia utente.</summary>
        <value>Nome del modello di filtro.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> proprietà consente di specificare il modello di filtro per creare l'interfaccia utente per il filtro di riga di tabella. È possibile specificare il modello di filtro da utilizzare nei modi seguenti:  
  
-   Tramite il <xref:System.Web.DynamicData.DynamicFilter.FilterUIHint%2A> proprietà nel markup della pagina. Questo approccio è una personalizzazione a livello di presentazione, che è indipendente dallo schema (database) e che si applica a una singola pagina.  
  
-   Tramite il <xref:System.ComponentModel.DataAnnotations.FilterUIHintAttribute> attributo nel modello. Questo approccio è una personalizzazione a livello di dati, che dipende dallo schema specifico (database) e che si applica all'intera applicazione.  
  
 Se si utilizzano entrambi gli approcci, il modello di filtro specificato nel markup ha la precedenza sul modello specificato nel modello di dati.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come specificare il modello di filtro nel markup da utilizzare per il filtro.  
  
```  
<asp:DynamicFilter ID="CategoryFilter" runat="server"   
    FilterUIHint="ForeignKey" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto che riceve il contenuto del controllo server.</param>
        <summary>Invia il contenuto del controllo server all'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il writer di rendering del contenuto alla pagina.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.GetQueryable">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IFilterExpressionProvider.GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Function GetQueryable (source As IQueryable) As IQueryable Implements IFilterExpressionProvider.GetQueryable" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System::Linq::IQueryable ^ source) = System::Web::DynamicData::IFilterExpressionProvider::GetQueryable;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(System.Linq.IQueryable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Query sull'origine dati.</param>
        <summary>Ottiene la query modificata utilizzando il valore del filtro corrente.</summary>
        <returns>Filtro.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Web.DynamicData.DynamicFilter> a un'interfaccia <xref:System.Web.DynamicData.IFilterExpressionProvider>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IFilterExpressionProvider.Initialize">
      <MemberSignature Language="C#" Value="void IFilterExpressionProvider.Initialize (System.Web.UI.WebControls.IQueryableDataSource dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.DynamicData.IFilterExpressionProvider.Initialize(class System.Web.UI.WebControls.IQueryableDataSource dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DynamicData.DynamicFilter.System#Web#DynamicData#IFilterExpressionProvider#Initialize(System.Web.UI.WebControls.IQueryableDataSource)" />
      <MemberSignature Language="VB.NET" Value="Sub Initialize (dataSource As IQueryableDataSource) Implements IFilterExpressionProvider.Initialize" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.DynamicData.IFilterExpressionProvider.Initialize(System::Web::UI::WebControls::IQueryableDataSource ^ dataSource) = System::Web::DynamicData::IFilterExpressionProvider::Initialize;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.DynamicData.IFilterExpressionProvider.Initialize(System.Web.UI.WebControls.IQueryableDataSource)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.DynamicData</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Web.UI.WebControls.IQueryableDataSource" />
      </Parameters>
      <Docs>
        <param name="dataSource">Origine dati.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.DynamicData.DynamicFilter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Web.DynamicData.DynamicFilter> a un'interfaccia <xref:System.Web.DynamicData.IFilterExpressionProvider>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>