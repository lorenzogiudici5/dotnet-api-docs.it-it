<Type Name="MessageContractMemberAttribute" FullName="System.ServiceModel.MessageContractMemberAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8bd7dd5ba88b9904b8ea869d643e4d030ff67158" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36610664" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MessageContractMemberAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageContractMemberAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.MessageContractMemberAttribute" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageContractMemberAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageContractMemberAttribute abstract : Attribute" />
  <TypeSignature Language="F#" Value="type MessageContractMemberAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Consente di dichiarare i membri di base degli attributi <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> e <see cref="T:System.ServiceModel.MessageHeaderAttribute" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa classe contiene proprietà comuni a tutte le parti di un messaggio SOAP. Ad esempio, tutte le parti presentano un nome e uno spazio dei nomi nonché un eventuale livello di sicurezza.  
  
 Per informazioni su come controllare la serializzazione del contenuto di un corpo SOAP senza modificare la SOAP envelope predefinita, vedere <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, [che specifica di trasferimento dei dati nei contratti di servizio](~/docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md), e [utilizzo di dati Contratti](~/docs/framework/wcf/feature-details/using-data-contracts.md).  
  
 Per ulteriori informazioni sulla creazione di contratti di messaggio, vedere [utilizzando i contratti di messaggio](~/docs/framework/wcf/feature-details/using-message-contracts.md).  
  
   
  
## Examples  
 Negli esempi di codice seguenti viene mostrato un contratto di messaggio personalizzato che utilizza gli attributi <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>e <xref:System.ServiceModel.MessageBodyMemberAttribute> (ognuno dei quali eredita dall'attributo <xref:System.ServiceModel.MessageContractMemberAttribute>) per creare messaggi tipizzati personalizzati da utilizzare nelle operazioni. In questo caso vi sono tre membri serializzati nell'elemento del corpo del messaggio SOAP: `sourceAccount`, `targetAccount` e il valore `amount`, che viene serializzato in un elemento denominato `transactionAmount`. Inoltre, l'elemento dell'intestazione SOAP `IsAudited` risiede nello spazio dei nomi `http://schemas.contosobank.com/auditing/2005` e l'elemento `sourceAccount` è crittografato e protetto con firma digitale.  
  
> [!NOTE]
>  I tipi `Operation` e `Account` devono presentare un contratto dati.  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader]   
  public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")]   
  public bool IsAudited;  
  [MessageBody(ProtectionLevel=ProtectionLevel.EncryptAndSign)]   
  public Account sourceAccount;  
  [MessageBody]   
  public Account targetAccount;  
  [MessageBody(Name="transactionAmount")]   
  public int amount;  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageContractMemberAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.MessageContractMemberAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageContractMemberAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ServiceModel.MessageContractMemberAttribute" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Quando viene sottoposto a override in una classe derivata, consente di ottenere un valore che indica se al membro è stato assegnato un livello di protezione.</summary>
        <value>
          <see langword="true" /> se al membro è stato assegnato un livello di protezione. In caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.MessageContractMemberAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica il nome dell'elemento che corrisponde a questo membro.</summary>
        <value>Nome dell'elemento che corrisponde a questo membro. Questa stringa deve essere un nome di elemento XML valido.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Negli esempi di codice seguenti viene mostrato un contratto di messaggio personalizzato che utilizza gli attributi <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute> e <xref:System.ServiceModel.MessageBodyMemberAttribute> per creare messaggi personalizzati e fortemente tipizzati da utilizzare come parametri. In questo caso vi sono tre membri di dati serializzati nell'elemento del corpo del messaggio SOAP: `sourceAccount`, `targetAccount` e il valore `amount`, che viene serializzato in un elemento denominato `transactionAmount`. Inoltre, l'elemento dell'intestazione SOAP `IsAudited` risiede nello spazio dei nomi `http://schemas.contosobank.com/auditing/2005`.  
  
> [!NOTE]
>  Infine, i tipi `Operation` e `Account` devono presentare un contratto dati.  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader] public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")] public bool IsAudited;  
  [MessageBody] public Account sourceAccount;  
  [MessageBody] public Account targetAccount;  
  [MessageBody(Name="transactionAmount")] public int amount;  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.MessageContractMemberAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica lo spazio dei nomi dell'elemento che corrisponde a questo membro.</summary>
        <value>URI dello spazio dei nomi dell'elemento che corrisponde a questo membro.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Negli esempi di codice seguenti viene mostrato un contratto di messaggio personalizzato che utilizza gli attributi <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>e <xref:System.ServiceModel.MessageBodyMemberAttribute> (ognuno dei quali eredita dall'attributo <xref:System.ServiceModel.MessageContractMemberAttribute>) per creare messaggi tipizzati personalizzati da utilizzare nelle operazioni. In questo caso vi sono tre membri serializzati nell'elemento del corpo del messaggio SOAP: `sourceAccount`, `targetAccount` e il valore `amount`, che viene serializzato in un elemento denominato `transactionAmount`. Inoltre, l'elemento dell'intestazione SOAP `IsAudited` risiede nello spazio dei nomi `http://schemas.contosobank.com/auditing/2005` e l'elemento `sourceAccount` è crittografato e protetto con firma digitale.  
  
> [!NOTE]
>  I tipi `Operation` e `Account` devono presentare un contratto dati.  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader] public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")] public bool IsAudited;  
  [MessageBody] public Account sourceAccount;  
  [MessageBody] public Account targetAccount;  
  [MessageBody(Name="transactionAmount")] public int amount;  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica se il membro deve essere trasmesso senza alcuna protezione, solo firmato oppure firmato e crittografato.</summary>
        <value>Uno dei valori di <see cref="T:System.Net.Security.ProtectionLevel" />. Il valore predefinito è <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per utilizzare la proprietà <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> nell' attributo <xref:System.ServiceModel.MessageHeaderAttribute> o nell'attributo <xref:System.ServiceModel.MessageBodyMemberAttribute> è necessario configurare correttamente l'associazione e i comportamenti. Se queste funzionalità di sicurezza vengono utilizzate senza essere state configurate correttamente (ad esempio, se si utilizza il valore <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> in una parte del messaggio senza fornire credenziali di sicurezza), il sistema genera un'eccezione in fase di esecuzione.  
  
 Inoltre, il livello di protezione è determinato in modo specifico per ogni intestazione. Tuttavia, il corpo SOAP presenta un solo livello di protezione, indipendentemente dal numero di parti del corpo. Il livello di protezione del corpo è determinato in base al valore della proprietà <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> più elevato fra tutte le parti del corpo. Si consideri ad esempio la classe seguente:  
  
```csharp  
[MessageContract]  
public class PatientRecord  
{  
   [MessageHeader(ProtectionLevel=None)] public int recordID;  
   [MessageHeader(ProtectionLevel=Sign)] public string patientName;  
   [MessageHeader(ProtectionLevel=EncryptAndSign)] public string SSN;  
   [MessageBody(ProtectionLevel=None)] public string comments;  
   [MessageBody(ProtectionLevel=Sign)] public string diagnosis;  
   [MessageBody(ProtectionLevel=EncryptAndSign)] public string medicalHistory;  
}  
```  
  
 In questo esempio, l'intestazione `recordID` non è protetta, la parte `patientName` è firmata e la parte `SSN` è crittografata e firmata. È presente almeno una parte del corpo, ovvero `medicalHistory`, per cui è stato impostato il livello <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Di conseguenza, anche se le parti del corpo `comments` e `diagnosis` presentano livelli di protezione inferiori, l'intero corpo del messaggio è crittografato e firmato.  
  
 Il comportamento della protezione in fase di esecuzione deriva dall'unione dei valori a livello di sicurezza su cui sono impostate le proprietà elencate di seguito. Queste proprietà presentano una struttura gerarchica. La configurazione del valore esterno determina l'impostazione predefinita per tutti gli ambiti più ristretti a meno che non venga impostato esplicitamente un valore diverso per un ambito più ristretto. In questo caso, il valore esterno rimane l'impostazione predefinita per tutti gli ambiti più ristretti, ad eccezione di quello impostato in modo specifico.  
  
 Ad esempio, se la proprietà <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> è impostata su <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> e nessuno degli altri ambiti più ristretti presenta impostazioni riguardanti il livello di protezione, tutti i messaggi di un contratto dell'operazione vengono crittografati e firmati. Se tuttavia per una di queste operazioni la proprietà <xref:System.ServiceModel.OperationContractAttribute> è impostata su <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, i messaggi di tale operazione vengono firmati. Tutti gli altri messaggi del contratto vengono invece crittografati e firmati.  
  
 Per informazioni dettagliate sui livelli di protezione e i relativi ipotesi e gli ambiti, vedere [Understanding Protection Level](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Gli ambiti di impostazione di questi valori sono:  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 La proprietà <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> è impostata su <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 La proprietà <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> è impostata su <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Quando nel contratto non è stato specificato in modo esplicito alcun livello di protezione e l'associazione sottostante supporta la sicurezza (sia essa a livello di trasporto o di messaggio), il livello di protezione effettivo dell'intero contratto è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Se l'associazione non supporta la sicurezza (ad esempio <xref:System.ServiceModel.BasicHttpBinding>), il livello di sicurezza <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> effettivo è <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> per l'intero contratto. Ne consegue che a seconda dell'associazione dell'endpoint i client possono richiedere un sistema diverso di protezione a livello di messaggio o di trasporto anche se il contratto prevede il livello di sicurezza <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>