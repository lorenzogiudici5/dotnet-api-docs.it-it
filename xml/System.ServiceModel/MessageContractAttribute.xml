<Type Name="MessageContractAttribute" FullName="System.ServiceModel.MessageContractAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1983a462a2948dd7f51bf7881bd1c2b78bd80878" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39758625" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class MessageContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MessageContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.MessageContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MessageContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type MessageContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definisce una classe fortemente tipizzata corrispondente a un messaggio SOAP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare l'attributo <xref:System.ServiceModel.MessageContractAttribute> per specificare la struttura della SOAP envelope per un particolare messaggio. Il servizio può quindi utilizzare il messaggio come un parametro o un tipo restituito nelle operazioni del servizio. Per informazioni su come controllare la serializzazione del contenuto di un corpo SOAP senza modificare la SOAP envelope predefinita, vedere <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, [Specifying Data Transfer in Service Contracts](~/docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md), e [Using I contratti dati](~/docs/framework/wcf/feature-details/using-data-contracts.md).  
  
> [!NOTE]
>  Non è possibile utilizzare tipi di messaggio personalizzati nell'operazione del servizio con parametri serializzabili normali. Utilizzare tipi di messaggio personalizzati o parametri serializzabili che non siano oggetti <xref:System.ServiceModel.Channels.Message>. Per informazioni dettagliate, vedere, [Specifying Data Transfer in Service Contracts](~/docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md).  
  
 Per implementare un contratto di messaggio per un tipo, annotarlo con la classe <xref:System.ServiceModel.MessageContractAttribute> e annotare uno o più campi o proprietà di tale classe con <xref:System.ServiceModel.MessageBodyMemberAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute> o <xref:System.ServiceModel.MessageHeaderArrayAttribute>.  
  
> [!NOTE]
>  <xref:System.ServiceModel.MessageParameterAttribute?displayProperty=nameWithType> non è un attributo di contratto di messaggio e non può essere utilizzato insieme a <xref:System.ServiceModel.MessageContractAttribute>.  
  
 Utilizzare le proprietà <xref:System.ServiceModel.OperationContractAttribute.Action%2A> e <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> per specificare il valore dell'elemento `<Action>` nel messaggio SOAP.  
  
-   Utilizzare le proprietà <xref:System.ServiceModel.MessageContractAttribute.HasProtectionLevel%2A> e <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A> per indicare se per il tipo del messaggio SOAP è specificato un livello di protezione e, in caso affermativo, quale esso sia.  
  
-   Utilizzare la proprietà <xref:System.ServiceModel.MessageContractAttribute.IsWrapped%2A> per indicare se il corpo del messaggio contiene un elemento wrapper, e in caso affermativo, utilizzare le proprietà <xref:System.ServiceModel.MessageContractAttribute.WrapperName%2A> e <xref:System.ServiceModel.MessageContractAttribute.WrapperNamespace%2A> per specificare rispettivamente il nome e spazio dei nomi di tale elemento.  
  
 Per altre informazioni, vedere [Using Message Contracts](~/docs/framework/wcf/feature-details/using-message-contracts.md).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato l'utilizzo di <xref:System.ServiceModel.MessageContractAttribute> per controllare la struttura della SOAP envelope per il messaggio di richiesta e il messaggio di risposta, nonché l'utilizzo di <xref:System.ServiceModel.MessageHeaderAttribute> per creare un'intestazione SOAP per il messaggio di risposta e di <xref:System.ServiceModel.MessageBodyMemberAttribute> per specificare i corpi dei messaggi di richiesta e di risposta. Nel codice è contenuto un esempio di ogni messaggio quando viene inviato.  
  
 [!code-csharp[MessageHeaderAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/messageheaderattribute/cs/services.cs#1)]
 [!code-vb[MessageHeaderAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageheaderattribute/vb/services.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.MessageContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ServiceModel.MessageContractAttribute" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.MessageContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se per il messaggio è specificato un livello di protezione.</summary>
        <value>
          <see langword="true" /> se il messaggio deve essere crittografato o firmato o presentare entrambi i meccanismi di protezione; in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questa impostazione è `true`, il livello di protezione del messaggio corrisponde al valore di <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A>. Per informazioni dettagliate sui livelli di protezione e relativi presupposti e gli ambiti, vedere [Understanding Protection Level](~/docs/framework/wcf/understanding-protection-level.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWrapped">
      <MemberSignature Language="C#" Value="public bool IsWrapped { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWrapped" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractAttribute.IsWrapped" />
      <MemberSignature Language="VB.NET" Value="Public Property IsWrapped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWrapped { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsWrapped : bool with get, set" Usage="System.ServiceModel.MessageContractAttribute.IsWrapped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica se il corpo del messaggio contiene un elemento wrapper.</summary>
        <value>
          <see langword="true" /> se il messaggio il corpo del messaggio contiene un elemento wrapper. In caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostare il valore di <xref:System.ServiceModel.MessageContractAttribute.IsWrapped%2A> su `false` per sopprimere l'elemento wrapper nel quale è serializzato il corpo del messaggio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.MessageContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica se il messaggio deve essere crittografato o firmato o se deve presentare entrambi i meccanismi di sicurezza.</summary>
        <value>Uno dei valori di <see cref="T:System.Net.Security.ProtectionLevel" />. Il valore predefinito è <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per informazioni dettagliate sui livelli di protezione e relativi presupposti e gli ambiti, vedere [Understanding Protection Level](~/docs/framework/wcf/understanding-protection-level.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore passato alla proprietà quando l'impostazione non è uno dei valori dell'enumerazione <see cref="T:System.Net.Security.ProtectionLevel" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WrapperName">
      <MemberSignature Language="C#" Value="public string WrapperName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WrapperName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractAttribute.WrapperName" />
      <MemberSignature Language="VB.NET" Value="Public Property WrapperName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ WrapperName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WrapperName : string with get, set" Usage="System.ServiceModel.MessageContractAttribute.WrapperName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome dell'elemento wrapper del corpo del messaggio.</summary>
        <value>Nome dell'elemento wrapper contenuto nel corpo del messaggio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare la proprietà <xref:System.ServiceModel.MessageContractAttribute.WrapperName%2A> per impostare il nome dell'elemento wrapper.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore è una stringa vuota.</exception>
      </Docs>
    </Member>
    <Member MemberName="WrapperNamespace">
      <MemberSignature Language="C#" Value="public string WrapperNamespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WrapperNamespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractAttribute.WrapperNamespace" />
      <MemberSignature Language="VB.NET" Value="Public Property WrapperNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ WrapperNamespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WrapperNamespace : string with get, set" Usage="System.ServiceModel.MessageContractAttribute.WrapperNamespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta lo spazio dei nomi dell'elemento wrapper del corpo del messaggio.</summary>
        <value>Spazio dei nomi dell'elemento wrapper.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare la proprietà <xref:System.ServiceModel.MessageContractAttribute.WrapperNamespace%2A> per impostare lo spazio dei nomi dell'elemento wrapper.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato l'utilizzo di <xref:System.ServiceModel.MessageContractAttribute> per controllare la struttura della SOAP envelope per il messaggio di richiesta e il messaggio di risposta, nonché l'utilizzo di <xref:System.ServiceModel.MessageHeaderAttribute> per creare un'intestazione SOAP per il messaggio di risposta e di <xref:System.ServiceModel.MessageBodyMemberAttribute> per specificare i corpi dei messaggi di richiesta e di risposta. Nel codice è contenuto un esempio di ogni messaggio quando viene inviato.  
  
 [!code-csharp[MessageHeaderAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/messageheaderattribute/cs/services.cs#1)]
 [!code-vb[MessageHeaderAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/messageheaderattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>