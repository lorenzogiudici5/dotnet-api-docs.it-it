<Type Name="OperationContractAttribute" FullName="System.ServiceModel.OperationContractAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a0808c4424298333da5de1382e073e19dd8b1592" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37612471" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OperationContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.OperationContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OperationContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type OperationContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indicates that a method defines an operation that is part of a service contract in a Windows Communication Foundation (WCF) application.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'attributo <xref:System.ServiceModel.OperationContractAttribute> può essere applicato a un metodo per indicare che quest'ultimo implementa un'operazione di servizio come parte di un contratto di servizio specificato mediante un attributo <xref:System.ServiceModel.ServiceContractAttribute>.  
  
 Le proprietà <xref:System.ServiceModel.OperationContractAttribute> consentono di controllare la struttura dell'operazione e i valori espressi nei metadati:  
  
-   La proprietà <xref:System.ServiceModel.OperationContractAttribute.Action%2A> indica l'azione che identifica in modo univoco questa operazione. WCF invia messaggi di richiesta a metodi in base all'azione.  
  
-   La proprietà <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> indica che l'operazione è implementata o può essere chiamata in modo asincrono tramite una coppia di metodi Begin/End.  
  
-   La proprietà <xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> indica se la proprietà <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> è stata impostata in modo esplicito.  
  
-   La proprietà <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> indica che l'operazione è costituita esclusivamente da un solo messaggio di input. All'operazione non è stato associato alcun messaggio di output.  
  
-   La proprietà <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> specifica se questa operazione può essere l'operazione iniziale di una sessione.  
  
-   Il <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> proprietà specifica se i tentativi di WCF terminare la sessione corrente dopo il completamento dell'operazione.  
  
-   La proprietà <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> indica la sicurezza a livello di messaggio che occorre fornire a un'operazione in fase di esecuzione.  
  
-   La proprietà <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> indica l'azione del messaggio di risposta dell'operazione.  
  
 L'attributo <xref:System.ServiceModel.OperationContractAttribute> dichiara che un metodo è un'operazione di un contratto di servizio. Solo i metodi dotati dell'attributo <xref:System.ServiceModel.OperationContractAttribute> sono esposti come operazioni di servizio. Un contratto di servizio privo di metodi contrassegnati con l'attributo <xref:System.ServiceModel.OperationContractAttribute> non espone alcuna operazione.  
  
 Il <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> proprietà indica che una coppia di `Begin` \< *methodName*> e `End` \< *methodName*> metodi costituiscono un singolo operazione implementata in modo asincrono (sia nel client o il servizio). La possibilità di un servizio di implementare operazioni in modo asincrono è un dettaglio di implementazione del servizio e non è esposto nei metadati, ad esempio WSDL (Web Services Description Language).  
  
 Analogamente, i client possono scegliere di richiamare le operazioni in modo asincrono indipendentemente dalla modalità di implementazione del metodo del servizio. Quando un metodo di servizio, anche se richiede un certo tempo di esecuzione, deve restituire le informazioni direttamente al client è consigliabile impostare i client in modo che le operazioni di servizio vengano chiamate in modo asincrono. Per informazioni dettagliate, vedere <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A>.  
  
 La proprietà <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> indica che un metodo non restituisce alcun valore, nemmeno un messaggio di risposta sottostante vuoto. Questo tipo di metodo è utile per le notifiche o per le comunicazioni in stile evento. Poiché i metodi di questo tipo non possono restituire alcun messaggio di risposta, il metodo deve essere dichiarato in modo da restituire `void`.  
  
> [!IMPORTANT]
>  Durante il recupero a livello di programmazione il servizio Archivio informazioni in questo attributo, usare il <xref:System.ServiceModel.Description.ContractDescription> classe invece di reflection.  
  
> [!NOTE]
>  Se la proprietà <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> viene impostata su `false` (ovvero l'impostazione predefinita), anche i metodi che restituiscono `void` sono metodi bidirezionali a livello di messaggio sottostante. In questo caso, l'infrastruttura crea e invia un messaggio vuoto per segnalare al chiamante il termine dell'esecuzione del metodo chiamato. L'utilizzo di questo approccio consente all'applicazione e all'infrastruttura di inviare al client le informazioni sull'errore, ad esempio per indicare che si tratta di un errore SOAP. L'unico modo per impedire la creazione e l'invio di un messaggio di risposta è impostare la proprietà <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> su `true`. Per altre informazioni, vedere [unidirezionale servizi](~/docs/framework/wcf/feature-details/one-way-services.md).  
  
 Oltre a consentire la modifica dell'azione predefinita dei messaggi SOAP, le proprietà <xref:System.ServiceModel.OperationContractAttribute.Action%2A> e <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> possono essere utilizzate per creare gestori per i messaggi non riconosciuti o per disabilitare l'aggiunta di azioni durante la programmazione diretta dei messaggi. Utilizzare la proprietà <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> per impedire ai client di chiamare una determinata operazione di servizio prima delle altre operazioni. Usare il <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> proprietà per impostare WCF in chiuda il canale dopo che i client chiamano una determinata operazione di servizio. Per altre informazioni, vedere [utilizzando le sessioni](~/docs/framework/wcf/using-sessions.md).  
  
 La proprietà <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> consente di specificare nel contratto dell'operazione se i relativi messaggi sono firmati o crittografati, oppure se presentano entrambi i meccanismi di sicurezza. Se un'associazione non è in grado di fornire il livello di sicurezza richiesto dal contratto, l'infrastruttura genera un'eccezione in fase di esecuzione. Per altre informazioni, vedere <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> e [livello di protezione delle informazioni sulle](~/docs/framework/wcf/understanding-protection-level.md).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato un semplice contratto di servizio avente una sola operazione.  
  
 [!code-csharp[OperationContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute/vb/services.vb#1)]  
  
 L'esempio seguente illustra un servizio che implementa un contratto di servizio implicito in cui sono specificate tre operazioni. Le prime due sono operazioni bidirezionali che restituiscono al chiamante messaggi di risposta sottostanti indipendentemente dal valore restituito. La terza operazione riceve una chiamata, ovvero un messaggio in ingresso sottostante, ma non restituisce alcun messaggio di risposta sottostante.  
  
```csharp  
[ServiceContractAttribute]  
public class OneAndTwoWay  
{  
  // The client waits until a response message appears.  
  [OperationContractAttribute]  
  public int MethodOne (int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  // The client waits until an empty response message appears.  
  [OperationContractAttribute]  
  public void MethodTwo (int x)  
  {  
    return;  
  }  
  
  // The client returns as soon as an outbound message  
  // is dispatched to the service; no response  
  // message is generated or sent from the service.  
  [OperationContractAttribute(IsOneWay=true)]  
  public void MethodThree (int x)  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.OperationContractAttribute" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the WS-Addressing action of the request message.</summary>
        <value>Azione da utilizzare nella creazione dell'intestazione dell'azione WS-Addressing.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.ServiceModel.OperationContractAttribute.Action%2A> messaggio proprietà per controllare l'azione del metodo di input. Poiché WCF Usa questa azione per inviare un messaggio in ingresso al metodo appropriato, i messaggi utilizzati all'interno di un'operazione del contratto devono presentare azioni univoche. Il valore dell'azione predefinita è una combinazione dello spazio dei nomi del contratto (il valore predefinito è "http://tempuri.org/"), il nome del contratto (interfaccia nome o il nome della classe, se viene utilizzata alcuna interfaccia di servizio esplicita), il nome dell'operazione e una stringa aggiuntiva ("risposta") se il messaggio è una risposta correlata. Per eseguire l'override di questo valore predefinito è possibile utilizzare la proprietà <xref:System.ServiceModel.OperationContractAttribute.Action%2A>.  
  
 Per indicare che un'operazione di servizio gestisce tutti i messaggi che sono stati ricevuti dal servizio ma che non possono essere indirizzati a un'operazione di servizio, impostare il valore su asterisco ("*"). Questo tipo di operazione, detta "gestore dei messaggi non corrispondenti", deve presentare una delle firme di metodo seguenti. In caso contrario, l'infrastruttura genera un'eccezione <xref:System.InvalidOperationException>:  
  
-   L'operazione di servizio può ricevere solo un oggetto <xref:System.ServiceModel.Channels.Message> e restituire un oggetto <xref:System.ServiceModel.Channels.Message>.  
  
-   L'operazione di servizio può ricevere solo un oggetto <xref:System.ServiceModel.Channels.Message> e non può restituire alcun valore (ovvero, può restituire solo `void`).  
  
> [!NOTE]
>  In un contratto di servizio può esistere una sola operazione di servizio avente la proprietà <xref:System.ServiceModel.OperationContractAttribute.Action%2A> impostata su "*." Qualsiasi gruppo di contratti di servizio ospitati sullo stesso URI di ascolto implementato da una classe di servizio può presentare più operazioni di servizio con il <xref:System.ServiceModel.OperationContractAttribute.Action%2A> impostata su "\*" quando il <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> è impostata su `false`. Tuttavia, solo una di queste operazioni di servizio può avere il <xref:System.ServiceModel.OperationContractAttribute.Action%2A> impostata su "\*" e il <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> proprietà impostata su true. Per informazioni dettagliate, vedere <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A>.  
  
   
  
## Examples  
 L'esempio seguente illustra un servizio che utilizza le proprietà <xref:System.ServiceModel.OperationContractAttribute.Action%2A> e <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> per controllare in modo esplicito le azioni SOAP sia del messaggio di input sia di quello di output (o di risposta) e la proprietà <xref:System.ServiceModel.OperationContractAttribute.Name%2A> per controllare il nome dell'operazione nei metadati. Infine, l'attributo <xref:System.ServiceModel.OperationContractAttribute.Action%2A> dell'applicazione illustrata nell'esempio è impostato su "*" per indicare un metodo che gestisce i messaggi non riconosciuti.  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 Un servizio che implementa questo contratto invia messaggi analoghi a quelli mostrati nell'esempio seguente:  
  
 [!code-csharp[OperationContractAttribute_Properties#2](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncPattern">
      <MemberSignature Language="C#" Value="public bool AsyncPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsyncPattern" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.AsyncPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPattern As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsyncPattern { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPattern : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.AsyncPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that an operation is implemented asynchronously using a <see langword="Begin" />&lt;*methodName*&gt; and <see langword="End" />&lt;*methodName*&gt; method pair in a service contract.</summary>
        <value>
          <see langword="true" /> Se il <see langword="Begin" /> &lt;* NomeMetodo *&gt;metodo corrispondente un' <see langword="End" /> &lt;* NomeMetodo *&gt; metodo e può essere gestita dall'infrastruttura come operazione che viene implementata come asincrono coppia di metodi nell'interfaccia di servizio; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare la proprietà <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> per compilare operazioni di servizio che possono essere chiamate in modo asincrono nel server, nel client o in entrambi. La proprietà <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> informa in fase di esecuzione che per un metodo `Begin` esiste un metodo `End` corrispondente conforme al modello di progettazione dei metodi asincroni di .NET Framework. Oltre a consentire di aumentare la scalabilità e le prestazioni lato server senza influire sui client del servizio, la compilazione di metodi asincroni lato server che implementano un'operazione di servizio è particolarmente indicata quando un'operazione di servizio deve restituire un valore al client dopo aver eseguito un'operazione di lunga durata eseguibile in modo asincrono.  
  
 I client non subiscono alcuna alterazione in quanto la coppia dei metodi asincroni nel server è un dettaglio di implementazione che non influisce sulla descrizione WSDL (Web Services Description Language) sottostante dell'operazione. Tali metodi vengono visualizzati ai client come un'unica operazione con `<input>` e correlati `<output>` messaggi. WCF indirizza automaticamente i messaggi in ingresso per il `Begin` \< *NomeMetodo*> (metodo) e i risultati della `End` \< *methodName*> chiamare nel messaggio in uscita. I canali client possono pertanto rappresentare la coppia di metodi come un'unica operazione sincrona o come una coppia di operazioni asincrone. La rappresentazione client non influisce in alcun caso o modo sull'implementazione asincrona nel server.  
  
 I contratti client possono utilizzare la proprietà <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> per indicare una coppia di metodi asincroni utilizzabili dal client per richiamare l'operazione in modo asincrono. In genere, le applicazioni client usano i [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) dello strumento e il `/async` opzione per generare un `Begin` \< *methodName*> e `End` \< *NomeMetodo*> coppia di metodi che il client può utilizzare per richiamare l'operazione in modo asincrono.  
  
> [!NOTE]
>  Se un'operazione di servizio presenta sia una versione asincrona sia una versione sincrona, il comportamento predefinito del servizio è richiamare la versione sincrona.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene mostrato un canale client per un contratto di servizio che prevede sia una versione sincrona sia una versione asincrona di `Add`. Se l'interfaccia del contratto è utilizzata nel client, sia l'operazione `BeginAdd` sia l'operazione `Add` richiamano un metodo nel server che può essere sincrono o asincrono. Se il contratto è utilizzato per implementare il servizio, l'impostazione predefinita prevede che le richieste in ingresso siano inviate al metodo sincrono.  
  
```csharp  
[ServiceContract]  
public interface IAddTwoNumbers  
{  
    // If the asynchronous method pair  
    // appears on the client channel, the client can call   
    // them asynchronously to prevent blocking.  
    [OperationContract (AsyncPattern=true)]  
    IAsyncResult BeginAdd(int a, int b, AsyncCallback cb, AsyncState s);  
  
    [OperationContract]  
    int EndAdd(IAsyncResult r);  
  
    // This is a synchronous version of the BeginAdd/EndAdd pair.  
    // It appears in the client channel code by default.   
    [OperationContract]  
    int Add(int a, int b);  
   }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.OperationContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the messages for this operation must be encrypted, signed, or both.</summary>
        <value>
          <see langword="true" /> se la proprietà <see cref="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" /> è impostata su un valore diverso da <see cref="F:System.Net.Security.ProtectionLevel.None" />. In caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare la proprietà <xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> per stabilire se per i messaggi di questa operazione è necessario impostare un livello di protezione specifico.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitiating">
      <MemberSignature Language="C#" Value="public bool IsInitiating { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitiating" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsInitiating" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInitiating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitiating { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsInitiating : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsInitiating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the method implements an operation that can initiate a session on the server (if such a session exists).</summary>
        <value>
          <see langword="true" /> se all'operazione è consentito avviare una sessione nel server. In caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La proprietà <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> consente di stabilire se un'operazione può essere la prima operazione ad essere chiamata quando viene creata una sessione.  
  
> [!NOTE]
>  Affinché la proprietà <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A?displayProperty=nameWithType> funzioni correttamente è necessario che il valore di <xref:System.ServiceModel.SessionMode.Allowed> sia <xref:System.ServiceModel.SessionMode.Required> o <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> e che l'associazione utilizzata richieda o consenta le sessioni.  
  
 L'impostazione predefinita è `true`, il che significa che un'operazione può essere la prima ad essere chiamata su un canale. Le chiamate successive al metodo in corso di inizializzazione non hanno altro effetto che quello di chiamare il metodo. Non vengono create altre sessioni. Se il contratto non si avvale di una sessione, l'impostazione della proprietà <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> su `false` viene ignorata.  
  
 In genere la proprietà <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> è impostata su `false` per imporre ai client di chiamare un altro metodo del servizio prima che possano richiamare il metodo a cui si riferisce la proprietà. Se ad esempio il servizio presenta una serie di operazioni che dipendono da un numero ID dell'ordine, è possibile impostare su <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> la proprietà `true` di un'operazione di servizio `GetOrderId` e quindi impostare la suddetta proprietà su `false` per tutte le altre operazioni di servizio. Ciò garantisce che ogni nuovo client ottenga un ID dell'ordine prima di utilizzare gli altri metodi esposti dal servizio.  
  
> [!NOTE]
>  Esiste un'interazione fra la proprietà <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> e la proprietà <xref:System.ServiceModel.OperationContractAttribute.Action%2A>. In un contratto di servizio può esistere una sola operazione di servizio avente la proprietà <xref:System.ServiceModel.OperationContractAttribute.Action%2A> impostata su "*." Qualsiasi gruppo di contratti di servizio ospitati sullo stesso URI che implementa una classe di servizio di ascolto può presentare più operazioni di servizio con il <xref:System.ServiceModel.OperationContractAttribute.Action%2A> impostata su "\*" quando il <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> è impostata su `false`. Tuttavia, solo uno di questi metodi di servizio può avere il <xref:System.ServiceModel.OperationContractAttribute.Action%2A> proprietà impostata su "\*" e il <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> impostata su `true`.  
  
 Se un servizio riceve un messaggio relativo a un'operazione che non è di tipo IsInitiating, tale servizio restituisce un errore SOAP di tipo ActionNotSupported. Il client considera ciò come un'eccezione <xref:System.ServiceModel.FaultException>. Se un client chiama per prima un'operazione che non è di tipo IsInitiating, il runtime client genera un'eccezione <xref:System.InvalidOperationException?displayProperty=nameWithType>.  
  
 Per altre informazioni, vedere [utilizzando le sessioni](~/docs/framework/wcf/using-sessions.md).  
  
   
  
## Examples  
 L'esempio seguente illustra un servizio che implementa un contratto di servizio in cui sono specificati tre metodi. Il servizio richiede una sessione. Se la prima chiamata di un chiamante riguarda un'operazione diversa da `MethodOne`, il canale viene rifiutato e viene generata un'eccezione. Quando un chiamante avvia una sessione chiamando `MethodOne`, può terminare la sessione di comunicazione in qualsiasi momento chiamando `MethodThree`. È possibile chiamare `MethodTwo` un numero di volte qualsiasi durante una sessione.  
  
```csharp  
[ServiceContract(SessionMode=SessionMode.Required)]  
public class InitializeAndTerminateService  
{  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=true,  
    IsTerminating=false  
  )]  
  public void MethodOne()  
  {  
    return;  
  }  
  
  [OperationContract(  
    IsInitiating=false,  
    IsTerminating=false  
  )]  
  public int MethodTwo(int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=false,  
    IsTerminating=true  
  )]  
  public void MethodThree()  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOneWay">
      <MemberSignature Language="C#" Value="public bool IsOneWay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOneWay" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsOneWay" />
      <MemberSignature Language="VB.NET" Value="Public Property IsOneWay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOneWay { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsOneWay : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsOneWay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether an operation returns a reply message.</summary>
        <value>
          <see langword="true" /> se questo metodo riceve un messaggio di richiesta e non restituisce alcun messaggio di risposta. In caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare la proprietà <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> per indicare che un'operazione non restituisce alcun messaggio di risposta. Questo tipo di operazione è utile per notifiche o comunicazioni in stile evento, soprattutto nelle comunicazioni bidirezionali. Poiché non attendono alcun messaggio di risposta sottostante, i chiamanti di operazioni unidirezionali non hanno alcun modo diretto per rilevare un errore di elaborazione del messaggio di richiesta. Le applicazioni del servizio che utilizzano canali e operazioni unidirezionali affidabili sono in grado di rilevare un errore di invio di un messaggio a livello di canale. Per informazioni dettagliate, vedere [panoramica delle sessioni affidabili](~/docs/framework/wcf/feature-details/reliable-sessions-overview.md).)  
  
 Nelle applicazioni orientate al servizio duplex (o bidirezionale) in cui il client e il server comunicano fra di loro in modo indipendente, un canale client può utilizzare la proprietà <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> nei propri metodi per indicare che il servizio può effettuare chiamate unidirezionali al client e che quest'ultimo può trattare tali chiamate come eventi. Poiché il servizio non prevede alcun messaggio di risposta, non viene creato alcun messaggio né chiamata di restituzione.  
  
 Se la proprietà <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> viene impostata su `false` (impostazione predefinita), anche i metodi che restituiscono `void` restituiscono un messaggio di risposta. In questo caso, l'infrastruttura crea e invia un messaggio vuoto per segnalare al chiamante il termine dell'esecuzione del metodo chiamato. L'utilizzo di questo approccio consente all'infrastruttura di inviare errori SOAP al client. L'unico modo per annullare la creazione e l'invio di un messaggio di risposta è impostare la proprietà <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> su `true`.  
  
 I metodi unidirezionali non devono restituire alcun valore né presentare parametri `ref` o `out`. In caso contrario viene generata un'eccezione <xref:System.InvalidOperationException?displayProperty=nameWithType>.  
  
 Le operazioni unidirezionali sono semplicemente operazioni che non prevedono messaggi di risposta. Tali operazioni possono essere bloccate se risulta impossibile stabilire una connessione, se il messaggio in uscita presenta dimensioni eccessive o se la velocità con cui il servizio legge le informazioni in ingresso è insufficiente. Se un client richiede una chiamata non bloccante, generare operazioni di tipo <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A>. Per altre informazioni, vedere [Services unidirezionale](~/docs/framework/wcf/feature-details/one-way-services.md) e [accesso ai servizi tramite Client WCF](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md).  
  
   
  
## Examples  
 L'esempio seguente illustra un servizio che implementa un contratto di servizio in cui sono specificate tre operazioni. I primi due metodi implementano operazioni bidirezionali che restituiscono al chiamante messaggi di risposta sottostanti indipendentemente dal valore restituito. Il terzo metodo implementa un'operazione che riceve una chiamata, ovvero un messaggio in ingresso sottostante, ma non restituisce alcun messaggio di risposta sottostante.  
  
```csharp  
[ServiceContract]  
public class OneAndTwoWay  
{  
  // The client waits until a response message appears.  
  [OperationContract]  
  public int MethodOne (int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  // The client waits until an empty response message appears.  
  [OperationContract]  
  public void MethodTwo (int x)  
  {  
    return;  
  }  
  
  // The client returns as soon as an outbound message  
  // is queued for dispatch to the service; no response  
  // message is generated or sent.  
  [OperationContract(IsOneWay=true)]  
  public void MethodThree (int x)  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsTerminating" />
      <MemberSignature Language="VB.NET" Value="Public Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTerminating { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsTerminating : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the service operation causes the server to close the session after the reply message, if any, is sent.</summary>
        <value>
          <see langword="true" /> se l'operazione causa la chiusura della sessione da parte del server. In caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare la proprietà <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> per indicare che la chiamata a un'operazione di servizio comporta la chiusura della sessione di comunicazione.  
  
 In un'applicazione client, un valore pari <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> impostato su `true` indica a WCF di chiude il canale all'arrivo della risposta.  
  
 Se invece tale impostazione viene eseguita in un servizio, l'infrastruttura imposta un intervallo di tempo e, se il client non chiude il canale entro tale intervallo, il canale viene interrotto.  
  
 Per altre informazioni sull'uso di questa proprietà con le sessioni, vedere [utilizzando le sessioni](~/docs/framework/wcf/using-sessions.md).  
  
> [!NOTE]
>  Se un chiamante è in ascolto dell'evento <xref:System.ServiceModel.OperationContext.OperationCompleted?displayProperty=nameWithType> per l'operazione <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A?displayProperty=nameWithType>, tali operazioni possono essere bloccate alla ricezione della risposta. La modalità di gestione migliore è pianificare l'attività su un altro thread quando viene generato<xref:System.ServiceModel.OperationContext.OperationCompleted>, quindi uscire immediatamente da quel gestore eventi.  
  
   
  
## Examples  
 L'esempio seguente illustra un servizio che implementa un contratto di servizio in cui sono specificate tre operazioni. Il servizio richiede una connessione con stato. Se la prima chiamata di un chiamante riguarda un'operazione diversa da `MethodOne`, il canale viene rifiutato e viene generata un'eccezione. Quando un chiamante avvia una sessione chiamando `MethodOne`, può terminare la sessione di comunicazione in qualsiasi momento chiamando `MethodThree`. È possibile chiamare `MethodTwo` un numero di volte qualsiasi durante una sessione.  
  
```csharp  
[ServiceContractAttribute(SessionMode=SessionMode.Required)]  
public class InitializeAndTerminateService  
{  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=true,  
    IsTerminating=false  
  )]  
  public void MethodOne()  
  {  
    return;  
  }  
  
  [OperationContract(  
    IsInitiating=false,  
    IsTerminating=false  
  )]  
  public int MethodTwo(int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=false  
    IsTerminating=true  
  )]  
  public void MethodThree()  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the operation.</summary>
        <value>Nome dell'operazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.ServiceModel.OperationContractAttribute.Name%2A> proprietà per eseguire l'override di <`operation`> nome dell'elemento in WSDL. Il nome predefinito dell'operazione corrisponde al nome del metodo di implementazione.  
  
   
  
## Examples  
 Nell'esempio di codice seguente la proprietà <xref:System.ServiceModel.OperationContractAttribute.Name%2A> viene utilizzata per dichiarare il nome dell'operazione esposto nei metadati.  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.ServiceModel.OperationContractAttribute.Name" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The value is an empty string.</exception>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.OperationContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies whether the messages of an operation must be encrypted, signed, or both.</summary>
        <value>Uno dei valori di <see cref="T:System.Net.Security.ProtectionLevel" />. Il valore predefinito è <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare la proprietà <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> per specificare se i messaggi di un'operazione devono essere crittografati o firmati o se devono presentare entrambi i meccanismi di sicurezza. Il valore impostato corrisponde al valore predefinito per tutti i messaggi specificato per questa operazione, a meno che un ambito più ristretto esegua l'override di questo valore.  
  
 È importante ricordare che il comportamento di protezione in fase di esecuzione deriva dalla combinazione dei valori relativi al livello di protezione su cui sono impostate le proprietà seguenti. Queste proprietà presentano una struttura gerarchica. La configurazione del valore esterno determina l'impostazione predefinita per tutti gli ambiti più ristretti a meno che non venga impostato esplicitamente un valore diverso per un ambito più ristretto. In questo caso, il valore esterno rimane l'impostazione predefinita per tutti gli ambiti più ristretti, ad eccezione di quello impostato in modo specifico.  
  
 Ad esempio, se la proprietà <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> è impostata su <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> e nessuno degli altri ambiti più ristretti presenta impostazioni riguardanti il livello di protezione, tutti i messaggi di un contratto dell'operazione vengono crittografati e firmati. Se tuttavia per una di queste operazioni la proprietà <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> è impostata su <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, i messaggi di tale operazione vengono firmati. Tutti gli altri messaggi del contratto vengono invece crittografati e firmati.  
  
 Per informazioni dettagliate sui livelli di protezione e relativi presupposti e gli ambiti, vedere [Understanding Protection Level](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Gli ambiti di impostazione di questi valori sono:  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 La proprietà <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> è impostata su <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 La proprietà <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> è impostata su <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Quando nel contratto non è stato specificato in modo esplicito alcun livello di protezione e l'associazione sottostante supporta la sicurezza (sia essa a livello di trasporto o di messaggio), il livello di protezione effettivo dell'intero contratto è <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Se l'associazione non supporta la sicurezza (ad esempio <xref:System.ServiceModel.BasicHttpBinding>), il livello di sicurezza <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> effettivo è <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> per l'intero contratto. Ne consegue che a seconda dell'associazione dell'endpoint i client possono richiedere un sistema diverso di protezione a livello di messaggio o di trasporto anche se il contratto prevede il livello di sicurezza <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The value is not one of the <see cref="T:System.Net.Security.ProtectionLevel" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReplyAction">
      <MemberSignature Language="C#" Value="public string ReplyAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReplyAction" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.ReplyAction" />
      <MemberSignature Language="VB.NET" Value="Public Property ReplyAction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ReplyAction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReplyAction : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.ReplyAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value of the SOAP action for the reply message of the operation.</summary>
        <value>Valore dell'azione SOAP del messaggio di risposta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oltre a definire un valore specifico per l'intestazione dell'azione del messaggio di risposta è anche possibile specificare la stringa asterisco ("*"). Se si specifica un asterisco nel servizio, indica a WCF non di aggiungere un'azione di risposta al messaggio, che è utile se si sta programmando direttamente con i messaggi. Se si specifica un asterisco in un'applicazione client indica a WCF di non convalida l'azione di risposta.  
  
   
  
## Examples  
 L'esempio seguente illustra un servizio che utilizza le proprietà <xref:System.ServiceModel.OperationContractAttribute.Action%2A> e <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> per controllare in modo esplicito le azioni SOAP sia del messaggio di input sia di quello di output (o di risposta) e la proprietà <xref:System.ServiceModel.OperationContractAttribute.Name%2A> per controllare il nome dell'operazione nei metadati.  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>