<Type Name="AnchoredBlock" FullName="System.Windows.Documents.AnchoredBlock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="209553234f975f76be9bb75d09aeae8573e1b043" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36363352" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class AnchoredBlock : System.Windows.Documents.Inline" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit AnchoredBlock extends System.Windows.Documents.Inline" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.AnchoredBlock" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class AnchoredBlock&#xA;Inherits Inline" />
  <TypeSignature Language="C++ CLI" Value="public ref class AnchoredBlock abstract : System::Windows::Documents::Inline" />
  <TypeSignature Language="F#" Value="type AnchoredBlock = class&#xA;    inherit Inline" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Documents.Inline</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Blocks")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An abstract class that provides a base for <see cref="T:System.Windows.Documents.Inline" /> elements that are used to anchor <see cref="T:System.Windows.Documents.Block" /> elements to flow content.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AnchoredBlock (System.Windows.Documents.Block block, System.Windows.Documents.TextPointer insertionPosition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Windows.Documents.Block block, class System.Windows.Documents.TextPointer insertionPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.AnchoredBlock.#ctor(System.Windows.Documents.Block,System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AnchoredBlock(System::Windows::Documents::Block ^ block, System::Windows::Documents::TextPointer ^ insertionPosition);" />
      <MemberSignature Language="F#" Value="new System.Windows.Documents.AnchoredBlock : System.Windows.Documents.Block * System.Windows.Documents.TextPointer -&gt; System.Windows.Documents.AnchoredBlock" Usage="new System.Windows.Documents.AnchoredBlock (block, insertionPosition)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="block" Type="System.Windows.Documents.Block" />
        <Parameter Name="insertionPosition" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="block">A <see cref="T:System.Windows.Documents.Block" /> object specifying the initial contents of the new element.  This parameter may be <see langword="null" />, in which case no <see cref="T:System.Windows.Documents.Block" /> is inserted.</param>
        <param name="insertionPosition">A <see cref="T:System.Windows.Documents.TextPointer" /> specifying an insertion position at which to insert the element after it is created, or <see langword="null" /> for no automatic insertion.</param>
        <summary>Initializes base class values when called by a derived class, taking a specified <see cref="T:System.Windows.Documents.Block" /> object as the initial contents of the new descendant of <see cref="T:System.Windows.Documents.AnchoredBlock" />, and a <see cref="T:System.Windows.Documents.TextPointer" /> specifying an insertion position for the new <see cref="T:System.Windows.Documents.AnchoredBlock" /> descendant.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Blocks">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.BlockCollection Blocks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.BlockCollection Blocks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.AnchoredBlock.Blocks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Blocks As BlockCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::BlockCollection ^ Blocks { System::Windows::Documents::BlockCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Blocks : System.Windows.Documents.BlockCollection" Usage="System.Windows.Documents.AnchoredBlock.Blocks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.BlockCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Windows.Documents.BlockCollection" /> containing the top-level <see cref="T:System.Windows.Documents.Block" /> elements that comprise the contents of the element.</summary>
        <value>Un <see cref="T:System.Windows.Documents.BlockCollection" /> contenente il <see cref="T:System.Windows.Documents.Block" /> gli elementi che costituiscono il contenuto dell'elemento.  Nessun valore predefinito per questa proprietà.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderBrush">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush BorderBrush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush BorderBrush" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.AnchoredBlock.BorderBrush" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderBrush As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ BorderBrush { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BorderBrush : System.Windows.Media.Brush with get, set" Usage="System.Windows.Documents.AnchoredBlock.BorderBrush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a <see cref="T:System.Windows.Media.Brush" /> to use when painting the element's border.</summary>
        <value>Pennello usato da applicare al bordo dell'elemento.  Il valore predefinito è una * * null * * pennello.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per una tabella di campioni che mostrano i colori del pennello predefiniti disponibili, vedere <xref:System.Windows.Media.Brushes>.  
  
<a name="dependencyPropertyInfo_BorderBrush"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Documents.AnchoredBlock.BorderBrushProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Windows.Documents.Block.BorderBrush%2A> attributo di un elemento (<xref:System.Windows.Documents.Paragraph>).  
  
 [!code-xaml[BlockSnippets#_Block_BordersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_bordersxaml)]  
  
 La figura seguente illustra il rendering di questo esempio.  
  
 ![Schermata: 1 blu,&#47;4 pollici bordo intorno a Block](~/add/media/block-borders.png "schermata: bordo blu, 1/4 di pollice intorno a Block")  
  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Windows.Documents.Block.BorderBrush%2A> proprietà a livello di codice.  
  
 [!code-csharp[BlockSnippets#_Block_Borders](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_borders)]
 [!code-vb[BlockSnippets#_Block_Borders](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_borders)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.AnchoredBlock.BorderThickness" />
      </Docs>
    </Member>
    <Member MemberName="BorderBrushProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BorderBrushProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BorderBrushProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.AnchoredBlock.BorderBrushProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BorderBrushProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BorderBrushProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BorderBrushProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.AnchoredBlock.BorderBrushProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.Documents.AnchoredBlock.BorderBrush" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderThickness">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness BorderThickness { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness BorderThickness" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.AnchoredBlock.BorderThickness" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderThickness As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness BorderThickness { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.BorderThickness : System.Windows.Thickness with get, set" Usage="System.Windows.Documents.AnchoredBlock.BorderThickness" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the border thickness for the element.</summary>
        <value>Oggetto <see cref="T:System.Windows.Thickness" /> struttura che specifica la quantità di bordo da applicare, in DIP (device independent pixel).  Il valore predefinito è uno spessore uniforme pari a zero (* * 0.0* *).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_BorderThickness"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object BorderThickness="uniformThickness"/>  
- or -  
<object BorderThickness="independentThickness"/>  
- or -  
<object BorderThickness="qualifiedUniformThickness"/>  
- or -  
<object BorderThickness="qualifiedIndependentThickness"/>  
```  
  
<a name="xamlValues_BorderThickness"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *uniformThickness*  
 Rappresentazione di stringa di un singolo <xref:System.Double> valore da applicare in modo uniforme in tutte le dimensioni di spessore quattro.  Ad esempio, il valore `"10"` equivale a un valore di `"10,10,10,10"`.  Un valore non qualificato viene misurato in DIP (device independent pixel). Le stringhe non necessario includere in modo esplicito i separatori decimali.  
  
 *independentThickness quale*  
 Rappresentazione di stringa di quattro ordinati <xref:System.Double> i valori corrispondenti alle dimensioni di spessore indipendente per i margini sinistro, superiore, con il pulsante destro e inferiore, in quest'ordine.  I quattro valori devono essere separati da virgole; non sono consentiti spazi.  Ad esempio, "5,10,15,20" comporta 5 pixel del bordo a sinistra del contenuto, 10 pixel del bordo superiore del contenuto, 15 pixel del bordo a destra del contenuto e 20 pixel del bordo sotto il contenuto.  
  
 *qualifiedUniformThickness*  
 Valore descritto da *uniformThickness* seguita da uno degli identificatori di unità seguenti: `px`, `in`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` è pollici; in 1 = = 96px  
  
 Ad esempio, `"1in"` fornisce un bordo uniforme di 1 pollice in tutte le direzioni.  
  
 *qualifiedIndependentThickness*  
 Valore descritto da *independentThickness quale*, con ogni valore indipendente seguiti da uno dei seguenti identificatori, unità: `px`, `in`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` è pollici; in 1 = = 96px  
  
 Ad esempio `"1.5in,0.8in,1.5in,0.8in"`.  Identificatori di unità potrebbero essere misto o omesso da uno o più valori.  
  
<a name="dependencyPropertyInfo_BorderThickness"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Documents.AnchoredBlock.BorderThicknessProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Windows.Documents.Block.BorderThickness%2A> attributo di un <xref:System.Windows.Documents.Block> elemento (<xref:System.Windows.Documents.Paragraph>).  
  
 [!code-xaml[BlockSnippets#_Block_BordersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_bordersxaml)]  
  
 La figura seguente illustra il rendering di questo esempio.  
  
 ![Schermata: 1 blu,&#47;4 pollici bordo intorno a Block](~/add/media/block-borders.png "schermata: bordo blu, 1/4 di pollice intorno a Block")  
  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Windows.Documents.Block.BorderThickness%2A> proprietà a livello di codice.  
  
 [!code-csharp[BlockSnippets#_Block_Borders](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_borders)]
 [!code-vb[BlockSnippets#_Block_Borders](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_borders)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.AnchoredBlock.BorderBrush" />
      </Docs>
    </Member>
    <Member MemberName="BorderThicknessProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BorderThicknessProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BorderThicknessProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.AnchoredBlock.BorderThicknessProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BorderThicknessProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BorderThicknessProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BorderThicknessProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.AnchoredBlock.BorderThicknessProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.Documents.AnchoredBlock.BorderThickness" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineHeight">
      <MemberSignature Language="C#" Value="public double LineHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LineHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.AnchoredBlock.LineHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property LineHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double LineHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.LineHeight : double with get, set" Usage="System.Windows.Documents.AnchoredBlock.LineHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of each line of content.</summary>
        <value>Valore Double che specifica l'altezza della riga, in DIP (Device Independent Pixel).  <see cref="P:System.Windows.Documents.AnchoredBlock.LineHeight" /> deve essere maggiore o uguale a <c>compreso tra 0,0034</c> e minore o uguale a quindi <c>160000</c>.  Il valore <see cref="F:System.Double.NaN" /> (equivalente al valore dell'attributo "<c>Auto</c>") fa sì che l'altezza della riga viene determinata automaticamente dalle caratteristiche del carattere corrente.  Il valore predefinito è <see cref="F:System.Double.NaN" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo valore non modifica l'altezza del testo associato; ma modifica l'altezza della riga che contiene il testo.  
  
 Oltre a questa proprietà, il layout delle righe in una <xref:System.Windows.Documents.AnchoredBlock> è interessato dalla relativa <xref:System.Windows.Documents.AnchoredBlock.LineStackingStrategy%2A> proprietà.  
  
<a name="xamlAttributeUsage_LineHeight"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object LineHeight="double"/>  
- or -  
<object LineHeight="qualifiedDouble"/>  
- or -  
<object LineHeight="Auto"/>  
```  
  
<a name="xamlValues_LineHeight"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *double*  
 Rappresentazione di stringa di un <xref:System.Double> valore maggiore o uguale a `0.0034` ma uguali o minori rispetto a `160000`. Un valore non qualificato viene misurato in DIP (device independent pixel). Le stringhe non necessario includere in modo esplicito i separatori decimali.  
  
 *qualifiedDouble*  
 Un *doppie* valore come descritto in precedenza, (ad eccezione di `Auto`) seguito da uno degli identificatori di unità seguenti: `px`, `in`, `cm`, `pt`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` è pollici; in 1 = = 96px  
  
 `cm` centimetri; 1cm==(96/2.54) px  
  
 `pt` punti; 1pt==(96/72) px  
  
 Auto  
 Fa sì che l'altezza della riga viene determinata automaticamente dalle caratteristiche del carattere corrente.  Equivalente al valore della proprietà <xref:System.Double.NaN>.  
  
<a name="dependencyPropertyInfo_LineHeight"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Documents.AnchoredBlock.LineHeightProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Windows.Documents.AnchoredBlock.LineHeight%2A> attributo di un <xref:System.Windows.Documents.Block> elemento.  
  
 [!code-xaml[BlockSnippets#_Block_LineHeightXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_lineheightxaml)]  
  
 Nella figura seguente viene illustrato come nell'esempio precedente viene eseguito il rendering.  
  
 ![Schermata: LineHeight di FlowDocument](~/add/media/flowdocument-lineheight.png "schermata: LineHeight di FlowDocument")  
  
 La figura seguente illustra come viene visualizzato lo stesso esempio con l'impostazione predefinita <xref:System.Windows.Documents.AnchoredBlock.LineHeight%2A> = <xref:System.Double.NaN>.  
  
 ![Schermata: LineHeight predefinito di FlowDocument](~/add/media/flowdocument-lineheightdefault.png "schermata: LineHeight predefinito di FlowDocument")  
  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Windows.Documents.AnchoredBlock.LineHeight%2A> proprietà a livello di codice.  
  
 [!code-csharp[BlockSnippets#_Block_LineHeight](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_lineheight)]
 [!code-vb[BlockSnippets#_Block_LineHeight](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_lineheight)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Raised if an attempt is made to set <see cref="P:System.Windows.Controls.TextBlock.LineHeight" /> to a non-positive value.</exception>
      </Docs>
    </Member>
    <Member MemberName="LineHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LineHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LineHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.AnchoredBlock.LineHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LineHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LineHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LineHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.AnchoredBlock.LineHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.Documents.AnchoredBlock.LineHeight" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineStackingStrategy">
      <MemberSignature Language="C#" Value="public System.Windows.LineStackingStrategy LineStackingStrategy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.LineStackingStrategy LineStackingStrategy" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.AnchoredBlock.LineStackingStrategy" />
      <MemberSignature Language="VB.NET" Value="Public Property LineStackingStrategy As LineStackingStrategy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::LineStackingStrategy LineStackingStrategy { System::Windows::LineStackingStrategy get(); void set(System::Windows::LineStackingStrategy value); };" />
      <MemberSignature Language="F#" Value="member this.LineStackingStrategy : System.Windows.LineStackingStrategy with get, set" Usage="System.Windows.Documents.AnchoredBlock.LineStackingStrategy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LineStackingStrategy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the mechanism by which a line box is determined for each line of text within the text element.</summary>
        <value>Il meccanismo mediante il quale viene determinata una casella della riga per ogni riga di testo all'interno dell'elemento di testo. Il valore predefinito è <see cref="F:System.Windows.LineStackingStrategy.MaxHeight" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_LineStackingStrategyProperty"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Documents.AnchoredBlock.LineStackingStrategyProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Windows.Controls.TextBlock.LineStackingStrategy%2A> proprietà per determinare come le caselle di riga vengono create per le righe di testo di un <xref:System.Windows.Controls.TextBlock>. Il primo <xref:System.Windows.Controls.TextBlock> ha un <xref:System.Windows.Controls.TextBlock.LineStackingStrategy%2A> pari a <xref:System.Windows.LineStackingStrategy.MaxHeight> e il secondo <xref:System.Windows.Controls.TextBlock> ha un valore di <xref:System.Windows.LineStackingStrategy.BlockLineHeight>.  
  
 [!code-xaml[FlowMiscSnippets_snip#LineStackingStrategyExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/FlowMiscSnippets_snip/cs/linestackingstrategyexample.xaml#linestackingstrategyexamplewholepage)]  
  
 Nella figura seguente mostra il risultato di codice precedente.  
  
 ![Schermata: Confronto di valori LineStackingStrategy](~/add/media/flow-linestackingstrategy.gif "schermata di: valori LineStackingStrategy confrontare")  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineStackingStrategyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LineStackingStrategyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LineStackingStrategyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.AnchoredBlock.LineStackingStrategyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LineStackingStrategyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LineStackingStrategyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LineStackingStrategyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.AnchoredBlock.LineStackingStrategyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.Documents.AnchoredBlock.LineStackingStrategy" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.AnchoredBlock.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Thickness with get, set" Usage="System.Windows.Documents.AnchoredBlock.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the margin thickness for the element.</summary>
        <value>Oggetto <see cref="T:System.Windows.Thickness" /> struttura che specifica la quantità di margine da applicare, in DIP (device independent pixel).  Il valore predefinito è uno spessore uniforme pari a zero (* * 0.0* *).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.ListItem.Margin%2A> è lo spazio di buffer esterna all'area di contenuto di un elemento, tra i bordi dell'area di contenuto dell'elemento e i bordi dell'elemento padre.  Si differenzia <xref:System.Windows.Documents.ListItem.Padding%2A>, ovvero spazio nel buffer interno all'area di contenuto di un elemento, tra il contenuto dell'elemento e il bordo interno dell'elemento.  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Margin="uniformThickness"/>  
- or -  
<object Margin="independentThickness"/>  
- or -  
<object Margin="qualifiedUniformThickness"/>  
- or -  
<object Margin="qualifiedIndependentThickness"/>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *uniformThickness*  
 Rappresentazione di stringa di un singolo <xref:System.Double> valore da applicare in modo uniforme in tutte le dimensioni di spessore quattro.  Ad esempio, il valore `"10"` equivale a un valore di `"10,10,10,10"`.  Un valore non qualificato viene misurato in DIP (device independent pixel). Le stringhe non necessario includere in modo esplicito i separatori decimali.  
  
 *independentThickness quale*  
 Rappresentazione di stringa di quattro ordinati <xref:System.Double> i valori corrispondenti alle dimensioni di spessore indipendente per i margini sinistro, superiore, con il pulsante destro e inferiore, in quest'ordine.  I quattro valori devono essere separati da virgole; non sono consentiti spazi.  Ad esempio, "5,10,15,20" comporta 5 pixel del margine a sinistra del contenuto, 10 pixel del margine superiore del contenuto, 15 pixel del margine a destra del contenuto e 20 pixel del margine sotto il contenuto.  
  
 *qualifiedUniformThickness*  
 Valore descritto da *uniformThickness* seguita da uno degli identificatori di unità seguenti: `px`, `in`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` è pollici; in 1 = = 96px  
  
 Ad esempio, `"1in"` fornisce un margine uniforme di 1 pollice in tutte le direzioni.  
  
 *qualifiedIndependentThickness*  
 Valore descritto da *independentThickness quale*, con ogni valore indipendente seguiti da uno dei seguenti identificatori, unità: `px`, `in`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` è pollici; in 1 = = 96px  
  
 Ad esempio `"1.5in,0.8in,1.5in,0.8in"`.  Identificatori di unità potrebbero essere misto o omesso da uno o più valori.  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Documents.AnchoredBlock.MarginProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Windows.Documents.AnchoredBlock.Margin%2A> attributo di un <xref:System.Windows.Documents.Block> elemento (<xref:System.Windows.Documents.Paragraph>).  
  
 [!code-xaml[BlockSnippets#_Block_MarginPaddingXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_marginpaddingxaml)]  
  
 La figura seguente illustra il rendering di questo esempio.  I colori e spessori enorme vengono utilizzati a scopo illustrativo.  
  
 ![Schermata: Paragrafi con spaziatura e margini](~/add/media/block-marginpadding.png "schermata: paragrafi con spaziatura e margini")  
  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Windows.Documents.AnchoredBlock.Margin%2A> proprietà a livello di codice.  
  
 [!code-csharp[BlockSnippets#_Block_MarginPadding](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_marginpadding)]
 [!code-vb[BlockSnippets#_Block_MarginPadding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_marginpadding)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.AnchoredBlock.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MarginProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.AnchoredBlock.MarginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.Documents.AnchoredBlock.Margin" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.AnchoredBlock.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Padding { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Thickness with get, set" Usage="System.Windows.Documents.AnchoredBlock.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the padding thickness for the element.</summary>
        <value>Oggetto <see cref="T:System.Windows.Thickness" /> struttura che specifica la quantità di spaziatura interna da applicare, in DIP (device independent pixel).  Il valore predefinito è uno spessore uniforme pari a zero (* * 0.0* *).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.ListItem.Padding%2A> è lo spazio di buffer interno all'area di contenuto di un elemento, tra il contenuto dell'elemento e il bordo interno dell'elemento.  Si differenzia <xref:System.Windows.Documents.ListItem.Margin%2A>, ovvero lo spazio di buffer esterna all'area di contenuto di un elemento, tra i bordi dell'area di contenuto dell'elemento e i bordi dell'elemento padre.  
  
<a name="xamlAttributeUsage_Padding"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object Padding="uniformThickness"/>  
- or -  
<object Padding="independentThickness"/>  
- or -  
<object Padding="qualifiedUniformThickness"/>  
- or -  
<object Padding="qualifiedIndependentThickness"/>  
```  
  
<a name="xamlValues_Padding"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *uniformThickness*  
 Rappresentazione di stringa di un singolo <xref:System.Double> valore da applicare in modo uniforme in tutte le dimensioni di spessore quattro.  Ad esempio, il valore `"10"` equivale a un valore di `"10,10,10,10"`.  Un valore non qualificato viene misurato in DIP (device independent pixel). Le stringhe non necessario includere in modo esplicito i separatori decimali.  
  
 *independentThickness quale*  
 Rappresentazione di stringa di quattro ordinati <xref:System.Double> i valori corrispondenti alle dimensioni di spessore indipendente per i margini sinistro, superiore, con il pulsante destro e inferiore, in quest'ordine.  I quattro valori devono essere separati da virgole; non sono consentiti spazi.  Ad esempio, "5,10,15,20" comporta 5 pixel di spaziatura interna a sinistra del contenuto, 10 pixel di spaziatura interna sopra contenuto, 15 pixel di spaziatura interna a destra del contenuto e 20 pixel di spaziatura interna sotto il contenuto.  
  
 *qualifiedUniformThickness*  
 Valore descritto da *uniformThickness* seguita da uno degli identificatori di unità seguenti: `px`, `in`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` è pollici; in 1 = = 96px  
  
 Ad esempio, `"1in"` fornisce spaziatura interna uniforme di 1 pollice in tutte le direzioni.  
  
 *qualifiedIndependentThickness*  
 Valore descritto da *independentThickness quale*, con ogni valore indipendente seguiti da uno dei seguenti identificatori, unità: `px`, `in`.  
  
 `px` (impostazione predefinita) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` è pollici; in 1 = = 96px  
  
 Ad esempio `"1.5in,0.8in,1.5in,0.8in"`.  Identificatori di unità potrebbero essere misto o omesso da uno o più valori.  
  
<a name="dependencyPropertyInfo_Padding"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Documents.AnchoredBlock.PaddingProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Windows.Documents.AnchoredBlock.Padding%2A> attributo di un <xref:System.Windows.Documents.Block> elemento (<xref:System.Windows.Documents.Paragraph>).  
  
 [!code-xaml[BlockSnippets#_Block_MarginPaddingXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_marginpaddingxaml)]  
  
 La figura seguente illustra il rendering di questo esempio.  I colori e spessori enorme vengono utilizzati a scopo illustrativo.  
  
 ![Schermata: Paragrafi con spaziatura e margini](~/add/media/block-marginpadding.png "schermata: paragrafi con spaziatura e margini")  
  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Windows.Documents.AnchoredBlock.Padding%2A> proprietà a livello di codice.  
  
 [!code-csharp[BlockSnippets#_Block_MarginPadding](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_marginpadding)]
 [!code-vb[BlockSnippets#_Block_MarginPadding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_marginpadding)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PaddingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PaddingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.AnchoredBlock.PaddingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PaddingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PaddingProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable PaddingProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.AnchoredBlock.PaddingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.Documents.AnchoredBlock.Padding" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeBlocks">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeBlocks (System.Windows.Markup.XamlDesignerSerializationManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeBlocks(class System.Windows.Markup.XamlDesignerSerializationManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.AnchoredBlock.ShouldSerializeBlocks(System.Windows.Markup.XamlDesignerSerializationManager)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeBlocks (manager As XamlDesignerSerializationManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeBlocks(System::Windows::Markup::XamlDesignerSerializationManager ^ manager);" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeBlocks : System.Windows.Markup.XamlDesignerSerializationManager -&gt; bool" Usage="anchoredBlock.ShouldSerializeBlocks manager" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.Windows.Markup.XamlDesignerSerializationManager" />
      </Parameters>
      <Docs>
        <param name="manager">A serialization service manager object for this object.</param>
        <summary>Returns a value that indicates whether or not the effective value of the <see cref="P:System.Windows.Documents.AnchoredBlock.Blocks" /> property should be serialized during serialization of an object deriving from <see cref="T:System.Windows.Documents.AnchoredBlock" />.</summary>
        <returns>**true** if the <see cref="P:System.Windows.Documents.AnchoredBlock.Blocks" /> property should be serialized; otherwise, **false**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException">Raised when <paramref name="manager" /> is **null**.</exception>
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.TextAlignment TextAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.TextAlignment TextAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.AnchoredBlock.TextAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlignment As TextAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TextAlignment TextAlignment { System::Windows::TextAlignment get(); void set(System::Windows::TextAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.TextAlignment : System.Windows.TextAlignment with get, set" Usage="System.Windows.Documents.AnchoredBlock.TextAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates the horizontal alignment of text content.</summary>
        <value>Un membro del <see cref="T:System.Windows.TextAlignment" /> enumerazioni che specifica l'allineamento desiderato.  Il valore predefinito è <see cref="F:System.Windows.TextAlignment.Left" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_TextAlignment"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.Documents.AnchoredBlock.TextAlignmentProperty>|  
|Impostare le proprietà dei metadati su `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Windows.Documents.AnchoredBlock.TextAlignment%2A> attributo di un <xref:System.Windows.Documents.Block> elemento.  
  
 [!code-xaml[BlockSnippets#_Block_TextAlignmentXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_textalignmentxaml)]  
  
 Nella figura seguente viene illustrato nell'esempio precedente il rendering con **sinistra** l'allineamento del testo (impostazione predefinita).  
  
 ![Schermata: Valore della proprietà TextAlign di sinistra](~/add/media/flowdoc-textalign-left.png "schermata: valore Left della proprietà TextAlign")  
  
 Nella figura seguente viene illustrato l'esempio precedente il rendering con **destra** l'allineamento del testo.  
  
 ![Schermata: Valore TextAlign di destra](~/add/media/flowdoc-textalign-right.png "schermata: valore TextAlign di destra")  
  
 Nella figura seguente viene illustrato l'esempio precedente il rendering con **Center** l'allineamento del testo.  
  
 ![Schermata: Valore della proprietà TextAlign del centro](~/add/media/flowdoc-textalign-center.png "schermata: valore Center della proprietà TextAlign")  
  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Windows.Documents.AnchoredBlock.TextAlignment%2A> proprietà a livello di codice.  
  
 [!code-csharp[BlockSnippets#_Block_TextAlignment](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_textalignment)]
 [!code-vb[BlockSnippets#_Block_TextAlignment](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_textalignment)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TextAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TextAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.AnchoredBlock.TextAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TextAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TextAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.Documents.AnchoredBlock.TextAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.Documents.AnchoredBlock.TextAlignment" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>