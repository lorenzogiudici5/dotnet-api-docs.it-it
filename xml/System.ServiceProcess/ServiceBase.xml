<Type Name="ServiceBase" FullName="System.ServiceProcess.ServiceBase">
  <TypeSignature Language="C#" Value="public class ServiceBase : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceBase extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceBase" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceBase&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceBase : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.InstallerType(typeof(System.ServiceProcess.ServiceProcessInstaller))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="889e3-101">Fornisce una classe base per un servizio che esisterà nel contesto di un'applicazione di servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-101">Provides a base class for a service that will exist as part of a service application.</span></span> <span data-ttu-id="889e3-102">È necessario derivare <see cref="T:System.ServiceProcess.ServiceBase" /> durante la creazione di una nuova classe di servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-102"><see cref="T:System.ServiceProcess.ServiceBase" /> must be derived from when creating a new service class.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-103">Derivare da <xref:System.ServiceProcess.ServiceBase> quando si definisce la classe di servizio in un'applicazione di servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-103">Derive from <xref:System.ServiceProcess.ServiceBase> when defining your service class in a service application.</span></span> <span data-ttu-id="889e3-104">Qualsiasi servizio utile esegue l'override di <xref:System.ServiceProcess.ServiceBase.OnStart%2A> e <xref:System.ServiceProcess.ServiceBase.OnStop%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="889e3-104">Any useful service overrides the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods.</span></span> <span data-ttu-id="889e3-105">Per aggiungere ulteriori funzionalità, è possibile eseguire l'override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> e <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> con un funzionamento specifico in risposta alle modifiche dello stato di servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-105">For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state.</span></span>  
  
 <span data-ttu-id="889e3-106">Un servizio è un eseguibile a esecuzione prolungata che non supporta un'interfaccia utente, e che potrebbero non funzionare con l'account utente connesso.</span><span class="sxs-lookup"><span data-stu-id="889e3-106">A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account.</span></span> <span data-ttu-id="889e3-107">Il servizio è possibile eseguire senza tutti gli utenti connessi al computer.</span><span class="sxs-lookup"><span data-stu-id="889e3-107">The service can run without any user being logged on to the computer.</span></span>  
  
 <span data-ttu-id="889e3-108">Per impostazione predefinita, i servizi eseguiti con l'account di sistema, non è uguale all'account di amministratore.</span><span class="sxs-lookup"><span data-stu-id="889e3-108">By default, services run under the System account, which is not the same as the Administrator account.</span></span> <span data-ttu-id="889e3-109">È possibile modificare i diritti dell'account di sistema.</span><span class="sxs-lookup"><span data-stu-id="889e3-109">You cannot change the rights of the System account.</span></span> <span data-ttu-id="889e3-110">In alternativa, è possibile utilizzare un <xref:System.ServiceProcess.ServiceProcessInstaller> per specificare un account utente con cui verrà eseguito il servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-110">Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run.</span></span>  
  
 <span data-ttu-id="889e3-111">Un file eseguibile può contenere più di un servizio, ma deve contenere un apposito <xref:System.ServiceProcess.ServiceInstaller> per ogni servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-111">An executable can contain more than one service but must contain a separate <xref:System.ServiceProcess.ServiceInstaller> for each service.</span></span> <span data-ttu-id="889e3-112">Il <xref:System.ServiceProcess.ServiceInstaller> istanza registra il servizio con il sistema.</span><span class="sxs-lookup"><span data-stu-id="889e3-112">The <xref:System.ServiceProcess.ServiceInstaller> instance registers the service with the system.</span></span> <span data-ttu-id="889e3-113">Il programma di installazione associa anche ogni servizio a un registro eventi che è possibile utilizzare per registrare i comandi del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-113">The installer also associates each service with an event log that you can use to record service commands.</span></span> <span data-ttu-id="889e3-114">Il `main()` funzione nell'eseguibile definisce quali servizi devono essere eseguiti.</span><span class="sxs-lookup"><span data-stu-id="889e3-114">The `main()` function in the executable defines which services should run.</span></span> <span data-ttu-id="889e3-115">La directory di lavoro corrente del servizio è la directory di sistema, non la directory in cui si trova il file eseguibile.</span><span class="sxs-lookup"><span data-stu-id="889e3-115">The current working directory of the service is the system directory, not the directory in which the executable is located.</span></span>  
  
 <span data-ttu-id="889e3-116">Quando si avvia un servizio, il sistema individua l'eseguibile ed esegue il <xref:System.ServiceProcess.ServiceBase.OnStart%2A> metodo per tale servizio, contenuto all'interno dell'eseguibile.</span><span class="sxs-lookup"><span data-stu-id="889e3-116">When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable.</span></span> <span data-ttu-id="889e3-117">Tuttavia, in esecuzione il servizio non è lo stesso come il file eseguibile.</span><span class="sxs-lookup"><span data-stu-id="889e3-117">However, running the service is not the same as running the executable.</span></span> <span data-ttu-id="889e3-118">Il file eseguibile carica solo il servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-118">The executable only loads the service.</span></span> <span data-ttu-id="889e3-119">Il servizio avviene (ad esempio, avvio e arresto) tramite Gestione controllo servizi.</span><span class="sxs-lookup"><span data-stu-id="889e3-119">The service is accessed (for example, started and stopped) through the Service Control Manager.</span></span>  
  
 <span data-ttu-id="889e3-120">L'eseguibile chiama il <xref:System.ServiceProcess.ServiceBase> derivato costruttore la prima chiamata della classe avvia il servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-120">The executable calls the <xref:System.ServiceProcess.ServiceBase> derived class's constructor the first time you call Start on the service.</span></span> <span data-ttu-id="889e3-121">Il <xref:System.ServiceProcess.ServiceBase.OnStart%2A> metodo di gestione del comando viene chiamato immediatamente dopo l'esecuzione del costruttore.</span><span class="sxs-lookup"><span data-stu-id="889e3-121">The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes.</span></span> <span data-ttu-id="889e3-122">Il costruttore non viene eseguito nuovamente dopo la prima volta che il servizio è stato caricato, pertanto è necessario separare l'elaborazione eseguita dal costruttore da quella eseguita dal <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span><span class="sxs-lookup"><span data-stu-id="889e3-122">The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="889e3-123">Tutte le risorse che possono essere rilasciate dal <xref:System.ServiceProcess.ServiceBase.OnStop%2A> deve essere creato <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span><span class="sxs-lookup"><span data-stu-id="889e3-123">Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="889e3-124">La creazione di risorse nel costruttore ne impedisce la creazione corretta se il servizio viene avviato dopo aver <xref:System.ServiceProcess.ServiceBase.OnStop%2A> ha rilasciato le risorse.</span><span class="sxs-lookup"><span data-stu-id="889e3-124">Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources.</span></span>  
  
 <span data-ttu-id="889e3-125">Gestione controllo servizi (SCM) fornisce un modo per interagire con il servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-125">The Service Control Manager (SCM) provides a way to interact with the service.</span></span> <span data-ttu-id="889e3-126">È possibile utilizzare Gestione controllo servizi per passare a Start, Stop, Pause, continua o comandi personalizzati nel servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-126">You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service.</span></span> <span data-ttu-id="889e3-127">Gestione controllo servizi utilizza i valori di <xref:System.ServiceProcess.ServiceBase.CanStop%2A> e <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> per determinare se il servizio accetta arrestare, sospendere o riprendere i comandi.</span><span class="sxs-lookup"><span data-stu-id="889e3-127">The SCM uses the values of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> and <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to determine whether the service accepts Stop, Pause, or Continue commands.</span></span> <span data-ttu-id="889e3-128">Stop, Pause e Continue abilitati scelta rapida solo se di SCM la proprietà corrispondente <xref:System.ServiceProcess.ServiceBase.CanStop%2A> o <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> è `true` nella classe di servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-128">Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <xref:System.ServiceProcess.ServiceBase.CanStop%2A> or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` in the service class.</span></span> <span data-ttu-id="889e3-129">Se abilitata, il comando viene passato al servizio, e <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, o <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="889e3-129">If enabled, the command is passed to the service, and <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is called.</span></span> <span data-ttu-id="889e3-130">Se <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, o <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> è `false`, il corrispondente metodo di gestione dei comandi (ad esempio <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) non verranno elaborati, anche se il metodo è implementato.</span><span class="sxs-lookup"><span data-stu-id="889e3-130">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) will not be processed, even if you have implemented the method.</span></span>  
  
 <span data-ttu-id="889e3-131">È possibile utilizzare la <xref:System.ServiceProcess.ServiceController> classe per eseguire a livello di programmazione quali SCM esegue l'utilizzo di un'interfaccia utente.</span><span class="sxs-lookup"><span data-stu-id="889e3-131">You can use the <xref:System.ServiceProcess.ServiceController> class to do programmatically what the SCM does using a user interface.</span></span> <span data-ttu-id="889e3-132">È possibile automatizzare le attività disponibili nella console.</span><span class="sxs-lookup"><span data-stu-id="889e3-132">You can automate the tasks available in the console.</span></span> <span data-ttu-id="889e3-133">Se <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, o <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> è `true` ma non è stato implementato un metodo di gestione dei comandi corrispondente (ad esempio <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) il sistema genera un'eccezione e ignora il comando.</span><span class="sxs-lookup"><span data-stu-id="889e3-133">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` but you have not implemented a corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) the system throws an exception and ignores the command.</span></span>  
  
 <span data-ttu-id="889e3-134">Non è necessario implementare <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, o qualsiasi altro metodo nel <xref:System.ServiceProcess.ServiceBase>.</span><span class="sxs-lookup"><span data-stu-id="889e3-134">You do not have to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, or any other method in <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="889e3-135">Tuttavia, il comportamento del servizio è descritto in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, quindi come minimo, è necessario eseguire l'override di questo membro.</span><span class="sxs-lookup"><span data-stu-id="889e3-135">However, the service's behavior is described in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, so at minimum, this member should be overridden.</span></span> <span data-ttu-id="889e3-136">Il `main()` funzione del file eseguibile registra il servizio nel file eseguibile con Gestione controllo servizi chiamando il <xref:System.ServiceProcess.ServiceBase.Run%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="889e3-136">The `main()` function of the executable registers the service in the executable with the Service Control Manager by calling the <xref:System.ServiceProcess.ServiceBase.Run%2A> method.</span></span> <span data-ttu-id="889e3-137">Il <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> proprietà del <xref:System.ServiceProcess.ServiceBase> oggetto passato al <xref:System.ServiceProcess.ServiceBase.Run%2A> (metodo) deve corrispondere il <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> proprietà del programma di installazione del servizio per il servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-137">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> property of the <xref:System.ServiceProcess.ServiceBase> object passed to the <xref:System.ServiceProcess.ServiceBase.Run%2A> method must match the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property of the service installer for that service.</span></span>  
  
 <span data-ttu-id="889e3-138">È possibile utilizzare `InstallUtil.exe` per installare i servizi nel sistema.</span><span class="sxs-lookup"><span data-stu-id="889e3-138">You can use `InstallUtil.exe` to install services on your system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="889e3-139">È possibile specificare un log diverso dal registro eventi dell'applicazione per ricevere una notifica di chiamate al servizio, ma non il <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> né la <xref:System.ServiceProcess.ServiceBase.EventLog%2A> proprietà è possibile scrivere in un log personalizzato.</span><span class="sxs-lookup"><span data-stu-id="889e3-139">You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log.</span></span> <span data-ttu-id="889e3-140">Impostare <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> per `false` se non si desidera utilizzare la registrazione automatica.</span><span class="sxs-lookup"><span data-stu-id="889e3-140">Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="889e3-141">Crea una nuova istanza della classe <see cref="T:System.ServiceProcess.ServiceBase" />.</span><span class="sxs-lookup"><span data-stu-id="889e3-141">Creates a new instance of the <see cref="T:System.ServiceProcess.ServiceBase" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-142">Non creare un'istanza di <xref:System.ServiceProcess.ServiceBase> classe.</span><span class="sxs-lookup"><span data-stu-id="889e3-142">Do not create an instance of the <xref:System.ServiceProcess.ServiceBase> class.</span></span> <span data-ttu-id="889e3-143">Al contrario, derivano da <xref:System.ServiceProcess.ServiceBase> e creare un'istanza della classe derivata.</span><span class="sxs-lookup"><span data-stu-id="889e3-143">Instead, derive from <xref:System.ServiceProcess.ServiceBase> and instantiate your derived class.</span></span> <span data-ttu-id="889e3-144">Il valore minimo è necessario implementare nel costruttore per una classe ereditata da <xref:System.ServiceProcess.ServiceBase> consiste nell'impostare il <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> nel componente.</span><span class="sxs-lookup"><span data-stu-id="889e3-144">The minimum you need to implement in the constructor for a class inherited from <xref:System.ServiceProcess.ServiceBase> is to set the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> on your component.</span></span> <span data-ttu-id="889e3-145">Altre elaborazioni non sono specificamente richiesto nel costruttore.</span><span class="sxs-lookup"><span data-stu-id="889e3-145">No other processing is specifically required in the constructor.</span></span> <span data-ttu-id="889e3-146">È necessario gestire la maggior parte di inizializzazione in <xref:System.ServiceProcess.ServiceBase.OnStart%2A> piuttosto che nel costruttore.</span><span class="sxs-lookup"><span data-stu-id="889e3-146">You should handle most initialization in <xref:System.ServiceProcess.ServiceBase.OnStart%2A> rather than in the constructor.</span></span> <span data-ttu-id="889e3-147">In caso contrario, non è garantito che quando si riavvia un servizio dopo che è stato interrotto gli oggetti verranno reinizializzati.</span><span class="sxs-lookup"><span data-stu-id="889e3-147">Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.</span></span>  
  
 <span data-ttu-id="889e3-148">Se si esegue l'override del costruttore nella classe derivata, chiamare il costruttore di classe di base nel codice.</span><span class="sxs-lookup"><span data-stu-id="889e3-148">If you override the constructor in your derived class, call the base class constructor in your code.</span></span>  
  
 <span data-ttu-id="889e3-149">Il <xref:System.ServiceProcess.ServiceBase> costruttore imposta <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> a `true`.</span><span class="sxs-lookup"><span data-stu-id="889e3-149">The <xref:System.ServiceProcess.ServiceBase> constructor sets <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true`.</span></span> <span data-ttu-id="889e3-150">Se non si desidera registrare automaticamente le chiamate al servizio da Gestione controllo servizi (SCM), impostare <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> a `false`.</span><span class="sxs-lookup"><span data-stu-id="889e3-150">If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false`.</span></span>  
  
 <span data-ttu-id="889e3-151">Se il file eseguibile contiene un singolo servizio, il sistema chiama il costruttore del servizio quando viene selezionato da Gestione controllo servizi, avvio e viene eseguito il distruttore se viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="889e3-151">If the executable contains a single service, the system calls the service's constructor when Start is selected from the SCM, and runs the destructor if Stop is called.</span></span>  
  
 <span data-ttu-id="889e3-152">Se il file eseguibile contiene più servizi, chiamare Start su un servizio fa sì che il costruttore da chiamare per tutti i servizi nell'eseguibile, ma solo il servizio specificato è stato avviato.</span><span class="sxs-lookup"><span data-stu-id="889e3-152">If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started.</span></span> <span data-ttu-id="889e3-153">Quando tutti i servizi siano stati arrestati, non singolarmente quando ogni servizio viene arrestato, i distruttori per i servizi vengono eseguiti insieme.</span><span class="sxs-lookup"><span data-stu-id="889e3-153">Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="889e3-154">Se si sostituisce il costruttore della classe base, è necessario chiamarlo in modo esplicito nel costruttore della classe derivata.</span><span class="sxs-lookup"><span data-stu-id="889e3-154">If you override the base class constructor, you should explicitly call it in the constructor of your derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      </Docs>
    </Member>
    <Member MemberName="AutoLog">
      <MemberSignature Language="C#" Value="public bool AutoLog { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.AutoLog" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoLog As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoLog { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBAutoLog")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="889e3-155">Indica se registrare i comandi di avvio, interruzione, sospensione e continuazione nel log eventi.</span><span class="sxs-lookup"><span data-stu-id="889e3-155">Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.</span></span></summary>
        <value>
          <span data-ttu-id="889e3-156"><see langword="true" /> per  registrare le informazioni nel log eventi; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="889e3-156"><see langword="true" /> to report information in the event log; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-157">Impostazione <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> a `true` indica al servizio per utilizzare il registro eventi applicazione per i report non riuscite di comando, nonché informazioni sulle modifiche di stato per Start, Stop, Pause e Continue eventi sul servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-157">Setting <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true` instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service.</span></span> <span data-ttu-id="889e3-158">Il nome del servizio viene utilizzato come il registro <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="889e3-158">The name of the service is used as the log's <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="889e3-159">Per registrare le informazioni in un log eventi personalizzato anziché nel registro applicazioni, impostare <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> a `false` e scrivere le istruzioni all'interno dei metodi di gestione dei comandi <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, o <xref:System.ServiceProcess.ServiceBase.OnStop%2A> per registrare nel log appropriato.</span><span class="sxs-lookup"><span data-stu-id="889e3-159">To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="889e3-160">Il <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, che fornisce la stringa di origine per il log eventi, deve essere impostata prima che il servizio tenta di scrivere nel registro eventi.</span><span class="sxs-lookup"><span data-stu-id="889e3-160">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service attempts to write to the event log.</span></span> <span data-ttu-id="889e3-161">Tentativo di accedere al registro eventi prima di imposta il nome dell'origine genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="889e3-161">Trying to access the event log before the source name is set throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandlePowerEvent">
      <MemberSignature Language="C#" Value="public bool CanHandlePowerEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandlePowerEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandlePowerEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandlePowerEvent { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="889e3-162">Ottiene o imposta un valore che indica se il servizio può gestire le notifiche relative alle variazioni di stato dell'alimentazione del computer.</span><span class="sxs-lookup"><span data-stu-id="889e3-162">Gets or sets a value indicating whether the service can handle notifications of computer power status changes.</span></span></summary>
        <value>
          <span data-ttu-id="889e3-163"><see langword="true" /> se il servizio gestisce le variazioni di stato dell'alimentazione del computer indicate nella classe <see cref="T:System.ServiceProcess.PowerBroadcastStatus" />; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="889e3-163"><see langword="true" /> if the service handles the computer power status changes indicated in the <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> class, otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-164">Quando cambia lo stato di alimentazione del computer, Gestione controllo servizi (SCM) consente di verificare se il servizio accetta comandi evento power utilizzando il valore di <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>.</span><span class="sxs-lookup"><span data-stu-id="889e3-164">When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>.</span></span>  
  
 <span data-ttu-id="889e3-165">Se <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> è `true`, il comando viene passato al servizio e <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> metodo viene chiamato se definito.</span><span class="sxs-lookup"><span data-stu-id="889e3-165">If <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> is `true`, the command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> method is called if defined.</span></span> <span data-ttu-id="889e3-166">Se <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> non è implementata nella classe derivata, SCM gestisce l'evento di risparmio energia tramite la classe base vuota <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="889e3-166">If <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is not implemented in the derived class, the SCM handles the power event through the empty base class <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="889e3-167">Questa proprietà è stata modificata dopo l'avvio del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-167">This property is modified after the service was started.</span></span></exception>
        <altmember cref="T:System.ServiceProcess.PowerBroadcastStatus" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
      </Docs>
    </Member>
    <Member MemberName="CanHandleSessionChangeEvent">
      <MemberSignature Language="C#" Value="public bool CanHandleSessionChangeEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanHandleSessionChangeEvent" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property CanHandleSessionChangeEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanHandleSessionChangeEvent { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="889e3-168">Ottiene o imposta il valore che indica se il servizio è in grado di gestire gli eventi di modifica di sessione ricevuti dalla sessione Terminal Server.</span><span class="sxs-lookup"><span data-stu-id="889e3-168">Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.</span></span></summary>
        <value>
          <span data-ttu-id="889e3-169"><see langword="true" /> se il servizio è in grado di gestire gli eventi di modifica di sessione Terminal Server; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="889e3-169"><see langword="true" /> if the service can handle Terminal Server session change events; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="889e3-170">Questa proprietà è stata modificata dopo l'avvio del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-170">This property is modified after the service was started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanPauseAndContinue">
      <MemberSignature Language="C#" Value="public bool CanPauseAndContinue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanPauseAndContinue" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
      <MemberSignature Language="VB.NET" Value="Public Property CanPauseAndContinue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanPauseAndContinue { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="889e3-171">Ottiene o imposta un valore che indica se il servizio può essere sospeso e riattivato.</span><span class="sxs-lookup"><span data-stu-id="889e3-171">Gets or sets a value indicating whether the service can be paused and resumed.</span></span></summary>
        <value>
          <span data-ttu-id="889e3-172"><see langword="true" /> se il servizio può essere sospeso; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="889e3-172"><see langword="true" /> if the service can be paused; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-173">Impostare il valore della <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> proprietà nel costruttore per il servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-173">Set the value of the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property in the constructor for the service.</span></span>  
  
 <span data-ttu-id="889e3-174">Quando un servizio viene sospesa, arresta quanto accade.</span><span class="sxs-lookup"><span data-stu-id="889e3-174">When a service is paused, it halts what it is doing.</span></span> <span data-ttu-id="889e3-175">Quando si continua del servizio (tramite Gestione controllo servizi o a livello di codice), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> viene eseguito.</span><span class="sxs-lookup"><span data-stu-id="889e3-175">When you continue the service (either through the Service Control Manager or programmatically), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> runs.</span></span>  
  
 <span data-ttu-id="889e3-176">L'invio di una richiesta di sospensione per il servizio, è possibile risparmiare risorse di sistema.</span><span class="sxs-lookup"><span data-stu-id="889e3-176">Sending a Pause request to the service can conserve system resources.</span></span> <span data-ttu-id="889e3-177">Sospensione potrebbe non rilasciare tutte le risorse di sistema, l'interruzione.</span><span class="sxs-lookup"><span data-stu-id="889e3-177">Pause may not release all system resources, but Stop does.</span></span> <span data-ttu-id="889e3-178"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> e <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> sono spesso implementati per eseguire operazioni di elaborazione minore rispetto a <xref:System.ServiceProcess.ServiceBase.OnStop%2A> e <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span><span class="sxs-lookup"><span data-stu-id="889e3-178"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> are often implemented to perform less processing than <xref:System.ServiceProcess.ServiceBase.OnStop%2A> and <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span>  
  
 <span data-ttu-id="889e3-179">Quando <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> è `true`, eseguire l'override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> e <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> per specificare l'elaborazione che deve verificarsi quando Gestione controllo servizi (SCM) passa una richiesta di sospensione o continuazione al servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-179">When <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true`, override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service.</span></span> <span data-ttu-id="889e3-180"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> deve essere implementato per annullare l'elaborazione in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span><span class="sxs-lookup"><span data-stu-id="889e3-180"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span>  
  
 <span data-ttu-id="889e3-181">Se <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> è `false`, SCM non passerà sospensione o continua richieste al servizio, pertanto il <xref:System.ServiceProcess.ServiceBase.OnPause%2A> e <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> metodi non verranno chiamati anche se sono implementate.</span><span class="sxs-lookup"><span data-stu-id="889e3-181">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented.</span></span> <span data-ttu-id="889e3-182">In Gestione controllo servizi, il `Pause` e `Continue` controlli sono disabilitati quando <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> è `false`.</span><span class="sxs-lookup"><span data-stu-id="889e3-182">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="889e3-183">Il servizio è già stato avviato.</span><span class="sxs-lookup"><span data-stu-id="889e3-183">The service has already been started.</span></span> <span data-ttu-id="889e3-184">La proprietà <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> non può essere modificata dopo l'avvio del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-184">The <see cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" /> property cannot be changed once the service has started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanShutdown">
      <MemberSignature Language="C#" Value="public bool CanShutdown { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanShutdown" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Property CanShutdown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanShutdown { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="889e3-185">Ottiene o imposta un valore che indica se è necessario che il servizio riceva una notifica quando il sistema è in fase di chiusura.</span><span class="sxs-lookup"><span data-stu-id="889e3-185">Gets or sets a value indicating whether the service should be notified when the system is shutting down.</span></span></summary>
        <value>
          <span data-ttu-id="889e3-186"><see langword="true" /> se è necessario che il servizio riceva una notifica quando il sistema è in fase di arresto; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="889e3-186"><see langword="true" /> if the service should be notified when the system is shutting down; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="889e3-187">Il valore predefinito è <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="889e3-187">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-188">Se <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> è `true`, il servizio riceve una notifica quando il sistema è in corso l'arresto.</span><span class="sxs-lookup"><span data-stu-id="889e3-188">If <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> is `true`, the service is notified when the system is shutting down.</span></span> <span data-ttu-id="889e3-189">Al momento della chiusura, il <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> metodo viene chiamato se è stato implementato nella classe derivata.</span><span class="sxs-lookup"><span data-stu-id="889e3-189">At shutdown, the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method is called if it has been implemented in your derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="889e3-190">Solo il sistema deve provocare il <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> metodo da eseguire; il servizio può essere chiamato, ma questa operazione è sconsigliata.</span><span class="sxs-lookup"><span data-stu-id="889e3-190">Only the system should cause the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method to execute; the service can call it, but this is not recommended.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="889e3-191">Il servizio è già stato avviato.</span><span class="sxs-lookup"><span data-stu-id="889e3-191">The service has already been started.</span></span> <span data-ttu-id="889e3-192">La proprietà <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> non può essere modificata dopo l'avvio del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-192">The <see cref="P:System.ServiceProcess.ServiceBase.CanShutdown" /> property cannot be changed once the service has started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="CanStop">
      <MemberSignature Language="C#" Value="public bool CanStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanStop" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.CanStop" />
      <MemberSignature Language="VB.NET" Value="Public Property CanStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanStop { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="889e3-193">Ottiene o imposta un valore che indica se il servizio, una volta avviato, può essere interrotto.</span><span class="sxs-lookup"><span data-stu-id="889e3-193">Gets or sets a value indicating whether the service can be stopped once it has started.</span></span></summary>
        <value>
          <span data-ttu-id="889e3-194"><see langword="true" /> se il servizio può essere arrestato e se può essere chiamato il metodo <see cref="M:System.ServiceProcess.ServiceBase.OnStop" />; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="889e3-194"><see langword="true" /> if the service can be stopped and the <see cref="M:System.ServiceProcess.ServiceBase.OnStop" /> method called; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-195">Quando viene chiamato su un servizio, Gestione controllo servizi (SCM) consente di verificare se il servizio accetta tali comandi utilizzando il valore di <xref:System.ServiceProcess.ServiceBase.CanStop%2A>.</span><span class="sxs-lookup"><span data-stu-id="889e3-195">When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A>.</span></span> <span data-ttu-id="889e3-196">Per la maggior parte dei servizi, il valore di <xref:System.ServiceProcess.ServiceBase.CanStop%2A> è `true`, ma alcuni servizi del sistema operativo, ad esempio, consente all'utente di arrestarli.</span><span class="sxs-lookup"><span data-stu-id="889e3-196">For most services, the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, but some operating system services, for example, do not allow the user to stop them.</span></span>  
  
 <span data-ttu-id="889e3-197">Se <xref:System.ServiceProcess.ServiceBase.CanStop%2A> è `true`, il comando di interruzione viene passato al servizio e <xref:System.ServiceProcess.ServiceBase.OnStop%2A> metodo viene chiamato se è definito.</span><span class="sxs-lookup"><span data-stu-id="889e3-197">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined.</span></span> <span data-ttu-id="889e3-198">Se <xref:System.ServiceProcess.ServiceBase.OnStop%2A> non è implementata nella classe derivata, il gestore SCM gestisce il comando di interruzione tramite la classe base vuota <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="889e3-198">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="889e3-199">Il servizio è già stato avviato.</span><span class="sxs-lookup"><span data-stu-id="889e3-199">The service has already been started.</span></span> <span data-ttu-id="889e3-200">La proprietà <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> non può essere modificata dopo l'avvio del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-200">The <see cref="P:System.ServiceProcess.ServiceBase.CanStop" /> property cannot be changed once the service has started.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="889e3-201"><see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</span><span class="sxs-lookup"><span data-stu-id="889e3-201"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="889e3-202">Elimina le risorse, diverse dalla memoria, usate dall'oggetto <see cref="T:System.ServiceProcess.ServiceBase" />.</span><span class="sxs-lookup"><span data-stu-id="889e3-202">Disposes of the resources (other than memory) used by the <see cref="T:System.ServiceProcess.ServiceBase" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-203">Chiamare <xref:System.ServiceProcess.ServiceBase.Dispose%2A> nella classe derivata (e attraverso di esso, nel <xref:System.ServiceProcess.ServiceBase> classe) dopo aver terminato di utilizzare la classe derivata.</span><span class="sxs-lookup"><span data-stu-id="889e3-203">Call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> in your derived class (and through it, in the <xref:System.ServiceProcess.ServiceBase> class) when you are finished using the derived class.</span></span> <span data-ttu-id="889e3-204">Il <xref:System.ServiceProcess.ServiceBase.Dispose%2A> metodo lascia la classe derivata in uno stato inutilizzabile.</span><span class="sxs-lookup"><span data-stu-id="889e3-204">The <xref:System.ServiceProcess.ServiceBase.Dispose%2A> method leaves the derived class in an unusable state.</span></span> <span data-ttu-id="889e3-205">Dopo la chiamata <xref:System.ServiceProcess.ServiceBase.Dispose%2A>, è necessario rilasciare tutti i riferimenti alla classe derivata e <xref:System.ServiceProcess.ServiceBase> in modo che la memoria occupata può essere recuperata tramite garbage collection.</span><span class="sxs-lookup"><span data-stu-id="889e3-205">After calling <xref:System.ServiceProcess.ServiceBase.Dispose%2A>, you must release all references to the derived class and <xref:System.ServiceProcess.ServiceBase> so the memory they were occupying can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="889e3-206">Chiamare sempre il metodo <xref:System.ServiceProcess.ServiceBase.Dispose%2A> prima di rilasciare l'ultimo riferimento a una classe derivata da <xref:System.ServiceProcess.ServiceBase>.</span><span class="sxs-lookup"><span data-stu-id="889e3-206">Always call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> before you release your last reference to the class derived from <xref:System.ServiceProcess.ServiceBase>.</span></span> <span data-ttu-id="889e3-207">In caso contrario, le risorse <xref:System.ServiceProcess.ServiceBase> e verrà utilizza la classe derivata non verranno liberate finché l'operazione di garbage collection chiama i distruttori degli oggetti.</span><span class="sxs-lookup"><span data-stu-id="889e3-207">Otherwise, the resources <xref:System.ServiceProcess.ServiceBase> and the derived class are using will not be freed until garbage collection calls the objects' destructors.</span></span>  
  
 <span data-ttu-id="889e3-208"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> viene spesso implementato per elaborare il codice in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, combinata con una chiamata a <xref:System.ServiceProcess.ServiceBase.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="889e3-208"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> is often implemented to process the code in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, combined with a call to <xref:System.ServiceProcess.ServiceBase.Dispose%2A>.</span></span> <span data-ttu-id="889e3-209">Se si sceglie di eseguire questa operazione nella classe derivata, è facoltativa per implementare <xref:System.ServiceProcess.ServiceBase.OnStart%2A> allocare qualsiasi <xref:System.ServiceProcess.ServiceBase.Dispose%2A> rilasciato.</span><span class="sxs-lookup"><span data-stu-id="889e3-209">If you choose to do this in your derived class, it is customary to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to allocate whatever <xref:System.ServiceProcess.ServiceBase.Dispose%2A> released.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="EventLog">
      <MemberSignature Language="C#" Value="public virtual System.Diagnostics.EventLog EventLog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.EventLog EventLog" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.EventLog" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EventLog As EventLog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Diagnostics::EventLog ^ EventLog { System::Diagnostics::EventLog ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="889e3-210">Ottiene un log eventi da utilizzare per scrivere nel log eventi delle applicazioni le notifiche delle chiamate ai comandi di servizio, come Start e Stop.</span><span class="sxs-lookup"><span data-stu-id="889e3-210">Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.</span></span></summary>
        <value><span data-ttu-id="889e3-211">Istanza di <see cref="T:System.Diagnostics.EventLog" /> la cui origine è registrata nel registro Applicazioni.</span><span class="sxs-lookup"><span data-stu-id="889e3-211">An <see cref="T:System.Diagnostics.EventLog" /> instance whose source is registered to the Application log.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-212">Il costruttore inizializza la <xref:System.ServiceProcess.ServiceBase.EventLog%2A> proprietà a un'istanza con il <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> e <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType> set di proprietà.</span><span class="sxs-lookup"><span data-stu-id="889e3-212">The constructor initializes the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to an instance with the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=nameWithType> properties set.</span></span> <span data-ttu-id="889e3-213">L'origine è il <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> del servizio, e il log è registro applicazioni del computer.</span><span class="sxs-lookup"><span data-stu-id="889e3-213">The source is the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service, and the log is the computer's Application log.</span></span> <span data-ttu-id="889e3-214">Questi valori vengono impostati automaticamente e non possono essere modificati per la registrazione automatica dei comandi di servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-214">These values are set automatically and cannot be changed for automatic logging of service commands.</span></span>  
  
 <span data-ttu-id="889e3-215">Quando <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> è `true`, Start, Stop, Pause, continua e comandi personalizzati vengono registrati automaticamente nel registro eventi dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="889e3-215">When <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log.</span></span> <span data-ttu-id="889e3-216">È possibile utilizzare il <xref:System.ServiceProcess.ServiceBase.EventLog%2A> proprietà per scrivere messaggi aggiuntivi in tale registro anche.</span><span class="sxs-lookup"><span data-stu-id="889e3-216">You can use the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to write additional messages to that log as well.</span></span> <span data-ttu-id="889e3-217">Il componente chiama <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType> usando questa <xref:System.ServiceProcess.ServiceBase.EventLog%2A> membro.</span><span class="sxs-lookup"><span data-stu-id="889e3-217">The component calls <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=nameWithType> using this <xref:System.ServiceProcess.ServiceBase.EventLog%2A> member.</span></span>  
  
 <span data-ttu-id="889e3-218">Per registrare le informazioni in un log eventi personalizzato anziché nel registro applicazioni, impostare <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> a `false` e scrivere le istruzioni all'interno dei metodi di gestione dei comandi <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, o <xref:System.ServiceProcess.ServiceBase.OnStop%2A> per registrare nel log appropriato.</span><span class="sxs-lookup"><span data-stu-id="889e3-218">To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.AutoLog" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLog" />
      </Docs>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public int ExitCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExitCode" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ExitCode" />
      <MemberSignature Language="VB.NET" Value="Public Property ExitCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ExitCode { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="889e3-219">Ottiene o imposta il codice di uscita del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-219">Gets or sets the exit code for the service.</span></span></summary>
        <value><span data-ttu-id="889e3-220">Codice di uscita del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-220">The exit code for the service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-221">Impostare il <xref:System.ServiceProcess.ServiceBase.ExitCode%2A> su un valore diverso da zero prima di arrestare il servizio per indicare un errore in Gestione controllo servizi.</span><span class="sxs-lookup"><span data-stu-id="889e3-221">Set the <xref:System.ServiceProcess.ServiceBase.ExitCode%2A> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxNameLength">
      <MemberSignature Language="C#" Value="public const int MaxNameLength = 80;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaxNameLength = (80)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceProcess.ServiceBase.MaxNameLength" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxNameLength As Integer  = 80" />
      <MemberSignature Language="C++ CLI" Value="public: int MaxNameLength = 80;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>80</MemberValue>
      <Docs>
        <summary><span data-ttu-id="889e3-222">Indica la dimensione massima per il nome di un servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-222">Indicates the maximum size for a service name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-223">ServiceName e DisplayName hanno limitazioni di dimensione che devono essere osservate quando si impostano le proprietà della classe del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-223">ServiceName and DisplayName both have size restrictions that must be observed when setting the properties on your service class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
      </Docs>
    </Member>
    <Member MemberName="OnContinue">
      <MemberSignature Language="C#" Value="protected virtual void OnContinue ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContinue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnContinue" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContinue ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContinue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="889e3-224">Quando viene eseguita l'implementazione in una classe derivata, l'esecuzione di <see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> avviene quando Gestione controllo servizi invia al servizio un comando Continue.</span><span class="sxs-lookup"><span data-stu-id="889e3-224">When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnContinue" /> runs when a Continue command is sent to the service by the Service Control Manager (SCM).</span></span> <span data-ttu-id="889e3-225">Specifica le azioni da intraprendere quando un servizio riprende il normale funzionamento dopo essere stato sospeso.</span><span class="sxs-lookup"><span data-stu-id="889e3-225">Specifies actions to take when a service resumes normal functioning after being paused.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-226">Implementare <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> per riflettere la risposta dell'applicazione a <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span><span class="sxs-lookup"><span data-stu-id="889e3-226">Implement <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to mirror your application's response to <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span> <span data-ttu-id="889e3-227">Quando si continua del servizio (tramite la console servizi o a livello di codice), il <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> l'elaborazione viene eseguito e il servizio diventa nuovamente attiva.</span><span class="sxs-lookup"><span data-stu-id="889e3-227">When you continue the service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing runs, and the service becomes active again.</span></span>  
  
 <span data-ttu-id="889e3-228"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> deve essere sottoposto a override quando il <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="889e3-228"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="889e3-229">Se <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> è `false`, SCM non passerà sospensione o continua richieste al servizio, pertanto il <xref:System.ServiceProcess.ServiceBase.OnPause%2A> e <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> metodi non verranno chiamati anche se sono implementate.</span><span class="sxs-lookup"><span data-stu-id="889e3-229">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented.</span></span> <span data-ttu-id="889e3-230">In Gestione controllo servizi, il `Pause` e `Continue` controlli sono disabilitati quando <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> è `false`.</span><span class="sxs-lookup"><span data-stu-id="889e3-230">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnCustomCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCustomCommand (int command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCustomCommand(int32 command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCustomCommand (command As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCustomCommand(int command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="889e3-231">Messaggio di comando inviato al servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-231">The command message sent to the service.</span></span></param>
        <summary><span data-ttu-id="889e3-232">Quando viene eseguita l'implementazione in una classe derivata, l'esecuzione di <see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> avviene quando Gestione controllo servizi passa al servizio un comando personalizzato.</span><span class="sxs-lookup"><span data-stu-id="889e3-232">When implemented in a derived class, <see cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" /> executes when the Service Control Manager (SCM) passes a custom command to the service.</span></span> <span data-ttu-id="889e3-233">Specifica le azioni da intraprendere quando ricorre un comando con il parametro specificato.</span><span class="sxs-lookup"><span data-stu-id="889e3-233">Specifies actions to take when a command with the specified parameter value occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-234"><xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> Consente di specificare funzionalità aggiuntive oltre all'avvio, arresto, sospensione e continuazione dei servizi.</span><span class="sxs-lookup"><span data-stu-id="889e3-234"><xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> lets you specify additional functionality beyond starting, stopping, pausing and continuing services.</span></span>  
  
 <span data-ttu-id="889e3-235">Gestione controllo servizi non esamina il comando personalizzato per verificare se il servizio supporta il `command` parametro passato.</span><span class="sxs-lookup"><span data-stu-id="889e3-235">The SCM does not examine the custom command to verify whether the service supports the `command` parameter passed in.</span></span> <span data-ttu-id="889e3-236">Il comando personalizzato passa direttamente al servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-236">It passes the custom command directly to the service.</span></span> <span data-ttu-id="889e3-237">Se il servizio non riconosce il `command` parametro, non esegue alcuna operazione.</span><span class="sxs-lookup"><span data-stu-id="889e3-237">If the service does not recognize the `command` parameter, it does nothing.</span></span>  
  
 <span data-ttu-id="889e3-238">Comandi personalizzati sono attivati da un <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> istruzione in un <xref:System.ServiceProcess.ServiceController> componente.</span><span class="sxs-lookup"><span data-stu-id="889e3-238">Custom commands are raised by an <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> statement in a <xref:System.ServiceProcess.ServiceController> component.</span></span> <span data-ttu-id="889e3-239">Usare un'istruzione switch o se... Then per gestire i comandi personalizzati definiti nel servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-239">Use a switch statement or if..then condition to handle the custom commands you define on your service.</span></span>  
  
 <span data-ttu-id="889e3-240">Gli unici valori per un comando personalizzato che è possibile definire nell'applicazione in uso o utilizzare in <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> sono quelli compresi tra 128 e 255.</span><span class="sxs-lookup"><span data-stu-id="889e3-240">The only values for a custom command that you can define in your application or use in <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> are those between 128 and 255.</span></span> <span data-ttu-id="889e3-241">Gli integer sotto 128 corrispondono ai valori riservati al sistema.</span><span class="sxs-lookup"><span data-stu-id="889e3-241">Integers below 128 correspond to system-reserved values.</span></span>  
  
 <span data-ttu-id="889e3-242">Se il <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> proprietà `true`, comandi personalizzati, analogamente a tutti gli altri comandi, scriveranno voci nel registro eventi per segnalare se l'esecuzione del metodo ha avuto esito positivo o negativo.</span><span class="sxs-lookup"><span data-stu-id="889e3-242">If the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> property is `true`, custom commands, like all other commands, write entries to the event log to report whether the method execution succeeded or failed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <Member MemberName="OnPause">
      <MemberSignature Language="C#" Value="protected virtual void OnPause ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPause" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPause ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPause();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="889e3-243">Quando viene eseguita l'implementazione in una classe derivata, l'esecuzione avviene quando Gestione controllo servizi invia un comando Pause al servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-243">When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM).</span></span> <span data-ttu-id="889e3-244">Specifica le azioni da intraprendere quando un servizio viene sospeso.</span><span class="sxs-lookup"><span data-stu-id="889e3-244">Specifies actions to take when a service pauses.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-245">Utilizzare <xref:System.ServiceProcess.ServiceBase.OnPause%2A> per specificare l'elaborazione che si verifica quando il servizio riceve un comando di sospensione.</span><span class="sxs-lookup"><span data-stu-id="889e3-245">Use <xref:System.ServiceProcess.ServiceBase.OnPause%2A> to specify the processing that occurs when the service receives a Pause command.</span></span> <span data-ttu-id="889e3-246"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> deve essere sottoposto a override quando il <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="889e3-246"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="889e3-247">Quando si continua un servizio sospeso (tramite la console servizi o a livello di codice), il <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> viene eseguita l'elaborazione e il servizio diventa nuovamente attivo.</span><span class="sxs-lookup"><span data-stu-id="889e3-247">When you continue a paused service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing is run, and the service becomes active again.</span></span>  
  
 <span data-ttu-id="889e3-248">Il comando pausa consente solo l'applicazione rispondere a un evento specifico.</span><span class="sxs-lookup"><span data-stu-id="889e3-248">The Pause command only allows your application to react to a specific event.</span></span> <span data-ttu-id="889e3-249"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> non esegue alcuna operazione per il servizio che non si definisce per l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="889e3-249"><xref:System.ServiceProcess.ServiceBase.OnPause%2A> does nothing to the service that you do not define it to do.</span></span>  
  
 <span data-ttu-id="889e3-250">L'invio di una richiesta di sospensione per il servizio, è possibile risparmiare risorse di sistema perché Pause non è necessario rilasciare tutte le risorse di sistema.</span><span class="sxs-lookup"><span data-stu-id="889e3-250">Sending a Pause request to the service can conserve system resources because Pause need not release all system resources.</span></span> <span data-ttu-id="889e3-251">Ad esempio, se il processo, la sospensione di un servizio, anziché l'arresto possibile consentire i thread rimangano aperti, sono state aperte thread non dovranno quindi riallocarli quando il servizio continua.</span><span class="sxs-lookup"><span data-stu-id="889e3-251">For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues.</span></span> <span data-ttu-id="889e3-252">Se si definiscono Sospendi per rilasciare tutte le risorse di sistema, si comporta come un comando di arresto.</span><span class="sxs-lookup"><span data-stu-id="889e3-252">If you define Pause to release all system resources, it behaves like a Stop command.</span></span>  
  
 <span data-ttu-id="889e3-253">Impostare <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> a `true`ed eseguire l'override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> e <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> per specificare l'elaborazione che deve verificarsi quando il server passa una richiesta di sospensione o continuazione al servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-253">Set <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to `true`, and override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service.</span></span> <span data-ttu-id="889e3-254"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> deve essere implementato per annullare l'elaborazione in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span><span class="sxs-lookup"><span data-stu-id="889e3-254"><xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.</span></span>  
  
 <span data-ttu-id="889e3-255">Se <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> è `false`, SCM non passerà sospensione o continua richieste al servizio, pertanto il <xref:System.ServiceProcess.ServiceBase.OnPause%2A> e <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> metodi non verranno chiamati anche se è implementato.</span><span class="sxs-lookup"><span data-stu-id="889e3-255">If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if implemented.</span></span> <span data-ttu-id="889e3-256">In Gestione controllo servizi, il `Pause` e `Continue` controlli sono disabilitati quando <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> è `false`.</span><span class="sxs-lookup"><span data-stu-id="889e3-256">In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanPauseAndContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnPowerEvent">
      <MemberSignature Language="C#" Value="protected virtual bool OnPowerEvent (System.ServiceProcess.PowerBroadcastStatus powerStatus);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnPowerEvent(valuetype System.ServiceProcess.PowerBroadcastStatus powerStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnPowerEvent (powerStatus As PowerBroadcastStatus) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnPowerEvent(System::ServiceProcess::PowerBroadcastStatus powerStatus);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="powerStatus" Type="System.ServiceProcess.PowerBroadcastStatus" />
      </Parameters>
      <Docs>
        <param name="powerStatus"><span data-ttu-id="889e3-257">Oggetto <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> che indica una notifica dal sistema riguardante il proprio stato di alimentazione.</span><span class="sxs-lookup"><span data-stu-id="889e3-257">A <see cref="T:System.ServiceProcess.PowerBroadcastStatus" /> that indicates a notification from the system about its power status.</span></span></param>
        <summary><span data-ttu-id="889e3-258">Quando viene eseguita l'implementazione in una classe derivata, l'esecuzione avviene al variare dello stato di alimentazione</span><span class="sxs-lookup"><span data-stu-id="889e3-258">When implemented in a derived class, executes when the computer's power status has changed.</span></span> <span data-ttu-id="889e3-259">dei computer laptop che entrano in modalità sospesa, una condizione che non corrisponde alla chiusura del sistema.</span><span class="sxs-lookup"><span data-stu-id="889e3-259">This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.</span></span></summary>
        <returns><span data-ttu-id="889e3-260">Quando viene eseguita l'implementazione in una classe derivata, indica la necessità da parte dell'applicazione di determinare il valore da restituire.</span><span class="sxs-lookup"><span data-stu-id="889e3-260">When implemented in a derived class, the needs of your application determine what value to return.</span></span> <span data-ttu-id="889e3-261">Se ad esempio viene passato uno stato trasmesso <see langword="QuerySuspend" />, è possibile provocare il rifiuto della query da parte dell'applicazione mediante la restituzione di <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="889e3-261">For example, if a <see langword="QuerySuspend" /> broadcast status is passed, you could cause your application to reject the query by returning <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-262">Utilizzare <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> per specificare l'elaborazione che si verifica quando l'evento di sistema indicata nel <xref:System.ServiceProcess.PowerBroadcastStatus> enumerazione si verifica, ad esempio, quando il computer si trova in modalità sospensione o indica consumo della batteria.</span><span class="sxs-lookup"><span data-stu-id="889e3-262">Use <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> to specify the processing that occurs when the system event indicated in the <xref:System.ServiceProcess.PowerBroadcastStatus> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power.</span></span>  
  
 <span data-ttu-id="889e3-263"><xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> deve essere sottoposto a override quando il <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="889e3-263"><xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> property is `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnSessionChange">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionChange (System.ServiceProcess.SessionChangeDescription changeDescription);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionChange(valuetype System.ServiceProcess.SessionChangeDescription changeDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionChange (changeDescription As SessionChangeDescription)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionChange(System::ServiceProcess::SessionChangeDescription changeDescription);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeDescription" Type="System.ServiceProcess.SessionChangeDescription" />
      </Parameters>
      <Docs>
        <param name="changeDescription"><span data-ttu-id="889e3-264">Struttura che identifica il tipo di modifica.</span><span class="sxs-lookup"><span data-stu-id="889e3-264">A structure that identifies the change type.</span></span></param>
        <summary><span data-ttu-id="889e3-265">Viene eseguito alla ricezione di un evento di modifica da una sessione Terminal Server.</span><span class="sxs-lookup"><span data-stu-id="889e3-265">Executes when a change event is received from a Terminal Server session.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-266">È necessario impostare il <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A> proprietà `true` per abilitare l'esecuzione di questo metodo.</span><span class="sxs-lookup"><span data-stu-id="889e3-266">You must set the <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A> property to `true` to enable the execution of this method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent" />
        <altmember cref="T:System.ServiceProcess.SessionChangeDescription" />
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="889e3-267">Quando viene eseguita l'implementazione in una classe derivata, l'esecuzione avviene alla chiusura del sistema.</span><span class="sxs-lookup"><span data-stu-id="889e3-267">When implemented in a derived class, executes when the system is shutting down.</span></span> <span data-ttu-id="889e3-268">Specifica quali operazioni devono essere eseguite subito prima della chiusura del sistema.</span><span class="sxs-lookup"><span data-stu-id="889e3-268">Specifies what should occur immediately prior to the system shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-269">Utilizzare <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> per specificare l'elaborazione che si verifica quando il sistema si arresta.</span><span class="sxs-lookup"><span data-stu-id="889e3-269">Use <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> to specify the processing that occurs when the system shuts down.</span></span>  
  
 <span data-ttu-id="889e3-270">Questo evento si verifica solo quando il sistema operativo viene arrestato, non quando il computer è spento.</span><span class="sxs-lookup"><span data-stu-id="889e3-270">This event occurs only when the operating system is shut down, not when the computer is turned off.</span></span>  
  
 <span data-ttu-id="889e3-271"><xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> deve essere sottoposto a override quando il <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="889e3-271"><xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> property is `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStart">
      <MemberSignature Language="C#" Value="protected virtual void OnStart (string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStart(string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStart (args As String())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStart(cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="889e3-272">Dati passati dal comando di avvio.</span><span class="sxs-lookup"><span data-stu-id="889e3-272">Data passed by the start command.</span></span></param>
        <summary><span data-ttu-id="889e3-273">Quando viene eseguita l'implementazione in una classe derivata, l'esecuzione avviene quando Gestione controllo servizi invia un comando Pause al servizio o quando viene avviato il sistema (nel caso di un servizio ad avvio automatico).</span><span class="sxs-lookup"><span data-stu-id="889e3-273">When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically).</span></span> <span data-ttu-id="889e3-274">Specifica le azioni da intraprendere all'avvio del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-274">Specifies actions to take when the service starts.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-275">Utilizzare <xref:System.ServiceProcess.ServiceBase.OnStart%2A> per specificare l'elaborazione che si verifica quando il servizio riceve un comando di avvio.</span><span class="sxs-lookup"><span data-stu-id="889e3-275">Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to specify the processing that occurs when the service receives a Start command.</span></span> <span data-ttu-id="889e3-276"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> il metodo in cui specificare il comportamento del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-276"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> is the method in which you specify the behavior of the service.</span></span> <span data-ttu-id="889e3-277"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> può accettare argomenti come un modo per passare i dati, ma questo utilizzo è raro.</span><span class="sxs-lookup"><span data-stu-id="889e3-277"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> can take arguments as a way to pass data, but this usage is rare.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="889e3-278">Non utilizzare il costruttore per eseguire operazioni di elaborazione che deve essere <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span><span class="sxs-lookup"><span data-stu-id="889e3-278">Do not use the constructor to perform processing that should be in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="889e3-279">Utilizzare <xref:System.ServiceProcess.ServiceBase.OnStart%2A> per gestire tutte le operazioni di inizializzazione del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-279">Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to handle all initialization of your service.</span></span> <span data-ttu-id="889e3-280">Il costruttore viene chiamato quando l'eseguibile dell'applicazione viene eseguito, non quando viene eseguito il servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-280">The constructor is called when the application's executable runs, not when the service runs.</span></span> <span data-ttu-id="889e3-281">L'eseguibile verrà eseguito prima <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span><span class="sxs-lookup"><span data-stu-id="889e3-281">The executable runs before <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.</span></span> <span data-ttu-id="889e3-282">Quando si continua, ad esempio, è possibile che il costruttore non viene chiamato nuovamente perché Gestione controllo servizi contengono già l'oggetto in memoria.</span><span class="sxs-lookup"><span data-stu-id="889e3-282">When you continue, for example, the constructor is not called again because the SCM already holds the object in memory.</span></span> <span data-ttu-id="889e3-283">Se <xref:System.ServiceProcess.ServiceBase.OnStop%2A> rilascia le risorse allocate nel costruttore anziché in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, le risorse necessarie non creerebbe la seconda volta viene chiamato il servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-283">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, the needed resources would not be created again the second time the service is called.</span></span>  
  
 <span data-ttu-id="889e3-284">Servizi possono essere impostati per avviarsi automaticamente quando il riavvio del computer impostando il <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> nel programma di installazione del servizio di <xref:System.ServiceProcess.ServiceStartMode.Automatic>.</span><span class="sxs-lookup"><span data-stu-id="889e3-284">Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode.Automatic>.</span></span> <span data-ttu-id="889e3-285">In questo caso, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> deve essere chiamato all'avvio del sistema.</span><span class="sxs-lookup"><span data-stu-id="889e3-285">In such a situation, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> would be called at system startup.</span></span>  
  
 <span data-ttu-id="889e3-286"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> deve essere sottoposto a override nella classe derivata.</span><span class="sxs-lookup"><span data-stu-id="889e3-286"><xref:System.ServiceProcess.ServiceBase.OnStart%2A> is expected to be overridden in the derived class.</span></span> <span data-ttu-id="889e3-287">Per il servizio siano utili, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> e <xref:System.ServiceProcess.ServiceBase.OnStop%2A> devono entrambi essere implementati nella classe del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-287">For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.</span></span>  
  
 <span data-ttu-id="889e3-288">Gli argomenti di inizializzazione per il servizio di elaborare il <xref:System.ServiceProcess.ServiceBase.OnStart%2A> (metodo), non nel metodo Main.</span><span class="sxs-lookup"><span data-stu-id="889e3-288">Process initialization arguments for the service in the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method, not in the Main method.</span></span> <span data-ttu-id="889e3-289">Gli argomenti di `args` matrice di parametri può essere impostata manualmente nella finestra proprietà per il servizio nella console servizi.</span><span class="sxs-lookup"><span data-stu-id="889e3-289">The arguments in the `args` parameter array can be set manually in the properties window for the service in the Services console.</span></span> <span data-ttu-id="889e3-290">Gli argomenti immessi nella console non vengono salvati; vengono passati al servizio una sola volta quando il servizio viene avviato dal Pannello di controllo.</span><span class="sxs-lookup"><span data-stu-id="889e3-290">The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel.</span></span> <span data-ttu-id="889e3-291">Gli argomenti che devono essere presenti quando il servizio viene avviato automaticamente possono essere inseriti nel valore della stringa ImagePath per la chiave del Registro di sistema del servizio (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\ * \< nome servizio >*).</span><span class="sxs-lookup"><span data-stu-id="889e3-291">Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\\*\<service name>*).</span></span> <span data-ttu-id="889e3-292">È possibile ottenere gli argomenti dal Registro di sistema utilizzando il <xref:System.Environment.GetCommandLineArgs%2A> metodo, ad esempio: `string[] imagePathArgs = Environment.GetCommandLineArgs();`.</span><span class="sxs-lookup"><span data-stu-id="889e3-292">You can obtain the arguments from the registry using the <xref:System.Environment.GetCommandLineArgs%2A> method, for example:  `string[] imagePathArgs = Environment.GetCommandLineArgs();`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="OnStop">
      <MemberSignature Language="C#" Value="protected virtual void OnStop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.OnStop" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStop ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="889e3-293">Quando viene eseguita l'implementazione in una classe derivata, l'esecuzione avviene quando il gestore SCM invia un comando Stop al servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-293">When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM).</span></span> <span data-ttu-id="889e3-294">Specifica le azioni da intraprendere al termine dell'esecuzione del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-294">Specifies actions to take when a service stops running.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-295">Utilizzare <xref:System.ServiceProcess.ServiceBase.OnStop%2A> per specificare l'elaborazione che si verifica quando il servizio riceve un comando di arresto.</span><span class="sxs-lookup"><span data-stu-id="889e3-295">Use <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to specify the processing that occurs when the service receives a Stop command.</span></span>  
  
 <span data-ttu-id="889e3-296">Quando il server riceve un comando di interruzione, viene utilizzato il valore di <xref:System.ServiceProcess.ServiceBase.CanStop%2A> per verificare se il servizio accetta comandi Stop.</span><span class="sxs-lookup"><span data-stu-id="889e3-296">When the SCM receives a Stop command, it uses the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> to verify whether the service accepts Stop commands.</span></span> <span data-ttu-id="889e3-297">Se <xref:System.ServiceProcess.ServiceBase.CanStop%2A> è `true`, il comando di interruzione viene passato al servizio e <xref:System.ServiceProcess.ServiceBase.OnStop%2A> metodo viene chiamato se è definito.</span><span class="sxs-lookup"><span data-stu-id="889e3-297">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service, and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined.</span></span> <span data-ttu-id="889e3-298">Se <xref:System.ServiceProcess.ServiceBase.OnStop%2A> non è implementata nel servizio, il server gestisce il comando di arresto.</span><span class="sxs-lookup"><span data-stu-id="889e3-298">If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the service, the SCM handles the Stop command.</span></span>  
  
 <span data-ttu-id="889e3-299">Se <xref:System.ServiceProcess.ServiceBase.CanStop%2A> è `false`, il comando di interruzione viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="889e3-299">If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `false`, the SCM ignores the Stop command.</span></span> <span data-ttu-id="889e3-300">Non viene passato al servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-300">It is not passed to the service.</span></span> <span data-ttu-id="889e3-301">Il comando Stop restituisce e genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="889e3-301">The Stop command returns and throws an exception.</span></span>  
  
 <span data-ttu-id="889e3-302"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> deve essere sottoposto a override nella classe derivata.</span><span class="sxs-lookup"><span data-stu-id="889e3-302"><xref:System.ServiceProcess.ServiceBase.OnStop%2A> is expected to be overridden in the derived class.</span></span> <span data-ttu-id="889e3-303">Per il servizio siano utili, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> e <xref:System.ServiceProcess.ServiceBase.OnStop%2A> devono entrambi essere implementati nella classe del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-303">For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnShutdown" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RequestAdditionalTime">
      <MemberSignature Language="C#" Value="public void RequestAdditionalTime (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestAdditionalTime(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestAdditionalTime (milliseconds As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestAdditionalTime(int milliseconds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="889e3-304">Tempo richiesto espresso in millisecondi.</span><span class="sxs-lookup"><span data-stu-id="889e3-304">The requested time in milliseconds.</span></span></param>
        <summary><span data-ttu-id="889e3-305">Consente di richiedere tempo aggiuntivo per un'operazione in attesa.</span><span class="sxs-lookup"><span data-stu-id="889e3-305">Requests additional time for a pending operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-306">Il <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A> metodo è destinato a essere chiamato da sottoposto a override <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, o <xref:System.ServiceProcess.ServiceBase.OnStop%2A> metodi per richiedere ulteriore tempo per un'operazione in sospeso, per impedire l'indicazione di Gestione controllo servizi (SCM) di servizio non risponde.</span><span class="sxs-lookup"><span data-stu-id="889e3-306">The <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A> method is intended to be called by the overridden <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.</span></span>  <span data-ttu-id="889e3-307">Se l'operazione in sospeso non è una continuazione, pausa, start o stop, un <xref:System.InvalidOperationException> viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="889e3-307">If the pending operation is not a continue, pause, start, or stop, an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="889e3-308">Il servizio non è nello stato di attesa.</span><span class="sxs-lookup"><span data-stu-id="889e3-308">The service is not in a pending state.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnContinue" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnPause" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="889e3-309">Fornisce il punto di ingresso principale per un eseguibile di servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-309">Provides the main entry point for a service executable.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase service);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (service As ServiceBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::ServiceProcess::ServiceBase ^ service);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.ServiceProcess.ServiceBase" />
      </Parameters>
      <Docs>
        <param name="service"><span data-ttu-id="889e3-310">Classe <see cref="T:System.ServiceProcess.ServiceBase" /> che indica un servizio da avviare.</span><span class="sxs-lookup"><span data-stu-id="889e3-310">A <see cref="T:System.ServiceProcess.ServiceBase" /> which indicates a service to start.</span></span></param>
        <summary><span data-ttu-id="889e3-311">Registra il file eseguibile relativo a servizio con il gestore SCM.</span><span class="sxs-lookup"><span data-stu-id="889e3-311">Registers the executable for a service with the Service Control Manager (SCM).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-312">Chiamare questo overload nella `main()` funzione del servizio eseguibile per registrare il servizio con Gestione controllo servizi.</span><span class="sxs-lookup"><span data-stu-id="889e3-312">Call this overload in the `main()` function of the service executable to register the service with the Service Control Manager.</span></span> <span data-ttu-id="889e3-313">Dopo aver chiamato <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>, Gestione controllo servizi esegue un comando di avvio, che comporta una chiamata al <xref:System.ServiceProcess.ServiceBase.OnStart%2A> metodo nel servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-313">After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>, the Service Control Manager issues a Start command, which results in a call to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method in the service.</span></span> <span data-ttu-id="889e3-314">Il servizio non viene avviato finché non viene eseguito il comando di avvio.</span><span class="sxs-lookup"><span data-stu-id="889e3-314">The service is not started until the Start command is executed.</span></span>  
  
 <span data-ttu-id="889e3-315">Il <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> metodo viene chiamato in modo analogo a come <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> per applicazioni Windows Form.</span><span class="sxs-lookup"><span data-stu-id="889e3-315">The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> method is called in much the same way as <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> for Windows Forms applications.</span></span>  
  
 <span data-ttu-id="889e3-316">Se <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> è `true`, viene scritta una voce nel registro eventi se il servizio specificato per il `service` parametro non viene avviato.</span><span class="sxs-lookup"><span data-stu-id="889e3-316">If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if the service specified by the `service` parameter fails to start.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="889e3-317"><paramref name="service" /> è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="889e3-317"><paramref name="service" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.ServiceProcess.ServiceBase[] services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.ServiceProcess.ServiceBase[] services) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (services As ServiceBase())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(cli::array &lt;System::ServiceProcess::ServiceBase ^&gt; ^ services);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="System.ServiceProcess.ServiceBase[]" />
      </Parameters>
      <Docs>
        <param name="services"><span data-ttu-id="889e3-318">Matrice di istanze ServiceBase, che indica i servizi da avviare.</span><span class="sxs-lookup"><span data-stu-id="889e3-318">An array of ServiceBase instances, which indicate services to start.</span></span></param>
        <summary><span data-ttu-id="889e3-319">Registra il file eseguibile relativo a più servizi con il gestore SCM.</span><span class="sxs-lookup"><span data-stu-id="889e3-319">Registers the executable for multiple services with the Service Control Manager (SCM).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-320">Chiamare questo overload nella `main()` funzione del servizio eseguibile per registrare i servizi con Gestione controllo servizi.</span><span class="sxs-lookup"><span data-stu-id="889e3-320">Call this overload in the `main()` function of the service executable to register the services with the Service Control Manager.</span></span> <span data-ttu-id="889e3-321">Dopo aver chiamato <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>, Gestione controllo servizi esegue i comandi di avvio, generare chiamate per il <xref:System.ServiceProcess.ServiceBase.OnStart%2A> metodi nei servizi.</span><span class="sxs-lookup"><span data-stu-id="889e3-321">After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>, the Service Control Manager issues Start commands, which result in calls to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> methods in the services.</span></span> <span data-ttu-id="889e3-322">I servizi non vengono avviati fino a quando non vengono eseguiti i comandi di avvio.</span><span class="sxs-lookup"><span data-stu-id="889e3-322">The services are not started until the Start commands are executed.</span></span>  
  
 <span data-ttu-id="889e3-323">Il <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> metodo viene chiamato in modo analogo a come il <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> metodo per applicazioni Windows Form.</span><span class="sxs-lookup"><span data-stu-id="889e3-323">The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=nameWithType> method is called in much the same way as the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=nameWithType> method for Windows Forms applications.</span></span>  
  
 <span data-ttu-id="889e3-324">Se <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> è `true`, viene scritta una voce nel registro eventi se non si avvia qualsiasi servizio nella matrice.</span><span class="sxs-lookup"><span data-stu-id="889e3-324">If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if any service in the array fails to start.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="889e3-325">Non è stato fornito alcun servizio da avviare.</span><span class="sxs-lookup"><span data-stu-id="889e3-325">You did not supply a service to start.</span></span> <span data-ttu-id="889e3-326">La matrice potrebbe essere <see langword="null" /> oppure vuota.</span><span class="sxs-lookup"><span data-stu-id="889e3-326">The array might be <see langword="null" /> or empty.</span></span></exception>
        <altmember cref="M:System.ServiceProcess.ServiceBase.#ctor" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStart(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="ServiceHandle">
      <MemberSignature Language="C#" Value="protected IntPtr ServiceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ServiceHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceHandle" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ServiceHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IntPtr ServiceHandle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="889e3-327">Ottiene l'handle del controllo di servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-327">Gets the service control handle for the service.</span></span></summary>
        <value><span data-ttu-id="889e3-328">Struttura <see cref="T:System.IntPtr" /> contenente l'handle del controllo di servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-328">An <see cref="T:System.IntPtr" /> structure that contains the service control handle for the service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-329">L'handle del controllo del servizio viene utilizzato per comunicare con Gestione controllo servizi (SCM).</span><span class="sxs-lookup"><span data-stu-id="889e3-329">The service control handle is used to communicate with the Service Control Manager (SCM).</span></span>  <span data-ttu-id="889e3-330">L'handle può essere utilizzato per aggiornare le informazioni sullo stato della gestione controllo servizi per il servizio chiamante mediante non gestito `SetServiceStatus` (funzione).</span><span class="sxs-lookup"><span data-stu-id="889e3-330">The handle can be used to update the service control manager's status information for the calling service using the unmanaged `SetServiceStatus` function.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="889e3-331">Per accedere al codice non gestito.</span><span class="sxs-lookup"><span data-stu-id="889e3-331">for access to unmanaged code.</span></span> <span data-ttu-id="889e3-332">Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span><span class="sxs-lookup"><span data-stu-id="889e3-332">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ServiceMainCallback">
      <MemberSignature Language="C#" Value="public void ServiceMainCallback (int argCount, IntPtr argPointer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ServiceMainCallback(int32 argCount, native int argPointer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ServiceMainCallback (argCount As Integer, argPointer As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ServiceMainCallback(int argCount, IntPtr argPointer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argCount" Type="System.Int32" />
        <Parameter Name="argPointer" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="argCount"><span data-ttu-id="889e3-333">Numero degli argomenti della matrice degli argomenti.</span><span class="sxs-lookup"><span data-stu-id="889e3-333">The number of arguments in the argument array.</span></span></param>
        <param name="argPointer"><span data-ttu-id="889e3-334">Struttura <see cref="T:System.IntPtr" /> che punta a una matrice di argomenti.</span><span class="sxs-lookup"><span data-stu-id="889e3-334">An <see cref="T:System.IntPtr" /> structure that points to an array of arguments.</span></span></param>
        <summary><span data-ttu-id="889e3-335">Consente di registrare il gestore comando e di avviare il servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-335">Registers the command handler and starts the service.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceBase.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("SBServiceName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="889e3-336">Ottiene o imposta il nome breve utilizzato per identificare il servizio nel sistema.</span><span class="sxs-lookup"><span data-stu-id="889e3-336">Gets or sets the short name used to identify the service to the system.</span></span></summary>
        <value><span data-ttu-id="889e3-337">Il nome del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-337">The name of the service.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-338">Il <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> identifica il servizio di Gestione controllo servizi.</span><span class="sxs-lookup"><span data-stu-id="889e3-338">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> identifies the service to the Service Control Manager.</span></span> <span data-ttu-id="889e3-339">Il valore di questa proprietà deve essere identico al nome registrato per il servizio di <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> proprietà della classe installer corrispondente.</span><span class="sxs-lookup"><span data-stu-id="889e3-339">The value of this property must be identical to the name recorded for the service in the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> property of the corresponding installer class.</span></span> <span data-ttu-id="889e3-340">Nel codice, il <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> del servizio è in genere impostata `main()` funzione del file eseguibile.</span><span class="sxs-lookup"><span data-stu-id="889e3-340">In code, the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service is usually set in the `main()` function of the executable.</span></span>  
  
 <span data-ttu-id="889e3-341">Il <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> viene inoltre utilizzato per specificare il <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> associato il <xref:System.ServiceProcess.ServiceBase.EventLog%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="889e3-341">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> is also used to specify the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=nameWithType> associated with the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property.</span></span> <span data-ttu-id="889e3-342">Questo <xref:System.ServiceProcess.ServiceBase.EventLog%2A> è un'istanza che scrive le informazioni di comando di servizio nel registro applicazioni.</span><span class="sxs-lookup"><span data-stu-id="889e3-342">This <xref:System.ServiceProcess.ServiceBase.EventLog%2A> is an instance that writes service command information to the Application log.</span></span>  
  
 <span data-ttu-id="889e3-343">Il <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, che fornisce la stringa di origine per il log eventi, deve essere impostata prima che il servizio scrive nel registro eventi.</span><span class="sxs-lookup"><span data-stu-id="889e3-343">The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service writes to the event log.</span></span> <span data-ttu-id="889e3-344">Tentativo di accedere al registro eventi prima di imposta il nome dell'origine genererà un'eccezione generata.</span><span class="sxs-lookup"><span data-stu-id="889e3-344">Trying to access the event log before the source name is set causes an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="889e3-345">Il servizio è già stato avviato.</span><span class="sxs-lookup"><span data-stu-id="889e3-345">The service has already been started.</span></span> <span data-ttu-id="889e3-346">La proprietà <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> non può essere modificata dopo l'avvio del servizio.</span><span class="sxs-lookup"><span data-stu-id="889e3-346">The <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> property cannot be changed once the service has started.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="889e3-347">Il nome specificato è una stringa di lunghezza zero o più lunga di <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" /> o il nome specificato contiene barre o barre rovesciate.</span><span class="sxs-lookup"><span data-stu-id="889e3-347">The specified name is a zero-length string or is longer than <see cref="F:System.ServiceProcess.ServiceBase.MaxNameLength" />, or the specified name contains forward slash or backslash characters.</span></span></exception>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceBase.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="889e3-348">Arresta il servizio in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="889e3-348">Stops the executing service.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="889e3-349">Il <xref:System.ServiceProcess.ServiceBase.Stop%2A> metodo imposta la stato del servizio per indicare un arresto in sospeso e chiama il <xref:System.ServiceProcess.ServiceBase.OnStop%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="889e3-349">The <xref:System.ServiceProcess.ServiceBase.Stop%2A> method sets the service state to indicate a stop is pending and calls the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method.</span></span>  <span data-ttu-id="889e3-350">Dopo l'applicazione è stato arrestato, lo stato del servizio è impostato su arrestato.</span><span class="sxs-lookup"><span data-stu-id="889e3-350">After the application is stopped, the service state is set to stopped.</span></span> <span data-ttu-id="889e3-351">Se l'applicazione è un servizio ospitato, viene scaricato il dominio dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="889e3-351">If the application is a hosted service, the application domain is unloaded.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceBase.CanStop" />
        <altmember cref="M:System.ServiceProcess.ServiceBase.OnStop" />
      </Docs>
    </Member>
  </Members>
</Type>