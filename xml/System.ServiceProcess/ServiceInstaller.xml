<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b69845d38861eb8bf36caf960b2e2d06cfb6e478" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48717476" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Installa una classe che estende <see cref="T:System.ServiceProcess.ServiceBase" /> per implementare un servizio. Questa classe viene chiamata dall'utilità di installazione durante l'installazione di un'applicazione di servizio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ServiceProcess.ServiceInstaller> funziona specifici per il servizio a cui è associato. Utilizzato dall'utilità di installazione di scrivere i valori del Registro di sistema associati al servizio in una sottochiave della chiave di registro HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services. Il servizio viene identificato dal relativo ServiceName all'interno di questa sottochiave. La sottochiave include anche il nome del file eseguibile o DLL a cui appartiene il servizio.  
  
 Per installare un servizio, creare una classe di programma di installazione di progetti da cui eredita il <xref:System.Configuration.Install.Installer> classe e impostare il <xref:System.ComponentModel.RunInstallerAttribute> attributo sulla classe per `true`. All'interno del progetto, crearne uno <xref:System.ServiceProcess.ServiceProcessInstaller> istanza per ogni applicazione di servizio e quello <xref:System.ServiceProcess.ServiceInstaller> istanza per ogni servizio dell'applicazione. All'interno del costruttore della classe del programma di installazione dei progetti impostare le proprietà di installazione per il servizio utilizzando il <xref:System.ServiceProcess.ServiceProcessInstaller> e <xref:System.ServiceProcess.ServiceInstaller> istanze e aggiungere le istanze di <xref:System.Configuration.Install.Installer.Installers%2A> raccolta.  
  
> [!NOTE]
>  È consigliabile che si utilizza il costruttore per l'aggiunta di istanze del programma di installazione; Tuttavia, se è necessario aggiungere al <xref:System.Configuration.Install.Installer.Installers%2A> insieme nella <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metodo, assicurarsi di eseguire le stesse aggiunte alla raccolta nel <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> (metodo).  
  
 Per tutte le classi che derivano dal <xref:System.Configuration.Install.Installer> classe, lo stato del <xref:System.Configuration.Install.Installer.Installers%2A> raccolta deve essere identico nel <xref:System.ServiceProcess.ServiceInstaller.Install%2A> e <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metodi. Tuttavia, è possibile evitare la manutenzione della raccolta nel <xref:System.ServiceProcess.ServiceInstaller.Install%2A> e <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> se si aggiungono istanze del programma di installazione per i metodi di <xref:System.Configuration.Install.Installer.Installers%2A> insieme nel costruttore della classe del programma di installazione personalizzato. Quando viene chiamato all'utilità di installazione, viene cercato il <xref:System.ComponentModel.RunInstallerAttribute> attributo. Se l'attributo `true`, l'utilità consente di installare tutti i servizi che sono state aggiunte al <xref:System.Configuration.Install.Installer.Installers%2A> insieme che era associato al programma di installazione del progetto. Se <xref:System.ComponentModel.RunInstallerAttribute> è `false` o esiste, l'utilità di installazione ignora il programma di installazione di progetto.  
  
 Il <xref:System.ServiceProcess.ServiceProcessInstaller> associarle alle comuni a tutte le informazioni progetto Installazione classe installazioni <xref:System.ServiceProcess.ServiceInstaller> istanze nel progetto. Se questo servizio è disponibile tutto ciò che lo separa da altri servizi nel progetto di installazione, tali informazioni specifiche del servizio viene installate da questo metodo.  
  
> [!NOTE]
>  È fondamentale che il <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> essere identica al <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> della classe è derivata da <xref:System.ServiceProcess.ServiceBase>. In genere, il valore della <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> per il servizio viene impostata all'interno della funzione Main () del file eseguibile dell'applicazione del servizio. Gestione controllo servizi utilizza il <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> proprietà per individuare il servizio all'interno di questo eseguibile.  
  
 È possibile modificare altre proprietà nel <xref:System.ServiceProcess.ServiceInstaller> prima o dopo averlo aggiunto al <xref:System.Configuration.Install.Installer.Installers%2A> raccolta del programma di installazione del progetto. Ad esempio, di un servizio <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> può essere impostato per avviare il servizio automaticamente al riavvio del computer o richiedere all'utente di avviare il servizio manualmente.  
  
 In genere, non si chiamerà i metodi su <xref:System.ServiceProcess.ServiceInstaller> all'interno del codice; in genere vengono chiamati solo dall'utilità di installazione. L'utilità di installazione viene chiamata automaticamente il <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> e <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> metodi durante il processo di installazione. Per il ripristino da errori, se necessario, chiamando <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (o <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) in tutti i componenti installati in precedenza.  
  
 Le chiamate di utilità di installazione <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> alla rimozione dell'oggetto.  
  
 Routine di installazione di un'applicazione mantiene automaticamente le informazioni relative ai componenti già installati, con l'installazione guidata progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Queste informazioni sullo stato viene aggiornate in modo continuo come le <xref:System.ServiceProcess.ServiceProcessInstaller> istanza e ogni <xref:System.ServiceProcess.ServiceInstaller> istanza viene installata dall'utilità. Non è in genere necessario per il codice modificare le informazioni sullo stato in modo esplicito.  
  
 Quando viene eseguita l'installazione, viene creato automaticamente un <xref:System.Diagnostics.EventLogInstaller> per installare l'origine del log eventi associato il <xref:System.ServiceProcess.ServiceBase> classe derivata. Il <xref:System.Diagnostics.EventLog.Log%2A> proprietà per l'origine è impostato il <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> costruttore al registro applicazioni del computer. Quando si imposta la <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> del <xref:System.ServiceProcess.ServiceInstaller> (che deve essere identico al <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> del servizio), il <xref:System.Diagnostics.EventLog.Source%2A> viene impostato automaticamente sullo stesso valore. In un errore di installazione, l'installazione dell'origine è rollback insieme ai servizi installati in precedenza.  
  
 Il <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metodo tenta di arrestare il servizio se è in esecuzione. Indica se l'esito è positivo oppure No, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> consente di annullare le modifiche apportate da <xref:System.ServiceProcess.ServiceInstaller.Install%2A>. Se è stata creata una nuova origine per la registrazione degli eventi, l'origine viene eliminato.  
  
   
  
## Examples  
 L'esempio seguente crea un programma di installazione, chiamato `MyProjectInstaller`, che eredita da <xref:System.Configuration.Install.Installer>. Si presuppone di trovare un file eseguibile del servizio che contiene due servizi, "Hello-World servizio 1" e "servizio Hello-World 2". All'interno del costruttore per `MyProjectInstaller` (che potrebbe essere chiamato dall'utilità di installazione), <xref:System.ServiceProcess.ServiceInstaller> gli oggetti vengono creati per ognuno di questi servizi e un <xref:System.ServiceProcess.ServiceProcessInstaller> viene creato per il file eseguibile. Per l'utilità di installazione riconoscere `MyProjectInstaller` come un programma di installazione valido, il <xref:System.ComponentModel.RunInstallerAttribute> attributo è impostato su `true`.  
  
 Proprietà facoltative impostate sull'installazione del processo e il servizio prima di aggiungere i programmi di installazione di <xref:System.Configuration.Install.Installer.Installers%2A> raccolta. Quando accede all'utilità di installazione `MyProjectInstaller`, gli oggetti aggiunti per il <xref:System.Configuration.Install.Installer.Installers%2A> raccolta tramite una chiamata a <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> verrà installato a sua volta. Durante il processo, il programma di installazione mantiene informazioni sullo stato che indica gli oggetti che sono stati installati, in modo che ognuno il ripristino a sua volta, se si verifica un errore di installazione.  
  
 In genere, non creare un'istanza della classe del programma di installazione del progetto in modo esplicito. È necessario crearla e aggiungere il <xref:System.ComponentModel.RunInstallerAttribute> attributo alla sintassi, ma è l'utilità di installazione che richiama l'e quindi crea un'istanza, la classe.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ServiceProcess.ServiceInstaller" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per installare un servizio, creare una classe di programma di installazione di progetti da cui eredita il <xref:System.Configuration.Install.Installer> classe e impostare il <xref:System.ComponentModel.RunInstallerAttribute> attributo sulla classe per `true`. All'interno del progetto, crearne uno <xref:System.ServiceProcess.ServiceProcessInstaller> istanza per ogni applicazione di servizio e quello <xref:System.ServiceProcess.ServiceInstaller> istanza per ogni servizio dell'applicazione. All'interno del costruttore della classe del programma di installazione dei progetti impostare le proprietà di installazione per il servizio utilizzando il <xref:System.ServiceProcess.ServiceProcessInstaller> e <xref:System.ServiceProcess.ServiceInstaller> istanze e aggiungere le istanze di <xref:System.Configuration.Install.Installer.Installers%2A> raccolta.  
  
 Il <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> costruttore genera automaticamente un registro eventi la cui proprietà di origine <xref:System.Diagnostics.EventLog.Log%2A> è impostata su registro applicazioni del computer e un <xref:System.Diagnostics.EventLogInstaller>. Quando si imposta la <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> del <xref:System.ServiceProcess.ServiceInstaller>, che deve essere identico al <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> del servizio, il <xref:System.Diagnostics.EventLog.Source%2A> proprietà del registro eventi viene impostata automaticamente sullo stesso valore. L'origine viene eliminato automaticamente nel caso di un errore di installazione.  
  
 Il <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> costruttore imposta la <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> proprietà `ServiceStartMode.Manual` per specificare che un utente di avviare il servizio. È possibile reimpostare la proprietà su `ServiceStartMode.Automatic` per specificare che il servizio di avvio al riavvio del computer.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">Oggetto <see cref="T:System.ComponentModel.IComponent" /> da cui copiare.</param>
        <summary>Copia le proprietà da un'istanza di <see cref="T:System.ServiceProcess.ServiceBase" /> in questo programma di installazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo verrà chiamato raramente all'interno del codice. <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> in genere viene chiamato solo dalle finestre di progettazione.  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> Salva il nome del servizio di `component` parametro per il <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> del <xref:System.ServiceProcess.ServiceInstaller> istanza. (Perché il parametro deve essere un'istanza di una classe che deriva da <xref:System.ServiceProcess.ServiceBase>, `component` disponga assolutamente di un <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> proprietà.)  
  
> [!NOTE]
>  Se si usa la finestra di progettazione di Visual Studio, questo metodo viene chiamato in fase di progettazione quando l'utente fa clic `Add Installer` su un componente che ha specificato questa classe come il programma di installazione. Il programma di installazione accetta tutte le informazioni possibile dal componente in tempo reale e lo memorizza per l'uso in fase di installazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il componente che si sta associando al programma di installazione non eredita da <see cref="T:System.ServiceProcess.ServiceBase" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se ritardare l'avvio del servizio fino all'esecuzione di altri servizi avviati automaticamente.</summary>
        <value>
          <see langword="true" /> per ritardare l'avvio automatico del servizio. In caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> proprietà può essere applicata a qualsiasi servizio, ma viene ignorato a meno che la modalità di avvio del servizio è <xref:System.ServiceProcess.ServiceStartMode.Automatic>. L'impostazione diventa effettiva al successivo che riavvio del sistema. Gestione controllo servizi non garantisce un'ora specifica per il servizio.  
  
 Un servizio di avvio automatico ritardato non può essere un membro di un gruppo dell'ordine di caricamento, ma può dipendere da un altro servizio di avvio automatico. Se un'applicazione chiama un servizio di avvio automatico ritardato prima del caricamento, la chiamata ha esito negativo.  
  
 Nei sistemi operativi che non supportano l'avvio automatico ritardato, impostazione di questa proprietà ha effetto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la descrizione del servizio.</summary>
        <value>Descrizione del servizio. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.ServiceProcess.ServiceInstaller.Description%2A> proprietà per descrivere lo scopo del servizio installato all'utente. L'utente può visualizzare la descrizione del servizio nelle applicazioni che consentono di visualizzare i dettagli per i servizi installati.  
  
 Ad esempio, utilizza Windows XP, è possibile visualizzare la descrizione del servizio con l'utilità della riga di comando di controllo del servizio (Sc.exe) oppure è possibile visualizzare la descrizione del servizio all'interno di **servizi** nodo del **Gestione Computer ** console.  
  
   
  
## Examples  
 Esempio di codice seguente imposta le proprietà di installazione per una nuova applicazione di servizio di Windows. L'esempio imposta il nome del servizio, con il nome visualizzato e descrizione. Dopo aver assegnato le proprietà di installazione per il servizio, l'esempio aggiunge il <xref:System.ServiceProcess.ServiceInstaller> dell'oggetto per il <xref:System.Configuration.Install.Installer.Installers%2A> raccolta.  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica il nome descrittivo visualizzato per consentire all'utente di identificare il servizio.</summary>
        <value>Nome associato al servizio, usato spesso per gli strumenti interattivi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> viene usato, ad esempio, in Gestione controllo servizi per fornire un nome descrittivo leggibile dall'utente per il servizio. Il <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> è un valore del Registro di sistema, ma non viene mai usato come chiave del Registro di sistema. Di conseguenza, le restrizioni sul <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> valore della proprietà non sono applicabili. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> viene usato come chiave del Registro di sistema HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services, pertanto è limitato.  
  
 Il nome visualizzato non è mai usato dall'utilità di installazione per identificare il servizio, in modo che non esistono restrizioni sulla scelta del nome, di quanto accade per il <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">Oggetto <see cref="T:System.Collections.IDictionary" /> che contiene le informazioni contestuali associate all'installazione.</param>
        <summary>Installa il servizio scrivendo le informazioni dell'applicazione di servizio nel Registro di sistema. È necessario che il metodo venga utilizzato dagli strumenti di installazione che elaborano automaticamente i metodi corretti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, non si chiamerà i metodi su <xref:System.ServiceProcess.ServiceInstaller> all'interno del codice; in genere vengono chiamati solo dall'utilità di installazione. L'utilità di installazione chiama automaticamente il <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metodo durante l'installazione. Per il ripristino da errori, se necessario, chiamando <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> sull'oggetto che ha generato l'eccezione.  
  
 Routine di installazione di un'applicazione mantiene informazioni automaticamente i componenti che sono stati già installati, con l'installazione guidata progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Queste informazioni sullo stato, passati <xref:System.ServiceProcess.ServiceInstaller.Install%2A> come il `stateSaver` parametro, vengono aggiornate continuamente durante il <xref:System.ServiceProcess.ServiceProcessInstaller> istanza e ogni <xref:System.ServiceProcess.ServiceInstaller> istanza viene installata dall'utilità. Non è in genere necessario per il codice modificare queste informazioni sullo stato in modo esplicito.  
  
 Il <xref:System.ServiceProcess.ServiceProcessInstaller> associarle alle comuni a tutte le informazioni progetto Installazione classe installazioni <xref:System.ServiceProcess.ServiceInstaller> istanze nel progetto. Se questo servizio è disponibile tutto ciò che lo separa da altri servizi nel progetto di installazione, tali informazioni specifiche del servizio viene installate da questo metodo.  
  
 Per installare un servizio, creare una classe di programma di installazione di progetti da cui eredita il <xref:System.Configuration.Install.Installer> classe e impostare il <xref:System.ComponentModel.RunInstallerAttribute> attributo sulla classe per `true`. All'interno del progetto, crearne uno <xref:System.ServiceProcess.ServiceProcessInstaller> istanza per ogni applicazione di servizio e quello <xref:System.ServiceProcess.ServiceInstaller> istanza per ogni servizio dell'applicazione. All'interno del costruttore della classe del programma di installazione dei progetti impostare le proprietà di installazione per il servizio utilizzando il <xref:System.ServiceProcess.ServiceProcessInstaller> e <xref:System.ServiceProcess.ServiceInstaller> istanze e aggiungere le istanze di <xref:System.Configuration.Install.Installer.Installers%2A> raccolta.  
  
> [!NOTE]
>  È consigliabile che si utilizza il costruttore per l'aggiunta di istanze del programma di installazione; Tuttavia, se è necessario aggiungere al <xref:System.Configuration.Install.Installer.Installers%2A> insieme nella <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metodo, assicurarsi di eseguire le stesse aggiunte alla raccolta nel <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> (metodo).  
  
 Per tutte le classi che derivano dal <xref:System.Configuration.Install.Installer> classe, lo stato del <xref:System.Configuration.Install.Installer.Installers%2A> raccolta deve essere identico nel <xref:System.ServiceProcess.ServiceInstaller.Install%2A> e <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metodi. Tuttavia, è possibile evitare la manutenzione della raccolta nel <xref:System.ServiceProcess.ServiceInstaller.Install%2A> e <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> se si aggiungono istanze del programma di installazione per i metodi di <xref:System.Configuration.Install.Installer.Installers%2A> insieme nel costruttore della classe del programma di installazione personalizzato.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'installazione non contiene un oggetto <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> per l'eseguibile.  
  
oppure 
Il nome file dell'assembly è <see langword="null" /> o una stringa vuota.  
  
oppure 
Il nome del servizio non è valido.  
  
oppure 
È impossibile aprire Gestione controllo servizi.</exception>
        <exception cref="T:System.ArgumentException">La lunghezza del nome visualizzato del servizio è maggiore di 255 caratteri.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Il sistema non è riuscito a creare un handle al servizio.  
  
oppure 
Un servizio con tale nome è già installato.</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">Oggetto <see cref="T:System.Configuration.Install.ComponentInstaller" /> rispetto al quale viene confrontato il programma di installazione corrente.</param>
        <summary>Indica se l'installazione di uno stesso servizio viene eseguita da due programmi di installazione.</summary>
        <returns>
          <see langword="true" /> se chiamando <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> su entrambi i programmi di installazione viene installato lo stesso servizio; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> indica, ad esempio, se due programmi di installazione installano lo stesso servizio con lo stesso account utente.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Oggetto <see cref="T:System.Collections.IDictionary" /> che contiene le informazioni contestuali associate all'installazione.</param>
        <summary>Annulla le informazioni dell'applicazione di servizio scritte nel Registro di sistema dalla procedura di installazione. È necessario che il metodo venga utilizzato dagli strumenti di installazione che elaborano automaticamente i metodi corretti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, non si chiamerà i metodi su <xref:System.ServiceProcess.ServiceInstaller> all'interno del codice; in genere vengono chiamati solo dall'utilità di installazione. L'utilità di installazione chiama automaticamente il <xref:System.ServiceProcess.ServiceInstaller.Install%2A> metodo durante il processo di installazione. Per il ripristino da errori, se necessario, chiamando <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> sull'oggetto che ha generato l'eccezione.  
  
 Routine di installazione di un'applicazione mantiene automaticamente le informazioni relative ai componenti già installati, con l'installazione guidata progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Queste informazioni sullo stato, passati <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> come il `savedState` parametro, vengono aggiornate continuamente durante il <xref:System.ServiceProcess.ServiceProcessInstaller> istanza e ogni <xref:System.ServiceProcess.ServiceInstaller> istanza viene installata dall'utilità. Non è in genere necessario per il codice modificare queste informazioni sullo stato in modo esplicito.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica il nome utilizzato dal sistema per identificare il servizio. È necessario che questa proprietà sia identica alla proprietà <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> del servizio che si desidera installare.</summary>
        <value>Nome del servizio da installare. È necessario che questo valore sia impostato prima che l'utilità di installazione tenti di installare il servizio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È fondamentale che il <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> essere identica al <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> della classe è derivata da <xref:System.ServiceProcess.ServiceBase>. In genere, il valore della <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> per il servizio viene impostata all'interno della funzione Main () del file eseguibile dell'applicazione del servizio. Gestione controllo servizi utilizza il <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> proprietà per individuare il servizio all'interno di questo eseguibile.  
  
 Quando si impostano i <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> del programma di installazione del servizio, il <xref:System.Diagnostics.EventLog.Source%2A> del log eventi associato è impostato sullo stesso valore. In questo modo il servizio registrare automaticamente le chiamate di comandi (ad esempio avvio e arresto) del servizio nel registro applicazioni nel computer.  
  
> [!NOTE]
>  Se un'origine con lo stesso nome esiste già nel computer, ma in un log diverso da nel registro dell'applicazione, verrà generata un'eccezione. Se l'origine esista e sia associato con il registro applicazioni, tale origine viene usata per segnalare le chiamate di comandi al servizio e viene generata alcuna eccezione.  
  
 Il <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> non può essere `null` o avere lunghezza zero. La dimensione massima è 256 caratteri. Non può inoltre contenere barre avanti o indietro, '/' o '\\', o caratteri ASCII set con valore inferiore al valore decimale 32 caratteri.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" /> non è valida.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica i servizi che è necessario che siano in esecuzione per eseguire questo servizio.</summary>
        <value>Matrice di servizi che è necessario che siano in esecuzione prima che sia possibile eseguire il servizio associato a questo programma di installazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un servizio può richiedere altri servizi in esecuzione prima di poter iniziare. Le informazioni da questa proprietà vengano scritta a una chiave del Registro di sistema. Quando l'utente (o il sistema, in caso di avvio automatico) tenta di eseguire il servizio, Gestione controllo servizi (SCM) verifica che ogni servizio nella matrice è già stato avviato.  
  
 Se non viene eseguito quindi qualsiasi servizio nella matrice, il gestore tenterà di avviarle. Questo include i servizi con `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.  
  
 Se tutti i servizi da cui dipende questo servizio non viene avviato, il servizio non verrà avviato. Non viene generata un'eccezione se il sistema non è stato avviato perché nessuna eccezione gestisce a livello di sistema per rilevare questa. Decidere come gestire gli errori di avvio del servizio e implementarlo nel codice. In genere, una finestra di dialogo viene visualizzata all'utente durante l'avvio se non si avvia un servizio.  
  
 Se il servizio non viene avviato, viene scritta una voce nel registro eventi dell'applicazione.  
  
 I servizi da cui dipende questo servizio non devono essere nello stesso eseguibile.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica come e quando viene avviato questo servizio.</summary>
        <value>Oggetto <see cref="T:System.ServiceProcess.ServiceStartMode" /> che rappresenta la modalità di avvio del servizio. Il valore predefinito è <see langword="Manual" />, che specifica che il servizio non verrà avviato automaticamente al riavvio del sistema.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostare il <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> per specificare che il servizio di essere avviato automaticamente dopo il riavvio o che un utente manualmente è necessario avviare il servizio. È anche possibile disabilitare un servizio, specificando che non può essere avviato, manualmente o a livello di codice, fino a quando non è abilitato.  
  
 Non è possibile modificare <xref:System.ServiceProcess.ServiceInstaller> i valori delle proprietà dopo l'installazione. Per modificare il <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, è necessario disinstallare e reinstallare il servizio o modificare manualmente l'impostazione utilizzando Gestione controllo servizi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">La modalità di avvio non è un valore dell'enumerazione <see cref="T:System.ServiceProcess.ServiceStartMode" />.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Oggetto <see cref="T:System.Collections.IDictionary" /> che contiene le informazioni contestuali associate all'installazione.</param>
        <summary>Disinstalla il servizio rimuovendo dal Registro di sistema le informazioni relative.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Disinstallazione tenta di arrestare il servizio prima di disinstallarlo. Se non è possibile arrestare il servizio, viene rilevata alcuna eccezione e il metodo continua con la rimozione del servizio.  
  
 In genere, non si chiamerà i metodi su <xref:System.ServiceProcess.ServiceInstaller> all'interno del codice; in genere vengono chiamati solo dall'utilità di installazione. InstallUtil consente di disinstallare i servizi, oltre a installare. la disinstallazione richiede un'opzione nella riga di comando chiamata.  
  
 La routine di disinstallazione di un'applicazione mantiene informazioni automaticamente i componenti da disinstallare, tramite il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Queste informazioni sullo stato, passati <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> come il `savedState` parametro, vengono aggiornate continuamente durante il <xref:System.ServiceProcess.ServiceProcessInstaller> istanza e ogni <xref:System.ServiceProcess.ServiceInstaller> istanza viene installata dall'utilità. Non è in genere necessario per il codice modificare queste informazioni sullo stato in modo esplicito.  
  
 Per tutte le classi che derivano dal <xref:System.Configuration.Install.Installer> classe, lo stato del <xref:System.Configuration.Install.Installer.Installers%2A> raccolta deve essere identico nel <xref:System.ServiceProcess.ServiceInstaller.Install%2A> e <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> metodi. Tuttavia, è possibile evitare la manutenzione della raccolta nel <xref:System.ServiceProcess.ServiceInstaller.Install%2A> e <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> se si aggiungono istanze del programma di installazione per i metodi di <xref:System.Configuration.Install.Installer.Installers%2A> insieme nel costruttore della classe del programma di installazione personalizzato.  
  
 Non vi è alcun meccanismo di rollback per la disinstallazione, in modo che se un servizio non riesce a disinstallare, questa operazione non influenza gli altri servizi (in genere nello stesso progetto di installazione) in corso la disinstallazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">È impossibile aprire Gestione controllo servizi.  
  
oppure 
Il sistema non è riuscito a ottenere un handle al servizio.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>