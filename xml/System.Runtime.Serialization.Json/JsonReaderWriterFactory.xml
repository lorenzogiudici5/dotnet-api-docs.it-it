<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="JsonReaderWriterFactory.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b72050516f8e1c9606031fb5cea288f6e0a1d84e7d3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">050516f8e1c9606031fb5cea288f6e0a1d84e7d3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Produces instances of <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read data encoded with JavaScript Object Notation (JSON) from a stream or buffer and map it to an XML Infoset and instances of <ph id="ph2">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that can map an XML Infoset to JSON and write JSON-encoded data to a stream.</source>
          <target state="translated">Produce istanze di <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> in grado di leggere dati codificati con JSON (JavaScript Object Notation) da un flusso o da un buffer e mapparli a un InfoSet XML, nonché istanze di <ph id="ph2">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> in grado di mappare un InfoSet XML a JSON e scrivere dati con codifica JSON in un flusso.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> processes JSON messages using a mapping between JSON data and the XML Infoset.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> elabora i messaggi JSON mediante un mapping tra i dati JSON e l'InfoSet XML.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Normally, this mapping is hidden from view.</source>
          <target state="translated">In genere, si tratta di un'operazione nascosta.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>However, in some advanced scenarios it may be necessary to manually convert between JSON and XML.</source>
          <target state="translated">In alcuni scenari avanzati, può tuttavia essere necessario eseguire manualmente la conversione tra JSON e XML.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory&gt;</ph> class can be used to create the necessary XML readers and writers.</source>
          <target state="translated">In questo caso, è possibile utilizzare la classe <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory&gt;</ph> per creare i lettori e i writer XML necessari.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Note that not every XML Infoset element can be mapped to JSON.</source>
          <target state="translated">Si noti che non tutti gli elementi InfoSet XML possono essere mappati a JSON. </target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>For more information about mapping, see <bpt id="p1">[</bpt>How to: Serialize and Deserialize JSON Data<ept id="p1">](~/docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sul mapping, vedere <bpt id="p1">[</bpt>procedura: serializzare e deserializzare dati JSON<ept id="p1">](~/docs/framework/wcf/feature-details/how-to-serialize-and-deserialize-json-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map - streams or buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.</source>
          <target state="translated">Crea una classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> in grado di mappare flussi o buffer codificati con JSON (JavaScript Object Notation) a un InfoSet XML.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Each of the overloads uses a <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service (DoS) attacks when reading untrusted data.</source>
          <target state="translated">Ogni overload utilizza una classe <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> per impedire attacchi di tipo Denial of Service (DoS) durante la lettura di dati non attendibili.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sull'utilizzo <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> per impedire attacchi Denial of Service durante la lettura dei dati non attendibili, vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per i dati<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> buffer array from which to read.</source>
          <target state="translated">Matrice del buffer <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> di input da cui eseguire la lettura.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> utilizzata per impedire attacchi di tipo Denial of Service durante la lettura di dati non attendibili.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.</source>
          <target state="translated">Crea una classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> in grado di mappare buffer codificati con JSON (JavaScript Object Notation) a un InfoSet XML.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can process JavaScript Object Notation (JSON) data.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> in grado di elaborare dati JSON (JavaScript Object Notation).</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>This overload does not accept an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parameter.</source>
          <target state="translated">Questo overload non accetta <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> come parametro.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</source>
          <target state="translated">La codifica dei caratteri (UTF-8, Unicode o Unicode big-endian) viene rilevata automaticamente al momento della lettura dei dati.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sull'utilizzo <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> per impedire attacchi Denial of Service durante la lettura dei dati non attendibili, vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per i dati<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> from which to read.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> di input da cui eseguire la lettura.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> utilizzata per impedire attacchi di tipo Denial of Service durante la lettura di dati non attendibili.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map streams encoded with JavaScript Object Notation (JSON) to an XML Infoset.</source>
          <target state="translated">Crea una classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> in grado di mappare flussi codificati con JSON (JavaScript Object Notation) a un InfoSet XML.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> in grado di leggere dati JSON (JavaScript Object Notation).</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>This overload does not take an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parameter.</source>
          <target state="translated">Questo overload non accetta <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> come parametro.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</source>
          <target state="translated">La codifica dei caratteri (UTF-8, Unicode o Unicode big-endian) viene rilevata automaticamente al momento della lettura dei dati.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sull'utilizzo <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> per impedire attacchi Denial of Service durante la lettura dei dati non attendibili, vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per i dati<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> buffer array from which to read.</source>
          <target state="translated">Matrice del buffer <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> di input da cui eseguire la lettura.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>Starting position from which to read in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posizione iniziale dalla quale leggere in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>Number of bytes that can be read from <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Numero di byte che possono essere letti da <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> utilizzata per impedire attacchi di tipo Denial of Service durante la lettura di dati non attendibili.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map buffers encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</source>
          <target state="translated">Crea una classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> in grado di mappare buffer codificati con JSON (JavaScript Object Notation) e con dimensioni e offset specificati a un InfoSet XML.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> in grado di leggere dati JSON (JavaScript Object Notation).</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>This overload does not take an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> parameter.</source>
          <target state="translated">Questo overload non accetta <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> come parametro.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>The character encoding (UTF-8, Unicode or Big-Endian Unicode) is auto-detected when the data is read.</source>
          <target state="translated">La codifica dei caratteri (UTF-8, Unicode o Unicode big-endian) viene rilevata automaticamente al momento della lettura dei dati.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sull'utilizzo <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> per impedire attacchi Denial of Service durante la lettura dei dati non attendibili, vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per i dati<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> from which to read.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> di input da cui eseguire la lettura.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the reader.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> che specifica la codifica dei caratteri utilizzata dal lettore.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph> is specified as the value, the reader attempts to auto-detect the encoding.</source>
          <target state="translated">Se come valore è specificato <ph id="ph1">&lt;see langword="null" /&gt;</ph>, il lettore tenta di rilevare automaticamente la codifica.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> utilizzata per impedire attacchi di tipo Denial of Service durante la lettura di dati non attendibili.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.OnXmlDictionaryReaderClose" /&gt;</ph> delegate to call when the reader is closed.</source>
          <target state="translated">Delegato <ph id="ph1">&lt;see cref="T:System.Xml.OnXmlDictionaryReaderClose" /&gt;</ph>da chiamare quando il lettore viene chiuso.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map streams encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</source>
          <target state="translated">Crea una classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> in grado di mappare flussi codificati con JSON (JavaScript Object Notation) e con dimensioni e offset specificati a un InfoSet XML.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> in grado di leggere dati JSON (JavaScript Object Notation).</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sull'utilizzo <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> per impedire attacchi Denial of Service durante la lettura dei dati non attendibili, vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per i dati<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The input <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> buffer array from which to read.</source>
          <target state="translated">Matrice del buffer <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> di input da cui eseguire la lettura.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>Starting position from which to read in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posizione iniziale dalla quale leggere in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>Number of bytes that can be read from <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Numero di byte che possono essere letti da <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the reader.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> che specifica la codifica dei caratteri utilizzata dal lettore.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>If <ph id="ph1">&lt;see langword="null" /&gt;</ph> is specified as the value, the reader attempts to auto-detect the encoding.</source>
          <target state="translated">Se come valore è specificato <ph id="ph1">&lt;see langword="null" /&gt;</ph>, il lettore tenta di rilevare automaticamente la codifica.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> used to prevent Denial of Service attacks when reading untrusted data.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReaderQuotas" /&gt;</ph> utilizzata per impedire attacchi di tipo Denial of Service durante la lettura di dati non attendibili.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Xml.OnXmlDictionaryReaderClose" /&gt;</ph> delegate to call when the reader is closed.</source>
          <target state="translated">Delegato <ph id="ph1">&lt;see cref="T:System.Xml.OnXmlDictionaryReaderClose" /&gt;</ph>da chiamare quando il lettore viene chiuso.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>The default value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore predefinito è <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can map buffers encoded with JavaScript Object Notation (JSON), with a specified size and offset and character encoding, to an XML Infoset.</source>
          <target state="translated">Crea una classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> in grado di mappare buffer codificati con JSON (JavaScript Object Notation) e con dimensioni, offset e codifica dei caratteri specificati a un InfoSet XML.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> that can read JavaScript Object Notation (JSON).</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryReader" /&gt;</ph> in grado di leggere dati JSON (JavaScript Object Notation).</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> to prevent Denial of Service attacks when reading untrusted data, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sull'utilizzo <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> per impedire attacchi Denial of Service durante la lettura dei dati non attendibili, vedere <bpt id="p1">[</bpt>considerazioni sulla sicurezza per i dati<ept id="p1">](~/docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> che scrive dati codificati con JSON in un flusso.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A&gt;</ph> static method returns an instance of an <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> that can map an XML Infoset to a JSON stream.</source>
          <target state="translated">Il metodo statico <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter%2A&gt;</ph> restituisce un'istanza di <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> in grado di mappare un InfoSet XML a un flusso JSON.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> is not guaranteed to produce valid JSON.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> non produce necessariamente JSON valido.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
          <source>If it is used in a way not supported by the JSON-XML mapping, it may either throw an exception or write an invalid JSON document.</source>
          <target state="translated">Se viene utilizzata in un modo non supportato dal mapping JSON-XML, è possibile che venga generata un'eccezione o che venga scritto un documento JSON non valido.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> di output per il writer JSON.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> che scrive dati codificati con JSON in un flusso.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> che scrive dati codificati con JSON nel flusso in base a un InfoSet XML.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>The default character encoding is UTF-8.</source>
          <target state="translated">La codifica dei caratteri predefinita è UTF-8.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
          <source>When the writer is closed, the stream is closed as well.</source>
          <target state="translated">Alla chiusura del writer, anche il flusso viene chiuso.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> di output per il writer JSON.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the writer.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> che specifica la codifica dei caratteri utilizzata dal writer.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>The default encoding is UTF-8.</source>
          <target state="translated">La codifica predefinita è UTF-8.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream with a specified character encoding.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> che scrive dati codificati con JSON in un flusso con una codifica dei caratteri specificata.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> che scrive dati codificati con JSON nel flusso in base a un InfoSet XML.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
          <source>When the writer is closed, the stream is closed as well.</source>
          <target state="translated">Alla chiusura del writer, anche il flusso viene chiuso.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> di output per il writer JSON.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the writer.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> che specifica la codifica dei caratteri utilizzata dal writer.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The default encoding is UTF-8.</source>
          <target state="translated">La codifica predefinita è UTF-8.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output stream is closed by the writer when done; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="true" /&gt;</ph>, al termine il flusso di output viene chiuso dal writer. In caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Il valore predefinito è <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream with a specified character encoding.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> che scrive dati codificati con JSON in un flusso con una codifica dei caratteri specificata.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> che scrive dati codificati con JSON nel flusso in base a un InfoSet XML.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> di output per il writer JSON.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the writer.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> che specifica la codifica dei caratteri utilizzata dal writer.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The default encoding is UTF-8.</source>
          <target state="translated">La codifica predefinita è UTF-8.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output stream is closed by the writer when done; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="true" /&gt;</ph>, al termine il flusso di output viene chiuso dal writer. In caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Il valore predefinito è <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output uses multiline format, indenting each level properly; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="true" /&gt;</ph>, nell'output viene utilizzato il formato multiriga, impostando un adeguato rientro per ogni livello; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream with a specified character.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> che scrive dati codificati con JSON in un flusso con un carattere specificato.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> che scrive dati codificati con JSON nel flusso in base a un InfoSet XML.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The output <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> for the JSON writer.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> di output per il writer JSON.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> that specifies the character encoding used by the writer.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Text.Encoding" /&gt;</ph> che specifica la codifica dei caratteri utilizzata dal writer.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The default encoding is UTF-8.</source>
          <target state="translated">La codifica predefinita è UTF-8.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output stream is closed by the writer when done; otherwise <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="true" /&gt;</ph>, al termine il flusso di output viene chiuso dal writer. In caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Il valore predefinito è <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the output uses multiline format, indenting each level properly; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;see langword="true" /&gt;</ph>, nell'output viene utilizzato il formato multiriga, impostando un adeguato rientro per ogni livello; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>The string used to indent each level.</source>
          <target state="translated">Stringa utilizzata per impostare un rientro per ogni livello.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>Creates an <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to a stream with a specified character.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> che scrive dati codificati con JSON in un flusso con un carattere specificato.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> that writes data encoded with JSON to the stream based on an XML Infoset.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Xml.XmlDictionaryWriter" /&gt;</ph> che scrive dati codificati con JSON nel flusso in base a un InfoSet XML.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>