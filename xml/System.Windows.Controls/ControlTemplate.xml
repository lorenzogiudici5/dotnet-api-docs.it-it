<Type Name="ControlTemplate" FullName="System.Windows.Controls.ControlTemplate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e788f81b55bfe38bc9ee56b09022c3a0faa70586" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36567172" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ControlTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ControlTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlTemplate : System::Windows::FrameworkTemplate" />
  <TypeSignature Language="F#" Value="type ControlTemplate = class&#xA;    inherit FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifica la struttura visiva e gli aspetti di comportamento di un controllo <see cref="T:System.Windows.Controls.Control" /> che può essere condiviso tra più istanze del controllo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.Controls.ControlTemplate> consente di specificare la struttura visiva di un controllo. L'autore del controllo è possibile definire il valore predefinito <xref:System.Windows.Controls.ControlTemplate> e l'autore dell'applicazione può eseguire l'override di <xref:System.Windows.Controls.ControlTemplate> per ricostruire la struttura visuale del controllo.  
  
 Modello di controllo è una delle numerose funzionalità offerte dal [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modello di applicazione di stili e modelli. Il modello di stili e modelli fornisce una grande flessibilità che in molti casi non occorre scrivere controlli personalizzati. Se si è un autore dell'applicazione che si desidera modificare la visualizzazione del controllo o per sostituire i <xref:System.Windows.Controls.ControlTemplate> di un controllo esistente, vedere la [stili e modelli](~/docs/framework/wpf/controls/styling-and-templating.md) argomento per informazioni più dettagliate ed esempi.  
  
 Se si sta scrivendo un controllo personalizzato, vedere "Creazione di un controllo personalizzato" nel [Panoramica di Authoring controllo](~/docs/framework/wpf/controls/control-authoring-overview.md).  
  
 Oggetto <xref:System.Windows.Controls.ControlTemplate> deve essere un'unità indipendente di dettaglio di implementazione che non è visibile per utenti e oggetti esterni, inclusi gli stili. L'unico modo per modificare il contenuto del modello di controllo è all'interno del modello di controllo stesso.  
  
<a name="xamlObjectElementUsage_VisualTree"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<ControlTemplate>  
  <VisualTreeRootNode > VisualTreeNodeContents  
  </VisualTreeRootNode >  
</ControlTemplate>  
```  
  
<a name="xamlValues_VisualTree"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *ControlTemplate*  
 Elemento dell'oggetto per <xref:System.Windows.Controls.ControlTemplate> o una classe derivata.  
  
 *VisualTreeRootNode*  
 Una singola [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] elemento come figlio diretto del <xref:System.Windows.Controls.ControlTemplate> (o una classe derivata). I modelli devono avere un unico nodo radice. Per generare un modello utile, l'elemento scelto come *VisualTreeRootNode* previsto per supportare un modello di contenuto di un proprio, spesso un modello che supporta più elementi figlio.  
  
 *VisualTreeNodeContents*  
 Uno o più elementi che completano il modello desiderato. Se l'elemento scelto come *VisualTreeRootNode* supporta solo un singolo elemento figlio, quindi si può solo essere un elemento dichiarato *VisualTreeNodeContents*. È inoltre possibile (ma non comune) per fornire contenuto di testo se scelto *VisualTreeRootNode* supporta una proprietà di contenuto di testo.  
  
   
  
## Examples  
 Il seguente viene illustrata una <xref:System.Windows.Controls.Button> <xref:System.Windows.Style> che imposta il <xref:System.Windows.Controls.ControlTemplate> di un <xref:System.Windows.Controls.Button>:  
  
 [!code-xaml[StylingIntroSample_snippet#ButtonCT](~/samples/snippets/csharp/VS_Snippets_Wpf/StylingIntroSample_snippet/CSharp/Window1.xaml#buttonct)]     
  
 Quando viene applicato, il <xref:System.Windows.Controls.Button> viene visualizzato come un <xref:System.Windows.Shapes.Ellipse>:  
  
 ![Esempio di ControlTemplate del pulsante](~/add/media/stylingintro-buttoncontroltemplate.png "esempio di ControlTemplate del pulsante")  
  
 Quando si imposta la <xref:System.Windows.Controls.Control.Template%2A> proprietà di un <xref:System.Windows.Controls.Control> a un nuovo <xref:System.Windows.Controls.ControlTemplate> come nell'esempio precedente, si sta sostituendo l'intero modello. Novità di <xref:System.Windows.Controls.Button> aspetto analogo al seguente quando è attivo o premuto fa parte dell'aspetto del pulsante su cui si sta sostituendo predefinito. Pertanto, a seconda delle esigenze, è possibile inserire nella definizione di aspetto del pulsante dovrebbe essere simile quando viene premuto e così via, come nell'esempio seguente:  
  
 [!code-xaml[ControlTemplateExamples#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/button.xaml#1)]  
  
 Si noti che in questo esempio fa riferimento a risorse che non sono riportate di seguito. Per l'esempio completo, vedere [Esempio di applicazione di stili con ControlTemplates](http://go.microsoft.com/fwlink/?LinkID=160041). Questo esempio vengono forniti esempi di modelli di controllo per molti controlli ed è il modo migliore per poter iniziare a usare la creazione di modelli di controllo.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Style" />
    <altmember cref="T:System.Windows.DataTemplate" />
    <altmember cref="T:System.Windows.Controls.ContentPresenter" />
    <altmember cref="T:System.Windows.Controls.ItemsPresenter" />
    <altmember cref="T:System.Windows.TemplateBindingExtension" />
    <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate(Type ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ControlTemplate : Type -&gt; System.Windows.Controls.ControlTemplate" Usage="new System.Windows.Controls.ControlTemplate targetType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">Il tipo al quale è destinato il modello.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Controls.ControlTemplate" /> con il tipo di destinazione specificato.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : Type with get, set" Usage="System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il tipo per cui l'oggetto <see cref="T:System.Windows.Controls.ControlTemplate" /> è destinato.</summary>
        <value>Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si dispone di un computer autonomo <xref:System.Windows.Controls.ControlTemplate> nella sezione delle risorse con il <xref:System.Windows.Controls.ControlTemplate.TargetType%2A> impostata su un tipo, il <xref:System.Windows.Controls.ControlTemplate> non viene applicato automaticamente a tale tipo. Al contrario, è necessario specificare un `x:Key` , applicare il modello in modo esplicito.  
  
 Si noti inoltre che il <xref:System.Windows.Controls.ControlTemplate.TargetType%2A> è necessaria la proprietà su un <xref:System.Windows.Controls.ControlTemplate> se la definizione del modello contiene un <xref:System.Windows.Controls.ContentPresenter>.  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *typeName*  
 Il nome del tipo della classe. Per fare riferimento ai <xref:System.Type> nome della classe, utilizzare il [le estensioni di Markup e XAML WPF](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo di questa proprietà:  
  
 [!code-xaml[ControlTemplateExamples#Label](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/label.xaml#label)]  
  
 Nell'esempio precedente Usa la seguente risorsa:  
  
  
  
 Per l'esempio completo, vedere [Esempio di applicazione di stili con ControlTemplates](http://go.microsoft.com/fwlink/?LinkID=160041).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La proprietà <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> non deve essere <see langword="null" /> se la definizione del modello ha un <see cref="T:System.Windows.Controls.ContentPresenter" />.</exception>
        <exception cref="T:System.ArgumentException">I tipi specificati non sono validi. Il <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> di un <see cref="T:System.Windows.Controls.ControlTemplate" /> deve essere o ereditare da un <see cref="T:System.Windows.Controls.Control" />, un <see cref="T:System.Windows.Controls.Page" /> o un <see cref="T:System.Windows.Navigation.PageFunctionBase" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un insieme di oggetti <see cref="T:System.Windows.TriggerBase" /> che applicano modifiche della proprietà o eseguono azioni in base a condizioni specificate.</summary>
        <value>Raccolta di oggetti <see cref="T:System.Windows.TriggerBase" />. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *oneOrMoreTriggers*  
 Uno o più <xref:System.Windows.TriggerBase> oggetti (in genere si tratta di un <xref:System.Windows.Trigger>).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo di questa proprietà:  
  
 [!code-xaml[ControlTemplateExamples#ToolTip](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/tooltip.xaml#tooltip)]  
  
 L'esempio precedente vengono utilizzate le risorse seguenti:  
  
  
  
  
 Per l'esempio completo, vedere [Esempio di applicazione di stili con ControlTemplates](http://go.microsoft.com/fwlink/?LinkID=160041).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberSignature Language="F#" Value="override this.ValidateTemplatedParent : System.Windows.FrameworkElement -&gt; unit" Usage="controlTemplate.ValidateTemplatedParent templatedParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">L'elemento al quale viene applicato questo modello.</param>
        <summary>Controlla il padre basato su modelli rispetto a un insieme di regole.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo utilizza le regole seguenti:  
  
 1. Il `templatedParent` non può essere di tipo <xref:System.Windows.FrameworkContentElement>.  
  
 2. Il `templatedParent` non può essere di tipo <xref:System.Windows.FrameworkElement> che non è un <xref:System.Windows.Controls.Control>.  
  
 3. Il `templatedParent` non può essere un <xref:System.Windows.Controls.Control> che non è associato il <xref:System.Windows.Controls.ControlTemplate>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La proprietà <paramref name="templatedParent" /> non deve essere <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">È possibile associare il <see cref="T:System.Windows.Controls.ControlTemplate" /> a un controllo <see cref="T:System.Windows.Controls.Control" /> impostando la proprietà <see cref="P:System.Windows.Controls.Control.Template" /> prima di utilizzare il <see cref="T:System.Windows.Controls.ControlTemplate" /> sul controllo <see cref="T:System.Windows.Controls.Control" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>