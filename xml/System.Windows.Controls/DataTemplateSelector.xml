<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="478559aaf0f2fa99be891dcbdf485d4c9490fcd1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36567078" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplateSelector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplateSelector" />
  <TypeSignature Language="F#" Value="type DataTemplateSelector = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce una modalità per scegliere un oggetto <see cref="T:System.Windows.DataTemplate" /> basato sull'oggetto dati e l'elemento associato a dati.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, si crea un <xref:System.Windows.Controls.DataTemplateSelector> quando è presente più di un <xref:System.Windows.DataTemplate> per lo stesso tipo di oggetti e si desidera fornire una propria logica per scegliere un <xref:System.Windows.DataTemplate> da applicare in base alle proprietà di ogni oggetto dati. Si noti che se si dispone di oggetti di diversi tipi, è possono impostare il <xref:System.Windows.DataTemplate.DataType%2A> proprietà di <xref:System.Windows.DataTemplate>. Se si sceglie questa soluzione, non è necessario creare un <xref:System.Windows.Controls.DataTemplateSelector>. Inoltre, se si dispone di oggetti dello stesso tipo ma con proprietà diverse, è inoltre possibile utilizzare un <xref:System.Windows.DataTrigger> o un convertitore di tipi di dati. Per altre informazioni, vedere [Panoramica dei modelli di dati](~/docs/framework/wpf/data/data-templating-overview.md).  
  
 Per creare un selettore di modello, creare una classe che eredita da <xref:System.Windows.Controls.DataTemplateSelector> ed eseguire l'override di <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metodo. Dopo aver definita la classe è possibile assegnare un'istanza della classe di proprietà del selettore di modello dell'elemento.  
  
   
  
## Examples  
 In questo esempio, l'origine dell'associazione è un elenco di `Task` oggetti. Una delle proprietà di un `Task` oggetto `Priority`. Esistono due modelli di dati definiti, `myTaskTemplate` e `importantTaskTemplate`.  
  
 Per fornire la logica per scegliere quale <xref:System.Windows.DataTemplate> da utilizzare in base il `Priority` valore dell'oggetto dati, creare una sottoclasse di <xref:System.Windows.Controls.DataTemplateSelector> ed eseguire l'override di <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> (metodo). Nell'esempio seguente, il <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metodo fornisce la logica per restituire il modello appropriato in base al valore della `Priority` proprietà. Il modello da restituire viene trovato nelle risorse di busta <xref:System.Windows.Window> elemento.  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 È quindi possibile dichiarare il `TaskListDataTemplateSelector` come risorsa:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Per usare la risorsa di selettore di modello, assegnarlo al <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> proprietà del <xref:System.Windows.Controls.ListBox>. Il <xref:System.Windows.Controls.ListBox> chiamate il <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metodo il `TaskListDataTemplateSelector` per ciascuno degli elementi nella raccolta sottostante. La chiamata passa l'oggetto dati come parametro di elemento. Il <xref:System.Windows.DataTemplate> restituito dal metodo viene quindi applicato all'oggetto dati.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Per l'esempio completo, vedere [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009) (Introduzione a un esempio di applicazione di modello).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplateSelector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Controls.DataTemplateSelector" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectTemplate (item As Object, container As DependencyObject) As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DataTemplate ^ SelectTemplate(System::Object ^ item, System::Windows::DependencyObject ^ container);" />
      <MemberSignature Language="F#" Value="abstract member SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate&#xA;override this.SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate" Usage="dataTemplateSelector.SelectTemplate (item, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">Oggetto dati per cui selezionare il modello.</param>
        <param name="container">Oggetto associato a dati.</param>
        <summary>Quando è sottoposto a override in una classe derivata, restituisce un oggetto <see cref="T:System.Windows.DataTemplate" /> in base alla logica personalizzata.</summary>
        <returns>Restituisce un valore <see cref="T:System.Windows.DataTemplate" /> o <see langword="null" />. Il valore predefinito è <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, si utilizza un selettore di modello quando si dispone di più di un modello di dati definito per lo stesso tipo di oggetti. Ad esempio, se l'origine dell'associazione è un elenco di oggetti studente e si desidera applicare un modello specifico per studenti personale part-time. È possibile farlo creando una classe che eredita da <xref:System.Windows.Controls.DataTemplateSelector> ed eseguendo l'override di <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metodo. Dopo aver definita la classe è possibile assegnare un'istanza della classe di proprietà del selettore di modello dell'elemento.  
  
   
  
## Examples  
 In questo esempio, l'origine dell'associazione è un elenco di `Task` oggetti. Una delle proprietà di un `Task` oggetto `Priority`. Esistono due modelli di dati definiti, `myTaskTemplate` e `importantTaskTemplate`.  
  
 Per fornire la logica per scegliere quale <xref:System.Windows.DataTemplate> da utilizzare in base il `Priority` valore dell'oggetto dati, creare una sottoclasse di <xref:System.Windows.Controls.DataTemplateSelector> ed eseguire l'override di <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> (metodo). Nell'esempio seguente, il <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metodo fornisce la logica per restituire il modello appropriato in base al valore della `Priority` proprietà. Il modello da restituire viene trovato nelle risorse di busta <xref:System.Windows.Window> elemento.  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 È quindi possibile dichiarare il `TaskListDataTemplateSelector` come risorsa:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Per usare la risorsa di selettore di modello, assegnarlo al <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> proprietà del <xref:System.Windows.Controls.ListBox>. Il <xref:System.Windows.Controls.ListBox> chiamate il <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> metodo il `TaskListDataTemplateSelector` per ciascuno degli elementi nella raccolta sottostante. La chiamata passa l'oggetto dati come parametro di elemento. Il <xref:System.Windows.DataTemplate> restituito dal metodo viene quindi applicato all'oggetto dati.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Per l'esempio completo, vedere [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009) (Introduzione a un esempio di applicazione di modello).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>