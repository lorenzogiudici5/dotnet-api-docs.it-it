<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Enumerable.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86cacba54000b777b9f427820593d6cc354343465ca.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acba54000b777b9f427820593d6cc354343465ca</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Provides a set of <ph id="ph1">&lt;see langword="static" /&gt;</ph> (<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) methods for querying objects that implement <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Fornisce un set di metodi <ph id="ph1">&lt;see langword="static" /&gt;</ph>(<ph id="ph2">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) per l'esecuzione di query su oggetti che implementano <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The methods in this class provide an implementation of the standard query operators for querying data sources that implement <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">I metodi in questa classe forniscono un'implementazione degli operatori di query standard per eseguire query sui dati di origini che implementano <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The standard query operators are general purpose methods that follow the <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</source>
          <target state="translated">Gli operatori query standard sono i metodi di uso generale che seguono il <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> serie e consentono di esprimere operazioni di attraversamento, filtro e proiezione su dati in qualsiasi. Linguaggio di programmazione basato su NET.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The majority of the methods in this class are defined as extension methods that extend <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">La maggior parte dei metodi in questa classe sono definiti come metodi di estensione che estendono <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>This means they can be called like an instance method on any object that implements <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">Ciò significa che possono essere chiamati come un metodo di istanza su qualsiasi oggetto che implementa <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated.</source>
          <target state="translated">Metodi che vengono utilizzati in una query che restituisce una sequenza di valori non utilizzano i dati di destinazione finché l'oggetto query viene enumerata.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>This is known as deferred execution.</source>
          <target state="translated">Questo è noto come l'esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</source>
          <target state="translated">Metodi che vengono utilizzati in una query che restituisce un valore singleton eseguire e utilizzano immediatamente i dati di destinazione.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to aggregate over.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> a cui aggregare.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>An accumulator function to be invoked on each element.</source>
          <target state="translated">Funzione accumulatore da richiamare per ogni elemento.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Applica una funzione accumulatore a una sequenza.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The final accumulator value.</source>
          <target state="translated">Valore finale dell'accumulatore.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> metodo rende più semplice per eseguire un calcolo su una sequenza di valori.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph> except the first one.</source>
          <target state="translated">Questo metodo funziona chiamando <ph id="ph1">`func`</ph> una volta per ogni elemento in <ph id="ph2">`source`</ph> ad eccezione della prima.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
          <target state="translated">Ogni volta che <ph id="ph1">`func`</ph> viene chiamato, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> passa sia l'elemento dalla sequenza e un valore aggregato (come primo argomento per <ph id="ph3">`func`</ph>).</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The first element of <ph id="ph1">`source`</ph> is used as the initial aggregate value.</source>
          <target state="translated">Il primo elemento della <ph id="ph1">`source`</ph> viene utilizzato come valore aggregato iniziale.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
          <target state="translated">Il risultato di <ph id="ph1">`func`</ph> sostituisce il precedente valore aggregato.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> returns the final result of <ph id="ph2">`func`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29&gt;</ph> Restituisce il risultato finale di <ph id="ph2">`func`</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> method isn't suitable for all cases because it uses the first element of <ph id="ph2">`source`</ph> as the initial aggregate value.</source>
          <target state="translated">Questo overload del metodo di <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> (metodo) non è adatto per tutti i casi perché viene utilizzato il primo elemento della <ph id="ph2">`source`</ph> come valore aggregato iniziale.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>You should choose another overload if the return value should include only the elements of <ph id="ph1">`source`</ph> that meet a certain condition.</source>
          <target state="translated">È consigliabile scegliere un altro overload se il valore restituito deve includere solo gli elementi di <ph id="ph1">`source`</ph> che soddisfano una determinata condizione.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>For example, this overload isn't reliable if you want to calculate the sum of the even numbers in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Ad esempio, questo overload non è affidabile se si desidera calcolare la somma dei numeri pari in <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The result will be incorrect if the first element is odd instead of even.</source>
          <target state="translated">Il risultato sarà corretto se il primo elemento è dispari anziché anche.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Per semplificare le operazioni comuni di aggregazione, gli operatori query standard includono anche un metodo di conteggio generico, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>e quattro i metodi di aggregazione numeriche, vale a dire <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source>The following code example demonstrates how to reverse the order of words in a string by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>.</source>
          <target state="translated">Esempio di codice riportato di seguito viene illustrato come invertire l'ordine delle parole in una stringa utilizzando <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="func" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The type of the accumulator value.</source>
          <target state="translated">Tipo del valore dell'accumulatore.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to aggregate over.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> a cui aggregare.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The initial accumulator value.</source>
          <target state="translated">Valore iniziale dell'accumulatore.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>An accumulator function to be invoked on each element.</source>
          <target state="translated">Funzione accumulatore da richiamare per ogni elemento.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Applica una funzione accumulatore a una sequenza.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The specified seed value is used as the initial accumulator value.</source>
          <target state="translated">Il valore di inizializzazione specificato viene usato come valore iniziale dell'accumulatore.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The final accumulator value.</source>
          <target state="translated">Valore finale dell'accumulatore.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> metodo rende più semplice per eseguire un calcolo su una sequenza di valori.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Questo metodo funziona chiamando <ph id="ph1">`func`</ph> una volta per ogni elemento in <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
          <target state="translated">Ogni volta che <ph id="ph1">`func`</ph> viene chiamato, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> passa sia l'elemento dalla sequenza e un valore aggregato (come primo argomento per <ph id="ph3">`func`</ph>).</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The value of the <ph id="ph1">`seed`</ph> parameter is used as the initial aggregate value.</source>
          <target state="translated">Il valore di <ph id="ph1">`seed`</ph> parametro viene utilizzato come valore aggregato iniziale.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
          <target state="translated">Il risultato di <ph id="ph1">`func`</ph> sostituisce il precedente valore aggregato.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> returns the final result of <ph id="ph2">`func`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29&gt;</ph> Restituisce il risultato finale di <ph id="ph2">`func`</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Per semplificare le operazioni comuni di aggregazione, gli operatori query standard includono anche un metodo di conteggio generico, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>e quattro i metodi di aggregazione numeriche, vale a dire <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> to apply an accumulator function and use a seed value.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> per applicare una funzione accumulatore e utilizzare un valore di inizializzazione.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="func" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The type of the accumulator value.</source>
          <target state="translated">Tipo del valore dell'accumulatore.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The type of the resulting value.</source>
          <target state="translated">Il tipo del valore risultante.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to aggregate over.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> a cui aggregare.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The initial accumulator value.</source>
          <target state="translated">Valore iniziale dell'accumulatore.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>An accumulator function to be invoked on each element.</source>
          <target state="translated">Funzione accumulatore da richiamare per ogni elemento.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>A function to transform the final accumulator value into the result value.</source>
          <target state="translated">Una funzione per trasformare il valore finale dell'accumulatore nel valore risultante.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>Applies an accumulator function over a sequence.</source>
          <target state="translated">Applica una funzione accumulatore a una sequenza.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</source>
          <target state="translated">Il valore di inizializzazione specificato viene usato come valore iniziale dell'accumulatore e la funzione specificata viene usata per selezionare il valore risultante.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The transformed final accumulator value.</source>
          <target state="translated">Il valore finale trasformato dell'accumulatore.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> method makes it simple to perform a calculation over a sequence of values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> metodo rende più semplice per eseguire un calcolo su una sequenza di valori.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>This method works by calling <ph id="ph1">`func`</ph> one time for each element in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Questo metodo funziona chiamando <ph id="ph1">`func`</ph> una volta per ogni elemento in <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>Each time <ph id="ph1">`func`</ph> is called, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> passes both the element from the sequence and an aggregated value (as the first argument to <ph id="ph3">`func`</ph>).</source>
          <target state="translated">Ogni volta che <ph id="ph1">`func`</ph> viene chiamato, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph> passa sia l'elemento dalla sequenza e un valore aggregato (come primo argomento per <ph id="ph3">`func`</ph>).</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The value of the <ph id="ph1">`seed`</ph> parameter is used as the initial aggregate value.</source>
          <target state="translated">Il valore di <ph id="ph1">`seed`</ph> parametro viene utilizzato come valore aggregato iniziale.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The result of <ph id="ph1">`func`</ph> replaces the previous aggregated value.</source>
          <target state="translated">Il risultato di <ph id="ph1">`func`</ph> sostituisce il precedente valore aggregato.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The final result of <ph id="ph1">`func`</ph> is passed to <ph id="ph2">`resultSelector`</ph> to obtain the final result of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">Il risultato finale di <ph id="ph1">`func`</ph> viene passato a <ph id="ph2">`resultSelector`</ph> per ottenere il risultato finale di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>To simplify common aggregation operations, the standard query operators also include a general purpose count method, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, and four numeric aggregation methods, namely <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">Per semplificare le operazioni comuni di aggregazione, gli operatori query standard includono anche un metodo di conteggio generico, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>e quattro i metodi di aggregazione numeriche, vale a dire <ph id="ph2">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>, e <ph id="ph5">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> to apply an accumulator function and a result selector.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> per applicare una funzione accumulatore e un selettore di risultato.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="func" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="source" /&gt;</ph>, il parametro <ph id="ph2">&lt;paramref name="func" /&gt;</ph> o il parametro <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> è <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements to apply the predicate to.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene gli elementi a cui applicare il predicato.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Funzione per testare ogni elemento rispetto a una condizione.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Determines whether all elements of a sequence satisfy a condition.</source>
          <target state="translated">Determina se tutti gli elementi di una sequenza soddisfano una condizione.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se ogni elemento della sequenza di origine supera il test per il predicato specificato o se la sequenza è vuota; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method does not return all the elements of a collection.</source>
          <target state="translated">Questo metodo non restituisce tutti gli elementi di una raccolta.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Instead, it determines whether all the elements of a collection satisfy a condition.</source>
          <target state="translated">Determina invece se tutti gli elementi di una raccolta soddisfano una condizione.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
          <target state="translated">L'enumerazione di <ph id="ph1">`source`</ph> viene arrestato, non appena possibile determinare il risultato.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into All()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into All()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> to determine whether all the elements in a sequence satisfy a condition.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> per determinare se tutti gli elementi in una sequenza soddisfano una condizione.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Variable <ph id="ph1">`allStartWithB`</ph> is true if all the pet names start with "B" or if the <ph id="ph2">`pets`</ph> array is empty.</source>
          <target state="translated">Variabile <ph id="ph1">`allStartWithB`</ph> è true se tutti i nomi di pet inizia con "B" o se il <ph id="ph2">`pets`</ph> matrice è vuota.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The Boolean value that the <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> method returns is typically used in the predicate of a <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) or a direct call to the <ph id="ph5">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> method.</source>
          <target state="translated">Il valore booleano che il <ph id="ph1">&lt;xref:System.Linq.Enumerable.All%2A&gt;</ph> restituisce in genere viene utilizzato nel predicato di un <ph id="ph2">`where`</ph> clausola (<ph id="ph3">`Where`</ph> clausola in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) o una chiamata diretta di <ph id="ph5">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> (metodo).</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following example demonstrates this use of the <ph id="ph1">`All`</ph> method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'utilizzo del <ph id="ph1">`All`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Determines whether any element of a sequence exists or satisfies a condition.</source>
          <target state="translated">Determina se un qualsiasi elemento di una sequenza esiste o soddisfa una condizione.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to check for emptiness.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> di cui verificare il contenuto.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Determines whether a sequence contains any elements.</source>
          <target state="translated">Determina se una sequenza contiene elementi.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains any elements; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se la sequenza di origine contiene elementi; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method does not return any one element of a collection.</source>
          <target state="translated">Questo metodo non restituisce un qualsiasi elemento di una raccolta.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead, it determines whether the collection contains any elements.</source>
          <target state="translated">Determina invece se la raccolta contiene elementi.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
          <target state="translated">L'enumerazione di <ph id="ph1">`source`</ph> viene arrestato, non appena possibile determinare il risultato.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Any()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Any()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> to determine whether a sequence contains any elements.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> per determinare se una sequenza contiene elementi.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The Boolean value that the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns is typically used in the predicate of a <ph id="ph2">`where`</ph> clause (<ph id="ph3">`Where`</ph> clause in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) or a direct call to the <ph id="ph5">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method.</source>
          <target state="translated">Il valore booleano che il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> restituisce in genere viene utilizzato nel predicato di un <ph id="ph2">`where`</ph> clausola (<ph id="ph3">`Where`</ph> clausola in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) o una chiamata diretta di <ph id="ph5">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> (metodo).</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following example demonstrates this use of the <ph id="ph1">`Any`</ph> method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'utilizzo del <ph id="ph1">`Any`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to apply the predicate to.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> ai cui elementi applicare il predicato.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Funzione per testare ogni elemento rispetto a una condizione.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Determines whether any element of a sequence satisfies a condition.</source>
          <target state="translated">Determina un qualsiasi elemento di una sequenza soddisfa una condizione.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any elements in the source sequence pass the test in the specified predicate; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se gli elementi nella sequenza di origine superano il test per il predicato specificato; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method does not return any one element of a collection.</source>
          <target state="translated">Questo metodo non restituisce un qualsiasi elemento di una raccolta.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Instead, it determines whether any elements of a collection satisfy a condition.</source>
          <target state="translated">Determina invece se tutti gli elementi di una raccolta soddisfano una condizione.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The enumeration of <ph id="ph1">`source`</ph> is stopped as soon as the result can be determined.</source>
          <target state="translated">L'enumerazione di <ph id="ph1">`source`</ph> viene arrestato, non appena possibile determinare il risultato.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Any()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Any()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> to determine whether any element in a sequence satisfies a condition.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> per determinare se qualsiasi elemento in una sequenza soddisfa una condizione.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Tipo degli elementi di <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A sequence of values.</source>
          <target state="translated">Sequenza di valori.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to append to <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Valore da accodare a <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Appends a value to the end of the sequence.</source>
          <target state="translated">Accoda un valore alla fine della sequenza.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A new sequence that ends with <ph id="ph1">&lt;paramref name="element" /&gt;</ph>.</source>
          <target state="translated">Nuova sequenza che termina con <ph id="ph1">&lt;paramref name="element" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to type as <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Sequenza da digitare come oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the input typed as <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Restituisce l'input tipizzato come oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence typed as <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Sequenza di input digitata come oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method has no effect other than to change the compile-time type of <ph id="ph2">`source`</ph> from a type that implements <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> to <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> itself.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> metodo non ha effetto diverso per modificare il tipo in fase di compilazione di <ph id="ph2">`source`</ph> da un tipo che implementa <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> per <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> se stesso.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> can be used to choose between query implementations when a sequence implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> but also has a different set of public query methods available.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> Consente di scegliere tra le implementazioni di query quando si implementa una sequenza <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> ma ha anche un set diverso di metodi di query pubblici disponibili.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>For example, given a generic class <ph id="ph1">`Table`</ph> that implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and has its own methods such as <ph id="ph3">`Where`</ph>, <ph id="ph4">`Select`</ph>, and <ph id="ph5">`SelectMany`</ph>, a call to <ph id="ph6">`Where`</ph> would invoke the public <ph id="ph7">`Where`</ph> method of <ph id="ph8">`Table`</ph>.</source>
          <target state="translated">Ad esempio, data una classe generica <ph id="ph1">`Table`</ph> che implementa <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> e include i metodi, ad esempio <ph id="ph3">`Where`</ph>, <ph id="ph4">`Select`</ph>, e <ph id="ph5">`SelectMany`</ph>, una chiamata a <ph id="ph6">`Where`</ph> pubblico richiama <ph id="ph7">`Where`</ph> metodo <ph id="ph8">`Table`</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A <ph id="ph1">`Table`</ph> type that represents a database table could have a <ph id="ph2">`Where`</ph> method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution.</source>
          <target state="translated">Oggetto <ph id="ph1">`Table`</ph> tipo che rappresenta una tabella di database potrebbe disporre di un <ph id="ph2">`Where`</ph> metodo che accetti l'argomento di predicato come un albero delle espressioni e converte la struttura ad albero in SQL per l'esecuzione remota.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If remote execution is not desired, for example because the predicate invokes a local method, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> method can be used to hide the custom methods and instead make the standard query operators available.</source>
          <target state="translated">Se non si desidera un'esecuzione remota, ad esempio perché il predicato richiama un metodo locale, il <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> metodo può essere utilizzato per nascondere i metodi personalizzati e rendere invece disponibili gli operatori query standard.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to hide a type's custom <ph id="ph2">`Where`</ph> method when the standard query operator implementation is desired.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per nascondere un tipo personalizzata del <ph id="ph2">`Where`</ph> metodo quando è necessaria l'implementazione dell'operatore di query standard.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Computes the average of a sequence of numeric values.</source>
          <target state="translated">Calcola la media di una sequenza di valori numerici.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Media della sequenza dei valori.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate the average of a sequence of values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> per calcolare la media di una sequenza di valori.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Media della sequenza dei valori.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>If the sum of the elements is too large to represent as a <ph id="ph1">&lt;xref:System.Double&gt;</ph>, this method returns positive or negative infinity.</source>
          <target state="translated">Se la somma degli elementi è troppo grande per essere rappresentato come un <ph id="ph1">&lt;xref:System.Double&gt;</ph>, questo metodo restituisce l'infinito positivo o negativo.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Media della sequenza dei valori.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Media della sequenza dei valori.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullable di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Media della sequenza di valori o <ph id="ph1">&lt;see langword="null" /&gt;</ph> se la sequenza di origine è vuota o contiene solo valori <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma degli elementi della sequenza è maggiore di <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullable di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Media della sequenza di valori o <ph id="ph1">&lt;see langword="null" /&gt;</ph> se la sequenza di origine è vuota o contiene solo valori <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>If the sum of the elements is too large to represent as a <ph id="ph1">&lt;xref:System.Double&gt;</ph>, this method returns positive or negative infinity.</source>
          <target state="translated">Se la somma degli elementi è troppo grande per essere rappresentato come un <ph id="ph1">&lt;xref:System.Double&gt;</ph>, questo metodo restituisce l'infinito positivo o negativo.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullable di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Media della sequenza di valori o <ph id="ph1">&lt;see langword="null" /&gt;</ph> se la sequenza di origine è vuota o contiene solo valori <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma degli elementi della sequenza è maggiore di <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullable di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Media della sequenza di valori o <ph id="ph1">&lt;see langword="null" /&gt;</ph> se la sequenza di origine è vuota o contiene solo valori <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma degli elementi della sequenza è maggiore di <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullable di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Media della sequenza di valori o <ph id="ph1">&lt;see langword="null" /&gt;</ph> se la sequenza di origine è vuota o contiene solo valori <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the average of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Media della sequenza dei valori.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values that are used to calculate an average.</source>
          <target state="translated">Una sequenza di valori usata per calcolare una media.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Media della sequenza dei valori.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma degli elementi della sequenza è maggiore di <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Sequenza di valori di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Media della sequenza dei valori.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Sequenza di valori di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Media della sequenza dei valori.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma degli elementi della sequenza è maggiore di <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of source.</source>
          <target state="translated">Tipo degli elementi di origine.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Sequenza di valori di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Media della sequenza dei valori.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma degli elementi della sequenza è maggiore di <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Sequenza di valori di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullable ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Media della sequenza di valori o <ph id="ph1">&lt;see langword="null" /&gt;</ph> se la sequenza di origine è vuota o contiene solo valori <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma degli elementi della sequenza è maggiore di <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Sequenza di valori di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullable ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Media della sequenza di valori o <ph id="ph1">&lt;see langword="null" /&gt;</ph> se la sequenza di origine è vuota o contiene solo valori <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Sequenza di valori di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullable ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Media della sequenza di valori o <ph id="ph1">&lt;see langword="null" /&gt;</ph> se la sequenza di origine è vuota o contiene solo valori <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The sum of the elements in the sequence is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma degli elementi della sequenza è maggiore di <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Sequenza di valori di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullable ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Media della sequenza di valori o <ph id="ph1">&lt;see langword="null" /&gt;</ph> se la sequenza di origine è vuota o contiene solo valori <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Sequenza di valori di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Computes the average of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullable ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The average of the sequence of values, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if the source sequence is empty or contains only values that are <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Media della sequenza di valori o <ph id="ph1">&lt;see langword="null" /&gt;</ph> se la sequenza di origine è vuota o contiene solo valori <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values to calculate the average of.</source>
          <target state="translated">Sequenza di valori di cui calcolare la media.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Computes the average of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la media di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The average of the sequence of values.</source>
          <target state="translated">Media della sequenza dei valori.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Average()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Average()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to calculate an average.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per calcolare una Media.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The type to cast the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept> to.</source>
          <target state="translated">Il tipo per eseguire il cast di elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept> per.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> that contains the elements to be cast to type <bpt id="p1">&lt;c&gt;</bpt>TResult<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> che contiene gli elementi di cui eseguire il cast al tipo <bpt id="p1">&lt;c&gt;</bpt>TResult<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>Casts the elements of an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> to the specified type.</source>
          <target state="translated">Esegue il cast degli elementi di un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> nel tipo specificato.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains each element of the source sequence cast to the specified type.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene ogni elemento della sequenza di origine che ha eseguito il cast al tipo specificato.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> metodo consente agli operatori di query standard da richiamare su raccolte non generiche fornendo le informazioni sul tipo necessari.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>For example, <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> does not implement <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, but by calling <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> on the <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> object, the standard query operators can then be used to query the sequence.</source>
          <target state="translated">Ad esempio, <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> non implementa <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, mentre chiamando <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> sul <ph id="ph4">&lt;xref:System.Collections.ArrayList&gt;</ph> dell'oggetto, quindi gli operatori query standard consente di eseguire la sequenza di una query.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>If an element cannot be converted to type <ph id="ph1">`TResult`</ph>, this method throws a <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
          <target state="translated">Se un elemento non può essere convertito nel tipo <ph id="ph1">`TResult`</ph>, questo metodo genera un <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The source sequence for this method is <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, which means the elements have the compile-time static type of <ph id="ph2">`object`</ph>.</source>
          <target state="translated">La sequenza di origine per questo metodo viene <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, vale a dire che gli elementi hanno il tipo statico in fase di compilazione di <ph id="ph2">`object`</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The only type conversions that are performed by this method are reference conversions and unboxing conversions.</source>
          <target state="translated">Le conversioni dei tipi solo che vengono eseguite da questo metodo sono le conversioni di riferimento e di conversione unboxing.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The runtime type of the elements in the collection must match the target type, or in the case of value types, the runtime type of elements must be the result of a boxing conversion of the target type.</source>
          <target state="translated">Il tipo di runtime degli elementi nella raccolta deve corrispondere al tipo di destinazione oppure nel caso di tipi di valore, il tipo di runtime di elementi deve essere il risultato di una conversione boxing del tipo di destinazione.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>Other conversion types, such as those between different numeric types, are not allowed.</source>
          <target state="translated">Altri tipi di conversione, come quelli tra tipi numerici diversi, non sono consentiti.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>To obtain only those elements that can be converted to type <ph id="ph1">`TResult`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> method instead of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
          <target state="translated">Per ottenere solo gli elementi che possono essere convertiti nel tipo <ph id="ph1">`TResult`</ph>, usare il <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> anziché <ph id="ph3">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>In a query expression, an explicitly typed iteration variable translates to an invocation of <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
          <target state="translated">In un'espressione di query, una variabile di iterazione tipizzata in modo esplicito viene convertita in una chiamata di <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>This example shows the syntax for an explicitly typed range variable.</source>
          <target state="translated">In questo esempio viene illustrata la sintassi per una variabile di intervallo tipizzata in modo esplicito.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>Use the <ph id="ph1">`select`</ph> clause of a query to perform other conversion types, like the implicit numeric conversions.</source>
          <target state="translated">Utilizzare il <ph id="ph1">`select`</ph> clausola di una query per eseguire altri tipi di conversione, analogamente alle conversioni numeriche implicite.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The following example uses both the <ph id="ph1">`Cast`</ph> method and a <ph id="ph2">`select`</ph> statement to convert a sequence of boxed integers to a sequence of doubles.</source>
          <target state="translated">L'esempio seguente usa sia il <ph id="ph1">`Cast`</ph> metodo e un <ph id="ph2">`select`</ph> istruzione per convertire una sequenza di numeri interi sottoposto a conversione boxing in una sequenza di valori Double.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> to enable the use of the standard query operators on an <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> per consentire l'utilizzo degli operatori di query standard in un <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
          <source>An element in the sequence cannot be cast to type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">Non è possibile eseguire il cast di un elemento della sequenza al tipo <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Tipo degli elementi delle sequenze di input.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The first sequence to concatenate.</source>
          <target state="translated">Prima sequenza da concatenare.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to concatenate to the first sequence.</source>
          <target state="translated">Sequenza da concatenare alla prima sequenza.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Concatenates two sequences.</source>
          <target state="translated">Concatena due sequenze.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the concatenated elements of the two input sequences.</source>
          <target state="translated">Un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene gli elementi concatenati delle due sequenze di input.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method differs from the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method because the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns all the original elements in the input sequences.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> metodo differisce dal <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> metodo perché il <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> metodo restituisce tutti gli elementi originali nelle sequenze di input.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method returns only unique elements.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> restituisce solo gli elementi univoci.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to concatenate two sequences.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per concatenare due sequenze.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method, passing it the identity selector function.</source>
          <target state="translated">È un modo alternativo di concatenare due sequenze per costruire una raccolta, ad esempio, una matrice di sequenze e quindi applicare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> passandogli la funzione del selettore di identità.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following example demonstrates this use of <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'utilizzo di <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> o <ph id="ph2">&lt;paramref name="second" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Determines whether a sequence contains a specified element.</source>
          <target state="translated">Determina se una sequenza contiene un elemento specifico.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A sequence in which to locate a value.</source>
          <target state="translated">Sequenza in cui individuare un valore.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to locate in the sequence.</source>
          <target state="translated">Valore da individuare nella sequenza .</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Determines whether a sequence contains a specified element by using the default equality comparer.</source>
          <target state="translated">Determina se una sequenza contiene uno specifico elemento utilizzando l'operatore di confronto uguaglianze predefinito.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains an element that has the specified value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se la sequenza di origine contiene un elemento con il valore specificato; altrimenti, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, the <ph id="ph3">`Contains`</ph> method in that implementation is invoked to obtain the result.</source>
          <target state="translated">Se il tipo di <ph id="ph1">`source`</ph> implementa <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, <ph id="ph3">`Contains`</ph> nell'implementazione di tale metodo viene richiamato per ottenere il risultato.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Otherwise, this method determines whether <ph id="ph1">`source`</ph> contains the specified element.</source>
          <target state="translated">In caso contrario, questo metodo determina se <ph id="ph1">`source`</ph> contiene l'elemento specificato.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Enumeration is terminated as soon as a matching element is found.</source>
          <target state="translated">Enumerazione è terminata, non appena viene trovato un elemento corrispondente.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Elements are compared to the specified value by using the default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Gli elementi vengono confrontati con il valore specificato tramite l'operatore di uguaglianza predefinito, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to determine whether an array contains a specific element.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> per determinare se una matrice contiene un elemento specifico.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence in which to locate a value.</source>
          <target state="translated">Sequenza in cui individuare un valore.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The value to locate in the sequence.</source>
          <target state="translated">Valore da individuare nella sequenza .</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>An equality comparer to compare values.</source>
          <target state="translated">Operatore di confronto uguaglianze per confrontare valori.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>Determines whether a sequence contains a specified element by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">Determina se una sequenza contiene un elemento specificato utilizzando un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the source sequence contains an element that has the specified value; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se la sequenza di origine contiene un elemento con il valore specificato; altrimenti, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>Enumeration is terminated as soon as a matching element is found.</source>
          <target state="translated">Enumerazione è terminata, non appena viene trovato un elemento corrispondente.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare elements to the specified value.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per confrontare gli elementi al valore specificato.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come implementare un confronto di uguaglianza che può essere usato nel <ph id="ph1">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use a sequence of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Dopo aver implementato questo operatore di confronto, è possibile utilizzare una sequenza di <ph id="ph1">`Product`</ph> gli oggetti di <ph id="ph2">&lt;xref:System.Linq.Enumerable.Contains%2A&gt;</ph> (metodo), come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the number of elements in a sequence.</source>
          <target state="translated">Restituisce il numero di elementi in una sequenza.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains elements to be counted.</source>
          <target state="translated">Sequenza che contiene gli elementi da contare.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the number of elements in a sequence.</source>
          <target state="translated">Restituisce il numero di elementi in una sequenza.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements in the input sequence.</source>
          <target state="translated">Numero di elementi nella sequenza di input.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, that implementation is used to obtain the count of elements.</source>
          <target state="translated">Se il tipo di <ph id="ph1">`source`</ph> implementa <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, tale implementazione viene utilizzata per ottenere il numero di elementi.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, this method determines the count.</source>
          <target state="translated">In caso contrario, questo metodo determina il numero.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> method when you expect and want to allow the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> metodo quando si prevede e si desidera consentire che il risultato è maggiore <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Count()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Count()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to count the elements in an array.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per contare gli elementi in una matrice.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> is larger than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Il numero di elementi in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> è maggiore di <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A sequence that contains elements to be tested and counted.</source>
          <target state="translated">Sequenza che contiene gli elementi da sottoporre a test e contare.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Funzione per testare ogni elemento rispetto a una condizione.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns a number that represents how many elements in the specified sequence satisfy a condition.</source>
          <target state="translated">Restituisce un valore che rappresenta il numero di elementi nella sequenza specificata che soddisfano una condizione.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</source>
          <target state="translated">Numero che rappresenta quanti elementi nella sequenza specificata soddisfano la condizione nella funzione predicato.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, that implementation is used to obtain the count of elements.</source>
          <target state="translated">Se il tipo di <ph id="ph1">`source`</ph> implementa <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>, tale implementazione viene utilizzata per ottenere il numero di elementi.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Otherwise, this method determines the count.</source>
          <target state="translated">In caso contrario, questo metodo determina il numero.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>You should use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> method when you expect and want to allow the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">È consigliabile utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph> metodo quando si prevede e si desidera consentire che il risultato è maggiore <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Count()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Count()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to count the elements in an array that satisfy a condition.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> per conteggiare gli elementi in una matrice che soddisfa una condizione.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> is larger than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Il numero di elementi in <ph id="ph1">&lt;paramref name="source" /&gt;</ph> è maggiore di <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the elements of an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, or a default valued singleton collection if the sequence is empty.</source>
          <target state="translated">Restituisce gli elementi di un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> o una raccolta di singleton di valore predefinito se la sequenza è vuota.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to return a default value for if it is empty.</source>
          <target state="translated">Sequenza per cui restituire un valore predefinito se è vuota.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</source>
          <target state="translated">Restituisce gli elementi della sequenza specificata o il valore predefinito del parametro di tipo in una raccolta di singleton se la sequenza è vuota.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> object that contains the default value for the <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> type if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene il valore predefinito per il tipo <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> se <ph id="ph3">&lt;paramref name="source" /&gt;</ph> è vuoto; in caso contrario, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il valore predefinito per i tipi che ammettono valori null e di riferimento è <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method can be used to produce a left outer join when it is combined with the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) method.</source>
          <target state="translated">Questo metodo può essere utilizzato per produrre un left outer join, quando viene combinato con il <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) metodo.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code examples demonstrate how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to provide a default value in case the source sequence is empty.</source>
          <target state="translated">Gli esempi di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per fornire un valore predefinito nel caso in cui la sequenza di origine è vuota.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This example uses a non-empty sequence.</source>
          <target state="translated">In questo esempio utilizza una sequenza non vuota.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This example uses an empty sequence.</source>
          <target state="translated">Nell'esempio viene utilizzata una sequenza vuota.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The sequence to return the specified value for if it is empty.</source>
          <target state="translated">Sequenza per cui restituire il valore specificato se è vuota.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to return if the sequence is empty.</source>
          <target state="translated">Valore da restituire se la sequenza è vuota.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</source>
          <target state="translated">Restituisce gli elementi della sequenza specificata o il valore specificato in una raccolta di singleton se la sequenza è vuota.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene <ph id="ph2">&lt;paramref name="defaultValue" /&gt;</ph> se <ph id="ph3">&lt;paramref name="source" /&gt;</ph> è vuota; in caso contrario, <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>This method can be used to produce a left outer join when it is combined with the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) method.</source>
          <target state="translated">Questo metodo può essere utilizzato per produrre un left outer join, quando viene combinato con il <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>) metodo.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method and specify a default value.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> (metodo) e specificare un valore predefinito.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The first sequence is not empty and the second sequence is empty.</source>
          <target state="translated">La prima sequenza non vuota e la seconda sequenza è vuota.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns distinct elements from a sequence.</source>
          <target state="translated">Restituisce elementi distinti da una sequenza.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Enumerable">
          <source>The result sequence is unordered.</source>
          <target state="translated">Non è ordinata la sequenza di risultati.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The sequence to remove duplicate elements from.</source>
          <target state="translated">Sequenza da cui rimuovere elementi duplicati.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns distinct elements from a sequence by using the default equality comparer to compare values.</source>
          <target state="translated">Restituisce elementi distinti da una sequenza utilizzando l'operatore di confronto uguaglianze predefinito per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains distinct elements from the source sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene elementi distinti dalla sequenza di origine.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method returns an unordered sequence that contains no duplicate values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> metodo restituisce una sequenza non ordinata che non contiene valori duplicati.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>It uses the default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, to compare values.</source>
          <target state="translated">Usa l'operatore di confronto predefinito, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Distinct`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Distinct`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> generic interface.</source>
          <target state="translated">Operatore di uguaglianza predefinito, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per confrontare i valori di tipi che implementano il <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> interfaccia generica.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Per confrontare un tipo di dati personalizzato, è necessario implementare questa interfaccia e fornire la propria <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> metodi per il tipo.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>For an example that uses <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> to define a custom comparer, see <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>.</source>
          <target state="translated">Per un esempio che utilizza <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> per definire un operatore di confronto personalizzato, vedere <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return distinct elements from a sequence of integers.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per restituire gli elementi distinti da una sequenza di numeri interi.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> generic interface in the class.</source>
          <target state="translated">Se si desidera restituire elementi distinti da sequenze di oggetti di un tipo di dati personalizzato, è necessario implementare la <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interfaccia generica della classe.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come implementare questa interfaccia in un tipo di dati personalizzati e fornire <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> metodi.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use a sequence of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Dopo aver implementato questa interfaccia, è possibile utilizzare una sequenza di <ph id="ph1">`Product`</ph> gli oggetti di <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> (metodo), come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The sequence to remove duplicate elements from.</source>
          <target state="translated">Sequenza da cui rimuovere elementi duplicati.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Returns distinct elements from a sequence by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Restituisce elementi distinti da una sequenza utilizzando uno specificato <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per confrontare valori.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains distinct elements from the source sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene elementi distinti dalla sequenza di origine.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method returns an unordered sequence that contains no duplicate values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> metodo restituisce una sequenza non ordinata che non contiene valori duplicati.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">Se c<ph id="ph1">`omparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per confrontare valori.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come implementare un confronto di uguaglianza che può essere usato nel <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use a sequence of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Dopo aver implementato questo operatore di confronto, è possibile utilizzare una sequenza di <ph id="ph1">`Product`</ph> gli oggetti di <ph id="ph2">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> (metodo), come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dal quale restituire un elemento.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The zero-based index of the element to retrieve.</source>
          <target state="translated">Indice in base zero dell'elemento da recuperare.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Returns the element at a specified index in a sequence.</source>
          <target state="translated">Restituisce l'elemento in corrispondenza dell’indice specificato in una sequenza.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The element at the specified position in the source sequence.</source>
          <target state="translated">L'elemento alla posizione specificata nella sequenza di origine.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, that implementation is used to obtain the element at the specified index.</source>
          <target state="translated">Se il tipo di <ph id="ph1">`source`</ph> implementa <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, tale implementazione viene utilizzata per ottenere l'elemento in corrispondenza dell'indice specificato.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Otherwise, this method obtains the specified element.</source>
          <target state="translated">In caso contrario, questo metodo ottiene l'elemento specificato.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This method throws an exception if <ph id="ph1">`index`</ph> is out of range.</source>
          <target state="translated">Questo metodo genera un'eccezione se <ph id="ph1">`index`</ph> non compreso nell'intervallo.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>To instead return a default value when the specified index is out of range, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Per restituire un valore predefinito invece quando l'indice specificato è compreso nell'intervallo, utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAt%2A&gt;</ph> to return an element at a specific position.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAt%2A&gt;</ph> per restituire un elemento in una posizione specifica.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0 or greater than or equal to the number of elements in <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> è minore di 0 oppure maggiore o uguale al numero di elementi di <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dal quale restituire un elemento.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The zero-based index of the element to retrieve.</source>
          <target state="translated">Indice in base zero dell'elemento da recuperare.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Returns the element at a specified index in a sequence or a default value if the index is out of range.</source>
          <target state="translated">Restituisce l'elemento in corrispondenza di un indice specificato in una sequenza o un valore predefinito se l'indice è esterno all'intervallo.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) se l'indice è esterno ai limiti della sequenza di origine; in caso contrario, l'elemento alla posizione specificata nella sequenza di origine.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If the type of <ph id="ph1">`source`</ph> implements <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, that implementation is used to obtain the element at the specified index.</source>
          <target state="translated">Se il tipo di <ph id="ph1">`source`</ph> implementa <ph id="ph2">&lt;xref:System.Collections.Generic.IList%601&gt;</ph>, tale implementazione viene utilizzata per ottenere l'elemento in corrispondenza dell'indice specificato.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Otherwise, this method obtains the specified element.</source>
          <target state="translated">In caso contrario, questo metodo ottiene l'elemento specificato.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il valore predefinito per i tipi che ammettono valori null e di riferimento è <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph>.</source>
          <target state="translated">Nell'esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.ElementAtOrDefault%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This example uses an index that is outside the bounds of the array.</source>
          <target state="translated">Questo esempio viene utilizzato un indice che non rientra nei limiti della matrice.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The type to assign to the type parameter of the returned generic <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Il tipo da assegnare al parametro di tipo del generico oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> restituito.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Empty``1">
          <source>Returns an empty <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that has the specified type argument.</source>
          <target state="translated">Restituisce un oggetto vuoto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che ha l'argomento di tipo specificato.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Empty``1">
          <source>An empty <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose type argument is <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">Oggetto vuoto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> il cui argomento di tipo è <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> method caches an empty sequence of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> metodo memorizza nella cache di una sequenza vuota di tipo <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>When the object it returns is enumerated, it yields no elements.</source>
          <target state="translated">Quando l'oggetto restituito viene enumerata, viene non generato alcun elemento.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">In alcuni casi, questo metodo è utile per passare una sequenza vuota a un metodo definito dall'utente che accetta un <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>It can also be used to generate a neutral element for methods such as <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>.</source>
          <target state="translated">E può essere utilizzato per generare un elemento neutro per metodi, ad esempio <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>See the Example section for an example of this use of <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph>.</source>
          <target state="translated">Vedere la sezione di esempio per un esempio di questo utilizzo di <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> to generate an empty <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> per generare un oggetto vuoto <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The following code example demonstrates a possible application of the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> method.</source>
          <target state="translated">Esempio di codice seguente viene illustrato un possibile il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%60%601&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> method is applied to a collection of string arrays.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> metodo viene applicato a una raccolta di matrici di stringhe.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source>The elements of each array in the collection are added to the resulting <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> only if that array contains four or more elements.</source>
          <target state="translated">Gli elementi di ogni matrice nella raccolta vengono aggiunti all'oggetto risultante <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> solo se la matrice contiene quattro o più elementi.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Empty``1">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%2A&gt;</ph> is used to generate the seed value for <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> because if no array in the collection has four or more elements, only the empty sequence is returned.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Empty%2A&gt;</ph> viene utilizzato per generare il valore di inizializzazione per <ph id="ph2">&lt;xref:System.Linq.Enumerable.Aggregate%2A&gt;</ph> perché se nessuna matrice nella raccolta dispone di quattro o più elementi, viene restituita solo la sequenza vuota.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Produces the set difference of two sequences.</source>
          <target state="translated">Produce la differenza insiemistica di due sequenze.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Tipo degli elementi delle sequenze di input.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> di cui vengono restituiti gli elementi non presenti anche in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi, se presenti anche nella prima sequenza, saranno rimossi dalla sequenza restituita.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set difference of two sequences by using the default equality comparer to compare values.</source>
          <target state="translated">Produce la differenza insiemistica di due sequenze utilizzando l'operatore di confronto eguaglianze predefinito per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains the set difference of the elements of two sequences.</source>
          <target state="translated">Sequenza che contiene la differenza insiemistica degli elementi delle due sequenze.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The set difference of two sets is defined as the members of the first set that do not appear in the second set.</source>
          <target state="translated">La differenza insiemistica di due set è definita come i membri del primo set che non vengono visualizzati nel secondo set.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method returns those elements in <ph id="ph1">`first`</ph> that do not appear in <ph id="ph2">`second`</ph>.</source>
          <target state="translated">Questo metodo restituisce gli elementi in <ph id="ph1">`first`</ph> che non vengono visualizzati <ph id="ph2">`second`</ph>.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>It does not also return those elements in <ph id="ph1">`second`</ph> that do not appear in <ph id="ph2">`first`</ph>.</source>
          <target state="translated">Non viene restituito anche gli elementi in <ph id="ph1">`second`</ph> che non vengono visualizzati <ph id="ph2">`first`</ph>.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">Operatore di uguaglianza predefinito, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per confrontare i valori di tipi che implementano il <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interfaccia generica.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Per confrontare un tipo di dati personalizzato, è necessario implementare questa interfaccia e fornire la propria <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> metodi per il tipo.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method to compare two sequences of numbers and return elements that appear only in the first sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per confrontare due sequenze di numeri e restituire gli elementi che vengono visualizzati solo nella prima sequenza.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare sequences of objects of some custom data type, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in a helperclass.</source>
          <target state="translated">Se si desidera confrontare sequenze di oggetti di un tipo di dati personalizzati, è necessario implementare la <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interfaccia generica in un helperclass.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come implementare questa interfaccia in un tipo di dati personalizzati e fornire <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> metodi.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Dopo aver implementato questa interfaccia, è possibile utilizzare le sequenze di <ph id="ph1">`ProductA`</ph> gli oggetti di <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> (metodo), come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> o <ph id="ph2">&lt;paramref name="second" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Tipo degli elementi delle sequenze di input.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that are not also in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> di cui vengono restituiti gli elementi non presenti anche in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi, se presenti anche nella prima sequenza, saranno rimossi dalla sequenza restituita.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set difference of two sequences by using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Produce la differenza insiemistica delle due sequenze utilizzando l’oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> specificato per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence that contains the set difference of the elements of two sequences.</source>
          <target state="translated">Sequenza che contiene la differenza insiemistica degli elementi delle due sequenze.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">Se c<ph id="ph1">`omparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per confrontare valori.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come implementare un confronto di uguaglianza che può essere usato nel <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Dopo aver implementato questo operatore di confronto, è possibile utilizzare le sequenze di <ph id="ph1">`Product`</ph> gli oggetti di <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> (metodo), come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> o <ph id="ph2">&lt;paramref name="second" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the first element of a sequence.</source>
          <target state="translated">Restituisce il primo elemento di una sequenza.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the first element of.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> di cui restituire il primo elemento.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the first element of a sequence.</source>
          <target state="translated">Restituisce il primo elemento di una sequenza.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first element in the specified sequence.</source>
          <target state="translated">Il primo elemento nella sequenza specificata.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> metodo genera un'eccezione se <ph id="ph2">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To instead return a default value when the source sequence is empty, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Per restituire invece un valore predefinito quando la sequenza di origine è vuota, utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the first element of an array.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per restituire il primo elemento della matrice.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The source sequence is empty.</source>
          <target state="translated">La sequenza di origine è vuota.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dal quale restituire un elemento.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Funzione per testare ogni elemento rispetto a una condizione.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the first element in a sequence that satisfies a specified condition.</source>
          <target state="translated">Restituisce il primo elemento in una sequenza che soddisfa una condizione specificata.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The first element in the sequence that passes the test in the specified predicate function.</source>
          <target state="translated">Il primo elemento nella sequenza che supera il test nella funzione predicato specificata.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if no matching element is found in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> metodo genera un'eccezione se non viene trovato alcun elemento corrispondente <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>To instead return a default value when no matching element is found, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Per restituire invece un valore predefinito quando non viene trovato alcun elemento corrispondente, utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to return the first element of an array that satisfies a condition.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> per restituire il primo elemento della matrice che soddisfa una condizione.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Nessun elemento soddisfa la condizione in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The source sequence is empty.</source>
          <target state="translated">La sequenza di origine è vuota.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the first element of a sequence, or a default value if no element is found.</source>
          <target state="translated">Restituisce il primo elemento di una sequenza o un valore predefinito se non viene trovato alcun elemento.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the first element of.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> di cui restituire il primo elemento.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the first element of a sequence, or a default value if the sequence contains no elements.</source>
          <target state="translated">Restituisce il primo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty; otherwise, the first element in <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) se <ph id="ph3">&lt;paramref name="source" /&gt;</ph> è vuota; in caso contrario, il primo elemento di <ph id="ph4">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il valore predefinito per i tipi che ammettono valori null e di riferimento è <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> metodo non fornisce un modo per specificare un valore predefinito.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Se si desidera specificare un valore predefinito diverso da <ph id="ph1">`default(TSource)`</ph>, utilizzare il <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> (metodo), come descritto nella sezione esempio.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> on an empty array.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> su una matrice vuota.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">In alcuni casi il valore di <ph id="ph1">`default(TSource)`</ph> non è il valore predefinito che si desidera utilizzare se la raccolta non contiene elementi.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Anziché verificare il risultato per il valore predefinito non desiderato e quindi modificarlo se necessario, è possibile utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> per specificare il valore predefinito che si desidera utilizzare se la raccolta è vuota.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the first element.</source>
          <target state="translated">Chiamare quindi <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per ottenere il primo elemento.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</source>
          <target state="translated">Esempio di codice seguente usa entrambe le tecniche per ottenere un valore predefinito di 1, se una raccolta di mesi numerici è vuota.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</source>
          <target state="translated">Poiché il valore predefinito per un numero intero è 0, che non corrisponde a un mese, il valore predefinito deve specificato come 1.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query has finished executing.</source>
          <target state="translated">La prima variabile di risultato viene verificata per il valore predefinito non desiderato dopo la query ha terminato l'esecuzione.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The second result variable is obtained by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">La seconda variabile del risultato viene ottenuta tramite <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> per specificare un valore predefinito di 1.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dal quale restituire un elemento.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Funzione per testare ogni elemento rispetto a una condizione.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</source>
          <target state="translated">Restituisce il primo elemento della sequenza che soddisfa una condizione specificata o un valore predefinito se tale elemento non viene trovato.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if <ph id="ph3">&lt;paramref name="source" /&gt;</ph> is empty or if no element passes the test specified by <ph id="ph4">&lt;paramref name="predicate" /&gt;</ph>; otherwise, the first element in <ph id="ph5">&lt;paramref name="source" /&gt;</ph> that passes the test specified by <ph id="ph6">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) se <ph id="ph3">&lt;paramref name="source" /&gt;</ph> è vuota o se nessun elemento supera il test specificato da <ph id="ph4">&lt;paramref name="predicate" /&gt;</ph>; in caso contrario, il primo elemento in <ph id="ph5">&lt;paramref name="source" /&gt;</ph> che supera il test specificato da <ph id="ph6">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il valore predefinito per i tipi che ammettono valori null e di riferimento è <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> by passing in a predicate.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> passando un predicato.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In the second call to the method, there is no element in the array that satisfies the condition.</source>
          <target state="translated">Nella seconda chiamata al metodo, non è disponibile alcun elemento nella matrice che soddisfa la condizione.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Groups the elements of a sequence.</source>
          <target state="translated">Raggruppa gli elementi di una sequenza.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono da raggruppare.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Funzione per estrarre la chiave per ogni elemento.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Groups the elements of a sequence according to a specified key selector function.</source>
          <target state="translated">Raggruppa gli elementi di una sequenza secondo una specificata funzione del selettore principale.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a sequence of objects and a key.</source>
          <target state="translated">Elemento <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> in cui ogni oggetto <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contiene una sequenza di oggetti e una chiave.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
          <target state="translated">Per esempi di <ph id="ph1">`GroupBy`</ph>, vedere gli argomenti seguenti.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> il metodo restituisce una raccolta di <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> oggetti, uno per ogni chiave diversa è stata rilevata.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> è un <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> che ha una chiave associata agli elementi.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> gli oggetti vengono restituiti nell'ordine in base all'ordine gli elementi in <ph id="ph2">`source`</ph> che produce la prima chiave di ogni <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Elements in a grouping are yielded in the order they appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Gli elementi in un raggruppamento vengono restituiti nell'ordine in cui appaiono <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Operatore di uguaglianza predefinito <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, una <ph id="ph1">`group by`</ph> (Visual c#) o <ph id="ph2">`Group By Into`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clausola viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di utilizzo, vedere <bpt id="p1">[</bpt>clausola group<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> e <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono da raggruppare.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Funzione per estrarre la chiave per ogni elemento.</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</source>
          <target state="translated">Raggruppa gli elementi di una sequenza secondo una specificata funzione del selettore principale e confronta le chiavi utilizzando un operatore di confronto specificato.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a collection of objects and a key.</source>
          <target state="translated">Un elemento <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TSource<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TSource))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> in cui ogni oggetto <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contiene una raccolta di oggetti e una chiave.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
          <target state="translated">Per esempi di <ph id="ph1">`GroupBy`</ph>, vedere gli argomenti seguenti.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> il metodo restituisce una raccolta di <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> oggetti, uno per ogni chiave diversa è stata rilevata.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> è un <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> che ha una chiave associata agli elementi.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> gli oggetti vengono restituiti nell'ordine in base all'ordine gli elementi in <ph id="ph2">`source`</ph> che produce la prima chiave di ogni <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Elements in a grouping are yielded in the order they appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Gli elementi in un raggruppamento vengono restituiti nell'ordine in cui appaiono <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If two keys are considered equal according to <ph id="ph1">`comparer`</ph>, the first key is chosen as the key for that grouping.</source>
          <target state="translated">Se due chiavi sono considerate uguali in base al <ph id="ph1">`comparer`</ph>, la prima chiave viene scelto come chiave per il raggruppamento.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, una <ph id="ph1">`group by`</ph> (Visual c#) o <ph id="ph2">`Group By Into`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clausola viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di utilizzo, vedere <bpt id="p1">[</bpt>clausola group<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> e <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements in the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Tipo degli elementi contenuti nell'oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono da raggruppare.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Funzione per estrarre la chiave per ogni elemento.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to map each source element to an element in the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Funzione per eseguire il mapping di ogni elemento di origine a un elemento nell’oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</source>
          <target state="translated">Raggruppa gli elementi di una sequenza in base a una funzione specificata del selettore principale e proietta gli elementi di ogni gruppo utilizzando una funzione specificata.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a collection of objects of type <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> and a key.</source>
          <target state="translated">Un elemento <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> in cui ogni oggetto <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contiene una raccolta di oggetti di tipo <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> e una chiave.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> il metodo restituisce una raccolta di <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> oggetti, uno per ogni chiave diversa è stata rilevata.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> è un <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> che ha una chiave associata agli elementi.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> gli oggetti vengono restituiti nell'ordine in base all'ordine gli elementi in <ph id="ph2">`source`</ph> che produce la prima chiave di ogni <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Elements in a grouping are yielded in the order that the elements that produced them appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Gli elementi in un raggruppamento vengono restituiti nell'ordine in cui gli elementi che li ha prodotti visualizzati <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Operatore di uguaglianza predefinito <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> to group the elements of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> per raggruppare gli elementi di una sequenza.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, una <ph id="ph1">`group by`</ph> (Visual c#) o <ph id="ph2">`Group By Into`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clausola viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The translation of the query expression in the following example is equivalent to the query in the example above.</source>
          <target state="translated">La conversione dell'espressione di query nell'esempio seguente è equivalente alla query nell'esempio precedente.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>In a Visual C# or <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the <ph id="ph2">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method.</source>
          <target state="translated">In Visual c# o <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> espressione di query, l'elemento e le espressioni di selezione della chiave si verificano nell'ordine inverso rispetto alle posizioni di argomento in una chiamata al <ph id="ph2">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="source" /&gt;</ph>, il parametro <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> o il parametro <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> è <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements in the <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Tipo degli elementi contenuti nell'oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono da raggruppare.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Funzione per estrarre la chiave per ogni elemento.</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a key selector function.</source>
          <target state="translated">Raggruppa gli elementi di una sequenza secondo una specificata funzione del selettore principale.</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The keys are compared by using a comparer and each group's elements are projected by using a specified function.</source>
          <target state="translated">Le chiavi vengono confrontate usando un operatore di confronto e gli elementi di ogni gruppo vengono proiettati usando una funzione specificata.</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> where each <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> object contains a collection of objects of type <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> and a key.</source>
          <target state="translated">Un elemento <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>IGrouping<ph id="ph2">&amp;lt;</ph>TKey, TElement<ph id="ph3">&amp;gt;</ph><ph id="ph4">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of IGrouping(Of TKey, TElement))<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> in cui ogni oggetto <ph id="ph6">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph> contiene una raccolta di oggetti di tipo <ph id="ph7">&lt;paramref name="TElement" /&gt;</ph> e una chiave.</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For examples of <ph id="ph1">`GroupBy`</ph>, see the following topics.</source>
          <target state="translated">Per esempi di <ph id="ph1">`GroupBy`</ph>, vedere gli argomenti seguenti.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a collection of <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects, one for each distinct key that was encountered.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> il metodo restituisce una raccolta di <ph id="ph2">&lt;xref:System.Linq.IGrouping%602&gt;</ph> oggetti, uno per ogni chiave diversa è stata rilevata.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> is an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> that also has a key associated with its elements.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> è un <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> che ha una chiave associata agli elementi.</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> objects are yielded in an order based on the order of the elements in <ph id="ph2">`source`</ph> that produced the first key of each <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> gli oggetti vengono restituiti nell'ordine in base all'ordine gli elementi in <ph id="ph2">`source`</ph> che produce la prima chiave di ogni <ph id="ph3">&lt;xref:System.Linq.IGrouping%602&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Elements in a grouping are yielded in the order that the elements that produced them appear in <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Gli elementi in un raggruppamento vengono restituiti nell'ordine in cui gli elementi che li ha prodotti visualizzati <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If two keys are considered equal according to <ph id="ph1">`comparer`</ph>, the first key is chosen as the key for that grouping.</source>
          <target state="translated">Se due chiavi sono considerate uguali in base al <ph id="ph1">`comparer`</ph>, la prima chiave viene scelto come chiave per il raggruppamento.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, una <ph id="ph1">`group by`</ph> (Visual c#) o <ph id="ph2">`Group By Into`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clausola viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>For more information and usage examples, see <bpt id="p1">[</bpt>group clause<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> and <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni ed esempi di utilizzo, vedere <bpt id="p1">[</bpt>clausola group<ept id="p1">](~/docs/csharp/language-reference/keywords/group-clause.md)</ept> e <bpt id="p2">[</bpt>Group By Clause<ept id="p2">](~/docs/visual-basic/language-reference/queries/group-by-clause.md)</ept>.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="source" /&gt;</ph>, il parametro <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> o il parametro <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> è <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di valore restituito da <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono da raggruppare.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Funzione per estrarre la chiave per ogni elemento.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Funzione per creare un valore di risultato da ogni gruppo.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated">Raccolta di elementi di tipo <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> dove ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, una <ph id="ph1">`group by`</ph> (Visual c#) o <ph id="ph2">`Group By Into`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clausola viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29&gt;</ph> to group the elements of a sequence and project a sequence of results of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29&gt;</ph> per raggruppare gli elementi di una sequenza e una sequenza di risultati di tipo di progetto <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di valore restituito da <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono da raggruppare.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Funzione per estrarre la chiave per ogni elemento.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Funzione per creare un valore di risultato da ogni gruppo.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys with.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> con cui confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The keys are compared by using a specified comparer.</source>
          <target state="translated">Le chiavi vengono confrontati usando un operatore di confronto specificato.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated">Raccolta di elementi di tipo <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> dove ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Tipo degli elementi contenuti in ciascun oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di valore restituito da <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono da raggruppare.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Funzione per estrarre la chiave per ogni elemento.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Funzione per creare un valore di risultato da ogni gruppo.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The elements of each group are projected by using a specified function.</source>
          <target state="translated">Gli elementi di ogni gruppo vengono proiettati usando una funzione specificata.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated">Raccolta di elementi di tipo <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> dove ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>In query expression syntax, a <ph id="ph1">`group by`</ph> (Visual C#) or <ph id="ph2">`Group By Into`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, una <ph id="ph1">`group by`</ph> (Visual c#) o <ph id="ph2">`Group By Into`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clausola viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29&gt;</ph> to group the projected elements of a sequence and then project a sequence of results of type <ph id="ph2">`TResult`</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29&gt;</ph> per raggruppare gli elementi di una sequenza previsti e quindi proiettare una sequenza di risultati di tipo <ph id="ph2">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements in each <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Tipo degli elementi contenuti in ciascun oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the result value returned by <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di valore restituito da <bpt id="p1">&lt;c&gt;</bpt>resultSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements to group.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono da raggruppare.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract the key for each element.</source>
          <target state="translated">Funzione per estrarre la chiave per ogni elemento.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to map each source element to an element in an <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</source>
          <target state="translated">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IGrouping`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to create a result value from each group.</source>
          <target state="translated">Funzione per creare un valore di risultato da ogni gruppo.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys with.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> con cui confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</source>
          <target state="translated">Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</source>
          <target state="translated">I valori delle chiavi vengono confrontati usando un operatore di confronto specificato e gli elementi di ogni gruppo vengono proiettati usando una funzione specificata.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A collection of elements of type <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> where each element represents a projection over a group and its key.</source>
          <target state="translated">Raccolta di elementi di tipo <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> dove ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Correlates the elements of two sequences based on key equality, and groups the results.</source>
          <target state="translated">Correla gli elementi di due sequenze in base all'uguaglianza delle chiavi e raggruppa i risultati.</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Tipo degli elementi della prima sequenza.</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Tipo degli elementi della seconda sequenza.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Tipo delle chiavi restituite dalle funzioni del selettore principale.</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The type of the result elements.</source>
          <target state="translated">Tipo degli elementi di risultato.</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The first sequence to join.</source>
          <target state="translated">Prima sequenza da unire.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Sequenza da unire alla prima sequenza.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
          <target state="translated">Funzione per creare un elemento di risultato da un elemento dalla prima sequenza e una raccolta di elementi corrispondenti dalla seconda sequenza.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>Correlates the elements of two sequences based on equality of keys and groups the results.</source>
          <target state="translated">Correla gli elementi di due sequenze in base all'uguaglianza delle chiavi e raggruppa i risultati.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The default equality comparer is used to compare keys.</source>
          <target state="translated">Per confrontare le chiavi viene usato l'operatore di confronto uguaglianze predefinito.</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing a grouped join on two sequences.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene elementi di tipo <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> ottenuti eseguendo un'aggiunta raggruppata delle due sequenze.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">Operatore di uguaglianza predefinito, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per l'hash e il confronto delle chiavi.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produces hierarchical results, which means that elements from <ph id="ph2">`outer`</ph> are paired with collections of matching elements from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produce risultati gerarchici, il che significa che gli elementi da <ph id="ph2">`outer`</ph> vengono associati a raccolte di elementi corrispondenti dalla <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">`GroupJoin`</ph> enables you to base your results on a whole set of matches for each element of <ph id="ph2">`outer`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> Consente di ottenere risultati di base di un intero set di corrispondenze per ogni elemento di <ph id="ph2">`outer`</ph>.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>If there are no correlated elements in <ph id="ph1">`inner`</ph> for a given element of <ph id="ph2">`outer`</ph>, the sequence of matches for that element will be empty but will still appear in the results.</source>
          <target state="translated">Se non sono presenti elementi correlati in <ph id="ph1">`inner`</ph> per un determinato elemento di <ph id="ph2">`outer`</ph>, la sequenza di corrispondenze per l'elemento sarà vuota, ma lasciando comunque visualizzato nei risultati.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The <ph id="ph1">`resultSelector`</ph> function is called only one time for each <ph id="ph2">`outer`</ph> element together with a collection of all the <ph id="ph3">`inner`</ph> elements that match the <ph id="ph4">`outer`</ph> element.</source>
          <target state="translated">Il <ph id="ph1">`resultSelector`</ph> funzione viene chiamata solo una volta per ogni <ph id="ph2">`outer`</ph> elemento insieme a una raccolta di tutti i <ph id="ph3">`inner`</ph> gli elementi che soddisfano il <ph id="ph4">`outer`</ph> elemento.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>This differs from the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method, in which the result selector function is invoked on pairs that contain one element from <ph id="ph2">`outer`</ph> and one element from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated">Questo comportamento è diverso dal <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> (metodo), in cui viene richiamata la funzione del selettore di risultato su coppie che contengono un elemento da <ph id="ph2">`outer`</ph> e un elemento da <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">`GroupJoin`</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each element of <ph id="ph3">`outer`</ph>, the order of the matching elements from <ph id="ph4">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> mantiene l'ordine degli elementi di <ph id="ph2">`outer`</ph>e per ogni elemento di <ph id="ph3">`outer`</ph>, l'ordine degli elementi corrispondenti di <ph id="ph4">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> has no direct equivalent in traditional relational database terms.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> non dispone di alcun equivalente diretto in termini di database relazionali tradizionali.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>However, this method does implement a superset of inner joins and left outer joins.</source>
          <target state="translated">Tuttavia, questo metodo implementano un superset di inner join e left outer join.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>Both of these operations can be written in terms of a grouped join.</source>
          <target state="translated">Entrambe queste operazioni possono essere scritti in termini di un join raggruppato.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">Vedere <bpt id="p1">[</bpt>operazioni di Join<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>In query expression syntax, a <ph id="ph1">`join … into`</ph> (Visual C#) or <ph id="ph2">`Group Join`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, una <ph id="ph1">`join … into`</ph> (Visual c#) o <ph id="ph2">`Group Join`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clausola viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29&gt;</ph> to perform a grouped join on two sequences.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29&gt;</ph> per eseguire un join raggruppato di due sequenze.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> o <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> o <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> o <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> o <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> è <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Tipo degli elementi della prima sequenza.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Tipo degli elementi della seconda sequenza.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Tipo delle chiavi restituite dalle funzioni del selettore principale.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the result elements.</source>
          <target state="translated">Tipo degli elementi di risultato.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The first sequence to join.</source>
          <target state="translated">Prima sequenza da unire.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Sequenza da unire alla prima sequenza.</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</source>
          <target state="translated">Funzione per creare un elemento di risultato da un elemento dalla prima sequenza e una raccolta di elementi corrispondenti dalla seconda sequenza.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to hash and compare keys.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per la codifica hash e il confronto delle chiavi.</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Correlates the elements of two sequences based on key equality and groups the results.</source>
          <target state="translated">Correla gli elementi di due sequenze in base all'uguaglianza delle chiavi e raggruppa i risultati.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> is used to compare keys.</source>
          <target state="translated">Per confrontare le chiavi, viene usato un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing a grouped join on two sequences.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene elementi di tipo <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> ottenuti eseguendo un'aggiunta raggruppata delle due sequenze.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per l'hash e il confronto delle chiavi.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produces hierarchical results, which means that elements from <ph id="ph2">`outer`</ph> are paired with collections of matching elements from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> produce risultati gerarchici, il che significa che gli elementi da <ph id="ph2">`outer`</ph> vengono associati a raccolte di elementi corrispondenti dalla <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">`GroupJoin`</ph> enables you to base your results on a whole set of matches for each element of <ph id="ph2">`outer`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> Consente di ottenere risultati di base di un intero set di corrispondenze per ogni elemento di <ph id="ph2">`outer`</ph>.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>If there are no correlated elements in <ph id="ph1">`inner`</ph> for a given element of <ph id="ph2">`outer`</ph>, the sequence of matches for that element will be empty but will still appear in the results.</source>
          <target state="translated">Se non sono presenti elementi correlati in <ph id="ph1">`inner`</ph> per un determinato elemento di <ph id="ph2">`outer`</ph>, la sequenza di corrispondenze per l'elemento sarà vuota, ma lasciando comunque visualizzato nei risultati.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The <ph id="ph1">`resultSelector`</ph> function is called only one time for each <ph id="ph2">`outer`</ph> element together with a collection of all the <ph id="ph3">`inner`</ph> elements that match the <ph id="ph4">`outer`</ph> element.</source>
          <target state="translated">Il <ph id="ph1">`resultSelector`</ph> funzione viene chiamata solo una volta per ogni <ph id="ph2">`outer`</ph> elemento insieme a una raccolta di tutti i <ph id="ph3">`inner`</ph> gli elementi che soddisfano il <ph id="ph4">`outer`</ph> elemento.</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This differs from the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method in which the result selector function is invoked on pairs that contain one element from <ph id="ph2">`outer`</ph> and one element from <ph id="ph3">`inner`</ph>.</source>
          <target state="translated">Questo comportamento è diverso dal <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> metodo in cui viene richiamata la funzione del selettore di risultato su coppie che contengono un elemento da <ph id="ph2">`outer`</ph> e un elemento da <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">`GroupJoin`</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each element of <ph id="ph3">`outer`</ph>, the order of the matching elements from <ph id="ph4">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">`GroupJoin`</ph> mantiene l'ordine degli elementi di <ph id="ph2">`outer`</ph>e per ogni elemento di <ph id="ph3">`outer`</ph>, l'ordine degli elementi corrispondenti di <ph id="ph4">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> has no direct equivalent in traditional relational database terms.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> non dispone di alcun equivalente diretto in termini di database relazionali tradizionali.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>However, this method does implement a superset of inner joins and left outer joins.</source>
          <target state="translated">Tuttavia, questo metodo implementano un superset di inner join e left outer join.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Both of these operations can be written in terms of a grouped join.</source>
          <target state="translated">Entrambe queste operazioni possono essere scritti in termini di un join raggruppato.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">Vedere <bpt id="p1">[</bpt>operazioni di Join<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> o <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> o <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> o <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> o <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> è <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Produces the set intersection of two sequences.</source>
          <target state="translated">Produce l'intersezione insiemistica delle due sequenze.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Tipo degli elementi delle sequenze di input.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> di cui vengono restituiti gli elementi distinti presenti anche in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in the first sequence will be returned.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> di cui verranno restituiti gli elementi distinti presenti anche nella prima sequenza.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set intersection of two sequences by using the default equality comparer to compare values.</source>
          <target state="translated">Produce l’intersezione insiemistica di due sequenze utilizzando l'operatore di confronto uguaglianze predefinito per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence that contains the elements that form the set intersection of two sequences.</source>
          <target state="translated">Sequenza che contiene gli elementi che formano l'intersezione insiemistica delle due sequenze.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</source>
          <target state="translated">L'intersezione di due set A e B viene definito come il set che contiene tutti gli elementi di A che vengono visualizzati anche in B, ma nessun altro elemento.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> yields distinct elements occurring in both sequences in the order in which they appear in <ph id="ph2">`first`</ph>.</source>
          <target state="translated">Quando l'oggetto restituito da questo metodo viene enumerato, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> restituisce elementi distinti che si verificano in entrambe le sequenze nell'ordine in cui vengono visualizzate in <ph id="ph2">`first`</ph>.</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">Operatore di uguaglianza predefinito, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per confrontare i valori di tipi che implementano il <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interfaccia generica.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Per confrontare un tipo di dati personalizzato, è necessario implementare questa interfaccia e fornire la propria <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> metodi per il tipo.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the elements that appear in each of two sequences of integers.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per restituire gli elementi visualizzati in ognuna delle due sequenze di numeri interi.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare sequences of objects of a custom data type, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in a helper class.</source>
          <target state="translated">Se si desidera confrontare sequenze di oggetti di un tipo di dati personalizzati, è necessario implementare la <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interfaccia generica in una classe helper.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come implementare questa interfaccia in un tipo di dati personalizzati e fornire <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> metodi.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Dopo aver implementato questa interfaccia, è possibile utilizzare le sequenze di <ph id="ph1">`ProductA`</ph> gli oggetti di <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> (metodo), come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> o <ph id="ph2">&lt;paramref name="second" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Tipo degli elementi delle sequenze di input.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept> will be returned.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> di cui vengono restituiti gli elementi distinti presenti anche in <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements that also appear in the first sequence will be returned.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> di cui verranno restituiti gli elementi distinti presenti anche nella prima sequenza.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set intersection of two sequences by using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Produce l’intersezione insiemistica delle due sequenze utilizzando l’oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> specificato per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A sequence that contains the elements that form the set intersection of two sequences.</source>
          <target state="translated">Sequenza che contiene gli elementi che formano l'intersezione insiemistica delle due sequenze.</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</source>
          <target state="translated">L'intersezione di due set A e B viene definito come il set che contiene tutti gli elementi di A che vengono visualizzati anche in B, ma nessun altro elemento.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> yields distinct elements occurring in both sequences in the order in which they appear in <ph id="ph2">`first`</ph>.</source>
          <target state="translated">Quando l'oggetto restituito da questo metodo viene enumerato, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> restituisce elementi distinti che si verificano in entrambe le sequenze nell'ordine in cui vengono visualizzate in <ph id="ph2">`first`</ph>.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per confrontare valori.</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come implementare un confronto di uguaglianza che può essere usato nel <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Dopo aver implementato questo operatore di confronto, è possibile utilizzare le sequenze di <ph id="ph1">`Product`</ph> gli oggetti di <ph id="ph2">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> (metodo), come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> o <ph id="ph2">&lt;paramref name="second" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Correla gli elementi di due sequenze in base alle chiavi corrispondenti.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Tipo degli elementi della prima sequenza.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Tipo degli elementi della seconda sequenza.</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Tipo delle chiavi restituite dalle funzioni del selettore principale.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The type of the result elements.</source>
          <target state="translated">Tipo degli elementi di risultato.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The first sequence to join.</source>
          <target state="translated">Prima sequenza da unire.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Sequenza da unire alla prima sequenza.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A function to create a result element from two matching elements.</source>
          <target state="translated">Funzione per creare un elemento di risultato da due elementi corrispondenti.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Correla gli elementi di due sequenze in base alle chiavi corrispondenti.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The default equality comparer is used to compare keys.</source>
          <target state="translated">Per confrontare le chiavi viene usato l'operatore di confronto uguaglianze predefinito.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that has elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing an inner join on two sequences.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene elementi di tipo <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> ottenuti eseguendo un inner join sulle due sequenze.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">Operatore di uguaglianza predefinito, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per l'hash e il confronto delle chiavi.</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A join refers to the operation of correlating the elements of two sources of information based on a common key.</source>
          <target state="translated">Un join fa riferimento all'operazione di correlare gli elementi di due origini di informazioni in base a una chiave comune.</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> brings the two information sources and the keys by which they are matched together in one method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> offre due origini di informazioni e le chiavi che in caso di corrispondenza insieme in una chiamata al metodo.</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>This differs from the use of <ph id="ph1">`SelectMany`</ph>, which requires more than one method call to perform the same operation.</source>
          <target state="translated">Questo comportamento è diverso dall'utilizzo di <ph id="ph1">`SelectMany`</ph>, che richiede più di una chiamata al metodo per eseguire la stessa operazione.</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each of these elements, the order of the matching elements of <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> mantiene l'ordine degli elementi di <ph id="ph2">`outer`</ph>e per ognuno di questi elementi, l'ordine degli elementi corrispondenti di <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>In query expression syntax, a <ph id="ph1">`join`</ph> (Visual C#) or <ph id="ph2">`Join`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, una <ph id="ph1">`join`</ph> (Visual c#) o <ph id="ph2">`Join`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clausola viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>In relational database terms, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method implements an inner equijoin.</source>
          <target state="translated">In termini di database relazionale di <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> metodo implementa un inner equijoin.</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>'Inner' means that only elements that have a match in the other sequence are included in the results.</source>
          <target state="translated">'Inner' indica che solo gli elementi che hanno una corrispondenza in altra sequenza sono inclusi nei risultati.</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>An 'equijoin' is a join in which the keys are compared for equality.</source>
          <target state="translated">Un ' equijoin' è un join in cui le chiavi vengono confrontati per verificarne l'uguaglianza.</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>A left outer join operation has no dedicated standard query operator, but can be performed by using the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method.</source>
          <target state="translated">Un'operazione di outer join sinistra non include alcun operatore di query standard dedicato, ma può essere eseguite tramite il <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">Vedere <bpt id="p1">[</bpt>operazioni di Join<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29&gt;</ph> to perform an inner join of two sequences based on a common key.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29&gt;</ph> per eseguire un inner join di due sequenze in base a una chiave comune.</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> o <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> o <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> o <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> o <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> è <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the first sequence.</source>
          <target state="translated">Tipo degli elementi della prima sequenza.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the elements of the second sequence.</source>
          <target state="translated">Tipo degli elementi della seconda sequenza.</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the keys returned by the key selector functions.</source>
          <target state="translated">Tipo delle chiavi restituite dalle funzioni del selettore principale.</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The type of the result elements.</source>
          <target state="translated">Tipo degli elementi di risultato.</target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The first sequence to join.</source>
          <target state="translated">Prima sequenza da unire.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The sequence to join to the first sequence.</source>
          <target state="translated">Sequenza da unire alla prima sequenza.</target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the first sequence.</source>
          <target state="translated">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to extract the join key from each element of the second sequence.</source>
          <target state="translated">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A function to create a result element from two matching elements.</source>
          <target state="translated">Funzione per creare un elemento di risultato da due elementi corrispondenti.</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to hash and compare keys.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per la codifica hash e il confronto delle chiavi.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>Correlates the elements of two sequences based on matching keys.</source>
          <target state="translated">Correla gli elementi di due sequenze in base alle chiavi corrispondenti.</target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> is used to compare keys.</source>
          <target state="translated">Per confrontare le chiavi, viene usato un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that has elements of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> that are obtained by performing an inner join on two sequences.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene elementi di tipo <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph> ottenuti eseguendo un inner join sulle due sequenze.</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to hash and compare keys.</source>
          <target state="translated">Se c<ph id="ph1">`omparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per l'hash e il confronto delle chiavi.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A join refers to the operation of correlating the elements of two sources of information based on a common key.</source>
          <target state="translated">Un join fa riferimento all'operazione di correlare gli elementi di due origini di informazioni in base a una chiave comune.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> brings the two information sources and the keys by which they are matched together in one method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> offre due origini di informazioni e le chiavi che in caso di corrispondenza insieme in una chiamata al metodo.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>This differs from the use of <ph id="ph1">`SelectMany`</ph>, which requires more than one method call to perform the same operation.</source>
          <target state="translated">Questo comportamento è diverso dall'utilizzo di <ph id="ph1">`SelectMany`</ph>, che richiede più di una chiamata al metodo per eseguire la stessa operazione.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> preserves the order of the elements of <ph id="ph2">`outer`</ph>, and for each of these elements, the order of the matching elements of <ph id="ph3">`inner`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> mantiene l'ordine degli elementi di <ph id="ph2">`outer`</ph>e per ognuno di questi elementi, l'ordine degli elementi corrispondenti di <ph id="ph3">`inner`</ph>.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>In relational database terms, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> method implements an inner equijoin.</source>
          <target state="translated">In termini di database relazionale di <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> metodo implementa un inner equijoin.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>'Inner' means that only elements that have a match in the other sequence are included in the results.</source>
          <target state="translated">'Inner' indica che solo gli elementi che hanno una corrispondenza in altra sequenza sono inclusi nei risultati.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>An 'equijoin' is a join in which the keys are compared for equality.</source>
          <target state="translated">Un ' equijoin' è un join in cui le chiavi vengono confrontati per verificarne l'uguaglianza.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>A left outer join operation has no dedicated standard query operator, but can be performed by using the <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> method.</source>
          <target state="translated">Un'operazione di outer join sinistra non include alcun operatore di query standard dedicato, ma può essere eseguite tramite il <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source>See <bpt id="p1">[</bpt>Join Operations<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</source>
          <target state="translated">Vedere <bpt id="p1">[</bpt>operazioni di Join<ept id="p1">](http://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107)</ept>.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
          <source><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> or <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> or <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> or <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> or <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="outer" /&gt;</ph> o <ph id="ph2">&lt;paramref name="inner" /&gt;</ph> o <ph id="ph3">&lt;paramref name="outerKeySelector" /&gt;</ph> o <ph id="ph4">&lt;paramref name="innerKeySelector" /&gt;</ph> o <ph id="ph5">&lt;paramref name="resultSelector" /&gt;</ph> è <ph id="ph6">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the last element of a sequence.</source>
          <target state="translated">Restituisce l'ultimo elemento di una sequenza.</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the last element of.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> di cui restituire l’ultimo elemento.</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the last element of a sequence.</source>
          <target state="translated">Restituisce l'ultimo elemento di una sequenza.</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The value at the last position in the source sequence.</source>
          <target state="translated">Il valore dell'ultima posizione nella sequenza di origine.</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> metodo genera un'eccezione se <ph id="ph2">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To instead return a default value when the source sequence is empty, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Per restituire invece un valore predefinito quando la sequenza di origine è vuota, utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to return the last element of an array.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per restituire l'ultimo elemento della matrice.</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The source sequence is empty.</source>
          <target state="translated">La sequenza di origine è vuota.</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dal quale restituire un elemento.</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Funzione per testare ogni elemento rispetto a una condizione.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the last element of a sequence that satisfies a specified condition.</source>
          <target state="translated">Restituisce l'ultimo elemento di una sequenza che soddisfa una condizione specificata.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The last element in the sequence that passes the test in the specified predicate function.</source>
          <target state="translated">Ultimo elemento nella sequenza che supera il test nella funzione predicato specificata.</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if no matching element is found in <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> metodo genera un'eccezione se non viene trovato alcun elemento corrispondente <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>To instead return a default value when no matching element is found, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method.</source>
          <target state="translated">Per restituire invece un valore predefinito quando non viene trovato alcun elemento corrispondente, utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to return the last element of an array that satisfies a condition.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> per restituire l'ultimo elemento che soddisfa una condizione della matrice.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Nessun elemento soddisfa la condizione in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The source sequence is empty.</source>
          <target state="translated">La sequenza di origine è vuota.</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the last element of a sequence, or a default value if no element is found.</source>
          <target state="translated">Restituisce l’ultimo elemento di una sequenza o un valore predefinito se non viene trovato alcun elemento.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the last element of.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> di cui restituire l’ultimo elemento.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the last element of a sequence, or a default value if the sequence contains no elements.</source>
          <target state="translated">Restituisce l'ultimo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the source sequence is empty; otherwise, the last element in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) se la sequenza di origine è vuota; in caso contrario, l'ultimo elemento in <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il valore predefinito per i tipi che ammettono valori null e di riferimento è <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A&gt;</ph> metodo non fornisce un modo per specificare un valore predefinito.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Se si desidera specificare un valore predefinito diverso da <ph id="ph1">`default(TSource)`</ph>, utilizzare il <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> (metodo), come descritto nella sezione esempio.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> on an empty array.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> su una matrice vuota.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">In alcuni casi il valore di <ph id="ph1">`default(TSource)`</ph> non è il valore predefinito che si desidera utilizzare se la raccolta non contiene elementi.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Anziché verificare il risultato per il valore predefinito non desiderato e quindi modificarlo se necessario, è possibile utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> per specificare il valore predefinito che si desidera utilizzare se la raccolta è vuota.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the last element.</source>
          <target state="translated">Chiamare quindi <ph id="ph1">&lt;xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per ottenere l'ultimo elemento.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</source>
          <target state="translated">Esempio di codice seguente usa entrambe le tecniche per ottenere un valore predefinito di 1, se una raccolta di numerici giorni del mese è vuota.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</source>
          <target state="translated">Poiché il valore predefinito per un numero intero è 0, che non corrisponde a qualsiasi giorno del mese, il valore predefinito deve specificato come 1.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query has finished executing.</source>
          <target state="translated">La prima variabile di risultato viene verificata per il valore predefinito non desiderato dopo la query ha terminato l'esecuzione.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The second result variable is obtained by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">La seconda variabile del risultato viene ottenuta tramite <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> per specificare un valore predefinito di 1.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return an element from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dal quale restituire un elemento.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Funzione per testare ogni elemento rispetto a una condizione.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</source>
          <target state="translated">Restituisce l'ultimo elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se tale elemento non viene trovato.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) se la sequenza è vuota o se nessun elemento supera il test nella funzione predicativa; in caso contrario, l'ultimo elemento che passa il test nella funzione predicativa.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il valore predefinito per i tipi che ammettono valori null e di riferimento è <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> by passing in a predicate.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> passando un predicato.</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In the second call to the method, there is no element in the sequence that satisfies the condition.</source>
          <target state="translated">Nella seconda chiamata al metodo, non è disponibile alcun elemento nella sequenza che soddisfa la condizione.</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the number of elements in a sequence.</source>
          <target state="translated">Restituisce un oggetto <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> che rappresenta il numero di elementi in una sequenza.</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene gli elementi da contare.</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents the total number of elements in a sequence.</source>
          <target state="translated">Restituisce un oggetto <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> che rappresenta il numero totale di elementi in una sequenza.</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements in the source sequence.</source>
          <target state="translated">Numero di elementi nella sequenza di origine.</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Use this method rather than <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> when you expect the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">Utilizzare questo metodo anziché <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> quando si prevede il risultato sia maggiore di <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into LongCount()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into LongCount()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to count the elements in an array.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per contare gli elementi in una matrice.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The number of elements exceeds <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Il numero di elementi è maggiore di <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements to be counted.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene gli elementi da contare.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Funzione per testare ogni elemento rispetto a una condizione.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> that represents how many elements in a sequence satisfy a condition.</source>
          <target state="translated">Restituisce un oggetto <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> che rappresenta quanti elementi in una sequenza soddisfano una condizione.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</source>
          <target state="translated">Numero che rappresenta quanti elementi nella sequenza specificata soddisfano la condizione nella funzione predicato.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Use this method rather than <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> when you expect the result to be greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</source>
          <target state="translated">Utilizzare questo metodo anziché <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> quando si prevede il risultato sia maggiore di <ph id="ph2">&lt;xref:System.Int32.MaxValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into LongCount()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into LongCount()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.LongCount%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to count the elements in an array that satisfy a condition.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> per conteggiare gli elementi in una matrice che soddisfa una condizione.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The number of matching elements exceeds <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">Il numero di elementi corrispondenti è maggiore di <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the maximum value in a sequence of values.</source>
          <target state="translated">Restituisce il valore massimo in una sequenza di valori.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore massimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valore massimo della sequenza.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> per determinare il valore massimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore massimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valore massimo della sequenza.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> per determinare il valore massimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore massimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valore massimo della sequenza.</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> per determinare il valore massimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore massimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valore massimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> per determinare il valore massimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullable di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore massimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore massimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se la sequenza di origine è vuota o contiene solo i valori <ph id="ph1">`null`</ph>, questa funzione restituisce <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> per determinare il valore massimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullable di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore massimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore massimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se la sequenza di origine è vuota o contiene solo i valori <ph id="ph1">`null`</ph>, questa funzione restituisce <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> per determinare il valore massimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullable di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore massimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore massimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se la sequenza di origine è vuota o contiene solo i valori <ph id="ph1">`null`</ph>, questa funzione restituisce <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> per determinare il valore massimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullable di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore massimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore massimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se la sequenza di origine è vuota o contiene solo i valori <ph id="ph1">`null`</ph>, questa funzione restituisce <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> per determinare il valore massimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullable di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Returns the maximum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore massimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore massimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se la sequenza di origine è vuota o contiene solo i valori <ph id="ph1">`null`</ph>, questa funzione restituisce <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> per determinare il valore massimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Returns the maximum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore massimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valore massimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> to determine the maximum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> per determinare il valore massimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the maximum value in a generic sequence.</source>
          <target state="translated">Restituisce il valore massimo in una sequenza generica.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valore massimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method uses that implementation to compare values.</source>
          <target state="translated">Se tipo <ph id="ph1">`TSource`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> metodo tale implementazione viene utilizzata per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, if type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">In caso contrario, se tipo <ph id="ph1">`TSource`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, tale implementazione viene utilizzata per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If <ph id="ph1">`TSource`</ph> is a reference type and the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>, this method returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`TSource`</ph> è un tipo riferimento e la sequenza di origine è vuota o contiene solo valori <ph id="ph2">`null`</ph>, questo metodo restituisce <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine the maximum value in a sequence of <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> objects.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per determinare il valore massimo in una sequenza di <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> oggetti.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> massimo.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valore massimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore massimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> massimo.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valore massimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore massimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> massimo.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valore massimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore massimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> massimo.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valore massimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore massimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> massimo.</target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore massimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Decimal)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore massimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> massimo.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore massimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Double)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore massimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> massimo.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore massimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int32)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Int32)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore massimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> massimo.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore massimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Int64)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore massimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> massimo.</target>       </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the maximum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore massimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Single)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore massimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Invokes a transform function on each element of a sequence and returns the maximum <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> massimo.</target>       </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valore massimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore massimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del valore restituito da <bpt id="p1">&lt;c&gt;</bpt>selettore<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to determine the maximum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore massimo.</target>       </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una generica sequenza e restituisce il valore massimo risultante.</target>       </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The maximum value in the sequence.</source>
          <target state="translated">Valore massimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>If type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
          <target state="translated">Se tipo <ph id="ph1">`TResult`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, questo metodo utilizza tale implementazione per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Otherwise, if type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">In caso contrario, se tipo <ph id="ph1">`TResult`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, tale implementazione viene utilizzata per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Max()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Max()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the maximum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore massimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns the minimum value in a sequence of values.</source>
          <target state="translated">Restituisce il valore minimo in una sequenza di valori.</target>       </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore minimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valore minimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> per determinare il valore minimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore minimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valore minimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> per determinare il valore minimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore minimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valore minimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> per determinare il valore minimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore minimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valore minimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> per determinare il valore minimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullable di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore minimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore minimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se la sequenza di origine è vuota o contiene solo i valori <ph id="ph1">`null`</ph>, questa funzione restituisce <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> per determinare il valore minimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullable di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore minimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore minimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se la sequenza di origine è vuota o contiene solo i valori <ph id="ph1">`null`</ph>, questa funzione restituisce <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> per determinare il valore minimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullable di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore minimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore minimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se la sequenza di origine è vuota o contiene solo i valori <ph id="ph1">`null`</ph>, questa funzione restituisce <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> per determinare il valore minimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullable di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore minimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore minimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se la sequenza di origine è vuota o contiene solo i valori <ph id="ph1">`null`</ph>, questa funzione restituisce <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> per determinare il valore minimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullable di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Returns the minimum value in a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore minimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore minimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>If the source sequence is empty or contains only values that are <ph id="ph1">`null`</ph>, this function returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Se la sequenza di origine è vuota o contiene solo i valori <ph id="ph1">`null`</ph>, questa funzione restituisce <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> per determinare il valore minimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Returns the minimum value in a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Restituisce il valore minimo in una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valore minimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> to determine the minimum value in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29&gt;</ph> per determinare il valore minimo in una sequenza.</target>       </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the minimum value in a generic sequence.</source>
          <target state="translated">Restituisce il valore minimo in una sequenza generica.</target>       </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valore minimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
          <target state="translated">Se tipo <ph id="ph1">`TSource`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, questo metodo utilizza tale implementazione per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Otherwise, if type <ph id="ph1">`TSource`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">In caso contrario, se tipo <ph id="ph1">`TSource`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, tale implementazione viene utilizzata per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If <ph id="ph1">`TSource`</ph> is a reference type and the source sequence is empty or contains only values that are <ph id="ph2">`null`</ph>, this function returns <ph id="ph3">`null`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`TSource`</ph> è un tipo riferimento e la sequenza di origine è vuota o contiene solo valori <ph id="ph2">`null`</ph>, questa funzione restituisce <ph id="ph3">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine the minimum value in a sequence of <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> objects.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per determinare il valore minimo in una sequenza di <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> oggetti.</target>       </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> minimo.</target>       </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valore minimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore minimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> minimo.</target>       </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valore minimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore minimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> minimo.</target>       </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valore minimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore minimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> minimo.</target>       </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valore minimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore minimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> minimo.</target>       </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Decimal<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Decimal)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore minimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Decimal&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Decimal)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore minimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> minimo.</target>       </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Double<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Double)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore minimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Double&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Double)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore minimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> minimo.</target>       </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore minimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int32&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of source into a numeric type, specifically <ph id="ph2">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph3">`Nullable(Of Int32)`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di origine in un tipo numerico, in particolare <ph id="ph2">`Nullable&lt;Int32&gt;`</ph> in c# o <ph id="ph3">`Nullable(Of Int32)`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore minimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> minimo.</target>       </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Int64<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Int64)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore minimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Int64&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Int64)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore minimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> minimo.</target>       </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The value of type <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that corresponds to the minimum value in the sequence.</source>
          <target state="translated">Valore di tipo <bpt id="p1">&lt;c&gt;</bpt>Nullable<ph id="ph1">&amp;lt;</ph>Single<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>Nullable(Of Single)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> corrispondente al valore minimo nella sequenza.</target>       </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Single)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore minimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Invokes a transform function on each element of a sequence and returns the minimum <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una sequenza e restituisce il valore <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> minimo.</target>       </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valore minimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method uses the <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementation of <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> to compare values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> metodo utilizza il <ph id="ph2">&lt;xref:System.Single&gt;</ph> implementazione di <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore minimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> contains no elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del valore restituito da <bpt id="p1">&lt;c&gt;</bpt>selettore<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to determine the minimum value of.</source>
          <target state="translated">Sequenza di valori di cui determinare il valore minimo.</target>       </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</source>
          <target state="translated">Richiama una funzione di trasformazione su ogni elemento di una generica sequenza e restituisce il valore minimo risultante.</target>       </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The minimum value in the sequence.</source>
          <target state="translated">Valore minimo della sequenza.</target>       </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>If type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, this method uses that implementation to compare values.</source>
          <target state="translated">Se tipo <ph id="ph1">`TResult`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph>, questo metodo utilizza tale implementazione per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Otherwise, if type <ph id="ph1">`TResult`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, that implementation is used to compare values.</source>
          <target state="translated">In caso contrario, se tipo <ph id="ph1">`TResult`</ph> implementa <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>, tale implementazione viene utilizzata per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Min()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Min()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> to determine the minimum value in a sequence of projected values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29&gt;</ph> per determinare il valore minimo in una sequenza di valori previsti.</target>       </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The type to filter the elements of the sequence on.</source>
          <target state="translated">Il tipo in base al quale filtrare gli elementi della sequenza.</target>       </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> whose elements to filter.</source>
          <target state="translated">L’oggetto <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> i cui elementi devono essere filtrati.</target>       </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>Filters the elements of an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> based on a specified type.</source>
          <target state="translated">Filtra gli elementi di un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> in base a un tipo specificato.</target>       </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence of type <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene elementi della sequenza di input del tipo <ph id="ph2">&lt;paramref name="TResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29&gt;</ph> method returns only those elements in <ph id="ph2">`source`</ph> that can be cast to type <ph id="ph3">`TResult`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29&gt;</ph> il metodo restituisce solo gli elementi in <ph id="ph2">`source`</ph> che può essere convertito nel tipo <ph id="ph3">`TResult`</ph>.</target>       </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>To instead receive an exception if an element cannot be cast to type <ph id="ph1">`TResult`</ph>, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</source>
          <target state="translated">Per ricevere un'eccezione se un elemento non può essere convertito nel tipo <ph id="ph1">`TResult`</ph>, utilizzare <ph id="ph2">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
          <target state="translated">Questo metodo è uno dei pochi metodi dell'operatore di query standard che possono essere applicati a una raccolta che dispone di un tipo senza parametri, ad esempio un <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>This is because <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> extends the type <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated">In questo modo <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> estende il tipo <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> cannot only be applied to collections that are based on the parameterized <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> type, but collections that are based on the non-parameterized <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> type also.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> non può essere applicato solo alle raccolte basate su parametri <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> tipo, ma raccolte basate su senza parametri <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> anche digitare.</target>       </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>By applying <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> to a collection that implements <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>, you gain the ability to query the collection by using the standard query operators.</source>
          <target state="translated">Applicando <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> a una raccolta che implementa <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>, è possibile ottenere la possibilità di eseguire una query della raccolta utilizzando gli operatori query standard.</target>       </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>For example, specifying a type argument of <ph id="ph1">&lt;xref:System.Object&gt;</ph> to <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> would return an object of type <ph id="ph3">`IEnumerable&lt;Object&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Object)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, to which the standard query operators can be applied.</source>
          <target state="translated">Ad esempio, specificando un argomento di tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph> a <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> viene restituito un oggetto di tipo <ph id="ph3">`IEnumerable&lt;Object&gt;`</ph> in c# o <ph id="ph4">`IEnumerable(Of Object)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, a cui possono essere applicati gli operatori query standard.</target>       </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> to filter the elements of an <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.OfType%2A&gt;</ph> per filtrare gli elementi di un <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Sorts the elements of a sequence in ascending order.</source>
          <target state="translated">Ordina in senso crescente gli elementi di una sequenza.</target>       </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Sequenza di valori da ordinare.</target>       </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Funzione per estrarre una chiave da un elemento.</target>       </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Sorts the elements of a sequence in ascending order according to a key.</source>
          <target state="translated">Ordina in senso crescente gli elementi di una sequenza secondo una chiave.</target>       </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> i cui elementi vengono ordinati secondo una chiave.</target>       </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph4">`keySelector`</ph>.</source>
          <target state="translated">Per ordinare una sequenza in base ai valori degli elementi stessi, specificare la funzione identity (<ph id="ph1">`x =&gt; x`</ph> in Visual c# o <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) per <ph id="ph4">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">Vengono definiti due metodi per estendere il tipo <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, ovvero il tipo restituito di questo metodo.</target>       </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">Questi due metodi, vale a dire <ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph>, consentono di specificare i criteri di ordinamento aggiuntivi per ordinare una sequenza.</target>       </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph> inoltre restituire un <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, ovvero un numero qualsiasi di chiamate consecutive di <ph id="ph4">`ThenBy`</ph> o <ph id="ph5">`ThenByDescending`</ph> può essere effettuata.</target>       </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Poiché <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> eredita da <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, è possibile chiamare <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> o <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> sui risultati di una chiamata a <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> o <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">In questo modo viene introdotto un nuovo ordinamento primario che ignora l'ordinamento stabilita in precedenza.</target>       </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Questo metodo vengono confrontati tramite l'operatore di confronto <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Questo metodo esegue un ordinamento stabile; ovvero, se le chiavi di due elementi sono uguali, l'ordine degli elementi viene mantenuto.</target>       </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Al contrario, un ordinamento instabile non mantiene l'ordine degli elementi che hanno la stessa chiave.</target>       </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, an <ph id="ph1">`orderby`</ph> (Visual C#) or <ph id="ph2">`Order By`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, un <ph id="ph1">`orderby`</ph> (Visual c#) o <ph id="ph2">`Order By`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clausola viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to sort the elements of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> per ordinare gli elementi di una sequenza.</target>       </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Sequenza di valori da ordinare.</target>       </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Funzione per estrarre una chiave da un elemento.</target>       </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Sorts the elements of a sequence in ascending order by using a specified comparer.</source>
          <target state="translated">Ordina in ordine crescente gli elementi di una sequenza utilizzando un operatore di confronto specificato.</target>       </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> i cui elementi vengono ordinati secondo una chiave.</target>       </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph4">`keySelector`</ph>.</source>
          <target state="translated">Per ordinare una sequenza in base ai valori degli elementi stessi, specificare la funzione identity (<ph id="ph1">`x =&gt; x`</ph> in Visual c# o <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) per <ph id="ph4">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">Vengono definiti due metodi per estendere il tipo <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, ovvero il tipo restituito di questo metodo.</target>       </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">Questi due metodi, vale a dire <ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph>, consentono di specificare i criteri di ordinamento aggiuntivi per ordinare una sequenza.</target>       </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph> inoltre restituire un <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, ovvero un numero qualsiasi di chiamate consecutive di <ph id="ph4">`ThenBy`</ph> o <ph id="ph5">`ThenByDescending`</ph> può essere effettuata.</target>       </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Poiché <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> eredita da <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, è possibile chiamare <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> o <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> sui risultati di una chiamata a <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> o <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">In questo modo viene introdotto un nuovo ordinamento primario che ignora l'ordinamento stabilita in precedenza.</target>       </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> è <ph id="ph2">`null`</ph>, l'operatore di confronto <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Questo metodo esegue un ordinamento stabile; ovvero, se le chiavi di due elementi sono uguali, l'ordine degli elementi viene mantenuto.</target>       </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Al contrario, un ordinamento instabile non mantiene l'ordine degli elementi che hanno la stessa chiave.</target>       </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Sorts the elements of a sequence in descending order.</source>
          <target state="translated">Ordina in senso decrescente gli elementi di una sequenza.</target>       </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Sequenza di valori da ordinare.</target>       </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Funzione per estrarre una chiave da un elemento.</target>       </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Sorts the elements of a sequence in descending order according to a key.</source>
          <target state="translated">Ordina in senso decrescente gli elementi di una sequenza secondo una chiave.</target>       </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</target>       </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph4">`keySelector`</ph>.</source>
          <target state="translated">Per ordinare una sequenza in base ai valori degli elementi stessi, specificare la funzione identity (<ph id="ph1">`x =&gt; x`</ph> in Visual c# o <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) per <ph id="ph4">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>For an example of this method, see <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph>.</source>
          <target state="translated">Per un esempio di questo metodo, vedere <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">Vengono definiti due metodi per estendere il tipo <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, ovvero il tipo restituito di questo metodo.</target>       </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">Questi due metodi, vale a dire <ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph>, consentono di specificare i criteri di ordinamento aggiuntivi per ordinare una sequenza.</target>       </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph> inoltre restituire un <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, ovvero un numero qualsiasi di chiamate consecutive di <ph id="ph4">`ThenBy`</ph> o <ph id="ph5">`ThenByDescending`</ph> può essere effettuata.</target>       </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Poiché <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> eredita da <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, è possibile chiamare <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> o <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> sui risultati di una chiamata a <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> o <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">In questo modo viene introdotto un nuovo ordinamento primario che ignora l'ordinamento stabilita in precedenza.</target>       </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Questo metodo vengono confrontati tramite l'operatore di confronto <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Questo metodo esegue un ordinamento stabile; ovvero, se le chiavi di due elementi sono uguali, l'ordine degli elementi viene mantenuto.</target>       </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Al contrario, un ordinamento instabile non mantiene l'ordine degli elementi che hanno la stessa chiave.</target>       </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, an <ph id="ph1">`orderby descending`</ph> (Visual C#) or <ph id="ph2">`Order By Descending`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, un <ph id="ph1">`orderby descending`</ph> (Visual c#) o <ph id="ph2">`Order By Descending`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clausola viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A sequence of values to order.</source>
          <target state="translated">Sequenza di valori da ordinare.</target>       </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from an element.</source>
          <target state="translated">Funzione per estrarre una chiave da un elemento.</target>       </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Sorts the elements of a sequence in descending order by using a specified comparer.</source>
          <target state="translated">Ordina in senso decrescente gli elementi di una sequenza usando un operatore di confronto specificato.</target>       </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</target>       </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph4">`keySelector`</ph>.</source>
          <target state="translated">Per ordinare una sequenza in base ai valori degli elementi stessi, specificare la funzione identity (<ph id="ph1">`x =&gt; x`</ph> in Visual c# o <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) per <ph id="ph4">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Two methods are defined to extend the type <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is the return type of this method.</source>
          <target state="translated">Vengono definiti due metodi per estendere il tipo <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, ovvero il tipo restituito di questo metodo.</target>       </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>These two methods, namely <ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph>, enable you to specify additional sort criteria to sort a sequence.</source>
          <target state="translated">Questi due metodi, vale a dire <ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph>, consentono di specificare i criteri di ordinamento aggiuntivi per ordinare una sequenza.</target>       </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">`ThenBy`</ph> and <ph id="ph2">`ThenByDescending`</ph> also return an <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which means any number of consecutive calls to <ph id="ph4">`ThenBy`</ph> or <ph id="ph5">`ThenByDescending`</ph> can be made.</source>
          <target state="translated"><ph id="ph1">`ThenBy`</ph> e <ph id="ph2">`ThenByDescending`</ph> inoltre restituire un <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, ovvero un numero qualsiasi di chiamate consecutive di <ph id="ph4">`ThenBy`</ph> o <ph id="ph5">`ThenByDescending`</ph> può essere effettuata.</target>       </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Poiché <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> eredita da <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, è possibile chiamare <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> o <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> sui risultati di una chiamata a <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> o <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">In questo modo viene introdotto un nuovo ordinamento primario che ignora l'ordinamento stabilita in precedenza.</target>       </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> è <ph id="ph2">`null`</ph>, l'operatore di confronto <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Questo metodo esegue un ordinamento stabile; ovvero, se le chiavi di due elementi sono uguali, l'ordine degli elementi viene mantenuto.</target>       </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Al contrario, un ordinamento instabile non mantiene l'ordine degli elementi che hanno la stessa chiave.</target>       </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> to sort the elements of a sequence in descending order by using a transform function and a custom comparer.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> per ordinare gli elementi di una sequenza in ordine decrescente usando una funzione di trasformazione e un operatore di confronto personalizzato.</target>       </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The type of the elements of <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Tipo degli elementi di <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A sequence of values.</source>
          <target state="translated">Sequenza di valori.</target>       </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>The value to prepend to <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Valore da anteporre a <ph id="ph1">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>Adds a value to the beginning of the sequence.</source>
          <target state="translated">Aggiunge un valore all'inizio della sequenza.</target>       </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source>A new sequence that begins with <ph id="ph1">&lt;paramref name="element" /&gt;</ph>.</source>
          <target state="translated">Nuova sequenza che inizia con <ph id="ph1">&lt;paramref name="element" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The value of the first integer in the sequence.</source>
          <target state="translated">Il primo valore intero della sequenza.</target>       </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The number of sequential integers to generate.</source>
          <target state="translated">Il numero di valori interi sequenziali da generare</target>       </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>Generates a sequence of integral numbers within a specified range.</source>
          <target state="translated">Genera una sequenza di numeri integrali all'interno di un intervallo specificato.</target>       </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>An <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# or <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> that contains a range of sequential integral numbers.</source>
          <target state="translated">Elemento <bpt id="p1">&lt;c&gt;</bpt>IEnumerable<ph id="ph1">&amp;lt;</ph>Int32<ph id="ph2">&amp;gt;</ph><ept id="p1">&lt;/c&gt;</ept> in C# o <bpt id="p2">&lt;c&gt;</bpt>IEnumerable(Of Int32)<ept id="p2">&lt;/c&gt;</ept> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> che contiene un intervallo di numeri integrali sequenziali.</target>       </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Range%2A&gt;</ph> to generate a sequence of values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Range%2A&gt;</ph> per generare una sequenza di valori.</target>       </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> è minore di 0.</target>       </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="start" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> -1 is larger than <ph id="ph4">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="start" /&gt;</ph><ph id="ph2"> + </ph><ph id="ph3">&lt;paramref name="count" /&gt;</ph> -1 è maggiore di <ph id="ph4">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The type of the value to be repeated in the result sequence.</source>
          <target state="translated">Il tipo del valore da ripetere nella sequenza di risultato.</target>       </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The value to be repeated.</source>
          <target state="translated">Valore da ripetere.</target>       </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The number of times to repeat the value in the generated sequence.</source>
          <target state="translated">Numero che esprime quante volte il valore è ripetuto nella sequenza generata.</target>       </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>Generates a sequence that contains one repeated value.</source>
          <target state="translated">Genera una sequenza che contiene un valore ripetuto.</target>       </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains a repeated value.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene un valore ripetuto.</target>       </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Repeat%2A&gt;</ph> to generate a sequence of a repeated value.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Repeat%2A&gt;</ph> per generare una sequenza di valori ripetuti.</target>       </trans-unit>
        <trans-unit id="1516" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="count" /&gt;</ph> è minore di 0.</target>       </trans-unit>
        <trans-unit id="1517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1518" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence of values to reverse.</source>
          <target state="translated">Sequenza di valori da invertire.</target>       </trans-unit>
        <trans-unit id="1519" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Inverts the order of the elements in a sequence.</source>
          <target state="translated">Inverte l'ordine degli elementi in una sequenza.</target>       </trans-unit>
        <trans-unit id="1520" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A sequence whose elements correspond to those of the input sequence in reverse order.</source>
          <target state="translated">Sequenza i cui elementi corrispondono a quelli della sequenza di input, in ordine inverso.</target>       </trans-unit>
        <trans-unit id="1521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Unlike <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, this sorting method does not consider the actual values themselves in determining the order.</source>
          <target state="translated">A differenza di <ph id="ph1">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, questo metodo di ordinamento non considera i valori effettivi nel determinare l'ordine.</target>       </trans-unit>
        <trans-unit id="1525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</source>
          <target state="translated">Invece restituisce solo gli elementi in ordine inverso, da cui sono stati prodotti dall'origine sottostante.</target>       </trans-unit>
        <trans-unit id="1526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Reverse%2A&gt;</ph> to reverse the order of elements in an array.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Reverse%2A&gt;</ph> per invertire l'ordine degli elementi in una matrice.</target>       </trans-unit>
        <trans-unit id="1527" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1528" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Projects each element of a sequence into a new form.</source>
          <target state="translated">Proietta ogni elemento di una sequenza in un nuovo form.</target>       </trans-unit>
        <trans-unit id="1529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del valore restituito da <bpt id="p1">&lt;c&gt;</bpt>selettore<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1531" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>A sequence of values to invoke a transform function on.</source>
          <target state="translated">Sequenza di valori su cui richiamare una funzione di trasformazione.</target>       </trans-unit>
        <trans-unit id="1532" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento di origine; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</target>       </trans-unit>
        <trans-unit id="1533" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>Projects each element of a sequence into a new form by incorporating the element's index.</source>
          <target state="translated">Proietta ogni elemento di una sequenza in un nuovo modulo incorporando l'indice dell'elemento.</target>       </trans-unit>
        <trans-unit id="1534" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the transform function on each element of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono il risultato ottenuto richiamando una funzione di trasformazione su ogni elemento di <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The first argument to <ph id="ph1">`selector`</ph> represents the element to process.</source>
          <target state="translated">Il primo argomento <ph id="ph1">`selector`</ph> rappresenta l'elemento da elaborare.</target>       </trans-unit>
        <trans-unit id="1539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The second argument to <ph id="ph1">`selector`</ph> represents the zero-based index of that element in the source sequence.</source>
          <target state="translated">Il secondo argomento <ph id="ph1">`selector`</ph> rappresenta l'indice in base zero dell'elemento nella sequenza di origine.</target>       </trans-unit>
        <trans-unit id="1540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</source>
          <target state="translated">Può essere utile se gli elementi sono in un ordine noto e si desidera eseguire un'operazione con un elemento in corrispondenza di un indice specifico, ad esempio.</target>       </trans-unit>
        <trans-unit id="1541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>It can also be useful if you want to retrieve the index of one or more elements.</source>
          <target state="translated">Può anche essere utile se si desidera recuperare l'indice di uno o più elementi.</target>       </trans-unit>
        <trans-unit id="1542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>This projection method requires the transform function, <ph id="ph1">`selector`</ph>, to produce one value for each value in the source sequence, <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Questo metodo di proiezione richiede la funzione di trasformazione, <ph id="ph1">`selector`</ph>, per produrre un valore per ogni valore nella sequenza di origine, <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>If <ph id="ph1">`selector`</ph> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</source>
          <target state="translated">Se <ph id="ph1">`selector`</ph> restituisce un valore che è una raccolta, spetta al consumer di sottosequenze manualmente.</target>       </trans-unit>
        <trans-unit id="1544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>In such a situation, it might be better for your query to return a single coalesced sequence of values.</source>
          <target state="translated">In questo caso, potrebbe essere meglio per la query restituire restituisse una singola sequenza di valori.</target>       </trans-unit>
        <trans-unit id="1545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>To achieve this, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
          <target state="translated">A tale scopo, utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>Although <ph id="ph1">`SelectMany`</ph> works similarly to <ph id="ph2">`Select`</ph>, it differs in that the transform function returns a collection that is then expanded by <ph id="ph3">`SelectMany`</ph> before it is returned.</source>
          <target state="translated">Sebbene <ph id="ph1">`SelectMany`</ph> è simile a <ph id="ph2">`Select`</ph>, la differenza che la funzione di trasformazione restituisce una raccolta che viene quindi espanso da <ph id="ph3">`SelectMany`</ph> prima che venga restituito.</target>       </trans-unit>
        <trans-unit id="1547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29&gt;</ph> to project over a sequence of values and use the index of each element.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29&gt;</ph> per proiettare su una sequenza di valori e utilizzare l'indice di ogni elemento.</target>       </trans-unit>
        <trans-unit id="1548" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del valore restituito da <bpt id="p1">&lt;c&gt;</bpt>selettore<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1551" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A sequence of values to invoke a transform function on.</source>
          <target state="translated">Sequenza di valori su cui richiamare una funzione di trasformazione.</target>       </trans-unit>
        <trans-unit id="1552" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1553" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Projects each element of a sequence into a new form.</source>
          <target state="translated">Proietta ogni elemento di una sequenza in un nuovo form.</target>       </trans-unit>
        <trans-unit id="1554" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the transform function on each element of <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono il risultato ottenuto richiamando una funzione di trasformazione su ogni elemento di <ph id="ph2">&lt;paramref name="source" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>This projection method requires the transform function, <ph id="ph1">`selector`</ph>, to produce one value for each value in the source sequence, <ph id="ph2">`source`</ph>.</source>
          <target state="translated">Questo metodo di proiezione richiede la funzione di trasformazione, <ph id="ph1">`selector`</ph>, per produrre un valore per ogni valore nella sequenza di origine, <ph id="ph2">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>If <ph id="ph1">`selector`</ph> returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</source>
          <target state="translated">Se <ph id="ph1">`selector`</ph> restituisce un valore che è una raccolta, spetta al consumer di sottosequenze manualmente.</target>       </trans-unit>
        <trans-unit id="1560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In such a situation, it might be better for your query to return a single coalesced sequence of values.</source>
          <target state="translated">In questo caso, potrebbe essere meglio per la query restituire restituisse una singola sequenza di valori.</target>       </trans-unit>
        <trans-unit id="1561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>To achieve this, use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> method instead of <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
          <target state="translated">A tale scopo, utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph> anziché <ph id="ph2">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Although <ph id="ph1">`SelectMany`</ph> works similarly to <ph id="ph2">`Select`</ph>, it differs in that the transform function returns a collection that is then expanded by <ph id="ph3">`SelectMany`</ph> before it is returned.</source>
          <target state="translated">Sebbene <ph id="ph1">`SelectMany`</ph> è simile a <ph id="ph2">`Select`</ph>, la differenza che la funzione di trasformazione restituisce una raccolta che viene quindi espanso da <ph id="ph3">`SelectMany`</ph> prima che venga restituito.</target>       </trans-unit>
        <trans-unit id="1563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, a <ph id="ph1">`select`</ph> (Visual C#) or <ph id="ph2">`Select`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, una <ph id="ph1">`select`</ph> (Visual c#) o <ph id="ph2">`Select`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clausola viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to project over a sequence of values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> per proiettare su una sequenza di valori.</target>       </trans-unit>
        <trans-unit id="1565" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1566" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and flattens the resulting sequences into one sequence.</source>
          <target state="translated">Proietta ogni elemento di una sequenza a un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> e semplifica le sequenze risultanti in un’unica sequenza.</target>       </trans-unit>
        <trans-unit id="1567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of the sequence returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi della sequenza restituita da <bpt id="p1">&lt;c&gt;</bpt>selettore<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1569" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Sequenza di valori da proiettare.</target>       </trans-unit>
        <trans-unit id="1570" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1571" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> and flattens the resulting sequences into one sequence.</source>
          <target state="translated">Proietta ogni elemento di una sequenza a un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> e semplifica le sequenze risultanti in un’unica sequenza.</target>       </trans-unit>
        <trans-unit id="1572" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono il risultato ottenuto richiamando la funzione di trasformazione uno a molti su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> method enumerates the input sequence, uses a transform function to map each element to an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, and then enumerates and yields the elements of each such <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> object.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> metodo enumera la sequenza di input, utilizza una funzione di trasformazione per eseguire il mapping di ogni elemento di un <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>e quindi enumera e restituisce gli elementi di ognuno di tali <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="1577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>That is, for each element of <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> is invoked and a sequence of values is returned.</source>
          <target state="translated">Ovvero, per ogni elemento della <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> viene richiamato e viene restituita una sequenza di valori.</target>       </trans-unit>
        <trans-unit id="1578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> then flattens this two-dimensional collection of collections into a one-dimensional <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and returns it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> semplifica quindi questo insieme bidimensionale di raccolte in una matrice unidimensionale <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> e lo restituisce.</target>       </trans-unit>
        <trans-unit id="1579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>For example, if a query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to obtain the orders (of type <ph id="ph2">`Order`</ph>) for each customer in a database, the result is of type <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Order)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Ad esempio, se una query utilizza <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> per ottenere gli ordini (di tipo <ph id="ph2">`Order`</ph>) per ogni cliente in un database, il risultato è di tipo <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in c# o <ph id="ph4">`IEnumerable(Of Order)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>If instead the query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to obtain the orders, the collection of collections of orders is not combined and the result is of type <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in C# or <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se invece la query utilizza <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> per ottenere gli ordini, la raccolta di raccolte di ordini non è combinata e il risultato è di tipo <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in c# o <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>In query expression syntax, each <ph id="ph1">`from`</ph> clause (Visual C#) or <ph id="ph2">`From`</ph> clause (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) after the initial one translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, ciascuna <ph id="ph1">`from`</ph> clausola (Visual c#) o <ph id="ph2">`From`</ph> clausola (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) dopo l'iniziale viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> per eseguire una proiezione di uno-a-molti su una matrice.</target>       </trans-unit>
        <trans-unit id="1583" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The type of the elements of the sequence returned by <bpt id="p1">&lt;c&gt;</bpt>selector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi della sequenza restituita da <bpt id="p1">&lt;c&gt;</bpt>selettore<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1586" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>A sequence of values to project.</source>
          <target state="translated">Sequenza di valori da proiettare.</target>       </trans-unit>
        <trans-unit id="1587" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento di origine; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</target>       </trans-unit>
        <trans-unit id="1588" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, and flattens the resulting sequences into one sequence.</source>
          <target state="translated">Proietta ogni elemento di una sequenza a un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> e semplifica le sequenze risultanti in un’unica sequenza.</target>       </trans-unit>
        <trans-unit id="1589" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The index of each source element is used in the projected form of that element.</source>
          <target state="translated">L'indice di ogni elemento di origine viene usato nella maschera proiettata di tale elemento.</target>       </trans-unit>
        <trans-unit id="1590" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono il risultato ottenuto richiamando la funzione di trasformazione uno a molti su ogni elemento di una sequenza di input.</target>       </trans-unit>
        <trans-unit id="1591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> method enumerates the input sequence, uses a transform function to map each element to an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, and then enumerates and yields the elements of each such <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> object.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> metodo enumera la sequenza di input, utilizza una funzione di trasformazione per eseguire il mapping di ogni elemento di un <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>e quindi enumera e restituisce gli elementi di ognuno di tali <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="1595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>That is, for each element of <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> is invoked and a sequence of values is returned.</source>
          <target state="translated">Ovvero, per ogni elemento della <ph id="ph1">`source`</ph>, <ph id="ph2">`selector`</ph> viene richiamato e viene restituita una sequenza di valori.</target>       </trans-unit>
        <trans-unit id="1596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> then flattens this two-dimensional collection of collections into a one-dimensional <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and returns it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> semplifica quindi questo insieme bidimensionale di raccolte in una matrice unidimensionale <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> e lo restituisce.</target>       </trans-unit>
        <trans-unit id="1597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>For example, if a query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to obtain the orders (of type <ph id="ph2">`Order`</ph>) for each customer in a database, the result is of type <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in C# or <ph id="ph4">`IEnumerable(Of Order)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Ad esempio, se una query utilizza <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> per ottenere gli ordini (di tipo <ph id="ph2">`Order`</ph>) per ogni cliente in un database, il risultato è di tipo <ph id="ph3">`IEnumerable&lt;Order&gt;`</ph> in c# o <ph id="ph4">`IEnumerable(Of Order)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>If instead the query uses <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> to obtain the orders, the collection of collections of orders is not combined and the result is of type <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in C# or <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se invece la query utilizza <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A&gt;</ph> per ottenere gli ordini, la raccolta di raccolte di ordini non è combinata e il risultato è di tipo <ph id="ph2">`IEnumerable&lt;List&lt;Order&gt;&gt;`</ph> in c# o <ph id="ph3">`IEnumerable(Of List(Of Order))`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The first argument to <ph id="ph1">`selector`</ph> represents the element to process.</source>
          <target state="translated">Il primo argomento <ph id="ph1">`selector`</ph> rappresenta l'elemento da elaborare.</target>       </trans-unit>
        <trans-unit id="1600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The second argument to <ph id="ph1">`selector`</ph> represents the zero-based index of that element in the source sequence.</source>
          <target state="translated">Il secondo argomento <ph id="ph1">`selector`</ph> rappresenta l'indice in base zero dell'elemento nella sequenza di origine.</target>       </trans-unit>
        <trans-unit id="1601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</source>
          <target state="translated">Può essere utile se gli elementi sono in un ordine noto e si desidera eseguire un'operazione con un elemento in corrispondenza di un indice specifico, ad esempio.</target>       </trans-unit>
        <trans-unit id="1602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>It can also be useful if you want to retrieve the index of one or more elements.</source>
          <target state="translated">Può anche essere utile se si desidera recuperare l'indice di uno o più elementi.</target>       </trans-unit>
        <trans-unit id="1603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> to perform a one-to-many projection over an array and use the index of each outer element.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> per eseguire una proiezione di uno-a-molti su una matrice e utilizzare l'indice di ogni elemento esterno.</target>       </trans-unit>
        <trans-unit id="1604" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the intermediate elements collected by <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi intermedi raccolti da <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of the resulting sequence.</source>
          <target state="translated">Tipo degli elementi della sequenza risultante.</target>       </trans-unit>
        <trans-unit id="1608" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A sequence of values to project.</source>
          <target state="translated">Sequenza di valori da proiettare.</target>       </trans-unit>
        <trans-unit id="1609" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each element of the input sequence.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1610" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each element of the intermediate sequence.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento della sequenza intermedia.</target>       </trans-unit>
        <trans-unit id="1611" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</source>
          <target state="translated">Proietta ogni elemento di una sequenza a un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, semplifica le sequenze risultanti in un'unica sequenza e richiama una funzione del selettore di risultato su ogni elemento al suo interno.</target>       </trans-unit>
        <trans-unit id="1612" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> on each element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> and then mapping each of those sequence elements and their corresponding source element to a result element.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono il risultato ottenuto richiamando la funzione di trasformazione uno a molti <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> su ogni elemento di <ph id="ph3">&lt;paramref name="source" /&gt;</ph> ed eseguire quindi il mapping di ognuno degli elementi di tale sequenza e del corrispondente elemento di origine a un elemento di risultato.</target>       </trans-unit>
        <trans-unit id="1613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> method is useful when you have to keep the elements of <ph id="ph2">`source`</ph> in scope for query logic that occurs after the call to <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> metodo è utile quando è necessario mantenere gli elementi di <ph id="ph2">`source`</ph> nell'ambito per la logica di query che si verifica dopo la chiamata a <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>See the Example section for a code example.</source>
          <target state="translated">Per un esempio di codice, vedere la sezione relativa agli esempi.</target>       </trans-unit>
        <trans-unit id="1618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>If there is a bidirectional relationship between objects of type <ph id="ph1">`TSource`</ph> and objects of type <ph id="ph2">`TCollection`</ph>, that is, if an object of type <ph id="ph3">`TCollection`</ph> provides a property to retrieve the <ph id="ph4">`TSource`</ph> object that produced it, you do not need this overload of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">Se vi sia una relazione bidirezionale tra gli oggetti di tipo <ph id="ph1">`TSource`</ph> e gli oggetti di tipo <ph id="ph2">`TCollection`</ph>, vale a dire, se un oggetto di tipo <ph id="ph3">`TCollection`</ph> fornisce una proprietà per recuperare il <ph id="ph4">`TSource`</ph> oggetto che ha generato, non è necessario questo overload di <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Instead, you can use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> and navigate back to the <ph id="ph2">`TSource`</ph> object through the <ph id="ph3">`TCollection`</ph> object.</source>
          <target state="translated">In alternativa, è possibile utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> e tornare al <ph id="ph2">`TSource`</ph> mediante il <ph id="ph3">`TCollection`</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="1620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>In query expression syntax, each <ph id="ph1">`from`</ph> clause (Visual C#) or <ph id="ph2">`From`</ph> clause (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) after the initial one translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, ciascuna <ph id="ph1">`from`</ph> clausola (Visual c#) o <ph id="ph2">`From`</ph> clausola (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) dopo l'iniziale viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.SelectMany%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to <ph id="ph2">`Select`</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> per eseguire una proiezione di uno-a-molti su una matrice e utilizzare una funzione del selettore di risultato per mantenere ogni elemento corrispondente dalla sequenza di origine nell'ambito per la chiamata finale a <ph id="ph2">`Select`</ph>.</target>       </trans-unit>
        <trans-unit id="1622" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="source" /&gt;</ph>, il parametro <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> o il parametro <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> è <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the intermediate elements collected by <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi intermedi raccolti da <bpt id="p1">&lt;c&gt;</bpt>collectionSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The type of the elements of the resulting sequence.</source>
          <target state="translated">Tipo degli elementi della sequenza risultante.</target>       </trans-unit>
        <trans-unit id="1626" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A sequence of values to project.</source>
          <target state="translated">Sequenza di valori da proiettare.</target>       </trans-unit>
        <trans-unit id="1627" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento di origine; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</target>       </trans-unit>
        <trans-unit id="1628" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>A transform function to apply to each element of the intermediate sequence.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento della sequenza intermedia.</target>       </trans-unit>
        <trans-unit id="1629" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Projects each element of a sequence to an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</source>
          <target state="translated">Proietta ogni elemento di una sequenza a un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>, semplifica le sequenze risultanti in un'unica sequenza e richiama una funzione del selettore di risultato su ogni elemento al suo interno.</target>       </trans-unit>
        <trans-unit id="1630" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The index of each source element is used in the intermediate projected form of that element.</source>
          <target state="translated">L'indice di ogni elemento di origine viene usato nella maschera intermedia proiettata di tale elemento.</target>       </trans-unit>
        <trans-unit id="1631" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose elements are the result of invoking the one-to-many transform function <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> on each element of <ph id="ph3">&lt;paramref name="source" /&gt;</ph> and then mapping each of those sequence elements and their corresponding source element to a result element.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi sono il risultato ottenuto richiamando la funzione di trasformazione uno a molti <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> su ogni elemento di <ph id="ph3">&lt;paramref name="source" /&gt;</ph> ed eseguire quindi il mapping di ognuno degli elementi di tale sequenza e del corrispondente elemento di origine a un elemento di risultato.</target>       </trans-unit>
        <trans-unit id="1632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1633" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> method is useful when you have to keep the elements of <ph id="ph2">`source`</ph> in scope for query logic that occurs after the call to <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph> metodo è utile quando è necessario mantenere gli elementi di <ph id="ph2">`source`</ph> nell'ambito per la logica di query che si verifica dopo la chiamata a <ph id="ph3">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>See the Example section for a code example.</source>
          <target state="translated">Per un esempio di codice, vedere la sezione relativa agli esempi.</target>       </trans-unit>
        <trans-unit id="1637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>If there is a bidirectional relationship between objects of type <ph id="ph1">`TSource`</ph> and objects of type <ph id="ph2">`TCollection`</ph>, that is, if an object of type <ph id="ph3">`TCollection`</ph> provides a property to retrieve the <ph id="ph4">`TSource`</ph> object that produced it, you do not need this overload of <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</source>
          <target state="translated">Se vi sia una relazione bidirezionale tra gli oggetti di tipo <ph id="ph1">`TSource`</ph> e gli oggetti di tipo <ph id="ph2">`TCollection`</ph>, vale a dire, se un oggetto di tipo <ph id="ph3">`TCollection`</ph> fornisce una proprietà per recuperare il <ph id="ph4">`TSource`</ph> oggetto che ha generato, non è necessario questo overload di <ph id="ph5">&lt;xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source>Instead, you can use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> and navigate back to the <ph id="ph2">`TSource`</ph> object through the <ph id="ph3">`TCollection`</ph> object.</source>
          <target state="translated">In alternativa, è possibile utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29&gt;</ph> e tornare al <ph id="ph2">`TSource`</ph> mediante il <ph id="ph3">`TCollection`</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="1639" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="source" /&gt;</ph>, il parametro <ph id="ph2">&lt;paramref name="collectionSelector" /&gt;</ph> o il parametro <ph id="ph3">&lt;paramref name="resultSelector" /&gt;</ph> è <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1640" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Determines whether two sequences are equal according to an equality comparer.</source>
          <target state="translated">Determina se due sequenze sono uguali secondo un operatore di confronto di uguaglianza.</target>       </trans-unit>
        <trans-unit id="1641" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Tipo degli elementi delle sequenze di input.</target>       </trans-unit>
        <trans-unit id="1642" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Elemento <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da confrontare a <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1643" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to the first sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da confrontare alla prima sequenza.</target>       </trans-unit>
        <trans-unit id="1644" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</source>
          <target state="translated">Determina se due sequenze sono uguali confrontando gli elementi tramite l’uso dell'operatore di confronto uguaglianze predefinito per il loro tipo.</target>       </trans-unit>
        <trans-unit id="1645" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se le due sequenze di origine sono di lunghezza uguale e gli elementi corrispondenti risultano uguali secondo l’operatore di confronto uguaglianze per il loro tipo; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for <ph id="ph2">`TSource`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> metodo enumera le due sequenze di origine in parallelo e confronta gli elementi corrispondenti utilizzando l'operatore di uguaglianza predefinito per <ph id="ph2">`TSource`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">Operatore di uguaglianza predefinito, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per confrontare i valori di tipi che implementano il <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interfaccia generica.</target>       </trans-unit>
        <trans-unit id="1648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Per confrontare un tipo di dati personalizzato, è necessario implementare questa interfaccia e fornire la propria <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> metodi per il tipo.</target>       </trans-unit>
        <trans-unit id="1649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code examples demonstrate how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to determine whether two sequences are equal.</source>
          <target state="translated">Gli esempi di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per determinare se due sequenze sono uguali.</target>       </trans-unit>
        <trans-unit id="1650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In the first two examples, the method determines whether the compared sequences contain references to the same objects.</source>
          <target state="translated">Nei primi due esempi, il metodo determina se le sequenze confrontate contengono riferimenti agli stessi oggetti.</target>       </trans-unit>
        <trans-unit id="1651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In the third and fourth examples, the method compares the actual data of the objects within the sequences.</source>
          <target state="translated">Negli esempi terzi e quarto, il metodo confronta i dati effettivi degli oggetti all'interno delle sequenze.</target>       </trans-unit>
        <trans-unit id="1652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>In this example the sequences are equal.</source>
          <target state="translated">In questo esempio, le sequenze sono uguali.</target>       </trans-unit>
        <trans-unit id="1653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example compares two sequences that are not equal.</source>
          <target state="translated">Esempio di codice seguente confronta due sequenze che non sono uguali.</target>       </trans-unit>
        <trans-unit id="1654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.</source>
          <target state="translated">Si noti che le sequenze contengono dati identici, ma poiché gli oggetti in essi contenuti hanno riferimenti diversi, le sequenze non sono considerate uguali.</target>       </trans-unit>
        <trans-unit id="1655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in your class.</source>
          <target state="translated">Se si desidera confrontare i dati effettivi degli oggetti nelle sequenze anziché confrontare solo i riferimenti, è necessario implementare la <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interfaccia generica della classe.</target>       </trans-unit>
        <trans-unit id="1656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a helper class and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come implementare questa interfaccia in una classe di supporto e fornire <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> metodi.</target>       </trans-unit>
        <trans-unit id="1657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Dopo aver implementato questa interfaccia, è possibile utilizzare le sequenze di <ph id="ph1">`ProductA`</ph> gli oggetti di <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> (metodo), come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="1658" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> o <ph id="ph2">&lt;paramref name="second" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Tipo degli elementi delle sequenze di input.</target>       </trans-unit>
        <trans-unit id="1660" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Elemento <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da confrontare a <bpt id="p1">&lt;c&gt;</bpt>second<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1661" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to compare to the first sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da confrontare alla prima sequenza.</target>       </trans-unit>
        <trans-unit id="1662" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to use to compare elements.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> da usare per confrontare gli elementi.</target>       </trans-unit>
        <trans-unit id="1663" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Determines whether two sequences are equal by comparing their elements by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">Determina se due sequenze sono uguali confrontando i loro elementi mediante l’uso di un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="1664" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two source sequences are of equal length and their corresponding elements compare equal according to <ph id="ph2">&lt;paramref name="comparer" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se le due sequenze di origine sono di lunghezza uguale e gli elementi corrispondenti risultano uguali secondo <ph id="ph2">&lt;paramref name="comparer" /&gt;</ph>; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> metodo enumera le due sequenze di origine in parallelo e confronta gli elementi corrispondenti utilizzando l'oggetto specificato <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare elements.</source>
          <target state="translated">Se c<ph id="ph1">`omparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per confrontare gli elementi.</target>       </trans-unit>
        <trans-unit id="1667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come implementare un confronto di uguaglianza che può essere usato nel <ph id="ph1">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="1668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Dopo aver implementato questo operatore di confronto, è possibile utilizzare le sequenze di <ph id="ph1">`Product`</ph> gli oggetti di <ph id="ph2">&lt;xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29&gt;</ph> (metodo), come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="1669" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> o <ph id="ph2">&lt;paramref name="second" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1670" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns a single, specific element of a sequence.</source>
          <target state="translated">Restituisce un singolo, specifico elemento di una sequenza.</target>       </trans-unit>
        <trans-unit id="1671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1672" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the single element of.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> di cui restituire il singolo elemento.</target>       </trans-unit>
        <trans-unit id="1673" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</source>
          <target state="translated">Restituisce l'unico elemento di una sequenza e genera un'eccezione se nella sequenza non è presente esattamente un elemento.</target>       </trans-unit>
        <trans-unit id="1674" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The single element of the input sequence.</source>
          <target state="translated">Singolo elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method throws an exception if the input sequence is empty.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> metodo genera un'eccezione se la sequenza di input è vuota.</target>       </trans-unit>
        <trans-unit id="1676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>To instead return <ph id="ph1">`null`</ph> when the input sequence is empty, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</source>
          <target state="translated">Per restituire invece <ph id="ph1">`null`</ph> quando la sequenza di input è vuota, utilizzare <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to select the only element of an array.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per selezionare l'unico elemento di matrice.</target>       </trans-unit>
        <trans-unit id="1678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> throws an exception when the sequence does not contain exactly one element.</source>
          <target state="translated">Esempio di codice seguente viene dimostrato che <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> genera un'eccezione quando la sequenza non contiene esattamente un elemento.</target>       </trans-unit>
        <trans-unit id="1679" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1680" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence contains more than one element.</source>
          <target state="translated">La sequenza di input contiene più elementi.</target>       </trans-unit>
        <trans-unit id="1681" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="1682" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence is empty.</source>
          <target state="translated">La sequenza di input è vuota.</target>       </trans-unit>
        <trans-unit id="1683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1684" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return a single element from.</source>
          <target state="translated">Un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dal quale restituire un singolo elemento.</target>       </trans-unit>
        <trans-unit id="1685" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test an element for a condition.</source>
          <target state="translated">Funzione per testare un elemento per una condizione.</target>       </trans-unit>
        <trans-unit id="1686" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</source>
          <target state="translated">Restituisce l'unico elemento di una sequenza che soddisfa una condizione specificata e genera un'eccezione se esistono più elementi di tale tipo.</target>       </trans-unit>
        <trans-unit id="1687" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The single element of the input sequence that satisfies a condition.</source>
          <target state="translated">Singolo elemento della sequenza di input che soddisfa una condizione.</target>       </trans-unit>
        <trans-unit id="1688" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method throws an exception if the input sequence contains no matching element.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> metodo genera un'eccezione se la sequenza di input non contiene elementi corrispondenti.</target>       </trans-unit>
        <trans-unit id="1689" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>To instead return <ph id="ph1">`null`</ph> when no matching element is found, use <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</source>
          <target state="translated">Per restituire invece <ph id="ph1">`null`</ph> quando non viene trovato alcun elemento corrispondente, utilizzare <ph id="ph2">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1690" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to select the only element of an array that satisfies a condition.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> per selezionare l'unico elemento che soddisfa una condizione della matrice.</target>       </trans-unit>
        <trans-unit id="1691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> throws an exception when the sequence does not contain exactly one element that satisfies the condition.</source>
          <target state="translated">Esempio di codice seguente viene dimostrato che <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> genera un'eccezione quando la sequenza non contiene esattamente un elemento che soddisfa la condizione.</target>       </trans-unit>
        <trans-unit id="1692" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1693" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>No element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Nessun elemento soddisfa la condizione in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1694" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="1695" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>More than one element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Più di un elemento soddisfa la condizione in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1696" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="1697" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The source sequence is empty.</source>
          <target state="translated">La sequenza di origine è vuota.</target>       </trans-unit>
        <trans-unit id="1698" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns a single, specific element of a sequence, or a default value if that element is not found.</source>
          <target state="translated">Restituisce un singolo elemento specifico di una sequenza o un valore predefinito se tale elemento non viene trovato.</target>       </trans-unit>
        <trans-unit id="1699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1700" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return the single element of.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> di cui restituire il singolo elemento.</target>       </trans-unit>
        <trans-unit id="1701" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</source>
          <target state="translated">Restituisce il singolo elemento di una sequenza o un valore predefinito se la sequenza è vuota. Questo metodo genera un'eccezione se esiste più di un elemento nella sequenza.</target>       </trans-unit>
        <trans-unit id="1702" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The single element of the input sequence, or <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if the sequence contains no elements.</source>
          <target state="translated">Il singolo elemento della sequenza di input, o <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) se la sequenza non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il valore predefinito per i tipi che ammettono valori null e di riferimento è <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph> method does not provide a way to specify a default value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A&gt;</ph> metodo non fornisce un modo per specificare un valore predefinito.</target>       </trans-unit>
        <trans-unit id="1705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to specify a default value other than <ph id="ph1">`default(TSource)`</ph>, use the <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method as described in the Example section.</source>
          <target state="translated">Se si desidera specificare un valore predefinito diverso da <ph id="ph1">`default(TSource)`</ph>, utilizzare il <ph id="ph2">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> (metodo), come descritto nella sezione esempio.</target>       </trans-unit>
        <trans-unit id="1706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to select the only element of an array.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per selezionare l'unico elemento di matrice.</target>       </trans-unit>
        <trans-unit id="1707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> returns a default value when the sequence does not contain exactly one element.</source>
          <target state="translated">Esempio di codice seguente viene dimostrato che <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> restituisce un valore predefinito quando la sequenza non contiene esattamente un elemento.</target>       </trans-unit>
        <trans-unit id="1708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Sometimes the value of <ph id="ph1">`default(TSource)`</ph> is not the default value that you want to use if the collection contains no elements.</source>
          <target state="translated">In alcuni casi il valore di <ph id="ph1">`default(TSource)`</ph> non è il valore predefinito che si desidera utilizzare se la raccolta non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> method to specify the default value that you want to use if the collection is empty.</source>
          <target state="translated">Anziché verificare il risultato per il valore predefinito non desiderato e quindi modificarlo se necessario, è possibile utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> per specificare il valore predefinito che si desidera utilizzare se la raccolta è vuota.</target>       </trans-unit>
        <trans-unit id="1710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Then, call <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the element.</source>
          <target state="translated">Chiamare quindi <ph id="ph1">&lt;xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per ottenere l'elemento.</target>       </trans-unit>
        <trans-unit id="1711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</source>
          <target state="translated">Esempio di codice seguente usa entrambe le tecniche per ottenere un valore predefinito di 1, se una raccolta di numeri di pagina è vuota.</target>       </trans-unit>
        <trans-unit id="1712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</source>
          <target state="translated">Poiché il valore predefinito per un numero intero è 0, che non è in genere un numero di pagina valida, il valore predefinito deve specificato come 1.</target>       </trans-unit>
        <trans-unit id="1713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The first result variable is checked for the unwanted default value after the query has finished executing.</source>
          <target state="translated">La prima variabile di risultato viene verificata per il valore predefinito non desiderato dopo la query ha terminato l'esecuzione.</target>       </trans-unit>
        <trans-unit id="1714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The second result variable is obtained by using <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> to specify a default value of 1.</source>
          <target state="translated">La seconda variabile del risultato viene ottenuta tramite <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29&gt;</ph> per specificare un valore predefinito di 1.</target>       </trans-unit>
        <trans-unit id="1715" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1716" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The input sequence contains more than one element.</source>
          <target state="translated">La sequenza di input contiene più elementi.</target>       </trans-unit>
        <trans-unit id="1717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1718" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return a single element from.</source>
          <target state="translated">Un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dal quale restituire un singolo elemento.</target>       </trans-unit>
        <trans-unit id="1719" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test an element for a condition.</source>
          <target state="translated">Funzione per testare un elemento per una condizione.</target>       </trans-unit>
        <trans-unit id="1720" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</source>
          <target state="translated">Restituisce l'unico elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se tale elemento esiste. Questo metodo genera un'eccezione se più di un elemento soddisfa la condizione.</target>       </trans-unit>
        <trans-unit id="1721" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The single element of the input sequence that satisfies the condition, or <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) if no such element is found.</source>
          <target state="translated">Il singolo elemento della sequenza di input che soddisfa la condizione o <ph id="ph1">&lt;see langword="default" /&gt;</ph>(<ph id="ph2">&lt;paramref name="TSource" /&gt;</ph>) se tale elemento non viene trovato.</target>       </trans-unit>
        <trans-unit id="1722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The default value for reference and nullable types is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il valore predefinito per i tipi che ammettono valori null e di riferimento è <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to select the only element of an array that satisfies a condition.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> per selezionare l'unico elemento che soddisfa una condizione della matrice.</target>       </trans-unit>
        <trans-unit id="1724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates that <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</source>
          <target state="translated">Esempio di codice seguente viene dimostrato che <ph id="ph1">&lt;xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> restituisce un valore predefinito quando la sequenza non contiene esattamente un elemento che soddisfa la condizione.</target>       </trans-unit>
        <trans-unit id="1725" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1726" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>More than one element satisfies the condition in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Più di un elemento soddisfa la condizione in <ph id="ph1">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1728" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dal quale restituire elementi.</target>       </trans-unit>
        <trans-unit id="1729" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The number of elements to skip before returning the remaining elements.</source>
          <target state="translated">Il numero di elementi da ignorare prima di restituire gli elementi rimanenti.</target>       </trans-unit>
        <trans-unit id="1730" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</source>
          <target state="translated">Ignora un numero specificato di elementi in una sequenza e quindi restituisce gli elementi rimanenti.</target>       </trans-unit>
        <trans-unit id="1731" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements that occur after the specified index in the input sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene gli elementi presenti dopo l'indice specificato nella sequenza di input.</target>       </trans-unit>
        <trans-unit id="1732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`source`</ph> contains fewer than <ph id="ph2">`count`</ph> elements, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">Se <ph id="ph1">`source`</ph> contiene meno di <ph id="ph2">`count`</ph> elementi, un oggetto vuoto <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> viene restituito.</target>       </trans-unit>
        <trans-unit id="1736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`count`</ph> is less than or equal to zero, all elements of <ph id="ph2">`source`</ph> are yielded.</source>
          <target state="translated">Se <ph id="ph1">`count`</ph> è minore o uguale a zero, tutti gli elementi di <ph id="ph2">`source`</ph> vengono restituiti.</target>       </trans-unit>
        <trans-unit id="1737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> metodi sono complementi funzionali.</target>       </trans-unit>
        <trans-unit id="1738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and an integer <ph id="ph2">`n`</ph>, concatenating the results of <ph id="ph3">`coll.Take(n)`</ph> and <ph id="ph4">`coll.Skip(n)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Specificata una sequenza di <ph id="ph1">`coll`</ph> e un numero intero <ph id="ph2">`n`</ph>, la concatenazione dei risultati di <ph id="ph3">`coll.Take(n)`</ph> e <ph id="ph4">`coll.Skip(n)`</ph> produce la stessa sequenza come <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="1739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Skip`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Skip`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> to skip a specified number of elements in a sorted array and return the remaining elements.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> per ignorare un numero specificato di elementi in una matrice ordinata e restituire gli elementi rimanenti.</target>       </trans-unit>
        <trans-unit id="1741" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1742" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Ignora gli elementi in sequenza finché la condizione specificata è soddisfatta e quindi restituisce gli elementi rimanenti.</target>       </trans-unit>
        <trans-unit id="1743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1744" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dal quale restituire elementi.</target>       </trans-unit>
        <trans-unit id="1745" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Funzione per testare ogni elemento rispetto a una condizione.</target>       </trans-unit>
        <trans-unit id="1746" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Ignora gli elementi in sequenza finché la condizione specificata è soddisfatta e quindi restituisce gli elementi rimanenti.</target>       </trans-unit>
        <trans-unit id="1747" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene gli elementi dalla sequenza di input a partire dal primo elemento nella serie lineare che non supera il test specificato da <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method is implemented by using deferred execution.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method tests each element of <ph id="ph1">`source`</ph> by using <ph id="ph2">`predicate`</ph> and skips the element if the result is <ph id="ph3">`true`</ph>.</source>
          <target state="translated">Questo metodo verifica ogni elemento di <ph id="ph1">`source`</ph> utilizzando <ph id="ph2">`predicate`</ph> e ignora l'elemento se il risultato è <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>After the predicate function returns <ph id="ph1">`false`</ph> for an element, that element and the remaining elements in <ph id="ph2">`source`</ph> are yielded and there are no more invocations of <ph id="ph3">`predicate`</ph>.</source>
          <target state="translated">Dopo la funzione predicato restituisce <ph id="ph1">`false`</ph> per un elemento, tale elemento e gli elementi rimanenti nella <ph id="ph2">`source`</ph> vengono restituiti e vi sono ulteriori chiamate di <ph id="ph3">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>If <ph id="ph1">`predicate`</ph> returns <ph id="ph2">`true`</ph> for all elements in the sequence, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">Se <ph id="ph1">`predicate`</ph> restituisce <ph id="ph2">`true`</ph> per tutti gli elementi nella sequenza di un oggetto vuoto <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> viene restituito.</target>       </trans-unit>
        <trans-unit id="1754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> metodi sono complementi funzionali.</target>       </trans-unit>
        <trans-unit id="1755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Specificata una sequenza di <ph id="ph1">`coll`</ph> e una funzione pura <ph id="ph2">`p`</ph>, la concatenazione dei risultati di <ph id="ph3">`coll.TakeWhile(p)`</ph> e <ph id="ph4">`coll.SkipWhile(p)`</ph> produce la stessa sequenza come <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="1756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Skip While`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Skip While`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to skip elements of an array as long as a condition is true.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> per ignorare gli elementi della matrice come una condizione è vera.</target>       </trans-unit>
        <trans-unit id="1758" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1760" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to return elements from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> dal quale restituire elementi.</target>       </trans-unit>
        <trans-unit id="1761" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Funzione per verificare ogni elemento di origine per una condizione; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</target>       </trans-unit>
        <trans-unit id="1762" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</source>
          <target state="translated">Ignora gli elementi in sequenza finché la condizione specificata è soddisfatta e quindi restituisce gli elementi rimanenti.</target>       </trans-unit>
        <trans-unit id="1763" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The element's index is used in the logic of the predicate function.</source>
          <target state="translated">L'indice dell'elemento viene usato nella logica della funzione predicativa.</target>       </trans-unit>
        <trans-unit id="1764" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene gli elementi dalla sequenza di input a partire dal primo elemento nella serie lineare che non supera il test specificato da <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1765" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1766" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1767" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1768" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and skips the element if the result is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> metodo verifica ogni elemento di <ph id="ph2">`source`</ph> utilizzando <ph id="ph3">`predicate`</ph> e ignora l'elemento se il risultato è <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1769" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>After the predicate function returns <ph id="ph1">`false`</ph> for an element, that element and the remaining elements in <ph id="ph2">`source`</ph> are yielded and there are no more invocations of <ph id="ph3">`predicate`</ph>.</source>
          <target state="translated">Dopo la funzione predicato restituisce <ph id="ph1">`false`</ph> per un elemento, tale elemento e gli elementi rimanenti nella <ph id="ph2">`source`</ph> vengono restituiti e vi sono ulteriori chiamate di <ph id="ph3">`predicate`</ph>.</target>       </trans-unit>
        <trans-unit id="1770" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>If <ph id="ph1">`predicate`</ph> returns <ph id="ph2">`true`</ph> for all elements in the sequence, an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">Se <ph id="ph1">`predicate`</ph> restituisce <ph id="ph2">`true`</ph> per tutti gli elementi nella sequenza di un oggetto vuoto <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> viene restituito.</target>       </trans-unit>
        <trans-unit id="1771" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
          <target state="translated">Il primo argomento della <ph id="ph1">`predicate`</ph> rappresenta l'elemento di test.</target>       </trans-unit>
        <trans-unit id="1772" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Il secondo argomento rappresenta l'indice in base zero dell'elemento all'interno di <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="1773" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> metodi sono complementi funzionali.</target>       </trans-unit>
        <trans-unit id="1774" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Specificata una sequenza di <ph id="ph1">`coll`</ph> e una funzione pura <ph id="ph2">`p`</ph>, la concatenazione dei risultati di <ph id="ph3">`coll.TakeWhile(p)`</ph> e <ph id="ph4">`coll.SkipWhile(p)`</ph> produce la stessa sequenza come <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="1775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Skip While`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Skip While`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> to skip elements of an array as long as a condition that depends on the element's index is true.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> per ignorare gli elementi della matrice come una condizione che dipende dall'indice dell'elemento è true.</target>       </trans-unit>
        <trans-unit id="1777" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1778" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Computes the sum of a sequence of numeric values.</source>
          <target state="translated">Calcola la somma di una sequenza di valori numerici.</target>       </trans-unit>
        <trans-unit id="1779" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> di cui calcolare la somma.</target>       </trans-unit>
        <trans-unit id="1780" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Calcola la somma di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1781" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somma dei valori della sequenza.</target>       </trans-unit>
        <trans-unit id="1782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> method returns zero if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29&gt;</ph> restituisce zero se <ph id="ph2">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1784" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> per sommare i valori di una sequenza.</target>       </trans-unit>
        <trans-unit id="1785" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1786" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma è maggiore di <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1787" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> di cui calcolare la somma.</target>       </trans-unit>
        <trans-unit id="1788" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Calcola la somma di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1789" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somma dei valori della sequenza.</target>       </trans-unit>
        <trans-unit id="1790" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1791" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1792" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> per sommare i valori di una sequenza.</target>       </trans-unit>
        <trans-unit id="1793" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1794" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> di cui calcolare la somma.</target>       </trans-unit>
        <trans-unit id="1795" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Calcola la somma di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1796" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somma dei valori della sequenza.</target>       </trans-unit>
        <trans-unit id="1797" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1798" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> per sommare i valori di una sequenza.</target>       </trans-unit>
        <trans-unit id="1800" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1801" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma è maggiore di <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1802" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> di cui calcolare la somma.</target>       </trans-unit>
        <trans-unit id="1803" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Calcola la somma di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1804" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somma dei valori della sequenza.</target>       </trans-unit>
        <trans-unit id="1805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1807" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> per sommare i valori di una sequenza.</target>       </trans-unit>
        <trans-unit id="1808" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1809" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma è maggiore di <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1810" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Sequenza che ammette valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullable di cui calcolare la somma.</target>       </trans-unit>
        <trans-unit id="1811" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values.</source>
          <target state="translated">Calcola la somma di una sequenza che ammette valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1812" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somma dei valori della sequenza.</target>       </trans-unit>
        <trans-unit id="1813" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1814" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The result doesnot include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il risultato di non includere valori che sono <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1815" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> per sommare i valori di una sequenza.</target>       </trans-unit>
        <trans-unit id="1817" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1818" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma è maggiore di <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1819" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Sequenza che ammette valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullable di cui calcolare la somma.</target>       </trans-unit>
        <trans-unit id="1820" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values.</source>
          <target state="translated">Calcola la somma di una sequenza che ammette valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1821" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somma dei valori della sequenza.</target>       </trans-unit>
        <trans-unit id="1822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il risultato non include valori <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1825" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> per sommare i valori di una sequenza.</target>       </trans-unit>
        <trans-unit id="1826" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1827" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Sequenza che ammette valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullable di cui calcolare la somma.</target>       </trans-unit>
        <trans-unit id="1828" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values.</source>
          <target state="translated">Calcola la somma di una sequenza che ammette valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1829" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somma dei valori della sequenza.</target>       </trans-unit>
        <trans-unit id="1830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1831" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il risultato non include valori <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1832" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1833" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> per sommare i valori di una sequenza.</target>       </trans-unit>
        <trans-unit id="1834" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1835" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma è maggiore di <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1836" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Sequenza che ammette valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullable di cui calcolare la somma.</target>       </trans-unit>
        <trans-unit id="1837" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values.</source>
          <target state="translated">Calcola la somma di una sequenza che ammette valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1838" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somma dei valori della sequenza.</target>       </trans-unit>
        <trans-unit id="1839" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1840" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il risultato non include valori <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> per sommare i valori di una sequenza.</target>       </trans-unit>
        <trans-unit id="1843" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1844" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma è maggiore di <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1845" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>A sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Sequenza che ammette valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullable di cui calcolare la somma.</target>       </trans-unit>
        <trans-unit id="1846" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>Computes the sum of a sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Calcola la somma di una sequenza che ammette valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullable.</target>       </trans-unit>
        <trans-unit id="1847" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somma dei valori della sequenza.</target>       </trans-unit>
        <trans-unit id="1848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il risultato non include valori <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1850" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1851" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29&gt;</ph> per sommare i valori di una sequenza.</target>       </trans-unit>
        <trans-unit id="1852" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1853" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>A sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values to calculate the sum of.</source>
          <target state="translated">Sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> di cui calcolare la somma.</target>       </trans-unit>
        <trans-unit id="1854" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>Computes the sum of a sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values.</source>
          <target state="translated">Calcola la somma di una sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1855" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The sum of the values in the sequence.</source>
          <target state="translated">Somma dei valori della sequenza.</target>       </trans-unit>
        <trans-unit id="1856" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1857" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1858" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> to sum the values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29&gt;</ph> per sommare i valori di una sequenza.</target>       </trans-unit>
        <trans-unit id="1859" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1861" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Sequenza di valori utilizzati per calcolare una somma.</target>       </trans-unit>
        <trans-unit id="1862" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1863" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la somma della sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1864" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somma dei valori proiettati.</target>       </trans-unit>
        <trans-unit id="1865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> per sommare i valori previsti di una sequenza.</target>       </trans-unit>
        <trans-unit id="1869" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1870" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma è maggiore di <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1872" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Sequenza di valori utilizzati per calcolare una somma.</target>       </trans-unit>
        <trans-unit id="1873" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1874" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la somma della sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1875" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somma dei valori proiettati.</target>       </trans-unit>
        <trans-unit id="1876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Double&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> per sommare i valori previsti di una sequenza.</target>       </trans-unit>
        <trans-unit id="1880" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1882" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Sequenza di valori utilizzati per calcolare una somma.</target>       </trans-unit>
        <trans-unit id="1883" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1884" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la somma della sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1885" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somma dei valori proiettati.</target>       </trans-unit>
        <trans-unit id="1886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> per sommare i valori previsti di una sequenza.</target>       </trans-unit>
        <trans-unit id="1890" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1891" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma è maggiore di <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1893" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Sequenza di valori utilizzati per calcolare una somma.</target>       </trans-unit>
        <trans-unit id="1894" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1895" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la somma della sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1896" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somma dei valori proiettati.</target>       </trans-unit>
        <trans-unit id="1897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Int64&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> per sommare i valori previsti di una sequenza.</target>       </trans-unit>
        <trans-unit id="1901" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1902" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma è maggiore di <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1903" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1904" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Sequenza di valori utilizzati per calcolare una somma.</target>       </trans-unit>
        <trans-unit id="1905" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1906" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la somma della sequenza di valori <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> nullable, ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1907" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somma dei valori proiettati.</target>       </trans-unit>
        <trans-unit id="1908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The result does not included values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il risultato non include valori <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Decimal)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Decimal&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Decimal)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> per sommare i valori previsti di una sequenza.</target>       </trans-unit>
        <trans-unit id="1913" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1914" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma è maggiore di <ph id="ph1">&lt;see cref="F:System.Decimal.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1916" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Sequenza di valori utilizzati per calcolare una somma.</target>       </trans-unit>
        <trans-unit id="1917" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1918" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la somma della sequenza di valori <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> nullable, ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1919" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somma dei valori proiettati.</target>       </trans-unit>
        <trans-unit id="1920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il risultato non include valori <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Double)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Double&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Double)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> per sommare i valori previsti di una sequenza.</target>       </trans-unit>
        <trans-unit id="1925" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1927" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Sequenza di valori utilizzati per calcolare una somma.</target>       </trans-unit>
        <trans-unit id="1928" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1929" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la somma della sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> nullable, ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1930" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somma dei valori proiettati.</target>       </trans-unit>
        <trans-unit id="1931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il risultato non include valori <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int32)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Int32&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Int32)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> per sommare i valori previsti di una sequenza.</target>       </trans-unit>
        <trans-unit id="1936" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1937" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma è maggiore di <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1939" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Sequenza di valori utilizzati per calcolare una somma.</target>       </trans-unit>
        <trans-unit id="1940" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1941" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la somma della sequenza di valori <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph> nullable, ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1942" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somma dei valori proiettati.</target>       </trans-unit>
        <trans-unit id="1943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il risultato non include valori <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Int64)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph></source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Int64&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Int64)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph></target>       </trans-unit>
        <trans-unit id="1946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1947" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> per sommare i valori previsti di una sequenza.</target>       </trans-unit>
        <trans-unit id="1948" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1949" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
          <source>The sum is larger than <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La somma è maggiore di <ph id="ph1">&lt;see cref="F:System.Int64.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1951" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Sequenza di valori utilizzati per calcolare una somma.</target>       </trans-unit>
        <trans-unit id="1952" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1953" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>Computes the sum of the sequence of nullable <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la somma della sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> nullable, ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1954" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somma dei valori proiettati.</target>       </trans-unit>
        <trans-unit id="1955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>This method returns zero if <ph id="ph1">`source`</ph> contains no elements.</source>
          <target state="translated">Questo metodo restituisce zero se <ph id="ph1">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The result does not include values that are <ph id="ph1">`null`</ph>.</source>
          <target state="translated">Il risultato non include valori <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="1957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in C# or <ph id="ph4">`Nullable(Of Single)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">`Nullable&lt;Single&gt;`</ph> in c# o <ph id="ph4">`Nullable(Of Single)`</ph> in <ph id="ph5">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> per sommare i valori previsti di una sequenza.</target>       </trans-unit>
        <trans-unit id="1960" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1962" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A sequence of values that are used to calculate a sum.</source>
          <target state="translated">Sequenza di valori utilizzati per calcolare una somma.</target>       </trans-unit>
        <trans-unit id="1963" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>A transform function to apply to each element.</source>
          <target state="translated">Funzione di trasformazione da applicare a ogni elemento.</target>       </trans-unit>
        <trans-unit id="1964" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>Computes the sum of the sequence of <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> values that are obtained by invoking a transform function on each element of the input sequence.</source>
          <target state="translated">Calcola la somma della sequenza di valori <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph> ottenuti chiamando una funzione di trasformazione su ogni elemento della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1965" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The sum of the projected values.</source>
          <target state="translated">Somma dei valori proiettati.</target>       </trans-unit>
        <trans-unit id="1966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> method returns zero if <ph id="ph2">`source`</ph> contains no elements.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29&gt;</ph> restituisce zero se <ph id="ph2">`source`</ph> non contiene elementi.</target>       </trans-unit>
        <trans-unit id="1967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>You can apply this method to a sequence of arbitrary values if you provide a function, <ph id="ph1">`selector`</ph>, that projects the members of <ph id="ph2">`source`</ph> into a numeric type, specifically <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</source>
          <target state="translated">Se si specifica una funzione, è possibile applicare questo metodo in una sequenza di valori arbitrari <ph id="ph1">`selector`</ph>, che proietta i membri di <ph id="ph2">`source`</ph> in un tipo numerico, in particolare <ph id="ph3">&lt;xref:System.Single&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Aggregate Into Sum()`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Aggregate Into Sum()`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> to sum the projected values of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29&gt;</ph> per sommare i valori previsti di una sequenza.</target>       </trans-unit>
        <trans-unit id="1970" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="selector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1972" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The sequence to return elements from.</source>
          <target state="translated">Sequenza dalla quale vengono restituiti gli elementi.</target>       </trans-unit>
        <trans-unit id="1973" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The number of elements to return.</source>
          <target state="translated">Numero di elementi da restituire.</target>       </trans-unit>
        <trans-unit id="1974" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Returns a specified number of contiguous elements from the start of a sequence.</source>
          <target state="translated">Restituisce un numero specificato di elementi contigui dall'inizio di una sequenza.</target>       </trans-unit>
        <trans-unit id="1975" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the specified number of elements from the start of the input sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene il numero specificato di elementi, dall'inizio della sequenza di input.</target>       </trans-unit>
        <trans-unit id="1976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1978" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> enumerates <ph id="ph2">`source`</ph> and yields elements until <ph id="ph3">`count`</ph> elements have been yielded or <ph id="ph4">`source`</ph> contains no more elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> Enumera <ph id="ph2">`source`</ph> e restituisce elementi fino a <ph id="ph3">`count`</ph> sono stati prodotti elementi o <ph id="ph4">`source`</ph> non contiene più elementi.</target>       </trans-unit>
        <trans-unit id="1980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`count`</ph> exceeds the number of elements in <ph id="ph2">`source`</ph>, all elements of <ph id="ph3">`source`</ph> are returned.</source>
          <target state="translated">Se <ph id="ph1">`count`</ph> supera il numero di elementi in <ph id="ph2">`source`</ph>, tutti gli elementi di <ph id="ph3">`source`</ph> vengono restituiti.</target>       </trans-unit>
        <trans-unit id="1981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>If <ph id="ph1">`count`</ph> is less than or equal to zero, <ph id="ph2">`source`</ph> is not enumerated and an empty <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is returned.</source>
          <target state="translated">Se <ph id="ph1">`count`</ph> è minore o uguale a zero, <ph id="ph2">`source`</ph> non è enumerato e un oggetto vuoto <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> viene restituito.</target>       </trans-unit>
        <trans-unit id="1982" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.Skip%2A&gt;</ph> metodi sono complementi funzionali.</target>       </trans-unit>
        <trans-unit id="1983" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and an integer <ph id="ph2">`n`</ph>, concatenating the results of <ph id="ph3">`coll.Take(n)`</ph> and <ph id="ph4">`coll.Skip(n)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Specificata una sequenza di <ph id="ph1">`coll`</ph> e un numero intero <ph id="ph2">`n`</ph>, la concatenazione dei risultati di <ph id="ph3">`coll.Take(n)`</ph> e <ph id="ph4">`coll.Skip(n)`</ph> produce la stessa sequenza come <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="1984" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Take`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Take`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1985" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> to return elements from the start of a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> per restituire gli elementi dall'inizio di una sequenza.</target>       </trans-unit>
        <trans-unit id="1986" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="1987" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</source>
          <target state="translated">Restituisce gli elementi da una sequenza finché la condizione specificata è soddisfatta, poi ignora gli elementi rimanenti.</target>       </trans-unit>
        <trans-unit id="1988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="1989" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A sequence to return elements from.</source>
          <target state="translated">Sequenza dalla quale vengono restituiti gli elementi.</target>       </trans-unit>
        <trans-unit id="1990" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Funzione per testare ogni elemento rispetto a una condizione.</target>       </trans-unit>
        <trans-unit id="1991" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
          <target state="translated">Restituisce elementi di una sequenza finché una condizione specificata è soddisfatta.</target>       </trans-unit>
        <trans-unit id="1992" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene gli elementi dalla sequenza di input che precedono il primo elemento che non soddisfa il test.</target>       </trans-unit>
        <trans-unit id="1993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="1994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="1995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="1996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and yields the element if the result is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> metodo verifica ogni elemento di <ph id="ph2">`source`</ph> utilizzando <ph id="ph3">`predicate`</ph> e restituisce l'elemento se il risultato è <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="1997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Enumeration stops when the predicate function returns <ph id="ph1">`false`</ph> for an element or when <ph id="ph2">`source`</ph> contains no more elements.</source>
          <target state="translated">Enumerazione si interrompe quando la funzione predicato restituisce <ph id="ph1">`false`</ph> per un elemento o quando <ph id="ph2">`source`</ph> non contiene più elementi.</target>       </trans-unit>
        <trans-unit id="1998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> metodi sono complementi funzionali.</target>       </trans-unit>
        <trans-unit id="1999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Specificata una sequenza di <ph id="ph1">`coll`</ph> e una funzione pura <ph id="ph2">`p`</ph>, la concatenazione dei risultati di <ph id="ph3">`coll.TakeWhile(p)`</ph> e <ph id="ph4">`coll.SkipWhile(p)`</ph> produce la stessa sequenza come <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="2000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Take While`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Take While`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to return elements from the start of a sequence as long as a condition is true.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> per restituire gli elementi dall'inizio di una sequenza finché una condizione è vera.</target>       </trans-unit>
        <trans-unit id="2002" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2004" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The sequence to return elements from.</source>
          <target state="translated">Sequenza dalla quale vengono restituiti gli elementi.</target>       </trans-unit>
        <trans-unit id="2005" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Funzione per verificare ogni elemento di origine per una condizione; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</target>       </trans-unit>
        <trans-unit id="2006" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Returns elements from a sequence as long as a specified condition is true.</source>
          <target state="translated">Restituisce elementi di una sequenza finché una condizione specificata è soddisfatta.</target>       </trans-unit>
        <trans-unit id="2007" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The element's index is used in the logic of the predicate function.</source>
          <target state="translated">L'indice dell'elemento viene usato nella logica della funzione predicativa.</target>       </trans-unit>
        <trans-unit id="2008" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence that occur before the element at which the test no longer passes.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene elementi dalla sequenza di input che precedono il primo elemento che non soddisfa il test.</target>       </trans-unit>
        <trans-unit id="2009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="2010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="2011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> method tests each element of <ph id="ph2">`source`</ph> by using <ph id="ph3">`predicate`</ph> and yields the element if the result is <ph id="ph4">`true`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> metodo verifica ogni elemento di <ph id="ph2">`source`</ph> utilizzando <ph id="ph3">`predicate`</ph> e restituisce l'elemento se il risultato è <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="2013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Enumeration stops when the predicate function returns <ph id="ph1">`false`</ph> for an element or when <ph id="ph2">`source`</ph> contains no more elements.</source>
          <target state="translated">Enumerazione si interrompe quando la funzione predicato restituisce <ph id="ph1">`false`</ph> per un elemento o quando <ph id="ph2">`source`</ph> non contiene più elementi.</target>       </trans-unit>
        <trans-unit id="2014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
          <target state="translated">Il primo argomento della <ph id="ph1">`predicate`</ph> rappresenta l'elemento di test.</target>       </trans-unit>
        <trans-unit id="2015" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Il secondo argomento rappresenta l'indice in base zero dell'elemento all'interno di <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="2016" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> methods are functional complements.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.SkipWhile%2A&gt;</ph> metodi sono complementi funzionali.</target>       </trans-unit>
        <trans-unit id="2017" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Given a sequence <ph id="ph1">`coll`</ph> and a pure function <ph id="ph2">`p`</ph>, concatenating the results of <ph id="ph3">`coll.TakeWhile(p)`</ph> and <ph id="ph4">`coll.SkipWhile(p)`</ph> yields the same sequence as <ph id="ph5">`coll`</ph>.</source>
          <target state="translated">Specificata una sequenza di <ph id="ph1">`coll`</ph> e una funzione pura <ph id="ph2">`p`</ph>, la concatenazione dei risultati di <ph id="ph3">`coll.TakeWhile(p)`</ph> e <ph id="ph4">`coll.SkipWhile(p)`</ph> produce la stessa sequenza come <ph id="ph5">`coll`</ph>.</target>       </trans-unit>
        <trans-unit id="2018" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, a <ph id="ph2">`Take While`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Take While`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.TakeWhile%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2019" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> to return elements from the start of a sequence as long as a condition that uses the element's index is true.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> per restituire gli elementi dall'inizio di una sequenza finché una condizione che utilizza l'indice dell'elemento è true.</target>       </trans-unit>
        <trans-unit id="2020" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2021" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order.</source>
          <target state="translated">Esegue un successivo ordinamento in senso crescente degli elementi di una sequenza.</target>       </trans-unit>
        <trans-unit id="2022" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2023" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2024" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> che contiene gli elementi da ordinare.</target>       </trans-unit>
        <trans-unit id="2025" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Funzione per estrarre una chiave da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2026" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</source>
          <target state="translated">Esegue un successivo ordinamento in senso crescente in base a una chiave degli elementi di una sequenza.</target>       </trans-unit>
        <trans-unit id="2027" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> i cui elementi vengono ordinati secondo una chiave.</target>       </trans-unit>
        <trans-unit id="2028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="2029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="2030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph4">`keySelector`</ph>.</source>
          <target state="translated">Per ordinare una sequenza in base ai valori degli elementi stessi, specificare la funzione identity (<ph id="ph1">`x =&gt; x`</ph> in Visual c# o <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) per <ph id="ph4">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="2032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> vengono definiti per estendere il tipo <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, che è anche il tipo restituito di questi metodi.</target>       </trans-unit>
        <trans-unit id="2033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">Questa progettazione consente di specificare più criteri di ordinamento applicando un numero qualsiasi di <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> metodi.</target>       </trans-unit>
        <trans-unit id="2034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Poiché <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> eredita da <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, è possibile chiamare <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> o <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> sui risultati di una chiamata a <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> o <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">In questo modo viene introdotto un nuovo ordinamento primario che ignora l'ordinamento stabilita in precedenza.</target>       </trans-unit>
        <trans-unit id="2036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Questo metodo vengono confrontati tramite l'operatore di confronto <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Questo metodo esegue un ordinamento stabile; ovvero, se le chiavi di due elementi sono uguali, l'ordine degli elementi viene mantenuto.</target>       </trans-unit>
        <trans-unit id="2038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Al contrario, un ordinamento instabile non mantiene l'ordine degli elementi che hanno la stessa chiave.</target>       </trans-unit>
        <trans-unit id="2039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In query expression syntax, an <ph id="ph1">`orderby [first criterion], [second criterion]`</ph> (Visual C#) or <ph id="ph2">`Order By [first criterion], [second criterion]`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, un <ph id="ph1">`orderby [first criterion], [second criterion]`</ph> (Visual c#) o <ph id="ph2">`Order By [first criterion], [second criterion]`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clausola viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to perform a secondary ordering of the elements in a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> per eseguire un ordinamento secondario degli elementi in una sequenza.</target>       </trans-unit>
        <trans-unit id="2041" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2044" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> che contiene gli elementi da ordinare.</target>       </trans-unit>
        <trans-unit id="2045" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Funzione per estrarre una chiave da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2046" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2047" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</source>
          <target state="translated">Esegue un ordinamento secondario in senso crescente degli elementi di una sequenza utilizzando un operatore di confronto specificato.</target>       </trans-unit>
        <trans-unit id="2048" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted according to a key.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> i cui elementi vengono ordinati secondo una chiave.</target>       </trans-unit>
        <trans-unit id="2049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="2050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="2051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph4">`keySelector`</ph>.</source>
          <target state="translated">Per ordinare una sequenza in base ai valori degli elementi stessi, specificare la funzione identity (<ph id="ph1">`x =&gt; x`</ph> in Visual c# o <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) per <ph id="ph4">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="2053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> vengono definiti per estendere il tipo <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, che è anche il tipo restituito di questi metodi.</target>       </trans-unit>
        <trans-unit id="2054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">Questa progettazione consente di specificare più criteri di ordinamento applicando un numero qualsiasi di <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> metodi.</target>       </trans-unit>
        <trans-unit id="2055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Poiché <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> eredita da <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, è possibile chiamare <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> o <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> sui risultati di una chiamata a <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> o <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">In questo modo viene introdotto un nuovo ordinamento primario che ignora l'ordinamento stabilita in precedenza.</target>       </trans-unit>
        <trans-unit id="2057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> è <ph id="ph2">`null`</ph>, l'operatore di confronto <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Questo metodo esegue un ordinamento stabile; ovvero, se le chiavi di due elementi sono uguali, l'ordine degli elementi viene mantenuto.</target>       </trans-unit>
        <trans-unit id="2059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Al contrario, un ordinamento instabile non mantiene l'ordine degli elementi che hanno la stessa chiave.</target>       </trans-unit>
        <trans-unit id="2060" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2061" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order.</source>
          <target state="translated">Esegue un successivo ordinamento in senso decrescente degli elementi di una sequenza.</target>       </trans-unit>
        <trans-unit id="2062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2063" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2064" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> che contiene gli elementi da ordinare.</target>       </trans-unit>
        <trans-unit id="2065" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Funzione per estrarre una chiave da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2066" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</source>
          <target state="translated">Esegue un successivo ordinamento in senso decrescente in base a una chiave degli elementi di una sequenza.</target>       </trans-unit>
        <trans-unit id="2067" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</target>       </trans-unit>
        <trans-unit id="2068" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="2069" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="2070" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2071" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph4">`keySelector`</ph>.</source>
          <target state="translated">Per ordinare una sequenza in base ai valori degli elementi stessi, specificare la funzione identity (<ph id="ph1">`x =&gt; x`</ph> in Visual c# o <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) per <ph id="ph4">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="2072" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> vengono definiti per estendere il tipo <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, che è anche il tipo restituito di questi metodi.</target>       </trans-unit>
        <trans-unit id="2073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">Questa progettazione consente di specificare più criteri di ordinamento applicando un numero qualsiasi di <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> metodi.</target>       </trans-unit>
        <trans-unit id="2074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Poiché <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> eredita da <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, è possibile chiamare <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> o <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> sui risultati di una chiamata a <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> o <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">In questo modo viene introdotto un nuovo ordinamento primario che ignora l'ordinamento stabilita in precedenza.</target>       </trans-unit>
        <trans-unit id="2076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This sorting method compares keys by using the default comparer <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</source>
          <target state="translated">Questo metodo di ordinamento confronta i valori utilizzando l'operatore di confronto <ph id="ph1">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Questo metodo esegue un ordinamento stabile; ovvero, se le chiavi di due elementi sono uguali, l'ordine degli elementi viene mantenuto.</target>       </trans-unit>
        <trans-unit id="2078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Al contrario, un ordinamento instabile non mantiene l'ordine degli elementi che hanno la stessa chiave.</target>       </trans-unit>
        <trans-unit id="2079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In Visual C# query expression syntax, an <ph id="ph1">`orderby [first criterion], [second criterion] descending`</ph> clause translates to an invocation of <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">In Visual c# sintassi delle espressioni di query, un <ph id="ph1">`orderby [first criterion], [second criterion] descending`</ph> clausola viene convertita in una chiamata di <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> query expression syntax, an <ph id="ph2">`Order By [first criterion], [second criterion] Descending`</ph> clause translates to an invocation of <ph id="ph3">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">In <ph id="ph1">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> sintassi dell'espressione di query un <ph id="ph2">`Order By [first criterion], [second criterion] Descending`</ph> clausola viene convertita in una chiamata di <ph id="ph3">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2081" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2084" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> that contains elements to sort.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> che contiene gli elementi da ordinare.</target>       </trans-unit>
        <trans-unit id="2085" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Funzione per estrarre una chiave da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2086" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IComparer`1" /&gt;</ph> per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2087" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</source>
          <target state="translated">Esegue un ordinamento secondario in senso decrescente degli elementi di una sequenza utilizzando un operatore di confronto specificato.</target>       </trans-unit>
        <trans-unit id="2088" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> whose elements are sorted in descending order according to a key.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.IOrderedEnumerable`1" /&gt;</ph> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</target>       </trans-unit>
        <trans-unit id="2089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="2090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="2091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>To order a sequence by the values of the elements themselves, specify the identity function (<ph id="ph1">`x =&gt; x`</ph> in Visual C# or <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) for <ph id="ph4">`keySelector`</ph>.</source>
          <target state="translated">Per ordinare una sequenza in base ai valori degli elementi stessi, specificare la funzione identity (<ph id="ph1">`x =&gt; x`</ph> in Visual c# o <ph id="ph2">`Function(x) x`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) per <ph id="ph4">`keySelector`</ph>.</target>       </trans-unit>
        <trans-unit id="2093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> are defined to extend the type <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, which is also the return type of these methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> vengono definiti per estendere il tipo <ph id="ph3">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph>, che è anche il tipo restituito di questi metodi.</target>       </trans-unit>
        <trans-unit id="2094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This design enables you to specify multiple sort criteria by applying any number of <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> methods.</source>
          <target state="translated">Questa progettazione consente di specificare più criteri di ordinamento applicando un numero qualsiasi di <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph> metodi.</target>       </trans-unit>
        <trans-unit id="2095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Because <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> inherits from <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can call <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> on the results of a call to <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> or <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</source>
          <target state="translated">Poiché <ph id="ph1">&lt;xref:System.Linq.IOrderedEnumerable%601&gt;</ph> eredita da <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, è possibile chiamare <ph id="ph3">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph> o <ph id="ph4">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph> sui risultati di una chiamata a <ph id="ph5">&lt;xref:System.Linq.Enumerable.OrderBy%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Linq.Enumerable.OrderByDescending%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Linq.Enumerable.ThenBy%2A&gt;</ph> o <ph id="ph8">&lt;xref:System.Linq.Enumerable.ThenByDescending%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>Doing this introduces a new primary ordering that ignores the previously established ordering.</source>
          <target state="translated">In questo modo viene introdotto un nuovo ordinamento primario che ignora l'ordinamento stabilita in precedenza.</target>       </trans-unit>
        <trans-unit id="2097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default comparer <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> è <ph id="ph2">`null`</ph>, l'operatore di confronto <ph id="ph3">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</source>
          <target state="translated">Questo metodo esegue un ordinamento stabile; ovvero, se le chiavi di due elementi sono uguali, l'ordine degli elementi viene mantenuto.</target>       </trans-unit>
        <trans-unit id="2099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>In contrast, an unstable sort does not preserve the order of elements that have the same key.</source>
          <target state="translated">Al contrario, un ordinamento instabile non mantiene l'ordine degli elementi che hanno la stessa chiave.</target>       </trans-unit>
        <trans-unit id="2100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29&gt;</ph> per eseguire un ordinamento secondario degli elementi in una sequenza in ordine decrescente usando un operatore di confronto personalizzato.</target>       </trans-unit>
        <trans-unit id="2101" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2103" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create an array from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da cui creare una matrice.</target>       </trans-unit>
        <trans-unit id="2104" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Creates an array from a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Crea una matrice da un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2105" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An array that contains the elements from the input sequence.</source>
          <target state="translated">Oggetto che contiene gli elementi dalla sequenza di input .</target>       </trans-unit>
        <trans-unit id="2106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method forces immediate query evaluation and returns an array that contains the query results.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> metodo impone la valutazione immediata di una query e restituisce una matrice che contiene i risultati della query.</target>       </trans-unit>
        <trans-unit id="2107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>You can append this method to your query in order to obtain a cached copy of the query results.</source>
          <target state="translated">È possibile aggiungere questo metodo per la query per ottenere una copia memorizzata nella cache dei risultati della query.</target>       </trans-unit>
        <trans-unit id="2108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> has similar behavior but returns a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> instead of an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> ha un comportamento simile ma restituisce un <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> invece di una matrice.</target>       </trans-unit>
        <trans-unit id="2109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> to force immediate query evaluation and return an array of results.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> per forzare la valutazione immediata di una query e restituire una matrice di risultati.</target>       </trans-unit>
        <trans-unit id="2110" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2111" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2114" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da cui creare un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2115" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Funzione per estrarre una chiave da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2116" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> secondo una funzione del selettore principale specificata.</target>       </trans-unit>
        <trans-unit id="2117" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> che contiene chiavi e valori.</target>       </trans-unit>
        <trans-unit id="2118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method uses the default equality comparer <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> to compare keys.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> metodo Usa l'operatore di uguaglianza predefinito <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> to create a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> by using a key selector.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> per creare un <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> utilizzando un selettore di chiave.</target>       </trans-unit>
        <trans-unit id="2120" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2121" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="2122" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> genera una chiave che è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2123" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> genera chiavi duplicate per due elementi.</target>       </trans-unit>
        <trans-unit id="2124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the keys returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiavi restituite dalle <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2126" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da cui creare un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2127" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Funzione per estrarre una chiave da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2128" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2129" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function and key comparer.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> secondo una funzione del selettore principale specificata e un operatore di confronto principale.</target>       </trans-unit>
        <trans-unit id="2130" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> che contiene chiavi e valori.</target>       </trans-unit>
        <trans-unit id="2131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2132" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2133" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="2134" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> genera una chiave che è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2135" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> genera chiavi duplicate per due elementi.</target>       </trans-unit>
        <trans-unit id="2136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del valore restituito da <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2139" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da cui creare un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2140" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Funzione per estrarre una chiave da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2141" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">Funzione di trasformazione per produrre un valore dell'elemento di risultato da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2142" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to specified key selector and element selector functions.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> secondo le funzioni specificate del selettore principale e del selettore di elementi.</target>       </trans-unit>
        <trans-unit id="2143" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> che contiene valori di tipo <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selezionati dalla sequenza di input.</target>       </trans-unit>
        <trans-unit id="2144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method uses the default equality comparer <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> to compare keys.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> metodo Usa l'operatore di uguaglianza predefinito <ph id="ph2">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2145" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="source" /&gt;</ph>, il parametro <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> o il parametro <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> è <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2146" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="2147" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> genera una chiave che è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2148" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> genera chiavi duplicate per due elementi.</target>       </trans-unit>
        <trans-unit id="2149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del valore restituito da <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2152" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da cui creare un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2153" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Funzione per estrarre una chiave da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2154" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">Funzione di trasformazione per produrre un valore dell'elemento di risultato da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2155" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2156" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function, a comparer, and an element selector function.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> secondo una funzione specificata del selettore principale, un operatore di confronto principale e una funzione del selettore di elementi.</target>       </trans-unit>
        <trans-unit id="2157" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Dictionary`2" /&gt;</ph> che contiene valori di tipo <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selezionati dalla sequenza di input.</target>       </trans-unit>
        <trans-unit id="2158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2159" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="source" /&gt;</ph>, il parametro <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> o il parametro <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> è <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2160" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="2161" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces a key that is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> genera una chiave che è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2162" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> produces duplicate keys for two elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="keySelector" /&gt;</ph> genera chiavi duplicate per due elementi.</target>       </trans-unit>
        <trans-unit id="2163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2164" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da cui creare un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2165" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2166" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> that contains values of type TSource selected from the input sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> che contiene valori di tipo TSource selezionati dalla sequenza di input.</target>       </trans-unit>
        <trans-unit id="2167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2168" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da cui creare un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2169" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2170" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> using the <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> to compare keys</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> usando <ph id="ph3">&lt;paramref name="comparer" /&gt;</ph> per confrontare le chiavi</target>       </trans-unit>
        <trans-unit id="2171" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.HashSet`1" /&gt;</ph> che contiene valori di tipo <ph id="ph2">&lt;paramref name="TSource" /&gt;</ph> selezionati dalla sequenza di input.</target>       </trans-unit>
        <trans-unit id="2172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2173" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da cui creare un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2174" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2175" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> that contains elements from the input sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.List`1" /&gt;</ph> che contiene gli elementi dalla sequenza di input.</target>       </trans-unit>
        <trans-unit id="2176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method forces immediate query evaluation and returns a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains the query results.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> metodo impone la valutazione immediata di una query e restituisce un <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> che contiene i risultati della query.</target>       </trans-unit>
        <trans-unit id="2177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>You can append this method to your query in order to obtain a cached copy of the query results.</source>
          <target state="translated">È possibile aggiungere questo metodo per la query per ottenere una copia memorizzata nella cache dei risultati della query.</target>       </trans-unit>
        <trans-unit id="2178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> has similar behavior but returns an array instead of a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> presenta un comportamento simile ma restituisce una matrice anziché un <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> to force immediate query evaluation and return a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> that contains the query results.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> per forzare la valutazione immediata di una query e restituire un <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> che contiene i risultati della query.</target>       </trans-unit>
        <trans-unit id="2180" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2181" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Creates a generic <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</source>
          <target state="translated">Crea un generico oggetto <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2184" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da cui creare un oggetto <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2185" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Funzione per estrarre una chiave da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2186" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> secondo una funzione del selettore principale specificata.</target>       </trans-unit>
        <trans-unit id="2187" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> che contiene chiavi e valori.</target>       </trans-unit>
        <trans-unit id="2188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29&gt;</ph> metodo restituisce un <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, un dizionario uno-a-molti che esegue il mapping delle chiavi su insiemi di valori.</target>       </trans-unit>
        <trans-unit id="2189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differisce da un <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, che esegue il mapping uno a uno delle chiavi in valori singoli.</target>       </trans-unit>
        <trans-unit id="2190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Operatore di uguaglianza predefinito <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2191" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2194" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da cui creare un oggetto <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2195" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Funzione per estrarre una chiave da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2196" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2197" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function and key comparer.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> secondo una funzione del selettore principale specificata e un operatore di confronto principale.</target>       </trans-unit>
        <trans-unit id="2198" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains keys and values.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> che contiene chiavi e valori.</target>       </trans-unit>
        <trans-unit id="2199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> metodo restituisce un <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, un dizionario uno-a-molti che esegue il mapping delle chiavi su insiemi di valori.</target>       </trans-unit>
        <trans-unit id="2200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> is different to a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> è diverso da un <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, che esegue il mapping uno a uno delle chiavi in valori singoli.</target>       </trans-unit>
        <trans-unit id="2201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2202" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del valore restituito da <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2206" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da cui creare un oggetto <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2207" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Funzione per estrarre una chiave da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2208" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">Funzione di trasformazione per produrre un valore dell'elemento di risultato da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2209" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to specified key selector and element selector functions.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> secondo le funzioni specificate del selettore principale e del selettore di elementi.</target>       </trans-unit>
        <trans-unit id="2210" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> che contiene valori di tipo <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selezionati dalla sequenza di input.</target>       </trans-unit>
        <trans-unit id="2211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> metodo restituisce un <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, un dizionario uno-a-molti che esegue il mapping delle chiavi su insiemi di valori.</target>       </trans-unit>
        <trans-unit id="2212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differisce da un <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, che esegue il mapping uno a uno delle chiavi in valori singoli.</target>       </trans-unit>
        <trans-unit id="2213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Operatore di uguaglianza predefinito <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> to create a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> by using a key selector function and an element selector function.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29&gt;</ph> per creare un <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph> utilizzando una funzione del selettore principale e una funzione del selettore di elemento.</target>       </trans-unit>
        <trans-unit id="2215" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="source" /&gt;</ph>, il parametro <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> o il parametro <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> è <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the key returned by <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di chiave restituita dal <bpt id="p1">&lt;c&gt;</bpt>keySelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The type of the value returned by <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo del valore restituito da <bpt id="p1">&lt;c&gt;</bpt>elementSelector<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2219" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to create a <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da cui creare un oggetto <ph id="ph2">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2220" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A function to extract a key from each element.</source>
          <target state="translated">Funzione per estrarre una chiave da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2221" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A transform function to produce a result element value from each element.</source>
          <target state="translated">Funzione di trasformazione per produrre un valore dell'elemento di risultato da ogni elemento.</target>       </trans-unit>
        <trans-unit id="2222" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare keys.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2223" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> from an <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> according to a specified key selector function, a comparer and an element selector function.</source>
          <target state="translated">Crea un oggetto <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> da un oggetto <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> secondo una funzione specificata del selettore principale, un operatore di confronto principale e una funzione del selettore di elementi.</target>       </trans-unit>
        <trans-unit id="2224" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> that contains values of type <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selected from the input sequence.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Linq.Lookup`2" /&gt;</ph> che contiene valori di tipo <ph id="ph2">&lt;paramref name="TElement" /&gt;</ph> selezionati dalla sequenza di input.</target>       </trans-unit>
        <trans-unit id="2225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, a one-to-many dictionary that maps keys to collections of values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29&gt;</ph> metodo restituisce un <ph id="ph2">&lt;xref:System.Linq.Lookup%602&gt;</ph>, un dizionario uno-a-molti che esegue il mapping delle chiavi su insiemi di valori.</target>       </trans-unit>
        <trans-unit id="2226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>A <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differs from a <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which performs a one-to-one mapping of keys to single values.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Linq.Lookup%602&gt;</ph> differisce da un <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, che esegue il mapping uno a uno delle chiavi in valori singoli.</target>       </trans-unit>
        <trans-unit id="2227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source>If <ph id="ph1">`comparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> is used to compare keys.</source>
          <target state="translated">Se <ph id="ph1">`comparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph> viene utilizzato per confrontare le chiavi.</target>       </trans-unit>
        <trans-unit id="2228" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> or <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="source" /&gt;</ph>, il parametro <ph id="ph2">&lt;paramref name="keySelector" /&gt;</ph> o il parametro <ph id="ph3">&lt;paramref name="elementSelector" /&gt;</ph> è <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2229" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Produces the set union of two sequences.</source>
          <target state="translated">Produce l'unione insiemistica delle due sequenze.</target>       </trans-unit>
        <trans-unit id="2230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Tipo degli elementi delle sequenze di input.</target>       </trans-unit>
        <trans-unit id="2231" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the first set for the union.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi distinti formano il primo insieme per l'operazione di unione.</target>       </trans-unit>
        <trans-unit id="2232" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the second set for the union.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi distinti formano il secondo insieme per l'operazione di unione.</target>       </trans-unit>
        <trans-unit id="2233" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>Produces the set union of two sequences by using the default equality comparer.</source>
          <target state="translated">Produce l'unione insiemistica delle due sequenze utilizzando l'operatore di confronto uguaglianze predefinito.</target>       </trans-unit>
        <trans-unit id="2234" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene gli elementi di entrambe le sequenze di input, tranne i duplicati.</target>       </trans-unit>
        <trans-unit id="2235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="2236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="2237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This method excludes duplicates from the return set.</source>
          <target state="translated">Questo metodo consente di escludere i duplicati dal set restituito.</target>       </trans-unit>
        <trans-unit id="2239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>This is different behavior to the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method, which returns all the elements in the input sequences including duplicates.</source>
          <target state="translated">Questo comportamento è diverso per il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> metodo, che restituisce tutti gli elementi nelle sequenze di input, inclusi i duplicati.</target>       </trans-unit>
        <trans-unit id="2240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The default equality comparer, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values of the types that implement the <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface.</source>
          <target state="translated">Operatore di uguaglianza predefinito, <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per confrontare i valori di tipi che implementano il <ph id="ph2">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interfaccia generica.</target>       </trans-unit>
        <trans-unit id="2241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>To compare a custom data type, you need to implement this interface and provide your own <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods for the type.</source>
          <target state="translated">Per confrontare un tipo di dati personalizzato, è necessario implementare questa interfaccia e fornire la propria <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> metodi per il tipo.</target>       </trans-unit>
        <trans-unit id="2242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumerates <ph id="ph2">`first`</ph> and <ph id="ph3">`second`</ph> in that order and yields each element that has not already been yielded.</source>
          <target state="translated">Quando l'oggetto restituito da questo metodo viene enumerato, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumera <ph id="ph2">`first`</ph> e <ph id="ph3">`second`</ph> nell'ordine specificato e restituisce ogni elemento che non è già stato restituito.</target>       </trans-unit>
        <trans-unit id="2243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> to obtain the union of two sequences of integers.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> per ottenere l'unione di due sequenze di numeri interi.</target>       </trans-unit>
        <trans-unit id="2244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>If you want to compare sequences of objects of a custom data type, you have to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> generic interface in a helperclass.</source>
          <target state="translated">Se si desidera confrontare sequenze di oggetti di un tipo di dati personalizzati, è necessario implementare la <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interfaccia generica in un helperclass.</target>       </trans-unit>
        <trans-unit id="2245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>The following code example shows how to implement this interface in a custom data type and provide <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> methods.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come implementare questa interfaccia in un tipo di dati personalizzati e fornire <ph id="ph1">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> metodi.</target>       </trans-unit>
        <trans-unit id="2246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source>After you implement this interface, you can use sequences of <ph id="ph1">`ProductA`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Dopo aver implementato questa interfaccia, è possibile utilizzare le sequenze di <ph id="ph1">`ProductA`</ph> gli oggetti di <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29&gt;</ph> (metodo), come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="2247" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> o <ph id="ph2">&lt;paramref name="second" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The type of the elements of the input sequences.</source>
          <target state="translated">Tipo degli elementi delle sequenze di input.</target>       </trans-unit>
        <trans-unit id="2249" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the first set for the union.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi distinti formano il primo insieme per l'operazione di unione.</target>       </trans-unit>
        <trans-unit id="2250" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> whose distinct elements form the second set for the union.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> i cui elementi distinti formano il secondo insieme per l'operazione di unione.</target>       </trans-unit>
        <trans-unit id="2251" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> to compare values.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> per confrontare i valori.</target>       </trans-unit>
        <trans-unit id="2252" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>Produces the set union of two sequences by using a specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph>.</source>
          <target state="translated">Produce l'unione insiemistica di due sequenze utilizzando un oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEqualityComparer`1" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="2253" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains the elements from both input sequences, excluding duplicates.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene gli elementi di entrambe le sequenze di input, tranne i duplicati.</target>       </trans-unit>
        <trans-unit id="2254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="2255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="2256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>If c<ph id="ph1">`omparer`</ph> is <ph id="ph2">`null`</ph>, the default equality comparer, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, is used to compare values.</source>
          <target state="translated">Se c<ph id="ph1">`omparer`</ph> è <ph id="ph2">`null`</ph>, operatore di uguaglianza predefinito, <ph id="ph3">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A&gt;</ph>, viene utilizzato per confrontare valori.</target>       </trans-unit>
        <trans-unit id="2258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>When the object returned by this method is enumerated, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumerates <ph id="ph2">`first`</ph> and <ph id="ph3">`second`</ph> in that order and yields each element that has not already been yielded.</source>
          <target state="translated">Quando l'oggetto restituito da questo metodo viene enumerato, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> enumera <ph id="ph2">`first`</ph> e <ph id="ph3">`second`</ph> nell'ordine specificato e restituisce ogni elemento che non è già stato restituito.</target>       </trans-unit>
        <trans-unit id="2259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method differs from the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method because the <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> method returns all the elements in the input sequences including duplicates, whereas <ph id="ph4">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> returns only unique values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> metodo differisce dal <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> metodo perché il <ph id="ph3">&lt;xref:System.Linq.Enumerable.Concat%2A&gt;</ph> metodo restituisce tutti gli elementi nelle sequenze di input, inclusi i duplicati, mentre <ph id="ph4">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> restituisce solo valori univoci.</target>       </trans-unit>
        <trans-unit id="2260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>The following example shows how to implement an equality comparer that can be used in the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come implementare un confronto di uguaglianza che può essere usato nel <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="2261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source>After you implement this comparer, you can use sequences of <ph id="ph1">`Product`</ph> objects in the <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Dopo aver implementato questo operatore di confronto, è possibile utilizzare le sequenze di <ph id="ph1">`Product`</ph> gli oggetti di <ph id="ph2">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> (metodo), come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="2262" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> o <ph id="ph2">&lt;paramref name="second" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2263" translate="yes" xml:space="preserve" uid="T:System.Linq.Enumerable">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtra una sequenza di valori in base a un predicato.</target>       </trans-unit>
        <trans-unit id="2264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2265" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to filter.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da filtrare.</target>       </trans-unit>
        <trans-unit id="2266" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>A function to test each element for a condition.</source>
          <target state="translated">Funzione per testare ogni elemento rispetto a una condizione.</target>       </trans-unit>
        <trans-unit id="2267" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtra una sequenza di valori in base a un predicato.</target>       </trans-unit>
        <trans-unit id="2268" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence that satisfy the condition.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene gli elementi dalla sequenza di input che soddisfano la condizione.</target>       </trans-unit>
        <trans-unit id="2269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="2270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="2271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>In query expression syntax, a <ph id="ph1">`where`</ph> (Visual C#) or <ph id="ph2">`Where`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clause translates to an invocation of <ph id="ph4">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>.</source>
          <target state="translated">Nella sintassi delle espressioni di query, una <ph id="ph1">`where`</ph> (Visual c#) o <ph id="ph2">`Where`</ph> (<ph id="ph3">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>) clausola viene convertita in una chiamata di <ph id="ph4">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> to filter a sequence.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29&gt;</ph> per filtrare una sequenza.</target>       </trans-unit>
        <trans-unit id="2274" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The type of the elements of <bpt id="p1">&lt;c&gt;</bpt>source<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo degli elementi di <bpt id="p1">&lt;c&gt;</bpt>origine<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="2276" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> to filter.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> da filtrare.</target>       </trans-unit>
        <trans-unit id="2277" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</source>
          <target state="translated">Funzione per verificare ogni elemento di origine per una condizione; il secondo parametro della funzione rappresenta l'indice dell'elemento di origine.</target>       </trans-unit>
        <trans-unit id="2278" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Filters a sequence of values based on a predicate.</source>
          <target state="translated">Filtra una sequenza di valori in base a un predicato.</target>       </trans-unit>
        <trans-unit id="2279" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>Each element's index is used in the logic of the predicate function.</source>
          <target state="translated">L'indice di ogni elemento viene usato nella logica della funzione predicato.</target>       </trans-unit>
        <trans-unit id="2280" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains elements from the input sequence that satisfy the condition.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene gli elementi dalla sequenza di input che soddisfano la condizione.</target>       </trans-unit>
        <trans-unit id="2281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="2282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="2283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The first argument of <ph id="ph1">`predicate`</ph> represents the element to test.</source>
          <target state="translated">Il primo argomento della <ph id="ph1">`predicate`</ph> rappresenta l'elemento di test.</target>       </trans-unit>
        <trans-unit id="2285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The second argument represents the zero-based index of the element within <ph id="ph1">`source`</ph>.</source>
          <target state="translated">Il secondo argomento rappresenta l'indice in base zero dell'elemento all'interno di <ph id="ph1">`source`</ph>.</target>       </trans-unit>
        <trans-unit id="2286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> to filter a sequence based on a predicate that involves the index of each element.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29&gt;</ph> per filtrare una sequenza in base a un predicato che incorpora l'indice di ogni elemento.</target>       </trans-unit>
        <trans-unit id="2287" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
          <source><ph id="ph1">&lt;paramref name="source" /&gt;</ph> or <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="source" /&gt;</ph> o <ph id="ph2">&lt;paramref name="predicate" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="2288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The type of the elements of the first input sequence.</source>
          <target state="translated">Tipo degli elementi della prima sequenza di input.</target>       </trans-unit>
        <trans-unit id="2289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The type of the elements of the second input sequence.</source>
          <target state="translated">Tipo degli elementi della seconda sequenza di input.</target>       </trans-unit>
        <trans-unit id="2290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The type of the elements of the result sequence.</source>
          <target state="translated">Tipo degli elementi della sequenza risultante.</target>       </trans-unit>
        <trans-unit id="2291" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The first sequence to merge.</source>
          <target state="translated">Prima sequenza da unire.</target>       </trans-unit>
        <trans-unit id="2292" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The second sequence to merge.</source>
          <target state="translated">Seconda sequenza da unire.</target>       </trans-unit>
        <trans-unit id="2293" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>A function that specifies how to merge the elements from the two sequences.</source>
          <target state="translated">Una funzione che specifica come unire gli elementi dalle due sequenze.</target>       </trans-unit>
        <trans-unit id="2294" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</source>
          <target state="translated">Applica una funzione specificata agli elementi corrispondenti di due sequenze, producendo una sequenza dei risultati.</target>       </trans-unit>
        <trans-unit id="2295" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> that contains merged elements of two input sequences.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> che contiene gli elementi uniti delle due sequenze di input.</target>       </trans-unit>
        <trans-unit id="2296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>This method is implemented by using deferred execution.</source>
          <target state="translated">Questo metodo viene implementato tramite esecuzione posticipata.</target>       </trans-unit>
        <trans-unit id="2297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The immediate return value is an object that stores all the information that is required to perform the action.</source>
          <target state="translated">Il valore restituito immediato è un oggetto che archivia tutte le informazioni necessarie per eseguire l'azione.</target>       </trans-unit>
        <trans-unit id="2298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The query represented by this method is not executed until the object is enumerated either by calling its <ph id="ph1">`GetEnumerator`</ph> method directly or by using <ph id="ph2">`foreach`</ph> in Visual C# or <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</source>
          <target state="translated">La query rappresentata da questo metodo non viene eseguita finché l'oggetto viene enumerata chiamando il relativo <ph id="ph1">`GetEnumerator`</ph> metodo direttamente oppure tramite <ph id="ph2">`foreach`</ph> in Visual c# o <ph id="ph3">`For Each`</ph> in <ph id="ph4">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="2299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The method merges each element of the first sequence with an element that has the same index in the second sequence.</source>
          <target state="translated">Il metodo unisce ogni elemento della prima sequenza con un elemento con lo stesso indice nella seconda sequenza.</target>       </trans-unit>
        <trans-unit id="2300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</source>
          <target state="translated">Se le sequenze non hanno lo stesso numero di elementi, il metodo unisce le sequenze di fino a quando non viene raggiunta la fine di uno di essi.</target>       </trans-unit>
        <trans-unit id="2301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</source>
          <target state="translated">Ad esempio, se una sequenza dispone di tre elementi e l'altra dispone di quattro, la sequenza di risultati disporrà solo tre elementi.</target>       </trans-unit>
        <trans-unit id="2302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Zip%2A&gt;</ph> method to merge two sequences.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come utilizzare il <ph id="ph1">&lt;xref:System.Linq.Enumerable.Zip%2A&gt;</ph> metodo per unire due sequenze.</target>       </trans-unit>
        <trans-unit id="2303" translate="yes" xml:space="preserve" uid="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
          <source><ph id="ph1">&lt;paramref name="first" /&gt;</ph> or <ph id="ph2">&lt;paramref name="second" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="first" /&gt;</ph> o <ph id="ph2">&lt;paramref name="second" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>