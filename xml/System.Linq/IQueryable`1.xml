<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cd9bbf59b99fa01f9cd26081e78ad3eccd4f035d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30459085" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="5babb-101">Tipo di dati nell’origine dati.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5babb-101">The type of the data in the data source.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="5babb-102">Fornisce funzionalità per valutare le query rispetto a un'origine dati specifica in cui il tipo di dati non è noto.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5babb-102">Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5babb-103">Il <xref:System.Linq.IQueryable%601> interfaccia è destinata all'implementazione dei provider di query.</span><span class="sxs-lookup"><span data-stu-id="5babb-103">The <xref:System.Linq.IQueryable%601> interface is intended for implementation by query providers.</span></span>  
  
 <span data-ttu-id="5babb-104">Questa interfaccia eredita il <xref:System.Collections.Generic.IEnumerable%601> interfaccia in modo che se rappresenta una query, possono essere enumerati i risultati della query.</span><span class="sxs-lookup"><span data-stu-id="5babb-104">This interface inherits the <xref:System.Collections.Generic.IEnumerable%601> interface so that if it represents a query, the results of that query can be enumerated.</span></span> <span data-ttu-id="5babb-105">Enumerazione forza la struttura ad albero dell'espressione associata a un <xref:System.Linq.IQueryable%601> oggetto da eseguire.</span><span class="sxs-lookup"><span data-stu-id="5babb-105">Enumeration forces the expression tree associated with an <xref:System.Linq.IQueryable%601> object to be executed.</span></span> <span data-ttu-id="5babb-106">Le query che non restituiscono risultati enumerabili vengono eseguite quando il <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="5babb-106">Queries that do not return enumerable results are executed when the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method is called.</span></span>  
  
 <span data-ttu-id="5babb-107">La definizione di "esecuzione di una struttura ad albero dell'espressione" è specifica di un provider di query.</span><span class="sxs-lookup"><span data-stu-id="5babb-107">The definition of "executing an expression tree" is specific to a query provider.</span></span> <span data-ttu-id="5babb-108">Ad esempio, può implicare la traduzione di albero delle espressioni in un linguaggio di query appropriato per un'origine dati sottostante.</span><span class="sxs-lookup"><span data-stu-id="5babb-108">For example, it may involve translating the expression tree to a query language appropriate for an underlying data source.</span></span>  
  
 <span data-ttu-id="5babb-109">Il <xref:System.Linq.IQueryable%601> interfaccia consente alle query di essere polimorfiche.</span><span class="sxs-lookup"><span data-stu-id="5babb-109">The <xref:System.Linq.IQueryable%601> interface enables queries to be polymorphic.</span></span> <span data-ttu-id="5babb-110">Ovvero, in quanto una query su un `IQueryable` origine dati è rappresentata come un albero delle espressioni, può essere eseguita su diversi tipi di origini dati.</span><span class="sxs-lookup"><span data-stu-id="5babb-110">That is, because a query against an `IQueryable` data source is represented as an expression tree, it can be executed against different types of data sources.</span></span>  
  
 <span data-ttu-id="5babb-111">Il `static` (`Shared` in Visual Basic) metodi definiti nella classe <xref:System.Linq.Queryable> (ad eccezione di <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>, e <xref:System.Linq.Queryable.ThenByDescending%2A>) estendono gli oggetti di tipi che implementano il <xref:System.Linq.IQueryable%601> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="5babb-111">The `static` (`Shared` in Visual Basic) methods defined in the class <xref:System.Linq.Queryable> (except for <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>, and <xref:System.Linq.Queryable.ThenByDescending%2A>) extend objects of types that implement the <xref:System.Linq.IQueryable%601> interface.</span></span>  
  
 <span data-ttu-id="5babb-112">Per ulteriori informazioni su come creare un provider LINQ, vedere [LINQ: Building an IQueryable Provider](http://go.microsoft.com/fwlink/?LinkID=112370) nei blog di MSDN.</span><span class="sxs-lookup"><span data-stu-id="5babb-112">For more information about how to create your own LINQ provider, see [LINQ: Building an IQueryable Provider](http://go.microsoft.com/fwlink/?LinkID=112370) on MSDN Blogs.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>