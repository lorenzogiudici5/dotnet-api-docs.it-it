<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d66c61830c60670687228ad8681be7fa396883aa" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51880362" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Tipo di dati nell’origine dati.</typeparam>
    <summary>Fornisce funzionalità per valutare le query rispetto a un'origine dati specifica in cui il tipo di dati non è noto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Linq.IQueryable%601> interfaccia è destinata all'implementazione dei provider di query.  
  
 Questa interfaccia eredita il <xref:System.Collections.Generic.IEnumerable%601> interfaccia in modo che, se rappresenta una query, i risultati della query possono essere enumerati. Enumerazione forza l'albero delle espressioni associato un <xref:System.Linq.IQueryable%601> oggetto da eseguire. Le query che non restituiscono risultati enumerabili vengono eseguite quando il <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> viene chiamato il metodo.  
  
 La definizione di "esecuzione di un albero delle espressioni" è specifica per un provider di query. Ad esempio, può implicare la traduzione dell'albero delle espressioni in un linguaggio di query appropriato per un'origine dati sottostante.  
  
 Il <xref:System.Linq.IQueryable%601> interfaccia consente alle query di essere polimorfiche. Vale a dire, poiché una query su un `IQueryable` origine dati viene rappresentata come un albero delle espressioni, può essere eseguita su diversi tipi di origini dati.  
  
 Il `static` (`Shared` in Visual Basic) i metodi definiti nella classe <xref:System.Linq.Queryable> (ad eccezione dei <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>, e <xref:System.Linq.Queryable.ThenByDescending%2A>) estendono gli oggetti di tipi che implementano il <xref:System.Linq.IQueryable%601> interfaccia.  
  
 Per altre informazioni su come creare un proprio provider LINQ, vedere [LINQ: compilare un IQueryable Provider](https://go.microsoft.com/fwlink/?LinkID=112370) sul blog di MSDN.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>