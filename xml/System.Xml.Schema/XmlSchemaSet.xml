<Type Name="XmlSchemaSet" FullName="System.Xml.Schema.XmlSchemaSet">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4a8255cc55bda67d8801f7b7d30e1901d6b1db59" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52222938" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlSchemaSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSchemaSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Schema.XmlSchemaSet" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlSchemaSet" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlSchemaSet" />
  <TypeSignature Language="F#" Value="type XmlSchemaSet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contiene una cache di schemi XSD (XML Schema Definition Language).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  -   Non usare gli schemi da origini sconosciute o non attendibile o percorsi. In questo modo può pregiudicare la sicurezza del codice.  
> -   Schemi XML (inclusi gli schemi inline) sono intrinsecamente vulnerabili ad attacchi denial of service; non le accetti in scenari non affidabili.  
> -   Le eccezioni e messaggi di errore di convalida dello schema possono esporre informazioni riservate riguardanti il modello di contenuto o i percorsi URI per il file di schema. Prestare attenzione a non esporre queste informazioni per i chiamanti non attendibili.  
> -   Considerazioni aggiuntive sulla sicurezza sono descritte nella sezione "Considerazioni sulla sicurezza".  
  
 <xref:System.Xml.Schema.XmlSchemaSet> è una cache o una libreria in cui è possibile archiviare schemi XML Schema definition language (XSD). <xref:System.Xml.Schema.XmlSchemaSet> consente di migliorare le prestazioni grazie alla memorizzazione degli schemi nella cache. In tal modo non è più necessario accedere ad essi da un file o un URL. Ogni schema è identificato dallo spazio dei nomi URI e percorso che è stato specificato quando lo schema è stato aggiunto al set. Si utilizza il <xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=nameWithType> proprietà da assegnare il <xref:System.Xml.Schema.XmlSchemaSet> deve usare un lettore XML per la convalida dei dati dell'oggetto.  
  
## <a name="security-considerations"></a>Considerazioni sulla sicurezza  
  
-   Non usare gli schemi da origini sconosciute o non attendibili. In questo modo può pregiudicare la sicurezza del codice. Spazi dei nomi esterni o percorsi a cui fa riferimento sono inclusi, importazione e ridefinizione di elementi di uno schema vengono risolte rispetto all'URI di base dello schema che li include o Importa. Ad esempio, se l'URI di base dell'inclusione o importazione di schemi è vuota o `null`, i percorsi esterni vengono risolti in relazione alla directory corrente. Il <xref:System.Xml.XmlUrlResolver> classe viene utilizzata per la risoluzione degli schemi esterni per impostazione predefinita. Per disabilitare la risoluzione di inclusione, importazione e ridefinire gli elementi di uno schema, impostare il <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> proprietà `null`.  
  
-   Il <xref:System.Xml.Schema.XmlSchemaSet> classe Usa il <xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType> classe per analizzare e far corrispondere le espressioni regolari in un XML schema. La convalida degli aspetti dello schema con espressioni regolari in un XML schema può comportare un aumento dell'utilizzo della CPU e deve essere evitata negli scenari a disponibilità elevata.  
  
-   Le eccezioni generate in seguito all'utilizzo di <xref:System.Xml.Schema.XmlSchemaSet> classe, ad esempio il <xref:System.Xml.Schema.XmlSchemaException> classe può contenere informazioni riservate che non devono essere esposte in scenari non affidabili. Ad esempio, il <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> proprietà di un <xref:System.Xml.Schema.XmlSchemaException> restituisce il percorso dell'URI del file di schema che ha causato l'eccezione. Il <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> proprietà non deve essere esposte in scenari non affidabili. Le eccezioni devono essere gestite correttamente in modo che queste informazioni riservate non viene esposto in scenari non affidabili.  
  
   
  
## Examples  
 Nell'esempio seguente un file XML viene convalidato utilizzando gli schemi memorizzati in <xref:System.Xml.Schema.XmlSchemaSet>. Lo spazio dei nomi nel file XML, `urn:bookstore-schema`, consente di identificare gli schemi in <xref:System.Xml.Schema.XmlSchemaSet> da utilizzare per la convalida.  
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
## <a name="input"></a>Input  
 Nell'esempio vengono utilizzati i seguenti due file di input:  
  
 **booksSchemaFail.xml:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 **books.xsd:**  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
## <a name="output"></a>Output  
 Errore di convalida: l'elemento "book" nello spazio dei nomi "urn:bookstore-schema" presenta l'elemento figlio "author" non valido nello spazio dei nomi "urn:bookstore-schema". Previsto "title" nello spazio dei nomi "urn:bookstore-schema".  
  
 Errore di convalida: l'elemento "author" nello spazio dei nomi "urn:bookstore-schema" presenta l'elemento figlio "name" non valido nello spazio dei nomi "urn:bookstore-schema". Previsto "first-name" nello spazio dei nomi "urn:bookstore-schema".  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSchemaSet (System.Xml.XmlNameTable nameTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nameTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nameTable As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlSchemaSet(System::Xml::XmlNameTable ^ nameTable);" />
      <MemberSignature Language="F#" Value="new System.Xml.Schema.XmlSchemaSet : System.Xml.XmlNameTable -&gt; System.Xml.Schema.XmlSchemaSet" Usage="new System.Xml.Schema.XmlSchemaSet nameTable" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nameTable" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nameTable">Oggetto <see cref="T:System.Xml.XmlNameTable" /> da utilizzare.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Xml.Schema.XmlSchemaSet" /> con l'oggetto <see cref="T:System.Xml.XmlNameTable" /> specificato.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">L'oggetto <see cref="T:System.Xml.XmlNameTable" /> passato come parametro è <see langword="null" />.</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge lo schema XSD (XML Schema Definition Language) specificato all'oggetto <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Oggetto <see cref="T:System.Xml.Schema.XmlSchema" /> da aggiungere alla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Aggiunge l'oggetto <see cref="T:System.Xml.Schema.XmlSchema" /> specificato alla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Oggetto <see cref="T:System.Xml.Schema.XmlSchema" />, se lo schema è valido. Se lo schema non è valido e viene specificato un oggetto <see cref="T:System.Xml.Schema.ValidationEventHandler" />, viene restituito <see langword="null" /> e viene generato l'evento di convalida appropriato. In caso contrario, verrà generata un'eccezione <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Xml.Schema.XmlSchema> oggetto esiste già nel <xref:System.Xml.Schema.XmlSchemaSet>, il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metodo non esegue alcuna operazione.  
  
 La funzionalità di questo metodo è identica a quello del <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Lo schema non è valido.</exception>
        <exception cref="T:System.ArgumentNullException">L'oggetto <see cref="T:System.Xml.Schema.XmlSchema" /> passato come parametro è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xmlSchemaSet.Add schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">Oggetto <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Aggiunge tutti gli schemi XSD (XML Schema Definition Language) dell'oggetto <see cref="T:System.Xml.Schema.XmlSchemaSet" /> specificato alla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prima di aggiungere uno schema per un <xref:System.Xml.Schema.XmlSchemaSet>, deve essere pre-elaborato correttamente. Pre-elaborazione esegue le attività di base seguenti.  
  
1.  Lo schema viene verificato la validità strutturale in base alle regole di W3C XML Schema, ma lo schema non è completamente convalidato.  
  
2.  Riferimenti a componenti dello schema interni ed esterni vengono risolti. Gli schemi importati o inclusi correttamente recuperati vengono aggiunti anche i <xref:System.Xml.Schema.XmlSchemaSet>. Gli schemi importati vengono aggiunti come separato <xref:System.Xml.Schema.XmlSchema> oggetti e gli schemi inclusi diventano parte della classe incluso <xref:System.Xml.Schema.XmlSchema>.  
  
 Se il <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> proprietà del <xref:System.Xml.Schema.XmlSchemaSet> da aggiungere è `true`, tutti gli schemi nel <xref:System.Xml.Schema.XmlSchemaSet> aggiungere vengono aggiunti al <xref:System.Xml.Schema.XmlSchemaSet>. Se il <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> proprietà del <xref:System.Xml.Schema.XmlSchemaSet> da aggiungere è `false`, ogni schema aggiunto è pre-elaborato prima di essere aggiunti. Se nessuno degli schemi in appena aggiunta <xref:System.Xml.Schema.XmlSchemaSet> ha esito negativo deve essere pre-elaborato, non vengono aggiunti schemi; al contrario, un <xref:System.Xml.Schema.XmlSchemaException> viene generata un'eccezione. Di conseguenza, l'esempio di due codice seguenti non sono equivalenti.  
  
```vb  
' First example  
schemaSet.Add(schemaSet1)  
  
' Second example  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    schemaSet.Add(schema)  
  
Next  
```  
  
```csharp  
// First example  
schemaSet.Add(schemaSet1);  
  
// Second example  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    schemaSet.Add(schema);  
}  
```  
  
 Esempi di due codice precedenti non sono equivalenti. Nel primo esempio, se presente uno schema non valido `schemaSet1` e la relativa <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> è impostata su `false`, non vengono aggiunti schemi alla `schemaSet`. Nel secondo esempio, è possibile aggiungere un numero di schemi a `schemaSet` prima viene rilevato uno schema non valido e viene generata un'eccezione.  
  
   
  
## Examples  
 Il codice seguente viene illustrata l'aggiunta degli schemi per un <xref:System.Xml.Schema.XmlSchemaSet>, quindi aggiungendo il <xref:System.Xml.Schema.XmlSchemaSet> a una nuova <xref:System.Xml.Schema.XmlSchemaSet> utilizzando il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (metodo).  
  
```vb  
Dim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  
schemaSet2.Add(schemaSet1)  
```  
  
```csharp  
XmlSchemaSet schemaSet1 = new XmlSchemaSet();  
schemaSet1.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet1.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet1.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchemaSet schemaSet2 = new XmlSchemaSet();  
schemaSet2.Add(schemaSet1);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Uno schema nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" /> non è valido.</exception>
        <exception cref="T:System.ArgumentNullException">L'oggetto <see cref="T:System.Xml.Schema.XmlSchemaSet" /> passato come parametro è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, string schemaUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaUri As String) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::String ^ schemaUri);" />
      <MemberSignature Language="F#" Value="member this.Add : string * string -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">La proprietà <paramref name="targetNamespace" /> dello schema o <see langword="null" /> per utilizzare il valore <paramref name="targetNamespace" /> specificato nello schema.</param>
        <param name="schemaUri">URL che specifica lo schema da caricare.</param>
        <summary>Aggiunge lo schema XSD (XML Schema Definition Language) che si trova all'URL specificato all'oggetto <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Oggetto <see cref="T:System.Xml.Schema.XmlSchema" />, se lo schema è valido. Se lo schema non è valido e viene specificato un oggetto <see cref="T:System.Xml.Schema.ValidationEventHandler" />, viene restituito <see langword="null" /> e viene generato l'evento di convalida appropriato. In caso contrario, verrà generata un'eccezione <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prima di aggiungere uno schema per un <xref:System.Xml.Schema.XmlSchemaSet>, deve essere pre-elaborato correttamente. Pre-elaborazione esegue le attività di base seguenti.  
  
1.  Lo schema viene verificato la validità strutturale in base alle regole di W3C XML Schema, ma lo schema non è completamente convalidato.  
  
2.  Riferimenti a componenti dello schema interni ed esterni vengono risolti. Gli schemi importati o inclusi correttamente recuperati vengono aggiunti anche i <xref:System.Xml.Schema.XmlSchemaSet>. Gli schemi importati vengono aggiunti come separato <xref:System.Xml.Schema.XmlSchema> oggetti e gli schemi inclusi diventano parte della classe incluso <xref:System.Xml.Schema.XmlSchema>.  
  
 Di seguito sono importanti da considerare quando si usa il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (metodo).  
  
-   Aggiunta di uno schema per il <xref:System.Xml.Schema.XmlSchemaSet> con lo stesso URL del percorso dello spazio dei nomi e lo schema di destinazione come schema già presenti all'interno di <xref:System.Xml.Schema.XmlSchemaSet> restituirà l'oggetto dello schema originale.  
  
-   Quando un nuovo schema viene aggiunto a un <xref:System.Xml.Schema.XmlSchemaSet>, il <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> proprietà delle <xref:System.Xml.Schema.XmlSchemaSet> è impostata su `false`.  
  
-   Qualsiasi elemento di inclusione o importazione rilevato in uno schema XML verrà risolti quando il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> viene chiamato il metodo. La mancata risoluzione di inclusione e importazione di elementi produce un avviso di convalida dello schema e, se non <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> è stato specificato per il <xref:System.Xml.Schema.XmlSchemaSet> oggetto, questo avviso non verranno segnalato.  
  
-   Se uno schema con lo stesso spazio dei nomi uno schema che contiene già il <xref:System.Xml.Schema.XmlSchemaSet> viene aggiunto al <xref:System.Xml.Schema.XmlSchemaSet>, entrambi gli schemi vengono aggiunti.  
  
    > [!NOTE]
    >  Questo comportamento è diverso da obsoleta <xref:System.Xml.Schema.XmlSchemaCollection> oggetto.  
  
-   Il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metodo per il <xref:System.Xml.Schema.XmlSchemaSet> ha la possibilità di usare lo spazio dei nomi di destinazione definito in uno schema, anziché richiedere che lo spazio dei nomi di destinazione venga specificato come parametro quando il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> viene chiamato il metodo. Specificando `null` nella `targetNamespace` parametro del <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metodo indica il <xref:System.Xml.Schema.XmlSchemaSet> usare nomi di destinazione definiti nello schema, come illustrato nell'esempio di codice seguente.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add(Nothing, "books.xsd")  
  
Dim schema As XmlSchema  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
    schema.Write(Console.Out)  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add(null, "books.xsd");  
  
foreach(XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 Nell'esempio di codice precedente, `null` viene specificato come i `targetNamespace` parametro per il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (metodo). Di conseguenza, il `targetNamespace` definito in Books. XML file viene utilizzato. In questo caso, il risultato della chiamata di <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metodo sarebbe stato identico se http://www.contoso.com/books fosse stato specificato come il `targetNamespace` parametro.  
  
-   W3C XML Schema consente schemi senza uno spazio dei nomi di destinazione per essere inclusi negli schemi con uno spazio dei nomi di destinazione definito. In questo caso, viene assegnato lo schema senza uno spazio dei nomi di destinazione definito nello spazio dei nomi di destinazione dello schema di inclusione. Lo schema incluso viene considerato come se avesse tale spazio dei nomi di destinazione definito. Analogamente, è possibile aggiungere schemi senza uno spazio dei nomi di destinazione per il <xref:System.Xml.Schema.XmlSchemaSet> e inseriti nello spazio dei nomi di destinazione specificato dal <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metodo, come illustrato nell'esempio seguente.  
  
```  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">  
    <xs:element name="A" type="xs:string" />  
</xs:schema>  
```  
  
 Se lo schema precedente viene aggiunto per il <xref:System.Xml.Schema.XmlSchemaSet> con lo spazio dei nomi di destinazione http://www.contoso.com/new/targetnamespace (come illustrato nel codice seguente), viene considerato come se fosse lo spazio dei nomi dichiarato nello schema `http://www.contoso.com/new/targetnamespace`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema in schemaSet.Schemas()  
  
    Console.WriteLine(schema.TargetNamespace)     
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/new/targetnamespace", "http://www.contoso.com/targetnamespace.xsd");  
foreach(XmlSchema schema in schemaSet.Schemas())  
{  
    Console.WriteLine(schema.TargetNamespace);  
}  
```  
  
   
  
## Examples  
 L'esempio di codice seguente aggiunge il http://www.contoso.com/books.xsd dello schema con uno spazio dei nomi di destinazione http://www.contoso.com/books per il <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
```  
  
 Nell'esempio viene utilizzato il file `books.xsd` come input.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Lo schema non è valido.</exception>
        <exception cref="T:System.ArgumentNullException">L'URL passato come parametro è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Add(string targetNamespace, class System.Xml.XmlReader schemaDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (targetNamespace As String, schemaDocument As XmlReader) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Add(System::String ^ targetNamespace, System::Xml::XmlReader ^ schemaDocument);" />
      <MemberSignature Language="F#" Value="member this.Add : string * System.Xml.XmlReader -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Add (targetNamespace, schemaDocument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
        <Parameter Name="schemaDocument" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">La proprietà <paramref name="targetNamespace" /> dello schema o <see langword="null" /> per utilizzare il valore <paramref name="targetNamespace" /> specificato nello schema.</param>
        <param name="schemaDocument">Oggetto <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Aggiunge lo schema XSD (XML Schema Definition Language) contenuto nella classe <see cref="T:System.Xml.XmlReader" /> alla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Oggetto <see cref="T:System.Xml.Schema.XmlSchema" />, se lo schema è valido. Se lo schema non è valido e viene specificato un oggetto <see cref="T:System.Xml.Schema.ValidationEventHandler" />, viene restituito <see langword="null" /> e viene generato l'evento di convalida appropriato. In caso contrario, verrà generata un'eccezione <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prima di aggiungere uno schema per un <xref:System.Xml.Schema.XmlSchemaSet>, deve essere pre-elaborato correttamente. Pre-elaborazione esegue le attività di base seguenti.  
  
1.  Lo schema viene verificato la validità strutturale in base alle regole di W3C XML Schema, ma lo schema non è completamente convalidato.  
  
2.  Riferimenti a componenti dello schema interni ed esterni vengono risolti. Gli schemi importati o inclusi correttamente recuperati vengono aggiunti anche i <xref:System.Xml.Schema.XmlSchemaSet>. Gli schemi importati vengono aggiunti come separato <xref:System.Xml.Schema.XmlSchema> oggetti e gli schemi inclusi diventano parte della classe incluso <xref:System.Xml.Schema.XmlSchema>.  
  
 Di seguito sono importanti da considerare quando si usa il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (metodo).  
  
-   Gli schemi importati o inclusi da schemi contenuti nella recuperati il <xref:System.Xml.XmlReader> vengono aggiunti anche il <xref:System.Xml.Schema.XmlSchemaSet>.  
  
-   Se il <xref:System.Xml.XmlReader> non è posizionato sull'elemento radice, un <xref:System.Xml.Schema.XmlSchemaException> viene generata un'eccezione, a meno che l'elemento corrente è un elemento. Se l'elemento corrente è un `xs:schema` elemento, in cui viene letto il documento dello schema di <xref:System.Xml.Schema.XmlSchemaSet>; in caso contrario, un <xref:System.Xml.Schema.XmlSchemaException> viene generata perché lo schema non è valido.  
  
-   Se il <xref:System.Xml.XmlReader> è posizionato in una sequenza di nodi XML, viene aggiunto solo il primo nodo nella sequenza.  
  
-   Se lo schema è stato creato da un <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> chiamata al metodo, il valore della <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> proprietà viene ignorata, poiché l'elaborazione dello schema inline non viene applicata per i documenti W3C XML Schema.  
  
-   Il <xref:System.Xml.XmlResolver> proprietà del <xref:System.Xml.XmlReader> non viene usato per risolvere i riferimenti a percorsi di spazi dei nomi o nello schema di includono e importazione di elementi. Al contrario, il <xref:System.Xml.XmlResolver> proprietà del <xref:System.Xml.Schema.XmlSchemaSet> viene usato.  
  
-   Il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metodo per il <xref:System.Xml.Schema.XmlSchemaSet> ha la possibilità di usare lo spazio dei nomi di destinazione definito in uno schema, anziché richiedere che lo spazio dei nomi di destinazione venga specificato come parametro quando il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> viene chiamato il metodo. Che specifica `null` o <xref:System.String.Empty?displayProperty=nameWithType> per il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> metodo indica il <xref:System.Xml.Schema.XmlSchemaSet> usare nomi di destinazione definiti nello schema. Per un esempio di questo comportamento, vedere il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (metodo).  
  
 Le funzionalità rimanenti di questo metodo sono identica a quello del <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (metodo).  
  
   
  
## Examples  
 Esempio di codice seguente aggiunge lo schema books. xsd contenuto nel <xref:System.Xml.XmlTextReader> con uno spazio dei nomi di destinazione del http://www.contoso.com/books per il <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", New XmlTextReader("books.xsd")  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", new XmlTextReader("books.xsd");  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Lo schema non è valido.</exception>
        <exception cref="T:System.ArgumentNullException">L'oggetto <see cref="T:System.Xml.XmlReader" /> passato come parametro è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompilationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilationSettings As XmlSchemaCompilationSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCompilationSettings ^ CompilationSettings { System::Xml::Schema::XmlSchemaCompilationSettings ^ get(); void set(System::Xml::Schema::XmlSchemaCompilationSettings ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompilationSettings : System.Xml.Schema.XmlSchemaCompilationSettings with get, set" Usage="System.Xml.Schema.XmlSchemaSet.CompilationSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCompilationSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> per <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Oggetto <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> per l'oggetto <see cref="T:System.Xml.Schema.XmlSchemaSet" />. Il valore predefinito è un'istanza di <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> con la proprietà <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> impostata su <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.Schema.XmlSchemaCompilationSettings> classe specifica le opzioni di convalida di libreria di modelli standard (UPA, Unique Particle Attribution) per il <xref:System.Xml.Schema.XmlSchemaSet>. Per altre informazioni sull'abilitazione UPA controlli di convalida, vedere il <xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A> proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public void Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compile ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compile();" />
      <MemberSignature Language="F#" Value="member this.Compile : unit -&gt; unit" Usage="xmlSchemaSet.Compile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Compila gli schemi XSD (XML Schema Definition Language) aggiunti alla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" /> in un unico schema logico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato automaticamente quando è necessaria la convalida e il <xref:System.Xml.Schema.XmlSchemaSet> non è stato compilato in precedenza, ad esempio, quando un <xref:System.Xml.Schema.XmlSchemaSet> viene utilizzato come input per creare un <xref:System.Xml.XmlReader> dell'oggetto nel <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> proprietà di un <xref:System.Xml.XmlReaderSettings> oggetto. Se il <xref:System.Xml.Schema.XmlSchemaSet> è già stato compilato, questo metodo non Ricompila gli schemi. Se questo metodo viene eseguito correttamente, il <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> è impostata su `true`.  
  
 Gli schemi che sono stati compilati in precedenza da un <xref:System.Xml.Schema.XmlSchemaSet> non vengono ricompilate. Tuttavia, gli schemi che sono stati compilati usando il <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> metodo del <xref:System.Xml.Schema.XmlSchema> verrà ricompilato.  
  
> [!NOTE]
>  È necessario chiamare il <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> metodo se è stato modificato uno schema (o uno dei relativi include/imports non necessarie) dopo l'aggiunta al <xref:System.Xml.Schema.XmlSchemaSet>. Il <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> metodo verifica la validità strutturale in base alle regole di W3C XML Schema dello schema. Tuttavia, non eseguirà un controllo di convalida completa. Verrà risolto anche i riferimenti a componenti dello schema interni ed esterni. Gli schemi importati o inclusi correttamente recuperati vengono aggiunti anche i <xref:System.Xml.Schema.XmlSchemaSet>. Gli schemi importati vengono aggiunti come separato <xref:System.Xml.Schema.XmlSchema> oggetti, mentre inclusi gli schemi diventano parte della classe incluso <xref:System.Xml.Schema.XmlSchema>. Se ha esito positivo, la chiamata di rielaborare il <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> proprietà è impostata su false.  
  
   
  
## Examples  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Si è verificato un errore durante la convalida e la compilazione degli schemi nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indica se uno schema XSD (XML Schema Definition Language) è contenuto nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (targetNamespace As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="xmlSchemaSet.Contains targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Proprietà <paramref name="targetNamespace" /> dello schema.</param>
        <summary>Indica se uno schema XSD (XML Schema Definition Language) con l'URI dello spazio dei nomi di destinazione specificato è contenuto nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          <see langword="true" /> se uno schema con l'URI dello spazio dei nomi di destinazione specificato è contenuto nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />; in caso contrario, restituisce <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli schemi che sono indirettamente aggiunti per il <xref:System.Xml.Schema.XmlSchemaSet> vengono rilevati dal <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> metodo, ad esempio gli schemi importati. Di conseguenza, se uno schema per il http://www.contoso.com/retail dello spazio dei nomi che importa uno schema per il http://www.contoso.com/books dello spazio dei nomi viene aggiunto alle <xref:System.Xml.Schema.XmlSchemaSet>, la chiamata <xref:System.Xml.Schema.XmlSchemaSet.Contains%2A> con `http://www.contoso.com/books` come parametro, viene restituito `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (schema As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.Contains schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Oggetto <see cref="T:System.Xml.Schema.XmlSchema" />.</param>
        <summary>Indica se l'oggetto <see cref="T:System.Xml.Schema.XmlSchema" /> XSD (XML Schema Definition Language) specificato è contenuto nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          <see langword="true" /> se l'oggetto <see cref="T:System.Xml.Schema.XmlSchema" /> si trova in <see cref="T:System.Xml.Schema.XmlSchemaSet" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">L'oggetto <see cref="T:System.Xml.Schema.XmlSchemaSet" /> passato come parametro è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Xml.Schema.XmlSchema[] schemas, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (schemas As XmlSchema(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Xml::Schema::XmlSchema ^&gt; ^ schemas, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Xml.Schema.XmlSchema[] * int -&gt; unit" Usage="xmlSchemaSet.CopyTo (schemas, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchema[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemas">Matrice in cui copiare gli oggetti.</param>
        <param name="index">Indice della matrice da cui inizierà la copia.</param>
        <summary>Copia tutti gli oggetti <see cref="T:System.Xml.Schema.XmlSchema" /> dalla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" /> nella matrice specificata, a partire dall'indice specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente copia tutti i <xref:System.Xml.Schema.XmlSchema> oggetti nel <xref:System.Xml.Schema.XmlSchemaSet> a una matrice di <xref:System.Xml.Schema.XmlSchema> oggetti.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schemas(schemaSet.Count) As XmlSchema  
schemaSet.CopyTo(schemas, 0)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
XmlSchema[] schemas = new XmlSchema[schemaSet.Count];  
schemaSet.CopyTo(schemas, 0);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Xml.Schema.XmlSchemaSet.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di schemi XSD (XML Schema Definition Language) logici nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Il numero di schemi logici nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se sono presenti due schemi per lo spazio dei nomi `http://www.contoso.com` nella <xref:System.Xml.Schema.XmlSchemaSet>, il <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> proprietà restituirebbe 1 poiché gli schemi vengono considerati come un singolo schema logico per scopi di convalida. Tuttavia, se uno schema per lo spazio dei nomi `http://www.contoso.com/retail` importato uno schema per il `http://www.contoso.com/books` dello spazio dei nomi, il valore del <xref:System.Xml.Schema.XmlSchemaSet.Count%2A> proprietà sarà 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalAttributes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalAttributes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalAttributes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalAttributes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti gli attributi globali di tutti gli schemi XSD (XML Schema Definition Language) nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Raccolta di attributi globali.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalElements">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalElements" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalElements As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalElements { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalElements : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti gli elementi globali di tutti gli schemi XSD (XML Schema Definition Language) nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Raccolta di elementi globali.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="GlobalTypes">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaObjectTable GlobalTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalTypes As XmlSchemaObjectTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaObjectTable ^ GlobalTypes { System::Xml::Schema::XmlSchemaObjectTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalTypes : System.Xml.Schema.XmlSchemaObjectTable" Usage="System.Xml.Schema.XmlSchemaSet.GlobalTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaObjectTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti i tipi globali, semplici e complessi, di tutti gli schemi XSD (XML Schema Definition Language) nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <value>Raccolta di tipi globali complessi e semplici.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.Schema.XmlSchemaSet.GlobalTypes%2A> proprietà restituisce sempre un tipo che rappresenta il `xs:anyType` tipo complesso.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalElements" />
        <altmember cref="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
      </Docs>
    </Member>
    <Member MemberName="IsCompiled">
      <MemberSignature Language="C#" Value="public bool IsCompiled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompiled" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompiled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompiled : bool" Usage="System.Xml.Schema.XmlSchemaSet.IsCompiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se gli schemi XSD (XML Schema Definition Language) nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" /> sono stati compilati.</summary>
        <value>
          <see langword="true" /> se gli schemi nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" /> sono stati compilati dall'ultima volta che uno schema è stato aggiunto o rimosso dalla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />; in caso contrario, restituisce, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La proprietà <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> non viene influenzata se si apportano modifiche agli schemi contenuti nel tipo <xref:System.Xml.Schema.XmlSchemaSet>. Non viene tenuta traccia degli aggiornamenti dei singoli schemi del tipo <xref:System.Xml.Schema.XmlSchemaSet>. Di conseguenza, la proprietà <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> può essere `true` anche se viene modificato uno degli schemi contenuti nel tipo <xref:System.Xml.Schema.XmlSchemaSet>, a condizione che non venga aggiunto o rimosso alcuno schema dal tipo <xref:System.Xml.Schema.XmlSchemaSet>.  
  
   
  
## Examples  
 Per un esempio del <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> proprietà, vedere il <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Compile" />
        <altmember cref="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.Schema.XmlSchemaSet.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la classe <see cref="T:System.Xml.XmlNameTable" /> predefinita utilizzata dalla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" /> per il caricamento di nuovi schemi XSD (XML Schema Definition Language).</summary>
        <value>Tabella degli oggetti stringa atomizzati.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Remove(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Remove(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Remove schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Oggetto <see cref="T:System.Xml.Schema.XmlSchema" /> da rimuovere dalla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Rimuove lo schema XSD (XML Schema Definition Language) specificato dalla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>L'oggetto <see cref="T:System.Xml.Schema.XmlSchema" /> rimosso dalla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" /> o <see langword="null" /> se lo schema non è stato trovato nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rimozione di uno schema dal <xref:System.Xml.Schema.XmlSchemaSet> imposta la <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> proprietà `false`.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata l'aggiunta di schemi a un <xref:System.Xml.Schema.XmlSchemaSet>, quindi rimuovere uno degli schemi tramite la <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> (metodo).  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.Remove(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.Remove(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Lo schema non è valido.</exception>
        <exception cref="T:System.ArgumentNullException">L'oggetto <see cref="T:System.Xml.Schema.XmlSchema" /> passato come parametro è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRecursive">
      <MemberSignature Language="C#" Value="public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveRecursive(class System.Xml.Schema.XmlSchema schemaToRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRecursive (schemaToRemove As XmlSchema) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RemoveRecursive(System::Xml::Schema::XmlSchema ^ schemaToRemove);" />
      <MemberSignature Language="F#" Value="member this.RemoveRecursive : System.Xml.Schema.XmlSchema -&gt; bool" Usage="xmlSchemaSet.RemoveRecursive schemaToRemove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaToRemove" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schemaToRemove">Oggetto <see cref="T:System.Xml.Schema.XmlSchema" /> da rimuovere dalla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</param>
        <summary>Rimuove lo schema XSD (XML Schema Definition Language) specificato e tutti gli schemi importati dalla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>
          <see langword="true" /> se <see cref="T:System.Xml.Schema.XmlSchema" /> e tutte le relative importazioni sono stati rimossi; in caso contrario, restituisce <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> metodo rimuove lo schema specificato e tutti gli schemi importati dal <xref:System.Xml.Schema.XmlSchemaSet>, fino a quando non sono presenti dipendenze nello schema o nei relativi schemi importati. Se sono presenti dipendenze nello schema o i relativi schemi importati nella <xref:System.Xml.Schema.XmlSchemaSet>, nessun elemento viene rimosso e <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> restituisce `false`. Se `false` viene restituito e un <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> è definito, viene inviato un avviso al gestore dell'evento che descrivono le dipendenze.  
  
 Se altri schemi di Importa lo schema specificato e lo schema specificato in precedenza è stata rimossa con il <xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> metodo, il <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> metodo non rimuoverà gli schemi importati e restituirà `false`. Ad esempio, se `parentSchema` importazioni `childSchema1` e `childSchema2` verrà rimosso solo il codice seguente `parentSchema`, ma non importato `childSchema1` e `childSchema2` schemi:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.Remove(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Il codice seguente rimuoverà il `parentSchema` e gli schemi importati:  
  
```  
XmlSchemaSet ss = new XmlSchemaSet();  
XmlSchema xs = XmlSchema.Read(XmlReader.Create("parentSchema.xsd"), null);  
ss.Add(xs);  
ss.Compile();  
ss.RemoveRecursive(xs);  
ss.Compile();  
```  
  
 Il <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> metodo non ha alcun effetto sullo stato del <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> proprietà.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrata l'aggiunta di schemi a un <xref:System.Xml.Schema.XmlSchemaSet>, quindi la rimozione di uno degli schemi e tutti gli schemi importati tramite la <xref:System.Xml.Schema.XmlSchemaSet.RemoveRecursive%2A> (metodo).  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd")  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    If schema.TargetNamespace = "http://www.contoso.com/music" Then  
        schemaSet.RemoveRecursive(schema)  
    End If  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/retail", "http://www.contoso.com/retail.xsd");  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Add("http://www.contoso.com/music", "http://www.contoso.com/music.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    if (schema.TargetNamespace == "http://www.contoso.com/music")  
    {  
        schemaSet.RemoveRecursive(schema);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'oggetto <see cref="T:System.Xml.Schema.XmlSchema" /> passato come parametro è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reprocess">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.Schema.XmlSchema Reprocess(class System.Xml.Schema.XmlSchema schema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function Reprocess (schema As XmlSchema) As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::Schema::XmlSchema ^ Reprocess(System::Xml::Schema::XmlSchema ^ schema);" />
      <MemberSignature Language="F#" Value="member this.Reprocess : System.Xml.Schema.XmlSchema -&gt; System.Xml.Schema.XmlSchema" Usage="xmlSchemaSet.Reprocess schema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schema" Type="System.Xml.Schema.XmlSchema" />
      </Parameters>
      <Docs>
        <param name="schema">Schema da rielaborare.</param>
        <summary>Rielabora uno schema XSD (XML Schema Definition Language) già presente nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Oggetto <see cref="T:System.Xml.Schema.XmlSchema" />, se lo schema è valido. Se lo schema non è valido e viene specificato un oggetto <see cref="T:System.Xml.Schema.ValidationEventHandler" />, viene restituito <see langword="null" /> e viene generato l'evento di convalida appropriato. In caso contrario, verrà generata un'eccezione <see cref="T:System.Xml.Schema.XmlSchemaException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rielaborazione di uno schema esegue tutti i passaggi di pre-elaborazione eseguiti su uno schema quando il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> viene chiamato il metodo. Se la chiamata a <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> ha esito positivo, il <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> è impostata su `false`.  
  
 Il metodo di rielaborazione deve essere utilizzato dopo uno schema nel <xref:System.Xml.Schema.XmlSchemaSet> sono stati modificati, dopo il <xref:System.Xml.Schema.XmlSchemaSet> ha eseguito la compilazione.  
  
> [!NOTE]
>  È necessario chiamare il <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> metodo se è stato modificato uno schema (o uno dei relativi include/imports non necessarie) dopo l'aggiunta al <xref:System.Xml.Schema.XmlSchemaSet>. Il <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> metodo verifica la validità strutturale in base alle regole di W3C XML Schema dello schema. Tuttavia, non eseguirà un controllo di convalida completa. Verrà risolto anche i riferimenti a componenti dello schema interni ed esterni. Gli schemi importati o inclusi correttamente recuperati vengono aggiunti anche i <xref:System.Xml.Schema.XmlSchemaSet>. Gli schemi importati vengono aggiunti come separato <xref:System.Xml.Schema.XmlSchema> oggetti, mentre inclusi gli schemi diventano parte della classe incluso <xref:System.Xml.Schema.XmlSchema>. Se ha esito positivo, la chiamata di rielaborare il <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> proprietà è impostata su false.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata la rielaborazione di uno schema aggiunto al <xref:System.Xml.Schema.XmlSchemaSet>. Dopo il <xref:System.Xml.Schema.XmlSchemaSet> viene compilata usando la <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> metodo e lo schema aggiunto al <xref:System.Xml.Schema.XmlSchemaSet> viene modificato, il <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> verrà impostata su `true`, anche se uno schema nel <xref:System.Xml.Schema.XmlSchemaSet> è stato modificato. Chiama il <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> metodo consente di eseguire tutti la pre-elaborazione eseguita dal <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> (metodo) e i set il <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> proprietà `false`.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()  
Dim schema As XmlSchema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
schemaSet.Compile()  
  
Dim element As XmlSchemaElement = New XmlSchemaElement()  
schema.Items.Add(element)  
element.Name = "book"  
element.SchemaTypeName = New XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema")  
  
schemaSet.Reprocess(schema)  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
XmlSchema schema = schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
schemaSet.Compile();  
  
XmlSchemaElement element = new XmlSchemaElement();  
schema.Items.Add(element);  
element.Name = "book";  
element.SchemaTypeName = new XmlQualifiedName("string", "http://www.w3.org/2001/XMLSchema");  
  
schemaSet.Reprocess(schema);  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaException">Lo schema non è valido.</exception>
        <exception cref="T:System.ArgumentNullException">L'oggetto <see cref="T:System.Xml.Schema.XmlSchema" /> passato come parametro è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">L'oggetto <see cref="T:System.Xml.Schema.XmlSchema" /> passato come parametro non è già presente nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Schemas">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un insieme di schemi XSD (XML Schema Definition Language) nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas();" />
      <MemberSignature Language="F#" Value="member this.Schemas : unit -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un insieme di tutti gli schemi XSD (XML Schema Definition Language) nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
        <returns>Oggetto <see cref="T:System.Collections.ICollection" /> contenente tutti gli schemi aggiunti alla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />. Se non sono stati aggiunti schemi alla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />, viene restituito un oggetto <see cref="T:System.Collections.ICollection" /> vuoto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo restituisce gli schemi che sono state aggiunte a indirettamente il <xref:System.Xml.Schema.XmlSchemaSet> perché sono stati importati.  
  
> [!NOTE]
>  Il <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> metodo è l'equivalente del <xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A> metodo della classe obsoleta <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come eseguire l'iterazione su tutti gli schemi nel <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas()  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas())  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Schemas (string targetNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ICollection Schemas(string targetNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Schemas (targetNamespace As String) As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ICollection ^ Schemas(System::String ^ targetNamespace);" />
      <MemberSignature Language="F#" Value="member this.Schemas : string -&gt; System.Collections.ICollection" Usage="xmlSchemaSet.Schemas targetNamespace" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetNamespace">Proprietà <paramref name="targetNamespace" /> dello schema.</param>
        <summary>Restituisce un insieme di tutti gli schemi XSD (XML Schema Definition Language) nella classe <see cref="T:System.Xml.Schema.XmlSchemaSet" /> appartenenti allo spazio dei nomi specificato.</summary>
        <returns>Oggetto <see cref="T:System.Collections.ICollection" /> contenente tutti gli schemi aggiunti alla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" /> appartenenti allo spazio dei nomi specificato. Se non sono stati aggiunti schemi alla classe <see cref="T:System.Xml.Schema.XmlSchemaSet" />, viene restituito un oggetto <see cref="T:System.Collections.ICollection" /> vuoto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il `targetNamespace` parametro è `null` o <xref:System.String.Empty>, vengono restituiti tutti gli schemi senza uno spazio dei nomi.  
  
 Questo metodo restituisce gli schemi che sono state aggiunte a indirettamente il <xref:System.Xml.Schema.XmlSchemaSet> perché sono stati importati.  
  
> [!NOTE]
>  Il <xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> metodo è l'equivalente del <xref:System.Xml.Schema.XmlSchemaCollection.Item%2A> metodo della classe obsoleta <xref:System.Xml.Schema.XmlSchemaCollection>.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come eseguire l'iterazione su tutti gli schemi nel http://www.contoso.com/books spazio dei nomi nel <xref:System.Xml.Schema.XmlSchemaSet>.  
  
```vb  
Dim schemaSet As XmlSchemaSet = New XmlSchemaSet  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd")  
  
Dim schema As XmlSchema  
  
For Each schema In schemaSet.Schemas("http://www.contoso.com/books")  
  
    schema.Write(Console.Out)  
  
Next  
```  
  
```csharp  
XmlSchemaSet schemaSet = new XmlSchemaSet();  
schemaSet.Add("http://www.contoso.com/books", "http://www.contoso.com/books.xsd");  
  
foreach (XmlSchema schema in schemaSet.Schemas("http://www.contoso.com/books"))  
{  
    schema.Write(Console.Out);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica un gestore eventi per la ricezione di informazioni sugli errori di convalida di schemi XSD (XML Schema Definition Language).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Imposta un gestore eventi per la ricezione di informazioni sugli errori di convalida dello schema quando la <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> oppure <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> metodi del <xref:System.Xml.Schema.XmlSchemaSet> vengono chiamati.  
  
 Se non è definito un gestore eventi, un' <xref:System.Xml.Schema.XmlSchemaException> viene generata su eventuali errori di convalida in cui la <xref:System.Xml.Schema.XmlSeverityType> è <xref:System.Xml.Schema.XmlSeverityType.Error>. Non vengono generate eccezioni per gli errori di convalida con un <xref:System.Xml.Schema.XmlSeverityType> di <xref:System.Xml.Schema.XmlSeverityType.Warning>.  
  
   
  
## Examples  
 Il codice seguente viene illustrata l'aggiunta di un <xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler> per acquisire errori e avvisi durante la convalida di un documento XML rispetto a uno schema.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 L'esempio Usa il file books. XML come input.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 L'esempio Usa il file books. xsd come input.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Schema.XmlSchemaSet.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Imposta l'oggetto <see cref="T:System.Xml.XmlResolver" /> utilizzato per risolvere gli spazi dei nomi o le posizioni di riferimento negli elementi di inclusione e importazione di uno schema.</summary>
        <value>Oggetto <see cref="T:System.Xml.XmlResolver" /> utilizzato per risolvere gli spazi dei nomi o le posizioni di riferimento negli elementi di inclusione e importazione di uno schema.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.XmlResolver> di un' <xref:System.Xml.Schema.XmlSchemaSet> viene usato per risolvere gli spazi dei nomi o percorsi a cui fa riferimento di includono e importazione di elementi di uno schema, ogni volta che viene aggiunto uno schema tramite il <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> o <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> metodi.  
  
> [!IMPORTANT]
>  Spazi dei nomi esterni o percorsi a cui fa riferimento sono inclusi, importazione e ridefinizione di elementi di uno schema vengono risolte rispetto all'URI di base dello schema che li include o Importa. Ad esempio, se l'URI di base dell'inclusione o importazione di schemi è vuota o `null`, i percorsi esterni vengono risolti in relazione alla directory corrente. Il <xref:System.Xml.XmlUrlResolver> classe viene utilizzata per la risoluzione degli schemi esterni per impostazione predefinita. Per disabilitare la risoluzione di inclusione, importazione e ridefinire gli elementi di uno schema, impostare il <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A> proprietà `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlResolver" />
      </Docs>
    </Member>
  </Members>
</Type>