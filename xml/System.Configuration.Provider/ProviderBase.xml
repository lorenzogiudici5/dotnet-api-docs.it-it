<Type Name="ProviderBase" FullName="System.Configuration.Provider.ProviderBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="46d665d28c91b354d4c501a375838f3bddf95a2f" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37689147" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ProviderBase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ProviderBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderBase abstract" />
  <TypeSignature Language="F#" Value="type ProviderBase = class" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce un'implementazione di base per il modello di provider estensibile.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il modello di provider è pensato per incapsulare tutte o parte delle funzionalità più funzionalità di ASP.NET, ad esempio l'appartenenza e i profili di configurazione protetta. Consente allo sviluppatore di creare classi di supporto che forniscono più implementazioni della funzionalità incapsulata. Inoltre, gli sviluppatori possono scrivere nuove funzionalità usando il modello di provider. Può trattarsi di un metodo efficace per supportare più implementazioni di funzionalità della funzionalità senza duplicazione del codice della funzione o riscrivere il livello dell'applicazione se il metodo di implementazione deve essere modificato.  
  
 Il <xref:System.Configuration.Provider.ProviderBase> classe è semplice, che contiene solo alcuni metodi di base e le proprietà comuni a tutti i provider. I provider di funzionalità specifiche (ad esempio <xref:System.Web.Security.MembershipProvider>) ereditano da <xref:System.Configuration.Provider.ProviderBase> e stabilire i metodi e proprietà che devono essere supportati i provider specifici dell'implementazione per tale funzionalità. Provider specifico dell'implementazione (ad esempio <xref:System.Web.Security.SqlMembershipProvider>), a sua volta eredita da un provider di funzionalità specifiche (in questo caso, <xref:System.Web.Security.MembershipProvider>).  
  
 L'aspetto più importante del modello di provider è che l'implementazione (ad esempio, se i dati sono persistenti come file di testo o in un database) è un'astrazione dal codice dell'applicazione. Il tipo di provider specifico dell'implementazione per la funzionalità specificata viene designato in un file di configurazione. Il provider a livello di funzionalità quindi legge il tipo dal file di configurazione e agisce come una factory per il codice della funzione. Lo sviluppatore dell'applicazione può quindi usare le classi di funzionalità nel codice dell'applicazione. Il tipo di implementazione può essere lo swapping nel file di configurazione, eliminando la necessità di riscrivere il codice per supportare la metodologia di implementazione differenti.  
  
 I provider inclusi in ASP.NET sono prevalentemente astrazioni di implementazioni della persistenza dei dati per funzionalità quali profili o l'appartenenza. Tuttavia, questo modello può essere applicato a qualsiasi altro tipo di funzionalità che può essere astratto e implementate in diversi modi.  
  
   
  
## Examples  
 Per un esempio di come usare il <xref:System.Configuration.Provider.ProviderBase> classe, vedere [esempio di implementazione di Provider di profili](http://msdn.microsoft.com/library/c36e8a56-b416-40b7-95c1-c662cfb8f906).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ProviderBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Provider.ProviderBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ProviderBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Configuration.Provider.ProviderBase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Provider.ProviderBase.Description" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Description { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Description : string" Usage="System.Configuration.Provider.ProviderBase.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una breve descrizione di facile comprensione che è possibile visualizzare in strumenti di amministrazione o in altre interfacce utente (UI, User Interface).</summary>
        <value>Breve descrizione di facile comprensione che è possibile visualizzare in strumenti di amministrazione o in altre UI.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un provider configurato non fornisce una descrizione, il valore della <xref:System.Configuration.Provider.ProviderBase.Name%2A> proprietà viene restituita come valore predefinito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public virtual void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Initialize (name As String, config As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ config);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit&#xA;override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="providerBase.Initialize (name, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">Nome descrittivo del provider.</param>
        <param name="config">Raccolta delle coppie nome/valore che rappresentano gli attributi specifici del provider specificati nella configurazione per il provider.</param>
        <summary>Inizializza il generatore di configurazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementazione della classe base traccia internamente il numero di volte in cui il provider `Initialize` chiamata al metodo. Se un provider viene inizializzato più volte, una `InvalidOperationException` viene generata un'eccezione indicante che il provider è già inizializzato.  
  
 Poiché la maggior parte delle funzionalità chiamata provider <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> prima di eseguire l'inizializzazione specifica del provider, questo metodo è una posizione centrale per impedire la doppia inizializzazione.  
  
   
  
## Examples  
 Per un esempio d'uso <xref:System.Configuration.Provider.ProviderBase.Initialize%2A>, vedere [esempio di implementazione di Provider di profili](http://msdn.microsoft.com/library/c36e8a56-b416-40b7-95c1-c662cfb8f906).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il nome del provider è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome del provider ha lunghezza zero.</exception>
        <exception cref="T:System.InvalidOperationException">Viene effettuato un tentativo di chiamare <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" /> su un provider dopo che il provider è già stato inizializzato.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.Provider.ProviderBase.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Configuration.Provider.ProviderBase.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome descrittivo utilizzato per fare riferimento al provider durante la configurazione.</summary>
        <value>Nome descrittivo utilizzato per fare riferimento al provider durante la configurazione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il modello consigliato per questa stringa è: [*Provider creatore*] [*tipo di implementazione*] [*funzionalità*] Provider. Anche se il <xref:System.Configuration.Provider.ProviderBase.Description%2A> proprietà fornisce inoltre una descrizione breve di <xref:System.Configuration.Provider.ProviderBase.Name%2A> proprietà viene utilizzata come identificatore per il provider.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>