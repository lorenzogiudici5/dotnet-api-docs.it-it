<Type Name="ExpressionServices" FullName="System.Activities.Expressions.ExpressionServices">
  <TypeSignature Language="C#" Value="public static class ExpressionServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ExpressionServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Expressions.ExpressionServices" />
  <TypeSignature Language="VB.NET" Value="Public Class ExpressionServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionServices abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="5c00d-101">API di trasformazione usata per convertire espressioni in grado di supportare l'ambiente in un albero delle attività.</span><span class="sxs-lookup"><span data-stu-id="5c00d-101">A transformation API used to convert environment aware expressions to an activity tree.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c00d-102">I metodi di conversione in questa classe trasformano le espressioni lambda specificate, che possono contenere più sottoespressioni, in strutture ad albero di attività costituite da una gerarchia di attività.</span><span class="sxs-lookup"><span data-stu-id="5c00d-102">The conversion methods in this class transform the specified lambda expressions, which can contain multiple sub-expressions, into activity trees composed of a hierarchy of activities.</span></span> <span data-ttu-id="5c00d-103">Si consiglia di utilizzare questi metodi di conversione invece di creare direttamente un'istanza delle attività di espressione perché forniscono un livello più elevato di astrazione e consentono di implementare il flusso di lavoro in modo più intuitivo.</span><span class="sxs-lookup"><span data-stu-id="5c00d-103">It is strongly recommended to use these conversion methods instead of instantiating expression activities directly because they provide a higher level of abstraction and enable you to implement your workflow more intuitively.</span></span> <span data-ttu-id="5c00d-104">Per ulteriori informazioni, vedere gli esempi.</span><span class="sxs-lookup"><span data-stu-id="5c00d-104">See the examples for more information.</span></span>  
  
 <span data-ttu-id="5c00d-105">I metodi di conversione in <xref:System.Activities.Expressions.ExpressionServices> vengono progettati per funzionare con variabili e costanti definite nel flusso di lavoro o passate nel flusso di lavoro tramite argomenti.</span><span class="sxs-lookup"><span data-stu-id="5c00d-105">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c00d-106">Nell'esempio di codice seguente viene chiamato <xref:System.Activities.Expressions.ExpressionServices.Convert%2A> per calcolare la somma dell'elemento della matrice in corrispondenza dell'indice 0 e dell'elemento della matrice in corrispondenza dell'indice 1.</span><span class="sxs-lookup"><span data-stu-id="5c00d-106">The following code example calls <xref:System.Activities.Expressions.ExpressionServices.Convert%2A> to compute the sum of the array element at index 0 and the array element at index 1.</span></span> <span data-ttu-id="5c00d-107">La somma risultante viene quindi assegnata a una variabile e stampata nella console.</span><span class="sxs-lookup"><span data-stu-id="5c00d-107">Next, the resulting sum is assigned to a variable and is printed to the console.</span></span>  
  
```  
  
public static void ComputeSumWithConvert()  
{  
    var arrayvar = new Variable<int[]>("arrayvar", new int[] { 1, 2 });  
    var intvar = new Variable<int>("intvar");              
  
    // Use ExpressionServices.Convert() to convert the composite lambda expression  
    // that represents the sum of array elements at index 0 and 1.  
    Activity<int> activity1 = ExpressionServices.Convert<int>(ctx => arrayvar.Get(ctx)[0] + arrayvar.Get(ctx)[1]);  
  
    Activity seq = new Sequence  
    {  
        Variables = { arrayvar, intvar },  
        Activities =  
        {                      
            // Get the sum value.  
            new Assign<int>  
            {  
                To = intvar,  
                Value = activity1,  
            },  
            // Print the sum value of 3 to the console.  
            new WriteLine  
            {                          
                Text = new InArgument<string>(ctx => intvar.Get(ctx).ToString()),  
            },  
        }  
    };  
  
    WorkflowInvoker.Invoke(seq);  
  
}  
  
```  
  
 <span data-ttu-id="5c00d-108">L'esempio di codice seguente viene fornito a scopo di confronto.</span><span class="sxs-lookup"><span data-stu-id="5c00d-108">The following code example is provided for comparison purposes.</span></span> <span data-ttu-id="5c00d-109">In questo secondo esempio viene mostrato come calcolare la somma creando un'istanza dell'attività di espressione <xref:System.Activities.Expressions.Add%603>.</span><span class="sxs-lookup"><span data-stu-id="5c00d-109">This second example shows how to compute the sum by instantiating the <xref:System.Activities.Expressions.Add%603> expression activity.</span></span> <span data-ttu-id="5c00d-110">I due esempi sono funzionalmente equivalenti ma, come è evidente, il secondo approccio richiede una maggiore attività di codifica e non è semplice come chiamare <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>.</span><span class="sxs-lookup"><span data-stu-id="5c00d-110">The two examples are functionally equivalent but as you can see the second approach involves more coding and is not as straightforward as calling <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>.</span></span> <span data-ttu-id="5c00d-111">Si consiglia pertanto il primo esempio.</span><span class="sxs-lookup"><span data-stu-id="5c00d-111">Therefore the first example is recommended.</span></span>  
  
```  
  
public static void ComputeSumWithExpressionActivity()  
{  
    var arrayvar = new Variable<int[]>("arrayvar", new int[] { 1, 2 });  
    var intvar = new Variable<int>("intvar");  
  
    // Create an Add activity to compute the sum of array elements at index 0 and 1.  
    Activity<int> activity1 = new Add<int, int, int>  
    {  
        Left = new ArrayItemValue<int>  
        {  
            Array = arrayvar,  
            Index = 0,  
        },  
        Right = new ArrayItemValue<int>  
        {  
            Array = arrayvar,  
            Index = 1,  
        }  
    };              
  
    Activity seq = new Sequence  
    {  
        Variables = { arrayvar, intvar },  
        Activities =  
        {  
            // Get the sum value.  
            new Assign<int>  
            {  
                To = intvar,  
                Value = activity1,  
            },  
            // Print the sum value of 3 to the console.   
            new WriteLine  
            {                          
                Text = new InArgument<string>(ctx => intvar.Get(ctx).ToString()),  
            },                      
        }  
    };  
  
    WorkflowInvoker.Invoke(seq);  
  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Convert&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Activities.Activity&lt;TResult&gt; Convert&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,TResult&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.Activity`1&lt;!!TResult&gt; Convert&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !!TResult&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.ExpressionServices.Convert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Convert(Of TResult) (expression As Expression(Of Func(Of ActivityContext, TResult))) As Activity(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Activities::Activity&lt;TResult&gt; ^ Convert(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, TResult&gt; ^&gt; ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Activity&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="5c00d-112">Tipo in cui viene convertita l'espressione.</span><span class="sxs-lookup"><span data-stu-id="5c00d-112">The type the expression is being converted to.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="5c00d-113">Espressione di cui è in corso la conversione.</span><span class="sxs-lookup"><span data-stu-id="5c00d-113">The expression being converted.</span></span></param>
        <summary><span data-ttu-id="5c00d-114">Converte un'espressione in grado di supportare l'ambiente del flusso di lavoro in un albero delle attività.</span><span class="sxs-lookup"><span data-stu-id="5c00d-114">Converts a workflow environment-aware expression to an activity tree.</span></span></summary>
        <returns><span data-ttu-id="5c00d-115">Espressione convertita.</span><span class="sxs-lookup"><span data-stu-id="5c00d-115">The converted expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c00d-116">Per un esempio di codice di <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>, vedere <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A>.</span><span class="sxs-lookup"><span data-stu-id="5c00d-116">For a code example of <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>, see <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A>.</span></span>  
  
 <span data-ttu-id="5c00d-117">I metodi di conversione in <xref:System.Activities.Expressions.ExpressionServices> vengono progettati per funzionare con variabili e costanti definite nel flusso di lavoro o passate nel flusso di lavoro tramite argomenti.</span><span class="sxs-lookup"><span data-stu-id="5c00d-117">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertReference&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Activities.Activity&lt;System.Activities.Location&lt;TResult&gt;&gt; ConvertReference&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,TResult&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!!TResult&gt;&gt; ConvertReference&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !!TResult&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.ExpressionServices.ConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertReference(Of TResult) (expression As Expression(Of Func(Of ActivityContext, TResult))) As Activity(Of Location(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Activities::Activity&lt;System::Activities::Location&lt;TResult&gt; ^&gt; ^ ConvertReference(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, TResult&gt; ^&gt; ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Activity&lt;System.Activities.Location&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="5c00d-118">Tipo in cui viene convertita l'espressione.</span><span class="sxs-lookup"><span data-stu-id="5c00d-118">The type the expression is being converted to.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="5c00d-119">Espressione di cui è in corso la conversione.</span><span class="sxs-lookup"><span data-stu-id="5c00d-119">The expression being converted.</span></span></param>
        <summary><span data-ttu-id="5c00d-120">Converte un riferimento a un'espressione in grado di supportare l'ambiente del flusso di lavoro in un albero delle attività.</span><span class="sxs-lookup"><span data-stu-id="5c00d-120">Converts a reference to a workflow environment-aware expression to an activity tree.</span></span></summary>
        <returns><span data-ttu-id="5c00d-121">Espressione convertita.</span><span class="sxs-lookup"><span data-stu-id="5c00d-121">The converted expression.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c00d-122">I metodi di conversione in <xref:System.Activities.Expressions.ExpressionServices> vengono progettati per funzionare con variabili e costanti definite nel flusso di lavoro o passate nel flusso di lavoro tramite argomenti.</span><span class="sxs-lookup"><span data-stu-id="5c00d-122">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5c00d-123">Nei due esempi di codice seguenti è illustrato l'utilizzo di <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> e <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>.</span><span class="sxs-lookup"><span data-stu-id="5c00d-123">The following two code examples illustrate the use of <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> and <xref:System.Activities.Expressions.ExpressionServices.Convert%2A>.</span></span> <span data-ttu-id="5c00d-124">Il primo esempio di codice utilizza <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> in un'attività `Assign` per convertire un'espressione lambda in una proprietà di stringa a cui è assegnato un valore.</span><span class="sxs-lookup"><span data-stu-id="5c00d-124">The first code example uses <xref:System.Activities.Expressions.ExpressionServices.ConvertReference%2A> in an `Assign` activity to convert a lambda expression into a string property that is assigned a value.</span></span> <span data-ttu-id="5c00d-125">Viene quindi chiamato <xref:System.Activities.Expressions.ExpressionServices.Convert%2A> per convertire un'espressione lambda in un valore di proprietà di stringa stampato nella console nell'attività `WriteLine`.</span><span class="sxs-lookup"><span data-stu-id="5c00d-125">Next, <xref:System.Activities.Expressions.ExpressionServices.Convert%2A> is called to convert a lambda expression into a string property value that is printed to the console in the `WriteLine` activity.</span></span>  
  
```  
  
// Define a struct with a property named AProperty.  
struct StructWithProperty  
{  
    public string AProperty { get; set; }  
}  
  
public static void ConvertReferenceForValueTypePropertyReferenceSample()  
{              
    // Create a variable of type StructWithProperty to store the property.  
    var swpvar = new Variable<StructWithProperty>("swpvar", new StructWithProperty());  
  
    Activity myActivity = new Sequence  
    {  
        Variables = { swpvar },  
        Activities =   
        {                      
            // Create an Assign activity to assign a value to the AProperty property.  
            new Assign<string>  
            {  
                To = ExpressionServices.ConvertReference<string>(ctx => swpvar.Get(ctx).AProperty),  
                // Assign a string literal to AProperty.  
                Value = "Hello",  
            },  
            // Print the new property value to the console.  
            new WriteLine()  
            {  
                Text = ExpressionServices.Convert<string>(ctx => swpvar.Get(ctx).AProperty),  
            }  
        }  
    };  
  
    // Invoke the Sequence activity.  
    WorkflowInvoker.Invoke(myActivity);  
}  
  
```  
  
 <span data-ttu-id="5c00d-126">L'esempio di codice seguente è uguale a quello precedente con l'eccezione che l'espressione da convertire è un riferimento a un elemento in una matrice multidimensionale.</span><span class="sxs-lookup"><span data-stu-id="5c00d-126">The following code example is like the previous one except that the expression to convert is a reference to an item in a multidimensional array.</span></span>  
  
```  
  
public static void ConvertReferenceForMultidimensionalArrayItemReferenceSample()  
{  
    // Create a variable to store a multidimensional array.  
    var arrayvar = new Variable<int[,]>("arrayvar", new int[4, 5]);  
  
    Activity myActivity = new Sequence  
    {  
        Variables = { arrayvar },  
        Activities =   
        {                      
            // Create an Assign activity to assign a value to the array item at index [1,2].  
            new Assign<int>  
            {  
                To = ExpressionServices.ConvertReference<int>(ctx => arrayvar.Get(ctx)[1, 2]),  
                // Assign an integer value to the array item at row 1 column 2.  
                Value = 1,  
            },  
            // Print the array item value to the console.  
            new WriteLine()  
            {  
                Text = ExpressionServices.Convert<string>(ctx => arrayvar.Get(ctx)[1, 2].ToString()),  
            }  
        }  
    };  
  
    // Invoke the Sequence activity.  
    WorkflowInvoker.Invoke(myActivity);  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvert&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static bool TryConvert&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,TResult&gt;&gt; expression, out System.Activities.Activity&lt;TResult&gt; result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryConvert&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !!TResult&gt;&gt; expression, [out] class System.Activities.Activity`1&lt;!!TResult&gt;&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.ExpressionServices.TryConvert``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryConvert(Of TResult) (expression As Expression(Of Func(Of ActivityContext, TResult)), ByRef result As Activity(Of TResult)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static bool TryConvert(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, TResult&gt; ^&gt; ^ expression, [Runtime::InteropServices::Out] System::Activities::Activity&lt;TResult&gt; ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,TResult&gt;&gt;" />
        <Parameter Name="result" Type="System.Activities.Activity&lt;TResult&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="5c00d-127">Tipo in cui viene convertita l'espressione.</span><span class="sxs-lookup"><span data-stu-id="5c00d-127">The type the expression is being converted to.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="5c00d-128">Espressione di cui è in corso la conversione.</span><span class="sxs-lookup"><span data-stu-id="5c00d-128">The expression being converted.</span></span></param>
        <param name="result"><span data-ttu-id="5c00d-129">Espressione convertita.</span><span class="sxs-lookup"><span data-stu-id="5c00d-129">The converted expression.</span></span></param>
        <summary><span data-ttu-id="5c00d-130">Converte un'espressione in grado di supportare l'ambiente del flusso di lavoro in un albero delle attività.</span><span class="sxs-lookup"><span data-stu-id="5c00d-130">Converts a workflow environment-aware expression to an activity tree.</span></span></summary>
        <returns>
          <span data-ttu-id="5c00d-131"><see langword="true" /> se l'espressione può essere convertita; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5c00d-131"><see langword="true" /> if the expression can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c00d-132">I metodi di conversione in <xref:System.Activities.Expressions.ExpressionServices> vengono progettati per funzionare con variabili e costanti definite nel flusso di lavoro o passate nel flusso di lavoro tramite argomenti.</span><span class="sxs-lookup"><span data-stu-id="5c00d-132">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvertReference&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static bool TryConvertReference&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,TResult&gt;&gt; expression, out System.Activities.Activity&lt;System.Activities.Location&lt;TResult&gt;&gt; result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryConvertReference&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, !!TResult&gt;&gt; expression, [out] class System.Activities.Activity`1&lt;class System.Activities.Location`1&lt;!!TResult&gt;&gt;&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Expressions.ExpressionServices.TryConvertReference``1(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,``0}},System.Activities.Activity{System.Activities.Location{``0}}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryConvertReference(Of TResult) (expression As Expression(Of Func(Of ActivityContext, TResult)), ByRef result As Activity(Of Location(Of TResult))) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static bool TryConvertReference(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, TResult&gt; ^&gt; ^ expression, [Runtime::InteropServices::Out] System::Activities::Activity&lt;System::Activities::Location&lt;TResult&gt; ^&gt; ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,TResult&gt;&gt;" />
        <Parameter Name="result" Type="System.Activities.Activity&lt;System.Activities.Location&lt;TResult&gt;&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="5c00d-133">Tipo in cui viene convertita l'espressione.</span><span class="sxs-lookup"><span data-stu-id="5c00d-133">The type the expression is being converted to.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="5c00d-134">Espressione di cui è in corso la conversione.</span><span class="sxs-lookup"><span data-stu-id="5c00d-134">The expression being converted.</span></span></param>
        <param name="result"><span data-ttu-id="5c00d-135">Espressione convertita.</span><span class="sxs-lookup"><span data-stu-id="5c00d-135">The converted expression.</span></span></param>
        <summary><span data-ttu-id="5c00d-136">Converte un riferimento a un'espressione in grado di supportare l'ambiente del flusso di lavoro in un albero delle attività.</span><span class="sxs-lookup"><span data-stu-id="5c00d-136">Converts a reference to a workflow environment-aware expression to an activity tree.</span></span></summary>
        <returns>
          <span data-ttu-id="5c00d-137"><see langword="true" /> se l'espressione può essere convertita; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5c00d-137"><see langword="true" /> if the expression can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5c00d-138">I metodi di conversione in <xref:System.Activities.Expressions.ExpressionServices> vengono progettati per funzionare con variabili e costanti definite nel flusso di lavoro o passate nel flusso di lavoro tramite argomenti.</span><span class="sxs-lookup"><span data-stu-id="5c00d-138">The conversion methods in <xref:System.Activities.Expressions.ExpressionServices> are designed to work with variables and constants defined inside the workflow, or passed into the workflow via arguments.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>