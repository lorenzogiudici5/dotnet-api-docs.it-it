<Type Name="Grammar" FullName="System.Speech.Recognition.Grammar">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0590aacd1e6d847c085bb5c1a57748b1e452d7fa" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531165" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Grammar extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Grammar" />
  <TypeSignature Language="VB.NET" Value="Public Class Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class Grammar" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Grammar: {(_uri != null ? "uri=" + _uri.ToString () + " " : "") + "rule=" + _ruleName }")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Un oggetto runtime che fa riferimento a una grammatica di riconoscimento vocale, che un'applicazione può utilizzare per definire vincoli per il riconoscimento vocale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una grammatica di riconoscimento vocale è un set di regole o i vincoli che definiscono quali motore di riconoscimento vocale possa riconoscere come input significativo. Per ulteriori informazioni sulla creazione e utilizzo le grammatiche riconoscimento vocale, vedere [il riconoscimento vocale](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919), [creare le grammatiche con XML](http://msdn.microsoft.com/library/2d799487-49c6-4cc9-b42f-f71cd3824fe1), [creare le grammatiche con GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae), e [creare le grammatiche con SrgsGrammar](http://msdn.microsoft.com/library/e4d9f96e-2241-4c39-b9e0-ac9ef4e9a906).  
  
 Dopo che si crea una grammatica, è necessario compilarlo in un <xref:System.Speech.Recognition.Grammar> dell'oggetto che è possibile caricare un modulo di riconoscimento vocale e che l'applicazione può utilizzare in fase di esecuzione per gestire il riconoscimento vocale. È possibile utilizzare un <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttore per creare un <xref:System.Speech.Recognition.Grammar> istanza da un <xref:System.Speech.Recognition.GrammarBuilder> o <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> oggetto, o da un file o un <xref:System.IO.Stream> che contiene una descrizione di una grammatica in un formato supportato. Di seguito sono elencati i formati supportati:  
  
-   File di formato XML conformi al W3C [vocale riconoscimento grammatica specifica (SRGS) versione 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammatiche che sono state compilate in un file binario con un'estensione di file CFG  
  
 I costruttori che accettano i file di grammatica di formato XML nei relativi argomenti grammatica compilare le grammatiche XML in un formato binario da ottimizzarle per il caricamento e l'utilizzo dal motore di riconoscimento vocale. È possibile ridurre la quantità di tempo necessario per costruire un <xref:System.Speech.Recognition.Grammar> oggetto da una grammatica XML in formato compilando la grammatica in anticipo, utilizzando uno del <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metodi.  
  
 Di un'applicazione riconoscimento vocale, come gestito da un <xref:System.Speech.Recognition.SpeechRecognizer> o <xref:System.Speech.Recognition.SpeechRecognitionEngine> di oggetto, in grado di caricare più le grammatiche di riconoscimento vocale. L'applicazione è possibile in modo indipendente di abilitare o disabilitare le grammatiche singoli impostando il <xref:System.Speech.Recognition.Grammar.Enabled%2A> , proprietà e modificare il comportamento di riconoscimento tramite <xref:System.Speech.Recognition.Grammar> proprietà, ad esempio il <xref:System.Speech.Recognition.Grammar.Priority%2A> e <xref:System.Speech.Recognition.Grammar.Weight%2A> proprietà.  
  
 La grammatica <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento viene generato quando l'input corrisponde a un percorso tramite la grammatica.  
  
> [!NOTE]
>  È consigliabile verificare la sicurezza di qualsiasi URI o DLL utilizzato per compilare un <xref:System.Speech.Recognition.Grammar> oggetto.  
>   
>  Piattaforma di riconoscimento vocale e di Windows fornire protezione per le applicazioni di creazione di un <xref:System.Speech.Recognition.Grammar> istanza da una DLL o da una grammatica che supporta lo scripting.  
>   
>  Gli script <xref:System.Speech.Recognition.Grammar> gli oggetti vengono sempre eseguiti come se scaricato da una pagina web nel `Internet Zone`. Common Language Runtime (CLR) consente di isolare le DLL caricate per ottenere una definizione di grammatica.  
  
   
  
## Examples  
 Nell'esempio seguente viene costruito un <xref:System.Speech.Recognition.Grammar> oggetto da una grammatica di riconoscimento vocale definita in un file XML (cities.xml). Il contenuto del file cities.xml viene visualizzato nell'esempio XML seguente.  
  
```csharp  
// Load a cities grammar from a local file and return the grammar object.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare un <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttore per creare un <xref:System.Speech.Recognition.Grammar> istanza da un <xref:System.Speech.Recognition.GrammarBuilder> o <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> oggetto, o da un file o un <xref:System.IO.Stream> che contiene una descrizione di una grammatica in un formato supportato. Di seguito sono elencati i formati supportati:  
  
-   File di formato XML conformi al W3C [vocale riconoscimento grammatica specifica (SRGS) versione 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammatiche che sono state compilate in un file binario con un'estensione di file CFG  
  
 I costruttori che accettano i file di grammatica di formato XML nei relativi argomenti grammatica compilare le grammatiche XML in un formato binario da ottimizzarle per il caricamento e l'utilizzo dal motore di riconoscimento vocale. È possibile ridurre la quantità di tempo necessario per costruire un <xref:System.Speech.Recognition.Grammar> oggetto da una grammatica XML in formato compilando la grammatica in anticipo, utilizzando uno del <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metodi.  
  
 Una grammatica di riconoscimento vocale è possibile definire una regola di radice. Per creare un <xref:System.Speech.Recognition.Grammar> oggetto che specifica la regola da utilizzare come la regola radice, utilizzare un costruttore che accetta il `ruleName` parametro.  
  
 Per creare un <xref:System.Speech.Recognition.Grammar> oggetto che specifica un URI di base per risolvere i riferimenti relativi regola, utilizzare un costruttore che accetta il `baseUri` parametro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Grammar ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Grammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Un flusso che descrive una grammatica di riconoscimento vocale in un formato supportato.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Grammar" /> da un oggetto <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore non passare alcun parametro per il gestore di inizializzazione e la descrizione non deve definire un gestore di inizializzazione che richiede argomenti.  
  
 Questo costruttore è possibile creare un <xref:System.Speech.Recognition.Grammar> istanza uno dei formati seguenti:  
  
-   File di formato XML conformi al W3C [vocale riconoscimento grammatica specifica (SRGS) versione 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammatiche che sono state compilate in un file binario con un'estensione di file CFG  
  
 Questo costruttore compila i file di grammatica di formato XML in un formato binario da ottimizzarle per il caricamento e l'utilizzo dal motore di riconoscimento vocale. È possibile ridurre la quantità di tempo necessario per costruire un <xref:System.Speech.Recognition.Grammar> oggetto da una grammatica XML in formato compilando la grammatica in anticipo, utilizzando uno del <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metodi.  
  
 Una grammatica SRGS è possibile definire una regola di radice. Per creare un <xref:System.Speech.Recognition.Grammar> dell'oggetto da un flusso e si specifica una regola radice, utilizzare il <xref:System.Speech.Recognition.Grammar.%23ctor%2A> o <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttore.  
  
 Per creare un <xref:System.Speech.Recognition.Grammar> dell'oggetto da un flusso e specificare un URI di base da utilizzare per risolvere i riferimenti relativi regola, utilizzare il <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttore.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale da un file SRGS locale (cities.xml) utilizzando un flusso di file. Il contenuto del file cities.xml viene visualizzato dopo l'esempio c#.  
  
```csharp  
  
// Load a cities grammar from an I/O stream and    
// return the new grammar.   
private static Grammar CreateGrammarFromStream()  
{  
  string fileName = @"c:\temp\cities.xml";  
  Grammar citiesGrammar =  
    new Grammar(new FileStream(fileName, FileMode.Open));  
  citiesGrammar.Name = "Stream Cities Grammar";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> descrive una grammatica che non contiene una regola radice.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Il flusso non contiene una descrizione valida di una grammatica, o descrive una grammatica contenente un riferimento a una regola che non può essere risolto.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">Istanza di <see cref="T:System.Speech.Recognition.GrammarBuilder" /> che contiene i vincoli per la grammatica di riconoscimento vocale.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Grammar" /> da un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sull'utilizzo di <xref:System.Speech.Recognition.GrammarBuilder> classe per definire una grammatica, vedere [creare le grammatiche con GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale utilizzando <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> oggetti. Il <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttore crea un <xref:System.Speech.Recognition.Grammar> dall'oggetto di <xref:System.Speech.Recognition.GrammarBuilder> oggetto.  
  
```csharp  
  
// Create a grammar using a GrammarBuilder and return the new grammar.   
private static Grammar CreateGrammarBuilderGrammar()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  
  Choices cityChoice = new Choices (new string[]   
  {"Seattle", "New York", "Miami", "Los Angeles"});  
  
  builder.Append("I would like to fly from");  
  builder.Append(cityChoice);  
  builder.Append("to");  
  builder.Append(cityChoice);  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "GrammarBuilder Cities Grammar";  
  
  return citiesGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Vincoli per la grammatica del riconoscimento vocale.</param>
        <summary>Inizializza una nuova istanza di una classe <see cref="T:System.Speech.Recognition.Grammar" /> da un oggetto <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore non passare i parametri per il gestore di inizializzazione e <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> non deve contenere un gestore di inizializzazione che richiede argomenti.  
  
 Oggetto <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> può disporre di una regola radice. Per creare un <xref:System.Speech.Recognition.Grammar> oggetto che specifica una regola di radice, utilizzare il <xref:System.Speech.Recognition.Grammar.%23ctor%2A> o <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttore.  
  
 Per creare un riconoscimento vocale <xref:System.Speech.Recognition.Grammar> da un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> e specificare un URI di base da utilizzare per risolvere i riferimenti relativi regola, utilizzare il <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttore.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> istanza, che viene quindi utilizzato per costruire un <xref:System.Speech.Recognition.Grammar> oggetto.  
  
```csharp  
private static Grammar CreateSrgsDocumentGrammar()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Cities rule and add it to the document.  
  SrgsRule citiesRule = new SrgsRule("Cities");  
  
  SrgsOneOf cityChoice = new SrgsOneOf();  
  cityChoice.Add(new SrgsItem("Seattle"));  
  cityChoice.Add(new SrgsItem("Los Angeles"));  
  cityChoice.Add(new SrgsItem("New York"));  
  cityChoice.Add(new SrgsItem("Miami"));  
  
  citiesRule.Add(cityChoice);  
  document.Rules.Add(citiesRule);  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("I would like to fly from");  
  item.Add(new SrgsRuleRef(citiesRule));  
  item.Add(new SrgsText("to"));  
  item.Add(new SrgsRuleRef(citiesRule));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the Grammar object.  
  Grammar citiesGrammar = new Grammar(document);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar";  
  
  return citiesGrammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="srgsDocument" /> non contiene una regola radice.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> contiene un riferimento di regola che non può essere risolto.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Il percorso del file che descrive una grammatica di riconoscimento vocale in un formato supportato.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Grammar" /> da un file.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore non passare alcun parametro per il gestore di inizializzazione e la descrizione non deve definire un gestore di inizializzazione che richiede argomenti.  
  
 Questo costruttore è possibile creare un <xref:System.Speech.Recognition.Grammar> istanza uno dei formati seguenti:  
  
-   File di formato XML conformi al W3C [vocale riconoscimento grammatica specifica (SRGS) versione 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammatiche che sono state compilate in un file binario con un'estensione di file CFG  
  
 Questo costruttore compila i file di grammatica di formato XML in un formato binario da ottimizzarle per il caricamento e l'utilizzo dal motore di riconoscimento vocale. È possibile ridurre la quantità di tempo necessario per costruire un <xref:System.Speech.Recognition.Grammar> oggetto da una grammatica XML in formato compilando la grammatica in anticipo, utilizzando uno del <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metodi.  
  
 Una grammatica SRGS è possibile definire una regola di radice. Per creare un <xref:System.Speech.Recognition.Grammar> da una stringa dell'oggetto e specificare una regola radice, utilizzare il <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttore.  
  
 Per creare un <xref:System.Speech.Recognition.Grammar> oggetto che specifica un URI di base da utilizzare per risolvere i riferimenti relativi regola, aprire il file in un flusso di file e utilizzare il <xref:System.Speech.Recognition.Grammar.%23ctor%2A?displayProperty=nameWithType> costruttore.  
  
   
  
## Examples  
 Nell'esempio seguente viene caricata una grammatica di riconoscimento vocale da un file locale SRGS per compilare un <xref:System.Speech.Recognition.Grammar> oggetto. Il contenuto del file cities.xml viene visualizzato nell'esempio XML che segue l'esempio c#.  
  
```csharp  
// Load a cities grammar from a local file and  
// return the new grammar.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Il parametro <paramref name="path" /> contiene la stringa vuota ("") o il file descrive una grammatica che non contiene una regola radice.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Il file non contiene una descrizione valida o descrive una grammatica contenente un riferimento a una regola che non può essere risolto.</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">Un flusso che descrive una grammatica di riconoscimento vocale in un formato supportato.</param>
        <param name="ruleName">Identificatore della regola da utilizzare come punto di ingresso della grammatica di riconoscimento vocale o <see langword="null" /> per utilizzare la regola radice predefinita della descrizione della grammatica.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Grammar" /> da <see cref="T:System.IO.Stream" /> e specifica una regola radice.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore non passare alcun parametro per il gestore di inizializzazione e la descrizione non deve definire un gestore di inizializzazione che richiede argomenti.  
  
 Questo costruttore è possibile creare un <xref:System.Speech.Recognition.Grammar> istanza uno dei formati seguenti:  
  
-   File di formato XML conformi al W3C [vocale riconoscimento grammatica specifica (SRGS) versione 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammatiche che sono state compilate in un file binario con un'estensione di file CFG  
  
 Questo costruttore compila i file di grammatica di formato XML in un formato binario da ottimizzarle per il caricamento e l'utilizzo dal motore di riconoscimento vocale. È possibile ridurre la quantità di tempo necessario per costruire un <xref:System.Speech.Recognition.Grammar> oggetto da una grammatica XML in formato compilando la grammatica in anticipo, utilizzando uno del <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metodi.  
  
 Per creare un <xref:System.Speech.Recognition.Grammar> da un flusso e specificare un URI di base da utilizzare per risolvere i riferimenti relativi regola, utilizzare il <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttore.  
  
   
  
## Examples  
 Nell'esempio seguente carica un file SRGS locale (cities.xml) da un flusso di file e specifica una regola da usare come radice della grammatica. Il contenuto del file cities.xml viene visualizzato nell'esempio XML che segue l'esempio c#.  
  
```csharp  
  
// Load a cities grammar from an I/O stream, use a specific  
// rule as the root of the grammar, and return the new grammar.   
private static Grammar CreateGrammarFromStream2()  
{  
  FileInfo file = new FileInfo(@"c:\temp\cities.xml");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), "Main");  
  citiesGrammar.Name = "Stream Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> non può essere risolto o non è pubblico, o <paramref name="ruleName" /> è <see langword="null" /> e la descrizione grammaticale non definisce una regola radice.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Il flusso non contiene una descrizione valida o descrive una grammatica contenente un riferimento a una regola che non può essere risolto.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Vincoli per la grammatica del riconoscimento vocale.</param>
        <param name="ruleName">L'identificatore della regola da utilizzare come punto di ingresso della grammatica di riconoscimento vocale, o <see langword="null" /> per utilizzare la regola radice predefinita di <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <summary>Inizializza una nuova istanza di una classe <see cref="T:System.Speech.Recognition.Grammar" /> da un oggetto <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> e specifica una regola radice.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore non passare i parametri per il gestore di inizializzazione e <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> non deve contenere un gestore di inizializzazione che richiede argomenti.  
  
 Per creare un <xref:System.Speech.Recognition.Grammar> dell'oggetto da un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> e specificare un URI di base da utilizzare per risolvere i riferimenti relativi regola, utilizzare il <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttore.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> istanza e specifica una regola da usare come regola radice della grammatica. Nell'esempio si costruisce un <xref:System.Speech.Recognition.Grammar> dall'oggetto di <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> istanza e li carica nel motore di riconoscimento vocale.  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create the SrgsDocument.  
        SrgsDocument document = new SrgsDocument();  
  
        // Create the Cities rule and add it to the document.  
        SrgsRule citiesRule = new SrgsRule("Cities");  
        citiesRule.Scope = SrgsRuleScope.Public;  
  
        SrgsOneOf cityChoice = new SrgsOneOf();  
        cityChoice.Add(new SrgsItem("Seattle"));  
        cityChoice.Add(new SrgsItem("Los Angeles"));  
        cityChoice.Add(new SrgsItem("New York"));  
        cityChoice.Add(new SrgsItem("Miami"));  
  
        citiesRule.Add(cityChoice);  
        document.Rules.Add(citiesRule);  
  
        // Create the Main rule and add it to the document.  
        SrgsRule mainRule = new SrgsRule("Main");  
        mainRule.Scope = SrgsRuleScope.Public;  
  
        mainRule.Add(new SrgsItem("I would like to fly from"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
        mainRule.Add(new SrgsItem("to"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
  
        document.Rules.Add(mainRule);  
  
        // Create the Grammar object and specify which rule to use as the root.  
        Grammar citiesGrammar = new Grammar(document,"Main");  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(citiesGrammar);  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting aynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> non può essere risolto o non è pubblico, o <paramref name="ruleName" /> è <see langword="null" /> e <paramref name="srgsDocument" /> non contiene una regola radice.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> contiene un riferimento di regola che non può essere risolto.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Il percorso del file che descrive una grammatica di riconoscimento vocale in un formato supportato.</param>
        <param name="ruleName">Identificatore della regola da utilizzare come punto di ingresso della grammatica di riconoscimento vocale o <see langword="null" /> per utilizzare la regola radice predefinita della descrizione della grammatica.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Grammar" /> da un file e specifica una regola radice.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore non passare alcun parametro per il gestore di inizializzazione e la descrizione non deve definire un gestore di inizializzazione che richiede argomenti.  
  
 Questo costruttore è possibile creare un <xref:System.Speech.Recognition.Grammar> istanza uno dei formati seguenti:  
  
-   File di formato XML conformi al W3C [vocale riconoscimento grammatica specifica (SRGS) versione 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammatiche che sono state compilate in un file binario con un'estensione di file CFG  
  
 Questo costruttore compila i file di grammatica di formato XML in un formato binario da ottimizzarle per il caricamento e l'utilizzo dal motore di riconoscimento vocale. È possibile ridurre la quantità di tempo necessario per costruire un <xref:System.Speech.Recognition.Grammar> oggetto da una grammatica XML in formato compilando la grammatica in anticipo, utilizzando uno del <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metodi.  
  
 Per creare un <xref:System.Speech.Recognition.Grammar> che specifica un URI di base da utilizzare per risolvere i riferimenti relativi regola, aprire un flusso di file per il file e utilizzare il <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttore.  
  
   
  
## Examples  
 Nell'esempio seguente viene caricato un file SRGS locale (cities.xml) da un file e specifica una regola da usare come radice della grammatica. Il contenuto del file cities.xml viene visualizzato nell'esempio XML che segue l'esempio c#.  
  
```csharp  
  
// Load a cities grammar from a local file, use a specific  
// rule as the root of the grammar, and return the new grammar.  
private static Grammar CreateGrammarFromFile2()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml", "Main");  
  citiesGrammar.Name = "SRGS File Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> non può essere risolto o non è pubblico, <paramref name="path" /> è la stringa vuota ("") o <paramref name="ruleName" /> è <see langword="null" /> e la descrizione grammaticale non definisce una regola radice.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Il file non contiene una descrizione valida o descrive una grammatica contenente un riferimento a una regola che non può essere risolto.</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> connesso a un oggetto input/output (inclusi i file, le risorse VisualStudio e le DLL) che contiene una specifica della grammatica.</param>
        <param name="ruleName">Identificatore della regola da utilizzare come punto di ingresso della grammatica di riconoscimento vocale o <see langword="null" /> per utilizzare la regola radice predefinita della descrizione della grammatica.</param>
        <param name="parameters">Parametri da passare al gestore di inizializzazione specificato dalla proprietà <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> per il punto di ingresso o la regola radice dell'oggetto <see cref="T:System.Speech.Recognition.Grammar" /> da creare. Questo parametro può essere null.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Grammar" /> da <see cref="T:System.IO.Stream" /> e specifica una regola radice.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inoltre è possibile specificare parametri per un gestore di inizializzazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> è connesso a una grammatica che:  
  
-   Non contiene la regola specificata in <paramref name="ruleName" />  
  
-   Richiede i parametri di inizializzazione diversi da quelli specificati in <paramref name="parameters" />  
  
-   Contiene un riferimento relativo a una regola che non può essere risolto dalla regola <see cref="T:System.Uri" /> di base predefinita per le grammatiche</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="stream">Un flusso che descrive una grammatica di riconoscimento vocale in un formato supportato.</param>
        <param name="ruleName">Identificatore della regola da utilizzare come punto di ingresso della grammatica di riconoscimento vocale o <see langword="null" /> per utilizzare la regola radice predefinita della descrizione della grammatica.</param>
        <param name="baseUri">L'URI di base da utilizzare per risolvere un riferimento di regola relativo nella descrizione grammaticale oppure <see langword="null" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Grammar" /> da un flusso, specifica una regola radice e definisce un URI (Uniform Resource Identifier) di base per risolvere i relativi riferimenti della regola.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore non passare alcun parametro per il gestore di inizializzazione e la descrizione non deve definire un gestore di inizializzazione che richiede argomenti.  
  
 Questo costruttore è possibile creare un <xref:System.Speech.Recognition.Grammar> istanza uno dei formati seguenti:  
  
-   File di formato XML conformi al W3C [vocale riconoscimento grammatica specifica (SRGS) versione 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Grammatiche che sono state compilate in un file binario con un'estensione di file CFG  
  
 Questo costruttore compila i file di grammatica di formato XML in un formato binario da ottimizzarle per il caricamento e l'utilizzo dal motore di riconoscimento vocale. È possibile ridurre la quantità di tempo necessario per costruire un <xref:System.Speech.Recognition.Grammar> oggetto da una grammatica XML in formato compilando la grammatica in anticipo, utilizzando uno del <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> metodi.  
  
 Questo costruttore non convalida `baseUri`. Tuttavia, il `LoadGrammar` metodo di un <xref:System.Speech.Recognition.SpeechRecognitionEngine> o <xref:System.Speech.Recognition.SpeechRecognizer> oggetto genera un'eccezione se non è in grado di risolvere tutti i riferimenti regola nella descrizione della grammatica. Se `baseUri` non `null`, `LoadGrammar` metodo utilizza l'URI per risolvere eventuali riferimenti regola che è in grado di risolvere in caso contrario. Se `baseUri` rappresenta un file, quindi il `LoadGrammar` Usa il file e la directory del file durante il tentativo di risolvere i riferimenti relativi regola.  
  
   
  
## Examples  
 Nell'esempio seguente carica un file SRGS locale (shuttle.xml) da un flusso di file. Il file contiene un riferimento di regola relativa a una regola nel file cities.xml e specifica un URI di base da utilizzare per risolvere il riferimento alla regola. Il contenuto dei file di shuttle.xml e cities.xml viene visualizzato negli esempi di XML che seguono l'esempio c#.  
  
```csharp  
  
private static Grammar CreateGrammarFromStream3()  
{  
  FileInfo file = new FileInfo(@".\shuttle.xml");  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), null, baseUri);  
  citiesGrammar.Name = "Stream Cities Grammar 3";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- shuttle.xml:   
    Defines an SRGS grammar for asking about a shuttle service. This grammar  
    references a Cities rule that is defined in the cities.xml grammar. -->  
  
  <rule id="Main">  
    <item>  
      Can I get a shuttle in  
      <ruleref uri="cities.xml#Cities"/>  
    </item>  
  </rule>  
</grammar>  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> non può essere risolto o non è pubblico, o <paramref name="ruleName" /> è <see langword="null" /> e la descrizione grammaticale non definisce una regola radice.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Il flusso non contiene una descrizione valida o descrive una grammatica contenente un riferimento a una regola che non può essere risolto.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Istanza di <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> che contiene i vincoli per la grammatica di riconoscimento vocale.</param>
        <param name="ruleName">Identificatore della regola da utilizzare come punto di ingresso della grammatica di riconoscimento vocale o <see langword="null" /> per utilizzare la regola radice predefinita della descrizione della grammatica.</param>
        <param name="parameters">Parametri da passare al gestore di inizializzazione specificato dalla proprietà <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> per il punto di ingresso o la regola radice dell'oggetto <see cref="T:System.Speech.Recognition.Grammar" /> da creare. Questo parametro può essere null.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Grammar" /> da un'istanza dell'oggetto <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> e specifica il nome di una regola affinché sia il punto di ingresso della grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inoltre è possibile specificare parametri per un gestore di inizializzazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   Un parametro contiene un valore non valido.  
  
-   L'oggetto <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> specificato da <paramref name="srgsDocument" /> non contiene la regola specificata da <paramref name="ruleName" />.  
  
-   Il contenuto dei parametri della matrice non corrisponde agli argomenti dei gestori di inizializzazione della regola.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Vincoli per la grammatica del riconoscimento vocale.</param>
        <param name="ruleName">L'identificatore della regola da utilizzare come punto di ingresso della grammatica di riconoscimento vocale, o <see langword="null" /> per utilizzare la regola radice predefinita di <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <param name="baseUri">L'URI di base da utilizzare per risolvere un riferimento di regola relativo nell'oggetto <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> oppure <see langword="null" />.</param>
        <summary>Inizializza una nuova istanza di una classe <see cref="T:System.Speech.Recognition.Grammar" /> da un oggetto <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />, specifica una regola radice e definisce un URI (Uniform Resource Identifier) di base per risolvere i relativi riferimenti della regola.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore non passare i parametri per il gestore di inizializzazione e <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> non deve contenere un gestore di inizializzazione che richiede argomenti.  
  
 Questo costruttore non convalida `baseUri`. Tuttavia, il `LoadGrammar` metodo di un <xref:System.Speech.Recognition.SpeechRecognitionEngine> o <xref:System.Speech.Recognition.SpeechRecognizer> oggetto genera un'eccezione se non è in grado di risolvere tutti i riferimenti regola nella descrizione della grammatica. Se `baseUri` non `null`, `LoadGrammar` metodo utilizza l'URI per risolvere eventuali riferimenti regola che è in grado di risolvere in caso contrario. Se `baseUri` rappresenta un file, quindi il `LoadGrammar` metodo utilizza il file sia la directory del file durante il tentativo di risolvere i riferimenti relativi regola.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> che contiene un riferimento di regola relativa al file cities.xml e specifica un URI da utilizzare per risolvere il riferimento alla regola. Il contenuto del file cities.xml viene visualizzato nell'esempio XML che segue l'esempio c#.  
  
```csharp  
  
private static Grammar CreateSrgsDocumentGrammar3()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("Can I get a shuttle in");  
  
  // Create a relative URI for the cities rule.  
  Uri ruleUri = new Uri("cities.xml#Cities", UriKind.Relative);  
  
  item.Add(new SrgsRuleRef(ruleUri));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the grammar.  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(document, null, baseUri);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar 3";  
  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> non può essere risolto o non è pubblico, o <paramref name="ruleName" /> è <see langword="null" /> e <paramref name="srgsDocument" /> non contiene una regola radice.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> contiene un riferimento di regola che non può essere risolto.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String, parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="path">Il percorso di un file, incluso DLL, che contiene una specifica della grammatica.</param>
        <param name="ruleName">Identificatore della regola da utilizzare come punto di ingresso della grammatica di riconoscimento vocale o <see langword="null" /> per utilizzare la regola radice predefinita della descrizione della grammatica.</param>
        <param name="parameters">Parametri da passare al gestore di inizializzazione specificato dalla proprietà <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> per il punto di ingresso o la regola radice dell'oggetto <see cref="T:System.Speech.Recognition.Grammar" /> da creare. Questo parametro può essere null.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Grammar" /> da un file contenente una definizione di grammatica e specifica il nome di una regola affinché sia il punto di ingresso della grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inoltre è possibile specificare parametri per un gestore di inizializzazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   Un parametro contiene un valore non valido.  
  
-   Il file specificato da <paramref name="path" /> non contiene una grammatica valida o la regola specificata in <paramref name="ruleName" />.  
  
-   Il contenuto dei parametri della matrice non corrisponde agli argomenti dei gestori di inizializzazione della regola.  
  
-   La grammatica ha un riferimento relativo a una regola che non può essere risolto dalla regola <see cref="T:System.Uri" /> di base di grammatica.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> connesso a un oggetto input/output (inclusi i file, le risorse VisualStudio e le DLL) che contiene una specifica della grammatica.</param>
        <param name="ruleName">Identificatore della regola da utilizzare come punto di ingresso della grammatica di riconoscimento vocale o <see langword="null" /> per utilizzare la regola radice predefinita della descrizione della grammatica.</param>
        <param name="baseUri">L'URI di base da utilizzare per risolvere un riferimento di regola relativo nella descrizione grammaticale oppure <see langword="null" />.</param>
        <param name="parameters">Parametri da passare al gestore di inizializzazione specificato dalla proprietà <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> per il punto di ingresso o la regola radice dell'oggetto <see cref="T:System.Speech.Recognition.Grammar" /> da creare. Questo parametro può essere null.</param>
        <summary>Inizializza una nuova istanza delle classi <see cref="T:System.Speech.Recognition.Grammar" /> e <see cref="T:System.IO.Stream" /> e specifica una regola radice e un URI di base per risolvere i riferimenti relativi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inoltre è possibile specificare parametri per un gestore di inizializzazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   Un parametro contiene un valore non valido.  
  
-   <paramref name="stream" /> è connesso a una grammatica che non contiene la regola specificata da <paramref name="ruleName" />.  
  
-   Il contenuto dei parametri della matrice non corrisponde agli argomenti dei gestori di inizializzazione della regola.  
  
-   La grammatica contiene un riferimento relativo a una regola che non può essere risolto dalla regola <see cref="T:System.Uri" /> di base di grammatica o dall'URI fornito da <paramref name="baseUri" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Istanza di <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> che contiene i vincoli per la grammatica di riconoscimento vocale.</param>
        <param name="ruleName">Identificatore della regola da utilizzare come punto di ingresso della grammatica di riconoscimento vocale o <see langword="null" /> per utilizzare la regola radice predefinita della descrizione della grammatica.</param>
        <param name="baseUri">L'URI di base da utilizzare per risolvere un riferimento di regola relativo nella descrizione grammaticale oppure <see langword="null" />.</param>
        <param name="parameters">Parametri da passare al gestore di inizializzazione specificato dalla proprietà <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> per il punto di ingresso o la regola radice dell'oggetto <see cref="T:System.Speech.Recognition.Grammar" /> da creare. Questo parametro può essere Null.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Grammar" /> da un'istanza dell'oggetto <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> e specifica il nome di una regola affinché sia il punto di ingresso della grammatica e un URI di base per risolvere i relativi riferimenti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inoltre è possibile specificare parametri per un gestore di inizializzazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   Un parametro contiene un valore non valido.  
  
-   L'oggetto <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> specificato da <paramref name="srgsDocument" /> non contiene la regola specificata in <paramref name="ruleName" />.  
  
-   Il contenuto dei parametri della matrice non corrisponde agli argomenti dei gestori di inizializzazione della regola.  
  
-   La grammatica ha un riferimento relativo a una regola che non può essere risolto dalla regola <see cref="T:System.Uri" /> di base di grammatica o dall'URI fornito da <paramref name="baseUri" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che controlla se <see cref="T:System.Speech.Recognition.Grammar" /> può essere utilizzato da un riconoscimento vocale per eseguire il riconoscimento.</summary>
        <value>Il <see langword="Enabled" /> restituisce proprietà <see langword="true" /> se un riconoscimento vocale può eseguire il riconoscimento utilizzando la grammatica di riconoscimento vocale; in caso contrario la proprietà restituisce <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'istanza di <xref:System.Speech.Recognition.Grammar> sia abilitato o disabilitato in modo indipendente da vengano caricati da un motore di riconoscimento vocale.  
  
   
  
## Examples  
 Nell'esempio seguente scrive le informazioni su un <xref:System.Speech.Recognition.Grammar> dell'oggetto per il [console](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="IsStg">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsStg { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStg" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.IsStg" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property IsStg As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool IsStg { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se una grammatica è fortemente tipizzata.</summary>
        <value>La proprietà <see langword="IsStg" /> restituisce <see langword="true" /> se la grammatica è fortemente tipizzata; in caso contrario, la proprietà restituisce <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto fortemente tipizzato <xref:System.Speech.Recognition.Grammar> oggetto (`IsStg` è uguale a `true`) può restituire risultati fortemente tipizzati (oggetti piuttosto che di testo non elaborato) a un'applicazione client. Ad esempio, in cui potrebbe restituire una grammatica fortemente tipizzato <xref:System.DateTime> oggetti invece di input riconosciuto non elaborato.  
  
 È possibile implementare le grammatiche fortemente tipizzati mediante l'aggiunta di codice per le regole di una grammatica. Mentre un motore di riconoscimento elabora ogni regola, acquisire come input i risultati parziali correnti, viene eseguito il codice associato e le informazioni testuali diventano gli oggetti di tipo completo. In questo modo un client rendere più facilmente utilizzare controllo semantico avanzata, supporto per più impostazioni cultura e la logica di grammatica interno.  
  
 Le istanze di fortemente tipizzata <xref:System.Speech.Recognition.Grammar> gli oggetti vengono in genere ottenuti dalle risorse in un assembly come un <xref:System.Type> di Common Language Runtime (CLR). I tipi localizzati utilizzati per supportare lingue diverse sono riportati esempi di tali <xref:System.Speech.Recognition.Grammar> oggetti.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Le grammatiche fortemente tipizzata che eredita da <see cref="T:System.Speech.Recognition.Grammar" /> necessario eseguire l'override del comportamento predefinito di <see langword="IsStg" />, ovvero per restituire <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public bool Loaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Loaded" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Loaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Loaded { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se <see cref="T:System.Speech.Recognition.Grammar" /> è stato caricato da un riconoscimento vocale.</summary>
        <value>La proprietà di <see langword="Loaded" /> restituisce <see langword="true" /> se la grammatica di riconoscimento vocale a cui si fa riferimento è attualmente caricata in un sistema di riconoscimento vocale; altrimenti la proprietà restituisce <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una volta un <xref:System.Speech.Recognition.Grammar> sono stati caricati, i valori di <xref:System.Speech.Recognition.Grammar.Weight%2A>, e <xref:System.Speech.Recognition.Grammar.Priority%2A> non può essere modificato.  
  
   
  
## Examples  
 Nell'esempio seguente scrive le informazioni su un <xref:System.Speech.Recognition.Grammar> dell'oggetto per il [console](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="LoadLocalizedGrammarFromType">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType (Type type, params object[] onInitParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType(class System.Type type, object[] onInitParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::Grammar ^ LoadLocalizedGrammarFromType(Type ^ type, ... cli::array &lt;System::Object ^&gt; ^ onInitParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="onInitParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">In un assembly, il <see cref="T:System.Type" /> di un oggetto in base a <see cref="T:System.Speech.Recognition.Grammar" />.</param>
        <param name="onInitParameters">Parametri da passare a un metodo di inizializzazione di localizedobject in base all'oggetto <see cref="T:System.Speech.Recognition.Grammar" />. Questo parametro può essere null.</param>
        <summary>Il metodo <see langword="LoadLocalizedGrammarFromType" /> restituisce un'istanza localizzata di un oggetto <see cref="T:System.Speech.Recognition.Grammar" /> derivato da <see cref="T:System.Type" />.</summary>
        <returns>Il metodo di <see langword="LoadLocalizedGrammarFromType" /> restituisce un oggetto valido in base a <see cref="T:System.Speech.Recognition.Grammar" />, o <see langword="null" /> se vi è stato un errore.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Localizzare le grammatiche ottenute con `LoadLocalizedGrammarFromType` vengono in genere fortemente tipizzata (vedere <xref:System.Speech.Recognition.Grammar.IsStg%2A> per ulteriori informazioni per le grammatiche fortemente tipizzate). Se `onInitParameters` è un riferimento null (Nothing in Visual Basic) versione localizzata grammatica deve contenere alcun metodo di inizializzazione, o un metodo che non accetta argomenti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome di un oggetto <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>La proprietà <see langword="Name" /> restituisce il nome dell'oggetto <see cref="T:System.Speech.Recognition.Grammar" />. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente crea due <xref:System.Speech.Recognition.Grammar> oggetti, uno per le cifre e uno per le frazioni di secondo. Gli oggetti di grammatica sono assegnati i nomi e i relativi pesi e le priorità e caricati da un riconoscimento vocale in-process. Il `CreateDigitsGrammar`, `CreateFractionsGrammar`, e `recognizer_SpeechRecognized` metodi non sono illustrati di seguito.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Priority { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore di priorità di un oggetto <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>La proprietà di <see langword="Priority" /> restituisce un valore integer che rappresenta la priorità relativa di un oggetto <see cref="T:System.Speech.Recognition.Grammar" /> specifico. L'intervallo è compreso tra -128 e 127. Il valore predefinito è 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Priority` proprietà viene utilizzata per selezionare una grammatica quando più di una grammatica verrà producono un risultato di riconoscimento identici. Se un riconoscimento vocale ha più di un riconoscimento grammatica vocale caricati e abilitato che corrispondono all'input, la corrispondenza è il risultato migliore dal riconoscimento, quindi il riconoscimento utilizza la grammatica che ha la massima `Priority`. Se anche le grammatiche che producono il risultato di riconoscimento identici hanno lo stesso `Priority` valore, quindi la grammatica che utilizza il riconoscimento non è definita.  
  
   
  
## Examples  
 L'esempio seguente crea due <xref:System.Speech.Recognition.Grammar> oggetti, uno per le cifre e uno per le frazioni di secondo. Il <xref:System.Speech.Recognition.Grammar> oggetti vengono assegnati i nomi e i relativi pesi e le priorità e caricati da un riconoscimento vocale in-process. Il `CreateDigitsGrammar`, `CreateFractionsGrammar`, e `recognizer_SpeechRecognized` metodi non sono illustrati di seguito.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Weight" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="ResourceName">
      <MemberSignature Language="C#" Value="protected string ResourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.ResourceName" />
      <MemberSignature Language="VB.NET" Value="Protected Property ResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ ResourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore con il nome di una risorsa binaria utilizzata per caricare l'oggetto <see cref="T:System.Speech.Recognition.Grammar" /> corrente.</summary>
        <value>La proprietà di <see langword="ResourceName" /> restituisce il nome della risorsa binaria da cui è stata caricata la grammatica fortemente tipizzata, utilizzata da <see cref="T:System.Speech.Recognition.Grammar" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuleName">
      <MemberSignature Language="C#" Value="public string RuleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RuleName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.RuleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RuleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RuleName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome del punto di ingresso o della regola radice di un oggetto <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>La proprietà di <see langword="RuleName" /> restituisce l'identificatore per la regola radice della grammatica di riconoscimento vocale a cui si fa riferimento. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per costruire un <xref:System.Speech.Recognition.Grammar> e impostare il nome per la regola di radice, utilizzare uno del <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttori che accettano il `ruleName` parametro.  
  
 Se la regola radice di un <xref:System.Speech.Recognition.Grammar> non ha un nome, la proprietà restituisce `null`.  
  
 Le regole di radice di <xref:System.Speech.Recognition.Grammar> istanze costruito da <xref:System.Speech.Recognition.GrammarBuilder> oggetti non hanno in genere alcun nome, pertanto <xref:System.Speech.Recognition.Grammar.RuleName%2A> restituisce `null`.  
  
   
  
## Examples  
 Nell'esempio seguente scrive le informazioni su un <xref:System.Speech.Recognition.Grammar> dell'oggetto per il [console](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Generato quando il riconoscimento vocale esegue il riconoscimento utilizzando l'oggetto <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il riconoscimento vocale genera anche un `SpeechRecognized` evento quando riconosce l'input. Il <xref:System.Speech.Recognition.Grammar> dell'oggetto <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento viene generato prima del riconoscimento vocale `SpeechRecognized` evento. Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> eventi.  
  
 Qualsiasi attività specifiche di una particolare grammatica deve sempre essere gestite da gestori di per il <xref:System.Speech.Recognition.Grammar> dell'oggetto <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare un gestore eventi per il <xref:System.Speech.Recognition.Grammar> dell'oggetto <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento. Restituisce i risultati di riconoscimento per il [console](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
public partial class Form1 : Form  
{  
  SpeechRecognitionEngine sre;  
  
  public Form1()  
  {  
  InitializeComponent();  
  
  // Create an in-process speech recognizer.  
  sre = new SpeechRecognitionEngine();  
  
  // Configure input to the speech recognizer.  
  sre.SetInputToDefaultAudioDevice();  
  
  // Create a simple grammar and load it.  
  Grammar testGrammar = new Grammar(new GrammarBuilder("testing"));  
  sre.LoadGrammarAsync(testGrammar);  
  
  // Add a handler for the grammar's speech recognized event.  
  testGrammar.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(testGrammar_SpeechRecognized);  
  
  // Start asynchronous speech recognition.  
  sre.RecognizeAsync();  
  }  
  
  // Handle the grammar's SpeechRecognized event, output the recognized text.  
  void testGrammar_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
  {  
    Console.WriteLine("Recognized text: " + e.Result.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="StgInit">
      <MemberSignature Language="C#" Value="protected void StgInit (object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void StgInit(object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub StgInit (parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void StgInit(cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="parameters">Parametri da passare per inizializzare la grammatica fortemente tipizzata. Questo parametro può essere Null.</param>
        <summary>Il metodo <see langword="StgInit" /> inizializza una grammatica fortemente tipizzata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto fortemente tipizzato <xref:System.Speech.Recognition.Grammar> oggetto (`IsStg` è uguale a `true`) può restituire risultati fortemente tipizzati (oggetti piuttosto che di testo non elaborato) a un'applicazione client. Ad esempio, in cui potrebbe restituire una grammatica fortemente tipizzato <xref:System.DateTime> oggetti invece di input riconosciuto non elaborato.  
  
 È possibile implementare le grammatiche fortemente tipizzati mediante l'aggiunta di codice per le regole di una grammatica. Mentre un motore di riconoscimento elabora ogni regola, acquisire come input i risultati parziali correnti, viene eseguito il codice associato e le informazioni testuali diventano gli oggetti di tipo completo. In questo modo un client rendere più facilmente utilizzare controllo semantico avanzata, supporto per più impostazioni cultura e la logica di grammatica interno.  
  
 Le istanze di fortemente tipizzata <xref:System.Speech.Recognition.Grammar> gli oggetti vengono in genere ottenuti dalle risorse in un assembly come un <xref:System.Type> di Common Language Runtime (CLR). I tipi localizzati utilizzati per supportare lingue diverse sono riportati esempi di tali <xref:System.Speech.Recognition.Grammar> oggetti.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se una grammatica fortemente tipizzata richiede l'inizializzazione, <see langword="StgInit" /> deve essere chiamato in un costruttore o un metodo di inizializzazione.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Weight">
      <MemberSignature Language="C#" Value="public float Weight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Weight" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Weight" />
      <MemberSignature Language="VB.NET" Value="Public Property Weight As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Weight { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore della larghezza di un oggetto <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>Il <see langword="Weight" /> restituisce proprietà valore che indica il peso relativo che un'istanza del motore di riconoscimento è consigliabile assegnare alla grammatica durante l'elaborazione di input vocale a virgola mobile. L'intervallo è compreso tra 0,0 e 1,0 inclusi. Il valore predefinito è 1.0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A causa della complessità di utilizzo del motore di riconoscimento di **peso**, il relativo effetto sulle prestazioni di una particolare grammatica non è stimabile direttamente a quello di <xref:System.Speech.Recognition.Grammar.Priority%2A>.  
  
 Il riconoscimento vocale è un sistema ponderato. Restituisce tutti i percorsi di riconoscimento possibili in base a una combinazione del peso della grammatica, i pesi definiti per le alternative all'interno di grammatica e le probabilità definite dai modelli di riconoscimento vocale. Il motore di riconoscimento vocale utilizza la combinazione di questi pesi e le probabilità di ranghi riconoscimenti alternative potenziali. Le grammatiche con pesi superiori fornirà informazioni sulla valutazione delle alternative di riconoscimento delle grammatiche con pesi inferiore.  
  
 L'effetto del <xref:System.Speech.Recognition.Grammar.Weight%2A> proprietà in un riconoscimento vocale è dipendente dall'implementazione di riconoscimento. Sebbene il <xref:System.Speech.Recognition.Grammar.Weight%2A> proprietà può essere utilizzata per ottimizzare l'accuratezza del riconoscimento vocale per un'applicazione, e deve essere utilizzato solo dopo avere controllato diagnostica studi di un ambiente particolare riconoscimento e con le informazioni complete sul motore di riconoscimento in uso.  
  
   
  
## Examples  
 L'esempio seguente crea due <xref:System.Speech.Recognition.Grammar> oggetti, uno per le cifre e uno per le frazioni di secondo. Il <xref:System.Speech.Recognition.Grammar> oggetti vengono assegnati i nomi e i relativi pesi e le priorità e caricati da un riconoscimento vocale in-process. Il `CreateDigitsGrammar`, `CreateFractionsGrammar`, e `recognizer_SpeechRecognized` metodi non sono illustrati di seguito.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Priority" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
  </Members>
</Type>