<Type Name="RecognitionResult" FullName="System.Speech.Recognition.RecognitionResult">
  <TypeSignature Language="C#" Value="public sealed class RecognitionResult : System.Speech.Recognition.RecognizedPhrase, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit RecognitionResult extends System.Speech.Recognition.RecognizedPhrase implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognitionResult" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RecognitionResult&#xA;Inherits RecognizedPhrase&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognitionResult sealed : System::Speech::Recognition::RecognizedPhrase, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.RecognizedPhrase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0abc5-101">Contiene informazioni dettagliate sull'input che è stato riconosciuto dalle istanze di <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> o di <see cref="T:System.Speech.Recognition.SpeechRecognizer" />.</span><span class="sxs-lookup"><span data-stu-id="0abc5-101">Contains detailed information about input that was recognized by instances of <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> or <see cref="T:System.Speech.Recognition.SpeechRecognizer" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0abc5-102">Questa classe deriva da <xref:System.Speech.Recognition.RecognizedPhrase> e vengono fornite informazioni dettagliate sul riconoscimento vocale, inclusi i seguenti:</span><span class="sxs-lookup"><span data-stu-id="0abc5-102">This class derives from <xref:System.Speech.Recognition.RecognizedPhrase> and provides detailed information about speech recognition, including the following:</span></span>  
  
-   <span data-ttu-id="0abc5-103">Il <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A> riferimenti alle proprietà di <xref:System.Speech.Recognition.Grammar> che il riconoscimento utilizzata per identificare il riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="0abc5-103">The <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A> property references the <xref:System.Speech.Recognition.Grammar> that the recognizer used to identify the speech.</span></span>  
  
-   <span data-ttu-id="0abc5-104">Il <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> proprietà contiene il testo normalizzato per la frase.</span><span class="sxs-lookup"><span data-stu-id="0abc5-104">The <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> property contains the normalized text for the phrase.</span></span> <span data-ttu-id="0abc5-105">Per ulteriori informazioni sulla normalizzazione del testo, vedere <xref:System.Speech.Recognition.ReplacementText>.</span><span class="sxs-lookup"><span data-stu-id="0abc5-105">For more information about text normalization, see <xref:System.Speech.Recognition.ReplacementText>.</span></span>  
  
-   <span data-ttu-id="0abc5-106">Il <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> le informazioni semantiche contenute nel risultato fa riferimento a proprietà.</span><span class="sxs-lookup"><span data-stu-id="0abc5-106">The <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property references the semantic information contained in the result.</span></span> <span data-ttu-id="0abc5-107">Le informazioni semantiche sono un dizionario di dati semantici associati e i nomi delle chiavi.</span><span class="sxs-lookup"><span data-stu-id="0abc5-107">The semantic information is a dictionary of the key names and associated semantic data.</span></span>  
  
-   <span data-ttu-id="0abc5-108">Il <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> proprietà contiene una raccolta di <xref:System.Speech.Recognition.RecognizedPhrase> gli oggetti che rappresentano altri interpretazioni candidato dell'input audio.</span><span class="sxs-lookup"><span data-stu-id="0abc5-108">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property contains a collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent other candidate interpretations of the audio input.</span></span> <span data-ttu-id="0abc5-109">Per altre informazioni, vedere <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>.</span><span class="sxs-lookup"><span data-stu-id="0abc5-109">See <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> for additional information.</span></span>  
  
-   <span data-ttu-id="0abc5-110">Il <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> proprietà contiene una raccolta ordinata di <xref:System.Speech.Recognition.RecognizedWordUnit> riconosciuto di oggetti che rappresentano ogni parola nell'input.</span><span class="sxs-lookup"><span data-stu-id="0abc5-110">The <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property contains an ordered collection of <xref:System.Speech.Recognition.RecognizedWordUnit> objects that represent each recognized word in the input.</span></span> <span data-ttu-id="0abc5-111">Ogni <xref:System.Speech.Recognition.RecognizedWordUnit> contiene informazioni di pronuncia per la corrispondente parola, formato lessicale e formato di visualizzazione.</span><span class="sxs-lookup"><span data-stu-id="0abc5-111">Each <xref:System.Speech.Recognition.RecognizedWordUnit> contains display format, lexical format, and pronunciation information for the corresponding word.</span></span>  
  
 <span data-ttu-id="0abc5-112">Alcuni membri del <xref:System.Speech.Recognition.SpeechRecognitionEngine>, <xref:System.Speech.Recognition.SpeechRecognizer>, e <xref:System.Speech.Recognition.Grammar> classi possono generare un <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="0abc5-112">Certain members of the <xref:System.Speech.Recognition.SpeechRecognitionEngine>, <xref:System.Speech.Recognition.SpeechRecognizer>, and <xref:System.Speech.Recognition.Grammar> classes can generate a <xref:System.Speech.Recognition.RecognitionResult>.</span></span> <span data-ttu-id="0abc5-113">Per ulteriori informazioni, vedere i metodi e gli eventi seguenti.</span><span class="sxs-lookup"><span data-stu-id="0abc5-113">For more information, see the following methods and events.</span></span>  
  
-   <span data-ttu-id="0abc5-114">Metodi ed eventi del <xref:System.Speech.Recognition.SpeechRecognitionEngine> classe:</span><span class="sxs-lookup"><span data-stu-id="0abc5-114">Methods and events of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class:</span></span>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>  
  
-   <span data-ttu-id="0abc5-115">Metodi ed eventi del <xref:System.Speech.Recognition.SpeechRecognizer> classe:</span><span class="sxs-lookup"><span data-stu-id="0abc5-115">Methods and events of the <xref:System.Speech.Recognition.SpeechRecognizer> class:</span></span>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>  
  
-   <span data-ttu-id="0abc5-116">Il <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento del <xref:System.Speech.Recognition.Grammar> classe.</span><span class="sxs-lookup"><span data-stu-id="0abc5-116">The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event of the <xref:System.Speech.Recognition.Grammar> class.</span></span>  
  
 <span data-ttu-id="0abc5-117">Per ulteriori informazioni sugli eventi di riconoscimento, vedere [mediante gli eventi di riconoscimento vocale](http://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span><span class="sxs-lookup"><span data-stu-id="0abc5-117">For more information about recognition events, see [Using Speech Recognition Events](http://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0abc5-118">Nell'esempio seguente viene illustrato un gestore per il `SpeechRecognized` evento di un <xref:System.Speech.Recognition.SpeechRecognitionEngine> o <xref:System.Speech.Recognition.SpeechRecognizer> oggetto e alcune delle informazioni sui associato <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="0abc5-118">The following example shows a handler for the `SpeechRecognized` event of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> or <xref:System.Speech.Recognition.SpeechRecognizer> object, and some of the information about the associated <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Grammar({0}), {1}: {2}",  
    e.Result.Grammar.Name, e.Result.Audio.Duration, e.Result.Text);  
  
  // Display the semantic values in the recognition result.  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine(" {0} key: {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    RecognizedAudio audio = e.Result.GetAudioForWordRange(word, word);  
    Console.WriteLine(" {0,-10} {1,-10} {2,-10} {3} ({4})",  
      word.Text, word.LexicalForm, word.Pronunciation,  
      audio.Duration, word.DisplayAttributes);  
  }  
  
  // Display the recognition alternates for the result.  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine(" alt({0}) {1}", phrase.Confidence, phrase.Text);  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
    <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
    <altmember cref="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
  </Docs>
  <Members>
    <Member MemberName="Alternates">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt; Alternates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedPhrase&gt; Alternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognitionResult.Alternates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Alternates As ReadOnlyCollection(Of RecognizedPhrase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ Alternates { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0abc5-119">Ottiene la raccolta di possibili corrispondenze per l'input del riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="0abc5-119">Gets the collection of possible matches for input to the speech recognizer.</span></span></summary>
        <value><span data-ttu-id="0abc5-120">Raccolta di sola lettura delle alternative di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="0abc5-120">A read-only collection of the recognition alternates.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0abc5-121">Riconoscimento <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> vengono ordinati in base ai valori della loro <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="0abc5-121">Recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> are ordered by the values of their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> properties.</span></span> <span data-ttu-id="0abc5-122">Il valore di probabilità di una frase specifica indica la probabilità che la frase corrisponde all'input.</span><span class="sxs-lookup"><span data-stu-id="0abc5-122">The confidence value of a given phrase indicates the probability that the phrase matches the input.</span></span> <span data-ttu-id="0abc5-123">L'espressione con il valore più elevato di confidenza è la frase che probabilmente corrisponde all'input.</span><span class="sxs-lookup"><span data-stu-id="0abc5-123">The phrase with the highest confidence value is the phrase that most likely matches the input.</span></span>  
  
 <span data-ttu-id="0abc5-124">Ogni <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> valore deve essere valutato singolarmente e senza riferimento ai valori di probabilità di altri <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>.</span><span class="sxs-lookup"><span data-stu-id="0abc5-124">Each <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> value should be evaluated individually and without reference to the confidence values of other <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>.</span></span> <span data-ttu-id="0abc5-125">Le proprietà che la <xref:System.Speech.Recognition.RecognitionResult> eredita da <xref:System.Speech.Recognition.RecognizedPhrase> forniscono informazioni dettagliate sulla frase con il punteggio di confidenza più elevato.</span><span class="sxs-lookup"><span data-stu-id="0abc5-125">The properties that the <xref:System.Speech.Recognition.RecognitionResult> inherits from <xref:System.Speech.Recognition.RecognizedPhrase> provide detailed information about the phrase with the highest confidence score.</span></span>  
  
 <span data-ttu-id="0abc5-126">È possibile utilizzare il <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> raccolta è di per la correzione degli errori automatizzata.</span><span class="sxs-lookup"><span data-stu-id="0abc5-126">One use for the <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> collection is for automated error correction.</span></span> <span data-ttu-id="0abc5-127">Ad esempio, quando si progetta una finestra di dialogo di directory, un'applicazione potrebbe richiedere all'utente di controllare se l'applicazione che contiene le informazioni corrette da un evento di riconoscimento, come nel "che hai detto"Anna"?" Se l'utente è indicato "no", quindi l'applicazione potrebbe chiedere all'utente eventuali alternative che aveva un sufficientemente elevato <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> punteggio.</span><span class="sxs-lookup"><span data-stu-id="0abc5-127">For example, when designing a directory dialog, an application could prompt the user to check if the application has the correct information from a recognition event, as in, "Did you say 'Anna'?" If the user says "no", then the application could query the user about any alternates that had a high enough <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> score.</span></span>  
  
 <span data-ttu-id="0abc5-128">Per ulteriori informazioni sul riconoscimento vocale e l'utilizzo di alternative di riconoscimento, vedere [il riconoscimento vocale](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) e [mediante gli eventi di riconoscimento vocale](http://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span><span class="sxs-lookup"><span data-stu-id="0abc5-128">For more information about speech recognition and the use of recognition alternates, see [Speech Recognition](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) and [Using Speech Recognition Events](http://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0abc5-129">Nell'esempio seguente viene illustrato un gestore per il `SpeechRecognized` evento e alcune delle informazioni associato <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="0abc5-129">The following example shows a handler for the `SpeechRecognized` event and some of the information about the associated <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Grammar({0}), {1}: {2}",  
    e.Result.Grammar.Name, e.Result.Audio.Duration, e.Result.Text);  
  
  // Display the semantic values in the recognition result.  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine(" {0} key: {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    RecognizedAudio audio = e.Result.GetAudioForWordRange(word, word);  
    Console.WriteLine(" {0,-10} {1,-10} {2,-10} {3} ({4})",  
      word.Text, word.LexicalForm, word.Pronunciation,  
      audio.Duration, word.DisplayAttributes);  
  }  
  
  // Display the recognition alternates for the result.  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine(" alt({0}) {1}", phrase.Confidence, phrase.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
        <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
      </Docs>
    </Member>
    <Member MemberName="Audio">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizedAudio Audio { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizedAudio Audio" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognitionResult.Audio" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Audio As RecognizedAudio" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizedAudio ^ Audio { System::Speech::Recognition::RecognizedAudio ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizedAudio</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0abc5-130">Ottiene l'audio associato al risultato del riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="0abc5-130">Gets the audio associated with the recognition result.</span></span></summary>
        <value><span data-ttu-id="0abc5-131">L'audio associato al risultato del riconoscimento o <see langword="null" /> se il sistema di riconoscimento ha generato il risultato da una chiamata al metodo <see langword="EmulateRecognize" /> o <see langword="EmulateRecognizeAsync" /> di un'istanza di <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> o di <see cref="T:System.Speech.Recognition.SpeechRecognizer" />.</span><span class="sxs-lookup"><span data-stu-id="0abc5-131">The audio associated with the recognition result or <see langword="null" /> if the recognizer generated the result from a call to the <see langword="EmulateRecognize" /> or <see langword="EmulateRecognizeAsync" /> methods of a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> or <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0abc5-132">Per ottenere una sezione dell'audio associato a un intervallo specifico di parole nel risultato del riconoscimento, utilizzare il <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="0abc5-132">To get a section of the audio that is associated with a specific range of words in the recognition result, use the <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0abc5-133">Nell'esempio seguente viene illustrato un gestore per il **SpeechRecognized** evento e alcune delle informazioni associato <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="0abc5-133">The following example shows a handler for the **SpeechRecognized** event and some of the information about the associated <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
      Console.WriteLine("Audio for result:");  
      Console.WriteLine("  Start time: "+ e.Result.Audio.StartTime);  
      Console.WriteLine("  Duration: " + e.Result.Audio.Duration);  
      Console.WriteLine("  Format: " + e.Result.Audio.Format.EncodingFormat);  
  
  // Display the semantic values in the recognition result.  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine(" {0} key: {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    RecognizedAudio audio = e.Result.GetAudioForWordRange(word, word);  
    Console.WriteLine(" {0,-10} {1,-10} {2,-10} {3} ({4})",  
      word.Text, word.LexicalForm, word.Pronunciation,  
      audio.Duration, word.DisplayAttributes);  
  }  
  
  // Display the recognition alternates for the result.  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine(" alt({0}) {1}", phrase.Confidence, phrase.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
        <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
        <altmember cref="M:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange(System.Speech.Recognition.RecognizedWordUnit,System.Speech.Recognition.RecognizedWordUnit)" />
      </Docs>
    </Member>
    <Member MemberName="GetAudioForWordRange">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizedAudio GetAudioForWordRange (System.Speech.Recognition.RecognizedWordUnit firstWord, System.Speech.Recognition.RecognizedWordUnit lastWord);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognizedAudio GetAudioForWordRange(class System.Speech.Recognition.RecognizedWordUnit firstWord, class System.Speech.Recognition.RecognizedWordUnit lastWord) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange(System.Speech.Recognition.RecognizedWordUnit,System.Speech.Recognition.RecognizedWordUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAudioForWordRange (firstWord As RecognizedWordUnit, lastWord As RecognizedWordUnit) As RecognizedAudio" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognizedAudio ^ GetAudioForWordRange(System::Speech::Recognition::RecognizedWordUnit ^ firstWord, System::Speech::Recognition::RecognizedWordUnit ^ lastWord);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizedAudio</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstWord" Type="System.Speech.Recognition.RecognizedWordUnit" />
        <Parameter Name="lastWord" Type="System.Speech.Recognition.RecognizedWordUnit" />
      </Parameters>
      <Docs>
        <param name="firstWord"><span data-ttu-id="0abc5-134">La prima parola nell'intervallo.</span><span class="sxs-lookup"><span data-stu-id="0abc5-134">The first word in the range.</span></span></param>
        <param name="lastWord"><span data-ttu-id="0abc5-135">L'ultima parola nell'intervallo.</span><span class="sxs-lookup"><span data-stu-id="0abc5-135">The last word in the range.</span></span></param>
        <summary><span data-ttu-id="0abc5-136">Ottiene una sezione dell'audio associato a un intervallo specifico di parole nel risultato del riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="0abc5-136">Gets a section of the audio that is associated with a specific range of words in the recognition result.</span></span></summary>
        <returns><span data-ttu-id="0abc5-137">La sezione dell'audio associata all'intervallo della parola.</span><span class="sxs-lookup"><span data-stu-id="0abc5-137">The section of audio associated with the word range.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0abc5-138">Per ottenere l'audio completo associato al risultato di riconoscimento, utilizzare il <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="0abc5-138">To get the complete audio associated with the recognition result, use the <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0abc5-139">Nell'esempio seguente crea una grammatica per accettare l'input di nome e lo collega a esso un gestore per il `SpeechRecognized` evento.</span><span class="sxs-lookup"><span data-stu-id="0abc5-139">The following example creates a grammar to accept name input and attaches to it a handler for the `SpeechRecognized` event.</span></span> <span data-ttu-id="0abc5-140">La grammatica utilizza un carattere jolly per l'elemento di nome della frase.</span><span class="sxs-lookup"><span data-stu-id="0abc5-140">The grammar uses a wildcard for the name element of the phrase.</span></span> <span data-ttu-id="0abc5-141">Il gestore dell'evento viene utilizzato l'audio dal carattere jolly per creare e riprodurre una richiesta di messaggio introduttivo.</span><span class="sxs-lookup"><span data-stu-id="0abc5-141">The event handler uses the audio from the wildcard to create and play a greeting prompt.</span></span>  
  
```csharp  
  
private Grammar CreateNameInputGrammar()  
{  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey nameKey =  
    new SemanticResultKey("Name", wildcardBuilder);  
  
  GrammarBuilder nameBuilder =  
    new GrammarBuilder("My name is");  
  nameBuilder.Append(nameKey);  
  
  Grammar nameGrammar = new Grammar(nameBuilder);  
  nameGrammar.Name = "Name input";  
  
  nameGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      NameInputHandler);  
  
  return nameGrammar;  
}  
  
// Handle the SpeechRecognized event for the name grammar.  
private void NameInputHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  SemanticValue semantics = e.Result.Semantics;  
  
  if (semantics.ContainsKey("Name"))  
  {  
    RecognizedAudio nameAudio =  
      result.GetAudioForWordRange(  
        result.Words[3], result.Words[result.Words.Count - 1]);  
  
    // Save the audio. Create a directory and file as necessary.  
    FileInfo fi = new FileInfo(@"C:\temp\temp.wav");  
    if (!fi.Directory.Exists)  
    {  
      fi.Directory.Create();  
    }  
    FileStream stream = new FileStream(fi.FullName, FileMode.Create);  
    nameAudio.WriteToWaveStream(stream);  
    stream.Close();  
  
    // Greet the person using the saved audio.  
    SpeechSynthesizer synthesizer = new SpeechSynthesizer();  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("Hello");  
    builder.AppendAudio(fi.FullName);  
    synthesizer.Speak(builder);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="0abc5-142">Il riconoscimento genera il risultato da una chiamata ai metodi <see langword="EmulateRecognize" /> o <see langword="EmulateRecognizeAsync" /> degli oggetti di <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> o di <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> .</span><span class="sxs-lookup"><span data-stu-id="0abc5-142">The recognizer generated the result from a call to <see langword="EmulateRecognize" /> or <see langword="EmulateRecognizeAsync" /> methods of the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> or <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> objects.</span></span></exception>
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
        <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Audio" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognitionResult.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="0abc5-143">Oggetto da popolare con i dati.</span><span class="sxs-lookup"><span data-stu-id="0abc5-143">The object to populate with data.</span></span></param>
        <param name="context"><span data-ttu-id="0abc5-144">Destinazione della serializzazione.</span><span class="sxs-lookup"><span data-stu-id="0abc5-144">The destination for the serialization.</span></span></param>
        <summary><span data-ttu-id="0abc5-145">Compila un'istanza <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con i dati necessari per serializzare l'oggetto di destinazione.</span><span class="sxs-lookup"><span data-stu-id="0abc5-145">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0abc5-146">Questo membro è un’implementazione esplicita di un membro di interfaccia.</span><span class="sxs-lookup"><span data-stu-id="0abc5-146">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="0abc5-147">Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Speech.Recognition.RecognitionResult> a un'interfaccia <xref:System.Runtime.Serialization.ISerializable>.</span><span class="sxs-lookup"><span data-stu-id="0abc5-147">It can be used only when the <xref:System.Speech.Recognition.RecognitionResult> instance is cast to an <xref:System.Runtime.Serialization.ISerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
  </Members>
</Type>