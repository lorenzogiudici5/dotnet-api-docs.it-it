<Type Name="SpeechUI" FullName="System.Speech.Recognition.SpeechUI">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="024efe46a0ae942529029573a258ba81f7a3440e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30526175" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeechUI" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechUI extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechUI" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechUI" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechUI" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce informazioni di testo e stato sulle operazioni di riconoscimento da visualizzare nell'interfaccia utente della piattaforma di riconoscimento vocale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I membri del <xref:System.Speech.Recognition.SpeechUI> classe può essere utilizzata per indicare l'esatta commenti e suggerimenti per l'utente finale attraverso l'interfaccia utente di riconoscimento vocale. Un'applicazione può restituire testo arbitrario e le informazioni di esito positivo o negativo utilizzando questa classe.  
  
   
  
## Examples  
 L'esempio seguente è un gestore per il <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento. Questo evento viene utilizzato da un <xref:System.Speech.Recognition.Grammar> che è progettato per gestire l'input di password nel formato "è la password...".  
  
 Se una password non è presente o non è valido, <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> invia informazioni sull'errore per l'interfaccia utente della piattaforma di riconoscimento vocale.  
  
```  
  
grammar.SpeechRecognized +=   
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else   
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() +   
              "BadPwd" + (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SendTextFeedback">
      <MemberSignature Language="C#" Value="public static bool SendTextFeedback (System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SendTextFeedback(class System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SendTextFeedback (result As RecognitionResult, feedback As String, isSuccessfulAction As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SendTextFeedback(System::Speech::Recognition::RecognitionResult ^ result, System::String ^ feedback, bool isSuccessfulAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.Speech.Recognition.RecognitionResult" />
        <Parameter Name="feedback" Type="System.String" />
        <Parameter Name="isSuccessfulAction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="result">Istanza di <see cref="T:System.Speech.Recognition.RecognitionResult" /> valida.</param>
        <param name="feedback">Oggetto <see cref="T:System.String" /> contenente un commento sull'operazione di riconoscimento che ha prodotto il <see cref="T:System.Speech.Recognition.RecognitionResult" /><c>risultato</c>.</param>
        <param name="isSuccessfulAction">
          <see langword="bool" /> che indica se l'applicazione ha considerato l'operazione di riconoscimento completata.</param>
        <summary>Invia lo stato e il testo descrittivo all'interfaccia utente della piattaforma vocale sullo stato di un'operazione di riconoscimento.</summary>
        <returns>
          <see langword="true" /> se informazioni fornite al metodo (<paramref name="Feedback" /> e a <paramref name="isSuccessfulAction" />) vengono messe correttamente a disposizione dell'interfaccia utente della piattaforma Speech; <see langword="false" /> se l'operazione ha esito negativo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> può essere utilizzato per indicare che un'operazione di riconoscimento non soddisfa determinati criteri, anche se l'input è stato riconosciuto.  
  
 Un esempio è la verifica delle informazioni sul codice di sicurezza in cui è stato completamente riconoscere l'input, ma le informazioni di verifica non erano corretto.  
  
   
  
## Examples  
 L'esempio seguente è un gestore per una <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento. Questo evento viene utilizzato da un <xref:System.Speech.Recognition.Grammar> che è progettato per gestire l'input di password del form, "è la password...".  
  
 Se una password non è presente o non è valido, **SendTextFeedback** viene utilizzato per inviare informazioni sull'errore per l'interfaccia utente della piattaforma di riconoscimento vocale.  
  
```  
  
grammar.SpeechRecognized +=  
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else  
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
              result.Words[3],  
              result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() + "BadPwd" +   
               (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>