<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="95cbc484ad2f61d90e672b839c60865c972a6fea" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39988894" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="4805a-101">Fornisce l'unità atomica dell'input vocale riconosciuto.</span>
      <span class="sxs-lookup">
        <span data-stu-id="4805a-101">Provides the atomic unit of recognized speech.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4805a-102">Tutti i risultati restituiti da un motore di riconoscimento vengono costruiti di <xref:System.Speech.Recognition.RecognizedWordUnit> oggetti.</span><span class="sxs-lookup"><span data-stu-id="4805a-102">All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span>  
  
 <span data-ttu-id="4805a-103">Una matrice di <xref:System.Speech.Recognition.RecognizedWordUnit> oggetti sia accessibile per qualsiasi operazione di riconoscimento tramite il <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> proprietà di <xref:System.Speech.Recognition.RecognizedPhrase> oggetto.</span><span class="sxs-lookup"><span data-stu-id="4805a-103">An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
 <span data-ttu-id="4805a-104">Oltre a fornire una misura di confidenza riconoscimento (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) un <xref:System.Speech.Recognition.RecognizedWordUnit> istanza offre:</span><span class="sxs-lookup"><span data-stu-id="4805a-104">In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:</span></span>  
  
-   <span data-ttu-id="4805a-105">Rappresentazioni di testo normalizzato ed esatto (o di lessicale) per una parola riconosciuta.</span><span class="sxs-lookup"><span data-stu-id="4805a-105">Normalized and exact (or lexical) text representations for a recognized word.</span></span> <span data-ttu-id="4805a-106">Per altre informazioni, vedere <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> e <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span><span class="sxs-lookup"><span data-stu-id="4805a-106">For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span></span>  
  
-   <span data-ttu-id="4805a-107">Informazioni di pronuncia utilizzo di caratteri da un alfabeto fonetico supportato, ad esempio la Universal Phone Set UPS () o l'alfabeto fonetico internazionale (IPA).</span><span class="sxs-lookup"><span data-stu-id="4805a-107">Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span> <span data-ttu-id="4805a-108">Per altre informazioni, vedere <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span><span class="sxs-lookup"><span data-stu-id="4805a-108">For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span></span>  
  
-   <span data-ttu-id="4805a-109">Formattazione per la stampa.</span><span class="sxs-lookup"><span data-stu-id="4805a-109">Formatting for printing.</span></span> <span data-ttu-id="4805a-110">Per altre informazioni vedere la <xref:System.Speech.Recognition.DisplayAttributes> classi e i relativi <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="4805a-110">For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4805a-111">L'esempio seguente mostra una routine di utilità (`stringFromWordArray`) che consente di generare le stringhe.</span><span class="sxs-lookup"><span data-stu-id="4805a-111">The following example shows a utility routine (`stringFromWordArray`) that generates strings.</span></span> <span data-ttu-id="4805a-112">Le stringhe contengono l'output lessicale (tramite <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), testo normalizzato (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), o fonetici caratteri dell'alfabeto fonetico internazionale (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="4805a-112">The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="4805a-113">Le stringhe vengono formattate utilizzando <xref:System.Speech.Recognition.DisplayAttributes> gli oggetti ottenuti dal <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> proprietà da un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> di <xref:System.Speech.Recognition.RecognizedWordUnit> oggetti.</span><span class="sxs-lookup"><span data-stu-id="4805a-113">Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="4805a-114">Il <xref:System.Speech.Recognition.RecognizedWordUnit> gli oggetti vengono ottenuti dal <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> proprietà di <xref:System.Speech.Recognition.RecognizedPhrase> oggetto.</span><span class="sxs-lookup"><span data-stu-id="4805a-114">The <xref:System.Speech.Recognition.RecognizedWordUnit> objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="4805a-115">Il testo normalizzato per una parola riconosciuta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-115">The normalized text for a recognized word.</span>
          </span>
          <span data-ttu-id="4805a-116">Questo valore può essere <see langword="null" />, "", o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-116">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span>
          </span>
        </param>
        <param name="confidence">
          <span data-ttu-id="4805a-117">Un valore <see langword="float" /> da 0,0 a 1,0 che indica la certezza del riconoscimento delle parole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-117">A <see langword="float" /> value from 0.0 through 1.0 indicating the certainty of word recognition.</span>
          </span>
        </param>
        <param name="pronunciation">
          <span data-ttu-id="4805a-118">L'ortografia fonetica di una parola riconosciuta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-118">The phonetic spelling of a recognized word.</span>
          </span>
          <span data-ttu-id="4805a-119">Questo valore può essere <see langword="null" />, "", o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-119">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span>
          </span>
        </param>
        <param name="lexicalForm">
          <span data-ttu-id="4805a-120">Il testo non normalizzato per una parola riconosciuta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-120">The unnormalized text for a recognized word.</span>
          </span>
          <span data-ttu-id="4805a-121">Questo argomento è obbligatorio e non può essere <see langword="null" />, "" o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-121">This argument is required and may not be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span>
          </span>
        </param>
        <param name="displayAttributes">
          <span data-ttu-id="4805a-122">Definisce l'utilizzo dello spazio vuoto per visualizzare le parole riconosciute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-122">Defines the use of white space to display recognized words.</span>
          </span>
        </param>
        <param name="audioPosition">
          <span data-ttu-id="4805a-123">Il percorso della parola riconosciuta nel flusso di input audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-123">The location of the recognized word in the audio input stream.</span>
          </span>
          <span data-ttu-id="4805a-124">Il valore può essere <see cref="F:System.TimeSpan.Zero" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-124">This value can be <see cref="F:System.TimeSpan.Zero" />.</span>
          </span>
        </param>
        <param name="audioDuration">
          <span data-ttu-id="4805a-125">La lunghezza dell'input audio che corrisponde all'input della parola riconosciuta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-125">The length of the audio input corresponding to the recognized word.</span>
          </span>
          <span data-ttu-id="4805a-126">Il valore può essere <see cref="F:System.TimeSpan.Zero" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-126">This value can be <see cref="F:System.TimeSpan.Zero" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="4805a-127">Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-127">Initializes a new instance of the <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4805a-128">Se `text` oppure `pronunciation` vengono `null`, "", o <xref:System.String.Empty> e il <xref:System.Speech.Recognition.RecognizedWordUnit> viene usata in un'operazione di riconoscimento, il motore di riconoscimento genererà i valori appropriati in alcun output <xref:System.Speech.Recognition.RecognizedWordUnit> istanza.</span><span class="sxs-lookup"><span data-stu-id="4805a-128">If `text` or `pronunciation` are `null`, "", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance.</span></span>  
  
 <span data-ttu-id="4805a-129">Indirizzare la costruzione di <xref:System.Speech.Recognition.RecognizedWordUnit> istanze viene in genere utilizzato solo per l'emulazione di operazioni di riconoscimento utilizzando il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> metodi del <xref:System.Speech.Recognition.SpeechRecognitionEngine> classe e il <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> o <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> metodi del <xref:System.Speech.Recognition.SpeechRecognizer> classe.</span><span class="sxs-lookup"><span data-stu-id="4805a-129">Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span>  
  
 <span data-ttu-id="4805a-130">Per le applicazioni effettive, non creare direttamente <xref:System.Speech.Recognition.RecognizedWordUnit>, anziché ottenerla tramite il <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> proprietà di <xref:System.Speech.Recognition.RecognizedPhrase> oggetto.</span><span class="sxs-lookup"><span data-stu-id="4805a-130">For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4805a-131">L'esempio seguente è un test di emulazione, in cui le nuove parole sono generate dall'input passate all'emulatore e quindi verificate alquanto improbabile.</span><span class="sxs-lookup"><span data-stu-id="4805a-131">The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.</span></span>  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4805a-132">Ottiene un valore, assegnato dal riconoscimento, che rappresenta la probabilità che una parola riconosciuta corrisponda a un input specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-132">Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4805a-133">Una misura relativa della certezza del riconoscimento corretto per una parola.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-133">A relative measure of the certainty of correct recognition for a word.</span>
          </span>
          <span data-ttu-id="4805a-134">Il valore va da 0,0 a 1,0 rispettivamente per una probabilità da bassa ad alta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-134">The value is from 0.0 to 1.0, for low to high confidence, respectively.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4805a-135">I punteggi di confidenza non indicano la probabilità assoluta che una parola è stata riconosciuta correttamente.</span><span class="sxs-lookup"><span data-stu-id="4805a-135">Confidence scores do not indicate the absolute likelihood that a word was recognized correctly.</span></span> <span data-ttu-id="4805a-136">Al contrario, i punteggi di confidenza forniscono un meccanismo per il confronto l'accuratezza relativo più alternative di riconoscimento per un input specificato.</span><span class="sxs-lookup"><span data-stu-id="4805a-136">Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input.</span></span> <span data-ttu-id="4805a-137">Questa operazione facilita la restituzione del risultato di riconoscimento più accurato.</span><span class="sxs-lookup"><span data-stu-id="4805a-137">This facilitates returning the most accurate recognition result.</span></span> <span data-ttu-id="4805a-138">Ad esempio, se una parola riconosciuta ha un punteggio di confidenza pari a 0,8, ciò non significa che la parola abbia un 80% di probabilità di corrispondenza corretta per l'input.</span><span class="sxs-lookup"><span data-stu-id="4805a-138">For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.</span></span>  <span data-ttu-id="4805a-139">Significa che la parola è più probabile che sia la corrispondenza corretta per l'input di altri risultati che dispongono di confidenza assegna un punteggio minore di 0,8.</span><span class="sxs-lookup"><span data-stu-id="4805a-139">It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.</span></span>  
  
 <span data-ttu-id="4805a-140">Un punteggio di confidenza di per sé non è significativo solo se si dispone di risultati alternativi per il confronto, la stessa operazione di riconoscimento o dal precedente riconoscimenti allo stesso input.</span><span class="sxs-lookup"><span data-stu-id="4805a-140">A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.</span></span>  
  
 <span data-ttu-id="4805a-141">I valori restituiti da <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> sono relativi e univoco per ogni motore di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="4805a-141">The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine.</span></span> <span data-ttu-id="4805a-142">È presente alcuna definizione di come confrontano i valori di fiducia tra due motori di riconoscimento diverso, né il <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> di singoli <xref:System.Speech.Recognition.RecognizedWordUnit> definiscono gli oggetti di <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> di un <xref:System.Speech.Recognition.RecognizedPhrase>.</span><span class="sxs-lookup"><span data-stu-id="4805a-142">There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
 <span data-ttu-id="4805a-143">Un motore di riconoscimento vocale può assegnare un punteggio di confidenza basso in a input vocale per vari motivi, tra cui interferenze in background, inarticulate vocale, o impreviste parole o le sequenze di word.</span><span class="sxs-lookup"><span data-stu-id="4805a-143">A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences.</span></span> <span data-ttu-id="4805a-144">Se l'applicazione usa una <xref:System.Speech.Recognition.SpeechRecognitionEngine> istanza, è possibile modificare il livello di confidenza quali sintesi e riconoscimento vocale è accettato o rifiutato con uno degli input di <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="4805a-144">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="4805a-145">Le soglie di probabilità per il riconoscimento condiviso, gestito da <xref:System.Speech.Recognition.SpeechRecognizer>, sono associati a un profilo utente e archiviate nel Registro di sistema Windows.</span><span class="sxs-lookup"><span data-stu-id="4805a-145">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="4805a-146">Le applicazioni non devono scrivere le modifiche al Registro di sistema per le proprietà del riconoscitore condiviso.</span><span class="sxs-lookup"><span data-stu-id="4805a-146">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4805a-147">Ottiene le informazioni di formattazione utilizzate per creare l'output di testo dall'istanza corrente di <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-147">Gets formatting information used to create the text output from the current <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4805a-148">Specifica l'utilizzo di spazi vuoti nella visualizzazione del contenuto di un oggetto <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-148">Specifies the use of white space to display of the contents of a <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4805a-149">Il <xref:System.Speech.Recognition.DisplayAttributes> oggetto restituito dal <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> proprietà consente di specificare gli spazi iniziali e finali da utilizzare con una determinata parola, se presente.</span><span class="sxs-lookup"><span data-stu-id="4805a-149">The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.</span></span>  
  
 <span data-ttu-id="4805a-150">Per altre informazioni su come usare queste informazioni sulla formattazione, vedere il <xref:System.Speech.Recognition.DisplayAttributes> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="4805a-150">For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4805a-151">L'esempio seguente mostra una routine di utilità (`stringFromWordArray`) che genera una stringa che viene formattata in uno dei tre modi: livello lessicale (usando <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizzato (utilizzando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), o alla fonetica (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="4805a-151">The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="4805a-152">L'output di testo viene ottenuto dal <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> proprietà in un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> del <xref:System.Speech.Recognition.RecognizedWordUnit> oggetti, che viene ottenuto dal <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> proprietà in un <xref:System.Speech.Recognition.RecognizedPhrase> oggetto.</span><span class="sxs-lookup"><span data-stu-id="4805a-152">The text output is obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4805a-153">Ottiene il testo non normalizzato di una parola riconosciuta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-153">Gets the unnormalized text of a recognized word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4805a-154">Restituisce un oggetto <see cref="T:System.String" /> contenente il testo di una parola riconosciuta, senza alcuna normalizzazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-154">Returns a <see cref="T:System.String" /> containing the text of a recognized word, without any normalization.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4805a-155">Nella maggior parte dei casi i valori restituiti da <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> e <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> sono identici.</span><span class="sxs-lookup"><span data-stu-id="4805a-155">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical.</span></span> <span data-ttu-id="4805a-156">Tuttavia, motori di riconoscimento possono utilizzare normalizzazione del riconoscimento vocale per restituire più semplici da usare o terminologiche rappresentazioni di testo di input audio.</span><span class="sxs-lookup"><span data-stu-id="4805a-156">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="4805a-157">Normalizzazione del riconoscimento vocale è l'uso di costrutti speciali o i simboli per esprimere il riconoscimento vocale in scrittura.</span><span class="sxs-lookup"><span data-stu-id="4805a-157">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="4805a-158">Ad esempio, la normalizzazione possibile sostituire le parole "un dollaro e centesimi sedici" con "$1.16" nel testo di output.</span><span class="sxs-lookup"><span data-stu-id="4805a-158">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4805a-159">L'esempio seguente mostra una routine di utilità che generi il testo in uno dei tre formati: lessicale (tramite <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizzato (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) e fonetiche (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="4805a-159">The following example shows a utility routine that generates text in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="4805a-160">L'output di testo viene ottenuto da un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> del <xref:System.Speech.Recognition.RecognizedWordUnit> oggetti, che viene ottenuto dal <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> proprietà il <xref:System.Speech.Recognition.RecognizedPhrase> oggetto.</span><span class="sxs-lookup"><span data-stu-id="4805a-160">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4805a-161">Ottiene l'ortografia fonetica di una parola riconosciuta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-161">Gets the phonetic spelling of a recognized word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4805a-162">Una stringa di caratteri di un alfabeto fonetico supportato, come l'alfabeto fonetico internazionale (IPA) o il set UPS (Universal Phone Set).</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-162">A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4805a-163">Il contenuto del <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicano quali pronuncia del motore di riconoscimento vocale utilizzato in modo che corrisponda a uno dei relativi caricato l'input vocale <xref:System.Speech.Recognition.Grammar> oggetti.</span><span class="sxs-lookup"><span data-stu-id="4805a-163">The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="4805a-164">Le pronunce possono essere definite in lessico interno del motore di riconoscimento vocale, in un documento di lessico che è stato collegato da una grammatica di riconoscimento in caricata <xref:System.Speech.Recognition.Grammar> oggetto o inline in una grammatica di riconoscimento in un caricamento <xref:System.Speech.Recognition.Grammar> oggetto.</span><span class="sxs-lookup"><span data-stu-id="4805a-164">Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="4805a-165">Un motore di riconoscimento vocale può anche creare la pronuncia di parole non comune cui pronunce non sono definite in un lessico o grammatica a cui il motore di riconoscimento vocale ha attualmente l'accesso.</span><span class="sxs-lookup"><span data-stu-id="4805a-165">A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.</span></span>  
  
 <span data-ttu-id="4805a-166">Molti tipi di carattere di Unicode basato su Windows, ad esempio Courier New, supportano la visualizzazione di stringhe IPA.</span><span class="sxs-lookup"><span data-stu-id="4805a-166">Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings.</span></span> <span data-ttu-id="4805a-167">Per altre informazioni, vedere [alfabeto fonetico internazionale](http://go.microsoft.com/fwlink/?LinkId=58363).</span><span class="sxs-lookup"><span data-stu-id="4805a-167">For more information, see [International Phonetic Alphabet](http://go.microsoft.com/fwlink/?LinkId=58363).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4805a-168">L'esempio seguente mostra una routine di utilità che genera una stringa con uno dei tre formati possibili: lessicale (tramite <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizzato (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) e fonetiche (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="4805a-168">The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="4805a-169">L'output di testo viene ottenuto da un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> del <xref:System.Speech.Recognition.RecognizedWordUnit> oggetti, che viene ottenuto dal <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> proprietà il <xref:System.Speech.Recognition.RecognizedPhrase> oggetto.</span><span class="sxs-lookup"><span data-stu-id="4805a-169">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="4805a-170">Ottiene il testo normalizzato per una parola riconosciuta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-170">Gets the normalized text for a recognized word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="4805a-171">Stringa contenente l'output di testo normalizzato per una determinata parola di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="4805a-171">A string that contains the normalized text output for a given input word.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4805a-172">Nella maggior parte dei casi i valori restituiti da <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> e <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> sarà identico.</span><span class="sxs-lookup"><span data-stu-id="4805a-172">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical.</span></span> <span data-ttu-id="4805a-173">Tuttavia, motori di riconoscimento possono utilizzare normalizzazione del riconoscimento vocale per restituire più semplici da usare o terminologiche rappresentazioni di testo di input audio.</span><span class="sxs-lookup"><span data-stu-id="4805a-173">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="4805a-174">Normalizzazione del riconoscimento vocale è l'uso di costrutti speciali o i simboli per esprimere il riconoscimento vocale in scrittura.</span><span class="sxs-lookup"><span data-stu-id="4805a-174">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="4805a-175">Ad esempio, la normalizzazione possibile sostituire le parole "un dollaro e centesimi sedici" con "$1.16" nel testo di output.</span><span class="sxs-lookup"><span data-stu-id="4805a-175">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4805a-176">L'esempio seguente mostra una routine di utilità che genera una stringa in uno dei tre formati: lessicale (tramite <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizzato (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) e fonetiche (usando <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="4805a-176">The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="4805a-177">L'output di testo viene ottenuto da un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> del <xref:System.Speech.Recognition.RecognizedWordUnit> oggetti, che viene ottenuto dal <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> proprietà il <xref:System.Speech.Recognition.RecognizedPhrase> oggetto.</span><span class="sxs-lookup"><span data-stu-id="4805a-177">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>