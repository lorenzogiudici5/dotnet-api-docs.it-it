<Type Name="RecognizedAudio" FullName="System.Speech.Recognition.RecognizedAudio">
  <TypeSignature Language="C#" Value="public class RecognizedAudio" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedAudio extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedAudio" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedAudio" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedAudio" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="b8cca-101">Rappresenta un input audio associato a un oggetto <see cref="T:System.Speech.Recognition.RecognitionResult" />.</span><span class="sxs-lookup"><span data-stu-id="b8cca-101">Represents audio input that is associated with a <see cref="T:System.Speech.Recognition.RecognitionResult" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8cca-102">Un riconoscimento vocale genera informazioni di input audio come parte dell'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="b8cca-102">A speech recognizer generates information about the audio input as part of the recognition operation.</span></span> <span data-ttu-id="b8cca-103">Per accedere a audio riconosciuto, utilizzare il <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> proprietà o <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> metodo il <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="b8cca-103">To access the recognized audio, use the <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property or the <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> method of the <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="b8cca-104">Il risultato di un riconoscimento può essere generato dai seguenti eventi e i metodi del <xref:System.Speech.Recognition.SpeechRecognizer> e <xref:System.Speech.Recognition.SpeechRecognitionEngine> classi:</span><span class="sxs-lookup"><span data-stu-id="b8cca-104">A recognition result can be produced by the following events and methods of the <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes:</span></span>  
  
-   <span data-ttu-id="b8cca-105">Eventi:</span><span class="sxs-lookup"><span data-stu-id="b8cca-105">Events:</span></span>  
  
    -   <span data-ttu-id="b8cca-106"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized?displayProperty=nameWithType> e <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b8cca-106"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized?displayProperty=nameWithType></span></span>  
  
    -   <span data-ttu-id="b8cca-107"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected?displayProperty=nameWithType> e <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b8cca-107"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected?displayProperty=nameWithType></span></span>  
  
    -   <span data-ttu-id="b8cca-108"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> e <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b8cca-108"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType></span></span>  
  
    -   <span data-ttu-id="b8cca-109"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted?displayProperty=nameWithType> e <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b8cca-109"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted?displayProperty=nameWithType></span></span>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted?displayProperty=nameWithType>  
  
-   <span data-ttu-id="b8cca-110">Metodi:</span><span class="sxs-lookup"><span data-stu-id="b8cca-110">Methods:</span></span>  
  
    -   <span data-ttu-id="b8cca-111"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A?displayProperty=nameWithType> e <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b8cca-111"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A?displayProperty=nameWithType></span></span>  
  
    -   <span data-ttu-id="b8cca-112"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A?displayProperty=nameWithType> e <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="b8cca-112"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A?displayProperty=nameWithType></span></span>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A?displayProperty=nameWithType>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A?displayProperty=nameWithType>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b8cca-113">Un risultato di riconoscimento generato dal riconoscimento vocale emulata non contiene audio riconosciuto.</span><span class="sxs-lookup"><span data-stu-id="b8cca-113">A recognition result produced by emulated speech recognition does not contain recognized audio.</span></span> <span data-ttu-id="b8cca-114">Per questo tipo un risultato, il riconoscimento relativo <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> restituisce proprietà `null` e il relativo <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> metodo genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="b8cca-114">For such a recognition result, its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property returns `null` and its <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> method throws an exception.</span></span> <span data-ttu-id="b8cca-115">Per ulteriori informazioni sul riconoscimento vocale emulato, vedere il `EmulateRecognize` e `EmulateRecognizeAsync` metodi di <xref:System.Speech.Recognition.SpeechRecognizer> e <xref:System.Speech.Recognition.SpeechRecognitionEngine> classi.</span><span class="sxs-lookup"><span data-stu-id="b8cca-115">For more information about emulated speech recognition, see the `EmulateRecognize` and `EmulateRecognizeAsync` methods of the <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8cca-116">L'esempio seguente viene gestito il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, o <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> evento e output per le informazioni di console l'audio riconosciuto associata al risultato del riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="b8cca-116">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, or <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedAudio.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8cca-117">Ottiene la posizione nel flusso audio di input per l'inizio dell'audio riconosciuto.</span><span class="sxs-lookup"><span data-stu-id="b8cca-117">Gets the location in the input audio stream for the start of the recognized audio.</span></span></summary>
        <value><span data-ttu-id="b8cca-118">La posizione nel flusso audio di input per l'inizio dell'audio riconosciuto.</span><span class="sxs-lookup"><span data-stu-id="b8cca-118">The location in the input audio stream for the start of the recognized audio.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8cca-119">Questa proprietà fa riferimento la posizione all'inizio della frase riconosciuta nel flusso audio generato del dispositivo di input.</span><span class="sxs-lookup"><span data-stu-id="b8cca-119">This property references the position at the beginning of the recognized phrase in the input device's generated audio stream.</span></span> <span data-ttu-id="b8cca-120">Al contrario, il `RecognizerAudioPosition` proprietà del <xref:System.Speech.Recognition.SpeechRecognitionEngine> e <xref:System.Speech.Recognition.SpeechRecognizer> fanno riferimento a classi di posizione del riconoscimento all'interno di input audio.</span><span class="sxs-lookup"><span data-stu-id="b8cca-120">By contrast, the `RecognizerAudioPosition` property of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> and <xref:System.Speech.Recognition.SpeechRecognizer> classes reference the recognizer's position within its audio input.</span></span> <span data-ttu-id="b8cca-121">Queste posizioni possono essere diverse.</span><span class="sxs-lookup"><span data-stu-id="b8cca-121">These positions can be different.</span></span> <span data-ttu-id="b8cca-122">Per ulteriori informazioni, vedere [mediante gli eventi di riconoscimento vocale](http://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span><span class="sxs-lookup"><span data-stu-id="b8cca-122">For more information, see [Using Speech Recognition Events](http://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span></span>  
  
 <span data-ttu-id="b8cca-123">Il <xref:System.Speech.Recognition.RecognizedAudio.StartTime%2A> proprietà ottiene l'ora di sistema all'inizio dell'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="b8cca-123">The <xref:System.Speech.Recognition.RecognizedAudio.StartTime%2A> property gets the system time at the start of the recognition operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8cca-124">L'esempio seguente viene gestito il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> o <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> evento e output per le informazioni di console l'audio riconosciuto associata al risultato del riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="b8cca-124">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Enabled" />
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.Duration" />
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.StartTime" />
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Duration" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedAudio.Duration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Duration As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Duration { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8cca-125">Ottiene la durata del flusso audio di input per l'audio riconosciuto.</span><span class="sxs-lookup"><span data-stu-id="b8cca-125">Gets the duration of the input audio stream for the recognized audio.</span></span></summary>
        <value><span data-ttu-id="b8cca-126">La durata all'interno del flusso di input audio dell'audio riconosciuto.</span><span class="sxs-lookup"><span data-stu-id="b8cca-126">The duration within the input audio stream for the recognized audio.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b8cca-127">L'esempio seguente viene gestito il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> o <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> evento e output per le informazioni di console l'audio riconosciuto associata al risultato del riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="b8cca-127">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.StartTime" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo Format { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo Format" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedAudio.Format" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Format As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ Format { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8cca-128">Ottiene il formato dell'audio elaborato da un motore di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="b8cca-128">Gets the format of the audio processed by a recognition engine.</span></span></summary>
        <value><span data-ttu-id="b8cca-129">Il formato dell'audio elaborato dal riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="b8cca-129">The format of the audio processed by the speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b8cca-130">L'esempio seguente viene gestito il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> o <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> evento e output per le informazioni di console l'audio riconosciuto associata al risultato del riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="b8cca-130">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="N:System.Speech.AudioFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizedAudio GetRange (TimeSpan audioPosition, TimeSpan duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognizedAudio GetRange(valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedAudio.GetRange(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRange (audioPosition As TimeSpan, duration As TimeSpan) As RecognizedAudio" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognizedAudio ^ GetRange(TimeSpan audioPosition, TimeSpan duration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizedAudio</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="duration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="audioPosition"><span data-ttu-id="b8cca-131">Il punto iniziale dei dati audio da restituire.</span><span class="sxs-lookup"><span data-stu-id="b8cca-131">The starting point of the audio data to be returned.</span></span></param>
        <param name="duration"><span data-ttu-id="b8cca-132">Lunghezza del segmento da restituire.</span><span class="sxs-lookup"><span data-stu-id="b8cca-132">The length of the segment to be returned.</span></span></param>
        <summary><span data-ttu-id="b8cca-133">Seleziona e restituisce una sezione dell'audio riconosciuto corrente come dati binari.</span><span class="sxs-lookup"><span data-stu-id="b8cca-133">Selects and returns a section of the current recognized audio as binary data.</span></span></summary>
        <returns><span data-ttu-id="b8cca-134">Restituisce una sottosezione dell'audio riconosciuto, definito da <paramref name="audioPosition" /> e <paramref name="duration" />.</span><span class="sxs-lookup"><span data-stu-id="b8cca-134">Returns a subsection of the recognized audio, as defined by <paramref name="audioPosition" /> and <paramref name="duration" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b8cca-135">L'esempio seguente crea una grammatica di riconoscimento vocale per l'input di nome, aggiunge un gestore per il <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento e carica la grammatica nel riconoscimento vocale in-process.</span><span class="sxs-lookup"><span data-stu-id="b8cca-135">The following example creates a speech recognition grammar for name input, adds a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event, and loads the grammar into an in-process speech recognizer.</span></span> <span data-ttu-id="b8cca-136">Quindi scrive le informazioni audio per la parte del nome dell'input in un file audio.</span><span class="sxs-lookup"><span data-stu-id="b8cca-136">Then it writes the audio information for the name portion of the input to an audio file.</span></span> <span data-ttu-id="b8cca-137">Il file audio viene usato come input per un <xref:System.Speech.Synthesis.SpeechSynthesizer> oggetto, che legge una frase che include l'audio registrato.</span><span class="sxs-lookup"><span data-stu-id="b8cca-137">The audio file is used as input to a <xref:System.Speech.Synthesis.SpeechSynthesizer> object, which speaks a phrase that includes the recorded audio.</span></span>  
  
```  
private static void AddNameGrammar(SpeechRecognitionEngine recognizer)  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.Append("My name is");  
  builder.AppendWildcard();  
  
  Grammar nameGrammar = new Grammar(builder);  
  nameGrammar.Name = "Name Grammar";  
  nameGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      NameSpeechRecognized);  
  
  recognizer.LoadGrammar(nameGrammar);  
}  
  
// Handle the SpeechRecognized event of the name grammar.  
private static void NameSpeechRecognized(  
  object sender, SpeechRecognizedEventArgs e)  
{  
  Console.WriteLine("Grammar ({0}) recognized speech: {1}",  
    e.Result.Grammar.Name, e.Result.Text);  
  
  try  
  {  
  
    // The name phrase starts after the first three words.  
    if (e.Result.Words.Count < 4)  
    {  
  
      // Add code to check for an alternate that contains the wildcard.  
      return;  
    }  
  
    RecognizedAudio audio = e.Result.Audio;  
    TimeSpan start = e.Result.Words[3].AudioPosition;  
    TimeSpan duration = audio.Duration - start;  
  
    // Add code to verify and persist the audio.  
    string path = @"C:\temp\nameAudio.wav";  
    using (Stream outputStream = new FileStream(path, FileMode.Create))  
    {  
      RecognizedAudio nameAudio = audio.GetRange(start, duration);  
      nameAudio.WriteToWaveStream(outputStream);  
      outputStream.Close();  
    }  
  
    Thread testThread =  
      new Thread(new ParameterizedThreadStart(TestAudio));  
    testThread.Start(path);  
  }  
  catch (Exception ex)  
  {  
    Console.WriteLine("Exception thrown while processing audio:");  
    Console.WriteLine(ex.ToString());  
  }  
}  
  
// Use the speech synthesizer to play back the .wav file  
// that was created in the SpeechRecognized event handler.  
  
private static void TestAudio(object item)  
{  
  string path = item as string;  
  if (path != null && File.Exists(path))  
  {  
    SpeechSynthesizer synthesizer = new SpeechSynthesizer();  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("Hello");  
    builder.AppendAudio(path);  
    synthesizer.Speak(builder);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="b8cca-138"><paramref name="audioPosition" /> e <paramref name="duration" /> definiscono un segmento di audio fuori dall'intervallo del segmento corrente.</span><span class="sxs-lookup"><span data-stu-id="b8cca-138"><paramref name="audioPosition" /> and <paramref name="duration" /> define a segment of audio outside the range of the current segment.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8cca-139">L'audio corrente riconosciuto non contiene dati.</span><span class="sxs-lookup"><span data-stu-id="b8cca-139">The current recognized audio contains no data.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream(System.IO.Stream)" />
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="StartTime">
      <MemberSignature Language="C#" Value="public DateTime StartTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime StartTime" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedAudio.StartTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime StartTime { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8cca-140">Ottiene l'ora di sistema all'inizio dell'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="b8cca-140">Gets the system time at the start of the recognition operation.</span></span></summary>
        <value><span data-ttu-id="b8cca-141">L'ora di sistema all'inizio dell'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="b8cca-141">The system time at the start of the recognition operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8cca-142">Il <xref:System.Speech.Recognition.RecognizedAudio.StartTime%2A> proprietà ottiene l'ora di sistema all'inizio dell'operazione di riconoscimento, che può essere utile per i calcoli di latenza e prestazioni.</span><span class="sxs-lookup"><span data-stu-id="b8cca-142">The <xref:System.Speech.Recognition.RecognizedAudio.StartTime%2A> property gets the system time at the start of the recognition operation, which can be useful for latency and performance calculations.</span></span>  
  
 <span data-ttu-id="b8cca-143">Il <xref:System.Speech.Recognition.RecognizedAudio.AudioPosition%2A> proprietà ottiene la posizione nel flusso audio generato del dispositivo di input.</span><span class="sxs-lookup"><span data-stu-id="b8cca-143">The <xref:System.Speech.Recognition.RecognizedAudio.AudioPosition%2A> property gets the location in the input device's generated audio stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8cca-144">L'esempio seguente viene gestito il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> o <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> evento e output per le informazioni di console l'audio riconosciuto associata al risultato del riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="b8cca-144">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="WriteToAudioStream">
      <MemberSignature Language="C#" Value="public void WriteToAudioStream (System.IO.Stream outputStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToAudioStream(class System.IO.Stream outputStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToAudioStream (outputStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToAudioStream(System::IO::Stream ^ outputStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="outputStream"><span data-ttu-id="b8cca-145">Flusso che riceverà i dati audio.</span><span class="sxs-lookup"><span data-stu-id="b8cca-145">The stream that will receive the audio data.</span></span></param>
        <summary><span data-ttu-id="b8cca-146">Scrive l'intero audio in un flusso come dati non elaborati.</span><span class="sxs-lookup"><span data-stu-id="b8cca-146">Writes the entire audio to a stream as raw data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8cca-147">Vengono scritti dati audio `outputStream` in formato binario.</span><span class="sxs-lookup"><span data-stu-id="b8cca-147">Audio data is written to `outputStream` in binary form.</span></span> <span data-ttu-id="b8cca-148">Le informazioni di intestazione non sono incluse.</span><span class="sxs-lookup"><span data-stu-id="b8cca-148">No header information is included.</span></span>  
  
 <span data-ttu-id="b8cca-149">Il <xref:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream%2A> metodo utilizza il formato di Wave, ma non include l'intestazione audio.</span><span class="sxs-lookup"><span data-stu-id="b8cca-149">The <xref:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream%2A> method uses the Wave format, but does not include the Wave header.</span></span> <span data-ttu-id="b8cca-150">Per includere l'intestazione Wave, utilizzare il <xref:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="b8cca-150">To include the Wave header, use the <xref:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.GetRange(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="WriteToWaveStream">
      <MemberSignature Language="C#" Value="public void WriteToWaveStream (System.IO.Stream outputStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToWaveStream(class System.IO.Stream outputStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToWaveStream (outputStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToWaveStream(System::IO::Stream ^ outputStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="outputStream"><span data-ttu-id="b8cca-151">Flusso che riceverà i dati audio.</span><span class="sxs-lookup"><span data-stu-id="b8cca-151">The stream that will receive the audio data.</span></span></param>
        <summary><span data-ttu-id="b8cca-152">Scrive audio in un flusso nel formato Wave.</span><span class="sxs-lookup"><span data-stu-id="b8cca-152">Writes audio to a stream in Wave format.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8cca-153">Vengono scritti dati audio `outputStream` in formato Wave, che include un'intestazione di formato (RIFF) file di risorse interscambio.</span><span class="sxs-lookup"><span data-stu-id="b8cca-153">Audio data is written to `outputStream` in Wave format, which includes a resource interchange file format (RIFF) header.</span></span>  
  
 <span data-ttu-id="b8cca-154">Il <xref:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream%2A> metodo Usa lo stesso formato binario, ma non include l'intestazione audio.</span><span class="sxs-lookup"><span data-stu-id="b8cca-154">The <xref:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream%2A> method uses the same binary format, but does not include the Wave header.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8cca-155">L'esempio seguente crea una grammatica di riconoscimento vocale per l'input di nome, aggiunge un gestore per il <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento e carica la grammatica nel riconoscimento vocale in-process.</span><span class="sxs-lookup"><span data-stu-id="b8cca-155">The following example creates a speech recognition grammar for name input, adds a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event, and loads the grammar into an in-process speech recognizer.</span></span> <span data-ttu-id="b8cca-156">Quindi scrive le informazioni audio per la parte del nome dell'input in un file audio.</span><span class="sxs-lookup"><span data-stu-id="b8cca-156">Then it writes the audio information for the name portion of the input to an audio file.</span></span> <span data-ttu-id="b8cca-157">Il file audio viene usato come input per un <xref:System.Speech.Synthesis.SpeechSynthesizer> oggetto, che legge una frase che include l'audio registrato.</span><span class="sxs-lookup"><span data-stu-id="b8cca-157">The audio file is used as input to a <xref:System.Speech.Synthesis.SpeechSynthesizer> object, which speaks a phrase that includes the recorded audio.</span></span>  
  
```  
private static void AddNameGrammar(SpeechRecognitionEngine recognizer)  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.Append("My name is");  
  builder.AppendWildcard();  
  
  Grammar nameGrammar = new Grammar(builder);  
  nameGrammar.Name = "Name Grammar";  
  nameGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      NameSpeechRecognized);  
  
  recognizer.LoadGrammar(nameGrammar);  
}  
  
// Handle the SpeechRecognized event of the name grammar.  
private static void NameSpeechRecognized(  
  object sender, SpeechRecognizedEventArgs e)  
{  
  Console.WriteLine("Grammar ({0}) recognized speech: {1}",  
    e.Result.Grammar.Name, e.Result.Text);  
  
  try  
  {  
    // The name phrase starts after the first three words.  
    if (e.Result.Words.Count < 4)  
    {  
  
      // Add code to check for an alternate that contains the   
wildcard.  
      return;  
    }  
  
    RecognizedAudio audio = e.Result.Audio;  
    TimeSpan start = e.Result.Words[3].AudioPosition;  
    TimeSpan duration = audio.Duration - start;  
  
    // Add code to verify and persist the audio.  
    string path = @"C:\temp\nameAudio.wav";  
    using (Stream outputStream = new FileStream(path, FileMode.Create))  
    {  
      RecognizedAudio nameAudio = audio.GetRange(start, duration);  
      nameAudio.WriteToWaveStream(outputStream);  
      outputStream.Close();  
    }  
  
    Thread testThread =  
      new Thread(new ParameterizedThreadStart(TestAudio));  
    testThread.Start(path);  
  }  
  catch (Exception ex)  
  {  
    Console.WriteLine("Exception thrown while processing audio:");  
    Console.WriteLine(ex.ToString());  
  }  
}  
  
// Use the speech synthesizer to play back the .wav file  
// that was created in the SpeechRecognized event handler.  
  
private static void TestAudio(object item)  
{  
  string path = item as string;  
  if (path != null && File.Exists(path))  
  {  
    SpeechSynthesizer synthesizer = new SpeechSynthesizer();  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("Hello");  
    builder.AppendAudio(path);  
    synthesizer.Speak(builder);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.GetRange(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream(System.IO.Stream)" />
      </Docs>
    </Member>
  </Members>
</Type>