<Type Name="RecognizedPhrase" FullName="System.Speech.Recognition.RecognizedPhrase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c7b4bcf1096859683fe6b5c969f81cc456020402" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529515" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RecognizedPhrase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedPhrase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedPhrase" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedPhrase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedPhrase" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{Text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Contiene informazioni dettagliate generate dal riconoscimento vocale sull'input riconosciuto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa classe contiene informazioni dettagliate su parole e frasi elaborate durante le operazioni di riconoscimento vocale, incluse le seguenti:  
  
-   Il <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A> riferimenti alle proprietà di <xref:System.Speech.Recognition.Grammar> il riconoscimento viene utilizzato per identificare l'input.  
  
-   Il <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> proprietà contiene il testo normalizzato per la frase.  
  
-   Il <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> le informazioni semantiche contenute nel risultato fa riferimento a proprietà. Le informazioni semantiche sono un dizionario di dati semantici associati e i nomi delle chiavi.  
  
-   Il <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> proprietà contiene una raccolta ordinata di <xref:System.Speech.Recognition.RecognizedWordUnit> riconosciuto di oggetti che rappresentano ogni parola nell'input. Ogni unità di word contiene formato di visualizzazione, il formato lessicale e informazioni di pronuncia per il termine corrispondente.  
  
-   Il <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> proprietà contiene informazioni sulla sostituzione di word specializzate.  
  
-   Il <xref:System.Speech.Recognition.RecognizedPhrase.Homophones%2A> e <xref:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId%2A> proprietà contengono informazioni sulle alternative di riconoscimento con la pronuncia identici o simile.  
  
-   Il valore di <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> proprietà indica il livello di certezza, assegnato dal riconoscimento vocale, che una frase riconosciuta corrisponde all'input.  
  
 Il riconoscimento vocale ha restituisce i risultati del riconoscimento in un <xref:System.Speech.Recognition.RecognitionResult> oggetto, che eredita da <xref:System.Speech.Recognition.RecognizedPhrase>. Risultato del riconoscimento <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> proprietà contiene una raccolta ordinata di <xref:System.Speech.Recognition.RecognizedPhrase> oggetti, ognuno dei quali è una corrispondenza possibile per l'input per il riconoscimento.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore per un <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, o <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> evento e alcune delle informazioni di cui è associate il <xref:System.Speech.Recognition.RecognitionResult> oggetto. La classe <xref:System.Speech.Recognition.RecognitionResult> deriva dalla classe <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
  </Docs>
  <Members>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore, assegnato dal riconoscimento, che rappresenta la probabilità che <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> corrisponda a un input specificato.</summary>
        <value>Una misura relativa della certezza del riconoscimento corretto di una frase. Il valore va da 0,0 a 1,0 rispettivamente per una probabilità da bassa ad alta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Punteggi di confidenza indica la probabilità assoluta che è stata riconosciuta correttamente una frase. Al contrario, i punteggi di confidenza forniscono un meccanismo per il confronto tra la precisione relativa più alternative di riconoscimento per un input specificato. Ciò facilita la restituzione del risultato di riconoscimento più accurato. Ad esempio, se una frase riconosciuta ha un punteggio di confidenza pari a 0,8, ciò non significa che la frase è una probabilità 80% che la corrispondenza corretta per l'input.  Significa che la frase è più probabile che sia la corrispondenza corretta per l'input di altri risultati con confidenza punteggi minore 0,8.  
  
 Un punteggio di confidenza autonomamente non è significativo solo se si dispone di risultati alternativi per il confronto, la stessa operazione di riconoscimento o dal precedente riconoscimenti dell'input stesso. I valori vengono utilizzati per classificare candidato alternativo frasi restituite dal <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> proprietà <xref:System.Speech.Recognition.RecognitionResult> oggetti.  
  
 I valori di probabilità sono relativi e univoco per ogni motore di riconoscimento. I valori di confidenza restituiti da due motori di riconoscimento diversa non è possibile confrontare in modo significativo.  
  
 Un motore di riconoscimento vocale può assegnare un punteggio di confidenza basso input vocale per vari motivi, tra cui interferenze di sfondo, inarticulate vocale, o parole impreviste o le sequenze di word. Se l'applicazione utilizza un <xref:System.Speech.Recognition.SpeechRecognitionEngine> istanza, è possibile modificare il livello di confidenza quali sintesi e riconoscimento vocale è è accettato o rifiutato con uno degli input di <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> metodi. Le soglie di probabilità per il riconoscimento condiviso, gestito da <xref:System.Speech.Recognition.SpeechRecognizer>, sono associati a un profilo utente e archiviati nel Registro di sistema Windows. Le applicazioni non scrivere le modifiche al Registro di sistema per le proprietà di riconoscimento condiviso.  
  
 Il <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> proprietà del <xref:System.Speech.Recognition.RecognitionResult> oggetto contiene una raccolta ordinata di <xref:System.Speech.Recognition.RecognizedPhrase> oggetti, ognuno dei quali è una corrispondenza possibile per l'input per il riconoscimento. Alternative di vengono ordinate dal più alto al più basso confidenza.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore per un <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, o <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> evento. L'esempio mostra le informazioni associate di <xref:System.Speech.Recognition.RecognitionResult> oggetto, alcuni dei quali è derivato da <xref:System.Speech.Recognition.RecognizedPhrase>. Il gestore consente di visualizzare i punteggi di confidenza per una frase riconosciuta anche per le alternative di riconoscimento.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="ConstructSmlFromSemantics">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics" />
      <MemberSignature Language="VB.NET" Value="Public Function ConstructSmlFromSemantics () As IXPathNavigable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XPath::IXPathNavigable ^ ConstructSmlFromSemantics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.IXPathNavigable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un documento SML (Semantic Markup Language) per le informazioni semantiche nell'oggetto <see cref="T:System.Speech.Recognition.RecognizedPhrase" />.</summary>
        <returns>Restituisce una descrizione SML della semantica di <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> come oggetto esplorabile [XPath](http://msdn.microsoft.com/library/ms256115.aspx).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per informazioni sul linguaggio di markup semantico SML (), vedere il [riferimenti al linguaggio di Markup semantico](http://msdn.microsoft.com/library/f9d83443-2cac-49bc-a447-210feda62f5d).  
  
   
  
## Examples  
 Nell'esempio seguente, un metodo restituisce una stringa che contiene il SML per la semantica di una frase riconosciuta.  
  
```  
private string GetSemanticsSML(RecognizedPhrase result)  
{  
  if (result.Semantics.Count > 0)  
  {  
    return result.ConstructSmlFromSemantics().CreateNavigator().OuterXml;  
  }  
  else  
  {  
    return null;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Grammar">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.Grammar Grammar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.Grammar Grammar" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammar As Grammar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::Grammar ^ Grammar { System::Speech::Recognition::Grammar ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Speech.Recognition.Grammar" /> usato dal riconoscimento vocale per restituire <see cref="T:System.Speech.Recognition.RecognizedPhrase" />.</summary>
        <value>L'oggetto grammatica che il riconoscimento vocale ha usato per identificare l'input.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="HomophoneGroupId">
      <MemberSignature Language="C#" Value="public int HomophoneGroupId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HomophoneGroupId" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HomophoneGroupId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HomophoneGroupId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'identificatore per il gruppo di omofoni per la frase.</summary>
        <value>L'identificatore per il gruppo di omofoni per la frase.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il riconoscimento vocale ha assegna un identificatore di gruppo per tutti le alternative di riconoscimento con la stessa pronuncia. Per ogni altro che ha una pronuncia univoca, il riconoscimento crea un gruppo di omofoni. Il riconoscimento vocale Genera nuovo gruppo di identificatori per ogni operazione di riconoscimento e gli identificatori non possono essere utilizzati per confrontare alternative da generati da operazioni di riconoscimento separato.  
  
 Per ottenere un risultato di riconoscimento che conteneva alternative di "la tabella", "tail" e "il ale", ad esempio, i primi due alternative potrebbero appartenere a un gruppo di omofoni e l'ultima alternativa sarebbe il singolo membro di un secondo gruppo di omofoni.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      </Docs>
    </Member>
    <Member MemberName="Homophones">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt; Homophones { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedPhrase&gt; Homophones" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Homophones As ReadOnlyCollection(Of RecognizedPhrase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ Homophones { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una raccolta di alternative di riconoscimento con la stessa pronuncia della frase riconosciuta.</summary>
        <value>Una raccolta di sola lettura delle alternative di riconoscimento con la stessa pronuncia della frase riconosciuta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce tutte le altre alternative di riconoscimento con la stessa pronuncia della frase riconosciuta.  
  
 Ad esempio, per ottenere un risultato di riconoscimento che conteneva alternative di, "la tabella" e "tail", l'insieme di omofoni per la prima alternativa, "la tabella" contiene la seconda frase, "tail". L'insieme di omofoni per la seconda alternativa, "tail" contiene la frase "la tabella" primo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      </Docs>
    </Member>
    <Member MemberName="ReplacementWordUnits">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplacementWordUnits As Collection(Of ReplacementText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ ReplacementWordUnits { System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene informazioni sul testo che il riconoscimento vocale ha modificato come parte della normalizzazione del riconoscimento vocale.</summary>
        <value>Raccolta di oggetti <see cref="T:System.Speech.Recognition.ReplacementText" /> che descrivono le sezioni di testo che il riconoscimento vocale ha sostituito quando ha normalizzato l'input riconosciuto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Come parte del processo di riconoscimento vocale, il riconoscimento vocale ha normalizzato l'input riconosciuto in un formato di visualizzazione.  
  
 Ad esempio, l'input vocale, "25 dollari", genera un riconoscimento di risultati in cui il <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> proprietà contiene le parole "20", "5" e "dollari" e <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> proprietà contiene la frase "$25.00". Per ulteriori informazioni sulla normalizzazione del testo, vedere la <xref:System.Speech.Recognition.ReplacementText> classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="T:System.Speech.Recognition.ReplacementText" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Semantics">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SemanticValue Semantics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SemanticValue Semantics" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Semantics As SemanticValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SemanticValue ^ Semantics { System::Speech::Recognition::SemanticValue ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SemanticValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene le informazioni semantiche associate alla frase riconosciuta.</summary>
        <value>Le informazioni semantiche associate alla frase riconosciuta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una grammatica di riconoscimento vocale può includere informazioni di carattere semantico. Quando un riconoscimento vocale genera un risultato per questo tipo una grammatica, le informazioni semantiche potrebbero essere inclusi nel risultato del riconoscimento, secondo le regole della grammatica e l'input per il riconoscimento. Per ulteriori informazioni sulla semantica, vedere [informazioni sui risultati di semantica](http://msdn.microsoft.com/library/2a9dbd8b-cf6d-42cd-bbb9-ca0b3e534005) e <xref:System.Speech.Recognition.SemanticResultKey> e <xref:System.Speech.Recognition.SemanticResultValue> classi.  
  
   
  
## Examples  
 Nell'esempio seguente definisce un metodo che ottiene informazioni semantiche specifiche da una frase riconosciuta. Quando questo metodo viene restituito, contiene il valore per la chiave semantica, o null se il valore non è stato recuperato. Questo metodo controlla solo per chiavi di primo livello. Poiché le informazioni semantiche sono contenute in una struttura ad albero di valori, le chiavi di livello inferiore devono essere accessibile tramite il valore restituito di semantico.  
  
```  
static bool TryGetSemanticValue(  
      RecognizedPhrase phrase, string key, out SemanticValue value)  
{  
  value = null;  
  bool found = phrase.Semantics.ContainsKey(key);  
  if (found)  
  {  
    value = phrase.Semantics[key];  
  }  
  
  return found;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
        <altmember cref="T:System.Speech.Recognition.SemanticValue" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il testo normalizzato generato da un riconoscimento vocale dall'input riconosciuto.</summary>
        <value>Il testo normalizzato generato da un riconoscimento vocale dall'input riconosciuto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Come parte del processo di riconoscimento vocale, il riconoscimento vocale ha esegue la normalizzazione di riconoscimento vocale in testo di input riconosciuto in un formato di visualizzazione.  
  
 Ad esempio, l'input vocale, "25 dollari", genera un riconoscimento di risultati in cui il <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> proprietà contiene le parole "20", "5" e "dollari" e <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> proprietà contiene la frase "$25.00". Per ulteriori informazioni sulla normalizzazione del testo, vedere <xref:System.Speech.Recognition.ReplacementText>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Words">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt; Words { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedWordUnit&gt; Words" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Words As ReadOnlyCollection(Of RecognizedWordUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ Words { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene le parole generate da un riconoscimento vocale dall'input riconosciuto.</summary>
        <value>La raccolta di oggetti <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> generati da un riconoscimento vocale per l'input riconosciuto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà contiene le parole prodotte dall'input dal riconoscimento vocale prima vocale-normalizzazione del riconoscimento del risultato.  
  
 Ad esempio, l'input vocale, "25 dollari", genera un riconoscimento di risultati in cui il <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> proprietà contiene le parole "20", "5" e "dollari" e <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> proprietà contiene la frase "$25.00". Per ulteriori informazioni sulla normalizzazione del testo, vedere <xref:System.Speech.Recognition.ReplacementText>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      </Docs>
    </Member>
  </Members>
</Type>