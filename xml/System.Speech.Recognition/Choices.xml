<Type Name="Choices" FullName="System.Speech.Recognition.Choices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fd9cc2fbd432c884d0969daa9ad6628ba5115386" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33680878" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Choices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Choices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Choices" />
  <TypeSignature Language="VB.NET" Value="Public Class Choices" />
  <TypeSignature Language="C++ CLI" Value="public ref class Choices" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_oneOf.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un set di alternative ai vincoli di una grammatica di riconoscimento vocale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Speech.Recognition.Choices> oggetto rappresenta un componente di una frase che può assumere uno dei diversi valori. Utilizzare questa classe durante la creazione di una grammatica di riconoscimento vocale da un <xref:System.Speech.Recognition.GrammarBuilder> oggetto.  
  
 Ad esempio, un <xref:System.Speech.Recognition.Choices> oggetto può rappresentare il componente *colorChoice* nella frase, "modificare il colore da *colorChoice*", dove i valori accettabili per *colorChoice* sono "red" o "verde" o "blue".  
  
> [!NOTE]
>  Utilizzare un <xref:System.Speech.Recognition.Choices> oggetto come componente facoltativo di una frase, creare il <xref:System.Speech.Recognition.Choices> dell'oggetto e aggiungerlo a un <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> dell'oggetto con `minRepeat` e `maxRepeat` rispettivamente impostati su 0 e 1,. Frasi che contiene i componenti facoltativi possono essere riconosciute o meno il componente facoltativo viene pronunciato.  
  
 Il <xref:System.Speech.Recognition.Choices> classe viene utilizzata la stessa funzione il `one-of` elemento XML definito dal [vocale riconoscimento grammatica specifica (SRGS) versione 1.0](https://www.w3.org/TR/speech-grammar/) ed è simile al <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> classe il <xref:System.Speech.Recognition.SrgsGrammar> spazio dei nomi.  
  
 Per ulteriori informazioni sulla definizione di una grammatica di riconoscimento vocale, vedere [il riconoscimento vocale](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) e [creazione grammatiche GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per la frase "impostare lo sfondo *colorChoice*", dove *colorChoice* può essere uno dei colori definiti. Il <xref:System.Speech.Recognition.GrammarBuilder> viene utilizzato per definire i vincoli della grammatica.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  colorChoice.Add(new string[] {"cyan", "yellow", "magenta"});  
  
  // Construct the phrase.  
  GrammarBuilder builder = new GrammarBuilder("Set background to");  
  builder.Append(colorChoice);  
  
  // Create a grammar for the phrase.  
  Grammar colorGrammar = new Grammar(builder);  
  colorGrammar.Name = "SetBackground";  
  
  return colorGrammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Choices" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile costruire un <xref:System.Speech.Recognition.Choices> oggetto utilizzando un costruttore predefinito (che restituisce un oggetto vuoto), da un gruppo di <xref:System.String> oggetti, o un set di <xref:System.Speech.Recognition.GrammarBuilder> oggetti.  
  
 Poiché il <xref:System.Speech.Recognition.GrammarBuilder> oggetto supporta la conversione implicita da <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices> possono essere costruiti da una matrice di oggetti utilizzando un cast.  
  
   
  
## Examples  
 L'esempio seguente usa <xref:System.Speech.Recognition.Choices> oggetti per creare due elenchi di alternative.  
  
 Il primo <xref:System.Speech.Recognition.Choices> oggetto viene costruito da una matrice di <xref:System.String> oggetti. L'altro <xref:System.Speech.Recognition.Choices> oggetto viene costruito da una matrice di <xref:System.Speech.Recognition.GrammarBuilder> gli oggetti che sono stati convertiti in modo implicito da un cast.  
  
 Nell'esempio viene utilizzato un <xref:System.Speech.Recognition.GrammarBuilder> oggetto per assemblare una frase, utilizzando il <xref:System.Speech.Recognition.Choices> due ulteriori stringhe, che possono essere utilizzate per il riconoscimento vocale e oggetti di input nel formato "Chiamata [contactlList] sul telefono [phoneType]", ad esempio "Jane chiamata su un telefono cellulare".  
  
```  
public GrammarBuilder ChoicesContructor2 ()  
{  
    GrammarBuilder gb = new GrammarBuilder ();  
    Choices phoneType = new Choices (new string[] {"cell", "home", "work"});  
    Choices contactList = new Choices (new GrammarBuilder[] {(GrammarBuilder) "Mark", (GrammarBuilder) "Jane", (GrammarBuilder) "Frank"});  
    gb.Append ("Call");  
    gb.Append (contactList);  
    gb.Append ("on");  
    gb.Append (phoneType);  
    gb.Append ("phone");  
    return gb;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Choices" /> contenente un set di alternative vuoto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore restituisce un set di vuoto valido, di alternative. È possibile aggiungere utilizzando una delle alternative di <xref:System.Speech.Recognition.Choices.Add%2A> metodi.  
  
   
  
## Examples  
 L'esempio seguente usa <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> gli oggetti per creare una frase che può essere utilizzata per riconoscere l'input vocale, ad esempio "Chiamata Anne sulla sua cella" e "James chiamata al telefono il suo lavoro". L'esempio Usa cast impliciti da <xref:System.Speech.Recognition.Choices> e <xref:System.String> a <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">Matrice contenente il set di alternative.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Choices" /> da una matrice contenente uno o più oggetti <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni <xref:System.Speech.Recognition.GrammarBuilder> in `alternateChoices` definisce un'alternativa. Se `alternateChoices` è una matrice vuota, il costruttore restituisce un set vuoto di alternative. È possibile aggiungere utilizzando una delle alternative di <xref:System.Speech.Recognition.Choices.Add%2A> metodi.  
  
 Il costruttore genera un <xref:System.ArgumentNullException> quando `alternateChoices` è `null` o quando uno degli elementi della matrice sono `null`.  
  
 Poiché il <xref:System.Speech.Recognition.GrammarBuilder> classe offre supporto per la conversione implicita di <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultValue>, e <xref:System.Speech.Recognition.SemanticResultKey> oggetti <xref:System.Speech.Recognition.GrammarBuilder> istanze, correttamente tramite cast, questo costruttore può essere utilizzato anche per creare un <xref:System.Speech.Recognition.Choices> oggetto da un elenco di qualsiasi combinazione di questi oggetti.  
  
   
  
## Examples  
 L'esempio seguente usa `Choices` e <xref:System.Speech.Recognition.GrammarBuilder> oggetti per creare un <xref:System.Speech.Recognition.Grammar> frasi, ad esempio, "Chiamata Anne sulla sua cella" e "James chiamata al telefono il suo lavoro". L'esempio Usa cast impliciti da `Choices` e <xref:System.String> a <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">Matrice contenente il set di alternative.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.Choices" /> da una matrice contenente uno o più oggetti <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni <xref:System.String> in `phrases` definisce un'alternativa. Il motore di riconoscimento vocale è possibile utilizzare uno degli elementi nella matrice di stringhe in base a input vocale. Se `phrases` è una matrice vuota, il costruttore restituisce un set vuoto di alternative. È possibile aggiungere utilizzando una delle alternative di <xref:System.Speech.Recognition.Choices.Add%2A> metodi.  
  
 Il costruttore genera un <xref:System.ArgumentNullException> quando `phrases` è `null` o uno qualsiasi degli elementi della matrice sono `null`. Il costruttore genera un <xref:System.ArgumentException> se qualsiasi elemento nella matrice è una stringa vuota ("").  
  
   
  
## Examples  
 L'esempio seguente usa <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> oggetti per creare un <xref:System.Speech.Recognition.Grammar> per le frasi, ad esempio, "Chiamata Anne sulla sua cella" e "James chiamata al telefono il suo lavoro". L'esempio Usa cast impliciti da `Choices` e <xref:System.String> a <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge elementi al set di alternative.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">Oggetti <see cref="T:System.Speech.Recognition.GrammarBuilder" /> da aggiungere a questo oggetto <see cref="T:System.Speech.Recognition.Choices" />.</param>
        <summary>Aggiunge una matrice contenente uno o più oggetti <see cref="T:System.Speech.Recognition.GrammarBuilder" /> al set di alternative.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Grazie al supporto per la conversione implicita da <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, e <xref:System.Speech.Recognition.SemanticResultValue> oggetti <xref:System.Speech.Recognition.GrammarBuilder>, queste tre classi possono essere aggiunti a un <xref:System.Speech.Recognition.Choices> anche l'istanza.  
  
 Se `alternateChoices` è una matrice vuota, questo metodo non aggiorna il set di alternative.  
  
 Le applicazioni possono utilizzare entrambi <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> e <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> alternative per aggiungere un <xref:System.Speech.Recognition.Choices> oggetto.  
  
 Questo metodo genera un <xref:System.ArgumentNullException> quando `alternateChoices` è `null` o uno qualsiasi degli elementi della matrice sono `null`.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per frasi, ad esempio "Chiamata Anne sulla sua cella" e "James chiamata al telefono il suo lavoro". Nell'esempio vengono utilizzati entrambi gli overload di <xref:System.Speech.Recognition.Choices.Add%2A> metodo per compilare la grammatica.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">Le stringhe da aggiungere a questo oggetto <see cref="T:System.Speech.Recognition.Choices" />.</param>
        <summary>Aggiunge una matrice contenente uno o più oggetti <see cref="T:System.String" /> al set di alternative.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le applicazioni possono utilizzare entrambi <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> e <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> alternative per aggiungere un <xref:System.Speech.Recognition.Choices> oggetto.  
  
 Se `phrases` è una matrice vuota, questo metodo non aggiorna il set di alternative.  
  
 Questo metodo genera un <xref:System.ArgumentNullException> quando `phrases` è `null` o uno qualsiasi degli elementi della matrice sono `null`. Questo metodo genera un <xref:System.ArgumentException> se qualsiasi elemento nella matrice è una stringa vuota ("").  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per frasi simili alle "Chiamata Anne sulla sua cella" e "James chiamata al telefono il suo lavoro". Nell'esempio vengono utilizzati entrambi gli overload di <xref:System.Speech.Recognition.Choices.Add%2A> metodo per compilare la grammatica.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> dall'oggetto <see cref="T:System.Speech.Recognition.Choices" />.</summary>
        <returns>Oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> che corrisponde a questo oggetto <see cref="T:System.Speech.Recognition.Choices" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Speech.Recognition.GrammarBuilder> restituito da questo metodo è equivalente a uno per uno dei seguenti.  
  
-   La chiamata di <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> costruttore con questo oggetto come parametro.  
  
-   Utilizzando l'implicita o esplicita eseguire il cast di questo oggetto per un <xref:System.Speech.Recognition.GrammarBuilder>.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per modificare il colore di sfondo.  
  
```csharp  
  
private Grammar CreateColorChoice()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append(new Choices(new string[] {"Set", "Change"}));  
  gb.Append("background to");  
  gb.Append(colorChoice.ToGrammarBuilder());  
  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "modify background color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
  </Members>
</Type>