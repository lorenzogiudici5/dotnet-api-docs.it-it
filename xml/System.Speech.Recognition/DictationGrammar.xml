<Type Name="DictationGrammar" FullName="System.Speech.Recognition.DictationGrammar">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d5c28c7dfec51de61f92b6ce9ce6ae8cdb22688d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37756012" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DictationGrammar : System.Speech.Recognition.Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DictationGrammar extends System.Speech.Recognition.Grammar" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.DictationGrammar" />
  <TypeSignature Language="VB.NET" Value="Public Class DictationGrammar&#xA;Inherits Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class DictationGrammar : System::Speech::Recognition::Grammar" />
  <TypeSignature Language="F#" Value="type DictationGrammar = class&#xA;    inherit Grammar" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.Grammar</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta una grammatica di riconoscimento vocale utilizzata per la dettatura di testo libero.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa classe fornisce le applicazioni con un modello di lingua predefinito che può elaborare l'input dell'utente parlato in testo. Questa classe supporta sia predefinite e personalizzate <xref:System.Speech.Recognition.DictationGrammar> oggetti. Per informazioni sulla selezione di una grammatica di dettatura, vedere il <xref:System.Speech.Recognition.DictationGrammar.%23ctor%28System.String%29> costruttore.  
  
 Per impostazione predefinita, il <xref:System.Speech.Recognition.DictationGrammar> modello di lingua è contesto gratuito. Rende non utilizzare parole specifiche o word di ordine per identificare e interpretare l'input audio. Per aggiungere contesto per la grammatica di dettatura, usare il <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> (metodo).  
  
> [!NOTE]
>  <xref:System.Speech.Recognition.DictationGrammar> gli oggetti non supportano il <xref:System.Speech.Recognition.Grammar.Priority%2A> proprietà. <xref:System.Speech.Recognition.DictationGrammar> Genera una <xref:System.NotSupportedException> se <xref:System.Speech.Recognition.Grammar.Priority%2A> è impostata.  
  
   
  
## Examples  
 Nell'esempio seguente crea tre grammatica di dettatura, li aggiunge a un nuovo <xref:System.Speech.Recognition.SpeechRecognitionEngine> dell'oggetto e restituisce il nuovo oggetto. La grammatica prima è la grammatica di dettatura predefinita. La grammatica di secondo è la grammatica di dettatura di ortografia. La grammatica terzo è la grammatica di dettatura predefinita che include una frase di contesto. Il <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> metodo viene utilizzato per associare la frase contesto la grammatica di dettatura dopo cui viene caricato il <xref:System.Speech.Recognition.SpeechRecognitionEngine> oggetto.  
  
```csharp  
  
private SpeechRecognitionEngine LoadDictationGrammars()  
{  
  
  // Create a default dictation grammar.  
  DictationGrammar defaultDictationGrammar = new DictationGrammar();  
  defaultDictationGrammar.Name = "default dictation";  
  defaultDictationGrammar.Enabled = true;  
  
  // Create the spelling dictation grammar.  
  DictationGrammar spellingDictationGrammar =  
    new DictationGrammar("grammar:dictation#spelling");  
  spellingDictationGrammar.Name = "spelling dictation";  
  spellingDictationGrammar.Enabled = true;  
  
  // Create the question dictation grammar.  
  DictationGrammar customDictationGrammar =  
    new DictationGrammar("grammar:dictation");  
  customDictationGrammar.Name = "question dictation";  
  customDictationGrammar.Enabled = true;  
  
  // Create a SpeechRecognitionEngine object and add the grammars to it.  
  SpeechRecognitionEngine recoEngine = new SpeechRecognitionEngine();  
  recoEngine.LoadGrammar(defaultDictationGrammar);  
  recoEngine.LoadGrammar(spellingDictationGrammar);  
  recoEngine.LoadGrammar(customDictationGrammar);  
  
  // Add a context to customDictationGrammar.  
  customDictationGrammar.SetDictationContext("How do you", null);  
  
  return recoEngine;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.DictationGrammar" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.DictationGrammar" /> per la grammatica di dettatura predefinita fornita dalla tecnologia Windows Desktop Speech.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La grammatica di dettatura predefinita emula procedure consigliate di dettatura standard, inclusi segni di punteggiatura. Non supporta l'ortografia di una parola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar (string topic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string topic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (topic As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar(System::String ^ topic);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.DictationGrammar : string -&gt; System.Speech.Recognition.DictationGrammar" Usage="new System.Speech.Recognition.DictationGrammar topic" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="topic" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topic">URI (Universal Resource Identifier) compatibile con XML che specifica la grammatica di dettatura, <c>grammar:dictation</c> o <c>grammar:dictation#spelling</c>.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.DictationGrammar" /> con una grammatica di dettatura specifica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Piattaforma di riconoscimento vocale utilizza una sintassi specializzata di URI per definire la grammatica di dettatura personalizzato. Il valore `grammar:dictation` indica la grammatica di dettatura predefinita. Il valore `grammar:dictation#spelling` indica la grammatica di dettatura di ortografia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDictationContext">
      <MemberSignature Language="C#" Value="public void SetDictationContext (string precedingText, string subsequentText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDictationContext(string precedingText, string subsequentText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDictationContext (precedingText As String, subsequentText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDictationContext(System::String ^ precedingText, System::String ^ subsequentText);" />
      <MemberSignature Language="F#" Value="member this.SetDictationContext : string * string -&gt; unit" Usage="dictationGrammar.SetDictationContext (precedingText, subsequentText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precedingText" Type="System.String" />
        <Parameter Name="subsequentText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="precedingText">Testo che indica l'inizio del contenuto di una dettatura.</param>
        <param name="subsequentText">Testo che indica la fine del contenuto di dettatura.</param>
        <summary>Aggiunge un contesto a una grammatica di dettatura che è stata caricata da <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> o da un oggetto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, la grammatica di dettatura non consente di utilizzare parole specifiche o word di ordine per identificare e interpretare l'input audio. Quando un contesto viene aggiunto a una grammatica di dettatura, il motore di riconoscimento utilizza il `precedingText` e `subsequentText` per identificare i casi in cui interpretare vocale come dettatura.  
  
> [!NOTE]
>  Una grammatica di dettatura deve essere caricata da un <xref:System.Speech.Recognition.SpeechRecognizer> oppure <xref:System.Speech.Recognition.SpeechRecognitionEngine> dell'oggetto prima di poter usare <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> per aggiungere un contesto.  
  
 Nella tabella seguente viene illustrato il motore di riconoscimento utilizza i due parametri per determinare quando usare la grammatica di dettatura.  
  
|`precedingText`|`subsequentText`|Descrizione|  
|---------------------|----------------------|-----------------|  
|non `null`|non `null`|Il motore di riconoscimento Usa i termini per racchiudere tra parentesi quadre frasi candidate possibili.|  
|`null`|non `null`|Usa il motore di riconoscimento di `subsequentText` completamento dettatura.|  
|non `null`|`null`|Usa il motore di riconoscimento di `precedingText` per avviare la dettatura.|  
|`null`|`null`|Il motore di riconoscimento non utilizza un contesto quando si usa la grammatica di dettatura.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
  </Members>
</Type>