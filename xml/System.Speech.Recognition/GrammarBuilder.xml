<Type Name="GrammarBuilder" FullName="System.Speech.Recognition.GrammarBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="98da164e53b40a45073d60c360d0897674bf1959" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531625" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class GrammarBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GrammarBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.GrammarBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class GrammarBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class GrammarBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce un meccanismo per la compilazione a livello di codice di vincoli per una grammatica di riconoscimento vocale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le grammatiche riconoscimento vocale in genere vengono create in formato XML definito dal [vocale riconoscimento grammatica specifica (SRGS) versione 1.0](http://go.microsoft.com/fwlink/?LinkId=201761). Se si ha familiarità con, ma si desidera generare a livello di codice le grammatiche SRGS, è possibile utilizzare il <xref:System.Speech.Recognition.SrgsGrammar> dello spazio dei nomi, i cui membri corrispondono agli elementi e attributi definiti da SRGS. Se non si ha familiarità con SRGS oppure da un approccio leggero e a livello di codice per la creazione di grammatiche con cui è possibile eseguire in modo efficace molti scenari comuni. è possibile utilizzare il <xref:System.Speech.Recognition.GrammarBuilder> e <xref:System.Speech.Recognition.Choices> classi.  
  
 Utilizzare <xref:System.Speech.Recognition.GrammarBuilder> composto da oggetti per compilare un struttura ad albero gerarchica <xref:System.Speech.Recognition.Choices> oggetti che contengono frasi, frammisto preambolo e post-amble frasi in ogni nodo e seeding con semantici valori che contengono il backup per il applicazione.  
  
 Per utilizzare un <xref:System.Speech.Recognition.GrammarBuilder> per creare un <xref:System.Speech.Recognition.Grammar> , utilizzare la procedura seguente.  
  
1.  Creare un oggetto <xref:System.Speech.Recognition.GrammarBuilder>.  
  
2.  Aggiungere vincoli per il <xref:System.Speech.Recognition.GrammarBuilder>, ad esempio <xref:System.String> oggetti, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.DictationGrammar>e altri <xref:System.Speech.Recognition.GrammarBuilder> gli oggetti che definiscono i vincoli della grammatica.  
  
3.  Utilizzare uno del <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttori per creare un <xref:System.Speech.Recognition.Grammar> oggetto completato <xref:System.Speech.Recognition.GrammarBuilder> grammatica.  
  
 Creazione con <xref:System.Speech.Recognition.GrammarBuilder> è più adatta per le grammatiche con una singola regola, contenente elenchi, o forse elenchi degli elenchi. Per compilare a livello di codice le grammatiche che dispongono di più regole o che devono fare riferimento a regola interna, utilizzare le classi del <xref:System.Speech.Recognition.SrgsGrammar> dello spazio dei nomi.  
  
 Le istanze di <xref:System.Speech.Recognition.GrammarBuilder> possono essere ottenute anche per le conversioni implicite da altre classi o combinando un <xref:System.Speech.Recognition.GrammarBuilder> con un secondo oggetto che contiene i vincoli per una grammatica... Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> e <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operatori e <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> metodi.  
  
 Per aggiungere regole a un oggetto esistente <xref:System.Speech.Recognition.GrammarBuilder>, utilizzare il <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, e <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> metodi.  
  
> [!IMPORTANT]
>  Il riconoscimento vocale può generare un'eccezione quando si utilizza una grammatica di riconoscimento vocale che contiene gli elementi semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il valore dello stesso elemento semantico. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [utilizzando SemanticResultKey e gli oggetti SemanticResultValue](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
 Per facilitare il debug, il <xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A> proprietà restituisce lo stato corrente del <xref:System.Speech.Recognition.GrammarBuilder> sotto forma di stringa.  
  
 Per ulteriori informazioni sulla creazione e l'uso di grammatiche riconoscimento vocale, vedere [il riconoscimento vocale](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) e [creazione grammatiche GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 L'esempio seguente usa <xref:System.Speech.Recognition.GrammarBuilder> e <xref:System.Speech.Recognition.Choices> oggetti per costruire una grammatica in grado di riconoscere una delle due frasi, "sfondo *colorChoice*" o "impostare lo sfondo *colorChoice*".  
  
 Nell'esempio viene utilizzato un <xref:System.Speech.Recognition.Choices> oggetto per creare un elenco di valori accettabili per *colorChoice* da una matrice di <xref:System.String> oggetti. A <xref:System.Speech.Recognition.Choices> è analogo all'oggetto di `one-of` elemento nella specifica SRGS e contiene un set di frasi, ognuna delle quali può essere riconosciuta pronunce. Nell'esempio viene inoltre utilizzato un <xref:System.Speech.Recognition.Choices> oggetto per raggruppare un array di due <xref:System.Speech.Recognition.GrammarBuilder> oggetti in una coppia di frasi alternative in grado di riconoscere la grammatica risulta. Alternative parole o frasi sono un componente della maggior parte delle grammatiche e <xref:System.Speech.Recognition.Choices> oggetto fornisce questa funzionalità per le grammatiche costruiti con <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Nell'esempio viene infine creato un <xref:System.Speech.Recognition.Grammar> dell'oggetto da un <xref:System.Speech.Recognition.GrammarBuilder> costruito da un <xref:System.Speech.Recognition.Choices> oggetto.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Choices" />
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Istanze di questa classe possono essere ottenute anche conversioni implicite da altre classi o combinando un <xref:System.Speech.Recognition.GrammarBuilder> secondo oggetto da un nuovo oggetto <xref:System.Speech.Recognition.GrammarBuilder>. Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> e <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> metodi.  
  
 Per aggiungere vincoli a un oggetto esistente <xref:System.Speech.Recognition.GrammarBuilder>, utilizzare il <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, e <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> metodi e <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operatore.  
  
> [!IMPORTANT]
>  Il riconoscimento vocale può generare un'eccezione quando si utilizza una grammatica di riconoscimento vocale che contiene gli elementi semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il valore dello stesso elemento semantico. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [utilizzando SemanticResultKey e gli oggetti SemanticResultValue](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
 Per ulteriori informazioni sulla creazione e l'uso di grammatiche riconoscimento vocale, vedere [il riconoscimento vocale](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) e [creazione grammatiche GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza vuota della classe <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per aggiungere regole a un oggetto esistente <xref:System.Speech.Recognition.GrammarBuilder> oggetto, usare il <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, e <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> metodi e <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operatore.  
  
> [!IMPORTANT]
>  Il riconoscimento vocale può generare un'eccezione quando si utilizza una grammatica di riconoscimento vocale che contiene gli elementi semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il valore dello stesso elemento semantico. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [utilizzando SemanticResultKey e gli oggetti SemanticResultValue](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
   
  
## Examples  
 L'esempio seguente usa <xref:System.Speech.Recognition.GrammarBuilder> e <xref:System.Speech.Recognition.Choices> oggetti per costruire una grammatica in grado di riconoscere una delle due frasi, "sfondo *colorChoice*" o "impostare lo sfondo *colorChoice*".  
  
 Nell'esempio viene utilizzato un <xref:System.Speech.Recognition.Choices> oggetto per creare un elenco di valori accettabili per *colorChoice* da una matrice di <xref:System.String> oggetti. A <xref:System.Speech.Recognition.Choices> è analogo all'oggetto di `one-of` elemento nella specifica SRGS e contiene un set di frasi, ciascuno dei quali può essere riconosciuta pronunce. Nell'esempio viene inoltre utilizzato un <xref:System.Speech.Recognition.Choices> oggetto per raggruppare un array di due <xref:System.Speech.Recognition.GrammarBuilder> oggetti in una coppia di frasi alternative in grado di riconoscere la grammatica risulta. Alternative parole o frasi sono un componente della maggior parte delle grammatiche e <xref:System.Speech.Recognition.Choices> oggetto fornisce questa funzionalità per le grammatiche costruiti con <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Nell'esempio viene infine creato un <xref:System.Speech.Recognition.Grammar> dell'oggetto da un <xref:System.Speech.Recognition.GrammarBuilder> costruito da un <xref:System.Speech.Recognition.Choices> oggetto.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  GrammarBuilder bothPhrases = new GrammarBuilder();  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  bothPhrases.Append(bothChoices);  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices">Set di alternative.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.GrammarBuilder" /> da un set di alternative.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale contenente alternative, vedere [utilizzando le opzioni per creare una grammatica GrammarBuilder](http://msdn.microsoft.com/library/5b18db18-a5f6-46a3-aa77-6d3141544efd).  
  
   
  
## Examples  
 L'esempio seguente usa <xref:System.Speech.Recognition.GrammarBuilder> e <xref:System.Speech.Recognition.Choices> oggetti per costruire una grammatica in grado di riconoscere una delle due frasi, "sfondo *colorChoice*" o "impostare lo sfondo *colorChoice*".  
  
 Nell'esempio viene utilizzato un <xref:System.Speech.Recognition.Choices> oggetto per creare un elenco di valori accettabili per *colorChoice* da una matrice di <xref:System.String> oggetti. A <xref:System.Speech.Recognition.Choices> è analogo all'oggetto di `one-of` elemento nella specifica SRGS e contiene un set di frasi, ognuna delle quali può essere riconosciuta pronunce. Nell'esempio viene inoltre utilizzato un <xref:System.Speech.Recognition.Choices> oggetto per raggruppare un array di due <xref:System.Speech.Recognition.GrammarBuilder> oggetti in una coppia di frasi alternative in grado di riconoscere la grammatica risulta. Alternative parole o frasi sono un componente della maggior parte delle grammatiche e <xref:System.Speech.Recognition.Choices> oggetto fornisce questa funzionalità per le grammatiche costruiti con <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Nell'esempio viene infine creato un <xref:System.Speech.Recognition.Grammar> dell'oggetto da un <xref:System.Speech.Recognition.GrammarBuilder> costruito da un <xref:System.Speech.Recognition.Choices> oggetto.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key">La chiave semantica.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.GrammarBuilder" /> a partire da una chiave semantica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si crea un <xref:System.Speech.Recognition.GrammarBuilder> istanza da un <xref:System.Speech.Recognition.SemanticResultValue> dell'oggetto, aggiungere informazioni semantiche grammatica che può essere restituita nel risultato del riconoscimento. È possibile accedere alle informazioni semantiche nel riconoscimento risultato utilizzando il <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> proprietà di <xref:System.Speech.Recognition.RecognizedPhrase>, disponibile nel gestore per il `SpeechRecognized` evento. Se il <xref:System.Speech.Recognition.GrammarBuilder> definisce un <xref:System.Speech.Recognition.SemanticResultKey>, può essere utilizzato per recuperare le informazioni semantiche in un risultato di riconoscimento che viene associato alla chiave. Per vedere l'esempio <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>e inoltre vedere <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey>.  
  
> [!IMPORTANT]
>  Quando si creano <xref:System.Speech.Recognition.GrammarBuilder> oggetti contenenti <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [utilizzando SemanticResultKey e gli oggetti SemanticResultValue](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in grado di riconoscere le due frasi, "sfondo *colorChoice*" e "impostare lo sfondo *colorChoice*", dove * colorChoice* viene selezionato da un set di colori. La grammatica consente agli utenti parlano diversi nomi di colore e restituisce informazioni semantiche sul nome del colore riconosciuto per l'applicazione.  
  
 Nell'esempio viene utilizzato un singolo <xref:System.Speech.Recognition.SemanticResultKey> con cui è possibile recuperare il <xref:System.Speech.Recognition.SemanticValue> che è associato con il colore pronunciato dall'utente. Ad esempio, se l'input contiene la frase "Set sfondo a rosso", il risultato di riconoscimento contiene il valore semantico di "#FF0000", che è possibile recuperare utilizzando un gestore per il `SpeechRecognized` evento.  
  
 L'esempio Usa <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, e <xref:System.Speech.Recognition.GrammarBuilder> oggetti per compilare i vincoli sono contenuti negli ultimi <xref:System.Speech.Recognition.GrammarBuilder> oggetto `bothPhrases`. Infine, nell'esempio si costruisce un <xref:System.Speech.Recognition.Grammar> oggetto completato <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices object for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the Grammar object from the GrammarBuilder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value">Il valore semantico o la coppia nome/valore.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.GrammarBuilder" /> a partire da un valore semantico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si crea un <xref:System.Speech.Recognition.GrammarBuilder> istanza da un <xref:System.Speech.Recognition.SemanticResultValue> dell'oggetto, aggiungere informazioni semantiche grammatica che può essere restituita nel risultato del riconoscimento. È possibile accedere alle informazioni semantiche nel riconoscimento risultato utilizzando il <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> proprietà di <xref:System.Speech.Recognition.RecognizedPhrase>, disponibile nel gestore per il `SpeechRecognized` evento. Se il <xref:System.Speech.Recognition.GrammarBuilder> definisce un <xref:System.Speech.Recognition.SemanticResultKey>, può essere utilizzato per recuperare le informazioni semantiche in un risultato di riconoscimento che viene associato alla chiave. Per vedere l'esempio <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>e inoltre vedere <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey>.  
  
> [!IMPORTANT]
>  Quando si creano <xref:System.Speech.Recognition.GrammarBuilder> oggetti contenenti <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [utilizzando SemanticResultKey e gli oggetti SemanticResultValue](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in grado di riconoscere le due frasi, "sfondo *colorChoice*" e "impostare lo sfondo *colorChoice*", dove * colorChoice* viene selezionato da un set di colori. La grammatica consente agli utenti parlano diversi nomi di colore e restituisce informazioni semantiche sul nome del colore riconosciuto per l'applicazione.  
  
 Nell'esempio viene utilizzato un singolo <xref:System.Speech.Recognition.SemanticResultKey> con cui è possibile recuperare il <xref:System.Speech.Recognition.SemanticValue> che è associato con il colore pronunciato dall'utente. Ad esempio, se l'input contiene la frase "Set sfondo a rosso", il risultato di riconoscimento contiene il valore semantico di "#FF0000", che è possibile recuperare utilizzando un gestore per il `SpeechRecognized` evento.  
  
 L'esempio Usa <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, e <xref:System.Speech.Recognition.GrammarBuilder> oggetti per compilare i vincoli sono contenuti negli ultimi <xref:System.Speech.Recognition.GrammarBuilder> oggetto `bothPhrases`. Infine, nell'esempio si costruisce un <xref:System.Speech.Recognition.Grammar> oggetto completato <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  // Include semantic information about each of the colors.  
  Choices colorChoice = new Choices();  
  
  GrammarBuilder colorBuilder = new GrammarBuilder("red");  
  SemanticResultValue colorValue =  
    new SemanticResultValue(colorBuilder, "#FF0000");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("green");  
  colorValue = new SemanticResultValue(colorBuilder, "#00FF00");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  colorBuilder = new GrammarBuilder("blue");  
  colorValue = new SemanticResultValue(colorBuilder, "#0000FF");  
  colorChoice.Add(new GrammarBuilder(colorValue));  
  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  // Create the semantic key for referencing the color information.  
  SemanticResultKey colorKey =  
    new SemanticResultKey("ColorCode", bothPhrases);  
  bothPhrases = new GrammarBuilder(colorKey);  
  
  // Construct the grammar from the grammar builder.  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase">La sequenza di parole.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.GrammarBuilder" /> da una sequenza di parole.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'espressione rappresenta una frase esatta parlata in grado di riconoscere la grammatica di riconoscimento vocale. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene stringhe, vedere [uso di stringhe per creare una grammatica GrammarBuilder](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).  
  
   
  
## Examples  
 L'esempio seguente usa <xref:System.Speech.Recognition.GrammarBuilder> e <xref:System.Speech.Recognition.Choices> oggetti per costruire una grammatica in grado di riconoscere una delle due frasi, "sfondo *colorChoice*" o "impostare lo sfondo *colorChoice*".  
  
 Dopo aver creato un elenco di valori accettabili per *colorChoice* utilizzando un <xref:System.Speech.Recognition.Choices> dell'oggetto, nell'esempio viene inizializzato due <xref:System.Speech.Recognition.GrammarBuilder> oggetti, `makePhrase` e `setPhrase`, utilizzando una stringa come argomento.  
  
 Nell'esempio viene infine creato un <xref:System.Speech.Recognition.Grammar> dell'oggetto da un <xref:System.Speech.Recognition.Choices> il cast dell'oggetto per un <xref:System.Speech.Recognition.GrammarBuilder> oggetto.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase">La sequenza di parole.</param>
        <param name="subsetMatchingCriteria">La modalità di corrispondenza che la grammatica di riconoscimento vocale utilizza per riconoscere la frase.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.GrammarBuilder" /> per un subset di una sequenza di parole.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `phrase` parametro rappresenta la frase in grado di riconoscere la grammatica di riconoscimento vocale. Il `subsetMatchingMode` parametro specifica un subset di una frase che può essere pronunciata per ottenere il riconoscimento ha esito positivo dell'intera frase. Ciò consente di creare una grammatica con un elenco di voci che dispongono di nomi lunghi, senza richiedere agli utenti di un nome completo per la corrispondenza di un elemento.  
  
 Per ulteriori informazioni sulle modalità di corrispondenza, vedere <xref:System.Speech.Recognition.SubsetMatchingMode>. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene stringhe, vedere [uso di stringhe per creare una grammatica GrammarBuilder](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per ogni <xref:System.Speech.Recognition.SubsetMatchingMode> valore e una grammatica per la scelta tra le grammatiche modalità corrispondente. Se il valore di `phrase` è "uno due tre quattro cinque sei sette", quindi la grammatica sottosequenza riconosce l'input "due tre quattro", ma non l'input "uno tre cinque". Tuttavia, la grammatica ordinati Subset riconosce entrambi questi input.  
  
```csharp  
  
private static IEnumerable<Grammar>  
  CreateMatchingModeGrammars(string phrase)  
{  
  List<Grammar> grammars = new List<Grammar>(5);  
  
  Choices modeChoice = new Choices();  
  Type enumType = typeof(SubsetMatchingMode);  
  foreach (SubsetMatchingMode mode in Enum.GetValues(enumType))  
  {  
    string modeName = Enum.GetName(enumType, mode);  
    modeName = BreakAtCaps(modeName);  
  
    GrammarBuilder builder = new GrammarBuilder(phrase, mode);  
    Grammar modeGrammar = new Grammar(builder);  
    modeGrammar.Name = modeName;  
    modeGrammar.Enabled = false;  
    grammars.Add(modeGrammar);  
  
    modeChoice.Add(modeName);  
  }  
  
  Grammar choiceGrammar = new Grammar(modeChoice);  
  choiceGrammar.Name = "choice";  
  grammars.Add(choiceGrammar);  
  
  return grammars;  
}  
  
// Insert spaces preceding each uppercase letter in a string.   
private static string BreakAtCaps(string item)  
{  
  if (item == null || item.Length == 0)  
  {  
    return item;  
  }  
  
  StringBuilder sb = new StringBuilder(item[0].ToString());  
  for (int i = 1; i < item.Length; i++)  
  {  
    char c = item[i];  
    if (char.IsUpper(c))  
    {  
      sb.Append(" ");  
    }  
    sb.Append(c);  
  }  
  
  return sb.ToString();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SubsetMatchingMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder">Elemento ripetuto.</param>
        <param name="minRepeat">Numero minimo di volte in cui un input che corrisponde all'elemento definito da <c>builder</c> deve verificarsi per costituire una corrispondenza.</param>
        <param name="maxRepeat">Numero massimo di volte in cui un input che corrisponde all'elemento definito da <c>builder</c> può verificarsi per costituire una corrispondenza.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.GrammarBuilder" /> da un elemento ripetuto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il valore di `minRepeat` è 0, quindi nuovo <xref:System.Speech.Recognition.GrammarBuilder> rappresenta un elemento facoltativo.  
  
 Il valore di `minRepeat` deve essere maggiore o uguale a 0 e minore o uguale al valore di `maxRepeat`.  
  
> [!IMPORTANT]
>  Quando si specifica viene ripetuto per <xref:System.Speech.Recognition.GrammarBuilder> oggetti contenenti <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [utilizzando SemanticResultKey e gli oggetti SemanticResultValue](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per ordinare una pizza. Inizia con una frase, facoltativa, di apertura seguita da uno a quattro condimenti e si chiude con la parola "pizza".  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object from a string array of alternative toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GrammarBuilder (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GrammarBuilder(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase">La sequenza ripetuta di parole.</param>
        <param name="minRepeat">Il numero minimo di volte in cui deve verificarsi l'input che corrisponde alla frase per costituire una corrispondenza.</param>
        <param name="maxRepeat">Il numero massimo di volte in cui può verificarsi un input che corrisponde alla frase per costituire una corrispondenza.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.GrammarBuilder" /> dalla sequenza di parole in un oggetto <see cref="T:System.String" /> e specifica quante volte può essere ripetuto l'oggetto <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il valore di `minRepeat` è 0, quindi nuovo <xref:System.Speech.Recognition.GrammarBuilder> rappresenta un elemento facoltativo.  
  
 Il valore di `minRepeat` deve essere maggiore o uguale a 0 e minore o uguale al valore di `maxRepeat`. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene stringhe, vedere [uso di stringhe per creare una grammatica GrammarBuilder](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per ordinare una pizza. Inizia con una frase, facoltativa, di apertura seguita da uno a quattro condimenti e si chiude con la parola "pizza".  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Choices" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un nuovo oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> contenente una sequenza di due elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il metodo statico <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> metodi forniscono un altro meccanismo mediante il quale è possibile combinare tipi diversi per creare diversità e flessibilità nelle grammatiche compilati con <xref:System.Speech.Recognition.GrammarBuilder>. Questi metodi corrispondono alla proprietà statica <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> metodi, che sono definiti anche nella <xref:System.Speech.Recognition.GrammarBuilder> classe. L'ordine dei parametri determina l'ordine degli elementi nel nuovo <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Oggetto <xref:System.Speech.Recognition.GrammarBuilder> può anche essere ottenuto da <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, e [stringa](http://go.microsoft.com/fwlink/?LinkId=159733) oggetti. Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> e <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operatori.  
  
> [!IMPORTANT]
>  Il riconoscimento vocale può generare un'eccezione quando si utilizza una grammatica di riconoscimento vocale che contiene gli elementi semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il valore dello stesso elemento semantico. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [utilizzando SemanticResultKey e gli oggetti SemanticResultValue](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
 Per ulteriori informazioni sulla creazione e l'uso di grammatiche riconoscimento vocale, vedere [il riconoscimento vocale](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) e [creazione grammatiche GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices">Primo elemento di grammatica, che rappresenta un set di alternative.</param>
        <param name="builder">Secondo elemento di grammatica.</param>
        <summary>Crea un nuovo <see cref="T:System.Speech.Recognition.GrammarBuilder" /> che contiene un oggetto <see cref="T:System.Speech.Recognition.Choices" /> seguito da un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <returns>
          <see cref="T:System.Speech.Recognition.GrammarBuilder" /> per la sequenza dell'elemento <paramref name="choices" /> seguito dall'elemento <paramref name="builder" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> supporta la conversione implicita dalle classi seguenti:  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Questo metodo accetta gli oggetti elencati in precedenza per il `builder` parametro.  
  
 Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> e <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operatori.  
  
> [!IMPORTANT]
>  Quando si combinano <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> oggetti contenenti <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [aggiungere semantica a una grammatica GrammarBuilder](https://msdn.microsoft.com/library/hh361581.aspx).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder">Primo elemento di grammatica.</param>
        <param name="choices">Il secondo elemento di grammatica, che rappresenta un set di alternative.</param>
        <summary>Crea un nuovo <see cref="T:System.Speech.Recognition.GrammarBuilder" /> che contiene un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> seguito da un oggetto <see cref="T:System.Speech.Recognition.Choices" />.</summary>
        <returns>
          <see cref="T:System.Speech.Recognition.GrammarBuilder" /> per la sequenza dell'elemento <paramref name="builder" /> seguito dall'elemento <paramref name="choices" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> supporta la conversione implicita dalle classi seguenti:  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Questo metodo accetta gli oggetti elencati in precedenza per il `builder` parametro.  
  
 Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> e <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operatori.  
  
> [!IMPORTANT]
>  Quando si combinano <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> oggetti contenenti <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze con altri elementi di grammatica, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici Impossibile modificare ripetutamente il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [utilizzando SemanticResultKey e gli oggetti SemanticResultValue](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in grado di riconoscere le due frasi, "sfondo *colore*" e "impostare lo sfondo *colore*", dove *colore* viene selezionato da un set di colori. Vari tipi vengono utilizzati per compilare la grammatica finale, ad esempio [stringa](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, e <xref:System.Speech.Recognition.GrammarBuilder> oggetti. Gli operatori di cast esplicito nelle chiamate al <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> metodi sono facoltativi.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1">Primo elemento di grammatica.</param>
        <param name="builder2">Secondo elemento di grammatica.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> contenente una sequenza di due oggetti <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <returns>
          <see cref="T:System.Speech.Recognition.GrammarBuilder" /> per la sequenza dell'elemento <paramref name="builder1" /> seguito dall'elemento <paramref name="builder2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> supporta la conversione implicita dalle classi seguenti:  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Questo metodo accetta gli oggetti elencati in precedenza per il `builder1` o `builder2` parametro.  
  
 Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> e <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operatori.  
  
> [!IMPORTANT]
>  Quando si combinano <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> oggetti contenenti <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze con altri elementi di grammatica, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici Impossibile modificare ripetutamente il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [utilizzando SemanticResultKey e gli oggetti SemanticResultValue](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in grado di riconoscere le due frasi, "sfondo *colore*" e "impostare lo sfondo *colore*", dove *colore* viene selezionato da un set di colori. Vari tipi vengono utilizzati per compilare la grammatica finale, ad esempio [stringa](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, e <xref:System.Speech.Recognition.GrammarBuilder> oggetti. Gli operatori di cast esplicito nelle chiamate al <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> metodi sono facoltativi.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder">Primo elemento di grammatica.</param>
        <param name="phrase">Il secondo elemento di grammatica, che rappresenta una sequenza di parole.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> contenente un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> seguito da una frase.</summary>
        <returns>
          <see cref="T:System.Speech.Recognition.GrammarBuilder" /> per la sequenza dell'elemento <paramref name="builder" /> seguito dall'elemento <paramref name="phrase" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> supporta la conversione implicita dalle classi seguenti:  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Questo metodo accetta gli oggetti elencati in precedenza per il `builder` parametro.  
  
 Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> e <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operatori.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in grado di riconoscere le due frasi, "sfondo *colore*" e "impostare lo sfondo *colore*", dove *colore* viene selezionato da un set di colori. Vari tipi vengono utilizzati per compilare la grammatica finale, ad esempio [stringa](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, e <xref:System.Speech.Recognition.GrammarBuilder> oggetti. Gli operatori di cast esplicito nelle chiamate al <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> metodi sono facoltativi.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder Add (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.GrammarBuilder Add(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ Add(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase">Il primo elemento di grammatica, che rappresenta una sequenza di parole.</param>
        <param name="builder">Secondo elemento di grammatica.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> contenente una frase seguita da un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> .</summary>
        <returns>
          <see cref="T:System.Speech.Recognition.GrammarBuilder" /> per la sequenza dell'elemento <paramref name="phrase" /> seguito dall'elemento <paramref name="builder" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> supporta la conversione implicita dalle classi seguenti:  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Questo metodo accetta gli oggetti elencati in precedenza per il `builder` parametro.  
  
 Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> e <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> operatori.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in grado di riconoscere le due frasi, "sfondo *colore*" e "impostare lo sfondo *colore*", dove *colore* viene selezionato da un set di colori. Vari tipi vengono utilizzati per compilare la grammatica finale, ad esempio [stringa](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, e <xref:System.Speech.Recognition.GrammarBuilder> oggetti. Gli operatori di cast esplicito nelle chiamate al <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> metodi sono facoltativi.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    GrammarBuilder.Add((GrammarBuilder)"Make background", colorChoice);  
  GrammarBuilder setPhrase =  
    GrammarBuilder.Add("Set background to", (GrammarBuilder)colorChoice);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Append">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge un elemento di grammatica alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questi metodi per aggiungere elementi di sintassi esistente <xref:System.Speech.Recognition.GrammarBuilder>. Quando si creano elementi di sintassi, è possibile aggiungere al generatore esistente per sviluppare progressivamente i vincoli per una grammatica di riconoscimento vocale. Ogni elemento viene aggiunto alla fine della sequenza di elementi corrente.  
  
 Questo metodo dispone di overload per l'accodamento <xref:System.Speech.Recognition.GrammarBuilder>, <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, e <xref:System.Speech.Recognition.SemanticResultValue> oggetti.  
  
> [!IMPORTANT]
>  Il riconoscimento vocale può generare un'eccezione quando si utilizza una grammatica di riconoscimento vocale che contiene gli elementi semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il valore dello stesso elemento semantico. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [utilizzando SemanticResultKey e gli oggetti SemanticResultValue](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
 Per ulteriori informazioni sulla creazione e l'uso di grammatiche riconoscimento vocale, vedere [il riconoscimento vocale](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) e [creazione grammatiche GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.Choices alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.Choices alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (alternateChoices As Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::Choices ^ alternateChoices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="alternateChoices">Il set di alternative da aggiungere.</param>
        <summary>Aggiunge un set di alternative alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `alternateChoices` viene aggiunto alla fine della sequenza di elementi corrente.  
  
> [!IMPORTANT]
>  Quando si accoda <xref:System.Speech.Recognition.Choices> oggetti contenenti <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze per un <xref:System.Speech.Recognition.GrammarBuilder> dell'oggetto, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbe ripetutamente modificare il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [SemanticResultValue comprensione e gli oggetti SemanticResultKey](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per frasi, ad esempio "Chiamata James al lavoro" e "Chiamata Anne sul proprio cellulare", in cui la parola "telefono" è facoltativa. L'esempio evidenzia l'utilizzo del <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> metodo.  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">L'elemento di grammatica da aggiungere.</param>
        <summary>Aggiunge un elemento di grammatica alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `builder` viene aggiunto alla fine della sequenza di elementi di grammatica corrente.  
  
> [!NOTE]
>  Quando si accoda <xref:System.Speech.Recognition.GrammarBuilder> oggetti contenenti <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze per un <xref:System.Speech.Recognition.GrammarBuilder> dell'oggetto, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbe ripetutamente modificare il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [utilizzando SemanticResultKey e gli oggetti SemanticResultValue](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per frasi, ad esempio "Chiamata James al lavoro" e "Chiamata Anne sul proprio cellulare", in cui la parola "telefono" è facoltativa. <xref:System.Speech.Recognition.GrammarBuilder> e <xref:System.Speech.Recognition.Choices> gli oggetti vengono utilizzati per costruire la grammatica. L'esempio evidenzia l'utilizzo del <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> metodo.  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (key As SemanticResultKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultKey ^ key);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="key">La chiave semantica da aggiungere.</param>
        <summary>Aggiunge una chiave semantica alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `key` viene aggiunto alla fine della sequenza di elementi corrente.  
  
> [!IMPORTANT]
>  Quando si accoda <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze per un <xref:System.Speech.Recognition.GrammarBuilder> dell'oggetto, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [SemanticResultValue comprensione e gli oggetti SemanticResultKey](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
   
  
## Examples  
 Nell'esempio seguente fa parte di un'applicazione console per la scelta di origine e destinazione città per un volo. L'applicazione riconosce frasi, ad esempio "Desidero entrata da Miami a Chicago." Il gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> evento utilizza il <xref:System.Speech.Recognition.SemanticResultKey> per estrarre il codice dell'aeroporto specificato nella <xref:System.Speech.Recognition.SemanticResultValue> per le città di origine e destinazione.  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a Choices object and add  cities and airport codes  
        // using SemanticResultValue objects.  
        Choices cities = new Choices();  
        cities.Add(new SemanticResultValue("Chicago", "ORD"));  
        cities.Add(new SemanticResultValue("Boston", "BOS"));  
        cities.Add(new SemanticResultValue("Miami", "MIA"));  
        cities.Add(new SemanticResultValue("Dallas", "DFW"));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.SemanticResultValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.SemanticResultValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (value As SemanticResultValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::SemanticResultValue ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="value">Valore semantico da accodare.</param>
        <summary>Aggiunge un valore semantico alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` viene aggiunto alla fine della sequenza di elementi corrente.  
  
> [!IMPORTANT]
>  Quando si accoda <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze per un <xref:System.Speech.Recognition.GrammarBuilder> dell'oggetto, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [SemanticResultValue comprensione e gli oggetti SemanticResultKey](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
   
  
## Examples  
 Nell'esempio seguente fa parte di un'applicazione console per la scelta di origine e destinazione città per un volo. L'applicazione riconosce frasi, ad esempio "Desidero entrata da Miami a Chicago." Il gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> evento utilizza il <xref:System.Speech.Recognition.SemanticResultKey> per estrarre il codice dell'aeroporto specificato nella <xref:System.Speech.Recognition.SemanticResultValue> per le città di origine e destinazione.  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create GrammarBuilder objects and append SemanticResultValue objects   
        // that contain cities and airport codes.  
  
        GrammarBuilder chicago = new GrammarBuilder();  
        chicago.Append(new SemanticResultValue("Chicago", "ORD"));  
  
        GrammarBuilder boston = new GrammarBuilder();  
        boston.Append(new SemanticResultValue("Boston", "BOS"));  
  
        GrammarBuilder miami = new GrammarBuilder();  
        miami.Append(new SemanticResultValue("Miami", "MIA"));  
  
        GrammarBuilder dallas = new GrammarBuilder();  
        dallas.Append(new SemanticResultValue("Dallas", "DFW"));  
  
        // Create a Choices object and add the cities using implicit conversion from   
        // SemanticResultValue to GrammarBuilder.  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Load the grammar object and start recognition.  
        recognizer.LoadGrammarAsync(bookFlight);  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase">La sequenza di parole da aggiungere.</param>
        <summary>Aggiunge una frase alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `phrase` viene aggiunto alla fine della sequenza di elementi corrente.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, valuetype System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, subsetMatchingCriteria As SubsetMatchingMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, System::Speech::Recognition::SubsetMatchingMode subsetMatchingCriteria);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="subsetMatchingCriteria" Type="System.Speech.Recognition.SubsetMatchingMode" />
      </Parameters>
      <Docs>
        <param name="phrase">La sequenza di parole da aggiungere.</param>
        <param name="subsetMatchingCriteria">La modalità di corrispondenza che la grammatica utilizza per riconoscere la frase.</param>
        <summary>Aggiunge un elemento per un subset di una frase alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'elemento subset viene aggiunto alla fine della sequenza di elementi corrente. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale uso di stringhe, vedere [uso di stringhe per creare una grammatica GrammarBuilder](http://msdn.microsoft.com/library/0d87b445-a342-4369-9b3f-91d07fd7e114).  
  
 Per informazioni dettagliate sull'utilizzo di subset di modalità di corrispondenza, vedere <xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per ogni <xref:System.Speech.Recognition.SubsetMatchingMode> valore. Ad esempio, la grammatica generata `OrderedSubset` riconosce le frasi, "tre quattro cinque" e "uno tre cinque" e la grammatica `Subsequence` riconosce la frase "tre quattro cinque", ma non la frase "uno tre cinque".  
  
```csharp  
  
private Grammar[] CreateSubsetMatchTest()  
{  
  List<Grammar> grammars = new List<Grammar>(4);  
  
  string phrase = "one two three four five six";  
  foreach (SubsetMatchingMode mode in  
    Enum.GetValues(typeof(SubsetMatchingMode)))  
  {  
    GrammarBuilder gb = new GrammarBuilder();  
    gb.Append(phrase, mode);  
  
    Grammar grammar = new Grammar(gb);  
    grammar.Name = mode.ToString();  
    grammars.Add(grammar);  
  }  
  
  return grammars.ToArray();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Speech.Recognition.GrammarBuilder builder, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (builder As GrammarBuilder, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Speech::Recognition::GrammarBuilder ^ builder, int minRepeat, int maxRepeat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="builder">L'elemento della grammatica ripetuta da aggiungere.</param>
        <param name="minRepeat">Numero minimo di volte in cui un input che corrisponde all'elemento definito da <c>builder</c> deve verificarsi per costituire una corrispondenza.</param>
        <param name="maxRepeat">Numero massimo di volte in cui un input che corrisponde all'elemento definito da <c>builder</c> può verificarsi per costituire una corrispondenza.</param>
        <summary>Aggiunge un elemento di grammatica ripetuto alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore di `minRepeat` deve essere maggiore o uguale a 0 e minore o uguale al valore di `maxRepeat`.  
  
> [!IMPORTANT]
>  Quando si accoda <xref:System.Speech.Recognition.GrammarBuilder> oggetti contenenti <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze per un <xref:System.Speech.Recognition.GrammarBuilder> dell'oggetto, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbe ripetutamente modificare il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [SemanticResultValue comprensione e gli oggetti SemanticResultKey](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per frasi, ad esempio "Chiamata James al lavoro" e "Chiamata Anne sul proprio cellulare", in cui la parola "telefono" è facoltativa. <xref:System.Speech.Recognition.GrammarBuilder> e <xref:System.Speech.Recognition.Choices> gli oggetti vengono utilizzati per costruire la grammatica. L'esempio evidenzia l'utilizzo del <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> metodo.  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (string phrase, int minRepeat, int maxRepeat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(string phrase, int32 minRepeat, int32 maxRepeat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (phrase As String, minRepeat As Integer, maxRepeat As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::String ^ phrase, int minRepeat, int maxRepeat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="minRepeat" Type="System.Int32" />
        <Parameter Name="maxRepeat" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phrase">La sequenza ripetuta di parole da aggiungere.</param>
        <param name="minRepeat">Numero minimo di volte in cui un input che corrisponde all'elemento <c>phrase</c> deve verificarsi per costituire una corrispondenza.</param>
        <param name="maxRepeat">Numero massimo di volte in cui un input che corrisponde all'elemento <c>phrase</c> può verificarsi per costituire una corrispondenza.</param>
        <summary>Aggiunge una frase ripetuta alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore di `minRepeat` deve essere maggiore o uguale a 0 e minore o uguale al valore di `maxRepeat`.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per frasi, ad esempio "Chiamata James al lavoro" e "Chiamata Anne sul proprio cellulare", in cui la parola "telefono" è facoltativa. <xref:System.Speech.Recognition.GrammarBuilder> e <xref:System.Speech.Recognition.Choices> gli oggetti vengono utilizzati per costruire la grammatica. L'esempio evidenzia l'utilizzo del <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> metodo.  
  
```csharp  
  
public static Grammar CreatePhonePhrase()  
{  
  // Create alternatives for person names, locations, devices, and pronouns.  
  Choices personChoice = new Choices(new string[] {"Anne", "James", "Mary", "Sam"});  
  Choices locationChoice = new Choices(new string[] {"home", "work"});  
  Choices deviceChoice = new Choices(new string[] {"home", "work", "cell"});  
  Choices pronounChoice = new Choices(new string[] {"his", "her"});  
  
  // Create a phrase for the receiving device, which optionally contains the word "phone".  
  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  
  devicePhrase.Append(deviceChoice);  
  devicePhrase.Append("phone", 0, 1);  
  
  // Create alternatives for phrases specifying a device or a location.  
  GrammarBuilder atLocation = new GrammarBuilder("at");  
  atLocation.Append(locationChoice);  
  
  GrammarBuilder onDevice = new GrammarBuilder("on");  
  onDevice.Append(devicePhrase);  
  
  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  
  
  // Build the final phrase.  
  GrammarBuilder callWho = new GrammarBuilder("Call");  
  callWho.Append(personChoice);  
  callWho.Append(howChoice);  
  
  // Create the Grammar object.  
  Grammar callGrammar = new Grammar(callWho);  
  callGrammar.Name = "Call Grammar";  
  
  return callGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendDictation">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge una grammatica di dettatura alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> metodi consentono di aggiungere una grammatica dettatura come regola per un <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Per ulteriori informazioni per le grammatiche dettatura, vedere <xref:System.Speech.Recognition.DictationGrammar>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aggiunge la grammatica di dettatura predefinita alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni per le grammatiche dettatura, vedere <xref:System.Speech.Recognition.DictationGrammar>.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale che incorpora dettatura.  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation();  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendDictation">
      <MemberSignature Language="C#" Value="public void AppendDictation (string category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendDictation(string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendDictation (category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendDictation(System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">La categoria della grammatica di dettatura da aggiungere.</param>
        <summary>Aggiunge la grammatica di dettatura specificata alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per utilizzare l'ortografia e grammatica dettatura, impostare `category` a `spelling`.  
  
 Per ulteriori informazioni per le grammatiche dettatura, vedere <xref:System.Speech.Recognition.DictationGrammar>.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale che incorpora regole grammaticali dettatura ortografia.  
  
```csharp  
  
GrammarBuilder builder = new GrammarBuilder();  
builder.Append("begin");  
builder.AppendDictation("spelling");  
builder.Append("end");  
Grammar grammarWithDictation = new Grammar(builder);  
grammarWithDictation.Name = "Grammar with Dictation";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DictationGrammar" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AppendRuleReference">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge un file o una regola di grammatica alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> metodi è possono aggiungere una regola di grammatica da un file o di un file di grammatica. Questi metodi consentono alle applicazioni usano regole grammaticali già distribuito o disponibile pubblicamente. L'applicazione deve avere accesso in lettura al percorso del file di grammatica specificata.  
  
 Questi metodi è possono leggere una grammatica di riconoscimento vocale uno dei formati seguenti.  
  
-   File di formato XML conformi al W3C [vocale riconoscimento grammatica specifica (SRGS) versione 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   File binari conformi a Microsoft vocale riconoscimento grammatica formato binario (con estensione cfg)  
  
 La compilazione di un formato XML di SRGS file di grammatica in un file di grammatica binaria con estensione. cfg può ridurre il tempo utilizzato da Cerca una corrispondenza, soprattutto se la grammatica richiede il riconoscimento di un numero elevato di parole e frasi. Per informazioni sulla compilazione grammatiche SRGS per il formato binario di Guard flusso di controllo, vedere <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Il percorso o l'URI (Universal Resource Identifier) del file che descrive una grammatica di riconoscimento vocale in un formato supportato.</param>
        <summary>Aggiunge un file di definizione della grammatica alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'URI fornito dal `path` argomento può essere locale o remoto. L'applicazione deve avere accesso in lettura al percorso del file di grammatica specificata.  
  
 Una rappresentazione specifica di grammatica riconoscimento (SRGS) di W3C vocale è possibile definire una regola di radice. Questo metodo aggiunge la grammatica, che iniziano con la regola radice, della sequenza corrente di elementi di sintassi. Per aggiungere una regola di grammatica specifico, utilizzare il <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> metodo.  
  
   
  
## Examples  
 L'esempio c# seguente crea una grammatica di riconoscimento vocale che usa la regola denominata `Cities` in un file locale SRGS cities.grxml. Il contenuto del file cities.grxml viene visualizzato sotto l'esempio di codice c#.  
  
```csharp  
  
private static Grammar CreateCitiesGrammar1()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.AppendRuleReference("file://c:/temp/cities.grxml");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 1";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-16" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendRuleReference">
      <MemberSignature Language="C#" Value="public void AppendRuleReference (string path, string rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendRuleReference(string path, string rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendRuleReference (path As String, rule As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendRuleReference(System::String ^ path, System::String ^ rule);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="rule" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Il percorso o l'URI (Universal Resource Identifier) del file che descrive una grammatica di riconoscimento vocale in un formato supportato.</param>
        <param name="rule">L'identificatore della regola da aggiungere o <see langword="null" /> per aggiungere la regola radice predefinita del file di sintassi.</param>
        <summary>Aggiunge la regola specificata di un file di definizione della grammatica alla sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'URI fornito dal `path` argomento può essere locale o remoto. L'applicazione deve avere accesso in lettura al percorso del file di grammatica specificata.  
  
 È possibile utilizzare il <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> metodo per aggiungere una grammatica file che inizia con la regola radice.  
  
   
  
## Examples  
 L'esempio c# seguente crea una grammatica di riconoscimento vocale che usa la regola denominata `Cities` in un file locale SRGS cities.grxml. Il contenuto del file cities.grxml viene visualizzato sotto l'esempio di codice c#.  
  
```csharp  
  
private static Grammar CreateCitiesGrammar2()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.Append("Does");  
  builder.AppendRuleReference(@"c:\temp\cities.grxml", "Cities");  
  builder.Append("have a shuttle");  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.grxml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AppendWildcard">
      <MemberSignature Language="C#" Value="public void AppendWildcard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendWildcard() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.AppendWildcard" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendWildcard ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendWildcard();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aggiunge un elemento della grammatica di riconoscimento che corrisponde a qualsiasi input nella sequenza corrente di elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'elemento jolly viene aggiunto alla fine della sequenza di elementi corrente.  
  
 Dell'elemento jolly corrisponde a qualsiasi parola pronunciata. Non corrisponde rumore di fondo o inattività.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica che accetta l'input di password come carattere jolly. Nell'esempio viene collegato un <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> gestore eventi alla grammatica che convalida l'input di password.  
  
```csharp  
private Grammar CreatePasswordGrammar()  
{  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey passwordKey =  
    new SemanticResultKey("Password", wildcardBuilder);  
  
  GrammarBuilder passwordBuilder =  
    new GrammarBuilder("My Password is");  
  passwordBuilder.Append(passwordKey);  
  
  Grammar passwordGrammar = new Grammar(passwordBuilder);  
  passwordGrammar.Name = "Password input";  
  
  passwordGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      PasswordInputHandler);  
  
  return passwordGrammar;  
}  
  
// Handle the SpeechRecognized event for the password grammar.  
private void PasswordInputHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  SemanticValue semantics = e.Result.Semantics;  
  
  if (semantics.ContainsKey("Password"))  
  {  
    RecognizedAudio passwordAudio =  
      result.GetAudioForWordRange(  
        result.Words[3], result.Words[result.Words.Count - 1]);  
  
    if (IsValidPassword(passwordAudio))  
    {  
      Console.WriteLine("Password accepted.");  
  
      // Add code to handle a valid password here.  
    }  
    else  
    {  
      Console.WriteLine("Invalid password.");  
  
      // Add code to handle an invalid password here.  
    }  
  }  
}  
  
// Validate the password input.   
private bool IsValidPassword(RecognizedAudio passwordAudio)  
{  
  Console.WriteLine("Validating password.");  
  
  // Add password validation code here.  
  
  return false;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendDictation" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta le impostazioni cultura della grammatica di riconoscimento vocale.</summary>
        <value>Impostazioni cultura di <see cref="T:System.Speech.Recognition.GrammarBuilder" />. L'impostazione predefinita è la proprietà <see cref="P:System.Threading.Thread.CurrentUICulture" /> del thread in esecuzione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Speech.Recognition.Grammar.%23ctor%2A> costruttore crea un <xref:System.Speech.Recognition.Grammar> oggetto che può essere utilizzato da un riconoscimento vocale delle impostazioni cultura corrispondenti. Solo il <xref:System.Speech.Recognition.GrammarBuilder.Culture%2A> proprietà il <xref:System.Speech.Recognition.GrammarBuilder> fornito come parametro al costruttore della grammatica viene utilizzato per impostare la lingua della grammatica di riconoscimento vocale risultante.  
  
 Microsoft Windows e l'API Speech accettare tutti i codici paese di lingua validi. Per eseguire il riconoscimento vocale utilizzando la lingua specificata nel `Culture` proprietà, un motore di riconoscimento vocale che supporta che deve essere installato il codice paese di linguaggio. I riconoscimento vocale fornita con Microsoft Windows 7 funzionano con i seguenti codici di lingua, paese.  
  
-   en-GB. Inglese (Regno Unito)  
  
-   en-US. Inglese (Stati Uniti)  
  
-   de-DE. Tedesco (Germania)  
  
-   es-ES. Spagnolo (Spagna)  
  
-   fr-FR. Francese (Francia)  
  
-   ja-JP. Giapponese (Giappone)  
  
-   zh-CN. Cinese (Cina)  
  
-   zh-TW. Cinese (Taiwan)  
  
 Codici di lingua di due lettere, ad esempio "en", "fr", o "es" sono inoltre consentiti.  
  
   
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per ordinare una pizza con ingredienti fino a quattro. In particolare, viene impostato il <xref:System.Speech.Recognition.GrammarBuilder> delle impostazioni cultura dell'oggetto su inglese (Stati Uniti).  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="DebugShowPhrases">
      <MemberSignature Language="C#" Value="public string DebugShowPhrases { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DebugShowPhrases" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DebugShowPhrases As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DebugShowPhrases { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una stringa che mostra il contenuto e la struttura della sintassi contenuta da <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <value>La struttura e il contenuto correnti dell'oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale per ordinare una pizza con ingredienti fino a quattro. Scrive lo stato di <xref:System.Speech.Recognition.GrammarBuilder> nella console prima di creare la grammatica. Questo metodo genera il seguente output:  
  
-   `GrammarBuilder status: I would like a [cheese,mushroom,tomato,onion,anchovy,chic ken,pepperoni] and [cheese,mushroom,tomato,onion,anchovy,chicken,pepperoni] pizza`  
  
```csharp  
  
private static Grammar CreatePizzaGrammar()  
{  
  
  // Create a Choices object with alternatives for toppings.  
  Choices toppings = new Choices(new string[] {  
    "cheese", "mushroom", "tomato", "onion",  
    "anchovy", "chicken", "pepperoni"});  
  
  // Create a GrammarBuilder and append the Choices object.  
  GrammarBuilder andToppings = new GrammarBuilder("and", 0, 1);  
  andToppings.Append(toppings);  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder("I would like a", 0, 1);  
  gb.Append(toppings);  
  gb.Append(new GrammarBuilder(andToppings, 0, 3));  
  gb.Append("pizza");  
  
  // Write the contents and structure of the GrammarBuilder to the console.  
  Console.WriteLine("Grammar content and structure: {0}", gb.DebugShowPhrases);  
  
  // Create the Grammar from the GrammarBuilder.  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "Pizza Order";  
  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un nuovo oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> corrispondente a una sequenza di due elementi di grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'ordine degli operandi determina l'ordine degli elementi nel nuovo <xref:System.Speech.Recognition.GrammarBuilder>.  
  
> [!IMPORTANT]
>  È consigliabile attenzione quando si combinano <xref:System.Speech.Recognition.Choices> o <xref:System.Speech.Recognition.GrammarBuilder> oggetti contenenti <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze con altri elementi di sintassi. Il riconoscimento vocale può generare un'eccezione quando si utilizza una grammatica di riconoscimento vocale che contiene gli elementi semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il valore dello stesso elemento semantico. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [utilizzando SemanticResultKey e gli oggetti SemanticResultValue](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
 Per ulteriori informazioni sulla creazione e l'uso di grammatiche riconoscimento vocale, vedere [il riconoscimento vocale](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919) e [creazione grammatiche GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.Choices choices, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::Choices ^ choices, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="choices">Primo elemento di grammatica, che rappresenta un set di alternative.</param>
        <param name="builder">Secondo elemento di grammatica.</param>
        <summary>Crea un nuovo <see cref="T:System.Speech.Recognition.GrammarBuilder" /> che contiene un oggetto <see cref="T:System.Speech.Recognition.Choices" /> seguito da un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <returns>Restituisce <see cref="T:System.Speech.Recognition.GrammarBuilder" /> per la sequenza del parametro <paramref name="choices" /> seguito dal parametro <paramref name="builder" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> supporta le conversioni dalle classi seguenti.  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Questo metodo accetta gli oggetti elencati in precedenza per il `builder` parametro. Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operatori.  
  
> [!IMPORTANT]
>  Quando si combinano <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> oggetti contenenti <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [SemanticResultValue comprensione e gli oggetti SemanticResultKey](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
 Il metodo equivalente per l'operatore è <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.Choices%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::Speech::Recognition::Choices ^ choices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="builder">Primo elemento di grammatica.</param>
        <param name="choices">Il secondo elemento di grammatica, che rappresenta un set di elementi alternativi.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> contenente un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> seguito da <see cref="T:System.Speech.Recognition.Choices" />.</summary>
        <returns>Restituisce <see cref="T:System.Speech.Recognition.GrammarBuilder" /> per la sequenza del parametro <paramref name="builder" /> seguito dal parametro <paramref name="choices" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> supporta le conversioni dalle classi seguenti:  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Questo metodo accetta gli oggetti elencati in precedenza per il `builder` parametro. Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operatori.  
  
> [!IMPORTANT]
>  Quando si combinano <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> oggetti contenenti <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [SemanticResultValue comprensione e gli oggetti SemanticResultKey](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
 Il metodo equivalente per l'operatore è <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.Choices%29?displayProperty=nameWithType>  
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in grado di riconoscere le due frasi, "sfondo *colore*" e "impostare lo sfondo *colore*", dove *colore* viene selezionato da un set di colori. Vari tipi vengono utilizzati per compilare la grammatica finale, ad esempio [stringa](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, e <xref:System.Speech.Recognition.GrammarBuilder> oggetti.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the grammar from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder1, class System.Speech.Recognition.GrammarBuilder builder2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder1 As GrammarBuilder, builder2 As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder1, System::Speech::Recognition::GrammarBuilder ^ builder2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder1" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="builder2" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder1">Primo elemento di grammatica.</param>
        <param name="builder2">Secondo elemento di grammatica.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> contenente una sequenza di due oggetti <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <returns>Restituisce <see cref="T:System.Speech.Recognition.GrammarBuilder" /> per la sequenza del parametro <paramref name="builder1" /> seguito dal parametro <paramref name="builder2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> supporta le conversioni dalle classi seguenti.  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Questo metodo accetta gli oggetti elencati in precedenza per il `builder1` e `builder2` parametri. Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operatori.  
  
> [!IMPORTANT]
>  Quando si combinano <xref:System.Speech.Recognition.GrammarBuilder> oggetti contenenti <xref:System.Speech.Recognition.SemanticResultValue> o <xref:System.Speech.Recognition.SemanticResultKey> istanze, assicurarsi che si evita la creazione di elementi di semantici duplicati con lo stesso nome di chiave o più elementi semantici che potrebbero modificare ripetutamente il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà di un <xref:System.Speech.Recognition.SemanticValue> oggetto. Il riconoscimento vocale può generare un'eccezione se rileva queste circostanze. Per ulteriori informazioni sulla compilazione di una grammatica di riconoscimento vocale che contiene informazioni di carattere semantico, vedere [SemanticResultValue comprensione e gli oggetti SemanticResultKey](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c).  
  
 Il metodo equivalente per l'operatore è <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (System.Speech.Recognition.GrammarBuilder builder, string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(class System.Speech.Recognition.GrammarBuilder builder, string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (builder As GrammarBuilder, phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::Speech::Recognition::GrammarBuilder ^ builder, System::String ^ phrase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="builder">Primo elemento di grammatica.</param>
        <param name="phrase">Il secondo elemento di grammatica, che rappresenta una sequenza di parole.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> contenente un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> seguito da una frase.</summary>
        <returns>Restituisce <see cref="T:System.Speech.Recognition.GrammarBuilder" /> per la sequenza del parametro <paramref name="builder" /> seguito dal parametro <paramref name="phrase" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> supporta le conversioni dalle classi seguenti.  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Questo metodo accetta gli oggetti elencati in precedenza per il `builder` parametro. Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operatori.  
  
 Il metodo equivalente per l'operatore è <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.Speech.Recognition.GrammarBuilder%2CSystem.String%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.GrammarBuilder operator + (string phrase, System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Addition(string phrase, class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (phrase As String, builder As GrammarBuilder) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::GrammarBuilder ^ operator +(System::String ^ phrase, System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="phrase">Il primo elemento di grammatica, che rappresenta una sequenza di parole.</param>
        <param name="builder">Secondo elemento di grammatica.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> contenente una frase seguita da <see cref="T:System.Speech.Recognition.GrammarBuilder" /> .</summary>
        <returns>Restituisce <see cref="T:System.Speech.Recognition.GrammarBuilder" /> per la sequenza del parametro <paramref name="phrase" /> seguito dal parametro <paramref name="builder" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.GrammarBuilder> supporta le conversioni dalle classi seguenti.  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 Questo metodo accetta gli oggetti elencati in precedenza per il `builder` parametro. Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> operatori.  
  
 Il metodo equivalente per l'operatore è <xref:System.Speech.Recognition.GrammarBuilder.Add%28System.String%2CSystem.Speech.Recognition.GrammarBuilder%29?displayProperty=nameWithType>  
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in grado di riconoscere le due frasi, "sfondo *colore*" e "impostare lo sfondo *colore*", dove *colore* viene selezionato da un set di colori. Vari tipi vengono utilizzati per compilare la grammatica finale, ad esempio [stringa](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, e <xref:System.Speech.Recognition.GrammarBuilder> oggetti.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] { "red", "green", "blue" });  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase =  
    (GrammarBuilder)"Make background" + colorChoice;  
  GrammarBuilder setPhrase =  
    "Set background to" + (GrammarBuilder)colorChoice;  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  
  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  
  
  Grammar grammar = new Grammar(bothPhrases);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)" />
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Implicit">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte un altro tipo in un <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Conversione implicita viene creata una nuova istanza della <xref:System.Speech.Recognition.GrammarBuilder>. È possibile eseguire il cast di ognuna delle seguenti classi per un <xref:System.Speech.Recognition.GrammarBuilder>.  
  
-   <xref:System.Speech.Recognition.Choices>  
  
-   <xref:System.Speech.Recognition.SemanticResultKey>  
  
-   <xref:System.Speech.Recognition.SemanticResultValue>  
  
-   <xref:System.String>  
  
 I cast impliciti è equivalenti alla chiamata al costruttore.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.Choices choices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.Choices choices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::Choices ^ choices);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="choices" Type="System.Speech.Recognition.Choices" />
      </Parameters>
      <Docs>
        <param name="choices">Il set di alternative da convertire.</param>
        <summary>Converte un oggetto <see cref="T:System.Speech.Recognition.Choices" /> in un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <returns>Oggetto <see cref="T:System.Speech.Recognition.Choices" /> convertito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Conversione implicita viene creata una nuova istanza della <xref:System.Speech.Recognition.GrammarBuilder>. Questo operatore di conversione è equivalente alla chiamata <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> e specificando `choices` per il `alternateChoices`.  
  
 Il metodo equivalente per l'operatore è <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.Choices%29?displayProperty=nameWithType>  
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in grado di riconoscere una risposta a "yes" o "no" domanda. L'operatore di conversione implicita viene utilizzata nella costruzione di un <xref:System.Speech.Recognition.SemanticResultValue> dell'oggetto da un <xref:System.Speech.Recognition.Choices> oggetto, nella costruzione di un <xref:System.Speech.Recognition.Choices> oggetto da due <xref:System.Speech.Recognition.SemanticResultValue> oggetti e nella costruzione di un <xref:System.Speech.Recognition.Grammar> oggetto da un <xref:System.Speech.Recognition.SemanticResultKey> oggetto.  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultKey semanticKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultKey semanticKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticKey As SemanticResultKey) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultKey ^ semanticKey);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticKey" Type="System.Speech.Recognition.SemanticResultKey" />
      </Parameters>
      <Docs>
        <param name="semanticKey">La chiave semantica da convertire.</param>
        <summary>Converte un oggetto <see cref="T:System.Speech.Recognition.SemanticResultKey" /> in un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <returns>Oggetto <see cref="T:System.Speech.Recognition.SemanticResultKey" /> convertito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Conversione implicita viene creata una nuova istanza della <xref:System.Speech.Recognition.GrammarBuilder>. Questo operatore di conversione è equivalente alla chiamata <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> e specificando `semanticKey` per il `key`.  
  
 Il metodo equivalente per l'operatore è <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29?displayProperty=nameWithType>  
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in grado di riconoscere una risposta a "yes" o "no" domanda. L'operatore di conversione implicita viene utilizzata nella costruzione di un <xref:System.Speech.Recognition.SemanticResultValue> dell'oggetto da un <xref:System.Speech.Recognition.Choices> oggetto, nella costruzione di un <xref:System.Speech.Recognition.Choices> oggetto da due <xref:System.Speech.Recognition.SemanticResultValue> oggetti e nella costruzione di un <xref:System.Speech.Recognition.Grammar> oggetto da un <xref:System.Speech.Recognition.SemanticResultKey> oggetto.  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (System.Speech.Recognition.SemanticResultValue semanticValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(class System.Speech.Recognition.SemanticResultValue semanticValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (semanticValue As SemanticResultValue) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::Speech::Recognition::SemanticResultValue ^ semanticValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="semanticValue" Type="System.Speech.Recognition.SemanticResultValue" />
      </Parameters>
      <Docs>
        <param name="semanticValue">Oggetto <see cref="T:System.Speech.Recognition.SemanticResultValue" /> da convertire.</param>
        <summary>Converte un oggetto <see cref="T:System.Speech.Recognition.SemanticResultValue" /> in un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <returns>Oggetto <see cref="T:System.Speech.Recognition.SemanticResultValue" /> convertito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Conversione implicita viene creata una nuova istanza della <xref:System.Speech.Recognition.GrammarBuilder>. Questo operatore di conversione è equivalente alla chiamata <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> e specificando `semanticValue` per il `value`.  
  
 Il metodo equivalente per l'operatore è <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29?displayProperty=nameWithType>  
  
## Examples  
 L'esempio seguente crea una grammatica di riconoscimento vocale in grado di riconoscere una risposta a "yes" o "no" domanda. L'operatore di conversione implicita viene utilizzata nella costruzione di un <xref:System.Speech.Recognition.SemanticResultValue> dell'oggetto da un <xref:System.Speech.Recognition.Choices>oggetto, nella costruzione di un <xref:System.Speech.Recognition.Choices> oggetto da due <xref:System.Speech.Recognition.SemanticResultValue> oggetti e nella costruzione di un <xref:System.Speech.Recognition.Grammar> oggetto da un <xref:System.Speech.Recognition.SemanticResultKey> oggetto.  
  
```csharp  
Choices yesChoices = new Choices(new string[] {"yes", "yup", "yah"});  
SemanticResultValue yesValue =  
  new SemanticResultValue(yesChoices, true);  
  
Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
SemanticResultValue noValue =  
  new SemanticResultValue(noChoices, false);  
  
SemanticResultKey yesnoKey =  
  new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
  
Grammar yesnoGrammar = new Grammar(yesnoKey);  
yesnoGrammar.Name = "yesno";  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Speech.Recognition.GrammarBuilder (string phrase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Speech.Recognition.GrammarBuilder op_Implicit(string phrase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)~System.Speech.Recognition.GrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (phrase As String) As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Speech::Recognition::GrammarBuilder ^(System::String ^ phrase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="phrase">Stringa da convertire.</param>
        <summary>Converte una stringa in un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <returns>Stringa convertita.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Conversione implicita viene creata una nuova istanza della <xref:System.Speech.Recognition.GrammarBuilder>. Questo operatore di conversione è equivalente alla chiamata <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> e specificando lo stesso `phrase`.  
  
 Il metodo equivalente per l'operatore è <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.String%29?displayProperty=nameWithType>  
  
## Examples  
 L'esempio seguente usa <xref:System.Speech.Recognition.GrammarBuilder> e <xref:System.Speech.Recognition.Choices> oggetti per costruire una grammatica in grado di riconoscere una delle due frasi, "sfondo *colorChoice*" o "impostare lo sfondo *colorChoice*".  
  
 Dopo aver creato un elenco di valori accettabili per *colorChoice* utilizzando un <xref:System.Speech.Recognition.Choices> dell'oggetto, nell'esempio viene inizializzato due <xref:System.Speech.Recognition.GrammarBuilder> oggetti, `makePhrase` e `setPhrase`, mediante la conversione implicita da stringa oggetti.  
  
 Nell'esempio viene infine creato un <xref:System.Speech.Recognition.Grammar> dell'oggetto da un <xref:System.Speech.Recognition.Choices> il cast dell'oggetto per un <xref:System.Speech.Recognition.GrammarBuilder> oggetto.  
  
```csharp  
private Grammar CreateColorGrammar()  
{  
  
  // Create a set of color choices.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  
  
  // Create grammar builders for the two versions of the phrase.  
  GrammarBuilder makePhrase = new GrammarBuilder("Make background");  
  makePhrase.Append(colorElement);  
  GrammarBuilder setPhrase = new GrammarBuilder("Set background to");  
  setPhrase.Append(colorElement);  
  
  // Create a Choices for the two alternative phrases, convert the Choices  
  // to a GrammarBuilder, and construct the Grammar object from the result.  
  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  
  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  
  grammar.Name = "backgroundColor";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.GrammarBuilder.#ctor" />
      </Docs>
    </Member>
  </Members>
</Type>