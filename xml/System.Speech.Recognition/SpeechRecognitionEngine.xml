<Type Name="SpeechRecognitionEngine" FullName="System.Speech.Recognition.SpeechRecognitionEngine">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="64d271fac7ee774099403cbb7bec467f30d51b3f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognitionEngine extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognitionEngine&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognitionEngine : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="cd184-101">Fornisce i mezzi per accedere e gestire un motore di riconoscimento vocale in-process.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cd184-101">Provides the means to access and manage an in-process speech recognition engine.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-102">È possibile creare un'istanza di questa classe per uno qualsiasi del riconoscimento vocale installata.</span><span class="sxs-lookup"><span data-stu-id="cd184-102">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="cd184-103">Per ottenere informazioni sui tipi di riconoscimento vengono installati, usare il metodo statico <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-103">To get information about which recognizers are installed, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="cd184-104">Questa classe è per l'esecuzione di comandi vocali riconoscimento motori in-process e consente di controllare vari aspetti del riconoscimento vocale, come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="cd184-104">This class is for running speech recognition engines in-process, and provides control over various aspects of speech recognition, as follows:</span></span>  
  
-   <span data-ttu-id="cd184-105">Per creare un riconoscimento vocale in-process, utilizzare uno del <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> costruttori.</span><span class="sxs-lookup"><span data-stu-id="cd184-105">To create an in-process speech recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> constructors.</span></span>  
  
-   <span data-ttu-id="cd184-106">Per gestire le grammatiche riconoscimento vocale, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> metodi e <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-106">To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> methods, and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
-   <span data-ttu-id="cd184-107">Per configurare l'input per il riconoscimento, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-107">To configure the input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> method.</span></span>  
  
-   <span data-ttu-id="cd184-108">Per eseguire il riconoscimento vocale, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-108">To perform speech recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="cd184-109">Per modificare la modalità di gestione di input imprevisto o inattività riconoscimento, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-109">To modify how recognition handles silence or unexpected input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="cd184-110">Per modificare il numero di alternative restituisce il riconoscimento, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-110">To change the number of alternates the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> property.</span></span> <span data-ttu-id="cd184-111">Il riconoscimento restituisce i risultati del riconoscimento in un <xref:System.Speech.Recognition.RecognitionResult> oggetto.</span><span class="sxs-lookup"><span data-stu-id="cd184-111">The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
-   <span data-ttu-id="cd184-112">Per sincronizzare le modifiche al sistema di riconoscimento, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-112">To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="cd184-113">Il riconoscimento utilizza più di un thread per eseguire attività.</span><span class="sxs-lookup"><span data-stu-id="cd184-113">The recognizer uses more than one thread to perform tasks.</span></span>  
  
-   <span data-ttu-id="cd184-114">Per emulare l'input per il riconoscimento, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-114">To emulate input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="cd184-115">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine> oggetto è l'unico Usa del processo di cui creare un'istanza dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="cd184-115">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object is for the sole use of the process that instantiated the object.</span></span> <span data-ttu-id="cd184-116">Al contrario, il <xref:System.Speech.Recognition.SpeechRecognizer> condivide un singolo sistema di riconoscimento con qualsiasi applicazione che si desidera utilizzarlo.</span><span class="sxs-lookup"><span data-stu-id="cd184-116">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer> shares a single recognizer with any application that wants to use it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cd184-117">Chiamare sempre il metodo <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> prima di rilasciare l'ultimo riferimento a riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-117">Always call <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> before you release your last reference to the speech recognizer.</span></span> <span data-ttu-id="cd184-118">In caso contrario, le risorse utilizzate non vengono liberate finché il garbage collector chiama l'oggetto di riconoscimento `Finalize` metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-118">Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-119">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale base.</span><span class="sxs-lookup"><span data-stu-id="cd184-119">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="cd184-120">Poiché questo esempio viene utilizzato il `Multiple` modalità del <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> (metodo), esegue il riconoscimento fino a quando non si chiude la finestra della console o interrompere il debug.</span><span class="sxs-lookup"><span data-stu-id="cd184-120">Because this example uses the `Multiple` mode of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method, it performs recognition until you close the console window or stop debugging.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-121">Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-121">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-122">È possibile costruire un <xref:System.Speech.Recognition.SpeechRecognitionEngine> istanza da uno qualsiasi dei seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-122">You can construct a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance from any of the following:</span></span>  
  
-   <span data-ttu-id="cd184-123">Il motore di riconoscimento vocale predefinito per il sistema</span><span class="sxs-lookup"><span data-stu-id="cd184-123">The default speech recognition engine for the system</span></span>  
  
-   <span data-ttu-id="cd184-124">Un motore di riconoscimento vocale specifico che si specifica il nome</span><span class="sxs-lookup"><span data-stu-id="cd184-124">A specific speech recognition engine that you specify by name</span></span>  
  
-   <span data-ttu-id="cd184-125">Il motore di riconoscimento vocale predefinito per impostazioni locali specificate</span><span class="sxs-lookup"><span data-stu-id="cd184-125">The default speech recognition engine for a locale that you specify</span></span>  
  
-   <span data-ttu-id="cd184-126">Un motore di riconoscimento specifico che soddisfa i criteri specificati in un <xref:System.Speech.Recognition.RecognizerInfo> oggetto.</span><span class="sxs-lookup"><span data-stu-id="cd184-126">A specific recognition engine that meets the criteria that you specify in a <xref:System.Speech.Recognition.RecognizerInfo> object.</span></span>  
  
 <span data-ttu-id="cd184-127">Prima di iniziarne il riconoscimento vocale ha il riconoscimento, è necessario caricare la grammatica di riconoscimento almeno vocale e configurare l'input per il riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-127">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="cd184-128">Per caricare una grammatica, chiamare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-128">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="cd184-129">Per configurare l'input audio, usare uno dei metodi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-129">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cd184-130">Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> utilizzando il riconoscimento vocale predefinito per il sistema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-130">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for the system.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-131">Prima di iniziarne il riconoscimento vocale ha il riconoscimento vocale, è necessario caricare almeno una grammatica di riconoscimento e configurare l'input per il riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-131">Before the speech recognizer can begin speech recognition, you must load at least one recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="cd184-132">Per caricare una grammatica, chiamare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-132">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="cd184-133">Per configurare l'input audio, usare uno dei metodi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-133">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="cd184-134">Le impostazioni locali che il riconoscimento vocale deve supportare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-134">The locale that the speech recognizer must support.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-135">Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> utilizzando il riconoscimento vocale predefinito per le impostazioni locali specificate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-135">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for a specified locale.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-136">Microsoft Windows e l'API Speech accettare tutti i codici paese di lingua validi.</span><span class="sxs-lookup"><span data-stu-id="cd184-136">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="cd184-137">Per eseguire il riconoscimento vocale utilizzando la lingua specificata nel `CultureInfo` argomento, un motore di riconoscimento vocale che supporta che deve essere installato il codice paese di linguaggio.</span><span class="sxs-lookup"><span data-stu-id="cd184-137">To perform speech recognition using the language specified in the `CultureInfo` argument, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="cd184-138">I riconoscimento vocale fornita con Microsoft Windows 7 funzionano con i seguenti codici di lingua, paese.</span><span class="sxs-lookup"><span data-stu-id="cd184-138">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="cd184-139">en-GB.</span><span class="sxs-lookup"><span data-stu-id="cd184-139">en-GB.</span></span> <span data-ttu-id="cd184-140">Inglese (Regno Unito)</span><span class="sxs-lookup"><span data-stu-id="cd184-140">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="cd184-141">en-US.</span><span class="sxs-lookup"><span data-stu-id="cd184-141">en-US.</span></span> <span data-ttu-id="cd184-142">Inglese (Stati Uniti)</span><span class="sxs-lookup"><span data-stu-id="cd184-142">English (United States)</span></span>  
  
-   <span data-ttu-id="cd184-143">de-DE.</span><span class="sxs-lookup"><span data-stu-id="cd184-143">de-DE.</span></span> <span data-ttu-id="cd184-144">Tedesco (Germania)</span><span class="sxs-lookup"><span data-stu-id="cd184-144">German (Germany)</span></span>  
  
-   <span data-ttu-id="cd184-145">es-ES.</span><span class="sxs-lookup"><span data-stu-id="cd184-145">es-ES.</span></span> <span data-ttu-id="cd184-146">Spagnolo (Spagna)</span><span class="sxs-lookup"><span data-stu-id="cd184-146">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="cd184-147">fr-FR.</span><span class="sxs-lookup"><span data-stu-id="cd184-147">fr-FR.</span></span> <span data-ttu-id="cd184-148">Francese (Francia)</span><span class="sxs-lookup"><span data-stu-id="cd184-148">French (France)</span></span>  
  
-   <span data-ttu-id="cd184-149">ja-JP.</span><span class="sxs-lookup"><span data-stu-id="cd184-149">ja-JP.</span></span> <span data-ttu-id="cd184-150">Giapponese (Giappone)</span><span class="sxs-lookup"><span data-stu-id="cd184-150">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="cd184-151">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="cd184-151">zh-CN.</span></span> <span data-ttu-id="cd184-152">Cinese (Cina)</span><span class="sxs-lookup"><span data-stu-id="cd184-152">Chinese (China)</span></span>  
  
-   <span data-ttu-id="cd184-153">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="cd184-153">zh-TW.</span></span> <span data-ttu-id="cd184-154">Cinese (Taiwan)</span><span class="sxs-lookup"><span data-stu-id="cd184-154">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="cd184-155">Codici di lingua di due lettere, ad esempio "en", "fr", o "es" sono inoltre consentiti.</span><span class="sxs-lookup"><span data-stu-id="cd184-155">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
 <span data-ttu-id="cd184-156">Prima di iniziarne il riconoscimento vocale ha il riconoscimento, è necessario caricare la grammatica di riconoscimento almeno vocale e configurare l'input per il riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-156">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="cd184-157">Per caricare una grammatica, chiamare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-157">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="cd184-158">Per configurare l'input audio, usare uno dei metodi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-158">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-159">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale base e Inizializza un riconoscimento vocale per le impostazioni locali en-US.</span><span class="sxs-lookup"><span data-stu-id="cd184-159">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer for the en-US locale.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd184-160">Nessuno dei sistemi di riconoscimento di input vocali installato supporta le impostazioni locali specificate oppure il parametro <paramref name="culture" /> è la lingua inglese.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-160">None of the installed speech recognizers support the specified locale, or <paramref name="culture" /> is the invariant culture.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-161">
            <paramref name="Culture" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-161">
              <paramref name="Culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Speech.Recognition.RecognizerInfo recognizerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.RecognizerInfo recognizerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Speech::Recognition::RecognizerInfo ^ recognizerInfo);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerInfo" Type="System.Speech.Recognition.RecognizerInfo" />
      </Parameters>
      <Docs>
        <param name="recognizerInfo">
          <span data-ttu-id="cd184-162">Le informazioni per il riconoscimento vocale specifico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-162">The information for the specific speech recognizer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-163">Inizializza una nuova istanza dell'oggetto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />  utilizzando le informazioni disponibili in un oggetto <see cref="T:System.Speech.Recognition.RecognizerInfo" /> per specificare il riconoscimento da utilizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-163">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> using the information in a <see cref="T:System.Speech.Recognition.RecognizerInfo" /> object to specify the recognizer to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-164">È possibile creare un'istanza di questa classe per uno qualsiasi del riconoscimento vocale installata.</span><span class="sxs-lookup"><span data-stu-id="cd184-164">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="cd184-165">Per ottenere informazioni sui tipi di riconoscimento vengono installati, usare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-165">To get information about which recognizers are installed, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="cd184-166">Prima di iniziarne il riconoscimento vocale ha il riconoscimento, è necessario caricare la grammatica di riconoscimento almeno vocale e configurare l'input per il riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-166">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="cd184-167">Per caricare una grammatica, chiamare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-167">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="cd184-168">Per configurare l'input audio, usare uno dei metodi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-168">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-169">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale base e Inizializza un riconoscimento vocale che supporta la lingua inglese.</span><span class="sxs-lookup"><span data-stu-id="cd184-169">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer that supports the English language.</span></span>  
  
```csharp  
 using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (string recognizerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string recognizerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recognizerId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::String ^ recognizerId);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="recognizerId">
          <span data-ttu-id="cd184-170">Il nome del token del riconoscimento vocale da utilizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-170">The token name of the speech recognizer to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-171">Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> con una parametro di stringa che specifica il nome del riconoscimento da utilizzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-171">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class with a string parameter that specifies the name of the recognizer to use.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-172">Il nome del token di riconoscimento è il valore della <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> proprietà del <xref:System.Speech.Recognition.RecognizerInfo> oggetto restituito dal <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> proprietà di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-172">The token name of the recognizer is the value of the <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> property of the <xref:System.Speech.Recognition.RecognizerInfo> object returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property of the recognizer.</span></span> <span data-ttu-id="cd184-173">Per ottenere una raccolta di tutti i riconoscitori installati, usare il metodo statico <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-173">To get a collection of all the installed recognizers, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="cd184-174">Prima di iniziarne il riconoscimento vocale ha il riconoscimento, è necessario caricare la grammatica di riconoscimento almeno vocale e configurare l'input per il riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-174">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="cd184-175">Per caricare una grammatica, chiamare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-175">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="cd184-176">Per configurare l'input audio, usare uno dei metodi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-176">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-177">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale base e crea un'istanza di 8.0 di riconoscimento vocale per Windows (in lingua inglese - Stati Uniti).</span><span class="sxs-lookup"><span data-stu-id="cd184-177">The following example shows part of a console application that demonstrates basic speech recognition, and creates an instance of the Speech Recognizer 8.0 for Windows (English - US).</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an instance of the Microsoft Speech Recognizer 8.0 for  
      // Windows (English - US).  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine("MS-1033-80-DESK"))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized += new EventHandler(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd184-178">Non è installato alcun riconoscimento di input vocale con quel nome di token oppure il parametro <paramref name="recognizerId" /> è la stringa vuota ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-178">No speech recognizer with that token name is installed, or <paramref name="recognizerId" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-179">
            <paramref name="recognizerId" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-179">
              <paramref name="recognizerId" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioFormat As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ AudioFormat { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-180">Ottiene il formato dell'audio ricevuto da <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-180">Gets the format of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd184-181">Il formato audio dell'input all'istanza di <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> o <see langword="null" /> se l'input non è configurato o non impostato su input null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-181">The format of audio at the input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance, or <see langword="null" /> if the input is not configured or set to the null input.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-182">Per configurare l'input audio, usare uno dei metodi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-182">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-183">Nell'esempio seguente viene utilizzato <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> per ottenere e visualizzare i dati in formato audio.</span><span class="sxs-lookup"><span data-stu-id="cd184-183">The example below uses <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> to obtain and display audio format data.</span></span>  
  
```  
static void DisplayAudioDeviceFormat(Label label, SpeechRecognitionEngine recognitionEngine)   
{  
  
  if (recognitionEngine != null && label != null)   
  {  
    label.Text = String.Format("Encoding Format:         {0}\n" +  
          "AverageBytesPerSecond    {1}\n" +  
          "BitsPerSample            {2}\n" +  
          "BlockAlign               {3}\n" +  
          "ChannelCount             {4}\n" +  
          "SamplesPerSecond         {5}",  
          recognitionEngine.AudioFormat.EncodingFormat.ToString(),  
          recognitionEngine.AudioFormat.AverageBytesPerSecond,  
          recognitionEngine.AudioFormat.BitsPerSample,  
          recognitionEngine.AudioFormat.BlockAlign,  
          recognitionEngine.AudioFormat.ChannelCount,  
          recognitionEngine.AudioFormat.SamplesPerSecond);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevel">
      <MemberSignature Language="C#" Value="public int AudioLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioLevel" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AudioLevel { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-184">Ottiene il livello dell'audio ricevuto da <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-184">Gets the level of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd184-185">Livello audio dell'input del riconoscimento vocale, da 0 a 100.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-185">The audio level of the input to the speech recognizer, from 0 through 100.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-186">Il valore 0 rappresenta inattività 100 rappresenta il volume di input massimo.</span><span class="sxs-lookup"><span data-stu-id="cd184-186">The value 0 represents silence, and 100 represents the maximum input volume.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevelUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioLevelUpdated As EventHandler(Of AudioLevelUpdatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioLevelUpdatedEventArgs ^&gt; ^ AudioLevelUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-187">Generato quando <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> segnala il livello del relativo input audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-187">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> reports the level of its audio input.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-188">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine> genera questo evento più volte al secondo.</span><span class="sxs-lookup"><span data-stu-id="cd184-188">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event multiple times per second.</span></span> <span data-ttu-id="cd184-189">La frequenza con cui l'evento viene generato varia a seconda del computer in cui è in esecuzione l'applicazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-189">The frequency with which the event is raised depends on the computer on which the application is running.</span></span>  
  
 <span data-ttu-id="cd184-190">Per ottenere il livello audio al momento dell'evento, utilizzare il <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> proprietà dell'oggetto associato <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="cd184-190">To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span></span> <span data-ttu-id="cd184-191">Per ottenere il livello corrente audio di input per il riconoscimento, usare il riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-191">To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> property.</span></span>  
  
 <span data-ttu-id="cd184-192">Quando si crea un delegato di <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated>, si identifica il metodo con cui gestire l'evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-192">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="cd184-193">Per associare l'evento al gestore eventi in uso, aggiungere all'evento un'istanza del delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-193">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="cd184-194">Il gestore eventi viene chiamato ogni volta che si verifica l'evento, a meno che non venga rimosso il delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-194">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="cd184-195">Per ulteriori informazioni sui delegati del gestore eventi, vedere [eventi e delegati](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="cd184-195">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-196">Nell'esempio seguente aggiunge un gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> evento da un <xref:System.Speech.Recognition.SpeechRecognitionEngine> oggetto.</span><span class="sxs-lookup"><span data-stu-id="cd184-196">The following example adds a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> event to a <xref:System.Speech.Recognition.SpeechRecognitionEngine> object.</span></span> <span data-ttu-id="cd184-197">Il gestore restituisce il nuovo livello audio nella console.</span><span class="sxs-lookup"><span data-stu-id="cd184-197">The handler outputs the new audio level to the console.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the SpeechRecognitionEngine object.   
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add an event handler for the AudioLevelUpdated event.  
  recognizer.AudioLevelUpdated +=   
   new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  
  
  // Add other initialization code here.  
  
}  
  
// Write the audio level to the console when the AudioLevelUpdated event is raised.  
void recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  
{  
  Console.WriteLine("The audio level is now: {0}.", e.AudioLevel);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-198">Ottiene la posizione corrente nel flusso audio generato dal dispositivo che fornisce l'input a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-198">Gets the current location in the audio stream being generated by the device that is providing input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd184-199">La posizione corrente nel flusso audio generato dal dispositivo di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-199">The current location in the audio stream being generated by the input device.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-200">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> proprietà fa riferimento la posizione del dispositivo di input nel proprio flusso audio generato.</span><span class="sxs-lookup"><span data-stu-id="cd184-200">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="cd184-201">Al contrario, il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> proprietà fa riferimento la posizione del riconoscimento all'interno di input audio.</span><span class="sxs-lookup"><span data-stu-id="cd184-201">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the recognizer's position within its audio input.</span></span> <span data-ttu-id="cd184-202">Queste posizioni possono essere diverse.</span><span class="sxs-lookup"><span data-stu-id="cd184-202">These positions can be different.</span></span> <span data-ttu-id="cd184-203">Ad esempio, se ha ricevuto il riconoscimento di input per i quali non ha ancora generato un risultato di riconoscimento, il valore del <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> proprietà è minore del valore del <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-203">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-204">Nell'esempio seguente, il riconoscimento vocale in-process Usa una grammatica dettatura per associare input vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-204">In the following example, the in-process speech recognizer uses a dictation grammar to match speech input.</span></span> <span data-ttu-id="cd184-205">Un gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> evento scrive nella console di <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> quando il riconoscimento vocale ha rilevato vocale relativi input.</span><span class="sxs-lookup"><span data-stu-id="cd184-205">A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event writes to the console the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> when the speech recognizer detects speech at its input.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine for US English.  
      using (recognizer = new SpeechRecognitionEngine(  
        new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create a grammar for finding services in different cities.  
        Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
        Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
        GrammarBuilder findServices = new GrammarBuilder("Find");  
        findServices.Append(services);  
        findServices.Append("near");  
        findServices.Append(cities);  
  
        // Create a Grammar object from the GrammarBuilder and load it to the recognizer.  
        Grammar servicesGrammar = new Grammar(findServices);  
        recognizer.LoadGrammarAsync(servicesGrammar);  
  
        // Add handlers for events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Gather information about detected speech and write it to the console.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Speech detected:");  
      Console.WriteLine("  Audio level: " + recognizer.AudioLevel);  
      Console.WriteLine("  Audio position at the event: " + e.AudioPosition);  
      Console.WriteLine("  Current audio position: " + recognizer.AudioPosition);  
      Console.WriteLine("  Current recognizer audio position: " +   
        recognizer.RecognizerAudioPosition);  
    }  
  
    // Write the text of the recognition result to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("\nSpeech recognized: " + e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="AudioSignalProblemOccurred">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioSignalProblemOccurred As EventHandler(Of AudioSignalProblemOccurredEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioSignalProblemOccurredEventArgs ^&gt; ^ AudioSignalProblemOccurred;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-206">Generato quando <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> rileva un problema nel segnale audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-206">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects a problem in the audio signal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-207">Per ottenere si è verificato il problema, utilizzare il <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> proprietà dell'oggetto associato <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="cd184-207">To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span></span>  
  
 <span data-ttu-id="cd184-208">Quando si crea un delegato di <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred>, si identifica il metodo con cui gestire l'evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-208">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="cd184-209">Per associare l'evento al gestore eventi in uso, aggiungere all'evento un'istanza del delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-209">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="cd184-210">Il gestore eventi viene chiamato ogni volta che si verifica l'evento, a meno che non venga rimosso il delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-210">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="cd184-211">Per ulteriori informazioni sui delegati del gestore eventi, vedere [eventi e delegati](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="cd184-211">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-212">L'esempio seguente definisce un gestore eventi che raccoglie informazioni su un <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-212">The following example defines an event handler that gathers information about an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> event.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the speech recognition engine.  
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add a handler for the AudioSignalProblemOccurred event.  
  recognizer.AudioSignalProblemOccurred +=   
    new EventHandler<AudioSignalProblemOccurredEventArgs>(  
      recognizer_AudioSignalProblemOccurred);  
}  
  
// Gather information when the AudioSignalProblemOccurred event is raised.  
void recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  
{  
  StringBuilder details = new StringBuilder();  
  
  details.AppendLine("Audio signal problem information:");  
  details.AppendFormat(  
    " Audio level:               {0}" + Environment.NewLine +  
    " Audio position:            {1}" + Environment.NewLine +  
    " Audio signal problem:      {2}" + Environment.NewLine +  
    " Recognition engine audio position: {3}" + Environment.NewLine,  
    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  
    e.recoEngineAudioPosition);  
  
  // Insert additional event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblem" />
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AudioState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.AudioState AudioState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.AudioState AudioState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioState As AudioState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::AudioState AudioState { System::Speech::Recognition::AudioState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.AudioState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-213">Ottiene lo stato dell'audio ricevuto da <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-213">Gets the state of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd184-214">Lo stato dell'input audio per il riconoscimento vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-214">The state of the audio input to the speech recognizer.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-215">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> proprietà rappresenta lo stato audio con un membro con il <xref:System.Speech.Recognition.AudioState> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-215">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property represents the audio state with a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="AudioStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioStateChanged As EventHandler(Of AudioStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioStateChangedEventArgs ^&gt; ^ AudioStateChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-216">Generato in seguito alla modifica dello stato nell'audio ricevuto da <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-216">Raised when the state changes in the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-217">Per ottenere lo stato audio al momento dell'evento, utilizzare il <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> proprietà dell'oggetto associato <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="cd184-217">To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span></span> <span data-ttu-id="cd184-218">Per ottenere lo stato corrente di audio di input per il riconoscimento, usare il riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-218">To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property.</span></span> <span data-ttu-id="cd184-219">Per ulteriori informazioni sullo stato audio, vedere il <xref:System.Speech.Recognition.AudioState> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-219">For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 <span data-ttu-id="cd184-220">Quando si crea un delegato di <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged>, si identifica il metodo con cui gestire l'evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-220">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="cd184-221">Per associare l'evento al gestore eventi in uso, aggiungere all'evento un'istanza del delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-221">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="cd184-222">Il gestore eventi viene chiamato ogni volta che si verifica l'evento, a meno che non venga rimosso il delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-222">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="cd184-223">Per ulteriori informazioni sui delegati del gestore eventi, vedere [eventi e delegati](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="cd184-223">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-224">Nell'esempio seguente viene utilizzato un gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> evento da scrivere il riconoscimento del nuovo <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> nella console ogni volta che le modifiche, l'utilizzo di un membro del <xref:System.Speech.Recognition.AudioState> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-224">The following example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> to the console each time it changes, using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder("On this farm he had a");  
        farm.Append(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Attach event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine();  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Done.");  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the AudioStateChanged event.  
    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("The new audio state is: " + e.AudioState);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="BabbleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan BabbleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BabbleTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BabbleTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BabbleTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-225">Ottiene o imposta l'intervallo di tempo durante il quale <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accetta input contenente solo il rumore di fondo, prima di completare il riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-225">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only background noise, before finalizing recognition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd184-226">La durata dell'intervallo di tempo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-226">The duration of the time interval.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-227">Ogni riconoscimento vocale è disponibile un algoritmo per distinguere tra vocale e di inattività.</span><span class="sxs-lookup"><span data-stu-id="cd184-227">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="cd184-228">Il riconoscimento classifica come qualsiasi inattività-non di input che non corrispondono alla regola iniziale di uno qualsiasi del riconoscimento del rumore caricati e abilitato le grammatiche riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-228">The recognizer classifies as background noise any non-silence input that does not match the initial rule of any of the recognizer's loaded and enabled speech recognition grammars.</span></span> <span data-ttu-id="cd184-229">Se il riconoscimento riceve solo rumore di fondo e inattività entro l'intervallo di timeout babble, il riconoscimento completa l'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-229">If the recognizer receives only background noise and silence within the babble timeout interval, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="cd184-230">Per le operazioni di riconoscimento asincrona, genera il riconoscimento di <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento, in cui il <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> proprietà `true`e il <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> proprietà è `null`.</span><span class="sxs-lookup"><span data-stu-id="cd184-230">For asynchronous recognition operations, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="cd184-231">Per le operazioni di riconoscimento sincrono e l'emulazione, restituisce il riconoscimento `null`, anziché un valore valido <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="cd184-231">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="cd184-232">Se il periodo di timeout babble è impostato su 0, il riconoscimento non in grado di eseguire un controllo di timeout babble.</span><span class="sxs-lookup"><span data-stu-id="cd184-232">If the babble timeout period is set to 0, the recognizer does not perform a babble timeout check.</span></span> <span data-ttu-id="cd184-233">L'intervallo di timeout può essere qualsiasi valore non negativo.</span><span class="sxs-lookup"><span data-stu-id="cd184-233">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="cd184-234">Il valore predefinito è 0 secondi.</span><span class="sxs-lookup"><span data-stu-id="cd184-234">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-235">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale base che imposta il <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> le proprietà di un <xref:System.Speech.Recognition.SpeechRecognitionEngine> prima di avviare il riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-235">The following example shows part of a console application that demonstrates basic speech recognition that sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="cd184-236">Gestori per il riconoscimento vocale <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> gli eventi di output delle informazioni di evento nella console per dimostrare come <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> le proprietà di un <xref:System.Speech.Recognition.SpeechRecognitionEngine> influiscono sulle operazioni di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-236">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder..  
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cd184-237">Questa proprietà è impostata su un valore minore di 0 secondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-237">This property is set to less than 0 seconds.</span>
          </span>
        </exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-238">Elimina l'oggetto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-238">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cd184-239">Elimina l'oggetto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-239">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="cd184-240">
            <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-240">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-241">Elimina l'oggetto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> e rilascia le risorse usate durante la sessione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-241">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object and releases resources used during the session.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-242">Emula l'input al riconoscimento vocale, utilizzando il testo anziché l'audio per il riconoscimento vocale sincrono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-242">Emulates input to the speech recognizer, using text in place of audio for synchronous speech recognition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-243">Questi metodi di ignorare l'input audio di sistema e fornire il testo per il riconoscimento come <xref:System.String> oggetti o come una matrice di <xref:System.Speech.Recognition.RecognizedWordUnit> oggetti.</span><span class="sxs-lookup"><span data-stu-id="cd184-243">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="cd184-244">Può essere utile quando si desidera testare o il debug di un'applicazione o grammatica.</span><span class="sxs-lookup"><span data-stu-id="cd184-244">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="cd184-245">Ad esempio, è possibile utilizzare l'emulazione per determinare se una parola in una grammatica e quali semantica viene restituita quando la parola viene riconosciuta.</span><span class="sxs-lookup"><span data-stu-id="cd184-245">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="cd184-246">Utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> per disattivare l'input audio per il motore di riconoscimento vocale durante le operazioni di emulazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-246">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="cd184-247">Il controllo di riconoscimento vocale genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventi come se l'operazione di riconoscimento non è emulata.</span><span class="sxs-lookup"><span data-stu-id="cd184-247">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="cd184-248">Il riconoscimento delle nuove righe e gli spazi vuoti aggiuntivi vengono ignorati e considera i segni di punteggiatura come valore letterale input.</span><span class="sxs-lookup"><span data-stu-id="cd184-248">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cd184-249">Il <xref:System.Speech.Recognition.RecognitionResult> oggetto generato dal riconoscimento vocale in risposta all'input emulata ha un valore di `null` per relativo <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-249">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="cd184-250">Per emulare un riconoscimento asincrono, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-250">To emulate asynchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EmulateRecognize (inputText As String) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="cd184-251">Input per l'operazione di riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-251">The input for the recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-252">Emula l'input di una frase al riconoscimento vocale, utilizzando il testo anziché l'audio per il riconoscimento vocale sincrono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-252">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd184-253">Il risultato dell'operazione di riconoscimento o <see langword="null" /> se l'operazione non riesce o il riconoscimento non è abilitato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-253">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-254">Il controllo di riconoscimento vocale genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventi come se l'operazione di riconoscimento non è emulata.</span><span class="sxs-lookup"><span data-stu-id="cd184-254">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="cd184-255">Il riconoscimento forniti con Vista e Windows 7 Ignora maiuscole / minuscole e caratteri di larghezza quando l'applicazione delle regole di sintassi per la frase di input.</span><span class="sxs-lookup"><span data-stu-id="cd184-255">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="cd184-256">Per ulteriori informazioni su questo tipo di confronto, vedere il <xref:System.Globalization.CompareOptions> valori di enumerazione <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> e <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="cd184-256">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="cd184-257">Il riconoscimento anche Ignora le nuove righe e lo spazio vuoto aggiuntivo e considera la punteggiatura come input letterale.</span><span class="sxs-lookup"><span data-stu-id="cd184-257">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-258">Esempio di codice seguente fa parte di un'applicazione console in cui viene emulato input, i risultati di riconoscimento associati e gli eventi associati generati dal riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-258">The code example below is part of a console application that demonstrates emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="cd184-259">L'esempio genera l'output seguente.</span><span class="sxs-lookup"><span data-stu-id="cd184-259">The example generates the following output.</span></span>  
  
```  
TestRecognize("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
...Recognition result text = Smith  
  
TestRecognize("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
...Recognition result text = Jones  
  
TestRecognize("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
...No recognition result.  
  
TestRecognize("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
...Recognition result text = mister Smith  
  
press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace Sre_EmulateRecognize  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Disable audio input to the recognizer.  
        recognizer.SetInputToNull();  
  
        // Add handlers for events raised by the EmulateRecognize method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
  
        // Start four synchronous emulated recognition operations.  
        TestRecognize(recognizer, "Smith");  
        TestRecognize(recognizer, "Jones");  
        TestRecognize(recognizer, "Mister");  
        TestRecognize(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for synchronous recognition.  
    private static void TestRecognize(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      Console.WriteLine("TestRecognize(\"{0}\")...", input);  
      RecognitionResult result =  
        recognizer.EmulateRecognize(input,CompareOptions.IgnoreCase);  
      if (result != null)  
      {  
        Console.WriteLine("...Recognition result text = {0}",  
          result.Text ?? "<null>");  
      }  
      else  
      {  
        Console.WriteLine("...No recognition result.");  
      }  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    // Handle events.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cd184-260">Nel riconoscimento non sono caricate grammatiche di riconoscimento vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-260">The recognizer has no speech recognition grammars loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-261">
            <paramref name="inputText" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-261">
              <paramref name="inputText" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd184-262">
            <paramref name="inputText" /> è la stringa vuota ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-262">
              <paramref name="inputText" /> is the empty string ("").</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits">
          <span data-ttu-id="cd184-263">Matrice di unità di parole che contiene l'input per l'operazione di riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-263">An array of word units that contains the input for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="cd184-264">Combinazione bit per bit dei valori di enumerazione che descrivono il tipo di confronto da utilizzare per l'operazione di riconoscimento emulato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-264">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-265">Emula l'input di parole specifiche al riconoscimento vocale, utilizzando il testo anziché l'audio per il riconoscimento vocale sincrono, e specifica come il riconoscimento gestisce il confronto Unicode tra le parole e le grammatiche di riconoscimento vocale caricate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-265">Emulates input of specific words to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd184-266">Il risultato dell'operazione di riconoscimento o <see langword="null" /> se l'operazione non riesce o il riconoscimento non è abilitato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-266">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-267">Il controllo di riconoscimento vocale genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventi come se l'operazione di riconoscimento non è emulata.</span><span class="sxs-lookup"><span data-stu-id="cd184-267">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="cd184-268">Il riconoscimento utilizza `compareOptions` quando si applica regole grammaticali per la frase di input.</span><span class="sxs-lookup"><span data-stu-id="cd184-268">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="cd184-269">Il riconoscimento forniti con Vista e Windows 7 Ignora maiuscole / minuscole se il <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> o <xref:System.Globalization.CompareOptions.IgnoreCase> valore è presente.</span><span class="sxs-lookup"><span data-stu-id="cd184-269">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="cd184-270">Il riconoscimento Ignora sempre la larghezza del carattere e mai Ignora Katakana / Hiragana.</span><span class="sxs-lookup"><span data-stu-id="cd184-270">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="cd184-271">Il riconoscimento inoltre nuove righe e gli spazi vuoti aggiuntivi vengono ignorati e considera i segni di punteggiatura come input letterale.</span><span class="sxs-lookup"><span data-stu-id="cd184-271">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="cd184-272">Per ulteriori informazioni sulla larghezza del carattere e il tipo Kana, vedere il <xref:System.Globalization.CompareOptions> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-272">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cd184-273">Nel riconoscimento non sono caricate grammatiche di riconoscimento vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-273">The recognizer has no speech recognition grammars loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-274">
            <paramref name="wordUnits" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-274">
              <paramref name="wordUnits" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd184-275">
            <paramref name="wordUnits" /> contiene uno o più elementi <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-275">
              <paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="cd184-276">
            <paramref name="compareOptions" /> contiene il flag <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> o <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-276">
              <paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="cd184-277">Frase di Input per l'operazione di riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-277">The input phrase for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="cd184-278">Combinazione bit per bit dei valori di enumerazione che descrivono il tipo di confronto da utilizzare per l'operazione di riconoscimento emulato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-278">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-279">Emula l'input di una frase al riconoscimento vocale, utilizzando il testo anziché l'audio per il riconoscimento vocale sincrono, e specifica come il riconoscimento gestisce il confronto Unicode tra la frase e le grammatiche di riconoscimento vocale caricate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-279">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd184-280">Il risultato dell'operazione di riconoscimento o <see langword="null" /> se l'operazione non riesce o il riconoscimento non è abilitato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-280">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-281">Il controllo di riconoscimento vocale genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventi come se l'operazione di riconoscimento non è emulata.</span><span class="sxs-lookup"><span data-stu-id="cd184-281">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="cd184-282">Il riconoscimento utilizza `compareOptions` quando si applica regole grammaticali per la frase di input.</span><span class="sxs-lookup"><span data-stu-id="cd184-282">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="cd184-283">Il riconoscimento forniti con Vista e Windows 7 Ignora maiuscole / minuscole se il <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> o <xref:System.Globalization.CompareOptions.IgnoreCase> valore è presente.</span><span class="sxs-lookup"><span data-stu-id="cd184-283">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="cd184-284">Il riconoscimento Ignora sempre la larghezza del carattere e mai Ignora Katakana / Hiragana.</span><span class="sxs-lookup"><span data-stu-id="cd184-284">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="cd184-285">Il riconoscimento inoltre nuove righe e gli spazi vuoti aggiuntivi vengono ignorati e considera i segni di punteggiatura come input letterale.</span><span class="sxs-lookup"><span data-stu-id="cd184-285">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="cd184-286">Per ulteriori informazioni sulla larghezza del carattere e il tipo Kana, vedere il <xref:System.Globalization.CompareOptions> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-286">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cd184-287">Nel riconoscimento non sono caricate grammatiche di riconoscimento vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-287">The recognizer has no speech recognition grammars loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-288">
            <paramref name="inputText" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-288">
              <paramref name="inputText" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd184-289">
            <paramref name="inputText" /> è la stringa vuota ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-289">
              <paramref name="inputText" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="cd184-290">
            <paramref name="compareOptions" /> contiene il flag <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> o <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-290">
              <paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-291">Emula l'input al riconoscimento vocale, utilizzando il testo anziché l'audio per il riconoscimento vocale asincrono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-291">Emulates input to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-292">Questi metodi di ignorare l'input audio di sistema e fornire il testo per il riconoscimento come <xref:System.String> oggetti o come una matrice di <xref:System.Speech.Recognition.RecognizedWordUnit> oggetti.</span><span class="sxs-lookup"><span data-stu-id="cd184-292">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="cd184-293">Può essere utile quando si desidera testare o il debug di un'applicazione o grammatica.</span><span class="sxs-lookup"><span data-stu-id="cd184-293">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="cd184-294">Ad esempio, è possibile utilizzare l'emulazione per determinare se una parola in una grammatica e quali semantica viene restituita quando la parola viene riconosciuta.</span><span class="sxs-lookup"><span data-stu-id="cd184-294">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="cd184-295">Utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> per disattivare l'input audio per il motore di riconoscimento vocale durante le operazioni di emulazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-295">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="cd184-296">Il controllo di riconoscimento vocale genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventi come se l'operazione di riconoscimento non è emulata.</span><span class="sxs-lookup"><span data-stu-id="cd184-296">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="cd184-297">Al termine dell'operazione di riconoscimento asincrono il riconoscimento, genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-297">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span> <span data-ttu-id="cd184-298">Il riconoscimento delle nuove righe e gli spazi vuoti aggiuntivi vengono ignorati e considera i segni di punteggiatura come valore letterale input.</span><span class="sxs-lookup"><span data-stu-id="cd184-298">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cd184-299">Il <xref:System.Speech.Recognition.RecognitionResult> oggetto generato dal riconoscimento vocale in risposta all'input emulata ha un valore di `null` per relativo <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-299">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="cd184-300">Per emulare un riconoscimento sincrono, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-300">To emulate synchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EmulateRecognizeAsync (inputText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="cd184-301">Input per l'operazione di riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-301">The input for the recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-302">Emula l'input di una frase al riconoscimento vocale, utilizzando il testo anziché l'audio per il riconoscimento vocale asincrono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-302">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-303">Il controllo di riconoscimento vocale genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventi come se l'operazione di riconoscimento non è emulata.</span><span class="sxs-lookup"><span data-stu-id="cd184-303">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="cd184-304">Al termine dell'operazione di riconoscimento asincrono il riconoscimento, genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-304">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="cd184-305">Il riconoscimento forniti con Vista e Windows 7 Ignora maiuscole / minuscole e caratteri di larghezza quando l'applicazione delle regole di sintassi per la frase di input.</span><span class="sxs-lookup"><span data-stu-id="cd184-305">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="cd184-306">Per ulteriori informazioni su questo tipo di confronto, vedere il <xref:System.Globalization.CompareOptions> valori di enumerazione <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> e <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="cd184-306">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="cd184-307">Il riconoscimento anche Ignora le nuove righe e lo spazio vuoto aggiuntivo e considera la punteggiatura come input letterale.</span><span class="sxs-lookup"><span data-stu-id="cd184-307">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-308">Esempio di codice seguente fa parte di un'applicazione console che illustra l'input emulata asincrona, i risultati di riconoscimento associati e gli eventi associati generati dal riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-308">The code example below is part of a console application that demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="cd184-309">L'esempio genera l'output seguente.</span><span class="sxs-lookup"><span data-stu-id="cd184-309">The example generates the following output.</span></span>  
  
```  
  
TestRecognizeAsync("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = Smith  
 Done.  
  
TestRecognizeAsync("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
 EmulateRecognizeCompleted event raised.  
  Grammar = Jones; Text = Jones  
 Done.  
  
TestRecognizeAsync("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
 EmulateRecognizeCompleted event raised.  
  No recognition result available.  
 Done.  
  
TestRecognizeAsync("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = mister Smith  
 Done.  
  
press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SreEmulateRecognizeAsync  
{  
  class Program  
  {  
    // Indicate when an asynchronous operation is finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Configure the audio input.  
        recognizer.SetInputToNull();  
  
        // Add event handlers for the events raised by the  
        // EmulateRecognizeAsync method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHander);  
  
        // Start four asynchronous emulated recognition operations.  
        TestRecognizeAsync(recognizer, "Smith");  
        TestRecognizeAsync(recognizer, "Jones");  
        TestRecognizeAsync(recognizer, "Mister");  
        TestRecognizeAsync(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for asynchronous  
    // recognition.  
    private static void TestRecognizeAsync(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      completed = false;  
  
      Console.WriteLine("TestRecognizeAsync(\"{0}\")...", input);  
      recognizer.EmulateRecognizeAsync(input);  
  
      // Wait for the operation to complete.  
      while (!completed)  
      {  
        Thread.Sleep(333);  
      }  
  
      Console.WriteLine(" Done.");  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    // Handle events.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text );  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void EmulateRecognizeCompletedHander(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" EmulateRecognizeCompleted event raised.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("  {0} exception encountered: {1}:",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      else if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      else if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cd184-310">Nel riconoscimento non sono caricate grammatiche di riconoscimento vocale, oppure ci sono operazioni di riconoscimento asincrone non ancora complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-310">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-311">
            <paramref name="inputText" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-311">
              <paramref name="inputText" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd184-312">
            <paramref name="inputText" /> è la stringa vuota ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-312">
              <paramref name="inputText" /> is the empty string ("").</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits">
          <span data-ttu-id="cd184-313">Matrice di unità di parole che contiene l'input per l'operazione di riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-313">An array of word units that contains the input for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="cd184-314">Combinazione bit per bit dei valori di enumerazione che descrivono il tipo di confronto da utilizzare per l'operazione di riconoscimento emulato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-314">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-315">Emula l'input di parole specifiche al riconoscimento vocale, utilizzando una matrice di oggetti <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> anziché l'audio per il riconoscimento vocale asincrono, e specifica come il riconoscimento gestisce il confronto Unicode tra le parole e le grammatiche di riconoscimento vocale caricate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-315">Emulates input of specific words to the speech recognizer, using an array of <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> objects in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-316">Il controllo di riconoscimento vocale genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventi come se l'operazione di riconoscimento non è emulata.</span><span class="sxs-lookup"><span data-stu-id="cd184-316">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="cd184-317">Al termine dell'operazione di riconoscimento asincrono il riconoscimento, genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-317">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="cd184-318">Il riconoscimento utilizza `compareOptions` quando si applica regole grammaticali per la frase di input.</span><span class="sxs-lookup"><span data-stu-id="cd184-318">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="cd184-319">Il riconoscimento forniti con Vista e Windows 7 Ignora maiuscole / minuscole se il <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> o <xref:System.Globalization.CompareOptions.IgnoreCase> valore è presente.</span><span class="sxs-lookup"><span data-stu-id="cd184-319">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="cd184-320">Il riconoscimento Ignora sempre la larghezza del carattere e mai Ignora Katakana / Hiragana.</span><span class="sxs-lookup"><span data-stu-id="cd184-320">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="cd184-321">Il riconoscimento anche Ignora le nuove righe e lo spazio vuoto aggiuntivo e considera la punteggiatura come input letterale.</span><span class="sxs-lookup"><span data-stu-id="cd184-321">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="cd184-322">Per ulteriori informazioni sulla larghezza del carattere e il tipo Kana, vedere il <xref:System.Globalization.CompareOptions> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-322">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cd184-323">Nel riconoscimento non sono caricate grammatiche di riconoscimento vocale, oppure ci sono operazioni di riconoscimento asincrone non ancora complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-323">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-324">
            <paramref name="wordUnits" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-324">
              <paramref name="wordUnits" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd184-325">
            <paramref name="wordUnits" /> contiene uno o più elementi <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-325">
              <paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="cd184-326">
            <paramref name="compareOptions" /> contiene il flag <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> o <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-326">
              <paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="cd184-327">Frase di Input per l'operazione di riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-327">The input phrase for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="cd184-328">Combinazione bit per bit dei valori di enumerazione che descrivono il tipo di confronto da utilizzare per l'operazione di riconoscimento emulato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-328">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-329">Emula l'input di una frase al riconoscimento vocale, utilizzando il testo anziché l'audio per il riconoscimento vocale asincrono, e specifica come il riconoscimento gestisce il confronto Unicode tra la frase e le grammatiche di riconoscimento vocale caricate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-329">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-330">Il controllo di riconoscimento vocale genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventi come se l'operazione di riconoscimento non è emulata.</span><span class="sxs-lookup"><span data-stu-id="cd184-330">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="cd184-331">Al termine dell'operazione di riconoscimento asincrono il riconoscimento, genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-331">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="cd184-332">Il riconoscimento utilizza `compareOptions` quando si applica regole grammaticali per la frase di input.</span><span class="sxs-lookup"><span data-stu-id="cd184-332">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="cd184-333">Il riconoscimento forniti con Vista e Windows 7 Ignora maiuscole / minuscole se il <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> o <xref:System.Globalization.CompareOptions.IgnoreCase> valore è presente.</span><span class="sxs-lookup"><span data-stu-id="cd184-333">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="cd184-334">Il riconoscimento Ignora sempre la larghezza del carattere e mai Ignora Katakana / Hiragana.</span><span class="sxs-lookup"><span data-stu-id="cd184-334">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="cd184-335">Il riconoscimento anche Ignora le nuove righe e lo spazio vuoto aggiuntivo e considera la punteggiatura come input letterale.</span><span class="sxs-lookup"><span data-stu-id="cd184-335">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="cd184-336">Per ulteriori informazioni sulla larghezza del carattere e il tipo Kana, vedere il <xref:System.Globalization.CompareOptions> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-336">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cd184-337">Nel riconoscimento non sono caricate grammatiche di riconoscimento vocale, oppure ci sono operazioni di riconoscimento asincrone non ancora complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-337">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-338">
            <paramref name="inputText" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-338">
              <paramref name="inputText" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd184-339">
            <paramref name="inputText" /> è la stringa vuota ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-339">
              <paramref name="inputText" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="cd184-340">
            <paramref name="compareOptions" /> contiene il flag <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> o <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-340">
              <paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event EmulateRecognizeCompleted As EventHandler(Of EmulateRecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::EmulateRecognizeCompletedEventArgs ^&gt; ^ EmulateRecognizeCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-341">Generato quando <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> completa un'operazione di riconoscimento asincrona di input emulato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-341">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation of emulated input.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-342">Ogni <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> metodo inizia un'operazione asincrona di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-342">Each <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation.</span></span> <span data-ttu-id="cd184-343">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine> genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> evento quando completa l'operazione asincrona.</span><span class="sxs-lookup"><span data-stu-id="cd184-343">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when it finalizes the asynchronous operation.</span></span>  
  
 <span data-ttu-id="cd184-344">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operazione può generare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventi.</span><span class="sxs-lookup"><span data-stu-id="cd184-344">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operation can raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events.</span></span> <span data-ttu-id="cd184-345">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> evento è l'ultimo evento di questo tipo che il riconoscimento genera per l'operazione specificata.</span><span class="sxs-lookup"><span data-stu-id="cd184-345">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event is the last such event that the recognizer raises for a given operation.</span></span>  
  
 <span data-ttu-id="cd184-346">Se il riconoscimento emulato ha avuto esito positivo, è possibile accedere al risultato del riconoscimento utilizzando uno dei seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-346">If emulated recognition was successful, you can access the recognition result using the either of the following:</span></span>  
  
-   <span data-ttu-id="cd184-347">Il <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> proprietà il <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> oggetto nel gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-347">The <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
-   <span data-ttu-id="cd184-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> proprietà di <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> oggetto nel gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="cd184-349">Se emulato riconoscimento non è stato completato la <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> non viene generato e <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> sarà null.</span><span class="sxs-lookup"><span data-stu-id="cd184-349">If emulated recognition was not successful, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event is not raised and the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> will be null.</span></span>  
  
 <span data-ttu-id="cd184-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> deriva da <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="cd184-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> derives from <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="cd184-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> deriva da <xref:System.Speech.Recognition.RecognitionEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="cd184-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="cd184-352">Quando si crea un delegato di <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted>, si identifica il metodo con cui gestire l'evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-352">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="cd184-353">Per associare l'evento al gestore eventi in uso, aggiungere all'evento un'istanza del delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-353">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="cd184-354">Il gestore eventi viene chiamato ogni volta che si verifica l'evento, a meno che non venga rimosso il delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-354">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="cd184-355">Per ulteriori informazioni sui delegati del gestore eventi, vedere [eventi e delegati](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="cd184-355">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-356">Nell'esempio seguente fa parte di un'applicazione console che viene caricata una grammatica di riconoscimento vocale e input emulata asincrona, i risultati di riconoscimento associati e gli eventi associati generati dal riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-356">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InProcessRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of an in-process recognizer.  
      using (SpeechRecognitionEngine recognizer =   
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call mathches the grammar  
        // and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar  
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Result of 1st call to EmulateRecognizeAsync = {0}",  
          e.Result.Text ?? "<no text>");  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("Result of 2nd call to EmulateRecognizeAsync = No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-357">Ottiene o imposta l'intervallo di silenzio che <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accetterà alla fine dell'input non ambiguo prima di completare un'operazione di riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-357">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of unambiguous input before finalizing a recognition operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd184-358">La durata dell'intervallo di silenzio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-358">The duration of the interval of silence.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-359">Il riconoscimento vocale utilizza questo intervallo di timeout quando l'input di riconoscimento non è ambiguo.</span><span class="sxs-lookup"><span data-stu-id="cd184-359">The speech recognizer uses this timeout interval when the recognition input is unambiguous.</span></span> <span data-ttu-id="cd184-360">Ad esempio, per una grammatica di riconoscimento vocale che supporta il riconoscimento di uno "nuovo gioco." o "nuova partita", "nuovo gioco." è un input non ambiguo, e "nuova partita" è un input ambiguo.</span><span class="sxs-lookup"><span data-stu-id="cd184-360">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="cd184-361">Questa proprietà determina il tempo di attesa di riconoscimento vocale per l'input aggiuntivi prima di completare un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-361">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="cd184-362">L'intervallo di timeout può essere da 0 a 10 secondi.</span><span class="sxs-lookup"><span data-stu-id="cd184-362">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="cd184-363">Il valore predefinito è 150 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="cd184-363">The default is 150 milliseconds.</span></span>  
  
 <span data-ttu-id="cd184-364">Per impostare l'intervallo di timeout per l'input ambiguo, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-364">To set the timeout interval for ambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cd184-365">Questa proprietà è impostata su un valore inferiore a 0 secondi o maggiore di 10 secondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-365">This property is set to less than 0 seconds or greater than 10 seconds.</span>
          </span>
        </exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeoutAmbiguous">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeoutAmbiguous { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeoutAmbiguous As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeoutAmbiguous { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-366">Ottiene o imposta l'intervallo di silenzio che <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accetterà alla fine dell'input ambiguo prima di completare un'operazione di riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-366">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of ambiguous input before finalizing a recognition operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd184-367">La durata dell'intervallo di silenzio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-367">The duration of the interval of silence.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-368">Il riconoscimento vocale utilizza questo intervallo di timeout quando l'input di riconoscimento è ambiguo.</span><span class="sxs-lookup"><span data-stu-id="cd184-368">The speech recognizer uses this timeout interval when the recognition input is ambiguous.</span></span> <span data-ttu-id="cd184-369">Ad esempio, per una grammatica di riconoscimento vocale che supporta il riconoscimento di uno "nuovo gioco." o "nuova partita", "nuovo gioco." è un input non ambiguo, e "nuova partita" è un input ambiguo.</span><span class="sxs-lookup"><span data-stu-id="cd184-369">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="cd184-370">Questa proprietà determina il tempo di attesa di riconoscimento vocale per l'input aggiuntivi prima di completare un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-370">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="cd184-371">L'intervallo di timeout può essere da 0 a 10 secondi.</span><span class="sxs-lookup"><span data-stu-id="cd184-371">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="cd184-372">Il valore predefinito è 500 millisecondi.</span><span class="sxs-lookup"><span data-stu-id="cd184-372">The default is 500 milliseconds.</span></span>  
  
 <span data-ttu-id="cd184-373">Per impostare l'intervallo di timeout per l'input non ambiguo, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-373">To set the timeout interval for unambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cd184-374">Questa proprietà è impostata su un valore inferiore a 0 secondi o maggiore di 10 secondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-374">This property is set to less than 0 seconds or greater than 10 seconds.</span>
          </span>
        </exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Grammars">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt; Grammars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.Grammar&gt; Grammars" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammars As ReadOnlyCollection(Of Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ Grammars { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-375">Ottiene una raccolta di oggetti <see cref="T:System.Speech.Recognition.Grammar" /> caricati in questa istanza di <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-375">Gets a collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that are loaded in this <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd184-376">Raccolta di oggetti <see cref="T:System.Speech.Recognition.Grammar" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-376">The collection of <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd184-377">Nell'esempio seguente genera informazioni nella console per ogni grammatica di riconoscimento vocale attualmente caricata da un riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-377">The following example outputs information to the console for each speech recognition grammar that is currently loaded by a speech recognizer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cd184-378">Copiare la raccolta di grammatica per evitare errori se la raccolta viene modificata mentre questo metodo enumera gli elementi della raccolta.</span><span class="sxs-lookup"><span data-stu-id="cd184-378">Copy the grammar collection to avoid errors if the collection is modified while this method enumerates the elements of the collection.</span></span>  
  
```csharp  
  
private static void ListGrammars(SpeechRecognitionEngine recognizer)  
{  
  string qualifier;  
  List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
  foreach (Grammar g in grammars)  
  {  
    qualifier = (g.Enabled) ? "enabled" : "disabled";  
  
    Console.WriteLine("Grammar {0} is loaded and is {1}.",  
      g.Name, qualifier);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="InitialSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan InitialSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan InitialSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan InitialSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-379">Ottiene o imposta l'intervallo di tempo durante il quale <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accetta input contenente solo silenzio, prima di completare il riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-379">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only silence before finalizing recognition.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd184-380">La durata dell'intervallo di silenzio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-380">The duration of the interval of silence.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-381">Ogni riconoscimento vocale è disponibile un algoritmo per distinguere tra vocale e di inattività.</span><span class="sxs-lookup"><span data-stu-id="cd184-381">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="cd184-382">Se l'input per il riconoscimento è inattività durante il periodo di timeout di inattività iniziale, il riconoscimento completa l'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-382">If the recognizer input is silence during the initial silence timeout period, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="cd184-383">Per le operazioni asincrone di riconoscimento e l'emulazione, genera il riconoscimento di <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento, in cui il <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> proprietà è `true`e <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> proprietà è `null`.</span><span class="sxs-lookup"><span data-stu-id="cd184-383">For asynchronous recognition operations and emulation, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="cd184-384">Per le operazioni di riconoscimento sincrono e l'emulazione, restituisce il riconoscimento `null`, anziché un valore valido <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="cd184-384">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="cd184-385">Se l'intervallo di timeout di inattività iniziale è impostato su 0, il riconoscimento non in grado di eseguire un controllo di timeout di inattività iniziale.</span><span class="sxs-lookup"><span data-stu-id="cd184-385">If the initial silence timeout interval is set to 0, the recognizer does not perform an initial silence timeout check.</span></span> <span data-ttu-id="cd184-386">L'intervallo di timeout può essere qualsiasi valore non negativo.</span><span class="sxs-lookup"><span data-stu-id="cd184-386">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="cd184-387">Il valore predefinito è 0 secondi.</span><span class="sxs-lookup"><span data-stu-id="cd184-387">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-388">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale base.</span><span class="sxs-lookup"><span data-stu-id="cd184-388">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="cd184-389">Nell'esempio viene impostata la <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> le proprietà di un <xref:System.Speech.Recognition.SpeechRecognitionEngine> prima di avviare il riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-389">The example sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="cd184-390">Gestori per il riconoscimento vocale <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> gli eventi di output delle informazioni di evento nella console per dimostrare come <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> le proprietà di un <xref:System.Speech.Recognition.SpeechRecognitionEngine> tali proprietà influiscono sulle operazioni di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-390">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> properties affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder..  
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cd184-391">Questa proprietà è impostata su un valore minore di 0 secondi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-391">This property is set to less than 0 seconds.</span>
          </span>
        </exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="InstalledRecognizers">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstalledRecognizers () As ReadOnlyCollection(Of RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizerInfo ^&gt; ^ InstalledRecognizers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cd184-392">Restituisce informazioni per tutti sistemi di riconoscimento vocale installati nel sistema corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-392">Returns information for all of the installed speech recognizers on the current system.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd184-393">Raccolta di sola lettura di oggetti <see cref="T:System.Speech.Recognition.RecognizerInfo" /> che descrive i riconoscitori installati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-393">A read-only collection of the <see cref="T:System.Speech.Recognition.RecognizerInfo" /> objects that describe the installed recognizers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-394">Per ottenere informazioni sul riconoscimento corrente, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-394">To get information about the current recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-395">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale base.</span><span class="sxs-lookup"><span data-stu-id="cd184-395">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="cd184-396">Nell'esempio viene utilizzata la raccolta restituita dal <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> metodo per trovare un riconoscimento vocale che supporta la lingua inglese.</span><span class="sxs-lookup"><span data-stu-id="cd184-396">The example uses the collection returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method to find a speech recognizer that supports the English language.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammar">
      <MemberSignature Language="C#" Value="public void LoadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">
          <span data-ttu-id="cd184-397">L'oggetto di grammatica da caricare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-397">The grammar object to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-398">Carica un oggetto <see cref="T:System.Speech.Recognition.Grammar" /> in modo sincrono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-398">Synchronously loads a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-399">Il riconoscimento genera un'eccezione se il <xref:System.Speech.Recognition.Grammar> oggetto è già stato caricato, viene caricato in modo asincrono o non è riuscito a caricare qualsiasi tipo di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-399">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="cd184-400">Non è possibile caricare lo stesso <xref:System.Speech.Recognition.Grammar> oggetto in più istanze di <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span><span class="sxs-lookup"><span data-stu-id="cd184-400">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="cd184-401">In alternativa, creare un nuovo <xref:System.Speech.Recognition.Grammar> per ciascun <xref:System.Speech.Recognition.SpeechRecognitionEngine> istanza.</span><span class="sxs-lookup"><span data-stu-id="cd184-401">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="cd184-402">Se il riconoscimento è in esecuzione, le applicazioni devono utilizzare <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> per sospendere il motore di riconoscimento vocale prima di caricamento, scaricamento, abilitazione o disabilitazione di una grammatica.</span><span class="sxs-lookup"><span data-stu-id="cd184-402">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="cd184-403">Quando si carica una grammatica, viene abilitato per impostazione predefinita.</span><span class="sxs-lookup"><span data-stu-id="cd184-403">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="cd184-404">Per disabilitare una grammatica caricata, utilizzare il <xref:System.Speech.Recognition.Grammar.Enabled%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-404">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="cd184-405">Per caricare un <xref:System.Speech.Recognition.Grammar> in modo asincrono, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-405">To load a <xref:System.Speech.Recognition.Grammar> object asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-406">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale base.</span><span class="sxs-lookup"><span data-stu-id="cd184-406">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="cd184-407">Nell'esempio viene creato un <xref:System.Speech.Recognition.DictationGrammar> e li carica in un riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-407">The example creates a <xref:System.Speech.Recognition.DictationGrammar> and loads it into a speech recognizer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-408">
            <paramref name="Grammar" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-408">
              <paramref name="Grammar" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cd184-409">
            <paramref name="Grammar" /> non è uno stato valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-409">
              <paramref name="Grammar" /> is not in a valid state.</span>
          </span>
        </exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarAsync">
      <MemberSignature Language="C#" Value="public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammarAsync(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammarAsync(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">
          <span data-ttu-id="cd184-410">La grammatica di riconoscimento vocale da caricare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-410">The speech recognition grammar to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-411">Carica in modo asincrono una grammatica di riconoscimento vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-411">Asynchronously loads a speech recognition grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-412">Quando il riconoscimento viene completato il caricamento un <xref:System.Speech.Recognition.Grammar> dell'oggetto, viene generato un <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-412">When the recognizer completes loading a <xref:System.Speech.Recognition.Grammar> object, it raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> event.</span></span> <span data-ttu-id="cd184-413">Il riconoscimento genera un'eccezione se il <xref:System.Speech.Recognition.Grammar> oggetto è già stato caricato, viene caricato in modo asincrono o non è riuscito a caricare qualsiasi tipo di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-413">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="cd184-414">Non è possibile caricare lo stesso <xref:System.Speech.Recognition.Grammar> oggetto in più istanze di <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span><span class="sxs-lookup"><span data-stu-id="cd184-414">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="cd184-415">In alternativa, creare un nuovo <xref:System.Speech.Recognition.Grammar> per ciascun <xref:System.Speech.Recognition.SpeechRecognitionEngine> istanza.</span><span class="sxs-lookup"><span data-stu-id="cd184-415">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="cd184-416">Se il riconoscimento è in esecuzione, le applicazioni devono utilizzare <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> per sospendere il motore di riconoscimento vocale prima di caricamento, scaricamento, abilitazione o disabilitazione di una grammatica.</span><span class="sxs-lookup"><span data-stu-id="cd184-416">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="cd184-417">Quando si carica una grammatica, viene abilitato per impostazione predefinita.</span><span class="sxs-lookup"><span data-stu-id="cd184-417">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="cd184-418">Per disabilitare una grammatica caricata, utilizzare il <xref:System.Speech.Recognition.Grammar.Enabled%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-418">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="cd184-419">Per caricare una grammatica di riconoscimento vocale in modo sincrono, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-419">To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-420">
            <paramref name="Grammar" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-420">
              <paramref name="Grammar" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cd184-421">
            <paramref name="Grammar" /> non è uno stato valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-421">
              <paramref name="Grammar" /> is not in a valid state.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="cd184-422">Operazione asincrona annullata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-422">The asynchronous operation was canceled.</span>
          </span>
        </exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadGrammarCompleted As EventHandler(Of LoadGrammarCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::LoadGrammarCompletedEventArgs ^&gt; ^ LoadGrammarCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-423">Generato quando <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> termina il caricamento asincrono di un oggetto <see cref="T:System.Speech.Recognition.Grammar" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-423">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finishes the asynchronous loading of a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-424">Il riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> metodo inizia un'operazione asincrona.</span><span class="sxs-lookup"><span data-stu-id="cd184-424">The recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method initiates an asynchronous operation.</span></span> <span data-ttu-id="cd184-425">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine> genera questo evento quando viene completato l'operazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-425">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it completes the operation.</span></span> <span data-ttu-id="cd184-426">Per ottenere il <xref:System.Speech.Recognition.Grammar> oggetto caricato il riconoscimento, usare il <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> proprietà dell'oggetto associato <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="cd184-426">To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span></span> <span data-ttu-id="cd184-427">Per ottenere l'oggetto corrente <xref:System.Speech.Recognition.Grammar> oggetti ha caricato il riconoscimento, usare il riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-427">To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
 <span data-ttu-id="cd184-428">Se il riconoscimento è in esecuzione, le applicazioni devono utilizzare <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> per sospendere il motore di riconoscimento vocale prima di caricamento, scaricamento, abilitazione o disabilitazione di una grammatica.</span><span class="sxs-lookup"><span data-stu-id="cd184-428">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="cd184-429">Quando si crea un delegato <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted>, si identifica il metodo che gestirà l'evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-429">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="cd184-430">Per associare l'evento al gestore eventi in uso, aggiungere all'evento un'istanza del delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-430">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="cd184-431">Il gestore eventi viene chiamato ogni volta che si verifica l'evento, a meno che non venga rimosso il delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-431">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="cd184-432">Per ulteriori informazioni sui delegati del gestore eventi, vedere [eventi e delegati](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="cd184-432">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-433">Nell'esempio seguente crea un riconoscimento vocale in-process e quindi crea due tipi di grammatiche per il riconoscimento delle parole specifiche e per l'accettazione di dettatura disponibile.</span><span class="sxs-lookup"><span data-stu-id="cd184-433">The following example creates an in-process speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="cd184-434">Nell'esempio si costruisce un <xref:System.Speech.Recognition.Grammar> oggetto da ogni le grammatiche di riconoscimento vocale completata, quindi carica in modo asincrono il <xref:System.Speech.Recognition.Grammar> oggetti per il <xref:System.Speech.Recognition.SpeechRecognitionEngine> istanza.</span><span class="sxs-lookup"><span data-stu-id="cd184-434">The example constructs a <xref:System.Speech.Recognition.Grammar> object from each of the completed speech recognition grammars, then asynchronously loads the <xref:System.Speech.Recognition.Grammar> objects to the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span> <span data-ttu-id="cd184-435">Gestori per il riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> eventi scrive nella console il nome del <xref:System.Speech.Recognition.Grammar> oggetto utilizzato per eseguire il riconoscimento e il testo del risultato del riconoscimento, rispettivamente.</span><span class="sxs-lookup"><span data-stu-id="cd184-435">Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events write to the console the name of the <xref:System.Speech.Recognition.Grammar> object that was used to perform the recognition and the text of the recognition result, respectively.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and set its input.  
      recognizer = new SpeechRecognitionEngine();  
      recognizer.SetInputToDefaultAudioDevice();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted +=  
        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Create the "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yeah" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "neah" });  
      SemanticResultValue noValue =  
          new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create the "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create a dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Start asynchronous, continuous recognition.  
      recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      </Docs>
    </Member>
    <Member MemberName="MaxAlternates">
      <MemberSignature Language="C#" Value="public int MaxAlternates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAlternates As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAlternates { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-436">Ottiene o imposta il numero massimo di risultati del riconoscimento alternativi che <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> restituisce per ogni operazione di riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-436">Gets or sets the maximum number of alternate recognition results that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> returns for each recognition operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd184-437">Il numero di risultati alternativi da restituire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-437">The number of alternate results to return.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-438">Il <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> proprietà del <xref:System.Speech.Recognition.RecognitionResult> classe contiene la raccolta di <xref:System.Speech.Recognition.RecognizedPhrase> gli oggetti che rappresentano le interpretazioni possibili dell'input.</span><span class="sxs-lookup"><span data-stu-id="cd184-438">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent possible interpretations of the input.</span></span>  
  
 <span data-ttu-id="cd184-439">Il valore predefinito per <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> è 10.</span><span class="sxs-lookup"><span data-stu-id="cd184-439">The default value for <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> is 10.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cd184-440">La proprietà <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> è impostata su un valore minore di 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-440">
              <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> is set to a value less than 0.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      </Docs>
    </Member>
    <Member MemberName="QueryRecognizerSetting">
      <MemberSignature Language="C#" Value="public object QueryRecognizerSetting (string settingName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object QueryRecognizerSetting(string settingName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function QueryRecognizerSetting (settingName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ QueryRecognizerSetting(System::String ^ settingName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName">
          <span data-ttu-id="cd184-441">Nome dell'impostazione da restituire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-441">The name of the setting to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-442">Restituisce i valori delle impostazioni per il riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-442">Returns the values of settings for the recognizer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd184-443">Valore dell'impostazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-443">The value of the setting.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-444">Le impostazioni per il riconoscimento possono contenere una stringa, intero a 64 bit o dati di indirizzo di memoria.</span><span class="sxs-lookup"><span data-stu-id="cd184-444">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="cd184-445">Nella tabella seguente vengono descritte le impostazioni definite per un riconoscimento vocale API di Microsoft (SAPI)-riconoscimento conformo.</span><span class="sxs-lookup"><span data-stu-id="cd184-445">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="cd184-446">Le seguenti impostazioni devono avere lo stesso intervallo per ogni riconoscimento che supporta l'impostazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-446">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="cd184-447">Un riconoscimento conformi SAPI non è necessario per supportare queste impostazioni e può supportare altre impostazioni.</span><span class="sxs-lookup"><span data-stu-id="cd184-447">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="cd184-448">nome</span><span class="sxs-lookup"><span data-stu-id="cd184-448">Name</span></span>|<span data-ttu-id="cd184-449">Descrizione</span><span class="sxs-lookup"><span data-stu-id="cd184-449">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="cd184-450">Specifica l'utilizzo della CPU del riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-450">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="cd184-451">L'intervallo è compreso tra 0 e 100.</span><span class="sxs-lookup"><span data-stu-id="cd184-451">The range is from 0 to 100.</span></span> <span data-ttu-id="cd184-452">Il valore predefinito è 50.</span><span class="sxs-lookup"><span data-stu-id="cd184-452">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="cd184-453">Indica la lunghezza di inattività alla fine dell'input non ambiguo prima che il riconoscimento vocale viene completata un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-453">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="cd184-454">L'intervallo è compreso tra 0 e 10.000 millisecondi (ms).</span><span class="sxs-lookup"><span data-stu-id="cd184-454">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="cd184-455">Questa impostazione corrisponde al riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-455">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  <span data-ttu-id="cd184-456">Predefinito = 150 ms.</span><span class="sxs-lookup"><span data-stu-id="cd184-456">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="cd184-457">Indica la lunghezza di inattività alla fine dell'input ambiguo prima che il riconoscimento vocale viene completata un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-457">Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="cd184-458">L'intervallo è compreso tra 0 e 10.000 ms.</span><span class="sxs-lookup"><span data-stu-id="cd184-458">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="cd184-459">Questa impostazione corrisponde al riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-459">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="cd184-460">Predefinito = 500ms.</span><span class="sxs-lookup"><span data-stu-id="cd184-460">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="cd184-461">Indica se l'adattamento del modello acustico è ON (valore = `1`) o OFF (valore = `0`).</span><span class="sxs-lookup"><span data-stu-id="cd184-461">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="cd184-462">Il valore predefinito è `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="cd184-462">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="cd184-463">Indica se l'adattamento è ON (valore = `1`) o OFF (valore = `0`), e viene mantenuta l'impostazione del Registro di sistema.</span><span class="sxs-lookup"><span data-stu-id="cd184-463">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="cd184-464">Il valore predefinito è `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="cd184-464">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="cd184-465">Per aggiornare un'impostazione per il riconoscimento, utilizzare uno del <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-465">To update a setting for the recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-466">Nell'esempio seguente fa parte di un'applicazione console che restituisce i valori per un numero di impostazioni definite per il riconoscimento che supporta le impostazioni locali en-US.</span><span class="sxs-lookup"><span data-stu-id="cd184-466">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="cd184-467">L'esempio genera l'output seguente.</span><span class="sxs-lookup"><span data-stu-id="cd184-467">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation"  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        foreach (string setting in settings)  
        {  
          try  
          {  
            object value = recognizer.QueryRecognizerSetting(setting);  
            Console.WriteLine("  {0,-30} = {1}", setting, value);  
          }  
          catch  
          {  
            Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
              setting);  
          }  
        }  
      }  
      Console.WriteLine();  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-468">
            <paramref name="settingName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-468">
              <paramref name="settingName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd184-469">
            <paramref name="settingName" /> è la stringa vuota ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-469">
              <paramref name="settingName" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="cd184-470">Il riconoscimento non ha un'impostazione con tale nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-470">The recognizer does not have a setting by that name.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Recognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-471">Avvia un'operazione sincrona di riconoscimento vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-471">Starts a synchronous speech recognition operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-472">Questi metodi eseguono un'operazione di riconoscimento sincrono, singolo.</span><span class="sxs-lookup"><span data-stu-id="cd184-472">These methods perform a single, synchronous recognition operation.</span></span> <span data-ttu-id="cd184-473">Il riconoscimento esegue questa operazione su relativo grammatiche di riconoscimento vocale caricati e abilitati.</span><span class="sxs-lookup"><span data-stu-id="cd184-473">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="cd184-474">Durante una chiamata a questo metodo, il riconoscimento può generare gli eventi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-474">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="cd184-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="cd184-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="cd184-476">Generato quando il riconoscimento rileva l'input che è possibile identificare come riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-476">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="cd184-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="cd184-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="cd184-478">Generato quando l'input viene creata una corrispondenza ambigua con una delle grammatiche attive.</span><span class="sxs-lookup"><span data-stu-id="cd184-478">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="cd184-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="cd184-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="cd184-480">Generato quando il riconoscimento completa un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-480">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="cd184-481">Il riconoscimento non genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento quando si utilizza uno del <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-481">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 <span data-ttu-id="cd184-482">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> i metodi restituiscono un <xref:System.Speech.Recognition.RecognitionResult> oggetto, o `null` se l'operazione non è riuscita o non è abilitato il riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-482">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods return a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful or the recognizer is not enabled.</span></span>  
  
 <span data-ttu-id="cd184-483">Un'operazione di riconoscimento sincrono può non riuscire per i motivi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-483">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="cd184-484">Riconoscimento vocale non viene rilevato prima della scadono gli intervalli di timeout per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> , proprietà o per il `initialSilenceTimeout` parametro del <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="cd184-484">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties, or for the `initialSilenceTimeout` parameter of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> method.</span></span>  
  
-   <span data-ttu-id="cd184-485">Il motore di riconoscimento vocale rileva, ma non trova corrispondenze in uno dei relativi caricati e abilitati <xref:System.Speech.Recognition.Grammar> oggetti.</span><span class="sxs-lookup"><span data-stu-id="cd184-485">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="cd184-486">Per modificare la modalità di gestione dei tempi di inattività rispetto al riconoscimento o di riconoscimento vocale il riconoscimento, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-486">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="cd184-487">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine> deve avere almeno un <xref:System.Speech.Recognition.Grammar> oggetto caricato prima di eseguire il riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-487">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="cd184-488">Per caricare una grammatica di riconoscimento vocale, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-488">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="cd184-489">Per eseguire il riconoscimento asincrono, utilizzare uno del <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-489">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize () As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cd184-490">Effettua un'operazione sincrona di riconoscimento vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-490">Performs a synchronous speech recognition operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd184-491">Il risultato di riconoscimento per l'input, o <see langword="null" /> se l'operazione non riesce o il riconoscimento non è abilitato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-491">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-492">Questo metodo esegue un'operazione di riconoscimento singolo.</span><span class="sxs-lookup"><span data-stu-id="cd184-492">This method performs a single recognition operation.</span></span> <span data-ttu-id="cd184-493">Il riconoscimento esegue questa operazione su relativo grammatiche di riconoscimento vocale caricati e abilitati.</span><span class="sxs-lookup"><span data-stu-id="cd184-493">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="cd184-494">Durante una chiamata a questo metodo, il riconoscimento può generare gli eventi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-494">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="cd184-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="cd184-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="cd184-496">Generato quando il riconoscimento rileva l'input che è possibile identificare come riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-496">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="cd184-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="cd184-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="cd184-498">Generato quando l'input viene creata una corrispondenza ambigua con una delle grammatiche attive.</span><span class="sxs-lookup"><span data-stu-id="cd184-498">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="cd184-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="cd184-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="cd184-500">Generato quando il riconoscimento completa un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-500">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="cd184-501">Il riconoscimento non genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento quando si utilizza questo metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-501">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="cd184-502">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> metodo restituisce un <xref:System.Speech.Recognition.RecognitionResult> oggetto, o `null` se l'operazione non è riuscita.</span><span class="sxs-lookup"><span data-stu-id="cd184-502">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="cd184-503">Un'operazione di riconoscimento sincrono può non riuscire per i motivi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-503">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="cd184-504">Riconoscimento vocale non viene rilevato prima della scadono gli intervalli di timeout per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-504">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="cd184-505">Il motore di riconoscimento vocale rileva, ma non trova corrispondenze in uno dei relativi caricati e abilitati <xref:System.Speech.Recognition.Grammar> oggetti.</span><span class="sxs-lookup"><span data-stu-id="cd184-505">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="cd184-506">Per eseguire il riconoscimento asincrono, utilizzare uno del <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-506">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-507">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale base.</span><span class="sxs-lookup"><span data-stu-id="cd184-507">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="cd184-508">Nell'esempio viene creato un <xref:System.Speech.Recognition.DictationGrammar>, li carica in un riconoscimento vocale in-process ed esegue un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-508">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Modify the initial silence time-out value.  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5);  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize();  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize (TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize(valuetype System.TimeSpan initialSilenceTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize (initialSilenceTimeout As TimeSpan) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize(TimeSpan initialSilenceTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialSilenceTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="initialSilenceTimeout">
          <span data-ttu-id="cd184-509">L'intervallo di tempo in cui un riconoscimento vocale accetta l'input contenente solo il silenzio prima di finalizzare il riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-509">The interval of time a speech recognizer accepts input containing only silence before finalizing recognition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-510">Effettua un'operazione sincrona di riconoscimento vocale con un periodo di timeout di inattività iniziale specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-510">Performs a synchronous speech recognition operation with a specified initial silence timeout period.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd184-511">Il risultato di riconoscimento per l'input, o <see langword="null" /> se l'operazione non riesce o il riconoscimento non è abilitato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-511">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-512">Se il motore di riconoscimento vocale rileva vocale entro l'intervallo di tempo specificato da `initialSilenceTimeout` argomento, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> esegue un'operazione di riconoscimento singolo e quindi termina.</span><span class="sxs-lookup"><span data-stu-id="cd184-512">If the speech recognition engine detects speech within the time interval specified by `initialSilenceTimeout` argument, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> performs a single recognition operation and then terminates.</span></span>  <span data-ttu-id="cd184-513">Il `initialSilenceTimeout` parametro sostituisce il riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-513">The `initialSilenceTimeout` parameter supersedes the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> property.</span></span>  
  
 <span data-ttu-id="cd184-514">Durante una chiamata a questo metodo, il riconoscimento può generare gli eventi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-514">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="cd184-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="cd184-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="cd184-516">Generato quando il riconoscimento rileva l'input che è possibile identificare come riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-516">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="cd184-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="cd184-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="cd184-518">Generato quando l'input viene creata una corrispondenza ambigua con una delle grammatiche attive.</span><span class="sxs-lookup"><span data-stu-id="cd184-518">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="cd184-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="cd184-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="cd184-520">Generato quando il riconoscimento completa un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-520">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="cd184-521">Il riconoscimento non genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento quando si utilizza questo metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-521">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="cd184-522">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> metodo restituisce un <xref:System.Speech.Recognition.RecognitionResult> oggetto, o `null` se l'operazione non è riuscita.</span><span class="sxs-lookup"><span data-stu-id="cd184-522">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="cd184-523">Un'operazione di riconoscimento sincrono può non riuscire per i motivi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-523">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="cd184-524">Riconoscimento vocale non viene rilevato prima della scadono gli intervalli di timeout per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> o per il `initialSilenceTimeout` parametro.</span><span class="sxs-lookup"><span data-stu-id="cd184-524">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or for the `initialSilenceTimeout` parameter.</span></span>  
  
-   <span data-ttu-id="cd184-525">Il motore di riconoscimento vocale rileva, ma non trova corrispondenze in uno dei relativi caricati e abilitati <xref:System.Speech.Recognition.Grammar> oggetti.</span><span class="sxs-lookup"><span data-stu-id="cd184-525">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="cd184-526">Per eseguire il riconoscimento asincrono, utilizzare uno del <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-526">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-527">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale base.</span><span class="sxs-lookup"><span data-stu-id="cd184-527">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="cd184-528">Nell'esempio viene creato un <xref:System.Speech.Recognition.DictationGrammar>, li carica in un riconoscimento vocale in-process ed esegue un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-528">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize(TimeSpan.FromSeconds(5));  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-529">Avvia un'operazione asincrona di riconoscimento vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-529">Starts an asynchronous speech recognition operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-530">Questi metodi eseguono uno o più operazioni asincrone di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-530">These methods perform single or multiple, asynchronous recognition operations.</span></span> <span data-ttu-id="cd184-531">Il riconoscimento esegue ogni operazione su relativo grammatiche di riconoscimento vocale caricati e abilitati.</span><span class="sxs-lookup"><span data-stu-id="cd184-531">The recognizer performs each operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="cd184-532">Durante una chiamata a questo metodo, il riconoscimento può generare gli eventi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-532">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="cd184-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="cd184-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="cd184-534">Generato quando il riconoscimento rileva l'input che è possibile identificare come riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-534">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="cd184-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="cd184-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="cd184-536">Generato quando l'input viene creata una corrispondenza ambigua con una delle grammatiche attive.</span><span class="sxs-lookup"><span data-stu-id="cd184-536">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="cd184-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="cd184-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="cd184-538">Generato quando il riconoscimento completa un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-538">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="cd184-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="cd184-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="cd184-540">Eccezione generata quando un <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> al termine dell'operazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-540">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="cd184-541">Per recuperare il risultato di un'operazione asincrona di riconoscimento, collegare un gestore eventi per il riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-541">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="cd184-542">Il riconoscimento ha generato l'evento ogni volta che completata correttamente un'operazione di riconoscimento sincrono o asincrono.</span><span class="sxs-lookup"><span data-stu-id="cd184-542">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="cd184-543">Se il riconoscimento non è stato completato la <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> proprietà <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> oggetto, che è possibile accedere nel gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento, saranno `null`.</span><span class="sxs-lookup"><span data-stu-id="cd184-543">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="cd184-544">Un'operazione asincrona di riconoscimento può non riuscire per i motivi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-544">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="cd184-545">Riconoscimento vocale non viene rilevato prima della scadono gli intervalli di timeout per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-545">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="cd184-546">Il motore di riconoscimento vocale rileva, ma non trova corrispondenze in uno dei relativi caricati e abilitati <xref:System.Speech.Recognition.Grammar> oggetti.</span><span class="sxs-lookup"><span data-stu-id="cd184-546">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
-   <span data-ttu-id="cd184-547">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine> deve avere almeno un <xref:System.Speech.Recognition.Grammar> oggetto caricato prima di eseguire il riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-547">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="cd184-548">Per caricare una grammatica di riconoscimento vocale, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-548">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="cd184-549">Per modificare la modalità di gestione dei tempi di inattività rispetto al riconoscimento o di riconoscimento vocale il riconoscimento, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-549">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="cd184-550">Per eseguire il riconoscimento sincrono, utilizzare uno del <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-550">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cd184-551">Effettua un'unica operazione asincrona di riconoscimento vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-551">Performs a single, asynchronous speech recognition operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-552">Questo metodo esegue un'operazione asincrona di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-552">This method performs a single, asynchronous recognition operation.</span></span> <span data-ttu-id="cd184-553">Il riconoscimento esegue l'operazione relativa grammatiche di riconoscimento vocale caricati e abilitati.</span><span class="sxs-lookup"><span data-stu-id="cd184-553">The recognizer performs the operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="cd184-554">Durante una chiamata a questo metodo, il riconoscimento può generare gli eventi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-554">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="cd184-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="cd184-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="cd184-556">Generato quando il riconoscimento rileva l'input che è possibile identificare come riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-556">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="cd184-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="cd184-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="cd184-558">Generato quando l'input viene creata una corrispondenza ambigua con una delle grammatiche attive.</span><span class="sxs-lookup"><span data-stu-id="cd184-558">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="cd184-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="cd184-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="cd184-560">Generato quando il riconoscimento completa un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-560">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="cd184-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="cd184-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="cd184-562">Eccezione generata quando un <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> al termine dell'operazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-562">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="cd184-563">Per recuperare il risultato di un'operazione asincrona di riconoscimento, collegare un gestore eventi per il riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-563">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="cd184-564">Il riconoscimento ha generato l'evento ogni volta che completata correttamente un'operazione di riconoscimento sincrono o asincrono.</span><span class="sxs-lookup"><span data-stu-id="cd184-564">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="cd184-565">Se il riconoscimento non è stato completato la <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> proprietà <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> oggetto, che è possibile accedere nel gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento, saranno `null`.</span><span class="sxs-lookup"><span data-stu-id="cd184-565">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="cd184-566">Per eseguire il riconoscimento sincrono, utilizzare uno del <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-566">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-567">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale asincrona di base.</span><span class="sxs-lookup"><span data-stu-id="cd184-567">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="cd184-568">Nell'esempio viene creato un <xref:System.Speech.Recognition.DictationGrammar>, li carica in un riconoscimento vocale in-process e che esegue un'operazione asincrona di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-568">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one asynchronous recognition operation.</span></span> <span data-ttu-id="cd184-569">I gestori di eventi sono inclusi per illustrare gli eventi generati durante l'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-569">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[]   
        { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start an asynchronous  
        // recognition operation.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync (System.Speech.Recognition.RecognizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync(valuetype System.Speech.Recognition.RecognizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync (mode As RecognizeMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync(System::Speech::Recognition::RecognizeMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Speech.Recognition.RecognizeMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="cd184-570">Indica se eseguire una o più operazioni di riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-570">Indicates whether to perform one or multiple recognition operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-571">Effettua una o più operazioni asincrone di riconoscimento vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-571">Performs one or more asynchronous speech recognition operations.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-572">Se `mode` è <xref:System.Speech.Recognition.RecognizeMode.Multiple>, il riconoscimento continua l'esecuzione di operazioni asincrone riconoscimento fino a quando il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="cd184-572">If `mode` is <xref:System.Speech.Recognition.RecognizeMode.Multiple>, the recognizer continues performing asynchronous recognition operations until the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method is called.</span></span>  
  
 <span data-ttu-id="cd184-573">Durante una chiamata a questo metodo, il riconoscimento può generare gli eventi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-573">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="cd184-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="cd184-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="cd184-575">Generato quando il riconoscimento rileva l'input che è possibile identificare come riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-575">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="cd184-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="cd184-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="cd184-577">Generato quando l'input viene creata una corrispondenza ambigua con una delle grammatiche attive.</span><span class="sxs-lookup"><span data-stu-id="cd184-577">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="cd184-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="cd184-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="cd184-579">Generato quando il riconoscimento completa un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-579">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="cd184-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="cd184-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="cd184-581">Eccezione generata quando un <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> al termine dell'operazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-581">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="cd184-582">Per recuperare il risultato di un'operazione asincrona di riconoscimento, collegare un gestore eventi per il riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-582">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="cd184-583">Il riconoscimento ha generato l'evento ogni volta che completata correttamente un'operazione di riconoscimento sincrono o asincrono.</span><span class="sxs-lookup"><span data-stu-id="cd184-583">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="cd184-584">Se il riconoscimento non è stato completato la <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> proprietà <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> oggetto, che è possibile accedere nel gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento, saranno `null`.</span><span class="sxs-lookup"><span data-stu-id="cd184-584">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="cd184-585">Un'operazione asincrona di riconoscimento può non riuscire per i motivi seguenti:</span><span class="sxs-lookup"><span data-stu-id="cd184-585">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="cd184-586">Riconoscimento vocale non viene rilevato prima della scadono gli intervalli di timeout per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-586">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="cd184-587">Il motore di riconoscimento vocale rileva, ma non trova corrispondenze in uno dei relativi caricati e abilitati <xref:System.Speech.Recognition.Grammar> oggetti.</span><span class="sxs-lookup"><span data-stu-id="cd184-587">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="cd184-588">Per eseguire il riconoscimento sincrono, utilizzare uno del <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-588">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-589">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale asincrona di base.</span><span class="sxs-lookup"><span data-stu-id="cd184-589">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="cd184-590">Nell'esempio viene creato un <xref:System.Speech.Recognition.DictationGrammar>, li carica in un riconoscimento vocale in-process e vengono eseguite più operazioni asincrone di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-590">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs multiple asynchronous recognition operations.</span></span> <span data-ttu-id="cd184-591">Le operazioni asincrone vengono annullate dopo 30 secondi.</span><span class="sxs-lookup"><span data-stu-id="cd184-591">The asynchronous operations are cancelled after 30 seconds.</span></span> <span data-ttu-id="cd184-592">I gestori di eventi sono inclusi per illustrare gli eventi generati durante l'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-592">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[] { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start asynchronous  
        // recognition.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 30 seconds, and then cancel asynchronous recognition.  
        Thread.Sleep(TimeSpan.FromSeconds(30));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncCancel">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncCancel();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cd184-593">Termina il riconoscimento asincrono senza attendere il completamento dell'operazione di riconoscimento corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-593">Terminates asynchronous recognition without waiting for the current recognition operation to complete.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-594">Questo metodo completa immediatamente riconoscimento asincrono.</span><span class="sxs-lookup"><span data-stu-id="cd184-594">This method immediately finalizes asynchronous recognition.</span></span> <span data-ttu-id="cd184-595">Se l'operazione di riconoscimento asincrona corrente riceve input, l'input viene troncato e il completamento dell'operazione con l'input esistente.</span><span class="sxs-lookup"><span data-stu-id="cd184-595">If the current asynchronous recognition operation is receiving input, the input is truncated and the operation completes with the existing input.</span></span> <span data-ttu-id="cd184-596">Genera il riconoscimento di <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> evento quando viene annullata un'operazione asincrona e imposta il <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> proprietà del <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> a `true`.</span><span class="sxs-lookup"><span data-stu-id="cd184-596">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is canceled, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="cd184-597">Questo metodo annulla le operazioni asincrone avviate dal <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-597">This method cancels asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="cd184-598">Per arrestare il riconoscimento asincrono senza troncamento di input, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-598">To stop asynchronous recognition without truncating the input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-599">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra l'uso del <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-599">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span> <span data-ttu-id="cd184-600">L'esempio crea e carica una grammatica di riconoscimento vocale, avvia un'operazione di riconoscimento asincrona continua e quindi viene sospesa 2 secondi prima di annullare l'operazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-600">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it cancels the operation.</span></span> <span data-ttu-id="cd184-601">Il riconoscimento riceve l'input dal file c:\temp\audioinput\sample.wav.</span><span class="sxs-lookup"><span data-stu-id="cd184-601">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="cd184-602">I gestori di eventi sono inclusi per illustrare gli eventi generati durante l'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-602">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then cancel the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncStop">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncStop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncStop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cd184-603">Arresta il riconoscimento asincrono dopo che l'operazione di riconoscimento corrente è stata completata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-603">Stops asynchronous recognition after the current recognition operation completes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-604">Questo metodo completa il riconoscimento asincrono senza troncamento di input.</span><span class="sxs-lookup"><span data-stu-id="cd184-604">This method finalizes asynchronous recognition without truncating input.</span></span> <span data-ttu-id="cd184-605">Se l'operazione di riconoscimento asincrona corrente riceve input, il riconoscimento continua accettare input fino al completamento dell'operazione di riconoscimento corrente.</span><span class="sxs-lookup"><span data-stu-id="cd184-605">If the current asynchronous recognition operation is receiving input, the recognizer continues accepting input until the current recognition operation is completed.</span></span> <span data-ttu-id="cd184-606">Genera il riconoscimento di <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> evento quando un'operazione asincrona viene arrestata e imposta il <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> proprietà del <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> a `true`.</span><span class="sxs-lookup"><span data-stu-id="cd184-606">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is stopped, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="cd184-607">Questo metodo arresta le operazioni asincrone avviate dal <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-607">This method stops asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="cd184-608">Per annullare immediatamente riconoscimento asincrono con solo l'input esistente, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-608">To immediately cancel asynchronous recognition with only the existing input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-609">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra l'uso del <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-609">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span> <span data-ttu-id="cd184-610">L'esempio crea e carica una grammatica di riconoscimento vocale, avvia un'operazione di riconoscimento asincrona continua e quindi viene sospesa 2 secondi prima di interrompere l'operazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-610">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it stops the operation.</span></span> <span data-ttu-id="cd184-611">Il riconoscimento riceve l'input dal file c:\temp\audioinput\sample.wav.</span><span class="sxs-lookup"><span data-stu-id="cd184-611">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="cd184-612">I gestori di eventi sono inclusi per illustrare gli eventi generati durante l'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-612">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then stop the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncStop();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizeCompleted As EventHandler(Of RecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizeCompletedEventArgs ^&gt; ^ RecognizeCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-613">Generato quando <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> completa un'operazione di riconoscimento asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-613">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-614">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine> dell'oggetto <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> metodo inizia un'operazione asincrona di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-614">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method initiates an asynchronous recognition operation.</span></span> <span data-ttu-id="cd184-615">Quando il riconoscimento completa l'operazione asincrona, genera questo evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-615">When the recognizer finalizes the asynchronous operation, it raises this event.</span></span>  
  
 <span data-ttu-id="cd184-616">Utilizzando il gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento, è possibile accedere il <xref:System.Speech.Recognition.RecognitionResult> nel <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> oggetto.</span><span class="sxs-lookup"><span data-stu-id="cd184-616">Using the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, you can access the <xref:System.Speech.Recognition.RecognitionResult> in the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object.</span></span> <span data-ttu-id="cd184-617">Se il riconoscimento non è riuscito, <xref:System.Speech.Recognition.RecognitionResult> sarà `null`.</span><span class="sxs-lookup"><span data-stu-id="cd184-617">If recognition was not successful, <xref:System.Speech.Recognition.RecognitionResult> will be `null`.</span></span> <span data-ttu-id="cd184-618">Per determinare se un timeout o un'interruzione nel input audio ha causato il riconoscimento esito negativo, è possibile accedere alle proprietà per <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, o <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span><span class="sxs-lookup"><span data-stu-id="cd184-618">To determine whether a timeout or an interruption in audio input caused recognition to fail, you can access the properties for <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, or <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span></span>  
  
 <span data-ttu-id="cd184-619">Per ulteriori informazioni, vedere la classe <xref:System.Speech.Recognition.RecognizeCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="cd184-619">See the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> class for more information.</span></span>  
  
 <span data-ttu-id="cd184-620">Per ottenere informazioni dettagliate sui migliori candidati riconoscimento rifiutati, collegare un gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-620">To obtain details on the best rejected recognition candidates, attach a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event.</span></span>  
  
 <span data-ttu-id="cd184-621">Quando si crea un delegato <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>, si identifica il metodo che gestirà l'evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-621">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="cd184-622">Per associare l'evento al gestore eventi in uso, aggiungere all'evento un'istanza del delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-622">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="cd184-623">Il gestore eventi viene chiamato ogni volta che si verifica l'evento, a meno che non venga rimosso il delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-623">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="cd184-624">Per ulteriori informazioni sui delegati del gestore eventi, vedere [eventi e delegati](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="cd184-624">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-625">Nell'esempio seguente riconosce frasi, ad esempio "Visualizzare l'elenco degli artisti nella categoria jazz" o "Gospel album visualizzare".</span><span class="sxs-lookup"><span data-stu-id="cd184-625">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="cd184-626">Nell'esempio viene utilizzato un gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> evento per visualizzare informazioni sui risultati del riconoscimento nella console.</span><span class="sxs-lookup"><span data-stu-id="cd184-626">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event to display information about the results of recognition in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted, error occurred during recognition: {0}", e.Error);  
        return;  
      }  
  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
  
      if (e.Result != null)  
      {  
        Console.WriteLine("RecognizeCompleted:");  
        Console.WriteLine("  Grammar: " + e.Result.Grammar.Name);  
        Console.WriteLine("  Recognized text: " + e.Result.Text);  
        Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
        Console.WriteLine("  Audio position: " + e.AudioPosition);  
      }  
  
      else  
      {  
        Console.WriteLine("RecognizeCompleted: No result.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded:  " + e.Grammar.Name);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerAudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan RecognizerAudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RecognizerAudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerAudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan RecognizerAudioPosition { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-627">Ottiene la posizione corrente di <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> nell'input audio in fase di elaborazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-627">Gets the current location of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> in the audio input that it is processing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd184-628">La posizione del riconoscimento nell'input audio in fase di elaborazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-628">The position of the recognizer in the audio input that it is processing.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-629">La posizione audio è specifica per ogni riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-629">The audio position is specific to each speech recognizer.</span></span> <span data-ttu-id="cd184-630">Il valore zero di un flusso di input viene stabilito quando è abilitato.</span><span class="sxs-lookup"><span data-stu-id="cd184-630">The zero value of an input stream is established when it is enabled.</span></span>  
  
 <span data-ttu-id="cd184-631">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> riferimenti alle proprietà di <xref:System.Speech.Recognition.SpeechRecognitionEngine> la posizione dell'oggetto all'interno di input audio.</span><span class="sxs-lookup"><span data-stu-id="cd184-631">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's position within its audio input.</span></span> <span data-ttu-id="cd184-632">Al contrario, il <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> proprietà fa riferimento la posizione del dispositivo di input nel proprio flusso audio generato.</span><span class="sxs-lookup"><span data-stu-id="cd184-632">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="cd184-633">Queste posizioni possono essere diverse.</span><span class="sxs-lookup"><span data-stu-id="cd184-633">These positions can be different.</span></span> <span data-ttu-id="cd184-634">Ad esempio, se ha ricevuto il riconoscimento di input per i quali non ha ancora generato un risultato di riconoscimento, il valore del <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> proprietà è minore del valore del <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-634">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizerInfo RecognizerInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerInfo As RecognizerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerInfo ^ RecognizerInfo { System::Speech::Recognition::RecognizerInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-635">Ottiene informazioni sull'istanza corrente di <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-635">Gets information about the current instance of <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="cd184-636">Informazioni sul riconoscimento vocale corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-636">Information about the current speech recognizer.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-637">Per ottenere informazioni su tutti i tipi di riconoscimento vocale installata per il sistema corrente, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-637">To get information about all of the installed speech recognizers for the current system, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-638">Nell'esempio seguente ottiene un elenco parziale dei dati per il motore di riconoscimento vocale nel processo corrente.</span><span class="sxs-lookup"><span data-stu-id="cd184-638">The following example gets a partial list of data for the current in-process speech recognition engine.</span></span> <span data-ttu-id="cd184-639">Per ulteriori informazioni, vedere <xref:System.Speech.Recognition.RecognizerInfo>.</span><span class="sxs-lookup"><span data-stu-id="cd184-639">For more information, see <xref:System.Speech.Recognition.RecognizerInfo>.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace RecognitionEngine  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
        Console.WriteLine("Information for the current speech recognition engine:");  
        Console.WriteLine("  Name: {0}", recognizer.RecognizerInfo.Name);  
        Console.WriteLine("  Culture: {0}", recognizer.RecognizerInfo.Culture.ToString());  
        Console.WriteLine("  Description: {0}", recognizer.RecognizerInfo.Description);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerUpdateReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizerUpdateReached As EventHandler(Of RecognizerUpdateReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizerUpdateReachedEventArgs ^&gt; ^ RecognizerUpdateReached;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-640">Generato quando un oggetto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> in esecuzione viene sospeso per accettare le modifiche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-640">Raised when a running <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> pauses to accept modifications.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-641">Le applicazioni devono utilizzare <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> sospendere un'istanza in esecuzione di <xref:System.Speech.Recognition.SpeechRecognitionEngine> prima di modificare le impostazioni o dai relativi <xref:System.Speech.Recognition.Grammar> oggetti.</span><span class="sxs-lookup"><span data-stu-id="cd184-641">Applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine> before modifying its settings or its <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="cd184-642">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine> genera questo evento quando è pronto per accettare le modifiche.</span><span class="sxs-lookup"><span data-stu-id="cd184-642">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it is ready to accept modifications.</span></span>  
  
 <span data-ttu-id="cd184-643">Ad esempio, mentre il <xref:System.Speech.Recognition.SpeechRecognitionEngine> è sospesa, è possibile caricare, scaricare, abilitare e disabilitare <xref:System.Speech.Recognition.Grammar> oggetti e modificare i valori per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-643">For example, while the <xref:System.Speech.Recognition.SpeechRecognitionEngine> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties.</span></span> <span data-ttu-id="cd184-644">Per altre informazioni, vedere il metodo <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>.</span><span class="sxs-lookup"><span data-stu-id="cd184-644">For more information, see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 <span data-ttu-id="cd184-645">Quando si crea un delegato <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached>, si identifica il metodo che gestirà l'evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-645">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="cd184-646">Per associare l'evento al gestore eventi in uso, aggiungere all'evento un'istanza del delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-646">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="cd184-647">Il gestore eventi viene chiamato ogni volta che si verifica l'evento, a meno che non venga rimosso il delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-647">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="cd184-648">Per ulteriori informazioni sui delegati del gestore eventi, vedere [eventi e delegati](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="cd184-648">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-649">L'esempio seguente illustra un'applicazione console che carica e Scarica <xref:System.Speech.Recognition.Grammar> oggetti.</span><span class="sxs-lookup"><span data-stu-id="cd184-649">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="cd184-650">L'applicazione utilizza il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metodo per richiedere il motore di riconoscimento vocale per mettere in pausa per la ricezione di un aggiornamento.</span><span class="sxs-lookup"><span data-stu-id="cd184-650">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="cd184-651">L'applicazione quindi carica o scarica un <xref:System.Speech.Recognition.Grammar> oggetto.</span><span class="sxs-lookup"><span data-stu-id="cd184-651">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="cd184-652">A ogni aggiornamento, un gestore per <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento scrive il nome e lo stato di attualmente caricato <xref:System.Speech.Recognition.Grammar> oggetti nella console.</span><span class="sxs-lookup"><span data-stu-id="cd184-652">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="cd184-653">Come le grammatiche vengono caricate e scaricate, l'applicazione vengono innanzitutto i nomi di animali, i nomi di animali e i nomi di frutti e quindi solo i nomi di frutta.</span><span class="sxs-lookup"><span data-stu-id="cd184-653">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RequestRecognizerUpdate">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-654">Richiede la sospensione del riconoscimento per aggiornarne lo stato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-654">Requests that the recognizer pauses to update its state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-655">Utilizzare questo metodo per sincronizzare le modifiche al sistema di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-655">Use this method to synchronize changes to the recognizer.</span></span> <span data-ttu-id="cd184-656">Ad esempio, se si carica o scarica una grammatica di riconoscimento vocale mentre il riconoscimento per elaborare l'input, utilizzare questo metodo e <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> eventi per la sincronizzazione del comportamento dell'applicazione con lo stato del sistema di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-656">For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event to synchronize your application behavior with the state of the recognizer.</span></span>  
  
 <span data-ttu-id="cd184-657">Quando questo metodo viene chiamato, il riconoscimento viene sospeso o completamento di operazioni asincrone e genera un <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-657">When this method is called, the recognizer pauses or completes asynchronous operations and generates a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span> <span data-ttu-id="cd184-658">Oggetto <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> gestore eventi può quindi modificare lo stato del sistema di riconoscimento tra operazioni di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-658">A <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event handler can then modify the state of the recognizer in between recognition operations.</span></span> <span data-ttu-id="cd184-659">Quando si gestiscono <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> eventi, il riconoscimento viene sospeso fino a quando non restituisce il gestore dell'evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-659">When handling <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> events, the recognizer pauses until the event handler returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cd184-660">Se l'input per il riconoscimento viene modificato prima genera il riconoscimento di <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento, la richiesta viene eliminato.</span><span class="sxs-lookup"><span data-stu-id="cd184-660">If the input to the recognizer is changed before the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the request is discarded.</span></span>  
  
 <span data-ttu-id="cd184-661">Quando viene chiamato questo metodo:</span><span class="sxs-lookup"><span data-stu-id="cd184-661">When this method is called:</span></span>  
  
-   <span data-ttu-id="cd184-662">Se il riconoscimento non è l'elaborazione di input, viene generato immediatamente il riconoscimento di <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-662">If the recognizer is not processing input, the recognizer immediately generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="cd184-663">Se il riconoscimento è l'elaborazione di input che consiste di inattività o rumore di fondo, il riconoscimento sospende l'operazione di riconoscimento e genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-663">If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="cd184-664">Se il riconoscimento è l'elaborazione di input che non è costituito inattività o rumore di fondo, il riconoscimento completa l'operazione di riconoscimento e quindi genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-664">If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
 <span data-ttu-id="cd184-665">Mentre il riconoscimento sta gestendo il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento:</span><span class="sxs-lookup"><span data-stu-id="cd184-665">While the recognizer is handling the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event:</span></span>  
  
-   <span data-ttu-id="cd184-666">Il riconoscimento non elabora l'input e il valore della <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> proprietà rimane invariato.</span><span class="sxs-lookup"><span data-stu-id="cd184-666">The recognizer does not process input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property remains the same.</span></span>  
  
-   <span data-ttu-id="cd184-667">Il riconoscimento continua a raccogliere input e il valore di <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> proprietà può essere modificata.</span><span class="sxs-lookup"><span data-stu-id="cd184-667">The recognizer continues to collect input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property can change.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cd184-668">Richiede la sospensione del riconoscimento per aggiornarne lo stato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-668">Requests that the recognizer pauses to update its state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-669">Quando viene generato il riconoscimento di <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento, il <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> proprietà del <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> è `null`.</span><span class="sxs-lookup"><span data-stu-id="cd184-669">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.</span></span>  
  
 <span data-ttu-id="cd184-670">Per fornire un token dell'utente, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-670">To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="cd184-671">Per specificare un offset di posizione audio, usare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-671">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-672">L'esempio seguente illustra un'applicazione console che carica e Scarica <xref:System.Speech.Recognition.Grammar> oggetti.</span><span class="sxs-lookup"><span data-stu-id="cd184-672">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="cd184-673">L'applicazione utilizza il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metodo per richiedere il motore di riconoscimento vocale per mettere in pausa per la ricezione di un aggiornamento.</span><span class="sxs-lookup"><span data-stu-id="cd184-673">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="cd184-674">L'applicazione quindi carica o scarica un <xref:System.Speech.Recognition.Grammar> oggetto.</span><span class="sxs-lookup"><span data-stu-id="cd184-674">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="cd184-675">A ogni aggiornamento, un gestore per <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento scrive il nome e lo stato di attualmente caricato <xref:System.Speech.Recognition.Grammar> oggetti nella console.</span><span class="sxs-lookup"><span data-stu-id="cd184-675">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="cd184-676">Come le grammatiche vengono caricate e scaricate, l'applicazione vengono innanzitutto i nomi di animali, i nomi di animali e i nomi di frutti e quindi solo i nomi di frutta.</span><span class="sxs-lookup"><span data-stu-id="cd184-676">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userToken">
          <span data-ttu-id="cd184-677">Informazioni definite dall'utente che contengono informazioni per l'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-677">User-defined information that contains information for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-678">Richiede la sospensione del riconoscimento per aggiornarne lo stato e fornire un token utente per l'evento associato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-678">Requests that the recognizer pauses to update its state and provides a user token for the associated event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-679">Quando viene generato il riconoscimento di <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento, il <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> proprietà del <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contiene il valore del `userToken` parametro.</span><span class="sxs-lookup"><span data-stu-id="cd184-679">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 <span data-ttu-id="cd184-680">Per specificare un offset di posizione audio, usare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-680">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken, valuetype System.TimeSpan audioPositionAheadToRaiseUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object, audioPositionAheadToRaiseUpdate As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
        <Parameter Name="audioPositionAheadToRaiseUpdate" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="userToken">
          <span data-ttu-id="cd184-681">Informazioni definite dall'utente che contengono informazioni per l'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-681">User-defined information that contains information for the operation.</span>
          </span>
        </param>
        <param name="audioPositionAheadToRaiseUpdate">
          <span data-ttu-id="cd184-682">L'offset dall'oggetto <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> corrente per ritardare la richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-682">The offset from the current <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> to delay the request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-683">Richiede la sospensione del riconoscimento per aggiornarne lo stato e fornire un offset e un token utente per l'evento associato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-683">Requests that the recognizer pauses to update its state and provides an offset and a user token for the associated event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-684">Il riconoscimento non avvierà la richiesta di aggiornamento per il riconoscimento fino a quando il riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> corrente è uguale a <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> più `audioPositionAheadToRaiseUpdate`.</span><span class="sxs-lookup"><span data-stu-id="cd184-684">The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.</span></span>  
  
 <span data-ttu-id="cd184-685">Quando viene generato il riconoscimento di <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> evento, il <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> proprietà del <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contiene il valore del `userToken` parametro.</span><span class="sxs-lookup"><span data-stu-id="cd184-685">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetInputToAudioStream (System.IO.Stream audioSource, System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToAudioStream(class System.IO.Stream audioSource, class System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToAudioStream (audioSource As Stream, audioFormat As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToAudioStream(System::IO::Stream ^ audioSource, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ audioFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
        <Parameter Name="audioFormat" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioSource">
          <span data-ttu-id="cd184-686">Flusso di input audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-686">The audio input stream.</span>
          </span>
        </param>
        <param name="audioFormat">
          <span data-ttu-id="cd184-687">Il formato dell'input audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-687">The format of the audio input.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-688">Configura l'oggetto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> per ricevere l'input da un flusso audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-688">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from an audio stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-689">Se il riconoscimento raggiunge la fine del flusso di input durante un'operazione di riconoscimento, l'operazione di riconoscimento completa con l'input disponibile.</span><span class="sxs-lookup"><span data-stu-id="cd184-689">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="cd184-690">Operazioni successive riconoscimento è possono generare un'eccezione, a meno che non si aggiorna l'input per il riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-690">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-691">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale base.</span><span class="sxs-lookup"><span data-stu-id="cd184-691">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="cd184-692">Nell'esempio viene utilizzato l'input da un file audio, example.wav, che contiene le frasi, "test o test uno due tre" e "vendita cooper", separati da una pausa.</span><span class="sxs-lookup"><span data-stu-id="cd184-692">The example uses input from an audio file, example.wav, that contains the phrases, "testing testing one two three" and "mister cooper", separated by a pause.</span></span> <span data-ttu-id="cd184-693">L'esempio genera l'output seguente.</span><span class="sxs-lookup"><span data-stu-id="cd184-693">The example generates the following output.</span></span>  
  
```  
  
Starting asynchronous recognition...  
  Recognized text =  Testing testing 123  
  Recognized text =  Mr. Cooper  
  End of stream encountered.  
Done.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.IO;  
using System.Speech.AudioFormat;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InputExamples  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToAudioStream(  
          File.OpenRead(@"c:\temp\audioinput\example.wav"),  
          new SpeechAudioFormatInfo(  
            44100, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Perform recognition of the whole file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetInputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToDefaultAudioDevice();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cd184-694">Configura l'oggetto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> per ricevere l'input dal dispositivo audio predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-694">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from the default audio device.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd184-695">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il riconoscimento vocale base.</span><span class="sxs-lookup"><span data-stu-id="cd184-695">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="cd184-696">L'esempio utilizza l'output dal dispositivo audio predefinito, vengono eseguite più operazioni di riconoscimento asincrono e viene chiuso quando un utente utters la frase "exit".</span><span class="sxs-lookup"><span data-stu-id="cd184-696">The example uses output from the default audio device, performs multiple, asynchronous recognition operations, and exits when a user utters the phrase, "exit".</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace DefaultInput  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition has finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load the exit grammar.  
        Grammar exitGrammar = new Grammar(new GrammarBuilder("exit"));  
        exitGrammar.Name = "Exit Grammar";  
        recognizer.LoadGrammar(exitGrammar);  
  
        // Create and load the dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers to the recognizer.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Begin asynchronous recognition.  
        Console.WriteLine("Starting recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait for recognition to finish.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized:");  
      string grammarName = "<not available>";  
      if (e.Result.Grammar.Name != null &&  
        !e.Result.Grammar.Name.Equals(string.Empty))  
      {  
        grammarName = e.Result.Grammar.Name;  
      }  
      Console.WriteLine("    {0,-17} - {1}",  
        grammarName, e.Result.Text);  
  
      if (grammarName.Equals("Exit Grammar"))  
      {  
        ((SpeechRecognitionEngine)sender).RecognizeAsyncCancel();  
      }  
    }  
  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("  Recognition completed.");  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToNull">
      <MemberSignature Language="C#" Value="public void SetInputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToNull();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cd184-697">Disabilita l'input del riconoscimento vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-697">Disables the input to the speech recognizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-698">Configurare il <xref:System.Speech.Recognition.SpeechRecognitionEngine> oggetto per nessun input quando si utilizza il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> metodi, o quando si acquisisce un motore di riconoscimento temporaneamente non in linea.</span><span class="sxs-lookup"><span data-stu-id="cd184-698">Configure the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object for no input when using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods, or when taking a recognition engine temporarily off line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetInputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveFile(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="cd184-699">Percorso del file da utilizzare come input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-699">The path of the file to use as input.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-700">Configura l'oggetto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> per ricevere l'input da un file in formato audio Waveform (.wav).</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-700">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a Waveform audio format (.wav) file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-701">Se il riconoscimento raggiunge la fine del file di input durante un'operazione di riconoscimento, l'operazione di riconoscimento completa con l'input disponibile.</span><span class="sxs-lookup"><span data-stu-id="cd184-701">If the recognizer reaches the end of the input file during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="cd184-702">Operazioni successive riconoscimento è possono generare un'eccezione, a meno che non si aggiorna l'input per il riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-702">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-703">Nell'esempio seguente esegue il riconoscimento all'audio in un file. wav e scrive il testo riconosciuto nella console.</span><span class="sxs-lookup"><span data-stu-id="cd184-703">The following example performs recognition on the audio in a .wav file and writes the recognized text to the console.</span></span>  
  
```  
using System;  
using System.IO;  
using System.Speech.Recognition;  
using System.Speech.AudioFormat;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static bool completed;  
  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
recognizer.SetInputToWaveFile(@"c:\temp\SampleWAVInput.wav");  
  
        // Attach event handlers for the results of recognition.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizeCompleted +=   
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
  
        // Perform recognition on the entire file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        while (!completed)  
        {  
          Console.ReadLine();  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
        e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetInputToWaveStream (System.IO.Stream audioSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveStream(class System.IO.Stream audioSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveStream (audioSource As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveStream(System::IO::Stream ^ audioSource);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioSource">
          <span data-ttu-id="cd184-704">Flusso contenente i dati audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-704">The stream containing the audio data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-705">Configura l'oggetto <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> per ricevere l'input da un flusso che contiene i dati in formato audio Waveform (.wav).</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-705">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a stream that contains Waveform audio format (.wav) data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-706">Se il riconoscimento raggiunge la fine del flusso di input durante un'operazione di riconoscimento, l'operazione di riconoscimento completa con l'input disponibile.</span><span class="sxs-lookup"><span data-stu-id="cd184-706">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="cd184-707">Operazioni successive riconoscimento è possono generare un'eccezione, a meno che non si aggiorna l'input per il riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-707">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SpeechDetected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechDetected As EventHandler(Of SpeechDetectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechDetectedEventArgs ^&gt; ^ SpeechDetected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-708">Generato quando <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> rileva un input identificabile come funzione vocale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-708">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects input that it can identify as speech.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-709">Ogni riconoscimento vocale è disponibile un algoritmo per distinguere tra vocale e di inattività.</span><span class="sxs-lookup"><span data-stu-id="cd184-709">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="cd184-710">Quando il <xref:System.Speech.Recognition.SpeechRecognitionEngine> esegue un'operazione di riconoscimento vocale, genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> evento quando l'algoritmo identifica l'input come riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-710">When the <xref:System.Speech.Recognition.SpeechRecognitionEngine> performs a speech recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event when its algorithm identifies the input as speech.</span></span> <span data-ttu-id="cd184-711">Il <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> proprietà dell'oggetto associato <xref:System.Speech.Recognition.SpeechDetectedEventArgs> oggetto indica una posizione nel flusso di input in cui il riconoscimento per rilevata il riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-711">The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech.</span></span> <span data-ttu-id="cd184-712">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine> genera il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> evento prima che venga generato uno qualsiasi del <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, o <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> eventi.</span><span class="sxs-lookup"><span data-stu-id="cd184-712">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event before it raises any of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> events.</span></span>  
  
 <span data-ttu-id="cd184-713">Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-713">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="cd184-714">Quando si crea un delegato <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, si identifica il metodo che gestirà l'evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-714">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="cd184-715">Per associare l'evento al gestore eventi in uso, aggiungere all'evento un'istanza del delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-715">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="cd184-716">Il gestore eventi viene chiamato ogni volta che si verifica l'evento, a meno che non venga rimosso il delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-716">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="cd184-717">Per ulteriori informazioni sui delegati del gestore eventi, vedere [eventi e delegati](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="cd184-717">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-718">Nell'esempio seguente fa parte di un'applicazione console per la scelta di origine e destinazione città per un volo.</span><span class="sxs-lookup"><span data-stu-id="cd184-718">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="cd184-719">L'applicazione riconosce frasi, ad esempio "Desidero entrata da Miami a Chicago."</span><span class="sxs-lookup"><span data-stu-id="cd184-719">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span>  <span data-ttu-id="cd184-720">Nell'esempio viene utilizzato il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> evento report il <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> viene rilevato il parlato ogni ora.</span><span class="sxs-lookup"><span data-stu-id="cd184-720">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event to report the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> each time speech is detected.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        Choices cities = new Choices(new string[] {   
          "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I would like to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(gb);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechDetected event.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine("  Speech detected at AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechHypothesized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechHypothesized As EventHandler(Of SpeechHypothesizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechHypothesizedEventArgs ^&gt; ^ SpeechHypothesized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-721">Generato quando <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> ha riconosciuto una o più parole che possono essere componenti di più frasi complete in una grammatica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-721">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> has recognized a word or words that may be a component of multiple complete phrases in a grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-722">Il <xref:System.Speech.Recognition.SpeechRecognitionEngine> genera numerosi <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> eventi perché tenta di identificare una frase di input.</span><span class="sxs-lookup"><span data-stu-id="cd184-722">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> generates numerous <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> events as it attempts to identify an input phrase.</span></span> <span data-ttu-id="cd184-723">È possibile accedere al testo di frasi parzialmente riconosciute nel <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> proprietà del <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> oggetto nel gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-723">You can access the text of partially recognized phrases in the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event.</span></span> <span data-ttu-id="cd184-724">In genere, la gestione di questi eventi è utile solo per il debug.</span><span class="sxs-lookup"><span data-stu-id="cd184-724">Typically, handling these events is useful only for debugging.</span></span>  
  
 <span data-ttu-id="cd184-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> deriva da <xref:System.Speech.Recognition.RecognitionEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="cd184-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="cd184-726">Per ulteriori informazioni, vedere il <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> proprietà e <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-726">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="cd184-727">Quando si crea un delegato <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, si identifica il metodo che gestirà l'evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-727">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="cd184-728">Per associare l'evento al gestore eventi in uso, aggiungere all'evento un'istanza del delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-728">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="cd184-729">Il gestore eventi viene chiamato ogni volta che si verifica l'evento, a meno che non venga rimosso il delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-729">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="cd184-730">Per ulteriori informazioni sui delegati del gestore eventi, vedere [eventi e delegati](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="cd184-730">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-731">Nell'esempio seguente riconosce frasi, ad esempio "Visualizza l'elenco degli artisti nella categoria jazz".</span><span class="sxs-lookup"><span data-stu-id="cd184-731">The following example recognizes phrases such as "Display the list of artists in the jazz category".</span></span> <span data-ttu-id="cd184-732">Nell'esempio viene utilizzato il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> evento per visualizzare i frammenti di frase incompleto nella console di come vengono riconosciuti.</span><span class="sxs-lookup"><span data-stu-id="cd184-732">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event to display incomplete phrase fragments in the console as they are recognized.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display the list of");  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the");  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.");  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine("Speech hypothesized: " + e.Result.Text);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine();   
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognitionRejected As EventHandler(Of SpeechRecognitionRejectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognitionRejectedEventArgs ^&gt; ^ SpeechRecognitionRejected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-733">Generato quando <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> riceve input che non corrisponde ad alcun oggetto <see cref="T:System.Speech.Recognition.Grammar" /> caricato e abilitato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-733">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that does not match any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-734">L'evento viene generato il riconoscimento, se rileva che input non corrisponde con sufficiente sicurezza tutti i relativi caricati e abilitati <xref:System.Speech.Recognition.Grammar> oggetti.</span><span class="sxs-lookup"><span data-stu-id="cd184-734">The recognizer raises this event if it determines that input does not match with sufficient confidence any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="cd184-735">Il <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> proprietà del <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contiene il rifiutati <xref:System.Speech.Recognition.RecognitionResult> oggetto.</span><span class="sxs-lookup"><span data-stu-id="cd184-735">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="cd184-736">È possibile utilizzare il gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> evento per recuperare il riconoscimento <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> che sono stati rifiutati e il loro <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> punteggi.</span><span class="sxs-lookup"><span data-stu-id="cd184-736">You can use the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to retrieve recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected and their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> scores.</span></span>  
  
 <span data-ttu-id="cd184-737">Se l'applicazione utilizza un <xref:System.Speech.Recognition.SpeechRecognitionEngine> istanza, è possibile modificare il livello di confidenza quali sintesi e riconoscimento vocale è è accettato o rifiutato con uno degli input di <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-737">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="cd184-738">È possibile modificare una modalità di risposta il riconoscimento vocale non vocale input mediante la <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-738">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="cd184-739">Quando si crea un delegato <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, si identifica il metodo che gestirà l'evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-739">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="cd184-740">Per associare l'evento al gestore eventi in uso, aggiungere all'evento un'istanza del delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-740">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="cd184-741">Il gestore eventi viene chiamato ogni volta che si verifica l'evento, a meno che non venga rimosso il delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-741">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="cd184-742">Per ulteriori informazioni sui delegati del gestore eventi, vedere [eventi e delegati](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="cd184-742">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-743">Nell'esempio seguente riconosce frasi, ad esempio "Visualizzare l'elenco degli artisti nella categoria jazz" o "Gospel album visualizzare".</span><span class="sxs-lookup"><span data-stu-id="cd184-743">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="cd184-744">Nell'esempio viene utilizzato un gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> evento per visualizzare una notifica nella console quando il riconoscimento vocale per l'input non può corrispondere al contenuto della grammatica con sufficienti <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> per produrre un riconoscimento ha esito positivo.</span><span class="sxs-lookup"><span data-stu-id="cd184-744">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> to produce a successful recognition.</span></span> <span data-ttu-id="cd184-745">Il gestore visualizza anche i risultati di riconoscimento <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> che sono stati rifiutati a causa di punteggi di confidenza basso.</span><span class="sxs-lookup"><span data-stu-id="cd184-745">The handler also displays recognition result <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected because of low confidence scores.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
      foreach (RecognizedPhrase phrase in e.Result.Alternates)  
      {  
      Console.WriteLine("  Rejected phrase: " + phrase.Text);  
      Console.WriteLine("  Confidence score: " + phrase.Confidence);  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-746">Generato quando <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> riceve input che corrisponde a un oggetto <see cref="T:System.Speech.Recognition.Grammar" /> caricato e abilitato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-746">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that matches any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-747">È possibile avviare un'operazione di riconoscimento utilizzando uno del <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-747">You can initiate a recognition operation using the one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span> <span data-ttu-id="cd184-748">Genera il riconoscimento di <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> evento se determina che input corrisponde a uno dei relativi caricato <xref:System.Speech.Recognition.Grammar> oggetti con un livello di confidenza al riconoscimento sufficiente.</span><span class="sxs-lookup"><span data-stu-id="cd184-748">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event if it determines that input matches one of its loaded <xref:System.Speech.Recognition.Grammar> objects with a sufficient level of confidence to constitute recognition.</span></span> <span data-ttu-id="cd184-749">Il <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> proprietà del <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contiene accettata <xref:System.Speech.Recognition.RecognitionResult> oggetto.</span><span class="sxs-lookup"><span data-stu-id="cd184-749">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="cd184-750">Gestori di <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> possono ottenere gli eventi alla frase riconosciuta, nonché un elenco di riconoscimento <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> con punteggi di confidenza inferiore.</span><span class="sxs-lookup"><span data-stu-id="cd184-750">Handlers of <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events can obtain the recognized phrase as well as a list of recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> with lower confidence scores.</span></span>  
  
 <span data-ttu-id="cd184-751">Se l'applicazione utilizza un <xref:System.Speech.Recognition.SpeechRecognitionEngine> istanza, è possibile modificare il livello di confidenza quali sintesi e riconoscimento vocale è è accettato o rifiutato con uno degli input di <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> metodi.</span><span class="sxs-lookup"><span data-stu-id="cd184-751">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  <span data-ttu-id="cd184-752">È possibile modificare una modalità di risposta il riconoscimento vocale non vocale input mediante la <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-752">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="cd184-753">Quando il riconoscimento riceve l'input che corrisponde a una grammatica, il <xref:System.Speech.Recognition.Grammar> può generare l'oggetto relativo <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-753">When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise its <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="cd184-754">Il <xref:System.Speech.Recognition.Grammar> dell'oggetto <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento viene generato prima del riconoscimento vocale <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-754">The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="cd184-755">Qualsiasi attività specifiche di una particolare grammatica dovrebbe sempre essere eseguita da un gestore per il <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-755">Any tasks specific to a particular grammar should always be performed by a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="cd184-756">Quando si crea un delegato <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, si identifica il metodo che gestirà l'evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-756">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="cd184-757">Per associare l'evento al gestore eventi in uso, aggiungere all'evento un'istanza del delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-757">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="cd184-758">Il gestore eventi viene chiamato ogni volta che si verifica l'evento, a meno che non venga rimosso il delegato.</span><span class="sxs-lookup"><span data-stu-id="cd184-758">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="cd184-759">Per ulteriori informazioni sui delegati del gestore eventi, vedere [eventi e delegati](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="cd184-759">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-760">Nell'esempio seguente fa parte di un'applicazione console che crea la grammatica di riconoscimento vocale, costrutti un <xref:System.Speech.Recognition.Grammar> dell'oggetto e viene caricato il <xref:System.Speech.Recognition.SpeechRecognitionEngine> per eseguire il riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-760">The following example is part of a console application that creates speech recognition grammar, constructs a <xref:System.Speech.Recognition.Grammar> object, and loads it into the <xref:System.Speech.Recognition.SpeechRecognitionEngine> to perform recognition.</span></span> <span data-ttu-id="cd184-761">Nell'esempio viene illustrato l'input vocale per un <xref:System.Speech.Recognition.SpeechRecognitionEngine>, i risultati di riconoscimento associati e gli eventi associati generati dal riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-761">The example demonstrates speech input to a <xref:System.Speech.Recognition.SpeechRecognitionEngine>, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
 <span data-ttu-id="cd184-762">Leggere l'input, ad esempio "Desidero entrata da Chicago a Miami" attiverà una <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-762">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="cd184-763">Parlando la frase "Entrata me da Houston a Chicago" non attiverà una <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> evento.</span><span class="sxs-lookup"><span data-stu-id="cd184-763">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="cd184-764">Nell'esempio viene utilizzato un gestore per il <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> evento per visualizzare correttamente riconosciuto frasi e la semantica contengono nella console.</span><span class="sxs-lookup"><span data-stu-id="cd184-764">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnloadAllGrammars">
      <MemberSignature Language="C#" Value="public void UnloadAllGrammars ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadAllGrammars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnloadAllGrammars ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadAllGrammars();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="cd184-765">Scarica tutti gli oggetti <see cref="T:System.Speech.Recognition.Grammar" /> dal riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-765">Unloads all <see cref="T:System.Speech.Recognition.Grammar" /> objects from the recognizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-766">Se il riconoscimento sta attualmente caricando un <xref:System.Speech.Recognition.Grammar> in modo asincrono, questo metodo attende fino a quando il <xref:System.Speech.Recognition.Grammar> viene caricato, prima che venga scaricato tutti il <xref:System.Speech.Recognition.Grammar> oggetti dal <xref:System.Speech.Recognition.SpeechRecognitionEngine> istanza.</span><span class="sxs-lookup"><span data-stu-id="cd184-766">If the recognizer is currently loading a <xref:System.Speech.Recognition.Grammar> asynchronously, this method waits until the <xref:System.Speech.Recognition.Grammar> is loaded, before it unloads all of the <xref:System.Speech.Recognition.Grammar> objects from the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="cd184-767">Per scaricare una grammatica specifica, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-767">To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-768">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il caricamento sincrono e scaricamento di grammatiche riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-768">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="UnloadGrammar">
      <MemberSignature Language="C#" Value="public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">
          <span data-ttu-id="cd184-769">L'oggetto di grammatica di cui annullare il caricamento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-769">The grammar object to unload.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-770">Scarica un oggetto <see cref="T:System.Speech.Recognition.Grammar" /> specificato dall'istanza <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-770">Unloads a specified <see cref="T:System.Speech.Recognition.Grammar" /> object from the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-771">Se il riconoscimento è in esecuzione, le applicazioni devono utilizzare <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> per sospendere il <xref:System.Speech.Recognition.SpeechRecognitionEngine> istanza prima del caricamento, scaricamento, abilitazione o disabilitazione di un <xref:System.Speech.Recognition.Grammar> oggetto.</span><span class="sxs-lookup"><span data-stu-id="cd184-771">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance before loading, unloading,  enabling, or disabling a <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="cd184-772">Per scaricare tutti <xref:System.Speech.Recognition.Grammar> oggetti, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-772">To unload all <xref:System.Speech.Recognition.Grammar> objects, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-773">Nell'esempio seguente viene illustrata parte di un'applicazione console che illustra il caricamento sincrono e scaricamento di grammatiche riconoscimento vocale.</span><span class="sxs-lookup"><span data-stu-id="cd184-773">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-774">
            <paramref name="Grammar" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-774">
              <paramref name="Grammar" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cd184-775">La grammatica non viene caricata nel sistema di riconoscimento o il sistema di riconoscimento sta al momento caricando la grammatica in modo asincrono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-775">The grammar is not loaded in this recognizer, or this recognizer is currently loading the grammar asynchronously.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateRecognizerSetting">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd184-776">Aggiorna il valore di un'impostazione per il riconoscimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-776">Updates the value of a setting for the recognizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-777">Le impostazioni per il riconoscimento possono contenere una stringa, intero a 64 bit o dati di indirizzo di memoria.</span><span class="sxs-lookup"><span data-stu-id="cd184-777">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="cd184-778">Nella tabella seguente vengono descritte le impostazioni definite per un riconoscimento vocale API di Microsoft (SAPI)-riconoscimento conformo.</span><span class="sxs-lookup"><span data-stu-id="cd184-778">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="cd184-779">Le seguenti impostazioni devono avere lo stesso intervallo per ogni riconoscimento che supporta l'impostazione.</span><span class="sxs-lookup"><span data-stu-id="cd184-779">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="cd184-780">Un riconoscimento conformi SAPI non è necessario per supportare queste impostazioni e può supportare altre impostazioni.</span><span class="sxs-lookup"><span data-stu-id="cd184-780">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="cd184-781">nome</span><span class="sxs-lookup"><span data-stu-id="cd184-781">Name</span></span>|<span data-ttu-id="cd184-782">Descrizione</span><span class="sxs-lookup"><span data-stu-id="cd184-782">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="cd184-783">Specifica l'utilizzo della CPU del riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-783">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="cd184-784">L'intervallo è compreso tra 0 e 100.</span><span class="sxs-lookup"><span data-stu-id="cd184-784">The range is from 0 to 100.</span></span> <span data-ttu-id="cd184-785">Il valore predefinito è 50.</span><span class="sxs-lookup"><span data-stu-id="cd184-785">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="cd184-786">Indica la lunghezza di inattività alla fine dell'input non ambiguo prima che il riconoscimento vocale viene completata un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-786">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="cd184-787">L'intervallo è compreso tra 0 e 10.000 millisecondi (ms).</span><span class="sxs-lookup"><span data-stu-id="cd184-787">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="cd184-788">Questa impostazione corrisponde al riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-788">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span> <span data-ttu-id="cd184-789">Predefinito = 150 ms.</span><span class="sxs-lookup"><span data-stu-id="cd184-789">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="cd184-790">Indica la lunghezza di inattività in millisecondi (ms) alla fine dell'input ambiguo prima che il riconoscimento vocale viene completata un'operazione di riconoscimento.</span><span class="sxs-lookup"><span data-stu-id="cd184-790">Indicates the length of silence in milliseconds (ms) at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="cd184-791">L'intervallo è compreso tra 0 e 10.000 ms.</span><span class="sxs-lookup"><span data-stu-id="cd184-791">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="cd184-792">Questa impostazione corrisponde al riconoscimento <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-792">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="cd184-793">Predefinito = 500ms.</span><span class="sxs-lookup"><span data-stu-id="cd184-793">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="cd184-794">Indica se l'adattamento del modello acustico è ON (valore = `1`) o OFF (valore = `0`).</span><span class="sxs-lookup"><span data-stu-id="cd184-794">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="cd184-795">Il valore predefinito è `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="cd184-795">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="cd184-796">Indica se l'adattamento è ON (valore = `1`) o OFF (valore = `0`), e viene mantenuta l'impostazione del Registro di sistema.</span><span class="sxs-lookup"><span data-stu-id="cd184-796">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="cd184-797">Il valore predefinito è `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="cd184-797">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="cd184-798">Per restituire una delle impostazioni del riconoscimento, utilizzare il <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="cd184-798">To return one of the recognizer's settings, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> method.</span></span>  
  
 <span data-ttu-id="cd184-799">Ad eccezione di `PersistedBackgroundAdaptation`, i valori di proprietà impostati mediante il <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> metodi rimangono valide solo per l'istanza corrente di <xref:System.Speech.Recognition.SpeechRecognitionEngine>, dopo cui ripristinare le impostazioni predefinite.</span><span class="sxs-lookup"><span data-stu-id="cd184-799">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span>  
  
 <span data-ttu-id="cd184-800">È possibile modificare una modalità di risposta il riconoscimento vocale non vocale input mediante la <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, e <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="cd184-800">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, int updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, int32 updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, int updatedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="settingName">
          <span data-ttu-id="cd184-801">Nome dell'impostazione da aggiornare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-801">The name of the setting to update.</span>
          </span>
        </param>
        <param name="updatedValue">
          <span data-ttu-id="cd184-802">Il nuovo valore per l'impostazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-802">The new value for the setting.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-803">Aggiorna l'impostazione specificata per <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> con il valore Integer specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-803">Updates the specified setting for the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> with the specified integer value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-804">Ad eccezione di `PersistedBackgroundAdaptation`, i valori di proprietà impostati mediante il <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> metodo rimangono valide solo per l'istanza corrente di <xref:System.Speech.Recognition.SpeechRecognitionEngine>, dopo cui ripristinare le impostazioni predefinite.</span><span class="sxs-lookup"><span data-stu-id="cd184-804">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="cd184-805">Vedere <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> per le descrizioni delle impostazioni supportate.</span><span class="sxs-lookup"><span data-stu-id="cd184-805">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd184-806">Nell'esempio seguente fa parte di un'applicazione console che restituisce i valori per un numero di impostazioni definite per il riconoscimento che supporta le impostazioni locali en-US.</span><span class="sxs-lookup"><span data-stu-id="cd184-806">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="cd184-807">L'esempio aggiorna le impostazioni del livello di confidenza e successivamente sottoposto a query il riconoscimento per controllare i valori aggiornati.</span><span class="sxs-lookup"><span data-stu-id="cd184-807">The example updates the confidence level settings, and then queries the recognizer to check the updated values.</span></span> <span data-ttu-id="cd184-808">L'esempio genera l'output seguente.</span><span class="sxs-lookup"><span data-stu-id="cd184-808">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Updated settings:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 200  
  ComplexResponseSpeed           = 300  
  AdaptationOn                   = 0  
  PersistedBackgroundAdaptation  = 0  
  
Press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation",  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        // List the current settings.  
        ListSettings(recognizer);  
  
        // Change some of the settings.  
        recognizer.UpdateRecognizerSetting("ResponseSpeed", 200);  
        recognizer.UpdateRecognizerSetting("ComplexResponseSpeed", 300);  
        recognizer.UpdateRecognizerSetting("AdaptationOn", 1);  
        recognizer.UpdateRecognizerSetting("PersistedBackgroundAdaptation", 0);  
  
        Console.WriteLine("Updated settings:");  
        Console.WriteLine();  
  
        // List the updated settings.  
        ListSettings(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListSettings(SpeechRecognitionEngine recognizer)  
    {  
      foreach (string setting in settings)  
      {  
        try  
        {  
          object value = recognizer.QueryRecognizerSetting(setting);  
          Console.WriteLine("  {0,-30} = {1}", setting, value);  
        }  
        catch  
        {  
          Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
            setting);  
        }  
      }  
      Console.WriteLine();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-809">
            <paramref name="settingName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-809">
              <paramref name="settingName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd184-810">
            <paramref name="settingName" /> è la stringa vuota ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-810">
              <paramref name="settingName" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="cd184-811">Il riconoscimento non ha un'impostazione con tale nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-811">The recognizer does not have a setting by that name.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, string updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, string updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, System::String ^ updatedValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName">
          <span data-ttu-id="cd184-812">Nome dell'impostazione da aggiornare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-812">The name of the setting to update.</span>
          </span>
        </param>
        <param name="updatedValue">
          <span data-ttu-id="cd184-813">Il nuovo valore per l'impostazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-813">The new value for the setting.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd184-814">Aggiorna l'impostazione specificata del motore di riconoscimento vocale con il valore di stringa specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-814">Updates the specified speech recognition engine setting with the specified string value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd184-815">Ad eccezione di `PersistedBackgroundAdaptation`, i valori di proprietà impostati mediante il <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> metodo rimangono valide solo per l'istanza corrente di <xref:System.Speech.Recognition.SpeechRecognitionEngine>, dopo cui ripristinare le impostazioni predefinite.</span><span class="sxs-lookup"><span data-stu-id="cd184-815">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="cd184-816">Vedere <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> per le descrizioni delle impostazioni supportate.</span><span class="sxs-lookup"><span data-stu-id="cd184-816">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cd184-817">
            <paramref name="settingName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-817">
              <paramref name="settingName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd184-818">
            <paramref name="settingName" /> è la stringa vuota ("").</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-818">
              <paramref name="settingName" /> is the empty string ("").</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="cd184-819">Il riconoscimento non ha un'impostazione con tale nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd184-819">The recognizer does not have a setting by that name.</span>
          </span>
        </exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>