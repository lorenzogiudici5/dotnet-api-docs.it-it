<Type Name="SemanticResultKey" FullName="System.Speech.Recognition.SemanticResultKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="728e6be010dd9f35fb50a4b7205ec14cbb4aa2d2" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36608245" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemanticResultKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultKey" />
  <TypeSignature Language="F#" Value="type SemanticResultKey = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Associa una stringa di chiave con valori <see cref="T:System.Speech.Recognition.SemanticResultValue" /> per definire gli oggetti di <see cref="T:System.Speech.Recognition.SemanticValue" /> .</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'unità base di espressione semantica in Speech è il <xref:System.Speech.Recognition.SemanticValue>, ovvero una coppia chiave/valore.  
  
 Utilizzando <xref:System.Speech.Recognition.SemanticResultKey> oggetti, tag <xref:System.Speech.Recognition.SemanticResultValue> istanze contenute nel <xref:System.Speech.Recognition.GrammarBuilder> oggetti e le stringhe in modo che i valori possono essere facilmente utilizzati da <xref:System.Speech.Recognition.SemanticValue> istanze nel riconoscimento.  
  
 È possibile utilizzare <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey> oggetti, in combinazione con <xref:System.Speech.Recognition.GrammarBuilder> e <xref:System.Speech.Recognition.Choices> oggetti, per definire la struttura semantica per una grammatica di riconoscimento vocale. Per accedere a informazioni semantiche in un risultato di riconoscimento, ottenere un'istanza di <xref:System.Speech.Recognition.SemanticValue> tramite il <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> proprietà <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
 Per ulteriori informazioni sull'utilizzo <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey> oggetti, vedere [SemanticResultValue comprensione e oggetti SemanticResultKey](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c) e [utilizzando un SemanticResultKey per estrazione una SemanticResultValue](http://msdn.microsoft.com/library/198e29b8-845f-4cec-a25e-f55c0eaf46aa) nella [Guida per programmatori vocale sistema per .NET Framework 4.0](http://msdn.microsoft.com/library/610116c7-3817-40ff-857b-5d41e8511043).  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Speech.Recognition.Grammar> riconoscere input della password nel formato "la password è...", in cui l'input effettivo viene confrontata con un carattere jolly.  
  
 Il carattere jolly è contrassegnato con una chiave semantica e <xref:System.Speech.Recognition.Grammar.SpeechRecognized> gestore controlla la presenza di questo tag per verificare che si è verificato un input di password.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
    SemanticValue semantics = eventArgs.Result.Semantics;  
    RecognitionResult result=eventArgs.Result;  
  
    if (!semantics.ContainsKey("Password"))   
    {  
      SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
    }  
    else   
    {  
      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  
      MemoryStream pwdMemoryStream = new MemoryStream();  
      pwdAudio.WriteToAudioStream(pwdMemoryStream);  
      if (!IsValidPwd(pwdMemoryStream))   
      {  
        string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
        pwdAudio.WriteToWaveStream(waveStream);  
        waveStream.Flush();  
        waveStream.Close();  
        SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
  
      }  
    }  
  };  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Costruisce un'istanza di <see cref="T:System.Speech.Recognition.SemanticResultKey" /> e associa la chiave con componenti della grammatica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I costruttori per <xref:System.Speech.Recognition.SemanticResultKey> specificare un tag di testo (la chiave semantica) e un set di componenti di grammatica da aggiungere a una grammatica di riconoscimento vocale.  
  
 La grammatica di componenti possono essere specificato come una matrice di <xref:System.Speech.Recognition.GrammarBuilder> oggetti, o come una matrice di <xref:System.String> istanze.  
  
 Se vengono utilizzati i componenti di grammatica nel riconoscimento, è possibile accedere restituito <xref:System.Speech.Recognition.SemanticValue> utilizzando il tag di testo fornito al costruttore di <xref:System.Speech.Recognition.SemanticResultKey> come chiave semantica. Il <xref:System.Speech.Recognition.SemanticValue.Value%2A> proprietà del <xref:System.Speech.Recognition.SemanticValue> istanza verrà determinata dai componenti di grammatica utilizzati nella definizione di <xref:System.Speech.Recognition.SemanticResultKey>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params System.Speech.Recognition.GrammarBuilder[] builders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, class System.Speech.Recognition.GrammarBuilder[] builders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray builders As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ builders);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, builders)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="builders" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">Il tag da usare come chiave semantica per accedere all'istanza <see cref="T:System.Speech.Recognition.SemanticValue" /> associata agli oggetti <see cref="T:System.Speech.Recognition.GrammarBuilder" /> specificati dall'argomento <c>builders</c>.</param>
        <param name="builders">Matrice di componenti della grammatica che verranno associati a un oggetto <see cref="T:System.Speech.Recognition.SemanticValue" /> accessibile tramite il tag definito in <c>semanticResultKey</c>.</param>
        <summary>Assegna una chiave semantica a uno o più oggetti <see cref="T:System.Speech.Recognition.GrammarBuilder" /> utilizzati per creare una grammatica di riconoscimento vocale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A causa delle conversioni implicite, il `builders` supporta l'argomento <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, e <xref:System.String> anche oggetti. Per ulteriori informazioni sulle conversioni implicite, vedere <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.  
  
 Quando si esegue un'operazione di riconoscimento, la <xref:System.Speech.Recognition.GrammarBuilder> degli oggetti forniti nel `builders` argomento vengono trattati come sequenziale. Ad esempio, se i seguenti <xref:System.Speech.Recognition.SemanticResultValue> viene utilizzato per costruire un <xref:System.Speech.Recognition.Grammar>, come input per il motore di riconoscimento deve contenere le parole "volpe marrone rapida" nella sequenza venga riconosciuta.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey(  
    "stringTest", new GrammarBuilder[] {  
    new GrammarBuilder("the"),  
    new GrammarBuilder("quick"),  
    new GrammarBuilder("brown"),  
    new GrammarBuilder("fox")});  
```  
  
 Il `semanticResultKey` argomento contiene il tag utilizzato per accedere al <xref:System.Speech.Recognition.SemanticValue> quale potrebbe essere restituito.  
  
 Il <xref:System.Speech.Recognition.SemanticValue.Value%2A> del <xref:System.Speech.Recognition.SemanticValue> è determinato dal <xref:System.Speech.Recognition.GrammarBuilder> istanze fornite dal `builders` parametro.  
  
 Se il <xref:System.Speech.Recognition.GrammarBuilder> gli oggetti non contengono nessuna istanza di definizione <xref:System.Speech.Recognition.SemanticResultValue>, il valore della <xref:System.Speech.Recognition.SemanticValue> è `null`.  
  
 Se il <xref:System.Speech.Recognition.GrammarBuilder> degli oggetti forniti nel `builders` parametro forniscono un tag (senza associazione a un <xref:System.Speech.Recognition.SemanticResultKey> oggetto) <xref:System.Speech.Recognition.SemanticResultValue> istanza utilizzata dalla logica di riconoscimento, quell'istanza di <xref:System.Speech.Recognition.SemanticResultValue> definirà il <xref:System.Speech.Recognition.SemanticValue.Value%2A>proprietà del <xref:System.Speech.Recognition.SemanticValue> che viene prodotto.  
  
 Dovrebbe esserci un e solo uno, untagged <xref:System.Speech.Recognition.SemanticResultValue> dell'istanza nel <xref:System.Speech.Recognition.GrammarBuilder> oggetti specificati dal `builders` parametro. Se più istanze di untagged <xref:System.Speech.Recognition.SemanticResultValue> sono associati il <xref:System.Speech.Recognition.SemanticResultKey>, ognuna tenterà il set il valore della <xref:System.Speech.Recognition.SemanticValue> prodotti nel risultato del riconoscimento. Ciò non è consentito e il riconoscimento genererà un'eccezione quando tenta di utilizzare un <xref:System.Speech.Recognition.Grammar> creata utilizzando tale un <xref:System.Speech.Recognition.SemanticResultKey> istanza.  
  
 Le istanze di <xref:System.Speech.Recognition.SemanticResultValue> contenuti nella <xref:System.Speech.Recognition.GrammarBuilder> oggetti specificati dal `builders` parametro e già associata a un altro <xref:System.Speech.Recognition.SemanticResultKey> non hanno alcun effetto sull'oggetto corrente <xref:System.Speech.Recognition.SemanticResultKey> istanza.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Speech.Recognition.Grammar> riconoscere input della password nel formato "la password è...", in cui l'input effettivo viene confrontata con un carattere jolly.  
  
 Il carattere jolly viene contrassegnato da un <xref:System.Speech.Recognition.SpeechRecognizer> il cui valore della chiave è "Password". Il <xref:System.Speech.Recognition.Grammar.SpeechRecognized> gestore verifica la presenza di questo tag, ottiene l'input audio della password e verifica la password.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized +=   
    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
    {  
      SemanticValue semantics = eventArgs.Result.Semantics;  
      RecognitionResult result=eventArgs.Result;  
  
      if (!semantics.ContainsKey("Password"))   
      {  
        SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
      }  
      else   
      {  
        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
                  MemoryStream pwdMemoryStream = new MemoryStream();  
                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  
        if (!IsValidPwd(pwdMemoryStream))   
        {  
          string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    
          pwdAudio.WriteToWaveStream(waveStream);  
          waveStream.Flush();  
          waveStream.Close();  
          SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);      
        }  
      }  
    };  
  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * string[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, phrases)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">Tag da usare per accedere all'istanza <see cref="T:System.Speech.Recognition.SemanticValue" /> associata agli oggetti <see cref="T:System.String" /> specificati dall'argomento <c>phrases</c>.</param>
        <param name="phrases">Uno o più oggetti <see cref="T:System.String" /> il cui testo concatenato viene associato a un oggetto <see cref="T:System.Speech.Recognition.SemanticValue" /> accessibile con il tag definito in <c>semanticResultKey</c>.</param>
        <summary>Assegna una chiave semantica a una o più istanze <see cref="T:System.String" /> utilizzate per creare una grammatica di riconoscimento vocale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue un'operazione di riconoscimento, la <xref:System.String> gli oggetti utilizzati nel `phrases` parametro vengono trattati come sequenziale. Ad esempio, se i seguenti <xref:System.Speech.Recognition.SemanticResultValue> viene utilizzato per costruire un <xref:System.Speech.Recognition.Grammar>, come input per il motore di riconoscimento deve contenere le parole "volpe marrone rapida" nella sequenza venga riconosciuta.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey("stringTest",   
                                new string[] {  
                                               "the",  
                                               "quick",  
                                               "brown",  
                                               "fox"});  
```  
  
 Il `semanticResultKey` argomento determina la chiave utilizzata per accedere al <xref:System.Speech.Recognition.SemanticValue> quale potrebbe essere restituito.  
  
 Se si crea un <xref:System.Speech.Recognition.Grammar> utilizzando un <xref:System.Speech.Recognition.GrammarBuilder> oggetto che contiene una chiave semantica con una matrice di oggetti stringa, la <xref:System.Speech.Recognition.SemanticValue.Value%2A> del <xref:System.Speech.Recognition.SemanticValue> prodotta da un'operazione di riconoscimento sarà la stringa utilizzata nel riconoscimento. Nell'esempio precedente, ciò significa che <xref:System.Speech.Recognition.SemanticValue.Value%2A> sarebbe "marrone o volpe".  
  
   
  
## Examples  
 Nell'esempio seguente viene creata una <xref:System.Speech.Recognition.Grammar> da un <xref:System.Speech.Recognition.GrammarBuilder> oggetto che utilizza un <xref:System.Speech.Recognition.SemanticResultKey>, definito da una matrice di <xref:System.String> oggetti.  
  
 Un motore di riconoscimento mediante il <xref:System.Speech.Recognition.Grammar> creato verrà riconosciuta la frase "colore rosso zero blu verde". La semantica del <xref:System.Speech.Recognition.RecognizedPhrase> restituito da riconoscimento conterrà un <xref:System.Speech.Recognition.SemanticValue> con un <xref:System.Speech.Recognition.SemanticValue.Value%2A> di "green rosso blu". È possibile accedere il <xref:System.Speech.Recognition.SemanticValue> utilizzando il tag "code".  
  
 Causa dei `SemanticResultValue("zero", 5)` aggiunto al <xref:System.Speech.Recognition.GrammarBuilder>, la radice <xref:System.Speech.Recognition.SemanticValue> dell'oggetto nel <xref:System.Speech.Recognition.RecognizedPhrase> avrà un valore pari a 5.  
  
```csharp  
private void keyTest()   
{  
  // Say "color red green blue zero"  
  GrammarBuilder gb = new GrammarBuilder("color") +  
                        new SemanticResultKey("code",   
                          (new string[] {"red", "green", "blue"})) +  
                        new SemanticResultValue("zero", 5);  
  Grammar g = new Grammar(gb);  
  g.Name = "keyTest";  
  _recognizer.LoadGrammar(g);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultKey.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un'istanza di <see cref="T:System.Speech.Recognition.GrammarBuilder" /> costruita dall'istanza <see cref="T:System.Speech.Recognition.SemanticResultKey" /> corrente.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'utilizzo di <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> equivale all'utilizzo di <xref:System.Speech.Recognition.GrammarBuilder> costruttore che accetta <xref:System.Speech.Recognition.SemanticResultKey> come argomento (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Speech.Recognition.Grammar> oggetto che supporta i comandi per modificare il colore di sfondo.  
  
 Un <xref:System.Speech.Recognition.Choices> oggetto (`colorChoice`) contenente l'elenco di opzioni per i colori di sfondo viene riempito con il <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> metodo con <xref:System.Speech.Recognition.GrammarBuilder> istanze. Il <xref:System.Speech.Recognition.GrammarBuilder> le istanze vengono ottenute tramite il <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> metodo sul <xref:System.Speech.Recognition.SemanticResultValue> gli oggetti creati da stringhe di colori.  
  
 Un <xref:System.Speech.Recognition.GrammarBuilder> viene quindi ottenuto chiamando <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> in un <xref:System.Speech.Recognition.SemanticResultKey> istanza, che verrà utilizzato per le opzioni della semantiche della chiave `colorChoice`.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RGB.  
  // Choices constructors do not take SemanticResultValue parameters, so cast   
  // the SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  
    colorChoice.Add(colorValue.ToGrammarBuilder());      
  }  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with introductory phrase and the color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the Grammar object, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  
  grammar.Name = "Make Background /Configure background as";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>