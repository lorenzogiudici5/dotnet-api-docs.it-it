<Type Name="SemanticResultValue" FullName="System.Speech.Recognition.SemanticResultValue">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="653a138a06a6f44dd5fd94ba82b6a4bf339e421e" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48732699" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemanticResultValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultValue" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultValue" />
  <TypeSignature Language="F#" Value="type SemanticResultValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un valore semantico e facoltativamente associa il valore a un componente di una grammatica di riconoscimento vocale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sfrutta <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey> oggetti, unitamente <xref:System.Speech.Recognition.GrammarBuilder> e <xref:System.Speech.Recognition.Choices>, è il modo più semplice per progettare una struttura di semantica per un <xref:System.Speech.Recognition.Grammar>. Ottenendo un'istanza di cui si accede alle informazioni semantiche di una frase <xref:System.Speech.Recognition.SemanticValue>, tramite il <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> proprietà <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
> [!NOTE]
>  I valori gestiti da <xref:System.Speech.Recognition.SemanticResultValue> gli oggetti sono definiti da <xref:System.Object> istanze passati ai relativi costruttori. Il tipo sottostante di questo <xref:System.Object> deve essere `bool`, `int`, `float`, o `string`. Qualsiasi altro tipo impedirà la costruzione di un <xref:System.Speech.Recognition.Grammar> dell'istanza con il <xref:System.Speech.Recognition.SemanticResultValue>.  
  
 L'uso tipico di un <xref:System.Speech.Recognition.SemanticResultValue> istanza associa l'istanza a un componente riconoscibile di un <xref:System.Speech.Recognition.Grammar>, ad esempio una frase, una regola o un <xref:System.Speech.Recognition.Choices> oggetto. Se il componente associato viene usato come parte di un'operazione di riconoscimento di <xref:System.Speech.Recognition.SemanticResultValue> viene usato per definire un valore nella semantica della frase restituita.  
  
 Esistono due metodi di base per l'associazione di un <xref:System.Speech.Recognition.SemanticResultValue> istanza con un elemento di grammatica, a seconda del costruttore utilizzato per creare il <xref:System.Speech.Recognition.SemanticResultValue>.  
  
-   Se solo il valore (specificato da un'istanza di <xref:System.Object>) viene usato per costruire una <xref:System.Speech.Recognition.SemanticResultValue> oggetti, il <xref:System.Speech.Recognition.SemanticResultValue> è associato il componente di grammatica che hanno preceduto, oltre a un <xref:System.Speech.Recognition.GrammarBuilder> oggetto.  
  
     Ad esempio, nel frammento di codice che segue, se un <xref:System.Speech.Recognition.Grammar> costruiti usando questo <xref:System.Speech.Recognition.GrammarBuilder> istanza riconosce la parola "background", valore `true` è impostata nella semantica frase riconosciuta.  
  
    ```csharp  
    GrammarBuilder backgroundGB=new GrammarBuilder("background");  
    backgroundGB.Append(new SemanticResultValue(true));  
    ```  
  
     Per altre informazioni, vedere la descrizione dell'oggetto <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.  
  
-   Se una frase di valore di stringa o specifiche <xref:System.Speech.Recognition.GrammarBuilder> istanza viene utilizzato, insieme a un <xref:System.Object> che specifica un <xref:System.Speech.Recognition.SemanticResultValue> valore, che viene automaticamente associato la frase di valore di stringa valore o il <xref:System.Speech.Recognition.GrammarBuilder> istanza.  Se la frase o <xref:System.Speech.Recognition.GrammarBuilder> oggetto viene usato nel processo di riconoscimento, verrà assegnato il valore per semantica della frase riconosciuta.  
  
     Nell'esempio seguente viene illustrata questa situazione ed è funzionalmente equivalente all'esempio precedente, che utilizzato le chiamate esplicite ai <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> e <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>. Se la logica di riconoscimento utilizza la parola "background", il valore `true` verranno aggiunti alla semantica riconosciuta.  
  
    ```csharp  
    fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background", true));  
    ```  
  
     Per altre informazioni, vedere la descrizione della <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29> e <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>.  
  
 Per essere utilizzato da un <xref:System.Speech.Recognition.Grammar> nel riconoscimento, tutti i <xref:System.Speech.Recognition.SemanticResultValue> istanze devono essere associate a uno del <xref:System.Speech.Recognition.SemanticValue> oggetti utilizzati da tale <xref:System.Speech.Recognition.Grammar>. Questa operazione viene eseguita associando una chiave semantica con la <xref:System.Speech.Recognition.SemanticResultValue>.  
  
 Semantica delle chiavi possono essere collegate in modo esplicito a un <xref:System.Speech.Recognition.SemanticResultValue>, usando un <xref:System.Speech.Recognition.SemanticResultKey> oggetto.  <xref:System.Speech.Recognition.SemanticResultValue> le istanze non esplicitamente collegate a una chiave associate alla chiave radice del valore predefinito <xref:System.Speech.Recognition.SemanticValue>.  
  
 Dopo una <xref:System.Speech.Recognition.SemanticResultValue> è stato usato per impostare il <xref:System.Speech.Recognition.SemanticValue.Value%2A>, se viene contrassegnato con la chiave radice predefinito oppure qualsiasi particolare <xref:System.Speech.Recognition.SemanticResultKey>, tale valore non deve essere modificato o si verificherà un'eccezione durante le operazioni di riconoscimento.  
  
 Nell'esempio seguente genererà un'eccezione in quanto imposta e quindi modifica la radice <xref:System.Speech.Recognition.SemanticValue.Value%2A> di un <xref:System.Speech.Recognition.Grammar>.  
  
```csharp  
GrammarBuilder gb=new GrammarBuilder();  
gb.Append(new SemanticResultValue("One"));  
gb.Append(new SemanticResultValue("Two"));  
```  
  
 D'altra parte, il codice nell'esempio seguente è consentito. Anche se più istanze di definisce <xref:System.Speech.Recognition.SemanticResultValue>, sono inclusi in un <xref:System.Speech.Recognition.Choices> oggetto e solo uno verrà mai usato per impostare il valore della chiave `bgOrfgText`.  
  
```csharp  
Choices fgOrbgChoice = new Choices();  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background"));  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground"));  
SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgText", fgOrbgChoice);  
```
  
## Examples  
 Nell'esempio seguente viene restituito un <xref:System.Speech.Recognition.Grammar> che riconosce il comando "Set/modifica/Alter in primo piano/sfondo... [elenco di colori] ".  <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey> istanze (in combinazione con <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> oggetti) vengono usate per definire la semantica che può essere analizzata nel riconoscimento.  La semantica analizzata è determineranno quale colore è stato richiesto e se il primo piano o in background è da modificare.  
  
```  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(new SemanticResultValue(introGB, String.Format("Command: {0}", introString)));  
  }    
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                       cmdIntro,  
                       new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">Usando un SemanticResultKey per estrarre un SemanticResultValue</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.SemanticResultValue" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `SemanticResultValue` costruttori supportano l'indicazione di un <xref:System.Object> istanza con un tipo di dati sottostanti `bool`, `int`, `float`, o `string`.  
  
 Un costruttore può creare un `SemanticResultValue` istanza nei due casi:  
  
-   Il `SemanticResultValue` istanza deve essere associato in modo esplicito a un elemento di grammatica quando si usa un <xref:System.Speech.Recognition.GrammarBuilder> per costruire un <xref:System.Speech.Recognition.Grammar>.  
  
-   Il `SemanticResultValue` è già associato a una frase di valore di stringa o un <xref:System.Speech.Recognition.GrammarBuilder> oggetto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valore gestito da <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Deve essere di tipo <see langword="bool" />, <see langword="int" />, <see langword="float" /> o <see langword="string" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.SemanticResultValue" /> e specifica un valore semantico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto `SemanticResultValue` restituito da questo costruttore non è associato ad alcun elemento di grammatica particolare. L'associazione deve essere rese esplicita usando l'istanza del `SemanticResultValue` in combinazione con <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Ad esempio, nel frammento di codice che segue, se un <xref:System.Speech.Recognition.Grammar> costruiti usando questo <xref:System.Speech.Recognition.GrammarBuilder> istanza riconosce la parola "background", valore `true` è impostata nella semantica frase riconosciuta.  
  
```csharp  
GrammarBuilder backgroundGB=new GrammarBuilder("background");  
backgroundGB.Append(new SemanticResultValue(true));  
```  
  
   
  
## Examples  
 Nell'esempio seguente viene restituito un <xref:System.Speech.Recognition.Grammar> che riconosce il comando "Set/modifica/Alter in primo piano/sfondo... [elenco di colori] ". <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey> istanze (in combinazione con <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> oggetti) vengono usate per definire la semantica che può essere analizzata nel riconoscimento.  La semantica analizzata è determineranno quale colore è stato richiesto e se il primo piano o in background è da modificare.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
        cmdIntro,   
        new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Speech::Recognition::GrammarBuilder ^ builder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : System.Speech.Recognition.GrammarBuilder * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (builder, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="builder">Componente di grammatica da utilizzare nel riconoscimento.</param>
        <param name="value">Valore gestito da <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Deve essere di tipo <see langword="bool" />, <see langword="int" />, <see langword="float" /> o <see langword="string" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.SemanticResultValue" /> e associa un valore semantico a un oggetto <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'elemento della grammatica specificato da <xref:System.Speech.Recognition.GrammarBuilder> viene utilizzata per la logica di riconoscimento, `value` verrà impostato nella semantica dell'output riconosciuto.  
  
 Nel frammento di codice che segue, se la logica di riconoscimento costruito con la <xref:System.Speech.Recognition.GrammarBuilder> istanza (`myGb`) viene utilizzato il <xref:System.Speech.Recognition.Choices> oggetto (`myChoice`) per identificare input, il valore `true` viene aggiunto alla semantica riconosciuta.  
  
```csharp  
myGb.Append(new SemanticResultValue(myChoice, true);  
```  
  
 Come <xref:System.Speech.Recognition.GrammarBuilder> supporta la conversione implicita per <xref:System.Speech.Recognition.Choices>, `SemanticResultValue`, e <xref:System.Speech.Recognition.SemanticResultKey>, questo costruttore può usare anche tali oggetti.  
  
   
  
## Examples  
 Nell'esempio seguente viene restituito un <xref:System.Speech.Recognition.Grammar> che riconosce il comando "Set/modifica/Alter in primo piano/sfondo... [elenco di colori] ". <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey> istanze (in combinazione con <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> oggetti) vengono usate per definire la semantica che può essere analizzata nel riconoscimento.  La semantica analizzata è determineranno quale colore è stato richiesto e se il primo piano o in background è da modificare.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
    }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                      cmdIntro,  
                      new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (string phrase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::String ^ phrase, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : string * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (phrase, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="phrase">Frase da utilizzare nel riconoscimento.</param>
        <param name="value">Valore gestito da <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Deve essere di tipo <see langword="bool" />, <see langword="int" />, <see langword="float" /> o <see langword="string" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Speech.Recognition.SemanticResultValue" /> e associa un valore semantico a un oggetto <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se la stringa specificata da `phrase` viene utilizzata per la logica di riconoscimento, `value` verrà impostato nella semantica dell'output riconosciuto.  
  
 Nel frammento di codice seguente, se la logica di riconoscimento costruito con la <xref:System.Speech.Recognition.GrammarBuilder> istanza (`myGb`) viene utilizzata la stringa "my delle rate di mutuo" per identificare input, il valore `true` verranno aggiunti alla semantica riconosciuta.  
  
```csharp  
myGb.Append(new SemanticResultValue("my mortgage", true);  
```  
  
   
  
## Examples  
 Nell'esempio seguente viene restituito un <xref:System.Speech.Recognition.Grammar> che riconosce il comando "Set/modifica/Alter in primo piano/sfondo... [elenco di colori] ". <xref:System.Speech.Recognition.SemanticResultValue> e <xref:System.Speech.Recognition.SemanticResultKey> istanze (in combinazione con <xref:System.Speech.Recognition.Choices> e <xref:System.Speech.Recognition.GrammarBuilder> oggetti) vengono usate per definire la semantica che può essere analizzata nel riconoscimento.  La semantica analizzata è determineranno quale colore è stato richiesto e se il primo piano o in background è da modificare.  
  
```  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }  
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(cmdIntro,  
                         new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultValue.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un'istanza di <see cref="T:System.Speech.Recognition.GrammarBuilder" /> costruita dall'istanza <see cref="T:System.Speech.Recognition.SemanticResultValue" /> corrente.</summary>
        <returns>Restituisce un'istanza di <see cref="T:System.Speech.Recognition.GrammarBuilder" /> costruita dall'istanza <see cref="T:System.Speech.Recognition.SemanticResultValue" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'uso di <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> equivale a usare il <xref:System.Speech.Recognition.GrammarBuilder> costruttore che accetta un <xref:System.Speech.Recognition.SemanticResultValue> come argomento (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>).  
  
   
  
## Examples  
 L'esempio seguente crea <xref:System.Speech.Recognition.Grammar> gli oggetti che supportano i comandi per modificare il colore di sfondo.  
  
 Oggetto <xref:System.Speech.Recognition.Choices> oggetto (`colorChoice`) che contiene l'elenco di opzioni per i colori di sfondo viene riempito con il <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> metodo con <xref:System.Speech.Recognition.GrammarBuilder> istanze che vengono ottenute dal <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> metodo sul `SemanticResultValue` gli oggetti creati da stringhe a colori.  
  
 Oggetto <xref:System.Speech.Recognition.GrammarBuilder> viene quindi ottenuto chiamando <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> in un <xref:System.Speech.Recognition.SemanticResultKey> istanza, che verrà usato per le opzioni della semantiche della chiave di `colorChoice` istanza.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RBG.  
  // Choices constructors do not take a SemanticResultValue parameter, so  
  // cast SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    SemanticResultValue colorValue =   
        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
    colorChoice.Add(colorValue.ToGrammarBuilder());  
  }  
  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with an introductory phrase and the  
  // color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the final grammar, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  
  grammar.Name = "Set Background Color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>