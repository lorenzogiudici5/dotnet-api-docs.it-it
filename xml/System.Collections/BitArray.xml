<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BitArray.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5056363895a01ed4f3d85a3d6c19a8aa8cb07f553.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">056363895a01ed4f3d85a3d6c19a8aa8cb07f553</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.BitArray">
          <source>Manages a compact array of bit values, which are represented as Booleans, where <ph id="ph1">&lt;see langword="true" /&gt;</ph> indicates that the bit is on (1) and <ph id="ph2">&lt;see langword="false" /&gt;</ph> indicates the bit is off (0).</source>
          <target state="translated">Consente di gestire una matrice compatta di valori di bit, rappresentati come Boolean, dove <ph id="ph1">&lt;see langword="true" /&gt;</ph> indica che il bit è attivo (1), mentre <ph id="ph2">&lt;see langword="false" /&gt;</ph> indica che il bit è inattivo (0).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> class is a collection class in which the capacity is always the same as the count.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> è una classe di raccolta in cui la capacità è sempre lo stesso come il conteggio.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Elements are added to a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> by increasing the <ph id="ph2">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> property; elements are deleted by decreasing the <ph id="ph3">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> property.</source>
          <target state="translated">Gli elementi vengono aggiunti a un <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> aumentando il <ph id="ph2">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> proprietà; elementi sono stati eliminati, diminuendo il <ph id="ph3">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>The size of a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> is controlled by the client; indexing past the end of the <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> throws an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.The <ph id="ph4">&lt;xref:System.Collections.BitArray&gt;</ph> class provides methods that are not found in other collections, including those that allow multiple elements to be modified at once using a filter, such as <ph id="ph5">&lt;xref:System.Collections.BitArray.And%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.BitArray.Or%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Collections.BitArray.Xor%2A&gt;</ph> , <ph id="ph8">&lt;xref:System.Collections.BitArray.Not%2A&gt;</ph>, and <ph id="ph9">&lt;xref:System.Collections.BitArray.SetAll%2A&gt;</ph>.</source>
          <target state="translated">Le dimensioni di un <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> è controllata dal client; indicizzazione oltre la fine del <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> genera un <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>. Il <ph id="ph4">&lt;xref:System.Collections.BitArray&gt;</ph> classe fornisce metodi che non si trovano in altre raccolte, inclusi quelli che consentono di modificare contemporaneamente, ad esempio utilizzando un filtro, più elementi <ph id="ph5">&lt;xref:System.Collections.BitArray.And%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Collections.BitArray.Or%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Collections.BitArray.Xor%2A&gt;</ph> , <ph id="ph8">&lt;xref:System.Collections.BitArray.Not%2A&gt;</ph>e <ph id="ph9">&lt;xref:System.Collections.BitArray.SetAll%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> class is a structure that provides the same functionality as <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph>, but with faster performance.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> classe è una struttura che fornisce la stessa funzionalità <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph>, ma con prestazioni più veloci.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> is faster because it is a value type and therefore allocated on the stack, whereas <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> is a reference type and, therefore, allocated on the heap.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> non è più veloce perché è un tipo di valore e quindi allocato nello stack, mentre <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> è un tipo riferimento e, pertanto, allocati nell'heap.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32?displayProperty=nameWithType&gt;</ph> can store exactly 32 bits, whereas <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> can store a variable number of bits.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32?displayProperty=nameWithType&gt;</ph> Consente di archiviare esattamente a 32 bit, mentre <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph> può archiviare un numero variabile di bit.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> stores both bit flags and small integers, thereby making it ideal for data that is not exposed to the user.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> Archivia i flag di bit e i valori interi piccoli, rendendo in tal modo ideale per i dati che non sono esposta all'utente.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>However, if the number of required bit flags is unknown, is variable, or is greater than 32, use <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> instead.</source>
          <target state="translated">Tuttavia, se il numero di flag di bit richiesto è sconosciuto, variabile o è maggiore di 32, utilizzare <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> invece.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> is in the <ph id="ph2">&lt;xref:System.Collections&gt;</ph> namespace; <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> is in the <ph id="ph4">&lt;xref:System.Collections.Specialized&gt;</ph> namespace.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> nel <ph id="ph2">&lt;xref:System.Collections&gt;</ph> spazio dei nomi. <ph id="ph3">&lt;xref:System.Collections.Specialized.BitVector32&gt;</ph> è il <ph id="ph4">&lt;xref:System.Collections.Specialized&gt;</ph> dello spazio dei nomi.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Elements in this collection can be accessed using an integer index.</source>
          <target state="translated">Elementi nella raccolta è accessibile tramite un indice intero.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Indexes in this collection are zero-based.</source>
          <target state="translated">Gli indici in questa raccolta sono in base zero.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>The following code example shows how to create and initialize a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> and how to print out its values.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come creare e inizializzare un <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> e come stampare i relativi valori.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">Statici pubblici (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) di questo tipo sono thread-safe.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">I membri di istanza non sono garantiti come thread-safe.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>This implementation does not provide a synchronized (thread safe) wrapper for a <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Questa implementazione non fornisce un oggetto sincronizzato wrapper (thread-safe) per un <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">L'enumerazione di una raccolta non è di per sé una procedura thread-safe.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Anche se una raccolta è sincronizzata, è possibile che venga modificata da altri thread, con conseguente generazione di un'eccezione da parte dell'enumeratore.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.BitArray">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Per garantire la protezione dei thread durante l'enumerazione, è possibile bloccare la raccolta per l'intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.Collections.BitArray">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class whose capacity and initial values can be specified.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> di cui è possibile specificare la capacità e i valori iniziali.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Boolean[])">
          <source>An array of Booleans to copy.</source>
          <target state="translated">Matrice di valori booleani da copiare.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Boolean[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class that contains bit values copied from the specified array of Booleans.</source>
          <target state="translated">Consente l'inizializzazione di una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> contenente i valori di bit copiati dalla matrice specificata di valori Boolean.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Boolean[])">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`values`</ph>.</source>
          <target state="translated">Questo costruttore è un'operazione O (<ph id="ph1">`n`</ph>) operazione, in cui <ph id="ph2">`n`</ph> è il numero di elementi in <ph id="ph3">`values`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Boolean[])">
          <source><ph id="ph1">&lt;paramref name="values" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source>An array of bytes containing the values to copy, where each byte represents eight consecutive bits.</source>
          <target state="translated">Matrice di byte contenente i valori da copiare, dove ogni byte rappresenta otto bit consecutivi.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class that contains bit values copied from the specified array of bytes.</source>
          <target state="translated">Consente l'inizializzazione di una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> contenente i valori di bit copiati dalla matrice di byte specificata.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source>The first byte in the array represents bits 0 through 7, the second byte represents bits 8 through 15, and so on.</source>
          <target state="translated">Il primo byte nella matrice rappresenta bit da 0 a 7, il secondo byte rappresenta 8 a 15 bit e così via.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source>The Least Significant Bit of each byte represents the lowest index value: " <ph id="ph1">`bytes`</ph> [0] &amp; 1" represents bit 0, " <ph id="ph2">`bytes`</ph> [0] &amp; 2" represents bit 1, " <ph id="ph3">`bytes`</ph> [0] &amp; 4" represents bit 2, and so on.</source>
          <target state="translated">Il Bit meno significativo di ogni byte rappresenta il valore di indice più basso: " <ph id="ph1">`bytes`</ph> [0] &amp; 1" rappresenta il bit 0, " <ph id="ph2">`bytes`</ph> [0] &amp; 2" rappresenta il bit 1, " <ph id="ph3">`bytes`</ph> [0] &amp; 4" rappresenta il bit 2 e così via.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`bytes`</ph>.</source>
          <target state="translated">Questo costruttore è un'operazione O (<ph id="ph1">`n`</ph>) operazione, in cui <ph id="ph2">`n`</ph> è il numero di elementi in <ph id="ph3">`bytes`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Byte[])">
          <source>The length of <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">La lunghezza di <ph id="ph1">&lt;paramref name="bytes" /&gt;</ph> è maggiore di <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> to copy.</source>
          <target state="translated">La <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> da copiare.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class that contains bit values copied from the specified <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Consente l'inizializzazione di una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> contenente i valori di bit copiati dalla <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> specificata.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`bits`</ph>.</source>
          <target state="translated">Questo costruttore è un'operazione O (<ph id="ph1">`n`</ph>) operazione, in cui <ph id="ph2">`n`</ph> è il numero di elementi in <ph id="ph3">`bits`</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="bits" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bits" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32)">
          <source>The number of bit values in the new <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Il numero di valori di bit nella nuova <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class that can hold the specified number of bit values, which are initially set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Consente l'inizializzazione di una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> che può contenere il numero specificato di valori di bit, inizialmente impostato su <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Int32)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`length`</ph>.</source>
          <target state="translated">Questo costruttore è un'operazione O (<ph id="ph1">`n`</ph>) operazione, in cui <ph id="ph2">`n`</ph> è <ph id="ph3">`length`</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="length" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> è minore di zero.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source>An array of integers containing the values to copy, where each integer represents 32 consecutive bits.</source>
          <target state="translated">Matrice di valori interi contenente i valori da copiare, dove ogni valore rappresenta 32 bit consecutivi.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class that contains bit values copied from the specified array of 32-bit integers.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> contenente i valori di bit copiati dalla matrice specificata di valori interi a 32 bit.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source>The number in the first <ph id="ph1">`values`</ph> array element represents bits 0 through 31, the second number in the array represents bits 32 through 63, and so on.</source>
          <target state="translated">Il numero nel primo <ph id="ph1">`values`</ph> elemento della matrice rappresenta bit da 0 a 31, il secondo numero nella matrice di bit da 32 a 63 e così via.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source>The Least Significant Bit of each integer represents the lowest index value: " <ph id="ph1">`values`</ph> [0] &amp; 1" represents bit 0, " <ph id="ph2">`values`</ph> [0] &amp; 2" represents bit 1, " <ph id="ph3">`values`</ph> [0] &amp; 4" represents bit 2, and so on.</source>
          <target state="translated">Il Bit meno significativo di ogni valore integer rappresenta il valore di indice più basso: " <ph id="ph1">`values`</ph> [0] &amp; 1" rappresenta il bit 0, " <ph id="ph2">`values`</ph> [0] &amp; 2" rappresenta il bit 1, " <ph id="ph3">`values`</ph> [0] &amp; 4" rappresenta il bit 2 e così via.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`values`</ph>.</source>
          <target state="translated">Questo costruttore è un'operazione O (<ph id="ph1">`n`</ph>) operazione, in cui <ph id="ph2">`n`</ph> è il numero di elementi in <ph id="ph3">`values`</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source><ph id="ph1">&lt;paramref name="values" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32[])">
          <source>The length of <ph id="ph1">&lt;paramref name="values" /&gt;</ph> is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph></source>
          <target state="translated">La lunghezza di <ph id="ph1">&lt;paramref name="values" /&gt;</ph> è maggiore di <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
          <source>The number of bit values in the new <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Il numero di valori di bit nella nuova <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
          <source>The Boolean value to assign to each bit.</source>
          <target state="translated">Valore booleano da assegnare a ogni bit.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> class that can hold the specified number of bit values, which are initially set to the specified value.</source>
          <target state="translated">Consente l'inizializzazione di una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> che può contenere il numero specificato di valori di bit , inizialmente impostato sul valore specificato.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`length`</ph>.</source>
          <target state="translated">Questo costruttore è un'operazione O (<ph id="ph1">`n`</ph>) operazione, in cui <ph id="ph2">`n`</ph> è <ph id="ph3">`length`</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="length" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="length" /&gt;</ph> è minore di zero.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>The array with which to perform the bitwise AND operation.</source>
          <target state="translated">L'array con il quale eseguire l'operazione AND bit per bit.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>Performs the bitwise AND operation between the elements of the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object and the corresponding elements in the specified array.</source>
          <target state="translated">Esegue l'operazione con AND bit per bit tra gli elementi dell'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> corrente e gli elementi corrispondenti nella matrice specificata.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object will be modified to store the result of the bitwise AND operation.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> corrente verrà modificato per archiviare il risultato dell'operazione con AND bit per bit.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>An array containing the result of the bitwise AND operation, which is a reference to the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object.</source>
          <target state="translated">Matrice contenente il risultato dell'operazione con AND bit per bit, che è un riferimento all'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>The bitwise AND operation returns <ph id="ph1">`true`</ph> if both operands are <ph id="ph2">`true`</ph>, and returns <ph id="ph3">`false`</ph> if one or both operands are <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Restituisce l'operazione AND bit per bit <ph id="ph1">`true`</ph> se entrambi gli operandi sono <ph id="ph2">`true`</ph>e restituisce <ph id="ph3">`false`</ph> se uno o entrambi gli operandi sono <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Questo metodo è un'operazione O (<ph id="ph1">`n`</ph>) operazione, in cui <ph id="ph2">`n`</ph> è <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source>The following code example shows how to perform the bitwise AND operation between two <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> objects.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come eseguire l'operazione AND bit per bit tra due <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> oggetti.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.And(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> and the current <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> do not have the same number of elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> e la <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> corrente non contengono lo stesso numero di elementi.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Clone">
          <source>Creates a shallow copy of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Crea una copia superficiale di <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Clone">
          <source>A shallow copy of the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Copia superficiale di <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Clone">
          <source>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</source>
          <target state="translated">Una copia superficiale di un insieme di copia solo gli elementi della raccolta, se sono tipi di riferimento o tipi di valore, ma non copia gli oggetti che fanno riferimento i riferimenti.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Clone">
          <source>The references in the new collection point to the same objects that the references in the original collection point to.</source>
          <target state="translated">I riferimenti nella nuova raccolta puntano agli stessi oggetti che puntano i riferimenti nella raccolta originale.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Clone">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">Al contrario, una copia completa di una raccolta copia gli elementi e tutti gli elementi direttamente o indirettamente a cui fa riferimento gli elementi.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Clone">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Questo metodo è un'operazione O (<ph id="ph1">`n`</ph>) operazione, in cui <ph id="ph2">`n`</ph> è <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensionale che rappresenta la destinazione degli elementi copiati dall'oggetto <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">L'indicizzazione di <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> deve essere in base zero.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Indice in base zero in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> in corrispondenza del quale ha inizio la copia.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> to a compatible one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified index of the target array.</source>
          <target state="translated">Copia l'intero oggetto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> in un oggetto <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> compatibile unidimensionale, a partire dall'indice specificato della matrice di destinazione.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The specified array must be of a compatible type.</source>
          <target state="translated">La matrice specificata deve essere di un tipo compatibile.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>Only <ph id="ph1">`bool`</ph>, <ph id="ph2">`int`</ph>, and <ph id="ph3">`byte`</ph> types of arrays are supported.</source>
          <target state="translated">Solo <ph id="ph1">`bool`</ph>, <ph id="ph2">`int`</ph>, e <ph id="ph3">`byte`</ph> sono supportati i tipi di matrici.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>This method uses <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> to copy the elements.</source>
          <target state="translated">Questo metodo utilizza <ph id="ph1">&lt;xref:System.Array.Copy%2A?displayProperty=nameWithType&gt;</ph> per copiare gli elementi.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Questo metodo è un'operazione O (<ph id="ph1">`n`</ph>) operazione, in cui <ph id="ph2">`n`</ph> è <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The following code example shows how to copy a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> into a one-dimensional <ph id="ph2">&lt;xref:System.Array&gt;</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come copiare un <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> in una matrice unidimensionale <ph id="ph2">&lt;xref:System.Array&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> è minore di zero.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> è multidimensionale.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Il numero di elementi nell'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> di origine è maggiore dello spazio disponibile tra <ph id="ph2">&lt;paramref name="index" /&gt;</ph> e la fine dell'oggetto <ph id="ph3">&lt;paramref name="array" /&gt;</ph> di destinazione.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Non è possibile eseguire il cast automatico del tipo dell'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> di origine al tipo dell'oggetto <ph id="ph2">&lt;paramref name="array" /&gt;</ph> di destinazione.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Ottiene il numero di elementi contenuti in <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Il numero di elementi contenuti in <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> return the same value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> restituiscono lo stesso valore.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> can be set to a specific value, but <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> può essere impostata su un valore specifico, ma <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> è di sola lettura.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">Il recupero del valore di questa proprietà è un'operazione O(1).</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source>The zero-based index of the value to get.</source>
          <target state="translated">Indice in base zero del valore da ottenere.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source>Gets the value of the bit at a specific position in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Ottiene il valore del bit in una posizione specifica nella <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source>The value of the bit at position <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</source>
          <target state="translated">Il valore del bit nella posizione <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Questo metodo è un'operazione o (1).</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source>The following code example shows how to set and get specific elements in a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come impostare e ottenere elementi specifici in un <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> è minore di zero.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Get(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than or equal to the number of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> è maggiore o uguale al numero di elementi della <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Restituisce un enumeratore che esegue l'iterazione di <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> for the entire <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> per l'intera <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">L'istruzione <ph id="ph1">`foreach`</ph> del linguaggio C# (<ph id="ph2">`for each`</ph> in Visual Basic) nasconde la complessità degli enumeratori.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Pertanto, si consiglia l'utilizzo di <ph id="ph1">`foreach`</ph>, anziché la modifica diretta dell'enumeratore.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">È possibile utilizzare enumeratori per leggere i dati nella raccolta, ma non per modificare la raccolta sottostante.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Inizialmente l'enumeratore è posizionato davanti al primo elemento della raccolta.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated">Anche il metodo <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> riporta l'enumeratore in questa posizione.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">In questa posizione, la proprietà <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> è indefinita.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Pertanto, è necessario chiamare il metodo <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> per spostare in avanti l'enumeratore, in corrispondenza del primo elemento della raccolta, prima di leggere il valore di <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> restituisce lo stesso oggetto finché non viene chiamato il metodo <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> o <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> imposta <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> sull'elemento successivo.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> raggiunge la fine della raccolta, l'enumeratore è posizionato dopo l'ultimo elemento nella raccolta e <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> restituisce <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Quando l'enumeratore si trova in questa posizione, le chiamate successive a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> restituire anche <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Se l'ultima chiamata a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> restituito <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> è definito.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Per impostare nuovamente la proprietà <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> sul primo elemento della raccolta, è possibile chiamare il metodo <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> seguito da <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumeratore rimane valido fino a quando la raccolta non subisce modifiche.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">In caso di modifiche alla raccolta, ad esempio aggiunta, modifica o eliminazione di elementi, l'enumeratore sarà reso non valido in modo irreversibile e il comportamento corrispondente non sarà definito.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">L'enumeratore non dispone di accesso esclusivo alla raccolta. L'enumerazione di una raccolta non è quindi una procedura thread-safe.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Per assicurare la protezione del thread durante l'enumerazione, è possibile bloccare la raccolta durante l'intera enumerazione.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Per consentire l'accesso alla raccolta in lettura e scrittura da parte di più thread, è necessario implementare la propria sincronizzazione.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Questo metodo è un'operazione o (1).</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> is read-only.</source>
          <target state="translated">Ottiene un valore che indica se <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> è di sola lettura.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsReadOnly">
          <source>This property is always <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Questa proprietà è sempre <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsReadOnly">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Collections.BitArray.IsReadOnly%2A&gt;</ph> property because it is required by the <ph id="ph3">&lt;xref:System.Collections.IList?displayProperty=nameWithType&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> implementa il <ph id="ph2">&lt;xref:System.Collections.BitArray.IsReadOnly%2A&gt;</ph> proprietà perché è necessaria per il <ph id="ph3">&lt;xref:System.Collections.IList?displayProperty=nameWithType&gt;</ph> interfaccia.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">Una raccolta di sola lettura non consente l'aggiunta, la rimozione o la modifica di elementi dopo la sua creazione.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">Una raccolta di sola lettura è semplicemente una raccolta con un wrapper che impedisce la modifica. Pertanto, se vengono apportate modifiche alla raccolta sottostante, la raccolta di sola lettura riflette le modifiche.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsReadOnly">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Questo metodo è un'operazione o (1).</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">Ottiene un valore che indica se l'accesso a <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> è sincronizzato (thread-safe).</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>This property is always <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Questa proprietà è sempre <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> implements the <ph id="ph2">&lt;xref:System.Collections.BitArray.IsSynchronized%2A&gt;</ph> property because it is required by the <ph id="ph3">&lt;xref:System.Collections.ICollection?displayProperty=nameWithType&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> implementa il <ph id="ph2">&lt;xref:System.Collections.BitArray.IsSynchronized%2A&gt;</ph> proprietà perché è necessaria per il <ph id="ph3">&lt;xref:System.Collections.ICollection?displayProperty=nameWithType&gt;</ph> interfaccia.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">L'enumerazione di una raccolta non è di per sé una procedura thread-safe.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Anche se una raccolta è sincronizzata, è possibile che venga modificata da altri thread, con conseguente generazione di un'eccezione da parte dell'enumeratore.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Per garantire la protezione dei thread durante l'enumerazione, è possibile bloccare la raccolta per l'intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come bloccare la raccolta utilizzando la <ph id="ph1">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> durante l'intera enumerazione.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.IsSynchronized">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Questo metodo è un'operazione o (1).</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>The zero-based index of the value to get or set.</source>
          <target state="translated">Indice in base zero del valore da ottenere o impostare.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>Gets or sets the value of the bit at a specific position in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Ottiene o imposta il valore del bit in una specifica posizione nella <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>The value of the bit at position <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</source>
          <target state="translated">Il valore del bit nella posizione <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[index]`</ph>.</source>
          <target state="translated">Questa proprietà consente di accedere a un elemento specifico della raccolta utilizzando la sintassi seguente: <ph id="ph1">`myCollection[index]`</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.BitArray.Item%2A&gt;</ph> property.</source>
          <target state="translated">Nel linguaggio c# viene utilizzata la parola chiave per definire gli indicizzatori anziché implementare la <ph id="ph1">&lt;xref:System.Collections.BitArray.Item%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.BitArray.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">In Visual Basic la proprietà <ph id="ph1">&lt;xref:System.Collections.BitArray.Item%2A&gt;</ph> viene implementata come predefinita per fornire la stessa funzionalità di indicizzazione.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</source>
          <target state="translated">Il recupero del valore di questa proprietà è un'operazione o (1). l'impostazione della proprietà è un'operazione o (1).</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> è minore di zero.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is equal to or greater than <ph id="ph2">&lt;see cref="P:System.Collections.BitArray.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> è uguale a o maggiore di <ph id="ph2">&lt;see cref="P:System.Collections.BitArray.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Length">
          <source>Gets or sets the number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Ottiene o imposta il numero di elementi nella <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source>The number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Numero di elementi in <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> return the same value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> restituiscono lo stesso valore.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> can be set to a specific value, but <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> può essere impostata su un valore specifico, ma <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph> è di sola lettura.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source>If <ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> is set to a value that is less than <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>, the <ph id="ph3">&lt;xref:System.Collections.BitArray&gt;</ph> is truncated and the elements after the index <ph id="ph4">`value`</ph> -1 are deleted.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> è impostata su un valore che è minore di <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.BitArray&gt;</ph> viene troncato e gli elementi dopo l'indice <ph id="ph4">`value`</ph> -1 vengono eliminati.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source>If <ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> is set to a value that is greater than <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>, the new elements are set to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Collections.BitArray.Length%2A&gt;</ph> è impostata su un valore maggiore di <ph id="ph2">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>, i nuovi elementi sono impostati su <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">Il recupero del valore di questa proprietà è un'operazione O(1).</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.Length">
          <source>Setting this property is an O(<ph id="ph1">`n`</ph>) operation.</source>
          <target state="translated">Impostazione di questa proprietà è un'operazione O (<ph id="ph1">`n`</ph>) operazione.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.Length">
          <source>The property is set to a value that is less than zero.</source>
          <target state="translated">La proprietà è impostata su un valore minore di zero.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Not">
          <source>Inverts all the bit values in the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>, so that elements set to <ph id="ph2">&lt;see langword="true" /&gt;</ph> are changed to <ph id="ph3">&lt;see langword="false" /&gt;</ph>, and elements set to <ph id="ph4">&lt;see langword="false" /&gt;</ph> are changed to <ph id="ph5">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">Consente di invertire tutti i valori dei bit nella <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> corrente in modo che gli elementi impostati su <ph id="ph2">&lt;see langword="true" /&gt;</ph> diventino <ph id="ph3">&lt;see langword="false" /&gt;</ph> e gli elementi impostati su <ph id="ph4">&lt;see langword="false" /&gt;</ph> diventino <ph id="ph5">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Not">
          <source>The current instance with inverted bit values.</source>
          <target state="translated">Istanza corrente con i valori di bit invertiti.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Not">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Questo metodo è un'operazione O (<ph id="ph1">`n`</ph>) operazione, in cui <ph id="ph2">`n`</ph> è <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Not">
          <source>The following code example shows how to apply NOT to a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come applicare non a un <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>The array with which to perform the bitwise OR operation.</source>
          <target state="translated">Matrice con cui eseguire l'operazione OR bit per bit.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>Performs the bitwise OR operation between the elements of the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object and the corresponding elements in the specified array.</source>
          <target state="translated">Esegue l'operazione con OR bit per bit tra gli elementi dell'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> corrente e gli elementi corrispondenti nella matrice specificata.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object will be modified to store the result of the bitwise OR operation.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> corrente verrà modificato per archiviare il risultato dell'operazione con OR bit per bit.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>An array containing the result of the bitwise OR operation, which is a reference to the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object.</source>
          <target state="translated">Matrice contenente il risultato dell'operazione con OR bit per bit, che è un riferimento all'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>The bitwise OR operation returns <ph id="ph1">`true`</ph> if one or both operands are <ph id="ph2">`true`</ph>, and returns <ph id="ph3">`false`</ph> if both operands are <ph id="ph4">`false`</ph>.</source>
          <target state="translated">L'operazione OR bit per bit restituisce <ph id="ph1">`true`</ph> se uno o entrambi gli operandi sono <ph id="ph2">`true`</ph>e restituisce <ph id="ph3">`false`</ph> se entrambi gli operandi sono <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Questo metodo è un'operazione O (<ph id="ph1">`n`</ph>) operazione, in cui <ph id="ph2">`n`</ph> è <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source>The following code example shows how to perform the OR operation between two <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> objects.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come eseguire l'operazione di OR tra due <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> oggetti.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> and the current <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> do not have the same number of elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> e la <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> corrente non contengono lo stesso numero di elementi.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source>The zero-based index of the bit to set.</source>
          <target state="translated">Indice in base zero del bit da impostare.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source>The Boolean value to assign to the bit.</source>
          <target state="translated">Valore booleano da assegnare al bit.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source>Sets the bit at a specific position in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> to the specified value.</source>
          <target state="translated">Imposta il bit in una posizione specifica nella <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> sul valore specificato.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Questo metodo è un'operazione o (1).</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source>The following code example shows how to set and get specific elements in a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come impostare e ottenere elementi specifici in un <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> è minore di zero.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than or equal to the number of elements in the <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> è maggiore o uguale al numero di elementi della <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.SetAll(System.Boolean)">
          <source>The Boolean value to assign to all bits.</source>
          <target state="translated">Valore booleano da assegnare a tutti i bit.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.SetAll(System.Boolean)">
          <source>Sets all bits in the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> to the specified value.</source>
          <target state="translated">Imposta tutti i bit della <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> sul valore specificato.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.SetAll(System.Boolean)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Questo metodo è un'operazione O (<ph id="ph1">`n`</ph>) operazione, in cui <ph id="ph2">`n`</ph> è <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.SetAll(System.Boolean)">
          <source>The following code example shows how to set and get specific elements in a <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come impostare e ottenere elementi specifici in un <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="P:System.Collections.BitArray.SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</source>
          <target state="translated">Oggetto che può essere usato per sincronizzare l'accesso a <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>Derived classes can provide their own synchronized version of the <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> using the <ph id="ph2">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> property.</source>
          <target state="translated">Classi derivate possono fornire una propria versione sincronizzata del <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> utilizzando il <ph id="ph2">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>The synchronizing code must perform operations on the <ph id="ph1">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph>, not directly on the <ph id="ph3">&lt;xref:System.Collections.BitArray&gt;</ph>.</source>
          <target state="translated">Il codice di sincronizzazione è necessario eseguire operazioni sul <ph id="ph1">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> del <ph id="ph2">&lt;xref:System.Collections.BitArray&gt;</ph>, non direttamente sul <ph id="ph3">&lt;xref:System.Collections.BitArray&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">In questo modo si garantisce il corretto funzionamento delle raccolte derivate da altri oggetti.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> object.</source>
          <target state="translated">In particolare, viene mantenuta la sincronizzazione con altri thread che potrebbero modificare contemporaneamente il <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">L'enumerazione di una raccolta non è di per sé una procedura thread-safe.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Anche se una raccolta è sincronizzata, è possibile che venga modificata da altri thread, con conseguente generazione di un'eccezione da parte dell'enumeratore.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Per garantire la protezione dei thread durante l'enumerazione, è possibile bloccare la raccolta per l'intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come bloccare la raccolta utilizzando la <ph id="ph1">&lt;xref:System.Collections.BitArray.SyncRoot%2A&gt;</ph> durante l'intera enumerazione.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.BitArray.SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">Il recupero del valore di questa proprietà è un'operazione O(1).</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>The array with which to perform the bitwise exclusive OR operation.</source>
          <target state="translated">La matrice con la quale eseguire l'operazione OR esclusivo bit per bit.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>Performs the bitwise exclusive OR operation between the elements of the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object against the corresponding elements in the specified array.</source>
          <target state="translated">Esegue l'operazione con OR esclusivo bit per bit tra gli elementi dell'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> corrente e gli elementi corrispondenti nella matrice specificata.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object will be modified to store the result of the bitwise exclusive OR operation.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> corrente verrà modificato per archiviare il risultato dell'operazione con OR esclusivo bit per bit.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> object.</source>
          <target state="translated">Matrice contenente il risultato dell'operazione con OR esclusivo bit per bit, che è un riferimento all'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>The bitwise exclusive OR operation returns <ph id="ph1">`true`</ph> if exactly one operand is <ph id="ph2">`true`</ph>, and returns <ph id="ph3">`false`</ph> if both operands have the same Boolean value.</source>
          <target state="translated">L'operazione di OR esclusivo bit per bit restituisce <ph id="ph1">`true`</ph> se uno degli operandi è <ph id="ph2">`true`</ph>e restituisce <ph id="ph3">`false`</ph> se entrambi gli operandi hanno lo stesso valore booleano.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</source>
          <target state="translated">Questo metodo è un'operazione O (<ph id="ph1">`n`</ph>) operazione, in cui <ph id="ph2">`n`</ph> è <ph id="ph3">&lt;xref:System.Collections.BitArray.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source>The following code example shows how to perform the XOR operation between two <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> objects.</source>
          <target state="translated">Esempio di codice seguente viene illustrato come eseguire l'operazione XOR tra due <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> oggetti.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> and the current <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> do not have the same number of elements.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> e la <ph id="ph2">&lt;see cref="T:System.Collections.BitArray" /&gt;</ph> corrente non contengono lo stesso numero di elementi.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>