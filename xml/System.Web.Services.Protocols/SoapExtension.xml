<Type Name="SoapExtension" FullName="System.Web.Services.Protocols.SoapExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="78693401e78bfd83c0c064c1b8ffff53187f54ea" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51862383" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class SoapExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SoapExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SoapExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapExtension abstract" />
  <TypeSignature Language="F#" Value="type SoapExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Classe base per le estensioni SOAP relative ai servizi Web XML creati utilizzando ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET offre un'infrastruttura basate su SOAP da compilare tramite un meccanismo di estensibilità. L'architettura dell'estensione SOAP di ASP.NET si basa su un'estensione che può controllare o modificare un messaggio in specifiche fasi nel client o il server di elaborazione dei messaggi.  
  
 Le estensioni ASP.NET SOAP derivano dal <xref:System.Web.Services.Protocols.SoapExtension> classe. Il <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> e <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> metodi forniscono meccanismi alternativi per inizializzare l'estensione SOAP per migliorare le prestazioni. <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> è il fulcro della maggior parte delle estensioni SOAP, come il metodo viene chiamato in ogni fase definita nel <xref:System.Web.Services.Protocols.SoapMessageStage>, consentendo l'estensione SOAP per eseguire il comportamento desiderato dell'estensione SOAP specifiche. Per le estensioni SOAP che è necessario modificano la richiesta o risposta SOAP, <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> offre l'opportunità di ricevere i dati proposti da inviare in rete.  
  
   
  
## Examples  
 Nell'esempio `TraceExtension` l'estensione SOAP invia la richiesta e risposta SOAP in un file specificato quando viene applicato a un metodo di servizio Web XML. Se l'estensione SOAP seguente viene installata per l'esecuzione con un servizio Web XML, l'account utente ASPNET deve disporre delle autorizzazioni di scrittura nella directory in cui è scritto il file di log.  
  
 [!code-cpp[Classic SoapExtension Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Services.Protocols.SoapMessageStage" />
    <altmember cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
    <altmember cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SoapExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SoapExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.Services.Protocols.SoapExtension" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChainStream">
      <MemberSignature Language="C#" Value="public virtual System.IO.Stream ChainStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream ChainStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IO::Stream ^ ChainStream(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="abstract member ChainStream : System.IO.Stream -&gt; System.IO.Stream&#xA;override this.ChainStream : System.IO.Stream -&gt; System.IO.Stream" Usage="soapExtension.ChainStream stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Buffer di memoria contenente la richiesta o la risposta SOAP.</param>
        <summary>Quando se ne esegue l'override in una classe derivata, consente a un'estensione SOAP di accedere al buffer di memoria contenente la richiesta o la risposta SOAP.</summary>
        <returns>Oggetto <see cref="T:System.IO.Stream" /> che rappresenta un nuovo buffer di memoria che può essere modificato dall'estensione SOAP.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> garantisce che le estensioni SOAP con la priorità più alta possano modificare i dati effettivi più vicini di messaggio SOAP inviato o restituite in rete.  
  
 Le estensioni SOAP devono salvare riferimenti del <xref:System.IO.Stream> passati <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> e il <xref:System.IO.Stream> restituiti da <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A>. Se l'estensione SOAP viene configurata per l'esecuzione con un metodo del servizio Web XML, il <xref:System.IO.Stream> passati <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> contiene la richiesta SOAP serializzata nel <xref:System.Web.Services.Protocols.SoapMessageStage.BeforeDeserialize> <xref:System.Web.Services.Protocols.SoapMessageStage>. Analogamente, il <xref:System.IO.Stream> riferimento restituito dal <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> viene scritto quando la serializzazione viene eseguita e quindi contiene la risposta SOAP serializzata nel <xref:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize> <xref:System.Web.Services.Protocols.SoapMessageStage>.  
  
   
  
## Examples  
 L'esempio seguente salva sia la <xref:System.IO.Stream> passati <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> e il <xref:System.IO.Stream> restituito da <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A> nelle variabili membro `oldStream` e `newStream`rispettivamente.  
  
 [!code-cpp[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.ChainStream Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.ChainStream Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInitializer">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Quando se ne esegue l'override in una classe derivata, consente a un'estensione SOAP di inizializzare i dati specifici di un servizio Web XML, incidendo una sola volta sulle prestazioni.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInitializer (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetInitializer(Type ^ serviceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializer : Type -&gt; obj" Usage="soapExtension.GetInitializer serviceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Tipo della classe che implementa il servizio Web XML a cui viene applicata l'estensione SOAP.</param>
        <summary>Quando se ne esegue l'override in una classe derivata, consente a un'estensione SOAP di inizializzare i dati specifici di una classe implementando un servizio Web XML, incidendo una sola volta sulle prestazioni.</summary>
        <returns>Oggetto <see cref="T:System.Object" /> inizializzato dall'estensione SOAP per l'inserimento nella cache.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'overload del metodo <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> che viene chiamato da ASP.NET dipende dal modo in cui è stata specificata l'estensione SOAP. Esistono due metodi per la specifica di un'estensione SOAP:  
  
-   Applicare un attributo personalizzato, che deriva da <xref:System.Web.Services.Protocols.SoapExtensionAttribute>, al metodo del servizio Web XML singoli.  
  
-   Aggiungere un riferimento nel file di configurazione Web. config o App. config.  
  
 Se si aggiunge un riferimento a uno dei file di configurazione, l'estensione SOAP viene eseguita per tutti i servizi Web XML all'interno dell'ambito di tale file di configurazione. Quando si specifica, un'estensione SOAP facendo riferimento a un file di configurazione ASP.NET richiama il <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> overload che passa un <xref:System.Type>. Quando si specifica un'estensione applicando un attributo personalizzato, ASP.NET richiama il <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> che passa in un <xref:System.Web.Services.Protocols.LogicalMethodInfo> e un <xref:System.Web.Services.Protocols.SoapExtensionAttribute>.  
  
 Per altre informazioni sull'aggiunta di estensioni SOAP da un file di configurazione, vedere [ &#91; \<topic://cpconconfigurationoptionsforaspnetwebservices >&#93;](https://msdn.microsoft.com/library/1f0d71bc-8faa-4730-b500-2a6c7b5d4f6b).  
  
   
  
## Examples  
 Nel codice seguente viene illustrato come salvare dati specifici dell'estensione SOAP in un per il singolo servizio Web XML. Se l'estensione SOAP è configurata utilizzando un file di configurazione anziché un attributo, l'estensione SOAP può archiviare i dati per ogni classe in cui viene applicata l'estensione SOAP. In questo esempio consente di salvare il nome di un file in cui registrare i messaggi SOAP inviati da e verso il metodo del servizio Web XML in base al nome della classe che implementa il servizio Web XML nella cache. Questo esempio di codice è parte di un esempio di codice completo per un'estensione SOAP TraceExtension che può essere trovato nel <xref:System.Web.Services.Protocols.SoapExtension> Cenni preliminari sulla classe.  
  
 [!code-cpp[SoapExtension.GetInitializer-Type#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/CPP/traceextension.cpp#1)]
 [!code-csharp[SoapExtension.GetInitializer-Type#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/CS/traceextension.cs#1)]
 [!code-vb[SoapExtension.GetInitializer-Type#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapExtension.GetInitializer-Type/VB/traceextension.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitializer">
      <MemberSignature Language="C#" Value="public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo, System.Web.Services.Protocols.SoapExtensionAttribute attribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInitializer(class System.Web.Services.Protocols.LogicalMethodInfo methodInfo, class System.Web.Services.Protocols.SoapExtensionAttribute attribute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInitializer (methodInfo As LogicalMethodInfo, attribute As SoapExtensionAttribute) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetInitializer(System::Web::Services::Protocols::LogicalMethodInfo ^ methodInfo, System::Web::Services::Protocols::SoapExtensionAttribute ^ attribute);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializer : System.Web.Services.Protocols.LogicalMethodInfo * System.Web.Services.Protocols.SoapExtensionAttribute -&gt; obj" Usage="soapExtension.GetInitializer (methodInfo, attribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodInfo" Type="System.Web.Services.Protocols.LogicalMethodInfo" />
        <Parameter Name="attribute" Type="System.Web.Services.Protocols.SoapExtensionAttribute" />
      </Parameters>
      <Docs>
        <param name="methodInfo">Oggetto <see cref="T:System.Web.Services.Protocols.LogicalMethodInfo" /> che rappresenta il prototipo di funzione specifico del metodo di servizio Web XML a cui viene applicata l'estensione SOAP.</param>
        <param name="attribute">Oggetto <see cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" /> applicato al metodo di servizio Web XML.</param>
        <summary>Quando se ne esegue l'override in una classe derivata, consente a un'estensione SOAP di inizializzare i dati specifici di un servizio Web XML utilizzando un attributo applicato al metodo di servizio Web XML, incidendo una sola volta sulle prestazioni.</summary>
        <returns>Oggetto <see cref="T:System.Object" /> inizializzato dall'estensione SOAP per l'inserimento nella cache.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'estensione SOAP viene configurata utilizzando un file di configurazione fare riferimento il <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> overload che accetta un <xref:System.Type>.  
  
 Un'estensione SOAP ha tre possibilità di inizializzare i dati e hanno scopi diversi:  
  
-   Costruttore di classe: il costruttore della classe viene chiamato ogni volta che un'estensione SOAP viene creata un'istanza e in genere utilizzata per inizializzare le variabili membro.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> - <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>, tuttavia, viene chiamato solo una volta, la prima volta che viene effettuata una richiesta SOAP a un XML Web services (metodo). Se un attributo personalizzato viene applicato al metodo del servizio Web XML, il <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> metodo viene richiamato. In questo modo l'estensione SOAP interrogare il <xref:System.Web.Services.Protocols.LogicalMethodInfo> di un metodo di servizio Web XML per ottenere informazioni sul prototipo o accedere ai dati specifici dell'estensione passati da una classe che deriva da <xref:System.Web.Services.Protocols.SoapExtensionAttribute>. Il valore restituito viene memorizzato nella cache da ASP.NET e passato nei successivi <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> metodi. Pertanto, l'inizializzazione richiede solo pochi <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> viene incapsulata in una riduzione delle prestazioni una tantum.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> viene chiamato ogni volta che una richiesta SOAP viene effettuata a un metodo del servizio Web XML, ma presenta un vantaggio rispetto al costruttore della classe, in quanto il <xref:System.Object> inizializzato nel <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> viene passato al metodo.  
  
   
  
## Examples  
 Il codice seguente viene illustrato come ottenere i dati specifici dell'estensione SOAP passati usando una classe che deriva da <xref:System.Web.Services.Protocols.SoapExtensionAttribute>e poi memorizza nella cache i dati in <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>. Questo esempio di codice è parte di un esempio di codice completo per un `TraceExtension` estensione SOAP che può essere trovati nel <xref:System.Web.Services.Protocols.SoapExtension> Cenni preliminari sulla classe. Questo esempio di codice si basa su un `TraceExtensionAttribute` vengono passati nel `attribute` parametro. Nell'esempio di codice completo `TraceExtensionAttribute` deriva da <xref:System.Web.Services.Protocols.SoapExtensionAttribute> e aggiunge un `Filename` proprietà, ovvero che cosa <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> memorizza nella cache.  
  
 [!code-cpp[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.GetInitializer Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.GetInitializer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.LogicalMethodInfo" />
        <altmember cref="T:System.Web.Services.Protocols.SoapExtensionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public abstract void Initialize (object initializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(object initializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Initialize (initializer As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Initialize(System::Object ^ initializer);" />
      <MemberSignature Language="F#" Value="abstract member Initialize : obj -&gt; unit" Usage="soapExtension.Initialize initializer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initializer" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="initializer">Oggetto <see cref="T:System.Object" /> restituito da <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />, memorizzato nella cache da ASP.NET.</param>
        <summary>Quando se ne esegue l'override in una classe derivata, consente a un'estensione SOAP di essere inizializzata utilizzando i dati memorizzati nella cache nel metodo <see cref="M:System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'estensione SOAP ha tre possibilità di inizializzare i dati e hanno scopi diversi:  
  
-   Costruttore di classe: il costruttore della classe viene chiamato ogni volta che un'estensione SOAP viene creata un'istanza e in genere utilizzata per inizializzare le variabili membro.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> - <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>, tuttavia, viene chiamato solo una volta, la prima volta che viene effettuata una richiesta SOAP a un XML Web services (metodo). Se un attributo personalizzato viene applicato al metodo del servizio Web XML, il <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> metodo viene richiamato. In questo modo l'estensione SOAP interrogare il <xref:System.Web.Services.Protocols.LogicalMethodInfo> di un metodo di servizio Web XML per ottenere informazioni sul prototipo o accedere ai dati specifici dell'estensione passati da una classe che deriva da <xref:System.Web.Services.Protocols.SoapExtensionAttribute>. Il valore restituito viene memorizzato nella cache da ASP.NET e passato nei successivi <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> metodi. Pertanto, l'inizializzazione richiede solo pochi <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> viene incapsulata in una riduzione delle prestazioni una tantum.  
  
-   <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> viene chiamato ogni volta che una richiesta SOAP viene effettuata a un metodo del servizio Web XML, ma presenta un vantaggio rispetto al costruttore della classe, in quanto il <xref:System.Object> inizializzato nel <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> viene passato al metodo.  
  
-  
  
> [!NOTE]
>  È anche possibile aggiungere un'estensione SOAP senza che deriva da <xref:System.Web.Services.Protocols.SoapExtensionAttribute> usando il [ \<soapExtensionTypes > elemento](https://msdn.microsoft.com/library/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) in un file di configurazione. Per informazioni dettagliate, vedere [ \<soapExtensionTypes > elemento](https://msdn.microsoft.com/library/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) e [messaggio modifica SOAP utilizzando estensioni SOAP](https://msdn.microsoft.com/library/97d81ace-95e7-4acc-ae39-9692a0021e95).  
  
-  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come è possibile usare i dati memorizzati nella cache durante la <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> (metodo).  
  
 [!code-cpp[Classic SoapExtension.Initialize Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapExtension.Initialize Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/CS/source.cs#1)]
 [!code-vb[Classic SoapExtension.Initialize Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapExtension.Initialize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessMessage">
      <MemberSignature Language="C#" Value="public abstract void ProcessMessage (System.Web.Services.Protocols.SoapMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessMessage(class System.Web.Services.Protocols.SoapMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub ProcessMessage (message As SoapMessage)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void ProcessMessage(System::Web::Services::Protocols::SoapMessage ^ message);" />
      <MemberSignature Language="F#" Value="abstract member ProcessMessage : System.Web.Services.Protocols.SoapMessage -&gt; unit" Usage="soapExtension.ProcessMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapMessage" />
      </Parameters>
      <Docs>
        <param name="message">Oggetto <see cref="T:System.Web.Services.Protocols.SoapMessage" /> da elaborare.</param>
        <summary>Quando se ne esegue l'override in una classe derivata, consente a un'estensione SOAP di ricevere un oggetto <see cref="T:System.Web.Services.Protocols.SoapMessage" /> da elaborare in ciascun oggetto <see cref="T:System.Web.Services.Protocols.SoapMessageStage" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> viene chiamato affatto <xref:System.Web.Services.Protocols.SoapMessageStage> fasi per le estensioni SOAP applicate a entrambi i servizi Web XML creati utilizzando ASP.NET e i relativi client. In ogni <xref:System.Web.Services.Protocols.SoapMessageStage>, un'istanza di una classe che deriva da <xref:System.Web.Services.Protocols.SoapMessage> viene passato a <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>. Se l'estensione SOAP è in esecuzione nel client del servizio Web XML, un' <xref:System.Web.Services.Protocols.SoapClientMessage> oggetto viene passato <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>; in caso contrario un <xref:System.Web.Services.Protocols.SoapServerMessage> oggetto viene passato.  
  
   
  
## Examples  
 L'esempio seguente è il <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> parte di un'estensione SOAP che registra richieste SOAP e le risposte SOAP. Eseguendo l'accesso il <xref:System.Web.Services.Protocols.SoapMessage> nella <xref:System.Web.Services.Protocols.SoapMessageStage.AfterSerialize> <xref:System.Web.Services.Protocols.SoapMessageStage>, l'estensione SOAP ha accesso il <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> da inviare in rete. Se l'estensione SOAP viene applicata a un metodo di servizio Web XML creato utilizzando ASP.NET, il <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> contiene la risposta SOAP dal metodo del servizio Web XML. Se l'estensione SOAP viene applicato a un client del servizio Web XML, il <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> contiene la richiesta SOAP per un metodo di servizio Web XML.  
  
 Esempio di ProcessMessage classico n. 1  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>