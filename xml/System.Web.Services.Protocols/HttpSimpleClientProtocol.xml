<Type Name="HttpSimpleClientProtocol" FullName="System.Web.Services.Protocols.HttpSimpleClientProtocol">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="24110eb1ffa47f6267659a07e83cab2de1a0dfeb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30550245" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class HttpSimpleClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit HttpSimpleClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class HttpSimpleClientProtocol&#xA;Inherits HttpWebClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpSimpleClientProtocol abstract : System::Web::Services::Protocols::HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta la classe base per le comunicazioni con un servizio Web XML tramite semplici associazioni di protocolli HTTP-GET e HTTP-POST.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa classe specifica la maggior parte dell'implementazione per la comunicazione con un servizio Web XML su HTTP tramite codificatori per codificare i parametri e i valori restituiti in formato MIME comuni. Questi codificatori derivano dalla <xref:System.Web.Services.Protocols.MimeFormatter> classe. Per impostazione predefinita, una classe proxy derivante da <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> codifica i parametri utilizzando il tipo MIME application/x-www-form-urlencoded e la risposta in formato XML semplice. Formattatori mime personalizzati possono essere specificati utilizzando il <xref:System.Web.Services.Protocols.HttpMethodAttribute> attributo, tuttavia, non è previsto alcun supporto per questa integrazione in una generazione di proxy e descrizione del servizio.  
  
 `Notes to Inheritors:` Quando si esegue l'override di questa classe, è possibile inserire i metodi nella classe derivata che sono specifici per un particolare tipo di un servizio Web XML. I metodi semplicemente acquisire i parametri e chiamano la classe base per eseguire le operazioni di comunicare con il sito. Se i metodi inseriti sono asincroni, chiamare il <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> e <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> metodi. Se i metodi inseriti sono sincroni, chiamare il <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> metodo. Il costruttore sottoposto a override in genere imposta la <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> proprietà per l'URI del metodo del servizio Web XML.  
  
 Lo strumento di Web Services Description Language (Wsdl.exe) genera le classi derivate di <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> per una descrizione del servizio specificato.  
  
   
  
## Examples  
 L'esempio di codice seguente è una classe proxy generata da Wsdl.exe per il `Math` servizio Web XML indicato di seguito. La classe proxy deriva da <xref:System.Web.Services.Protocols.HttpGetClientProtocol>, che deriva dalla classe astratta <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol> classe.  
  
 [!code-cpp[Classic HttpGetClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpGetClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic HttpGetClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpGetClientProtocol Example/VB/source.vb#1)]  
  
 L'esempio di codice seguente è il `Math` servizio Web XML, da cui è stata creata la classe proxy precedente.  
  
 [!code-cpp[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic HttpSimpleClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Questo tipo è thread-safe.</threadsafe>
    <altmember cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpSimpleClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HttpSimpleClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, string requestUrl, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, string requestUrl, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function BeginInvoke (methodName As String, requestUrl As String, parameters As Object(), callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ BeginInvoke(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nome del metodo di servizio Web XML.</param>
        <param name="requestUrl">URL da utilizzare al momento della creazione di <see cref="T:System.Net.WebRequest" />.</param>
        <param name="parameters">Matrice di oggetti contenente i parametri da passare al metodo del servizio Web XML. L'ordine dei valori nella matrice corrisponde all'ordine dei parametri nel metodo di chiamata della classe derivata.</param>
        <param name="callback">Delegato da chiamare una volta completata la chiamata al metodo asincrona. Se <c>callback</c> è <see langword="null" />, il delegato non viene chiamato.</param>
        <param name="asyncState">Informazioni aggiuntive fornite da un client.</param>
        <summary>Inizia una chiamata asincrona di un metodo di un servizio Web XML.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che può essere passato al metodo <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)" /> per ottenere i valori restituiti dal metodo del servizio Web XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `methodName` parametro viene utilizzato per trovare i tipi dei parametri e valori restituiti del metodo che richiama la <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> metodo. Consente anche di trovare attributi personalizzati che possono essere aggiunti al metodo. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>, <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute>, e <xref:System.Xml.Serialization.XmlElementAttribute> forniscono informazioni aggiuntive sul metodo derivato è necessario per il protocollo HTTP.  
  
 `asyncState` viene passato a `callback` ed è incluso nel <xref:System.IAsyncResult> restituito dal <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> metodo. È utile per passare le informazioni dal contesto della chiamata asincrona per la gestione del risultato asincrono in `callback`.  
  
   
  
## Examples  
 L'esempio di codice seguente è un Web Form ASP.NET, che chiama un servizio Web XML denominato `Math`. All'interno di `EnterBtn_Click` funzione, il Web Form avvia e completa una chiamata asincrona del `Add` metodo servizio Web XML.  
  
 [!code-aspx-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/sourcevb.aspx#1)]  
  
 Esempio di codice seguente è una classe proxy generata dallo strumento Web Services Description Language (Wsdl.exe) per il `Math` servizio Web XML indicato di seguito. All'interno di `BeginAdd` metodo della classe proxy, il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> metodo avvia una chiamata asincrona del `Add` metodo servizio Web XML.  
  
 [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CPP/source.cpp#2)]
 [!code-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/source.cs#2)]
 [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/source.vb#2)]  
  
 L'esempio di codice seguente è il `Math` servizio Web XML, da cui è stata creata la classe proxy precedente.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">La richiesta ha raggiunto il computer server ma non è stata elaborata con esito positivo.</exception>
        <altmember cref="T:System.IAsyncResult" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EndInvoke (asyncResult As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> restituito dal metodo <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" />.</param>
        <summary>Completa la chiamata asincrona del metodo di un servizio Web XML tramite HTTP.</summary>
        <returns>Matrice di oggetti contenente il valore restituito ed eventuali parametri per riferimento o parametri <paramref name="out" /> per il metodo del servizio Web XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio di codice seguente è un Web Form ASP.NET, che chiama un servizio Web XML denominato `Math`. All'interno di `EnterBtn_Click` funzione, il Web Form avvia e completa una chiamata asincrona del `Add` metodo servizio Web XML.  
  
 [!code-aspx-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/sourcevb.aspx#1)]  
  
 Esempio di codice seguente è una classe proxy generata dallo strumento Web Services Description Language (Wsdl.exe) per il `Math` servizio Web XML indicato di seguito. All'interno di `EndAdd` metodo della classe proxy, il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> metodo avvia una chiamata asincrona del `Add` metodo servizio Web XML.  
  
 [!code-cpp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CPP/source.cpp#2)]
 [!code-csharp[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/CS/source.cs#2)]
 [!code-vb[Classic HttpSimpleClientProtocol.EndInvoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic HttpSimpleClientProtocol.EndInvoke Example/VB/source.vb#2)]  
  
 L'esempio di codice seguente è il `Math` servizio Web XML, da cui è stata creata la classe proxy precedente.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> non è il valore restituito dal metodo <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke(System.String,System.String,System.Object[],System.AsyncCallback,System.Object)" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object Invoke (string methodName, string requestUrl, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object Invoke(string methodName, string requestUrl, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (methodName As String, requestUrl As String, parameters As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ Invoke(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="methodName">Nome del metodo del servizio Web XML nella classe derivata che chiama il metodo <see cref="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke(System.String,System.String,System.Object[])" />.</param>
        <param name="requestUrl">URL del metodo del servizio Web XML richiesto dal client.</param>
        <param name="parameters">Matrice di oggetti contenente i parametri da passare al servizio Web XML remoto. L'ordine dei valori nella matrice corrisponde all'ordine dei parametri nel metodo di chiamata della classe derivata.</param>
        <summary>Richiama il metodo di un servizio Web XML tramite HTTP.</summary>
        <returns>Matrice di oggetti contenente il valore restituito e qualsiasi parametro per riferimento o parametri <paramref name="out" /> del metodo della classe derivata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `methodName` parametro viene utilizzato per trovare i tipi dei parametri e valori restituiti del metodo che richiama la <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> metodo. Consente anche di trovare attributi personalizzati che possono essere stati aggiunti al metodo. <xref:System.Web.Services.Protocols.HttpMethodAttribute> e <xref:System.Xml.Serialization.XmlElementAttribute> forniscono informazioni aggiuntive sul metodo derivato richiesto per il protocollo SOAP.  
  
   
  
## Examples  
 L'esempio di codice seguente è un Web Form ASP.NET, che chiama un servizio Web XML denominato `Math`. All'interno di `EnterBtn_Click` funzione, il Web Form richiama in modo sincrono il `Add` metodo servizio Web XML.  
  
 [!code-csharp[HttpSimpleClientProtocol.Invoke Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CS/sourcecs.aspx#2)]
 [!code-vb[HttpSimpleClientProtocol.Invoke Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/VB/sourcevb.aspx#2)]  
  
 Esempio di codice seguente è una classe proxy generata dallo strumento Web Services Description Language (Wsdl.exe) per il `Math` servizio Web XML indicato di seguito. All'interno di `Add` metodo della classe proxy, il <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> metodo richiama in modo sincrono il `Add` metodo servizio Web.  
  
 [!code-cpp[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[HttpSimpleClientProtocol.Invoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/HttpSimpleClientProtocol.Invoke Example/VB/source.vb#1)]  
  
 L'esempio di codice seguente è il `Math` servizio Web XML, da cui è stata creata la classe proxy precedente.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">La richiesta ha raggiunto il computer server ma non è stata elaborata con esito positivo.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Richiama il metodo specificato in modo asincrono.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, string requestUrl, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, requestUrl As String, parameters As Object(), callback As SendOrPostCallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
      </Parameters>
      <Docs>
        <param name="methodName">Nome del metodo da richiamare.</param>
        <param name="requestUrl">URL della richiesta del servizio Web richiamato.</param>
        <param name="parameters">Parametri da passare al metodo.</param>
        <param name="callback">Delegato chiamato al termine della chiamata al metodo.</param>
        <summary>Richiama il metodo specificato in modo asincrono.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, string requestUrl, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, string requestUrl, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.HttpSimpleClientProtocol.InvokeAsync(System.String,System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, requestUrl As String, parameters As Object(), callback As SendOrPostCallback, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, System::String ^ requestUrl, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback, System::Object ^ userState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="requestUrl" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nome del metodo da richiamare.</param>
        <param name="requestUrl">URL della richiesta del servizio Web richiamato.</param>
        <param name="parameters">Parametri da passare al metodo.</param>
        <param name="callback">Delegato chiamato al termine della chiamata al metodo.</param>
        <param name="userState">Oggetto che contiene le informazioni sullo stato associato passato al delegato <c>callback</c> quando viene completato il metodo.</param>
        <summary>Richiama il metodo specificato in modo asincrono mentre mantiene uno stato associato.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>