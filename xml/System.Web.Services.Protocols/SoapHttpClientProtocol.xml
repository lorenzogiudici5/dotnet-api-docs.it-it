<Type Name="SoapHttpClientProtocol" FullName="System.Web.Services.Protocols.SoapHttpClientProtocol">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e89c042d2d13b7719ff6ee97121c97752e47d23e" />
    <Meta Name="ms.sourcegitcommit" Value="01f28caab7b3f23878dd07b402a8dd48b9478c8c" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="39141512" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapHttpClientProtocol extends System.Web.Services.Protocols.HttpWebClientProtocol" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />
  <TypeSignature Language="VB.NET" Value="Public Class SoapHttpClientProtocol&#xA;Inherits HttpWebClientProtocol" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapHttpClientProtocol : System::Web::Services::Protocols::HttpWebClientProtocol" />
  <TypeSignature Language="F#" Value="type SoapHttpClientProtocol = class&#xA;    inherit HttpWebClientProtocol" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.Protocols.HttpWebClientProtocol</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifica il client della classe da cui derivano i proxy quando si utilizza SOAP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se si compila un client del servizio Web XML, quindi una classe proxy che deriva direttamente o indirettamente da <xref:System.Web.Services.Protocols.WebClientProtocol> deve essere creato per il servizio Web XML. Quando il client del servizio Web XML tramite SOAP, la classe proxy deve derivare da <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, che deriva da <xref:System.Web.Services.Protocols.HttpWebClientProtocol>. <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, a sua volta deriva da <xref:System.Web.Services.Protocols.WebClientProtocol>.  
  
 Per comunicare con un servizio Web XML, creare una classe proxy che deriva direttamente o indirettamente da <xref:System.Web.Services.Protocols.WebClientProtocol> per il servizio Web XML che si desidera chiamare. Anziché creare manualmente la classe proxy, utilizzare lo strumento Web Services Description Language (Wsdl.exe) per creare una classe proxy per la descrizione del servizio del servizio Web XML specificata. Quando viene generata una classe proxy per il protocollo SOAP, le chiamate sincrone ai metodi del servizio Web XML vengono effettuate tramite il <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A> metodo, mentre le chiamate asincrone vengono eseguite tramite il <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> metodo e il <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> (metodo).  
  
   
  
## Examples  
 L'esempio di codice seguente è una classe proxy generata da Wsdl.exe per il `Math` servizio Web XML. Classe proxy che deriva da <xref:System.Web.Services.Protocols.SoapHttpClientProtocol>, che deriva dalla classe astratta <xref:System.Web.Services.Protocols.WebClientProtocol> classe.  
  
 [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol Example/VB/source.vb#1)]  
  
 L'esempio di codice seguente è il `Math` servizio Web XML, da cui è stata generata la classe proxy precedente.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
  
  
 ]]></format>
    </remarks>
    <threadsafe>Questo tipo è thread-safe.</threadsafe>
    <block subset="none" type="overrides">
      <para>Quando si esegue l'override di questa classe, è possibile introdurre i metodi nella classe derivata che sono specifici per un particolare tipo di servizio Web XML. I metodi di acquisire i parametri e chiamano la classe di base per eseguire le operazioni di comunicazione con il servizio Web XML. Se i metodi inseriti sono asincroni, chiamare il <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> metodo e <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> (metodo). Se i metodi inseriti sono sincroni, chiamare il <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" /> (metodo). Il costruttore sottoposto a override in genere imposta la <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" /> proprietà per l'URL del metodo del servizio Web XML.</para>
    </block>
    <altmember cref="T:System.Web.Services.Protocols.HttpSimpleClientProtocol" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapHttpClientProtocol ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapHttpClientProtocol();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.Services.Protocols.SoapHttpClientProtocol" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginInvoke(string methodName, object[] parameters, class System.AsyncCallback callback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function BeginInvoke (methodName As String, parameters As Object(), callback As AsyncCallback, asyncState As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IAsyncResult ^ BeginInvoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, AsyncCallback ^ callback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : string * obj[] * AsyncCallback * obj -&gt; IAsyncResult" Usage="soapHttpClientProtocol.BeginInvoke (methodName, parameters, callback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nome del metodo del servizio Web XML nella classe derivata che chiama il metodo <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />.</param>
        <param name="parameters">Matrice di oggetti contenente i parametri da passare al servizio Web XML. L'ordine dei valori nella matrice corrisponde all'ordine dei parametri nel metodo chiamante della classe derivata.</param>
        <param name="callback">Delegato da richiamare una volta completata la chiamata asincrona. Se <c>callback</c> è <see langword="null" />, il delegato non viene chiamato.</param>
        <param name="asyncState">Informazioni aggiuntive fornite dal chiamante.</param>
        <summary>Avvia una chiamata asincrona di un metodo del servizio Web XML tramite SOAP.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che viene passato al metodo <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" /> per ottenere i valori restituiti dalla chiamata remota del metodo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, la chiamata non di <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> metodo direttamente, a meno che non si crei una classe proxy per un servizio Web XML.  
  
 Una classe proxy generata dallo strumento Web Services Description Language (Wsdl.exe) da una descrizione del servizio espone i metodi del servizio Web XML come nomi derivati dalla classe proxy per chiamare i metodi del servizio Web XML in modo sincrono. Per chiamare i metodi del servizio Web XML in modo asincrono, vengono aggiunti altri due metodi per la classe proxy per ogni metodo del servizio Web XML, uno con il `Begin` prefisso aggiunto al nome del metodo del servizio Web XML e uno con il `End` prefisso aggiunto.  
  
 La classe proxy chiama il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> metodo per avviare una chiamata asincrona al metodo del servizio Web XML. Ad esempio, se un servizio Web XML espone un metodo del servizio Web XML denominato `Add`, la classe proxy conterrà un metodo denominato `BeginAdd`, metodo di servizio per l'avvio di una chiamata a Web XML. All'interno del codice per il `BeginAdd`, viene eseguita una chiamata per il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> metodo e i risultati vengono inseriti nel tipo restituito previsto per `Add`.  
  
 Il `methodName` viene usato per trovare gli attributi personalizzati che potrebbero essere stati aggiunti al metodo, come <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> fornisce informazioni aggiuntive relative al metodo derivato che è necessario per il protocollo SOAP.  
  
 `asyncState` viene passato `callback` ed è incluso nel <xref:System.IAsyncResult> restituito dal <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> (metodo). Il `asyncState` parametro può essere utilizzato per passare le informazioni relative al contesto della chiamata asincrona, specificata nella `callback` parametro per il delegato che gestisce il risultato.  
  
   
  
## Examples  
 L'esempio di codice seguente è una classe proxy generata dallo strumento Web Services Description Language (Wsdl.exe) per il `Math` servizio Web XML. All'interno di `BeginAdd` metodo della classe proxy, il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> metodo avvia una chiamata asincrona al `Add` metodo servizio Web XML.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.BeginInvoke Example/VB/source.vb#1)]  
  
 L'esempio di codice seguente è il `Math` servizio Web XML, da cui è stata creata la classe proxy precedente.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">La richiesta ha raggiunto il computer server ma non è stata elaborata con esito positivo.</exception>
        <exception cref="T:System.InvalidOperationException">La richiesta non era valida per lo stato corrente dell'oggetto.</exception>
        <exception cref="T:System.Net.WebException">Si è verificato un errore durante l'accesso alla rete.</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="T:System.AsyncCallback" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="Discover">
      <MemberSignature Language="C#" Value="public void Discover ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Discover() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover" />
      <MemberSignature Language="VB.NET" Value="Public Sub Discover ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Discover();" />
      <MemberSignature Language="F#" Value="member this.Discover : unit -&gt; unit" Usage="soapHttpClientProtocol.Discover " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Esegue il collegamento dinamico a un servizio Web XML descritto nel documento di individuazione in <see cref="P:System.Web.Services.Protocols.WebClientProtocol.Url" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un client del servizio Web XML è possibile associare in modo dinamico a un servizio Web XML diverso da quello a cui fa riferimento la classe proxy con il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> (metodo). In genere, il <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> proprietà fa riferimento all'indirizzo di base del servizio Web XML. Tuttavia, prima di richiamare il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> metodo, impostare il <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> proprietà a un URL di un documento di individuazione. Il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> metodo tenta di trovare una corrispondenza nel documento di individuazione per l'associazione definita nella classe proxy e quindi eseguire l'associazione dinamica. Se l'operazione riesce, successive chiamate al metodo vengono indirizzate al servizio Web XML descritto nel documento di individuazione.  
  
 Se la classe proxy viene creata mediante lo strumento Web Services Description Language (Wsdl.exe), la classe proxy definisce l'associazione implementata per i metodi del servizio Web XML viene richiamato utilizzando il <xref:System.Web.Services.WebServiceBindingAttribute>. Quando un servizio Web XML implementa più binding, Wsdl.exe crea una classe proxy per ogni associazione. Applicato a ogni classe proxy è un <xref:System.Web.Services.WebServiceBindingAttribute> che definisce il nome del relativo spazio dei nomi e l'associazione. Il documento di individuazione è impostato il <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> proprietà deve contenere un riferimento a un servizio Web XML che implementa lo stesso nome dell'associazione e lo spazio dei nomi o viene generata un'eccezione.  
  
   
  
## Examples  
 Esempio di codice seguente è una classe proxy generata tramite l'utilità Wsdl.exe per il `Math` servizio Web XML. Oggetto <xref:System.Web.Services.WebServiceBindingAttribute> viene applicato al `Math` classe proxy, impostando il nome dell'associazione `MathSoap` e lo spazio dei nomi per `http://tempuri.org/`.  
  
 [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CPP/source.cpp#1)]
 [!code-csharp[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/source.cs#1)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/source.vb#1)]  
  
 Esempio di codice seguente è un client del servizio Web utilizzando la classe proxy precedente. All'interno di `EnterBtn_Click` eventi del modulo Web, le chiamate client al servizio Web XML di <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Discover%2A> metodo tentando di associare in modo dinamico per l'URL fornito dall'utente.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-csharp[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/CS/sourcecs.aspx#2)]
 [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.Discover Example/VB/sourcevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Per la classe proxy non è definita alcuna associazione.</exception>
        <altmember cref="T:System.Web.Services.WebServiceBindingAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="protected object[] EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Function EndInvoke (asyncResult As IAsyncResult) As Object()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; obj[]" Usage="soapHttpClientProtocol.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> restituito dal metodo <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />.</param>
        <summary>Chiude una chiamata asincrona del metodo di un servizio Web XML tramite SOAP.</summary>
        <returns>Matrice di oggetti che contiene il valore restituito e gli eventuali parametri passati per riferimento o <see langword="out" /> del metodo della classe derivata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, la chiamata non di <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> metodo direttamente, a meno che non si crei una classe proxy per un servizio Web XML.  
  
 Una classe proxy generata dallo strumento Web Services Description Language (Wsdl.exe) per un servizio Web XML espone i metodi del servizio Web XML come nomi all'esterno della classe proxy per chiamare i metodi del servizio Web XML in modo sincrono. Per chiamare i metodi del servizio Web XML in modo asincrono, vengono aggiunti altri due metodi per la classe proxy per ogni metodo del servizio Web XML, uno con il `Begin` prefisso aggiunto al nome del metodo del servizio Web XML e uno con il `End` prefisso aggiunto.  
  
 La classe proxy chiama il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> metodo per completare una chiamata asincrona al metodo del servizio Web XML. Ad esempio, se un servizio Web XML espone un metodo del servizio Web XML denominato `Add`, la classe proxy conterrà un metodo denominato `EndAdd`, metodo di servizio per il completamento di una chiamata asincrona di un Web XML. All'interno del codice per il `EndAdd` viene eseguita una chiamata per il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> metodo e quindi i risultati vengono inseriti nel tipo restituito previsto per `Add`.  
  
   
  
## Examples  
 L'esempio di codice seguente è una classe proxy generata da Wsdl.exe per il `Math` servizio Web XML. All'interno di `EndAdd` metodo della classe proxy, il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke%2A> la chiamata asincrona al completamento del metodo il `Add` metodo servizio Web XML.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.EndInvoke Example/VB/source.vb#1)]  
  
 L'esempio di codice seguente è il `Math` servizio Web XML, da cui è stata creata la classe proxy precedente.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> non è il valore restituito dal metodo <see cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.Web.Services.Protocols.SoapException">La richiesta ha raggiunto il computer server ma non è stata elaborata con esito positivo.</exception>
        <exception cref="T:System.InvalidOperationException">La richiesta non era valida per lo stato corrente dell'oggetto.</exception>
        <exception cref="T:System.Net.WebException">Si è verificato un errore durante l'accesso alla rete.</exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <Member MemberName="GetReaderForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlReader GetReaderForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetReaderForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlReader ^ GetReaderForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader&#xA;override this.GetReaderForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlReader" Usage="soapHttpClientProtocol.GetReaderForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Oggetto <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> che fornisce la proprietà <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> per inizializzare l'oggetto <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="bufferSize">Dimensione iniziale del buffer dell'oggetto <see cref="T:System.IO.StreamReader" /> utilizzata dall'oggetto <see cref="T:System.Xml.XmlReader" />.</param>
        <summary>Restituisce un oggetto <see cref="T:System.Xml.XmlReader" /> inizializzato con la proprietà <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> del parametro <see cref="T:System.Web.Services.Protocols.SoapClientMessage" />.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlReader" /> inizializzato con la proprietà <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> del parametro <paramref name="message" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected override System.Net.WebRequest GetWebRequest (Uri uri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri uri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Net::WebRequest ^ GetWebRequest(Uri ^ uri);" />
      <MemberSignature Language="F#" Value="override this.GetWebRequest : Uri -&gt; System.Net.WebRequest" Usage="soapHttpClientProtocol.GetWebRequest uri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="uri">
          <see cref="T:System.Uri" /> da utilizzare al momento della creazione di <see cref="T:System.Net.WebRequest" />.</param>
        <summary>Crea un oggetto <see cref="T:System.Net.WebRequest" /> per l'oggetto <paramref name="uri" /> specificato.</summary>
        <returns>
          <see cref="T:System.Net.WebRequest" /> per l'URI specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo può essere sottoposto a override per personalizzare il <xref:System.Net.WebRequest> prima Web XML viene effettuata richiesta di servizio. Ad esempio, è possibile aggiungere un'intestazione personalizzata per la richiesta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il valore del parametro <paramref name="uri" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
        <altmember cref="M:System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(System.Net.WebRequest)" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetWriterForMessage">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.XmlWriter GetWriterForMessage(class System.Web.Services.Protocols.SoapClientMessage message, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWriterForMessage (message As SoapClientMessage, bufferSize As Integer) As XmlWriter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::XmlWriter ^ GetWriterForMessage(System::Web::Services::Protocols::SoapClientMessage ^ message, int bufferSize);" />
      <MemberSignature Language="F#" Value="abstract member GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter&#xA;override this.GetWriterForMessage : System.Web.Services.Protocols.SoapClientMessage * int -&gt; System.Xml.XmlWriter" Usage="soapHttpClientProtocol.GetWriterForMessage (message, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Web.Services.Protocols.SoapClientMessage" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Oggetto <see cref="T:System.Web.Services.Protocols.SoapClientMessage" /> che fornisce la proprietà <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> per inizializzare l'oggetto <see cref="T:System.Xml.XmlWriter" />.</param>
        <param name="bufferSize">Dimensione iniziale del buffer dell'oggetto <see cref="T:System.IO.StreamWriter" /> utilizzata dall'oggetto <see cref="T:System.Xml.XmlWriter" />.</param>
        <summary>Restituisce un oggetto <see cref="T:System.Xml.XmlWriter" /> inizializzato con la proprietà <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> del parametro <see cref="T:System.Web.Services.Protocols.SoapClientMessage" />.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlWriter" /> inizializzato con la proprietà <see cref="P:System.Web.Services.Protocols.SoapMessage.Stream" /> del parametro <paramref name="message" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="protected object[] Invoke (string methodName, object[] parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string methodName, object[] parameters) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (methodName As String, parameters As Object()) As Object()" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="protected object[] Invoke (string method_name, object[] parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object[] Invoke(string method_name, object[] parameters) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])" FrameworkAlternate="xamarinandroid-7.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinios-10.8;xamarinmac-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Protected Function Invoke (method_name As String, parameters As Object()) As Object()" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Object ^&gt; ^ Invoke(System::String ^ method_name, cli::array &lt;System::Object ^&gt; ^ parameters);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.Invoke : string * obj[] -&gt; obj[]" Usage="soapHttpClientProtocol.Invoke (method_name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="method_name" Type="System.String" Index="0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" />
      </Parameters>
      <Docs>
        <param name="methodName">Nome del metodo di servizio Web XML.</param>
        <param name="method_name">Nome del metodo di servizio Web XML.</param>
        <param name="parameters">Matrice di oggetti che contiene i parametri da passare al servizio Web XML. L'ordine dei valori nella matrice corrisponde all'ordine dei parametri nel metodo di chiamata della classe derivata.</param>
        <summary>Richiama in modo sincrono il metodo di un servizio Web XML tramite SOAP.</summary>
        <returns>Matrice di oggetti che contiene il valore restituito e gli eventuali parametri <see langword="reference" /> o <see langword="out" /> del metodo della classe derivata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, non viene chiamato il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> metodo direttamente, a meno che non si compila il proprio classe proxy per un servizio Web XML.  
  
 Una classe proxy generata dallo strumento Web Services Description Language (Wsdl.exe) per un servizio Web XML espone i metodi del servizio Web XML come nomi all'esterno della classe proxy. La classe proxy chiama il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> metodo da richiamare una chiamata al metodo del servizio Web XML. Ad esempio, se un servizio Web XML espone un metodo del servizio Web XML denominato `Add`, la classe proxy contiene anche un metodo denominato `Add`. All'interno del codice per il `Add` metodo nella classe proxy, al metodo del servizio Web XML tramite cui viene eseguita una chiamata sincrona la <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> metodo e quindi i risultati vengono inseriti nel tipo restituito previsto per `Add`.  
  
 Il `methodName` parametro viene usato per trovare gli attributi personalizzati che possono sono stati aggiunti al metodo, ad esempio <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>. <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> fornisce informazioni aggiuntive sul metodo derivato necessaria per il protocollo SOAP.  
  
   
  
## Examples  
 L'esempio di codice seguente è una classe proxy generata da Wsdl.exe per il `Math` servizio Web XML. All'interno di `Add` metodo della classe proxy, il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke%2A> chiama il `Add` metodo servizio Web XML.  
  
 [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/CS/source.cs#1)]
 [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SoapHttpClientProtocol.Invoke Example/VB/source.vb#1)]  
  
 L'esempio di codice seguente è il `Math` servizio Web XML, da cui è stata creata la classe proxy precedente.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.Services.Protocols.SoapException">La richiesta ha raggiunto il computer server ma non è stata elaborata con esito positivo.</exception>
        <exception cref="T:System.InvalidOperationException">La richiesta non era valida per lo stato corrente dell'oggetto.</exception>
        <exception cref="T:System.Net.WebException">Si è verificato un errore durante l'accesso alla rete.</exception>
        <altmember cref="T:System.Web.Services.Protocols.SoapDocumentMethodAttribute" />
        <altmember cref="T:System.Web.Services.Protocols.WebClientProtocol" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Richiama il metodo specificato in modo asincrono.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
      </Parameters>
      <Docs>
        <param name="methodName">Nome del metodo da richiamare.</param>
        <param name="parameters">Parametri da passare al metodo.</param>
        <param name="callback">Delegato chiamato al termine della chiamata al metodo.</param>
        <summary>Richiama il metodo specificato in modo asincrono.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeAsync(string methodName, object[] parameters, class System.Threading.SendOrPostCallback callback, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeAsync (methodName As String, parameters As Object(), callback As SendOrPostCallback, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeAsync(System::String ^ methodName, cli::array &lt;System::Object ^&gt; ^ parameters, System::Threading::SendOrPostCallback ^ callback, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : string * obj[] * System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="soapHttpClientProtocol.InvokeAsync (methodName, parameters, callback, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="callback" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">Nome del metodo da richiamare.</param>
        <param name="parameters">Parametri da passare al metodo.</param>
        <param name="callback">Delegato chiamato al termine della chiamata al metodo.</param>
        <param name="userState">Oggetto usato per passare le informazioni sullo stato nel delegato <c>callback</c>.</param>
        <summary>Richiama il metodo specificato in modo asincrono.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SoapVersion">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapProtocolVersion SoapVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property SoapVersion As SoapProtocolVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Services::Protocols::SoapProtocolVersion SoapVersion { System::Web::Services::Protocols::SoapProtocolVersion get(); void set(System::Web::Services::Protocols::SoapProtocolVersion value); };" />
      <MemberSignature Language="F#" Value="member this.SoapVersion : System.Web.Services.Protocols.SoapProtocolVersion with get, set" Usage="System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapProtocolVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la versione del protocollo SOAP utilizzato per effettuare la richiesta SOAP al servizio Web XML.</summary>
        <value>Uno dei valori di <see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />. Il valore predefinito è <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Soap11" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> viene impostata nella classe proxy generata dallo strumento Web Services Description Language (Wsdl.exe) a <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> per impostazione predefinita quando un documento WSDL per un servizio Web XML supporta SOAP versione 1.1. Tuttavia, quando un servizio Web XML supporta solo SOAP 1.2, Wsdl.exe set il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> proprietà <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>. Per scegliere la versione del protocollo SOAP durante la generazione della classe proxy con Wsdl.exe, usare il `/protocol` passare con il `SOAP` o `SOAP12` le impostazioni per impostare il <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion%2A> proprietà <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap11> e <xref:System.Web.Services.Protocols.SoapProtocolVersion.Soap12>rispettivamente .  
  
   
  
## Examples  
 Esempio di codice seguente imposta la versione del protocollo utilizzato per comunicare con un servizio Web XML per SOAP 1.2.  
  
 [!code-aspx-csharp[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/CS/serverusageclientcs.aspx#1)]
 [!code-aspx-vb[SoapHttpClientProtocol.SoapVersion#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SoapHttpClientProtocol.SoapVersion/VB/serverusageclientvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
        <altmember cref="P:System.Web.HttpContext.Items" />
      </Docs>
    </Member>
  </Members>
</Type>