<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="73cad7482ec89c2404cb253c90cebeaaff316196" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52590231" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce mezzi per il richiamo di un flusso di lavoro come se fossero una chiamata al metodo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> contiene sia metodi di istanza che metodi statici per il richiamo in modo sincrono di flussi di lavoro e metodi di istanza per il richiamo in modo asincrono di flussi di lavoro.  
  
 <xref:System.Activities.WorkflowInvoker> non consente il controllo dell'istanza come la persistenza, lo scaricamento o la ripresa dei segnalibri. Se si desidera il controllo dell'istanza, utilizzare invece <xref:System.Activities.WorkflowApplication>.  
  
 Per eseguire in modo sincrono flussi di lavoro senza il controllo dell'istanza, chiamare il metodo <xref:System.Activities.WorkflowInvoker.Invoke%2A>. Per eseguire in modo asincrono un flusso di lavoro senza il controllo dell'istanza, utilizzare le coppie di metodi <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> e <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> o il metodo <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>.  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato in modo sincrono un flusso di lavoro composto da una sola attività <xref:System.Activities.Statements.WriteLine> utilizzando <xref:System.Activities.WorkflowInvoker>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">La definizione del flusso di lavoro che deve essere richiamata da questa istanza della classe <see cref="T:System.Activities.WorkflowInvoker" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Activities.WorkflowInvoker" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> contiene sia metodi di istanza che metodi statici per il richiamo in modo sincrono di flussi di lavoro e metodi di istanza per il richiamo in modo asincrono di flussi di lavoro.  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività <xref:System.Activities.Statements.WriteLine>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono <see cref="T:System.IAsyncResult" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni, vedere [Cenni preliminari sulla programmazione asincrona](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">Metodo da chiamare quando il flusso di lavoro è completato.</param>
        <param name="state">Oggetto facoltativo specifico dell'applicazione che contiene informazioni sull'operazione asincrona.</param>
        <summary>Richiama un flusso di lavoro in modo asincrono utilizzando il <see cref="T:System.AsyncCallback" /> specificato e lo stato fornito dall'utente.</summary>
        <returns>Un riferimento all'operazione asincrona invoke.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> dal metodo di `callback`. Se viene chiamato <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato. Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
 Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono <xref:System.IAsyncResult>. Per altre informazioni, vedere [Cenni preliminari sulla programmazione asincrona](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Questi vengono recuperati chiamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Nella restituzione della chiamata a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</param>
        <param name="callback">Metodo da chiamare quando il flusso di lavoro è completato.</param>
        <param name="state">Oggetto facoltativo specifico dell'applicazione che contiene informazioni sull'operazione asincrona.</param>
        <summary>Richiama un flusso di lavoro in modo asincrono usando il <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input, <see cref="T:System.AsyncCallback" /> e dello stato fornito dall'utente.</summary>
        <returns>Un riferimento all'operazione asincrona invoke.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> dal metodo di `callback`. Se viene chiamato <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato.  Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
 Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono <xref:System.IAsyncResult>. Per altre informazioni, vedere [Cenni preliminari sulla programmazione asincrona](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Questi vengono recuperati chiamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Nella restituzione della chiamata a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</param>
        <param name="callback">Metodo da chiamare quando il flusso di lavoro è completato.</param>
        <param name="state">Oggetto facoltativo specifico dell'applicazione che contiene informazioni sull'operazione asincrona.</param>
        <summary>Richiama un flusso di lavoro in modo asincrono usando l'intervallo di timeout specificato, il <see cref="T:System.AsyncCallback" /> e lo stato fornito dall'utente.</summary>
        <returns>Un riferimento all'operazione asincrona invoke.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> dal metodo di `callback`. Se viene chiamato <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato. Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato quando il metodo  <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> è chiamato.  
  
> [!NOTE]
>  L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione. Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.  
  
 Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono <xref:System.IAsyncResult>. Per altre informazioni, vedere [Cenni preliminari sulla programmazione asincrona](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Questi vengono recuperati chiamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Nella restituzione della chiamata a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</param>
        <param name="timeout">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</param>
        <param name="callback">Metodo da chiamare quando il flusso di lavoro è completato.</param>
        <param name="state">Oggetto facoltativo specifico dell'applicazione che contiene informazioni sull'operazione asincrona.</param>
        <summary>Richiama un flusso di lavoro in modo asincrono usando il <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input, dell'intervallo di timeout, <see cref="T:System.AsyncCallback" /> e dello stato fornito dall'utente.</summary>
        <returns>Un riferimento all'operazione asincrona invoke.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> dal metodo di `callback`. Se viene chiamato <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato. Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e <xref:System.TimeoutException> viene generato quando un <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> è chiamato.  
  
> [!NOTE]
>  L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione. Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.  
  
 Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono <xref:System.IAsyncResult>. Per altre informazioni, vedere [Cenni preliminari sulla programmazione asincrona](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Questi vengono recuperati chiamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Nella restituzione della chiamata a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">Il token per il flusso di lavoro da annullare.</param>
        <summary>Tenta di annullare il flusso di lavoro che è stato richiamato con il <paramref name="userState" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo un flusso di lavoro richiamato da uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> che accetta il parametro `userState` può essere annullato.  
  
 Se ha esito positivo dell'annullamento, la <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> proprietà del <xref:System.Activities.InvokeCompletedEventArgs> passato al <xref:System.Activities.WorkflowInvoker.InvokeCompleted> gestore è impostato su `true`; in caso contrario, è impostato su `false`.  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Una volta richiamato il flusso di lavoro, l'host tenta di annullarlo.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Il <see cref="T:System.IAsyncResult" /> che fa riferimento all'operazione <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> che ha avviato il flusso di lavoro.</param>
        <summary>Restituisce i risultati di un flusso di lavoro richiamati utilizzando uno degli overload <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />.</summary>
        <returns>Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> dal metodo di `callback` specificato da <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>. Se viene chiamato <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato.  
  
 Questo metodo restituisce il risultato di un flusso di lavoro richiamato in modo asincrono usando il modello di struttura asincrono <xref:System.IAsyncResult>. Per altre informazioni, vedere [Cenni preliminari sulla programmazione asincrona](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Questi vengono recuperati chiamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. Nella restituzione della chiamata a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il <see cref="T:System.Collections.ObjectModel.Collection`1" /> di estensioni che sono disponibili sui flussi di lavoro richiamati da un'istanza <see cref="T:System.Activities.WorkflowInvoker" />.</summary>
        <value>L'oggetto <see cref="T:System.Collections.ObjectModel.Collection`1" /> delle estensioni disponibili per i flussi di lavoro richiamati da un'istanza <see cref="T:System.Activities.WorkflowInvoker" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà viene utilizzata dagli autori dell'host del flusso di lavoro per aggiungere estensioni all'istanza <xref:System.Activities.WorkflowInvoker> in modo da renderle disponibili ai flussi di lavoro richiamati dall'istanza.  
  
   
  
## Examples  
 Nell'esempio seguente viene registrato un oggetto <xref:System.Activities.Tracking.TrackingParticipant> personalizzato con la raccolta <xref:System.Activities.WorkflowInvoker.Extensions%2A> di un'istanza <xref:System.Activities.WorkflowInvoker>. Questo esempio di codice fa parte il [rilevamento personalizzato](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) esempio.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Richiama un flusso di lavoro in modo sincrono e restituisce un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Richiama in modo sincrono un flusso di lavoro utilizzando la definizione del flusso di lavoro passata al costruttore <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</summary>
        <returns>Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività `DiceRoll`. L'attività `DiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Nella restituzione della chiamata a `Invoke`, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento. Il flusso di lavoro viene richiamato due volte, usando la definizione del flusso di lavoro passata nel `WorkflowInvoker` costruttore.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 Se l'attività radice del flusso di lavoro non dispone di argomenti di output o se non sono necessari per l'host, è possibile ignorarli. Nell'esempio seguente viene richiamato un flusso di lavoro composto da una sola attività <xref:System.Activities.Statements.WriteLine> che non dispone di argomenti di output.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">Definizione del flusso di lavoro da richiamare.</param>
        <summary>Richiama in modo sincrono un flusso di lavoro utilizzando la definizione del flusso di lavoro specificata.</summary>
        <returns>Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività `DiceRoll`. L'attività `DiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Nella restituzione della chiamata a `Invoke`, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 Se l'attività radice del flusso di lavoro non dispone di argomenti di output o se non sono necessari per l'host, è possibile ignorarli. Nell'esempio seguente viene richiamato un flusso di lavoro composto da una sola attività <xref:System.Activities.Statements.WriteLine> che non dispone di argomenti di output.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</param>
        <summary>Richiama l'attività passata in modo sincrono al costruttore <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> con <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input.</summary>
        <returns>Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività `Divide` che dispone di due argomenti di input e due di output. Quando viene richiamato il flusso di lavoro, viene passato il dizionario `arguments` che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento. Quando la chiamata a `Invoke` restituisce un valore, ogni argomento di output viene restituito nel dizionario `outputs`, anche con chiavi in base al nome dell'argomento.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 Se il flusso di lavoro deriva da <xref:System.Activities.ActivityWithResult>, ad esempio `CodeActivity<TResult>` oppure `Activity<TResult>`, ed esistono altri argomenti di output oltre a ben definito <xref:System.Activities.Activity%601.Result%2A> un overload non generico di argomento di output `Invoke`, come questa, deve essere usata in ordine per recuperare gli argomenti aggiuntivi. A tale scopo, la definizione del flusso di lavoro passata nel `WorkflowInvoker` costruttore deve essere di tipo <xref:System.Activities.Activity>. In questo esempio il `Divide` attività deriva da `CodeActivity<int>`, ma viene dichiarata come <xref:System.Activities.Activity> in modo che questo overload del metodo `Invoke`, che restituisce un dizionario di argomenti anziché un solo valore restituito, viene usato.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</param>
        <summary>Richiama in modo sincrono un flusso di lavoro con intervallo di timeout specificato.</summary>
        <returns>Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.  
  
> [!NOTE]
>  L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione. Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro che contiene due attività <xref:System.Activities.Statements.WriteLine> e un'attività <xref:System.Activities.Statements.Delay> configurato con un <xref:System.Activities.Statements.Delay.Duration%2A> di un minuto. Questo flusso di lavoro viene richiamato due volte; la prima volta con un intervallo di timeout di due minuti e la seconda volta con un intervallo di timeout di 30 secondi. Il primo flusso di lavoro viene completato correttamente, ma non il secondo, che genera un'eccezione <xref:System.TimeoutException>. Viene visualizzato il seguente messaggio.  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 Per un esempio d'uso `Invoke` con argomenti di output, vedere l'overload del metodo <xref:System.Activities.WorkflowInvoker.Invoke%2A> con gli stessi parametri di questo overload senza un intervallo di timeout.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">Definizione del flusso di lavoro da richiamare.</param>
        <param name="inputs">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</param>
        <summary>Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro e il <see cref="T:System.Collections.Generic.IDictionary`2" /> dei parametri di input.</summary>
        <returns>Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività `Divide` che dispone di due argomenti di input e due di output. Quando viene richiamato il flusso di lavoro, viene passato il dizionario `arguments` che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento. Quando la chiamata a `Invoke` restituisce un valore, ogni argomento di output viene restituito nel dizionario `outputs`, anche con chiavi in base al nome dell'argomento.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 Se il flusso di lavoro deriva da <xref:System.Activities.ActivityWithResult>, ad esempio `CodeActivity<TResult>` oppure `Activity<TResult>`, ed esistono altri argomenti di output oltre a ben definito <xref:System.Activities.Activity%601.Result%2A> un overload non generico di argomento di output `Invoke`, come questa, deve essere usata in ordine per recuperare gli argomenti aggiuntivi. A tale scopo, la definizione del flusso di lavoro passata in `Invoke` deve essere di tipo <xref:System.Activities.Activity>. In questo esempio il `Divide` attività deriva da `CodeActivity<int>`, ma viene dichiarata come <xref:System.Activities.Activity> in modo che questo overload del metodo `Invoke`, che restituisce un dizionario di argomenti anziché un solo valore restituito, viene usato.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">Definizione del flusso di lavoro da richiamare.</param>
        <param name="timeout">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</param>
        <summary>Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro specificata e i parametri di input.</summary>
        <returns>Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.  
  
> [!NOTE]
>  L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione. Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro che contiene due attività <xref:System.Activities.Statements.WriteLine> e un'attività <xref:System.Activities.Statements.Delay> configurato con un <xref:System.Activities.Statements.Delay.Duration%2A> di un minuto. Questo flusso di lavoro viene richiamato due volte; la prima volta con un intervallo di timeout di due minuti e la seconda volta con un intervallo di timeout di 30 secondi. Il primo flusso di lavoro viene completato correttamente, ma non il secondo, che genera un'eccezione <xref:System.TimeoutException>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 Per un esempio d'uso `Invoke` con argomenti di output, vedere l'overload del metodo <xref:System.Activities.WorkflowInvoker.Invoke%2A> con gli stessi parametri di questo overload senza un intervallo di timeout.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</param>
        <param name="timeout">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</param>
        <summary>Richiama l'attività passata in modo sincrono al costruttore <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> con <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input e l'intervallo di timeout specificato.</summary>
        <returns>Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.  
  
> [!NOTE]
>  L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione. Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro che contiene due attività <xref:System.Activities.Statements.WriteLine> e un'attività <xref:System.Activities.Statements.Delay> configurato con un <xref:System.Activities.Statements.Delay.Duration%2A> di un minuto. Questo flusso di lavoro viene richiamato due volte; la prima volta con un intervallo di timeout di due minuti e la seconda volta con un intervallo di timeout di 30 secondi. Il primo flusso di lavoro viene completato correttamente, ma non il secondo, che genera un'eccezione <xref:System.TimeoutException>. Viene visualizzato il seguente messaggio.  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 Per un esempio d'uso `Invoke` con gli argomenti di input e outpui, vedere l'overload del metodo <xref:System.Activities.WorkflowInvoker.Invoke%2A> con gli stessi parametri di questo overload senza un intervallo di timeout.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">Definizione del flusso di lavoro da richiamare.</param>
        <param name="inputs">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</param>
        <param name="timeout">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</param>
        <summary>Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro specificata, il <see cref="T:System.Collections.Generic.IDictionary`2" /> dei parametri di input e l'intervallo di timeout.</summary>
        <returns>Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.  
  
> [!NOTE]
>  L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione. Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro che contiene due attività <xref:System.Activities.Statements.WriteLine> e un'attività <xref:System.Activities.Statements.Delay> configurato con un <xref:System.Activities.Statements.Delay.Duration%2A> di un minuto. Questo flusso di lavoro viene richiamato due volte; la prima volta con un intervallo di timeout di due minuti e la seconda volta con un intervallo di timeout di 30 secondi. Il primo flusso di lavoro viene completato correttamente, ma non il secondo, che genera un'eccezione <xref:System.TimeoutException>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 Per un esempio d'uso `Invoke` con gli argomenti di input e outpui, vedere l'overload del metodo <xref:System.Activities.WorkflowInvoker.Invoke%2A> con gli stessi parametri di questo overload senza un intervallo di timeout.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Il tipo di flusso di lavoro.</typeparam>
        <param name="workflow">Definizione del flusso di lavoro da richiamare. La definizione di flusso di lavoro deriva da <see cref="T:System.Activities.ActivityWithResult" />.</param>
        <summary>Richiama in modo sincrono un flusso di lavoro utilizzando la definizione del flusso di lavoro passata al costruttore <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</summary>
        <returns>Un valore di tipo TResult con il risultato dell'esecuzione dell'attività.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
   
  
## Examples  
 Nell'esempio seguente richiama un flusso di lavoro composto da una sola `Add` attività che dispone di due argomenti di input e, poiché deriva da `CodeActivity<int>` ne ha uno ben definito <xref:System.Activities.Activity%601.Result%2A> argomento di output. Quando viene richiamato il flusso di lavoro, viene passato il dizionario `arguments` che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento. Quando la chiamata a `Invoke` viene restituito, il valore della <xref:System.Activities.Activity%601.Result%2A> argomento di output viene restituito. Questo esempio di codice è basato sul [uso della classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) esempio.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Il tipo di flusso di lavoro.</typeparam>
        <param name="workflow">Definizione del flusso di lavoro da richiamare.</param>
        <param name="inputs">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</param>
        <summary>Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro e il <see cref="T:System.Collections.Generic.IDictionary`2" /> dei parametri di input.</summary>
        <returns>Un valore di tipo TResult con il risultato dell'esecuzione dell'attività.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
> [!NOTE]
>  L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione. Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.  
  
   
  
## Examples  
 Nell'esempio seguente richiama un flusso di lavoro composto da una sola `Add` attività che dispone di due argomenti di input e, poiché deriva da `CodeActivity<int>` ne ha uno ben definito <xref:System.Activities.Activity%601.Result%2A> argomento di output. Quando viene richiamato il flusso di lavoro, viene passato il dizionario `arguments` che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento. Quando la chiamata a `Invoke` viene restituito, il valore della <xref:System.Activities.Activity%601.Result%2A> argomento di output viene restituito. Questo esempio di codice è basato sul [uso della classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) esempio.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Il tipo di flusso di lavoro.</typeparam>
        <param name="workflow">Definizione del flusso di lavoro da richiamare.</param>
        <param name="inputs">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</param>
        <param name="timeout">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</param>
        <summary>Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro specificata, il <see cref="T:System.Collections.Generic.IDictionary`2" /> dei parametri di input e l'intervallo di timeout.</summary>
        <returns>Un valore di tipo TResult con il risultato dell'esecuzione dell'attività.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.  
  
> [!NOTE]
>  L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione. Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.  
  
   
  
## Examples  
 Nell'esempio seguente richiama un flusso di lavoro composto da una sola `Add` attività che dispone di due argomenti di input e, poiché deriva da `CodeActivity<int>` ne ha uno ben definito <xref:System.Activities.Activity%601.Result%2A> argomento di output. Quando viene richiamato il flusso di lavoro, viene passato il dizionario `arguments` che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento. Quando la chiamata a `Invoke` viene restituito, il valore della <xref:System.Activities.Activity%601.Result%2A> argomento di output viene restituito. Questo esempio di codice è basato sul [uso della classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) esempio.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Il tipo di flusso di lavoro.</typeparam>
        <param name="workflow">Definizione del flusso di lavoro da richiamare.</param>
        <param name="inputs">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</param>
        <param name="additionalOutputs">Il dizionario di parametri di output aggiuntivi del flusso di lavoro codificati dal nome dell'argomento.</param>
        <param name="timeout">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</param>
        <summary>Richiama un flusso di lavoro in modo sincrono usando la definizione specificata di flusso di lavoro, il <see cref="T:System.Collections.Generic.IDictionary`2" /> dei parametri di input, il <see cref="T:System.Collections.Generic.IDictionary`2" /> dei parametri di output di uscita e l'intervallo di timeout.</summary>
        <returns>Un valore di tipo TResult con il risultato dell'esecuzione dell'attività.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività. Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata. Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.  
  
> [!NOTE]
>  L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione. Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.  
  
   
  
## Examples  
 Nell'esempio seguente richiama un flusso di lavoro composto da una sola `Add` attività che dispone di due argomenti di input e, poiché deriva da `CodeActivity<int>` ne ha uno ben definito <xref:System.Activities.Activity%601.Result%2A> argomento di output. Quando viene richiamato il flusso di lavoro, viene passato il dizionario `arguments` che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento. Quando la chiamata a `Invoke` viene restituito, il valore della <xref:System.Activities.Activity%601.Result%2A> argomento di output viene restituito. Questo esempio di codice è basato sul [uso della classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) esempio.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
 Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi. Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Richiama in modo asincrono un flusso di lavoro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
 Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi. Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</param>
        <summary>Richiama un flusso di lavoro in modo asincrono utilizzando il <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
 Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi. Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">Un oggetto fornito dall'utente utilizzato per distinguere questa particolare operazione invoke asincrona dalle altre operazioni invoke asincrone correnti.</param>
        <summary>Richiama in modo asincrono un flusso di lavoro utilizzando l'identificatore univoco specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il parametro `userState` deve essere univoco attraverso tutto le operazioni attualmente in esecuzione <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> per l'attività corrente. Se il parametro `userState` non è univoco, viene generato un <xref:System.ArgumentException>. `userState` viene utilizzato per identificare il flusso di lavoro in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> e per annullare il flusso di lavoro utilizzando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  
  
 Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
 Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi. Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</param>
        <summary>Richiama in modo asincrono un flusso di lavoro con intervallo di timeout specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.  
  
> [!NOTE]
>  L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione. Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.  
  
 Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi. Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</param>
        <param name="userState">Un oggetto fornito dall'utente utilizzato per distinguere questa particolare operazione invoke asincrona dalle altre operazioni invoke asincrone correnti.</param>
        <summary>Richiama in modo asincrono un flusso di lavoro usando la definizione di flusso di lavoro e il <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input e un identificatore univoco.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il parametro `userState` deve essere univoco attraverso tutto le operazioni attualmente in esecuzione <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> per l'attività corrente. Se `userState` non è univoco, viene generato un <xref:System.ArgumentException>. `userState` viene utilizzato per identificare il flusso di lavoro in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> e per annullare il flusso di lavoro utilizzando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  
  
 Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> che accettano un oggetto  <xref:System.TimeSpan>.  
  
 Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi. Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</param>
        <param name="timeout">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</param>
        <summary>Richiama in modo asincrono con il <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input e dell'intervallo di timeout specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.  
  
> [!NOTE]
>  L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione. Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.  
  
 Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi. Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</param>
        <param name="userState">Un oggetto fornito dall'utente utilizzato per distinguere questa particolare operazione invoke asincrona dalle altre operazioni invoke asincrone correnti.</param>
        <summary>Richiama in modo asincrono un flusso di lavoro con intervallo di timeout specificato e un identificatore univoco.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il parametro `userState` deve essere univoco attraverso tutto le operazioni attualmente in esecuzione <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> per l'attività corrente. Se `userState` non è univoco, viene generato un <xref:System.ArgumentException>. `userState` viene utilizzato per identificare il flusso di lavoro in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> e per annullare il flusso di lavoro utilizzando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  
  
 Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.  
  
> [!NOTE]
>  L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione. Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.  
  
 Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi. Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</param>
        <param name="timeout">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</param>
        <param name="userState">Un oggetto fornito dall'utente utilizzato per distinguere questa particolare operazione invoke asincrona dalle altre operazioni invoke asincrone correnti.</param>
        <summary>Richiama un flusso di lavoro in modo asincrono con il <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input, l'intervallo di timeout specificato e un identificatore univoco.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il parametro `userState` deve essere univoco attraverso tutto le operazioni attualmente in esecuzione <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> per l'attività corrente. Se `userState` non è univoco, viene generato un <xref:System.ArgumentException>. `userState` viene utilizzato per identificare il flusso di lavoro in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> e per annullare il flusso di lavoro utilizzando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.  
  
 Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>. Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.  
  
> [!NOTE]
>  L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione. Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.  
  
 Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi. Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](https://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene completato o annullato il flusso di lavoro richiamato da uno degli overload <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestirlo per determinare se un flusso di lavoro richiamato con uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> è stato completato correttamente e per recuperare gli argomenti di output del flusso di lavoro completato.  
  
   
  
## Examples  
 Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`. L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi. Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>