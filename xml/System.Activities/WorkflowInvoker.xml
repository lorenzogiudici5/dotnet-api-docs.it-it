<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3bc2cfd03550b0cb99a6b076761c6d2a51d25103" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39773357" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="6f1ec-101">Fornisce mezzi per il richiamo di un flusso di lavoro come se fossero una chiamata al metodo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6f1ec-101">Provides a means for invoking a workflow as if it were a method call.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-102"><xref:System.Activities.WorkflowInvoker> contiene sia metodi di istanza che metodi statici per il richiamo in modo sincrono di flussi di lavoro e metodi di istanza per il richiamo in modo asincrono di flussi di lavoro.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-102"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
 <span data-ttu-id="6f1ec-103"><xref:System.Activities.WorkflowInvoker> non consente il controllo dell'istanza come la persistenza, lo scaricamento o la ripresa dei segnalibri.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-103"><xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks.</span></span> <span data-ttu-id="6f1ec-104">Se si desidera il controllo dell'istanza, utilizzare invece <xref:System.Activities.WorkflowApplication>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-104">If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.</span></span>  
  
 <span data-ttu-id="6f1ec-105">Per eseguire in modo sincrono flussi di lavoro senza il controllo dell'istanza, chiamare il metodo <xref:System.Activities.WorkflowInvoker.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-105">To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.</span></span> <span data-ttu-id="6f1ec-106">Per eseguire in modo asincrono un flusso di lavoro senza il controllo dell'istanza, utilizzare le coppie di metodi <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> e <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> o il metodo <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-106">To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-107">Nell'esempio seguente viene richiamato in modo sincrono un flusso di lavoro composto da una sola attività <xref:System.Activities.Statements.WriteLine> utilizzando <xref:System.Activities.WorkflowInvoker>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-107">The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="6f1ec-108">La definizione del flusso di lavoro che deve essere richiamata da questa istanza della classe <see cref="T:System.Activities.WorkflowInvoker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-108">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-109">Inizializza una nuova istanza della classe <see cref="T:System.Activities.WorkflowInvoker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-109">Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-110"><xref:System.Activities.WorkflowInvoker> contiene sia metodi di istanza che metodi statici per il richiamo in modo sincrono di flussi di lavoro e metodi di istanza per il richiamo in modo asincrono di flussi di lavoro.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-110"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-111">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività <xref:System.Activities.Statements.WriteLine>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-111">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6f1ec-112">Richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono <see cref="T:System.IAsyncResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-112">Invokes a workflow asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-113">Per altre informazioni, vedere [Cenni preliminari sulla programmazione asincrona](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-113">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="6f1ec-114">Metodo da chiamare quando il flusso di lavoro è completato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-114">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6f1ec-115">Oggetto facoltativo specifico dell'applicazione che contiene informazioni sull'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-115">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-116">Richiama un flusso di lavoro in modo asincrono utilizzando il <see cref="T:System.AsyncCallback" /> specificato e lo stato fornito dall'utente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-116">Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-117">Un riferimento all'operazione asincrona invoke.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-117">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-118">Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> dal metodo di `callback`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-118">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="6f1ec-119">Se viene chiamato <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-119">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="6f1ec-120">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-120">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="6f1ec-121">Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-121">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-122">Per altre informazioni, vedere [Cenni preliminari sulla programmazione asincrona](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-122">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-123">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-123">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-124">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-124">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-125">Questi vengono recuperati chiamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-125">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="6f1ec-126">Nella restituzione della chiamata a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-126">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="6f1ec-127">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-127">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="6f1ec-128">Metodo da chiamare quando il flusso di lavoro è completato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-128">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6f1ec-129">Oggetto facoltativo specifico dell'applicazione che contiene informazioni sull'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-129">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-130">Richiama un flusso di lavoro in modo asincrono usando il <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input, <see cref="T:System.AsyncCallback" /> e dello stato fornito dall'utente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-130">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-131">Un riferimento all'operazione asincrona invoke.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-131">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-132">Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> dal metodo di `callback`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-132">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="6f1ec-133">Se viene chiamato <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-133">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  <span data-ttu-id="6f1ec-134">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-134">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="6f1ec-135">Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-135">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-136">Per altre informazioni, vedere [Cenni preliminari sulla programmazione asincrona](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-136">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-137">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-137">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-138">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-138">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-139">Questi vengono recuperati chiamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-139">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="6f1ec-140">Nella restituzione della chiamata a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-140">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="6f1ec-141">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-141">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="6f1ec-142">Metodo da chiamare quando il flusso di lavoro è completato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-142">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6f1ec-143">Oggetto facoltativo specifico dell'applicazione che contiene informazioni sull'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-143">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-144">Richiama un flusso di lavoro in modo asincrono usando l'intervallo di timeout specificato, il <see cref="T:System.AsyncCallback" /> e lo stato fornito dall'utente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-144">Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-145">Un riferimento all'operazione asincrona invoke.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-145">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-146">Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> dal metodo di `callback`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-146">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="6f1ec-147">Se viene chiamato <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-147">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="6f1ec-148">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato quando il metodo  <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> è chiamato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-148">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f1ec-149">L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-149">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="6f1ec-150">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-150">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="6f1ec-151">Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-151">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-152">Per altre informazioni, vedere [Cenni preliminari sulla programmazione asincrona](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-152">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-153">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-153">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-154">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-154">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-155">Questi vengono recuperati chiamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-155">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="6f1ec-156">Nella restituzione della chiamata a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-156">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="6f1ec-157">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-157">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="6f1ec-158">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-158">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="6f1ec-159">Metodo da chiamare quando il flusso di lavoro è completato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-159">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="6f1ec-160">Oggetto facoltativo specifico dell'applicazione che contiene informazioni sull'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-160">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-161">Richiama un flusso di lavoro in modo asincrono usando il <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input, dell'intervallo di timeout, <see cref="T:System.AsyncCallback" /> e dello stato fornito dall'utente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-161">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-162">Un riferimento all'operazione asincrona invoke.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-162">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-163">Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> dal metodo di `callback`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-163">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="6f1ec-164">Se viene chiamato <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-164">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="6f1ec-165">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e <xref:System.TimeoutException> viene generato quando un <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> è chiamato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-165">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f1ec-166">L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-166">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="6f1ec-167">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-167">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="6f1ec-168">Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-168">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-169">Per altre informazioni, vedere [Cenni preliminari sulla programmazione asincrona](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-169">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-170">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-170">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-171">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-171">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-172">Questi vengono recuperati chiamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-172">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="6f1ec-173">Nella restituzione della chiamata a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-173">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="6f1ec-174">Il token per il flusso di lavoro da annullare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-174">The token for the workflow to cancel.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-175">Tenta di annullare il flusso di lavoro che è stato richiamato con il <paramref name="userState" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-175">Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-176">Solo un flusso di lavoro richiamato da uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> che accetta il parametro `userState` può essere annullato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-176">Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.</span></span>  
  
 <span data-ttu-id="6f1ec-177">Se ha esito positivo dell'annullamento, la <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> proprietà del <xref:System.Activities.InvokeCompletedEventArgs> passato al <xref:System.Activities.WorkflowInvoker.InvokeCompleted> gestore è impostato su `true`; in caso contrario, è impostato su `false`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-177">If the cancellation succeeds, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-178">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-178">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-179">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-179">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-180">Una volta richiamato il flusso di lavoro, l'host tenta di annullarlo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-180">Once the workflow is invoked, the host attempts to cancel the workflow.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="6f1ec-181">Il <see cref="T:System.IAsyncResult" /> che fa riferimento all'operazione <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> che ha avviato il flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-181">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-182">Restituisce i risultati di un flusso di lavoro richiamati utilizzando uno degli overload <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-182">Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-183">Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-183">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-184">Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> dal metodo di `callback` specificato da <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-184">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span></span> <span data-ttu-id="6f1ec-185">Se viene chiamato <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-185">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  
  
 <span data-ttu-id="6f1ec-186">Questo metodo restituisce il risultato di un flusso di lavoro richiamato in modo asincrono utilizzando il modello di struttura asincrono <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-186">This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-187">Per altre informazioni, vedere [Cenni preliminari sulla programmazione asincrona](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-187">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-188">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-188">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-189">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-189">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-190">Questi vengono recuperati chiamando <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-190">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="6f1ec-191">Nella restituzione della chiamata a <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-191">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6f1ec-192">Ottiene il <see cref="T:System.Collections.ObjectModel.Collection`1" /> di estensioni che sono disponibili sui flussi di lavoro richiamati da un'istanza <see cref="T:System.Activities.WorkflowInvoker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-192">Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="6f1ec-193">L'oggetto <see cref="T:System.Collections.ObjectModel.Collection`1" /> delle estensioni disponibili per i flussi di lavoro richiamati da un'istanza <see cref="T:System.Activities.WorkflowInvoker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-193">The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-194">Questa proprietà viene utilizzata dagli autori dell'host del flusso di lavoro per aggiungere estensioni all'istanza <xref:System.Activities.WorkflowInvoker> in modo da renderle disponibili ai flussi di lavoro richiamati dall'istanza.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-194">This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-195">Nell'esempio seguente viene registrato un oggetto <xref:System.Activities.Tracking.TrackingParticipant> personalizzato con la raccolta <xref:System.Activities.WorkflowInvoker.Extensions%2A> di un'istanza <xref:System.Activities.WorkflowInvoker>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-195">The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance.</span></span> <span data-ttu-id="6f1ec-196">Questo esempio di codice fa parte il [rilevamento personalizzato](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) esempio.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-196">This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6f1ec-197">Richiama un flusso di lavoro in modo sincrono e restituisce un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice codificati dal nome dell'argomento che rappresenta gli output del flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-197">Invokes a workflow synchronously and returns a dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-198">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-198">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="6f1ec-199">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-199">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="6f1ec-200">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-200">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6f1ec-201">Richiama in modo sincrono un flusso di lavoro utilizzando la definizione del flusso di lavoro passata al costruttore <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-201">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-202">Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-202">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-203">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-203">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="6f1ec-204">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-204">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="6f1ec-205">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-205">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-206">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività `DiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-206">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-207">L'attività `DiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-207">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-208">Nella restituzione della chiamata a `Invoke`, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-208">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span> <span data-ttu-id="6f1ec-209">Il flusso di lavoro viene richiamato due volte, usando la definizione del flusso di lavoro passata nel `WorkflowInvoker` costruttore.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-209">The workflow is invoked twice, using the workflow definition passed into the `WorkflowInvoker` constructor.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 <span data-ttu-id="6f1ec-210">Se l'attività radice del flusso di lavoro non dispone di argomenti di output o se non sono necessari per l'host, è possibile ignorarli.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-210">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="6f1ec-211">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una sola attività <xref:System.Activities.Statements.WriteLine> che non dispone di argomenti di output.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-211">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="6f1ec-212">Definizione del flusso di lavoro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-212">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-213">Richiama in modo sincrono un flusso di lavoro utilizzando la definizione del flusso di lavoro specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-213">Invokes a workflow synchronously using the specified workflow definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-214">Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-214">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-215">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-215">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="6f1ec-216">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-216">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="6f1ec-217">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-217">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-218">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività `DiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-218">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-219">L'attività `DiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-219">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-220">Nella restituzione della chiamata a `Invoke`, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-220">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 <span data-ttu-id="6f1ec-221">Se l'attività radice del flusso di lavoro non dispone di argomenti di output o se non sono necessari per l'host, è possibile ignorarli.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-221">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="6f1ec-222">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una sola attività <xref:System.Activities.Statements.WriteLine> che non dispone di argomenti di output.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-222">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="6f1ec-223">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-223">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-224">Richiama l'attività passata in modo sincrono al costruttore <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> con <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-224">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-225">Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-225">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-226">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-226">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="6f1ec-227">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-227">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="6f1ec-228">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-228">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-229">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività `Divide` che dispone di due argomenti di input e due di output.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-229">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="6f1ec-230">Quando viene richiamato il flusso di lavoro, viene passato il dizionario `arguments` che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-230">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="6f1ec-231">Quando la chiamata a `Invoke` restituisce un valore, ogni argomento di output viene restituito nel dizionario `outputs`, anche con chiavi in base al nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-231">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 <span data-ttu-id="6f1ec-232">Se il flusso di lavoro deriva da <xref:System.Activities.ActivityWithResult>, ad esempio `CodeActivity<TResult>` oppure `Activity<TResult>`, ed esistono altri argomenti di output oltre a ben definito <xref:System.Activities.Activity%601.Result%2A> un overload non generico di argomento di output `Invoke`, come questa, deve essere usata in ordine per recuperare gli argomenti aggiuntivi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-232">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="6f1ec-233">A tale scopo, la definizione del flusso di lavoro passata nel `WorkflowInvoker` costruttore deve essere di tipo <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-233">To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="6f1ec-234">In questo esempio il `Divide` attività deriva da `CodeActivity<int>`, ma viene dichiarata come <xref:System.Activities.Activity> in modo che questo overload del metodo `Invoke`, che restituisce un dizionario di argomenti anziché un solo valore restituito, viene usato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-234">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="6f1ec-235">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-235">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-236">Richiama in modo sincrono un flusso di lavoro con intervallo di timeout specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-236">Invokes a workflow synchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-237">Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-237">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-238">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-238">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="6f1ec-239">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-239">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="6f1ec-240">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-240">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f1ec-241">L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-241">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="6f1ec-242">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-242">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-243">Nell'esempio seguente viene richiamato un flusso di lavoro che contiene due attività <xref:System.Activities.Statements.WriteLine> e un'attività <xref:System.Activities.Statements.Delay> configurato con un <xref:System.Activities.Statements.Delay.Duration%2A> di un minuto.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-243">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="6f1ec-244">Questo flusso di lavoro viene richiamato due volte; la prima volta con un intervallo di timeout di due minuti e la seconda volta con un intervallo di timeout di 30 secondi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-244">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="6f1ec-245">Il primo flusso di lavoro viene completato correttamente, ma non il secondo, che genera un'eccezione <xref:System.TimeoutException>. Viene visualizzato il seguente messaggio.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-245">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="6f1ec-246">Per un esempio d'uso `Invoke` con argomenti di output, vedere l'overload del metodo <xref:System.Activities.WorkflowInvoker.Invoke%2A> con gli stessi parametri di questo overload senza un intervallo di timeout.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-246">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="6f1ec-247">Definizione del flusso di lavoro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-247">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="6f1ec-248">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-248">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-249">Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro e il <see cref="T:System.Collections.Generic.IDictionary`2" /> dei parametri di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-249">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-250">Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-250">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-251">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-251">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="6f1ec-252">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-252">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="6f1ec-253">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-253">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-254">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività `Divide` che dispone di due argomenti di input e due di output.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-254">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="6f1ec-255">Quando viene richiamato il flusso di lavoro, viene passato il dizionario `arguments` che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-255">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="6f1ec-256">Quando la chiamata a `Invoke` restituisce un valore, ogni argomento di output viene restituito nel dizionario `outputs`, anche con chiavi in base al nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-256">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="6f1ec-257">Se il flusso di lavoro deriva da <xref:System.Activities.ActivityWithResult>, ad esempio `CodeActivity<TResult>` oppure `Activity<TResult>`, ed esistono altri argomenti di output oltre a ben definito <xref:System.Activities.Activity%601.Result%2A> un overload non generico di argomento di output `Invoke`, come questa, deve essere usata in ordine per recuperare gli argomenti aggiuntivi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-257">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="6f1ec-258">A tale scopo, la definizione del flusso di lavoro passata in `Invoke` deve essere di tipo <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-258">To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="6f1ec-259">In questo esempio il `Divide` attività deriva da `CodeActivity<int>`, ma viene dichiarata come <xref:System.Activities.Activity> in modo che questo overload del metodo `Invoke`, che restituisce un dizionario di argomenti anziché un solo valore restituito, viene usato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-259">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="6f1ec-260">Definizione del flusso di lavoro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-260">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="6f1ec-261">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-261">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-262">Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro specificata e i parametri di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-262">Invokes a workflow synchronously using the specified workflow definition and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-263">Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-263">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-264">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-264">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="6f1ec-265">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-265">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="6f1ec-266">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-266">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f1ec-267">L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-267">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="6f1ec-268">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-268">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-269">Nell'esempio seguente viene richiamato un flusso di lavoro che contiene due attività <xref:System.Activities.Statements.WriteLine> e un'attività <xref:System.Activities.Statements.Delay> configurato con un <xref:System.Activities.Statements.Delay.Duration%2A> di un minuto.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-269">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="6f1ec-270">Questo flusso di lavoro viene richiamato due volte; la prima volta con un intervallo di timeout di due minuti e la seconda volta con un intervallo di timeout di 30 secondi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-270">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="6f1ec-271">Il primo flusso di lavoro viene completato correttamente, ma non il secondo, che genera un'eccezione <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-271">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="6f1ec-272">Per un esempio d'uso `Invoke` con argomenti di output, vedere l'overload del metodo <xref:System.Activities.WorkflowInvoker.Invoke%2A> con gli stessi parametri di questo overload senza un intervallo di timeout.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-272">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="6f1ec-273">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-273">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="6f1ec-274">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-274">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-275">Richiama l'attività passata in modo sincrono al costruttore <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> con <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input e l'intervallo di timeout specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-275">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-276">Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-276">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-277">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-277">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="6f1ec-278">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-278">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="6f1ec-279">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-279">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f1ec-280">L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-280">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="6f1ec-281">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-281">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-282">Nell'esempio seguente viene richiamato un flusso di lavoro che contiene due attività <xref:System.Activities.Statements.WriteLine> e un'attività <xref:System.Activities.Statements.Delay> configurato con un <xref:System.Activities.Statements.Delay.Duration%2A> di un minuto.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-282">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="6f1ec-283">Questo flusso di lavoro viene richiamato due volte; la prima volta con un intervallo di timeout di due minuti e la seconda volta con un intervallo di timeout di 30 secondi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-283">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="6f1ec-284">Il primo flusso di lavoro viene completato correttamente, ma non il secondo, che genera un'eccezione <xref:System.TimeoutException>. Viene visualizzato il seguente messaggio.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-284">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="6f1ec-285">Per un esempio d'uso `Invoke` con gli argomenti di input e outpui, vedere l'overload del metodo <xref:System.Activities.WorkflowInvoker.Invoke%2A> con gli stessi parametri di questo overload senza un intervallo di timeout.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-285">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="6f1ec-286">Definizione del flusso di lavoro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-286">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="6f1ec-287">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-287">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="6f1ec-288">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-288">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-289">Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro specificata, il <see cref="T:System.Collections.Generic.IDictionary`2" /> dei parametri di input e l'intervallo di timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-289">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-290">Un dizionario dei valori <see cref="T:System.Activities.OutArgument" /> e <see cref="T:System.Activities.InOutArgument" /> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-290">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-291">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-291">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="6f1ec-292">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-292">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="6f1ec-293">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-293">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f1ec-294">L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-294">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="6f1ec-295">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-295">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-296">Nell'esempio seguente viene richiamato un flusso di lavoro che contiene due attività <xref:System.Activities.Statements.WriteLine> e un'attività <xref:System.Activities.Statements.Delay> configurato con un <xref:System.Activities.Statements.Delay.Duration%2A> di un minuto.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-296">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="6f1ec-297">Questo flusso di lavoro viene richiamato due volte; la prima volta con un intervallo di timeout di due minuti e la seconda volta con un intervallo di timeout di 30 secondi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-297">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="6f1ec-298">Il primo flusso di lavoro viene completato correttamente, ma non il secondo, che genera un'eccezione <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-298">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="6f1ec-299">Per un esempio d'uso `Invoke` con gli argomenti di input e outpui, vedere l'overload del metodo <xref:System.Activities.WorkflowInvoker.Invoke%2A> con gli stessi parametri di questo overload senza un intervallo di timeout.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-299">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="6f1ec-300">Il tipo di flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-300">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="6f1ec-301">Definizione del flusso di lavoro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-301">The workflow definition of the workflow to invoke.</span>
          </span>
          <span data-ttu-id="6f1ec-302">La definizione di flusso di lavoro deriva da <see cref="T:System.Activities.ActivityWithResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-302">The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-303">Richiama in modo sincrono un flusso di lavoro utilizzando la definizione del flusso di lavoro passata al costruttore <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-303">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-304">Un valore di tipo TResult con il risultato dell'esecuzione dell'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-304">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-305">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-305">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="6f1ec-306">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-306">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="6f1ec-307">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-307">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-308">Nell'esempio seguente richiama un flusso di lavoro composto da una sola `Add` attività che dispone di due argomenti di input e, poiché deriva da `CodeActivity<int>` ne ha uno ben definito <xref:System.Activities.Activity%601.Result%2A> argomento di output.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-308">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="6f1ec-309">Quando viene richiamato il flusso di lavoro, viene passato il dizionario `arguments` che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-309">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="6f1ec-310">Quando la chiamata a `Invoke` viene restituito, il valore della <xref:System.Activities.Activity%601.Result%2A> argomento di output viene restituito.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-310">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="6f1ec-311">Questo esempio di codice è basato sul [uso della classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) esempio.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-311">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="6f1ec-312">Il tipo di flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-312">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="6f1ec-313">Definizione del flusso di lavoro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-313">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="6f1ec-314">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-314">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-315">Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro e il <see cref="T:System.Collections.Generic.IDictionary`2" /> dei parametri di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-315">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-316">Un valore di tipo TResult con il risultato dell'esecuzione dell'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-316">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-317">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-317">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="6f1ec-318">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-318">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="6f1ec-319">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.Invoke%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-319">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f1ec-320">L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-320">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="6f1ec-321">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-321">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-322">Nell'esempio seguente richiama un flusso di lavoro composto da una sola `Add` attività che dispone di due argomenti di input e, poiché deriva da `CodeActivity<int>` ne ha uno ben definito <xref:System.Activities.Activity%601.Result%2A> argomento di output.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-322">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="6f1ec-323">Quando viene richiamato il flusso di lavoro, viene passato il dizionario `arguments` che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-323">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="6f1ec-324">Quando la chiamata a `Invoke` viene restituito, il valore della <xref:System.Activities.Activity%601.Result%2A> argomento di output viene restituito.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-324">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="6f1ec-325">Questo esempio di codice è basato sul [uso della classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) esempio.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-325">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="6f1ec-326">Il tipo di flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-326">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="6f1ec-327">Definizione del flusso di lavoro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-327">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="6f1ec-328">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-328">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="6f1ec-329">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-329">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-330">Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro specificata, il <see cref="T:System.Collections.Generic.IDictionary`2" /> dei parametri di input e l'intervallo di timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-330">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-331">Un valore di tipo TResult con il risultato dell'esecuzione dell'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-331">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-332">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-332">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="6f1ec-333">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-333">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="6f1ec-334">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-334">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f1ec-335">L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-335">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="6f1ec-336">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-336">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-337">Nell'esempio seguente richiama un flusso di lavoro composto da una sola `Add` attività che dispone di due argomenti di input e, poiché deriva da `CodeActivity<int>` ne ha uno ben definito <xref:System.Activities.Activity%601.Result%2A> argomento di output.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-337">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="6f1ec-338">Quando viene richiamato il flusso di lavoro, viene passato il dizionario `arguments` che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-338">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="6f1ec-339">Quando la chiamata a `Invoke` viene restituito, il valore della <xref:System.Activities.Activity%601.Result%2A> argomento di output viene restituito.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-339">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="6f1ec-340">Questo esempio di codice è basato sul [uso della classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) esempio.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-340">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="6f1ec-341">Il tipo di flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-341">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="6f1ec-342">Definizione del flusso di lavoro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-342">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="6f1ec-343">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-343">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="additionalOutputs">
          <span data-ttu-id="6f1ec-344">Il dizionario di parametri di output aggiuntivi del flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-344">The dictionary of additional output parameters of the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="6f1ec-345">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-345">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-346">Richiama un flusso di lavoro in modo sincrono usando la definizione specificata di flusso di lavoro, il <see cref="T:System.Collections.Generic.IDictionary`2" /> dei parametri di input, il <see cref="T:System.Collections.Generic.IDictionary`2" /> dei parametri di output di uscita e l'intervallo di timeout.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-346">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="6f1ec-347">Un valore di tipo TResult con il risultato dell'esecuzione dell'attività.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-347">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-348">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-348">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="6f1ec-349">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-349">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="6f1ec-350">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-350">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f1ec-351">L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-351">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="6f1ec-352">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-352">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-353">Nell'esempio seguente richiama un flusso di lavoro composto da una sola `Add` attività che dispone di due argomenti di input e, poiché deriva da `CodeActivity<int>` ne ha uno ben definito <xref:System.Activities.Activity%601.Result%2A> argomento di output.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-353">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="6f1ec-354">Quando viene richiamato il flusso di lavoro, viene passato il dizionario `arguments` che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-354">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="6f1ec-355">Quando la chiamata a `Invoke` viene restituito, il valore della <xref:System.Activities.Activity%601.Result%2A> argomento di output viene restituito.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-355">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="6f1ec-356">Questo esempio di codice è basato sul [uso della classe WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) esempio.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-356">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="6f1ec-357">Richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-357">Invokes a workflow asynchronously using the event-based asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-358">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-358">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="6f1ec-359">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-359">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="6f1ec-360">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-360">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-361">Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-361">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="6f1ec-362">Richiama in modo asincrono un flusso di lavoro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-362">Invokes a workflow asynchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-363">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-363">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="6f1ec-364">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-364">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="6f1ec-365">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-365">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-366">Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-366">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-367">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-367">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-368">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-368">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-369">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-369">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="6f1ec-370">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-370">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-371">Richiama un flusso di lavoro in modo asincrono utilizzando il <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-371">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-372">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-372">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="6f1ec-373">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-373">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="6f1ec-374">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-374">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-375">Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-375">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-376">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-376">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-377">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-377">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-378">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-378">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="6f1ec-379">Un oggetto fornito dall'utente utilizzato per distinguere questa particolare operazione invoke asincrona dalle altre operazioni invoke asincrone correnti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-379">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-380">Richiama in modo asincrono un flusso di lavoro utilizzando l'identificatore univoco specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-380">Invokes a workflow asynchronously using the specified unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-381">Il parametro `userState` deve essere univoco attraverso tutto le operazioni attualmente in esecuzione <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> per l'attività corrente.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-381">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="6f1ec-382">Se il parametro `userState` non è univoco, viene generato un <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-382">If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="6f1ec-383">`userState` viene utilizzato per identificare il flusso di lavoro in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> e per annullare il flusso di lavoro utilizzando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-383">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="6f1ec-384">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-384">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="6f1ec-385">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-385">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="6f1ec-386">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-386">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-387">Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-387">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-388">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-388">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-389">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-389">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-390">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-390">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="6f1ec-391">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-391">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-392">Richiama in modo asincrono un flusso di lavoro con intervallo di timeout specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-392">Invokes a workflow asynchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-393">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-393">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="6f1ec-394">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-394">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f1ec-395">L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-395">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="6f1ec-396">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-396">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="6f1ec-397">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-397">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-398">Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-398">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-399">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-399">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-400">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-400">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-401">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-401">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="6f1ec-402">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-402">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="6f1ec-403">Un oggetto fornito dall'utente utilizzato per distinguere questa particolare operazione invoke asincrona dalle altre operazioni invoke asincrone correnti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-403">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-404">Richiama in modo asincrono un flusso di lavoro usando la definizione di flusso di lavoro e il <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input e un identificatore univoco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-404">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-405">Il parametro `userState` deve essere univoco attraverso tutto le operazioni attualmente in esecuzione <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> per l'attività corrente.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-405">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="6f1ec-406">Se `userState` non è univoco, viene generato un <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-406">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="6f1ec-407">`userState` viene utilizzato per identificare il flusso di lavoro in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> e per annullare il flusso di lavoro utilizzando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-407">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="6f1ec-408">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-408">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="6f1ec-409">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> che accettano un oggetto  <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-409">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="6f1ec-410">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-410">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-411">Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-411">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-412">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-412">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-413">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-413">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-414">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-414">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="6f1ec-415">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-415">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="6f1ec-416">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-416">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-417">Richiama in modo asincrono con il <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input e dell'intervallo di timeout specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-417">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-418">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-418">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="6f1ec-419">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-419">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f1ec-420">L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-420">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="6f1ec-421">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-421">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="6f1ec-422">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-422">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-423">Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-423">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-424">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-424">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-425">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-425">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-426">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-426">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="6f1ec-427">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-427">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="6f1ec-428">Un oggetto fornito dall'utente utilizzato per distinguere questa particolare operazione invoke asincrona dalle altre operazioni invoke asincrone correnti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-428">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-429">Richiama in modo asincrono un flusso di lavoro con intervallo di timeout specificato e un identificatore univoco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-429">Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-430">Il parametro `userState` deve essere univoco attraverso tutto le operazioni attualmente in esecuzione <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> per l'attività corrente.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-430">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="6f1ec-431">Se `userState` non è univoco, viene generato un <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-431">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="6f1ec-432">`userState` viene utilizzato per identificare il flusso di lavoro in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> e per annullare il flusso di lavoro utilizzando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-432">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="6f1ec-433">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-433">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="6f1ec-434">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-434">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f1ec-435">L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-435">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="6f1ec-436">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-436">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="6f1ec-437">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-437">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-438">Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-438">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-439">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-439">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-440">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-440">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-441">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-441">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="6f1ec-442">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-442">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="6f1ec-443">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <see cref="T:System.TimeoutException" /> venga generato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-443">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="6f1ec-444">Un oggetto fornito dall'utente utilizzato per distinguere questa particolare operazione invoke asincrona dalle altre operazioni invoke asincrone correnti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-444">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="6f1ec-445">Richiama un flusso di lavoro in modo asincrono con il <see cref="T:System.Collections.Generic.IDictionary`2" /> specificato dei parametri di input, l'intervallo di timeout specificato e un identificatore univoco.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-445">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-446">Il parametro `userState` deve essere univoco attraverso tutto le operazioni attualmente in esecuzione <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> per l'attività corrente.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-446">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="6f1ec-447">Se `userState` non è univoco, viene generato un <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-447">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="6f1ec-448">`userState` viene utilizzato per identificare il flusso di lavoro in <xref:System.Activities.WorkflowInvoker.InvokeCompleted> e per annullare il flusso di lavoro utilizzando <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-448">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="6f1ec-449">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-449">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="6f1ec-450">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <xref:System.TimeoutException> viene generato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-450">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6f1ec-451">L'eccezione <xref:System.TimeoutException> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-451">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="6f1ec-452">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-452">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="6f1ec-453">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-453">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="6f1ec-454">Per ulteriori informazioni, vedere [Cenni preliminari sul modello asincrono basato su eventi](http://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="6f1ec-454">For more information, see [Event-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-455">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-455">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-456">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-456">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-457">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-457">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="6f1ec-458">Si verifica quando viene completato o annullato il flusso di lavoro richiamato da uno degli overload <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="6f1ec-458">Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6f1ec-459">Gestirlo per determinare se un flusso di lavoro richiamato con uno degli overload <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> è stato completato correttamente e per recuperare gli argomenti di output del flusso di lavoro completato.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-459">Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6f1ec-460">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-460">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="6f1ec-461">L'attività `LongRunningDiceRoll` dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-461">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="6f1ec-462">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="6f1ec-462">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>