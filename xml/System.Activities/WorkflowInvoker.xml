<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WorkflowInvoker.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c72945be5ca2e82d6b9cbb6f146755c137b85aa0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c72945be5ca2e82d6b9cbb6f146755c137b85aa0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowInvoker">
          <source>Provides a means for invoking a workflow as if it were a method call.</source>
          <target state="translated">Fornisce mezzi per il richiamo di un flusso di lavoro come se fossero una chiamata al metodo.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> contiene sia metodi di istanza che metodi statici per il richiamo in modo sincrono di flussi di lavoro e metodi di istanza per il richiamo in modo asincrono di flussi di lavoro.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> does not allow instance control such as persisting, unloading, or resuming bookmarks.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> non consente il controllo dell'istanza come la persistenza, lo scaricamento o la ripresa dei segnalibri.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>If instance control is desired, use <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> instead.</source>
          <target state="translated">Se si desidera il controllo dell'istanza, utilizzare invece <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>To execute workflows synchronously with no instance control, call the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">Per eseguire in modo sincrono flussi di lavoro senza il controllo dell'istanza, chiamare il metodo <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>To execute a workflow asynchronously with no instance control, use the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> method pairs, or the <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> method.</source>
          <target state="translated">Per eseguire in modo asincrono un flusso di lavoro senza il controllo dell'istanza, utilizzare le coppie di metodi <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> o il metodo <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>The following example synchronously invokes a workflow consisting of a single <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity using <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente viene richiamato in modo sincrono un flusso di lavoro composto da una sola attività <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> utilizzando <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)">
          <source>The workflow definition of the workflow to be invoked by this instance of the <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph> class.</source>
          <target state="translated">La definizione del flusso di lavoro che deve essere richiamata da questa istanza della classe <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> contiene sia metodi di istanza che metodi statici per il richiamo in modo sincrono di flussi di lavoro e metodi di istanza per il richiamo in modo asincrono di flussi di lavoro.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowInvoker">
          <source>Invokes a workflow asynchronously using the <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">Richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Cenni preliminari sulla programmazione asincrona<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>The method to be called when the workflow has completed.</source>
          <target state="translated">Metodo da chiamare quando il flusso di lavoro è completato.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">Oggetto facoltativo specifico dell'applicazione che contiene informazioni sull'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> and user-provided state.</source>
          <target state="translated">Richiama un flusso di lavoro in modo asincrono utilizzando il <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> specificato e lo stato fornito dall'utente.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous invoke operation.</source>
          <target state="translated">Un riferimento all'operazione asincrona invoke.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> dal metodo di <ph id="ph2">`callback`</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
          <target state="translated">Se viene chiamato <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>This method invokes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Cenni preliminari sulla programmazione asincrona<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>These are retrieved by calling <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</source>
          <target state="translated">Questi vengono recuperati chiamando <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
          <source>When the call to <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated">Nella restituzione della chiamata a <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>The method to be called when the workflow has completed.</source>
          <target state="translated">Metodo da chiamare quando il flusso di lavoro è completato.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">Oggetto facoltativo specifico dell'applicazione che contiene informazioni sull'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters, <ph id="ph2">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>, and user-provided state.</source>
          <target state="translated">Richiama un flusso di lavoro in modo asincrono usando il <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> specificato dei parametri di input, <ph id="ph2">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> e dello stato fornito dall'utente.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous invoke operation.</source>
          <target state="translated">Un riferimento all'operazione asincrona invoke.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> dal metodo di <ph id="ph2">`callback`</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
          <target state="translated">Se viene chiamato <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>This method invokes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Cenni preliminari sulla programmazione asincrona<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>These are retrieved by calling <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</source>
          <target state="translated">Questi vengono recuperati chiamando <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
          <source>When the call to <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated">Nella restituzione della chiamata a <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> venga generato.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the workflow has completed.</source>
          <target state="translated">Metodo da chiamare quando il flusso di lavoro è completato.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">Oggetto facoltativo specifico dell'applicazione che contiene informazioni sull'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Invokes a workflow asynchronously using the specified time-out interval, <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>, and user-provided state.</source>
          <target state="translated">Richiama un flusso di lavoro in modo asincrono usando l'intervallo di timeout specificato, il <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> e lo stato fornito dall'utente.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous invoke operation.</source>
          <target state="translated">Un riferimento all'operazione asincrona invoke.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> dal metodo di <ph id="ph2">`callback`</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
          <target state="translated">Se viene chiamato <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown when the <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> method is called.</source>
          <target state="translated">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generato quando il metodo  <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> è chiamato.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated">L'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method invokes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Cenni preliminari sulla programmazione asincrona<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>These are retrieved by calling <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</source>
          <target state="translated">Questi vengono recuperati chiamando <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When the call to <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated">Nella restituzione della chiamata a <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> venga generato.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The method to be called when the workflow has completed.</source>
          <target state="translated">Metodo da chiamare quando il flusso di lavoro è completato.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>An optional application-specific object that contains information about the asynchronous operation.</source>
          <target state="translated">Oggetto facoltativo specifico dell'applicazione che contiene informazioni sull'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters, time-out interval, <ph id="ph2">&lt;see cref="T:System.AsyncCallback" /&gt;</ph>, and user-provided state.</source>
          <target state="translated">Richiama un flusso di lavoro in modo asincrono usando il <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> specificato dei parametri di input, dell'intervallo di timeout, <ph id="ph2">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> e dello stato fornito dall'utente.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A reference to the asynchronous invoke operation.</source>
          <target state="translated">Un riferimento all'operazione asincrona invoke.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> dal metodo di <ph id="ph2">`callback`</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
          <target state="translated">Se viene chiamato <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown when <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called.</source>
          <target state="translated">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generato quando un <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> è chiamato.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated">L'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>This method invokes a workflow asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">Questo metodo richiama un flusso di lavoro in modo asincrono utilizzando il modello di struttura asincrono <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Cenni preliminari sulla programmazione asincrona<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>These are retrieved by calling <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</source>
          <target state="translated">Questi vengono recuperati chiamando <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
          <source>When the call to <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated">Nella restituzione della chiamata a <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>The token for the workflow to cancel.</source>
          <target state="translated">Il token per il flusso di lavoro da annullare.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>Attempts to cancel the workflow that was invoked with the specified <ph id="ph1">&lt;paramref name="userState" /&gt;</ph>.</source>
          <target state="translated">Tenta di annullare il flusso di lavoro che è stato richiamato con il <ph id="ph1">&lt;paramref name="userState" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>Only a workflow invoked by one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that takes a <ph id="ph2">`userState`</ph> parameter can be canceled.</source>
          <target state="translated">Solo un flusso di lavoro richiamato da uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> che accetta il parametro <ph id="ph2">`userState`</ph> può essere annullato.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>If the cancellation succeeds, the <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Activities.InvokeCompletedEventArgs&gt;</ph> passed to the <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler is set to <ph id="ph4">`true`</ph>; otherwise, it is set to <ph id="ph5">`false`</ph>.</source>
          <target state="translated">Se l'annullamento ha esito positivo, il <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> proprietà del <ph id="ph2">&lt;xref:System.Activities.InvokeCompletedEventArgs&gt;</ph> passato al <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> gestore è impostato su <ph id="ph4">`true`</ph>; in caso contrario, viene impostato su <ph id="ph5">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)">
          <source>Once the workflow is invoked, the host attempts to cancel the workflow.</source>
          <target state="translated">Una volta richiamato il flusso di lavoro, l'host tenta di annullarlo.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the <ph id="ph2">&lt;see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /&gt;</ph> operation that started the workflow.</source>
          <target state="translated">Il <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> che fa riferimento all'operazione <ph id="ph2">&lt;see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /&gt;</ph> che ha avviato il flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>Returns the results of a workflow that was invoked using one of the <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /&gt;</ph> overloads.</source>
          <target state="translated">Restituisce i risultati di un flusso di lavoro richiamati utilizzando uno degli overload <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">Un dizionario dei valori <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> e <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> from the <ph id="ph2">`callback`</ph> method specified by <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph>.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo e recuperare i parametri di output del flusso di lavoro, chiamare <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> dal metodo di <ph id="ph2">`callback`</ph> specificato da <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>If <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> is called before the workflow completes, it blocks until the workflow completes.</source>
          <target state="translated">Se viene chiamato <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> prima che il flusso di lavoro venga completato, si blocca fino a che il flusso di lavoro viene completato.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>This method returns the result of a workflow invoked asynchronously using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> asynchronous design pattern.</source>
          <target state="translated">Questo metodo restituisce il risultato di un flusso di lavoro richiamato in modo asincrono utilizzando il modello di struttura asincrono <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Asynchronous Programming Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Cenni preliminari sulla programmazione asincrona<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141764)</ept>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>These are retrieved by calling <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</source>
          <target state="translated">Questi vengono recuperati chiamando <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)">
          <source>When the call to <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated">Nella restituzione della chiamata a <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.EndInvoke%2A&gt;</ph>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="P:System.Activities.WorkflowInvoker.Extensions">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> of extensions that are available to workflows invoked by a <ph id="ph2">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph> instance.</source>
          <target state="translated">Ottiene il <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> di estensioni che sono disponibili sui flussi di lavoro richiamati da un'istanza <ph id="ph2">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowInvoker.Extensions">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> of extensions that are available to workflows invoked by a <ph id="ph2">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph> instance.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;</ph> delle estensioni disponibili per i flussi di lavoro richiamati da un'istanza <ph id="ph2">&lt;see cref="T:System.Activities.WorkflowInvoker" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowInvoker.Extensions">
          <source>This property is used by workflow host authors to add extensions to the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> instance so they will be available to workflows invoked by it.</source>
          <target state="translated">Questa proprietà viene utilizzata dagli autori dell'host del flusso di lavoro per aggiungere estensioni all'istanza <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> in modo da renderle disponibili ai flussi di lavoro richiamati dall'istanza.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowInvoker.Extensions">
          <source>The following example registers a custom <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> with the <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Extensions%2A&gt;</ph> collection of a <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> instance.</source>
          <target state="translated">Nell'esempio seguente viene registrato un oggetto <ph id="ph1">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph> personalizzato con la raccolta <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Extensions%2A&gt;</ph> di un'istanza <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Activities.WorkflowInvoker.Extensions">
          <source>This code example is part of the <bpt id="p1">[</bpt>Custom Tracking<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md)</ept> sample.</source>
          <target state="translated">Questo esempio di codice fa parte di <bpt id="p1">[</bpt>rilevamento personalizzato<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md)</ept> esempio.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowInvoker">
          <source>Invokes a workflow synchronously and returns a dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">Richiama un flusso di lavoro in modo sincrono e restituisce un dizionario dei valori <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> e <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> dell'attività radice codificati dal nome dell'argomento che rappresenta gli output del flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>Invokes a workflow synchronously using the workflow definition passed to the <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph> constructor.</source>
          <target state="translated">Richiama in modo sincrono un flusso di lavoro utilizzando la definizione del flusso di lavoro passata al costruttore <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">Un dizionario dei valori <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> e <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`DiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività <ph id="ph1">`DiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>The <ph id="ph1">`DiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`DiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated">Nella restituzione della chiamata a <ph id="ph1">`Invoke`</ph>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>The workflow is invoked twice, using the workflow definition passed into the <ph id="ph1">`WorkflowInvoker`</ph> constructor.</source>
          <target state="translated">Il flusso di lavoro viene richiamato due volte, usando la definizione del flusso di lavoro passata il <ph id="ph1">`WorkflowInvoker`</ph> costruttore.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</source>
          <target state="translated">Se l'attività radice del flusso di lavoro non dispone di argomenti di output o se non sono necessari per l'host, è possibile ignorarli.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity that does not have any output arguments.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una sola attività <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> che non dispone di argomenti di output.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">Definizione del flusso di lavoro da richiamare.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>Invokes a workflow synchronously using the specified workflow definition.</source>
          <target state="translated">Richiama in modo sincrono un flusso di lavoro utilizzando la definizione del flusso di lavoro specificata.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">Un dizionario dei valori <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> e <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`DiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività <ph id="ph1">`DiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>The <ph id="ph1">`DiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`DiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</source>
          <target state="translated">Nella restituzione della chiamata a <ph id="ph1">`Invoke`</ph>, ogni argomento di output viene restituito nel dizionario di output, con chiave basata sul nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</source>
          <target state="translated">Se l'attività radice del flusso di lavoro non dispone di argomenti di output o se non sono necessari per l'host, è possibile ignorarli.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity that does not have any output arguments.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una sola attività <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> che non dispone di argomenti di output.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>Invokes the activity passed to the <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph> constructor synchronously with the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters.</source>
          <target state="translated">Richiama l'attività passata in modo sincrono al costruttore <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph> con <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> specificato dei parametri di input.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">Un dizionario dei valori <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> e <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`Divide`</ph> activity that has two input arguments and two output arguments.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività <ph id="ph1">`Divide`</ph> che dispone di due argomenti di input e due di output.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the workflow is invoked, the <ph id="ph1">`arguments`</ph> dictionary is passed which contains the values for each input argument, keyed by argument name.</source>
          <target state="translated">Quando viene richiamato il flusso di lavoro, viene passato il dizionario <ph id="ph1">`arguments`</ph> che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, each output argument is returned in the <ph id="ph2">`outputs`</ph> dictionary, also keyed by argument name.</source>
          <target state="translated">Quando la chiamata a <ph id="ph1">`Invoke`</ph> restituisce un valore, ogni argomento di output viene restituito nel dizionario <ph id="ph2">`outputs`</ph>, anche con chiavi in base al nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>If the workflow derives from <ph id="ph1">&lt;xref:System.Activities.ActivityWithResult&gt;</ph>, such as <ph id="ph2">`CodeActivity&lt;TResult&gt;`</ph> or <ph id="ph3">`Activity&lt;TResult&gt;`</ph>, and there are output arguments in addition to the well-defined <ph id="ph4">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument, a non-generic overload of <ph id="ph5">`Invoke`</ph>, such as this one, must be used in order to retrieve the additional arguments.</source>
          <target state="translated">Se il flusso di lavoro deriva da <ph id="ph1">&lt;xref:System.Activities.ActivityWithResult&gt;</ph>, ad esempio <ph id="ph2">`CodeActivity&lt;TResult&gt;`</ph> o <ph id="ph3">`Activity&lt;TResult&gt;`</ph>, e sono disponibili argomenti di output oltre ben definito <ph id="ph4">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argomento, un overload non generico di <ph id="ph5">`Invoke`</ph>, ad esempio, deve essere usata in ordine per recuperare gli argomenti aggiuntivi.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To do this, the workflow definition passed into the <ph id="ph1">`WorkflowInvoker`</ph> constructor must be of type <ph id="ph2">&lt;xref:System.Activities.Activity&gt;</ph>.</source>
          <target state="translated">A tale scopo, la definizione del flusso di lavoro passata nel <ph id="ph1">`WorkflowInvoker`</ph> costruttore deve essere di tipo <ph id="ph2">&lt;xref:System.Activities.Activity&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>In this example the <ph id="ph1">`Divide`</ph> activity derives from <ph id="ph2">`CodeActivity&lt;int&gt;`</ph>, but is declared as <ph id="ph3">&lt;xref:System.Activities.Activity&gt;</ph> so that this overload of <ph id="ph4">`Invoke`</ph>, which returns a dictionary of arguments instead of a single return value, is used.</source>
          <target state="translated">In questo esempio il <ph id="ph1">`Divide`</ph> attività deriva da <ph id="ph2">`CodeActivity&lt;int&gt;`</ph>, ma viene dichiarata come <ph id="ph3">&lt;xref:System.Activities.Activity&gt;</ph> in modo che questo overload del metodo <ph id="ph4">`Invoke`</ph>, che restituisce un dizionario di argomenti anziché un solo valore restituito viene utilizzato.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> venga generato.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>Invokes a workflow synchronously with the specified time-out interval.</source>
          <target state="translated">Richiama in modo sincrono un flusso di lavoro con intervallo di timeout specificato.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">Un dizionario dei valori <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> e <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generato.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated">L'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>The following example invokes a workflow that contains two <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities and a <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph> activity configured with a <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> of one minute.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro che contiene due attività <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> e un'attività <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph> configurato con un <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> di un minuto.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</source>
          <target state="translated">Questo flusso di lavoro viene richiamato due volte; la prima volta con un intervallo di timeout di due minuti e la seconda volta con un intervallo di timeout di 30 secondi.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>The first workflow completes successfully, but the second one does not and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown and the following message is displayed.</source>
          <target state="translated">Il primo flusso di lavoro viene completato correttamente, ma non il secondo, che genera un'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>. Viene visualizzato il seguente messaggio.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)">
          <source>For an example of using <ph id="ph1">`Invoke`</ph> with output arguments, see the overload of <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> with the same parameters as this overload without the time-out interval.</source>
          <target state="translated">Per un esempio di utilizzo <ph id="ph1">`Invoke`</ph> con argomenti di output, vedere il metodo di overload <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> con gli stessi parametri di questo overload senza l'intervallo di timeout.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">Definizione del flusso di lavoro da richiamare.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>Invokes a workflow synchronously using the specified workflow definition and <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters.</source>
          <target state="translated">Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro e il <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> dei parametri di input.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">Un dizionario dei valori <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> e <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`Divide`</ph> activity that has two input arguments and two output arguments.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da una singola attività <ph id="ph1">`Divide`</ph> che dispone di due argomenti di input e due di output.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the workflow is invoked, the <ph id="ph1">`arguments`</ph> dictionary is passed which contains the values for each input argument, keyed by argument name.</source>
          <target state="translated">Quando viene richiamato il flusso di lavoro, viene passato il dizionario <ph id="ph1">`arguments`</ph> che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, each output argument is returned in the <ph id="ph2">`outputs`</ph> dictionary, also keyed by argument name.</source>
          <target state="translated">Quando la chiamata a <ph id="ph1">`Invoke`</ph> restituisce un valore, ogni argomento di output viene restituito nel dizionario <ph id="ph2">`outputs`</ph>, anche con chiavi in base al nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>If the workflow derives from <ph id="ph1">&lt;xref:System.Activities.ActivityWithResult&gt;</ph>, such as <ph id="ph2">`CodeActivity&lt;TResult&gt;`</ph> or <ph id="ph3">`Activity&lt;TResult&gt;`</ph>, and there are output arguments in addition to the well-defined <ph id="ph4">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument, a non-generic overload of <ph id="ph5">`Invoke`</ph>, such as this one, must be used in order to retrieve the additional arguments.</source>
          <target state="translated">Se il flusso di lavoro deriva da <ph id="ph1">&lt;xref:System.Activities.ActivityWithResult&gt;</ph>, ad esempio <ph id="ph2">`CodeActivity&lt;TResult&gt;`</ph> o <ph id="ph3">`Activity&lt;TResult&gt;`</ph>, e sono disponibili argomenti di output oltre ben definito <ph id="ph4">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argomento, un overload non generico di <ph id="ph5">`Invoke`</ph>, ad esempio, deve essere usata in ordine per recuperare gli argomenti aggiuntivi.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To do this, the workflow definition passed into <ph id="ph1">`Invoke`</ph> must be of type <ph id="ph2">&lt;xref:System.Activities.Activity&gt;</ph>.</source>
          <target state="translated">A tale scopo, la definizione del flusso di lavoro passata in <ph id="ph1">`Invoke`</ph> deve essere di tipo <ph id="ph2">&lt;xref:System.Activities.Activity&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>In this example the <ph id="ph1">`Divide`</ph> activity derives from <ph id="ph2">`CodeActivity&lt;int&gt;`</ph>, but is declared as <ph id="ph3">&lt;xref:System.Activities.Activity&gt;</ph> so that this overload of <ph id="ph4">`Invoke`</ph>, which returns a dictionary of arguments instead of a single return value, is used.</source>
          <target state="translated">In questo esempio il <ph id="ph1">`Divide`</ph> attività deriva da <ph id="ph2">`CodeActivity&lt;int&gt;`</ph>, ma viene dichiarata come <ph id="ph3">&lt;xref:System.Activities.Activity&gt;</ph> in modo che questo overload del metodo <ph id="ph4">`Invoke`</ph>, che restituisce un dizionario di argomenti anziché un solo valore restituito viene utilizzato.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">Definizione del flusso di lavoro da richiamare.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> venga generato.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>Invokes a workflow synchronously using the specified workflow definition and time-out interval.</source>
          <target state="translated">Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro specificata e i parametri di input.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">Un dizionario dei valori <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> e <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generato.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated">L'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>The following example invokes a workflow that contains two <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities and a <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph> activity configured with a <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> of one minute.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro che contiene due attività <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> e un'attività <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph> configurato con un <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> di un minuto.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</source>
          <target state="translated">Questo flusso di lavoro viene richiamato due volte; la prima volta con un intervallo di timeout di due minuti e la seconda volta con un intervallo di timeout di 30 secondi.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>The first workflow completes successfully, but the second one does not and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">Il primo flusso di lavoro viene completato correttamente, ma non il secondo, che genera un'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)">
          <source>For an example of using <ph id="ph1">`Invoke`</ph> with output arguments, see the overload of <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> with the same parameters as this overload without the time-out interval.</source>
          <target state="translated">Per un esempio di utilizzo <ph id="ph1">`Invoke`</ph> con argomenti di output, vedere il metodo di overload <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> con gli stessi parametri di questo overload senza l'intervallo di timeout.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> venga generato.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>Invokes the activity passed to the <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph> constructor synchronously with the specified <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters and the specified time-out interval.</source>
          <target state="translated">Richiama l'attività passata in modo sincrono al costruttore <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph> con <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> specificato dei parametri di input e l'intervallo di timeout specificato.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">Un dizionario dei valori <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> e <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generato.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated">L'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The following example invokes a workflow that contains two <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities and a <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph> activity configured with a <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> of one minute.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro che contiene due attività <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> e un'attività <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph> configurato con un <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> di un minuto.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</source>
          <target state="translated">Questo flusso di lavoro viene richiamato due volte; la prima volta con un intervallo di timeout di due minuti e la seconda volta con un intervallo di timeout di 30 secondi.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The first workflow completes successfully, but the second one does not and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown and the following message is displayed.</source>
          <target state="translated">Il primo flusso di lavoro viene completato correttamente, ma non il secondo, che genera un'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>. Viene visualizzato il seguente messaggio.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>For an example of using <ph id="ph1">`Invoke`</ph> with input and output arguments, see the overload of <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> with the same parameters as this overload without the time-out interval.</source>
          <target state="translated">Per un esempio di utilizzo <ph id="ph1">`Invoke`</ph> con argomenti di input e outpui, vedere il metodo di overload <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> con gli stessi parametri di questo overload senza l'intervallo di timeout.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">Definizione del flusso di lavoro da richiamare.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> venga generato.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>Invokes a workflow synchronously using the specified workflow definition, <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters, and time-out interval.</source>
          <target state="translated">Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro specificata, il <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> dei parametri di input e l'intervallo di timeout.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A dictionary of the root activity’s <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> and <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> values keyed by argument name that represent the outputs of the workflow.</source>
          <target state="translated">Un dizionario dei valori <ph id="ph1">&lt;see cref="T:System.Activities.OutArgument" /&gt;</ph> e <ph id="ph2">&lt;see cref="T:System.Activities.InOutArgument" /&gt;</ph> dell'attività radice con chiave basata sul nome dell'argomento che rappresentano gli output del flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generato.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated">L'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The following example invokes a workflow that contains two <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities and a <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph> activity configured with a <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> of one minute.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro che contiene due attività <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> e un'attività <ph id="ph2">&lt;xref:System.Activities.Statements.Delay&gt;</ph> configurato con un <ph id="ph3">&lt;xref:System.Activities.Statements.Delay.Duration%2A&gt;</ph> di un minuto.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</source>
          <target state="translated">Questo flusso di lavoro viene richiamato due volte; la prima volta con un intervallo di timeout di due minuti e la seconda volta con un intervallo di timeout di 30 secondi.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The first workflow completes successfully, but the second one does not and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">Il primo flusso di lavoro viene completato correttamente, ma non il secondo, che genera un'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>For an example of using <ph id="ph1">`Invoke`</ph> with input and output arguments, see the overload of <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> with the same parameters as this overload without the time-out interval.</source>
          <target state="translated">Per un esempio di utilizzo <ph id="ph1">`Invoke`</ph> con argomenti di input e outpui, vedere il metodo di overload <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> con gli stessi parametri di questo overload senza l'intervallo di timeout.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>The type of the workflow.</source>
          <target state="translated">Il tipo di flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">Definizione del flusso di lavoro da richiamare.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>The workflow definition needs to derive from <ph id="ph1">&lt;see cref="T:System.Activities.ActivityWithResult" /&gt;</ph>.</source>
          <target state="translated">La definizione di flusso di lavoro deriva da <ph id="ph1">&lt;see cref="T:System.Activities.ActivityWithResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>Invokes a workflow synchronously using the workflow definition passed to the <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph> constructor.</source>
          <target state="translated">Richiama in modo sincrono un flusso di lavoro utilizzando la definizione del flusso di lavoro passata al costruttore <ph id="ph1">&lt;see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>A value of type TResult with the result of the execution of the activity.</source>
          <target state="translated">Un valore di tipo TResult con il risultato dell'esecuzione dell'attività.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`Add`</ph> activity that has two input arguments and since it derives from <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> it has one well-defined <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composta da una sola <ph id="ph1">`Add`</ph> attività che dispone di due argomenti di input e poiché deriva da <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> ne ha uno ben definito <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> argomento di output.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>When the workflow is invoked, the <ph id="ph1">`arguments`</ph> dictionary is passed which contains the values for each input argument, keyed by argument name.</source>
          <target state="translated">Quando viene richiamato il flusso di lavoro, viene passato il dizionario <ph id="ph1">`arguments`</ph> che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, the value of the <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument is returned.</source>
          <target state="translated">Quando la chiamata a <ph id="ph1">`Invoke`</ph> restituisce, il valore della <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> viene restituito l'argomento di output.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})">
          <source>This code example is based off of the <bpt id="p1">[</bpt>Using the WorkflowInvoker Class<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> sample.</source>
          <target state="translated">Questo esempio di codice si basa il <bpt id="p1">[</bpt>utilizzando la classe WorkflowInvoker<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> esempio.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The type of the workflow.</source>
          <target state="translated">Il tipo di flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">Definizione del flusso di lavoro da richiamare.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>Invokes a workflow synchronously using the specified workflow definition and <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters.</source>
          <target state="translated">Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro e il <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> dei parametri di input.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>A value of type TResult with the result of the execution of the activity.</source>
          <target state="translated">Un valore di tipo TResult con il risultato dell'esecuzione dell'attività.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated">L'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</source>
          <target state="translated">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`Add`</ph> activity that has two input arguments and since it derives from <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> it has one well-defined <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composta da una sola <ph id="ph1">`Add`</ph> attività che dispone di due argomenti di input e poiché deriva da <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> ne ha uno ben definito <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> argomento di output.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the workflow is invoked, the <ph id="ph1">`arguments`</ph> dictionary is passed which contains the values for each input argument, keyed by argument name.</source>
          <target state="translated">Quando viene richiamato il flusso di lavoro, viene passato il dizionario <ph id="ph1">`arguments`</ph> che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, the value of the <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument is returned.</source>
          <target state="translated">Quando la chiamata a <ph id="ph1">`Invoke`</ph> restituisce, il valore della <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> viene restituito l'argomento di output.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>This code example is based off of the <bpt id="p1">[</bpt>Using the WorkflowInvoker Class<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> sample.</source>
          <target state="translated">Questo esempio di codice si basa il <bpt id="p1">[</bpt>utilizzando la classe WorkflowInvoker<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> esempio.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The type of the workflow.</source>
          <target state="translated">Il tipo di flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">Definizione del flusso di lavoro da richiamare.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> venga generato.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>Invokes a workflow synchronously using the specified workflow definition, <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters, and time-out interval.</source>
          <target state="translated">Richiama in modo sincrono un flusso di lavoro usando la definizione di flusso di lavoro specificata, il <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> dei parametri di input e l'intervallo di timeout.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A value of type TResult with the result of the execution of the activity.</source>
          <target state="translated">Un valore di tipo TResult con il risultato dell'esecuzione dell'attività.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generato.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated">L'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</source>
          <target state="translated">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`Add`</ph> activity that has two input arguments and since it derives from <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> it has one well-defined <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composta da una sola <ph id="ph1">`Add`</ph> attività che dispone di due argomenti di input e poiché deriva da <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> ne ha uno ben definito <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> argomento di output.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>When the workflow is invoked, the <ph id="ph1">`arguments`</ph> dictionary is passed which contains the values for each input argument, keyed by argument name.</source>
          <target state="translated">Quando viene richiamato il flusso di lavoro, viene passato il dizionario <ph id="ph1">`arguments`</ph> che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, the value of the <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument is returned.</source>
          <target state="translated">Quando la chiamata a <ph id="ph1">`Invoke`</ph> restituisce, il valore della <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> viene restituito l'argomento di output.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This code example is based off of the <bpt id="p1">[</bpt>Using the WorkflowInvoker Class<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> sample.</source>
          <target state="translated">Questo esempio di codice si basa il <bpt id="p1">[</bpt>utilizzando la classe WorkflowInvoker<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> esempio.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The type of the workflow.</source>
          <target state="translated">Il tipo di flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The workflow definition of the workflow to invoke.</source>
          <target state="translated">Definizione del flusso di lavoro da richiamare.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The dictionary of additional output parameters of the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di output aggiuntivi del flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> venga generato.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>Invokes a workflow synchronously using the specified workflow definition, <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters, <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of additional output parameters, and time-out interval.</source>
          <target state="translated">Richiama un flusso di lavoro in modo sincrono usando la definizione specificata di flusso di lavoro, il <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> dei parametri di input, il <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> dei parametri di output di uscita e l'intervallo di timeout.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>A value of type TResult with the result of the execution of the activity.</source>
          <target state="translated">Un valore di tipo TResult con il risultato dell'esecuzione dell'attività.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>This method blocks until the workflow has completed, including idle time.</source>
          <target state="translated">Questo metodo si blocca fino a che il flusso di lavoro è stato completato, mentre include tempo di inattività.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>All workflow execution is guaranteed to execute on the invoking thread.</source>
          <target state="translated">Ogni esecuzione del flusso di lavoro è garantita per essere eseguita sul thread di chiamata.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generato.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated">L'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</source>
          <target state="translated">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>The following example invokes a workflow consisting of a single <ph id="ph1">`Add`</ph> activity that has two input arguments and since it derives from <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> it has one well-defined <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composta da una sola <ph id="ph1">`Add`</ph> attività che dispone di due argomenti di input e poiché deriva da <ph id="ph2">`CodeActivity&lt;int&gt;`</ph> ne ha uno ben definito <ph id="ph3">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> argomento di output.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>When the workflow is invoked, the <ph id="ph1">`arguments`</ph> dictionary is passed which contains the values for each input argument, keyed by argument name.</source>
          <target state="translated">Quando viene richiamato il flusso di lavoro, viene passato il dizionario <ph id="ph1">`arguments`</ph> che contiene i valori per ogni argomento di input, con chiavi in base al nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>When the call to <ph id="ph1">`Invoke`</ph> returns, the value of the <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> output argument is returned.</source>
          <target state="translated">Quando la chiamata a <ph id="ph1">`Invoke`</ph> restituisce, il valore della <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> viene restituito l'argomento di output.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)">
          <source>This code example is based off of the <bpt id="p1">[</bpt>Using the WorkflowInvoker Class<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> sample.</source>
          <target state="translated">Questo esempio di codice si basa il <bpt id="p1">[</bpt>utilizzando la classe WorkflowInvoker<ept id="p1">](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md)</ept> esempio.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="T:System.Activities.WorkflowInvoker">
          <source>Invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">Richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Activities.WorkflowInvoker">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Panoramica del modello asincrono basato su eventi<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>Invokes a workflow asynchronously.</source>
          <target state="translated">Richiama in modo asincrono un flusso di lavoro.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Panoramica del modello asincrono basato su eventi<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters.</source>
          <target state="translated">Richiama un flusso di lavoro in modo asincrono utilizzando il <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> specificato dei parametri di input.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Panoramica del modello asincrono basato su eventi<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</source>
          <target state="translated">Un oggetto fornito dall'utente utilizzato per distinguere questa particolare operazione invoke asincrona dalle altre operazioni invoke asincrone correnti.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>Invokes a workflow asynchronously using the specified unique identifier.</source>
          <target state="translated">Richiama in modo asincrono un flusso di lavoro utilizzando l'identificatore univoco specificato.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>The <ph id="ph1">`userState`</ph> parameter must be unique across all currently running <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.</source>
          <target state="translated">Il parametro <ph id="ph1">`userState`</ph> deve essere univoco attraverso tutto le operazioni attualmente in esecuzione <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> per l'attività corrente.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>If the <ph id="ph1">`userState`</ph> parameter is not unique, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
          <target state="translated">Se il parametro <ph id="ph1">`userState`</ph> non è univoco, viene generato un <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source><ph id="ph1">`userState`</ph> is used to identify the workflow in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`userState`</ph> viene utilizzato per identificare il flusso di lavoro in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> e per annullare il flusso di lavoro utilizzando <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Panoramica del modello asincrono basato su eventi<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> venga generato.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>Invokes a workflow asynchronously with the specified time-out interval.</source>
          <target state="translated">Richiama in modo asincrono un flusso di lavoro con intervallo di timeout specificato.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generato.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated">L'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Panoramica del modello asincrono basato su eventi<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</source>
          <target state="translated">Un oggetto fornito dall'utente utilizzato per distinguere questa particolare operazione invoke asincrona dalle altre operazioni invoke asincrone correnti.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>Invokes a workflow asynchronously using the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters and a unique identifier.</source>
          <target state="translated">Richiama in modo asincrono un flusso di lavoro usando la definizione di flusso di lavoro e il <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> specificato dei parametri di input e un identificatore univoco.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>The <ph id="ph1">`userState`</ph> parameter must be unique across all currently running <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.</source>
          <target state="translated">Il parametro <ph id="ph1">`userState`</ph> deve essere univoco attraverso tutto le operazioni attualmente in esecuzione <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> per l'attività corrente.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>If <ph id="ph1">`userState`</ph> is not unique, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
          <target state="translated">Se <ph id="ph1">`userState`</ph> non è univoco, viene generato un <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source><ph id="ph1">`userState`</ph> is used to identify the workflow in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`userState`</ph> viene utilizzato per identificare il flusso di lavoro in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> e per annullare il flusso di lavoro utilizzando <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>To configure a time-out interval in which the workflow must complete, use one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads that take a <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</source>
          <target state="translated">Per configurare un intervallo di timeout nel quale il flusso di lavoro deve essere completato, usare uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> che accettano un oggetto  <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Panoramica del modello asincrono basato su eventi<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> venga generato.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>Invokes a workflow asynchronously with the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters and the specified time-out interval.</source>
          <target state="translated">Richiama in modo asincrono con il <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> specificato dei parametri di input e dell'intervallo di timeout specificato.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generato.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated">L'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Panoramica del modello asincrono basato su eventi<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> venga generato.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</source>
          <target state="translated">Un oggetto fornito dall'utente utilizzato per distinguere questa particolare operazione invoke asincrona dalle altre operazioni invoke asincrone correnti.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</source>
          <target state="translated">Richiama in modo asincrono un flusso di lavoro con intervallo di timeout specificato e un identificatore univoco.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>The <ph id="ph1">`userState`</ph> parameter must be unique across all currently running <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.</source>
          <target state="translated">Il parametro <ph id="ph1">`userState`</ph> deve essere univoco attraverso tutto le operazioni attualmente in esecuzione <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> per l'attività corrente.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>If <ph id="ph1">`userState`</ph> is not unique, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
          <target state="translated">Se <ph id="ph1">`userState`</ph> non è univoco, viene generato un <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source><ph id="ph1">`userState`</ph> is used to identify the workflow in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`userState`</ph> viene utilizzato per identificare il flusso di lavoro in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> e per annullare il flusso di lavoro utilizzando <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generato.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated">L'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Panoramica del modello asincrono basato su eventi<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>The dictionary of input parameters to the workflow, keyed by argument name.</source>
          <target state="translated">Il dizionario di parametri di input al flusso di lavoro codificati dal nome dell'argomento.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>The interval in which the workflow must complete before it is aborted and a <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> is thrown.</source>
          <target state="translated">L'intervallo nel quale deve essere completato il flusso di lavoro prima che sia interrotto e un <ph id="ph1">&lt;see cref="T:System.TimeoutException" /&gt;</ph> venga generato.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</source>
          <target state="translated">Un oggetto fornito dall'utente utilizzato per distinguere questa particolare operazione invoke asincrona dalle altre operazioni invoke asincrone correnti.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>Invokes a workflow asynchronously with the specified <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> of input parameters, the specified time-out interval, and a unique identifier.</source>
          <target state="translated">Richiama un flusso di lavoro in modo asincrono con il <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> specificato dei parametri di input, l'intervallo di timeout specificato e un identificatore univoco.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>The <ph id="ph1">`userState`</ph> parameter must be unique across all currently running <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> operations for the current activity.</source>
          <target state="translated">Il parametro <ph id="ph1">`userState`</ph> deve essere univoco attraverso tutto le operazioni attualmente in esecuzione <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> per l'attività corrente.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>If <ph id="ph1">`userState`</ph> is not unique, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
          <target state="translated">Se <ph id="ph1">`userState`</ph> non è univoco, viene generato un <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source><ph id="ph1">`userState`</ph> is used to identify the workflow in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>, and to cancel the workflow using <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`userState`</ph> viene utilizzato per identificare il flusso di lavoro in <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> e per annullare il flusso di lavoro utilizzando <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.CancelAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>To be notified when the workflow is complete, handle <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</source>
          <target state="translated">Per ricevere una notifica quando il flusso di lavoro è completo, gestire il <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>If the workflow does not complete within the specified time-out interval the workflow is aborted and a <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is thrown.</source>
          <target state="translated">Se il flusso di lavoro non è completato nell'intervallo di timeout specificato il flusso di lavoro è interrotto e un <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generato.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</source>
          <target state="translated">L'eccezione <ph id="ph1">&lt;xref:System.TimeoutException&gt;</ph> viene generata solo se l'intervallo di timeout scade e il flusso di lavoro diventa inattivo durante l'esecuzione.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</source>
          <target state="translated">Un flusso di lavoro il cui completamento richiede più tempo rispetto all'intervallo di timeout specificato viene completato correttamente se non diventa inattivo.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</source>
          <target state="translated">Questo metodo richiama un flusso di lavoro in modo asincrono usando il modello di struttura asincrono basato su eventi.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[crdefault](~/includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Panoramica del modello asincrono basato su eventi<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=141765)</ept>.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="E:System.Activities.WorkflowInvoker.InvokeCompleted">
          <source>Occurs when the workflow invoked by one of the <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /&gt;</ph> overloads is completed or canceled.</source>
          <target state="translated">Si verifica quando viene completato o annullato il flusso di lavoro richiamato da uno degli overload <ph id="ph1">&lt;see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Activities.WorkflowInvoker.InvokeCompleted">
          <source>Handle this to determine whether a workflow invoked with one of the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> overloads completed successfully and to retrieve the output arguments of the completed workflow.</source>
          <target state="translated">Gestirlo per determinare se un flusso di lavoro richiamato con uno degli overload <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeAsync%2A&gt;</ph> è stato completato correttamente e per recuperare gli argomenti di output del flusso di lavoro completato.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Activities.WorkflowInvoker.InvokeCompleted">
          <source>The following example invokes a workflow consisting of a <ph id="ph1">`LongRunningDiceRoll`</ph> activity.</source>
          <target state="translated">Nell'esempio seguente viene richiamato un flusso di lavoro composto da un'attività <ph id="ph1">`LongRunningDiceRoll`</ph>.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Activities.WorkflowInvoker.InvokeCompleted">
          <source>The <ph id="ph1">`LongRunningDiceRoll`</ph> activity has two output arguments that represent the results of the dice roll operation.</source>
          <target state="translated">L'attività <ph id="ph1">`LongRunningDiceRoll`</ph> dispone di due argomenti di output che rappresentano i risultati dell'operazione di lancio dei dadi.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Activities.WorkflowInvoker.InvokeCompleted">
          <source>When the workflow completes these are retrieved in the <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph> handler.</source>
          <target state="translated">Quando il flusso di lavoro viene completato questi vengono recuperati nel gestore <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker.InvokeCompleted&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>