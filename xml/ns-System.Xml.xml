<Namespace Name="System.Xml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5c4fd9b36a99676d4d624d94c26c034d99294275" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51864918" />
  </Metadata>
  <Docs>
    <summary>Lo spazio dei nomi <see cref="N:System.Xml" /> fornisce supporto basato sugli standard per l'elaborazione di XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="std"></a>   
## <a name="supported-standards"></a>Standard supportati  
 Il <xref:System.Xml> dello spazio dei nomi supporta questi standard:  
  
-   XML 1.0, incluso il supporto DTD: [http://www.w3.org/TR/2006/REC-xml-20060816/](http://www.w3.org/TR/2006/REC-xml-20060816/)  
  
-   Spazi dei nomi XML, sia a livello di flusso e DOM: [http://www.w3.org/TR/REC-xml-names/](http://www.w3.org/TR/REC-xml-names/)  
  
-   Schemi XML: [http://www.w3.org/2001/XMLSchema](http://www.w3.org/2001/XMLSchema)  
  
-   Espressioni XPath: [http://www.w3.org/TR/xpath](http://www.w3.org/TR/xpath)  
  
-   Trasformazioni XSLT: [http://www.w3.org/TR/xslt](http://www.w3.org/TR/xslt)  
  
-   Core di livello 1 DOM: [http://www.w3.org/TR/REC-DOM-Level-1/](http://www.w3.org/TR/REC-DOM-Level-1/)  
  
-   DOM Level 2 Core: [http://www.w3.org/TR/DOM-Level-2/](http://www.w3.org/TR/DOM-Level-2/)  
  
 Vedere la sezione [differenze tra le specifiche W3C](#diff) per due casi in cui le classi XML differiscono dalle raccomandazioni W3C.  
  
<a name="related"></a>   
## <a name="related-namespaces"></a>Spazi dei nomi correlati  
 .NET Framework fornisce anche altri spazi dei nomi per le operazioni relative a XML. Per un elenco, le descrizioni e collegamenti, vedere la [spazi dei nomi System. XML](https://msdn.microsoft.com/library/gg145036.aspx) pagina Web.  
  
<a name="async"></a>   
## <a name="processing-xml-asynchronously"></a>Elaborazione XML in modo asincrono  
 Il <xref:System.Xml.XmlReader?displayProperty=nameWithType> e <xref:System.Xml.XmlWriter?displayProperty=nameWithType> classi includono un numero di metodi asincroni basati sul. Questi metodi possono essere identificati dalla stringa "Async" alla fine del nome. Con questi metodi, è possibile scrivere codice asincrono simile al codice sincrono ed è possibile migrare facilmente il codice sincrono esistente in codice asincrono.  
  
-   Usare i metodi asincroni nelle App in cui è presente la latenza di flusso di rete significativo. Evitare di usare le API asincrone per operazioni di lettura/scrittura di file locale flusso o flusso di memoria. Flusso di input <xref:System.Xml.XmlTextReader>, e <xref:System.Xml.XmlTextWriter> deve supportare anche operazioni asincrone. In caso contrario, i thread verranno comunque bloccati dalle operazioni dei / o.  
  
-   Non è consigliabile combinare le chiamate di funzione sincrone e asincrone, in quanto si potrebbero dimenticare di usare il `await` (parola chiave) oppure usare un'API sincrona in cui è necessaria una asincrona.  
  
-   Non impostare il <xref:System.Xml.XmlReaderSettings.Async%2A?displayProperty=nameWithType> oppure <xref:System.Xml.XmlWriterSettings.Async%2A?displayProperty=nameWithType> flag `true` se non si prevede di usare un metodo asincrono.  
  
-   Se si dimentica di specificare il `await` parola chiave quando si chiama un metodo asincrono, i risultati sono non deterministici: È possibile ricevere il risultato previsto o un'eccezione.  
  
-   Quando un <xref:System.Xml.XmlReader> oggetto sta leggendo un nodo di testo di grandi dimensioni, potrebbe memorizzare nella cache solo un valore di testo parziale e restituire il nodo di testo, quindi, il recupero di <xref:System.Xml.XmlReader.Value%2A?displayProperty=nameWithType> proprietà potrebbe essere bloccata da un'operazione dei / o. Usare la <xref:System.Xml.XmlReader.GetValueAsync%2A?displayProperty=nameWithType> metodo per ottenere il valore di testo in modalità asincrona, oppure utilizzare il <xref:System.Xml.XmlReader.ReadValueChunkAsync%2A?displayProperty=nameWithType> blocco di metodo per leggere un testo di grandi dimensioni in blocchi.  
  
-   Quando si usa un' <xref:System.Xml.XmlWriter> dell'oggetto, chiamare il <xref:System.Xml.XmlWriter.FlushAsync%2A?displayProperty=nameWithType> metodo prima di chiamare <xref:System.Xml.XmlWriter.Close%2A?displayProperty=nameWithType> per evitare di bloccare un'operazione dei / o.  
  
<a name="diff"></a>   
## <a name="differences-from-the-w3c-specs"></a>Differenze tra le specifiche W3C  
 In due casi che riguardano i vincoli sui componenti di schema del modello gruppo, il <xref:System.Xml> dello spazio dei nomi è diverso dalle raccomandazioni W3C.  
  
 **Coerenza nelle dichiarazioni di elemento:**  
  
 In alcuni casi, quando vengono utilizzati i gruppi di sostituzione, il <xref:System.Xml> implementazione non soddisfa il "Schema componente vincolo: elemento dichiarazioni coerenti," che è descritti nel [vincoli su Model Group Schema Components ](https://go.microsoft.com/fwlink/?LinkId=137029) sezione della specifica del W3C.  
  
 Ad esempio, lo schema seguente include gli elementi aventi lo stesso nome ma vengono usati tipi diversi nello stesso modello di contenuto e i gruppi di sostituzione. Sebbene tale schema debba generare un errore, <xref:System.Xml> lo compila e lo convalida senza errori.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>   
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
   <xs:element name="e1" type="t1"/>  
   <xs:complexType name="t1"/>  
  
   <xs:element name="e2" type="t2" substitutionGroup="e1"/>  
      <xs:complexType name="t2">  
         <xs:complexContent>  
            <xs:extension base="t1">  
         </xs:extension>  
      </xs:complexContent>  
   </xs:complexType>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1"/>  
         <xs:element name="e2" type="xs:int"/>  
      </xs:sequence>  
   </xs:complexType>  
</xs:schema>  
```  
  
 In questo schema il tipo `t3` contiene una sequenza di elementi. A causa della sostituzione, il riferimento all'elemento `e1` della sequenza può restituire un elemento `e1` di tipo `t1` o un elemento `e2` di tipo `t2`. Il secondo caso comporterebbe una sequenza di due `e2` elementi, in cui uno è di tipo `t2` e l'altra è di tipo `xs:int`.  
  
 **Attribuzione di particelle univoche:**  
  
 Nelle condizioni seguenti, il <xref:System.Xml> implementazione non soddisfa il "Schema componente vincolo: Unique Particle Attribution," che è descritti il [vincoli su Model Group Schema Components](https://go.microsoft.com/fwlink/?LinkId=137029) sezione della specifica del W3C.  
  
-   Uno degli elementi nel gruppo fa riferimento a un altro elemento.  
  
-   L'elemento a cui si fa riferimento è un elemento Head di un gruppo di sostituzione.  
  
-   Gruppo di sostituzione contiene un elemento con lo stesso nome di uno degli elementi nel gruppo.  
  
-   La cardinalità dell'elemento a cui fa riferimento l'elemento head del gruppo di sostituzione e l'elemento con lo stesso nome come un elemento di gruppo di sostituzione non è fissa (minOccurs < maxOccurs).  
  
-   La definizione dell'elemento a cui fa riferimento al gruppo di sostituzione precede la definizione dell'elemento con lo stesso nome di un elemento di gruppo di sostituzione.  
  
 Sebbene, ad esempio, nello schema seguente il modello di contenuto sia ambiguo e debba generare un errore di compilazione, <xref:System.Xml> lo compila senza errori.  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
  <xs:element name="e1" type="xs:int"/>  
  <xs:element name="e2" type="xs:int" substitutionGroup="e1"/>  
  
  <xs:complexType name="t3">  
    <xs:sequence>  
      <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
      <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
    </xs:sequence>  
  </xs:complexType>  
  
  <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 Se si prova a convalidare il codice XML seguente rispetto allo schema sopra riportato, la convalida avrà esito negativo con messaggio analogo al seguente: "l'elemento 'e3' ha figlio non valido 'e2' elemento." e un <xref:System.Xml.Schema.XmlSchemaValidationException> verrà generata l'eccezione.  
  
```xml  
<e3>  
  <e2>1</e2>  
  <e2>2</e2>  
</e3>  
```  
  
 Per risolvere questo problema, è possibile scambiare le dichiarazioni dell'elemento nel documento XSD. Ad esempio:  
  
```xml  
<xs:sequence>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 diventa:  
  
```xml  
<xs:sequence>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 Ecco un altro esempio dello stesso problema:  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
   <xs:element name="e1" type="xs:string"/>  
   <xs:element name="e2" type="xs:string" substitutionGroup="e1"/>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
         <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
      </xs:sequence>  
   </xs:complexType>  
   <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 Se si prova a convalidare il codice XML seguente rispetto allo schema sopra riportato, la convalida avrà esito negativo con l'eccezione seguente: "eccezione non gestita: XmlSchemaValidationException: l'elemento 'e2' non è valido: il valore 'abc' non è valido in base al relativo tipo di dati 'http://www.w3.org/2001/XMLSchema:int': la stringa 'abc' non è un valore Int32 valido. "
  
```xml  
<e3><e2>abc</e2></e3>  
```  
  
<a name="security"></a>   
## <a name="security-considerations"></a>Considerazioni sulla sicurezza  
 I tipi e membri nel <xref:System.Xml> dello spazio dei nomi si basano sul [sistema di sicurezza .NET](~/docs/standard/security/index.md). Le sezioni seguenti illustrano i problemi di sicurezza specifiche per le tecnologie XML.
  
 Si noti anche che quando si usa il <xref:System.Xml> tipi e membri, se il XML contiene dati con potenziali implicazioni per la privacy, è necessario implementare l'app in modo che rispetta la privacy degli utenti finali.
  
 **Accesso esterno**  
  
 Diverse tecnologie XML consentono di recuperare altri documenti durante l'elaborazione. Ad esempio, una DTD (Document Type Definition) si può trovare nel documento analizzato. La DTD può anche risiedere in un documento esterno a cui fa riferimento il documento analizzato. Le tecnologie XSD (XML Schema Definition Language) e XSLT consentono inoltre di includere informazioni da altri file. Queste risorse esterne possono presentare alcuni problemi di sicurezza. Ad esempio, è opportuno per assicurarsi che l'app recupera i file solo da siti attendibili e che il file viene recuperato non contiene dati dannosi.  
  
 Il <xref:System.Xml.XmlUrlResolver> classe viene utilizzata per caricare i documenti XML e per risolvere risorse esterne, ad esempio, DTD o schemi e importare o includere le direttive.  
  
 È possibile eseguire l'override di questa classe e specificare il <xref:System.Xml.XmlResolver> oggetto da utilizzare. Usare la classe <xref:System.Xml.XmlSecureResolver> se è necessario aprire una risorsa che non si controlla o che non è considerata affidabile. Il tipo <xref:System.Xml.XmlSecureResolver> include un tipo <xref:System.Xml.XmlResolver> e consente di limitare le risorse a cui ha accesso il tipo <xref:System.Xml.XmlResolver> sottostante.  
  
 **Attacco Denial of service**  
  
 Gli scenari seguenti sono considerati meno vulnerabili agli attacchi di tipo Denial of Service in quanto le classi <xref:System.Xml> forniscono un sistema di protezione da tali attacchi.  
  
-   Analisi dei dati XML di tipo text.  
  
-   Analisi dei dati XML binari se i dati XML binari è stati generati da Microsoft SQL Server.  
  
-   Scrittura di documenti e frammenti XML da origini dati nel file system, flussi, un tipo <xref:System.IO.TextWriter> o un tipo  <xref:System.Text.StringBuilder>.  
  
-   Caricamento di documenti nell'oggetto DOM (Document Object Model) se si sta utilizzando un oggetto <xref:System.Xml.XmlReader> e <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> impostato su <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType>.  
  
-   Esplorazione dell'oggetto DOM.  
  
 Gli scenari seguenti non sono consigliabili se ci si occupa di problemi relativi agli attacchi di tipo Denial of Service o se si lavora in un ambiente non attendibile.  
  
-   Elaborazione della DTD.  
  
-   Elaborazione dello schema. Ciò include l'aggiunta di uno schema non attendibile alla raccolta di schemi, la compilazione di uno schema non attendibile e la convalida tramite uno schema non attendibile.  
  
-   Elaborazione XSLT.  
  
-   Analisi di un qualsiasi flusso arbitrario di dati XML binari forniti dall'utente.  
  
-   Operazioni DOM quali la creazione di query, la modifica, lo spostamento tra i sottoalberi dei documenti e il salvataggio degli oggetti DOM.  
  
 Se si desidera evitare un attacco denial of problemi del servizio o se usano origini non attendibili, non abilitare l'elaborazione della DTD. Tale impostazione viene disabilitata per impostazione predefinita nella <xref:System.Xml.XmlReader> oggetti da cui il <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> Crea metodo.  
  
> [!NOTE]
>  L'oggetto <xref:System.Xml.XmlTextReader> consente l'elaborazione della DTD per impostazione predefinita. Utilizzare la proprietà <xref:System.Xml.XmlTextReader.DtdProcessing%2A?displayProperty=nameWithType> per disabilitare questa funzione.  
  
 Se hai attivato l'elaborazione della DTD, è possibile usare la <xref:System.Xml.XmlSecureResolver> classe per limitare le risorse che il <xref:System.Xml.XmlReader> può accedere. È anche possibile progettare l'app in modo che l'elaborazione di XML è memoria e tempo limitato. Ad esempio, è possibile configurare limiti di timeout nell'app ASP.NET.  
  
 **Considerazioni sull'elaborazione**  
  
 Poiché i documenti XML possono contenere riferimenti ad altri file, è difficile determinare quanta capacità di elaborazione sia necessaria per analizzare un documento XML. Ad esempio, i documenti XML possono includere una DTD. Se la DTD contiene entità annidate o modelli di contenuto complesso, potrebbe essere necessaria una quantità eccessiva di tempo per analizzare il documento.  
  
 Quando si utilizza <xref:System.Xml.XmlReader>, è possibile limitare le dimensioni del documento che è possibile analizzare impostando la proprietà <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=nameWithType>. Per limitare il numero di caratteri risultanti dall'espansione di entità, impostare la proprietà <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A?displayProperty=nameWithType>. Per gli esempi relativi all'impostazione di queste proprietà, vedere gli argomenti di riferimento appropriati.  
  
 Le tecnologie XSD e XSLT consentono inoltre di migliorare le prestazioni dell'elaborazione. Ad esempio, è possibile creare un XML Schema che richiede una quantità maggiore di tempo per l'elaborazione quando la valutazione riguarda un documento relativamente breve. È inoltre possibile incorporare blocchi di script in un foglio di stile XSLT. Entrambi i casi comportano una potenziale minaccia alla sicurezza per l'app.  
  
 Quando la creazione di un'app che usa il <xref:System.Xml.Xsl.XslCompiledTransform> classe, è necessario tenere gli elementi seguenti e le relative implicazioni:  
  
-   Gli script XSLT sono disattivati per impostazione predefinita. Lo script con XSLT deve essere abilitato solo se è necessario il supporto per gli script e solo all'interno di un ambiente completamente attendibile.  
  
-   La funzionalità XSLT `document()` è disattivata per impostazione predefinita. Se si abilita la funzione `document()`, limitare le risorse a cui è possibile accedere passando un oggetto <xref:System.Xml.XmlSecureResolver> al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType>.  
  
-   Gli oggetti di estensione sono abilitati per impostazione predefinita. Se un oggetto <xref:System.Xml.Xsl.XsltArgumentList> contenente oggetti di estensione viene passato al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType>, vengono utilizzati gli oggetti di estensione.  
  
-   Nei fogli di stile XSLT possono essere inclusi riferimenti ad altri file e a blocchi di script incorporati. Un utente malintenzionato può sfruttare questa situazione fornendo dati o fogli di stile che, quando eseguiti, possono determinare l'elaborazione continua da parte del sistema finché le risorse del computer diventeranno insufficienti.  
  
-   Applicazioni XSLT che vengono eseguite in un ambiente ad attendibilità mista possono comportare lo spoofing del foglio di stile. Ad esempio, un utente malintenzionato può caricare un oggetto con un foglio di stile dannoso e trasferirlo a un altro utente che in un secondo momento chiama il metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType> ed esegue la trasformazione.  
  
 I problemi relativi alla sicurezza possono essere limitati non attivando gli script o la funzionalità `document()`, a meno che il foglio di stile non provenga da un'origine attendibile, e non accettando gli oggetti <xref:System.Xml.Xsl.XslCompiledTransform>, i fogli di stile XSLT o i dati di origine XML da un'origine non attendibile.  
  
 **Gestione delle eccezioni**  
  
 Le eccezioni generate dai componenti di livello inferiore possono rivelare informazioni di percorso che si preferisce non esposte nell'app. L'app deve intercettare le eccezioni ed elaborarli in modo appropriato.  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Xml.Xsl" />
    <altmember cref="N:System.Xml.Schema" />
    <altmember cref="N:System.Xml.Linq" />
    <related type="Article" href="https://msdn.microsoft.com/library/e695047f-3c0f-4045-8708-5baea91cc380">Documenti e dati XML</related>
  </Docs>
</Namespace>