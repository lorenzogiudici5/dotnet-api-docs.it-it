<Type Name="CodeTypeDeclaration" FullName="System.CodeDom.CodeTypeDeclaration">
  <TypeSignature Language="C#" Value="public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeTypeDeclaration extends System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeTypeDeclaration" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTypeDeclaration&#xA;Inherits CodeTypeMember" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeTypeDeclaration : System::CodeDom::CodeTypeMember" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeTypeMember</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0c165-101">Rappresenta una dichiarazione del tipo per una classe, una struttura, un'interfaccia o un'enumerazione.</span><span class="sxs-lookup"><span data-stu-id="0c165-101">Represents a type declaration for a class, structure, interface, or enumeration.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c165-102"><xref:System.CodeDom.CodeTypeDeclaration> può essere utilizzato per rappresentare il codice che dichiara una classe, struttura, interfaccia o enumerazione.</span><span class="sxs-lookup"><span data-stu-id="0c165-102"><xref:System.CodeDom.CodeTypeDeclaration> can be used to represent code that declares a class, structure, interface, or enumeration.</span></span> <span data-ttu-id="0c165-103"><xref:System.CodeDom.CodeTypeDeclaration> può essere utilizzato per dichiarare un tipo annidato in un altro tipo.</span><span class="sxs-lookup"><span data-stu-id="0c165-103"><xref:System.CodeDom.CodeTypeDeclaration> can be used to declare a type that is nested within another type.</span></span>  
  
 <span data-ttu-id="0c165-104">Il <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> proprietà specifica il tipo di base o tipi di base del tipo dichiarato.</span><span class="sxs-lookup"><span data-stu-id="0c165-104">The <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> property specifies the base type or base types of the type being declared.</span></span> <span data-ttu-id="0c165-105">Il <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> proprietà contiene i membri del tipo che possono includere metodi, campi, proprietà, i commenti e altri tipi.</span><span class="sxs-lookup"><span data-stu-id="0c165-105">The <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> property contains the type members, which can include methods, fields, properties, comments and other types.</span></span> <span data-ttu-id="0c165-106">Il <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> proprietà indica il <xref:System.Reflection.TypeAttributes> i valori per la dichiarazione del tipo, che indicano la categoria del tipo.</span><span class="sxs-lookup"><span data-stu-id="0c165-106">The <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property indicates the <xref:System.Reflection.TypeAttributes> values for the type declaration, which indicate the type category of the type.</span></span> <span data-ttu-id="0c165-107">Il <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, e <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> indicano se il tipo è una classe, struttura, enumerazione o tipo di interfaccia, rispettivamente.</span><span class="sxs-lookup"><span data-stu-id="0c165-107">The <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, and <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c165-108">Alcuni linguaggi di programmazione supportano solo la dichiarazione di tipi di riferimento o classi.</span><span class="sxs-lookup"><span data-stu-id="0c165-108">Some programming languages only support the declaration of reference types, or classes.</span></span> <span data-ttu-id="0c165-109">Per controllare un generatore di codice specifico del linguaggio CodeDOM per il supporto per la dichiarazione di interfacce, enumerazioni o tipi di valore, chiamare il <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> metodo da testare per appropriata <xref:System.CodeDom.Compiler.GeneratorSupport> flag.</span><span class="sxs-lookup"><span data-stu-id="0c165-109">To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method to test for the appropriate <xref:System.CodeDom.Compiler.GeneratorSupport> flags.</span></span> <span data-ttu-id="0c165-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> indica il supporto per le interfacce, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indica il supporto per le enumerazioni, e <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indica il supporto per i tipi di valore, ad esempio strutture.</span><span class="sxs-lookup"><span data-stu-id="0c165-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> indicates support for interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indicates support for enumerations, and <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indicates support for value types such as structures.</span></span>  
  
 <span data-ttu-id="0c165-111">È possibile compilare una classe o un'implementazione di struttura in una dichiarazione completa o suddividere l'implementazione tra più dichiarazioni.</span><span class="sxs-lookup"><span data-stu-id="0c165-111">You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="0c165-112">Il <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> proprietà indica se la dichiarazione del tipo è completo o parziale.</span><span class="sxs-lookup"><span data-stu-id="0c165-112">The <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property indicates whether the type declaration is complete or partial.</span></span> <span data-ttu-id="0c165-113">Non tutti i generatori di codice supportano le dichiarazioni di tipo parziali, pertanto è necessario verificare questo supporto chiamando il <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> metodo con il flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span><span class="sxs-lookup"><span data-stu-id="0c165-113">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c165-114">In questo esempio viene illustrato come utilizzare un <xref:System.CodeDom.CodeTypeDeclaration> per dichiarare un tipo.</span><span class="sxs-lookup"><span data-stu-id="0c165-114">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to declare a type.</span></span>  
  
 [!code-cpp[CodeTypeDeclarationExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeTypeDeclarationExample/CPP/codetypedeclarationexample.cpp#2)]
 [!code-csharp[CodeTypeDeclarationExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeTypeDeclarationExample/CS/codetypedeclarationexample.cs#2)]
 [!code-vb[CodeTypeDeclarationExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeTypeDeclarationExample/VB/codetypedeclarationexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.CodeTypeDeclarationCollection" />
    <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0c165-115">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</span><span class="sxs-lookup"><span data-stu-id="0c165-115">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c165-116">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</span><span class="sxs-lookup"><span data-stu-id="0c165-116">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0c165-117">Nome del nuovo tipo.</span><span class="sxs-lookup"><span data-stu-id="0c165-117">The name for the new type.</span></span></param>
        <summary><span data-ttu-id="0c165-118">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeDeclaration" /> con il nome specificato.</span><span class="sxs-lookup"><span data-stu-id="0c165-118">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class with the specified name.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseTypes">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReferenceCollection BaseTypes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseTypes As CodeTypeReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceCollection ^ BaseTypes { System::CodeDom::CodeTypeReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c165-119">Ottiene i tipi di base del tipo.</span><span class="sxs-lookup"><span data-stu-id="0c165-119">Gets the base types of the type.</span></span></summary>
        <value><span data-ttu-id="0c165-120">Oggetto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> che indica i tipi di base del tipo.</span><span class="sxs-lookup"><span data-stu-id="0c165-120">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> object that indicates the base types of the type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c165-121">Per generare una classe in Visual Basic che non eredita da un tipo di base, ma che implementa una o più interfacce, è necessario includere <xref:System.Object> come primo elemento di <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> insieme.</span><span class="sxs-lookup"><span data-stu-id="0c165-121">To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <xref:System.Object> as the first item in the <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c165-122">In .NET Framework versione 2.0 non è necessario il <xref:System.CodeDom.CodeTypeReference> per <xref:System.Object> se l'interfaccia si implementa già esiste e si fa riferimento a esso dal tipo.</span><span class="sxs-lookup"><span data-stu-id="0c165-122">In the .NET Framework version 2.0 you do not need the <xref:System.CodeDom.CodeTypeReference> for <xref:System.Object> if the interface you are implementing already exists and you are referring to it by type.</span></span> <span data-ttu-id="0c165-123">Ad esempio, se si implementa il <xref:System.Collections.ICollection> l'interfaccia e aggiungerlo alla raccolta con questa istruzione, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, non è necessario che la precede `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` istruzione.</span><span class="sxs-lookup"><span data-stu-id="0c165-123">For example, if you are implementing the <xref:System.Collections.ICollection> interface and add it to the collection with this statement, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, you do not need the preceding `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` statement.</span></span>  
  
 <span data-ttu-id="0c165-124">Il codice seguente viene illustrata l'aggiunta di un <xref:System.CodeDom.CodeTypeReference> nella raccolta che si intende <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="0c165-124">The following code illustrates the addition of a <xref:System.CodeDom.CodeTypeReference> to the collection that refers to <xref:System.Object>.</span></span>  
  
```vb  
Dim ctd As New CodeTypeDeclaration("Class1")  
ctd.IsClass = True  
ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))  
ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))  
```  
  
```csharp  
CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");  
ctd.IsClass = true;  
ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));  
ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));  
```  
  
 <span data-ttu-id="0c165-125">Il codice precedente produce l'equivalente del codice Visual Basic seguente.</span><span class="sxs-lookup"><span data-stu-id="0c165-125">The preceding code generates the equivalent of the following Visual Basic code.</span></span>  
  
```vb  
Public Class Class1  
Implements Interface1  
```  
  
 <span data-ttu-id="0c165-126">Tuttavia, il codice di Visual Basic effettivamente generato è il seguente.</span><span class="sxs-lookup"><span data-stu-id="0c165-126">However, the Visual Basic code actually generated is the following.</span></span>  
  
```vb  
Public Class Class1  
Inherits Object  
Implements Interface1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReferenceCollection" />
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c165-127">Ottiene o imposta un valore che indica se il tipo è una classe o un tipo di riferimento.</span><span class="sxs-lookup"><span data-stu-id="0c165-127">Gets or sets a value indicating whether the type is a class or reference type.</span></span></summary>
        <value>
          <span data-ttu-id="0c165-128"><see langword="true" /> se il tipo è una classe o un tipo di riferimento; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0c165-128"><see langword="true" /> if the type is a class or reference type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c165-129">Ottiene o imposta un valore che indica se il tipo è un'enumerazione.</span><span class="sxs-lookup"><span data-stu-id="0c165-129">Gets or sets a value indicating whether the type is an enumeration.</span></span></summary>
        <value>
          <span data-ttu-id="0c165-130"><see langword="true" /> se il tipo è un'enumerazione; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0c165-130"><see langword="true" /> if the type is an enumeration; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c165-131">Ottiene o imposta un valore che indica se il tipo è un'interfaccia.</span><span class="sxs-lookup"><span data-stu-id="0c165-131">Gets or sets a value indicating whether the type is an interface.</span></span></summary>
        <value>
          <span data-ttu-id="0c165-132"><see langword="true" /> se il tipo è un'interfaccia; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0c165-132"><see langword="true" /> if the type is an interface; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPartial">
      <MemberSignature Language="C#" Value="public bool IsPartial { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPartial" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPartial As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPartial { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c165-133">Ottiene o imposta un valore che indica se la dichiarazione del tipo è completa o parziale.</span><span class="sxs-lookup"><span data-stu-id="0c165-133">Gets or sets a value indicating whether the type declaration is complete or partial.</span></span></summary>
        <value>
          <span data-ttu-id="0c165-134"><see langword="true" /> se la dichiarazione della classe o della struttura è una rappresentazione parziale dell'implementazione; <see langword="false" /> se la dichiarazione è un'implementazione completa della classe o della struttura.</span><span class="sxs-lookup"><span data-stu-id="0c165-134"><see langword="true" /> if the class or structure declaration is a partial representation of the implementation; <see langword="false" /> if the declaration is a complete implementation of the class or structure.</span></span> <span data-ttu-id="0c165-135">Il valore predefinito è <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0c165-135">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c165-136">È possibile creare una classe o struttura di implementazione in una dichiarazione completa o suddividere l'implementazione tra più dichiarazioni.</span><span class="sxs-lookup"><span data-stu-id="0c165-136">You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="0c165-137">Le implementazioni in genere vengono fornite nella dichiarazione di un tipo completo.</span><span class="sxs-lookup"><span data-stu-id="0c165-137">Implementations are commonly supplied in one complete type declaration.</span></span> <span data-ttu-id="0c165-138">In questo caso, impostare la dichiarazione del tipo <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> proprietà `false`, che indica che la dichiarazione del tipo rappresenta tutti i dettagli per l'implementazione della classe o struttura.</span><span class="sxs-lookup"><span data-stu-id="0c165-138">In this case, set the type declaration <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `false`, which indicates that the type declaration represents all details for the class or structure implementation.</span></span>  
  
 <span data-ttu-id="0c165-139">Una dichiarazione di tipo parziale rende più semplice creare le diverse parti di un'implementazione di classe o struttura in moduli diversi dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="0c165-139">A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</span></span> <span data-ttu-id="0c165-140">Le dichiarazioni di tipo parziale possono essere archiviate in un file di origine o distribuite tra più file di origine da compilare insieme per formare l'implementazione del tipo combinato.</span><span class="sxs-lookup"><span data-stu-id="0c165-140">The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</span></span>  
  
 <span data-ttu-id="0c165-141">Linguaggio c# supporta le dichiarazioni di tipo parziale delle classi e le strutture attraverso il `partial` (parola chiave).</span><span class="sxs-lookup"><span data-stu-id="0c165-141">The C# language supports partial type declarations of classes and structures through the `partial` keyword.</span></span> <span data-ttu-id="0c165-142">Visual Basic supporta le dichiarazioni di tipo parziale delle classi e le strutture con il `Partial` (parola chiave).</span><span class="sxs-lookup"><span data-stu-id="0c165-142">Visual Basic supports partial type declarations of classes and structures with the `Partial` keyword.</span></span> <span data-ttu-id="0c165-143">Non tutti i generatori di codice supportano le dichiarazioni di tipo parziali, pertanto è necessario verificare questo supporto chiamando il <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> metodo con il flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span><span class="sxs-lookup"><span data-stu-id="0c165-143">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c165-144">Dichiarazioni di tipi parziali sono supportate per le classi e strutture.</span><span class="sxs-lookup"><span data-stu-id="0c165-144">Partial type declarations are supported for classes and structures.</span></span> <span data-ttu-id="0c165-145">Se si specifica una dichiarazione di tipo parziale per un'interfaccia o enumerazione, il codice generato produce gli errori del compilatore.</span><span class="sxs-lookup"><span data-stu-id="0c165-145">If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</span></span>  
  
 <span data-ttu-id="0c165-146">Quando si fornisce un'implementazione di classe o struttura tra più dichiarazioni, impostare il <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> proprietà `true` per la dichiarazione iniziale e tutte le dichiarazioni supplementari.</span><span class="sxs-lookup"><span data-stu-id="0c165-146">When supplying a class or structure implementation across multiple declarations, set the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true` for the initial declaration and all supplemental declarations.</span></span> <span data-ttu-id="0c165-147">La dichiarazione iniziale deve specificare completamente il tipo di firma, tra cui i modificatori di accesso, i tipi ereditati e le interfacce implementate.</span><span class="sxs-lookup"><span data-stu-id="0c165-147">The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</span></span> <span data-ttu-id="0c165-148">Non è necessario specificare di nuovo la firma di tipo nelle dichiarazioni supplementari.</span><span class="sxs-lookup"><span data-stu-id="0c165-148">The supplementary declarations do not need to re-specify the type signature.</span></span> <span data-ttu-id="0c165-149">Un errore del compilatore comporta in genere se si ridefinisce la firma di tipo in una dichiarazione supplementare.</span><span class="sxs-lookup"><span data-stu-id="0c165-149">A compiler error typically results if you redefine the type signature in a supplementary declaration.</span></span>  
  
 <span data-ttu-id="0c165-150">Visual Studio 2005 utilizza tipi parziali per separare il codice utente generato dal codice della finestra di progettazione.</span><span class="sxs-lookup"><span data-stu-id="0c165-150">Visual Studio 2005 uses partial types to separate user-generated code from designer code.</span></span> <span data-ttu-id="0c165-151">Nei progetti di applicazione Windows di Visual Basic, il codice utente viene inserito in una classe parziale che non è qualificata tramite il `Partial` (parola chiave); progettazione fornito dal codice viene visualizzato nella classe parziale che dispone di `Partial` (parola chiave).</span><span class="sxs-lookup"><span data-stu-id="0c165-151">In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the `Partial` keyword; the designer-provided code appears in the partial class that has the `Partial` keyword.</span></span> <span data-ttu-id="0c165-152">In c#, il codice utente e codice di progettazione vengono visualizzati in classi parziali identificate dal `partial` (parola chiave).</span><span class="sxs-lookup"><span data-stu-id="0c165-152">In C#, both the user code and designer code appear in partial classes identified by the `partial` keyword.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0c165-153">In questo esempio viene illustrato come utilizzare un <xref:System.CodeDom.CodeTypeDeclaration> per fornire un'implementazione della classe in più dichiarazioni.</span><span class="sxs-lookup"><span data-stu-id="0c165-153">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to supply a class implementation across multiple declarations.</span></span> <span data-ttu-id="0c165-154">L'esempio compila l'istruzione di dichiarazione di classe iniziale e imposta il <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="0c165-154">The example builds the initial class declaration statement and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomPartialTypeExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#3)]
 [!code-vb[CodeDomPartialTypeExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#3)]  
  
 <span data-ttu-id="0c165-155">Un metodo diverso nell'esempio estende l'implementazione della classe.</span><span class="sxs-lookup"><span data-stu-id="0c165-155">A different method in the example extends the class implementation.</span></span> <span data-ttu-id="0c165-156">Questo metodo crea una nuova istruzione di dichiarazione di tipo per la classe esistente e imposta il <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="0c165-156">This method builds a new type declaration statement for the existing class and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span> <span data-ttu-id="0c165-157">Il compilatore unisce le due dichiarazioni di tipo parziale per l'implementazione della classe completo.</span><span class="sxs-lookup"><span data-stu-id="0c165-157">The compiler combines the two partial type declarations together for the complete class implementation.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#7](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#7)]
 [!code-csharp[CodeDomPartialTypeExample#7](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#7)]
 [!code-vb[CodeDomPartialTypeExample#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes" />
      </Docs>
    </Member>
    <Member MemberName="IsStruct">
      <MemberSignature Language="C#" Value="public bool IsStruct { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStruct" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberSignature Language="VB.NET" Value="Public Property IsStruct As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStruct { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c165-158">Ottiene o imposta un valore che indica se il tipo è un tipo di valore, ad esempio una struttura.</span><span class="sxs-lookup"><span data-stu-id="0c165-158">Gets or sets a value indicating whether the type is a value type (struct).</span></span></summary>
        <value>
          <span data-ttu-id="0c165-159"><see langword="true" /> se il tipo è un tipo di valore; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="0c165-159"><see langword="true" /> if the type is a value type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeMemberCollection Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeMemberCollection Members" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As CodeTypeMemberCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeMemberCollection ^ Members { System::CodeDom::CodeTypeMemberCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeMemberCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c165-160">Restituisce l'insieme dei membri della classe per il tipo rappresentato.</span><span class="sxs-lookup"><span data-stu-id="0c165-160">Gets the collection of class members for the represented type.</span></span></summary>
        <value><span data-ttu-id="0c165-161">Oggetto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> che indica i membri della classe.</span><span class="sxs-lookup"><span data-stu-id="0c165-161">A <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> object that indicates the class members.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeMemberCollection" />
      </Docs>
    </Member>
    <Member MemberName="PopulateBaseTypes">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateBaseTypes;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateBaseTypes" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateBaseTypes As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateBaseTypes;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c165-162">Si verifica quando si accede per la prima volta all'insieme <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />.</span><span class="sxs-lookup"><span data-stu-id="0c165-162">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> collection is accessed for the first time.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateMembers">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateMembers;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateMembers" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateMembers As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateMembers;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c165-163">Si verifica quando si accede per la prima volta all'insieme <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" />.</span><span class="sxs-lookup"><span data-stu-id="0c165-163">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> collection is accessed for the first time.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAttributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes TypeAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes TypeAttributes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeAttributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes TypeAttributes { System::Reflection::TypeAttributes get(); void set(System::Reflection::TypeAttributes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c165-164">Ottiene o imposta gli attributi del tipo.</span><span class="sxs-lookup"><span data-stu-id="0c165-164">Gets or sets the attributes of the type.</span></span></summary>
        <value><span data-ttu-id="0c165-165">Oggetto <see cref="T:System.Reflection.TypeAttributes" /> che indica gli attributi del tipo.</span><span class="sxs-lookup"><span data-stu-id="0c165-165">A <see cref="T:System.Reflection.TypeAttributes" /> object that indicates the attributes of the type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c165-166">Il <xref:System.Reflection.TypeAttributes> proprietà contiene lo stesso tipo di valori utilizzati da <xref:System.Reflection> durante l'analisi di un tipo in fase di esecuzione.</span><span class="sxs-lookup"><span data-stu-id="0c165-166">The <xref:System.Reflection.TypeAttributes> property contains the same type of values used by <xref:System.Reflection> when investigating a type at run time.</span></span> <span data-ttu-id="0c165-167">Molti di questi flag non corrispondono per la sintassi di dichiarazione di tipo per alcune lingue.</span><span class="sxs-lookup"><span data-stu-id="0c165-167">Many of these flags do not correspond to the type declaration syntax for some languages.</span></span> <span data-ttu-id="0c165-168">Di conseguenza, solo i flag seguenti sono significativi per <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, e <xref:System.Reflection.TypeAttributes.NestedPrivate>.</span><span class="sxs-lookup"><span data-stu-id="0c165-168">As a result, only the following flags are significant to <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, and <xref:System.Reflection.TypeAttributes.NestedPrivate>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c165-169">Alcuni flag, ad esempio <xref:System.Reflection.TypeAttributes.Abstract> si sovrappongono al significato dei flag nella <xref:System.CodeDom.CodeTypeMember.Attributes%2A> proprietà di <xref:System.CodeDom.CodeTypeDeclaration> ereditata da <xref:System.CodeDom.CodeTypeMember>.</span><span class="sxs-lookup"><span data-stu-id="0c165-169">Some of the flags such as <xref:System.Reflection.TypeAttributes.Abstract> overlap with the meaning of flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property of <xref:System.CodeDom.CodeTypeDeclaration> that is inherited from <xref:System.CodeDom.CodeTypeMember>.</span></span> <span data-ttu-id="0c165-170">Il <xref:System.CodeDom.CodeTypeMember.Attributes%2A> proprietà è un effetto collaterale del <xref:System.CodeDom.CodeTypeDeclaration> classe che eredita da <xref:System.CodeDom.CodeTypeMember> in modo che le classi possono essere annidate.</span><span class="sxs-lookup"><span data-stu-id="0c165-170">The <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property is a side effect of the <xref:System.CodeDom.CodeTypeDeclaration> class inheriting from <xref:System.CodeDom.CodeTypeMember> so that classes can be nested.</span></span> <span data-ttu-id="0c165-171">I flag di <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> proprietà deve essere usata anziché i flag il <xref:System.CodeDom.CodeTypeMember.Attributes%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="0c165-171">The flags in the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property should be used instead of the flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0c165-172">Per impostare i flag di visibilità (flag che contengono le parole `Public` o `Nested`) consiste nel nascondere la visibilità di tutti i flag di utilizzo di <xref:System.Reflection.TypeAttributes.VisibilityMask> e quindi impostare il flag di visibilità desiderato.</span><span class="sxs-lookup"><span data-stu-id="0c165-172">The pattern for setting the visibility flags (flags containing the words `Public` or `Nested`) is to mask out all visibility flags using the <xref:System.Reflection.TypeAttributes.VisibilityMask> and then set the desired visibility flag.</span></span> <span data-ttu-id="0c165-173">Ad esempio, il codice istruzione c# per identificare il <xref:System.CodeDom.CodeTypeDeclaration> (denominato `cd`) come classe interna è `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</span><span class="sxs-lookup"><span data-stu-id="0c165-173">For example, the C# code statement to identify the <xref:System.CodeDom.CodeTypeDeclaration> (named `cd`) as an internal class is `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</span></span>  <span data-ttu-id="0c165-174">Il codice per impostare lo stesso valore in Visual Basic è `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`.</span><span class="sxs-lookup"><span data-stu-id="0c165-174">The code to set the same value in Visual Basic is `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`.</span></span> <span data-ttu-id="0c165-175">L'impostazione di <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> proprietà direttamente un flag di visibilità (`cd.TypeAttributes = TypeAttributes.NotPublic;`) Cancella tutti gli altri flag che possono essere impostati.</span><span class="sxs-lookup"><span data-stu-id="0c165-175">Setting the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property directly to a visibility flag (`cd.TypeAttributes = TypeAttributes.NotPublic;`) erases all other flags that might be set.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TypeParameters">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeParameterCollection TypeParameters" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeParameters As CodeTypeParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeParameterCollection ^ TypeParameters { System::CodeDom::CodeTypeParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c165-176">Ottiene i parametri del tipo per la dichiarazione del tipo.</span><span class="sxs-lookup"><span data-stu-id="0c165-176">Gets the type parameters for the type declaration.</span></span></summary>
        <value><span data-ttu-id="0c165-177">Oggetto <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> che contiene i parametri del tipo per la dichiarazione del tipo.</span><span class="sxs-lookup"><span data-stu-id="0c165-177">A <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> that contains the type parameters for the type declaration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c165-178">Una dichiarazione di tipo generico contiene uno o più tipi noti come parametri di tipo non specificati.</span><span class="sxs-lookup"><span data-stu-id="0c165-178">A generic type declaration contains one or more unspecified types known as type parameters.</span></span> <span data-ttu-id="0c165-179">Il nome di un parametro di tipo rappresenta il tipo all'interno del corpo della dichiarazione generica.</span><span class="sxs-lookup"><span data-stu-id="0c165-179">A type parameter name stands for the type within the body of the generic declaration.</span></span> <span data-ttu-id="0c165-180">Ad esempio, la dichiarazione generica per il <xref:System.Collections.Generic.List%601> classe contiene il parametro di tipo `T`.</span><span class="sxs-lookup"><span data-stu-id="0c165-180">For example, the generic declaration for the <xref:System.Collections.Generic.List%601> class contains the type parameter `T`.</span></span>  
  
 <span data-ttu-id="0c165-181">Per ulteriori informazioni sui generics, vedere [Generics nella libreria di classi .NET Framework](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).</span><span class="sxs-lookup"><span data-stu-id="0c165-181">For more information on generics, see [Generics in the .NET Framework Class Library](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeParameterCollection" />
        <altmember cref="T:System.CodeDom.CodeTypeParameter" />
      </Docs>
    </Member>
  </Members>
</Type>