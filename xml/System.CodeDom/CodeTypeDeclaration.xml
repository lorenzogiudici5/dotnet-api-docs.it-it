<Type Name="CodeTypeDeclaration" FullName="System.CodeDom.CodeTypeDeclaration">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ada939b11aca74ba85b3b6dd8b46aedfae2d91a5" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36645955" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeTypeDeclaration extends System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeTypeDeclaration" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTypeDeclaration&#xA;Inherits CodeTypeMember" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeTypeDeclaration : System::CodeDom::CodeTypeMember" />
  <TypeSignature Language="F#" Value="type CodeTypeDeclaration = class&#xA;    inherit CodeTypeMember" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeTypeMember</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta una dichiarazione del tipo per una classe, una struttura, un'interfaccia o un'enumerazione.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.CodeTypeDeclaration> può essere utilizzato per rappresentare il codice che dichiara una classe, struttura, interfaccia o enumerazione. <xref:System.CodeDom.CodeTypeDeclaration> può essere utilizzato per dichiarare un tipo che viene nidificato all'interno di un altro tipo.  
  
 Il <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> proprietà specifica il tipo di base o tipi di base del tipo dichiarato. Il <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> proprietà contiene i membri del tipo che possono includere metodi, campi, proprietà, i commenti e altri tipi. Il <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> indicata dalla proprietà di <xref:System.Reflection.TypeAttributes> valori per la dichiarazione del tipo, che indicano la categoria del tipo. Il <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, e <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> metodi indicano se il tipo è una classe, struttura, enumerazione o un tipo interfaccia, rispettivamente.  
  
> [!NOTE]
>  Alcuni linguaggi di programmazione supportano solo la dichiarazione di tipi di riferimento o classi. Per controllare un generatore di codice specifico del linguaggio CodeDOM per il supporto per la dichiarazione di interfacce, enumerazioni o tipi di valore, chiamare il <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> metodo da testare per appropriata <xref:System.CodeDom.Compiler.GeneratorSupport> flag. <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> indica il supporto per le interfacce <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indica il supporto per le enumerazioni, e <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indica il supporto per i tipi di valore, ad esempio strutture.  
  
 È possibile compilare una classe o un'implementazione di struttura in una dichiarazione completa o suddividere l'implementazione tra più dichiarazioni. Il <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> proprietà indica se la dichiarazione del tipo è completo o parziale. Non tutti i generatori di codice supportano le dichiarazioni di tipo parziali, pertanto è necessario verificare questo supporto chiamando il <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> metodo con il flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.  
  
   
  
## Examples  
 In questo esempio viene illustrato come utilizzare un <xref:System.CodeDom.CodeTypeDeclaration> per dichiarare un tipo.  
  
 [!code-cpp[CodeTypeDeclarationExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeTypeDeclarationExample/CPP/codetypedeclarationexample.cpp#2)]
 [!code-csharp[CodeTypeDeclarationExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeTypeDeclarationExample/CS/codetypedeclarationexample.cs#2)]
 [!code-vb[CodeTypeDeclarationExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeTypeDeclarationExample/VB/codetypedeclarationexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.CodeTypeDeclarationCollection" />
    <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.CodeTypeDeclaration : string -&gt; System.CodeDom.CodeTypeDeclaration" Usage="new System.CodeDom.CodeTypeDeclaration name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome del nuovo tipo.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeDeclaration" /> con il nome specificato.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseTypes">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReferenceCollection BaseTypes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseTypes As CodeTypeReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceCollection ^ BaseTypes { System::CodeDom::CodeTypeReferenceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseTypes : System.CodeDom.CodeTypeReferenceCollection" Usage="System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene i tipi di base del tipo.</summary>
        <value>Oggetto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> che indica i tipi di base del tipo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per generare una classe in Visual Basic che non eredita da un tipo di base, ma che implementa una o più interfacce, è necessario includere <xref:System.Object> come primo elemento nel <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> insieme.  
  
> [!NOTE]
>  In .NET Framework versione 2.0 non è necessario il <xref:System.CodeDom.CodeTypeReference> per <xref:System.Object> se l'interfaccia si implementa già esiste e si fa riferimento a esso dal tipo. Ad esempio, se si implementa il <xref:System.Collections.ICollection> l'interfaccia e aggiungerlo alla raccolta con l'istruzione `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, non è necessario che la precede `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` istruzione.  
  
 Nel codice seguente viene illustrata l'aggiunta di un <xref:System.CodeDom.CodeTypeReference> nella raccolta che si intende <xref:System.Object>.  
  
```vb  
Dim ctd As New CodeTypeDeclaration("Class1")  
ctd.IsClass = True  
ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))  
ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))  
```  
  
```csharp  
CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");  
ctd.IsClass = true;  
ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));  
ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));  
```  
  
 Il codice precedente produce l'equivalente del codice Visual Basic seguente.  
  
```vb  
Public Class Class1  
Implements Interface1  
```  
  
 Tuttavia, il codice di Visual Basic effettivamente generato è la seguente.  
  
```vb  
Public Class Class1  
Inherits Object  
Implements Interface1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReferenceCollection" />
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il tipo è una classe o un tipo di riferimento.</summary>
        <value>
          <see langword="true" /> se il tipo è una classe o un tipo di riferimento; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il tipo è un'enumerazione.</summary>
        <value>
          <see langword="true" /> se il tipo è un'enumerazione; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il tipo è un'interfaccia.</summary>
        <value>
          <see langword="true" /> se il tipo è un'interfaccia; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPartial">
      <MemberSignature Language="C#" Value="public bool IsPartial { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPartial" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPartial As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPartial { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPartial : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se la dichiarazione del tipo è completa o parziale.</summary>
        <value>
          <see langword="true" /> se la dichiarazione della classe o della struttura è una rappresentazione parziale dell'implementazione; <see langword="false" /> se la dichiarazione è un'implementazione completa della classe o della struttura. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile compilare un'implementazione di una classe o struttura in una dichiarazione completa o suddividere l'implementazione tra più dichiarazioni. Le implementazioni in genere vengono fornite nella dichiarazione di un tipo completo. In questo caso, impostare la dichiarazione di tipo <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> proprietà `false`, a indicare che la dichiarazione del tipo rappresenta tutti i dettagli per l'implementazione della classe o struttura.  
  
 Una dichiarazione di tipo parziale rende più semplice compilare le diverse parti di un'implementazione di classe o struttura in moduli diversi dell'applicazione. Le dichiarazioni di tipo parziale possono essere archiviate in un file di origine o distribuite tra più file di origine che alla fine vengono compilati insieme per formare l'implementazione del tipo combinato.  
  
 Linguaggio c# supporta le dichiarazioni di tipo parziale delle classi e le strutture attraverso il `partial` (parola chiave). Visual Basic supporta le dichiarazioni di tipo parziale delle classi e le strutture con il `Partial` (parola chiave). Non tutti i generatori di codice supportano le dichiarazioni di tipo parziali, pertanto è necessario verificare questo supporto chiamando il <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> metodo con il flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.  
  
> [!NOTE]
>  Le dichiarazioni di tipo parziale sono supportate per le classi e strutture. Se si specifica una dichiarazione di tipo parziale per un'interfaccia o enumerazione, il codice generato produce gli errori del compilatore.  
  
 Quando si fornisce un'implementazione di classe o struttura in più dichiarazioni, impostare il <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> proprietà `true` per la dichiarazione iniziale e tutte le dichiarazioni supplementari. La dichiarazione iniziale completamente deve specificare il tipo di firma, tra cui i modificatori di accesso, i tipi ereditati e le interfacce implementate. Non è necessario specificare di nuovo la firma di tipo nelle dichiarazioni supplementari. Un errore del compilatore comporta in genere se si ridefinisce la firma di tipo in una dichiarazione supplementare.  
  
 Visual Studio 2005 utilizza tipi parziali per separare il codice generato dall'utente dal codice della finestra di progettazione. Nei progetti di applicazione Windows di Visual Basic, il codice utente viene inserito in una classe parziale che non è qualificata tramite il `Partial` parola chiave; progettazione fornito dal codice viene visualizzato nella classe parziale che ha il `Partial` (parola chiave). In c#, sia il codice utente e il codice della finestra di progettazione vengono visualizzati nelle classi parziali identificate le `partial` (parola chiave).  
  
   
  
## Examples  
 In questo esempio viene illustrato come utilizzare un <xref:System.CodeDom.CodeTypeDeclaration> per fornire un'implementazione della classe in più dichiarazioni. L'esempio compila l'istruzione di dichiarazione di classe iniziale e imposta il <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> proprietà `true`.  
  
 [!code-cpp[CodeDomPartialTypeExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomPartialTypeExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#3)]
 [!code-vb[CodeDomPartialTypeExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#3)]  
  
 Un metodo diverso nell'esempio estende l'implementazione della classe. Questo metodo crea una nuova istruzione di dichiarazione di tipo per la classe esistente e imposta il <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> proprietà `true`. Il compilatore unisce le due dichiarazioni di tipo parziale per l'implementazione della classe completo.  
  
 [!code-cpp[CodeDomPartialTypeExample#7](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#7)]
 [!code-csharp[CodeDomPartialTypeExample#7](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#7)]
 [!code-vb[CodeDomPartialTypeExample#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes" />
      </Docs>
    </Member>
    <Member MemberName="IsStruct">
      <MemberSignature Language="C#" Value="public bool IsStruct { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStruct" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberSignature Language="VB.NET" Value="Public Property IsStruct As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStruct { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsStruct : bool with get, set" Usage="System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il tipo è un tipo di valore, ad esempio una struttura.</summary>
        <value>
          <see langword="true" /> se il tipo è un tipo di valore; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeMemberCollection Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeMemberCollection Members" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As CodeTypeMemberCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeMemberCollection ^ Members { System::CodeDom::CodeTypeMemberCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Members : System.CodeDom.CodeTypeMemberCollection" Usage="System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeMemberCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce l'insieme dei membri della classe per il tipo rappresentato.</summary>
        <value>Oggetto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> che indica i membri della classe.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeMemberCollection" />
      </Docs>
    </Member>
    <Member MemberName="PopulateBaseTypes">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateBaseTypes;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateBaseTypes" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateBaseTypes As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateBaseTypes;" />
      <MemberSignature Language="F#" Value="member this.PopulateBaseTypes : EventHandler " Usage="member this.PopulateBaseTypes : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando si accede per la prima volta all'insieme <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateMembers">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateMembers;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateMembers" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateMembers As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateMembers;" />
      <MemberSignature Language="F#" Value="member this.PopulateMembers : EventHandler " Usage="member this.PopulateMembers : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando si accede per la prima volta all'insieme <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAttributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes TypeAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes TypeAttributes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeAttributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes TypeAttributes { System::Reflection::TypeAttributes get(); void set(System::Reflection::TypeAttributes value); };" />
      <MemberSignature Language="F#" Value="member this.TypeAttributes : System.Reflection.TypeAttributes with get, set" Usage="System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta gli attributi del tipo.</summary>
        <value>Oggetto <see cref="T:System.Reflection.TypeAttributes" /> che indica gli attributi del tipo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Reflection.TypeAttributes> proprietà contiene lo stesso tipo di valori usati dal <xref:System.Reflection> durante l'esame di un tipo in fase di esecuzione. Molti di questi flag non corrispondono per la sintassi di dichiarazione di tipo per tutti i linguaggi. Di conseguenza, solo i flag seguenti sono significativi per il <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, e <xref:System.Reflection.TypeAttributes.NestedPrivate>.  
  
> [!NOTE]
>  Alcuni flag, ad esempio <xref:System.Reflection.TypeAttributes.Abstract> si sovrappongono con il significato dei flag nel <xref:System.CodeDom.CodeTypeMember.Attributes%2A> proprietà di <xref:System.CodeDom.CodeTypeDeclaration> che viene ereditato dal <xref:System.CodeDom.CodeTypeMember>. Il <xref:System.CodeDom.CodeTypeMember.Attributes%2A> proprietà è un effetto collaterale del <xref:System.CodeDom.CodeTypeDeclaration> classe che eredita da <xref:System.CodeDom.CodeTypeMember> in modo che le classi possono essere annidate. I flag il <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> proprietà deve essere usata anziché i flag di <xref:System.CodeDom.CodeTypeMember.Attributes%2A> proprietà.  
  
> [!NOTE]
>  Il modello per impostare il flag di visibilità (flag che includono le parole `Public` o `Nested`) consiste nel nascondere la visibilità di tutti i flag utilizzando il <xref:System.Reflection.TypeAttributes.VisibilityMask> e quindi impostare il flag di visibilità desiderato. Ad esempio, il codice istruzione c# per identificare il <xref:System.CodeDom.CodeTypeDeclaration> (denominata `cd`) come classe interna `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.  Il codice per impostare lo stesso valore in Visual Basic è `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`. Impostazione di <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> proprietà direttamente da un flag di visibilità (`cd.TypeAttributes = TypeAttributes.NotPublic;`) Cancella tutti gli altri flag che possono essere impostati.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TypeParameters">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeParameterCollection TypeParameters" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeParameters As CodeTypeParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeParameterCollection ^ TypeParameters { System::CodeDom::CodeTypeParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeParameters : System.CodeDom.CodeTypeParameterCollection" Usage="System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene i parametri del tipo per la dichiarazione del tipo.</summary>
        <value>Oggetto <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> che contiene i parametri del tipo per la dichiarazione del tipo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una dichiarazione di tipo generico contiene uno o più tipi noti come parametri di tipo non specificati. Un nome di parametro di tipo rappresenta il tipo all'interno del corpo della dichiarazione generica. Ad esempio, nella dichiarazione generica per i <xref:System.Collections.Generic.List%601> classe contiene il parametro di tipo `T`.  
  
 Per ulteriori informazioni sui generics, vedere [Generics nella libreria di classi .NET Framework](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeParameterCollection" />
        <altmember cref="T:System.CodeDom.CodeTypeParameter" />
      </Docs>
    </Member>
  </Members>
</Type>