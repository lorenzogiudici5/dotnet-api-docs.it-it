<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="27fd45175764ebdd82dadcc980311bdf7989b4ec" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37655857" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <TypeSignature Language="F#" Value="type CharUnicodeInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Retrieves information about a Unicode character. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) definisce un numero di categorie di caratteri Unicode. Ad esempio, un carattere potrebbe essere stato categorizzato come lettera maiuscola, una lettera minuscola, un numero a cifre decimali, un lettera, un numero, un separatore di paragrafo, un simbolo matematico o un simbolo di valuta. L'applicazione può usare la categoria del carattere per la gestione delle operazioni basate su stringa, ad esempio l'analisi o l'estrazione della funzione substring con espressioni regolari. Il <xref:System.Globalization.UnicodeCategory> enumerazione definisce le categorie di caratteri possibili.  
  
 Si utilizza il <xref:System.Globalization.CharUnicodeInfo> classe per ottenere il <xref:System.Globalization.UnicodeCategory> valore per un carattere specifico. Il <xref:System.Globalization.CharUnicodeInfo> classe definisce i metodi che restituiscono i valori dei caratteri Unicode seguenti:  
  
-   La categoria specifica a cui appartiene una coppia di surrogati o carattere. Il valore restituito è un membro del <xref:System.Globalization.UnicodeCategory> enumerazione.  
  
-   Valore numerico. Si applica solo ai caratteri numerici, tra cui frazioni pedici, pedici, numeri romani, numeratori valuta, numeri cerchiati e cifre specifiche degli script.  
  
-   Valore della cifra. Si applica a caratteri numerici che possono essere combinati con altri caratteri numerici per rappresentare un numero intero in un sistema di numerazione.  
  
-   Valore della cifra decimale. Si applica solo ai caratteri che rappresentano cifre decimali nel sistema decimale (base 10). Una cifra decimale può essere una delle dieci cifre comprese tra da 0 a 9. Questi caratteri sono membri del <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> categoria.  
  
 Inoltre, il <xref:System.Globalization.CharUnicodeInfo> classe viene utilizzata internamente da un numero di altri tipi di .NET Framework e metodi basati sulla classificazione dei caratteri. Sono inclusi:  
  
-   Il <xref:System.Globalization.StringInfo> (classe), che funziona con elementi testuali anziché singoli caratteri in una stringa.  
  
-   Gli overload del <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> (metodo), che determinano la categoria a cui appartiene una coppia di surrogati o carattere.  
  
-   Il [classi di caratteri](~/docs/standard/base-types/character-classes-in-regular-expressions.md) riconosciuti da <xref:System.Text.RegularExpressions.Regex>, motore delle espressioni regolari di .NET Framework.  
  
 Quando si usa questa classe nelle applicazioni, tenere presente quanto segue alle considerazioni di programmazione per l'uso di <xref:System.Char> tipo. Il tipo può essere difficile da usare e le stringhe sono in genere preferibile per rappresentare il contenuto linguistico.  
  
-   Oggetto <xref:System.Char> oggetto non corrisponde sempre a un singolo carattere. Sebbene il <xref:System.Char> tipo rappresenta un singolo valore a 16 bit, alcuni caratteri (ad esempio i cluster di grafemi e coppie di surrogati) sono costituiti da due o più unità di codice UTF-16. Per altre informazioni, vedere "Char gli oggetti e dei caratteri Unicode" nel <xref:System.String> classe.  
  
-   La nozione di "character" è uno strumento flessibile. Un carattere è spesso considerato come un glifo, ma molti glifi richiedono più punti di codice. Ad esempio, può essere ä rappresentato da due punti di codice ("a" con U + 0308, ovvero il latino combinazione), o da un singolo punto di codice ("ä" o 00A4 U +). Alcuni linguaggi dispongono di molti lettere, caratteri e glifi che richiedono più punti di codice, che possono causare confusione nella rappresentazione del contenuto linguistico. Ad esempio, è presente una ΰ (U + 03B0, Carattere alfabeto greco con dialytika e tonos), ma non vi è alcun equivalente maiuscolo. Conversione in maiuscolo tale valore semplicemente recupera il valore originale.  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ogni metodo per i diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>Caratteri riconosciuti e a cui appartengono le categorie sono definite dallo standard Unicode e possono variare da una versione dello Unicode Standard a un altro. La classificazione di caratteri in una particolare versione di .NET Framework si basa su una sola versione dello Unicode Standard indipendentemente dal sistema operativo sottostante in cui è in esecuzione in .NET Framework. La tabella seguente elenca le versioni di .NET Framework poiché di [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] e le versioni dello Unicode Standard usata per classificare i caratteri.  <list type="table"><listheader><term> Versione di .NET framework </term><description> versione dello Unicode Standard </description></listheader><item><term> [! INCLUDE[net_v40_long](~/Includes/NET-v40-Long-MD.MD)] </term><description> [Standard Unicode, versione 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [! INCLUDE[net_v45](~/Includes/NET-v45-MD.MD)] </term><description> [Standard Unicode, versione 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [! INCLUDE[net_v451](~/Includes/NET-v451-MD.MD)] </term><description> [Standard Unicode, versione 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [! INCLUDE[net_v452](~/Includes/NET-v452-MD.MD)] </term><description> [Standard Unicode, versione 5.0.0] (https://www.unicode.org/versions/Unicode5.0.0/) </description></item><item><term> [! INCLUDE[net_v46](~/Includes/NET-v46-MD.MD)] </term><description> [Standard Unicode, versione 6.3.0] (https://www.unicode.org/versions/Unicode6.3.0/) </description></item><item><term> [! INCLUDE[net_v461](~/Includes/NET-v461-MD.MD)] </term><description> [Standard Unicode, versione 6.3.0] (https://www.unicode.org/versions/Unicode6.3.0/) </description></item><item><term> [! INCLUDE[net_v462](~/Includes/NET-v462-MD.MD)] </term><description> [The Unicode Standard, Version 8.0.0] (https://www.unicode.org/versions/Unicode8.0.0/) </description></item></list> ogni versione di Unicode standard include informazioni sulle modifiche al database di caratteri Unicode rispetto alla versione precedente.               Viene utilizzato il database di caratteri Unicode dal <see cref="T:System.Globalization.CharUnicodeInfo" /> classe per la classificazione dei caratteri.</para>
    </block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the decimal digit value of a numeric Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the decimal digit value.</param>
        <summary>Gets the decimal digit value of the specified numeric character.</summary>
        <returns>The decimal digit value of the specified numeric character.  -or-  -1, if the specified character is not a decimal digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo converte i caratteri che rappresentano cifre decimali integrali valori equivalenti. Cifre decimali sono caratteri di <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> categoria che può rappresentare una delle dieci cifre in formato decimale (base 10) dal sistema, da 0 a 9 di numerazione. Include caratteri, ad esempio u+0030 (cifra ZERO) a u+0039 (cifra nove), U + 0660 (INDO-ARABICI cifra ZERO) tramite U + 0669 (INDO-ARABICI cifra nove), U + 07c 0 (ZERO cifra NKO) tramite U + 07C 9 (NKO cifra 9) e U + 1040 (MYANMAR cifra ZERO) tramite (1049 U + MYANMAR CIFRA).  
  
 Per altre informazioni sui caratteri Unicode, vedere la [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ogni metodo per i diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDecimalDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDecimalDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the decimal digit value.</param>
        <param name="index">The index of the Unicode character for which to get the decimal digit value.</param>
        <summary>Gets the decimal digit value of the numeric character at the specified index of the specified string.</summary>
        <returns>The decimal digit value of the numeric character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a decimal digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo converte i caratteri che rappresentano cifre decimali integrali valori equivalenti. Cifre decimali sono caratteri di <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> categoria che può rappresentare una delle dieci cifre in formato decimale (base 10) dal sistema, da 0 a 9 di numerazione. Include caratteri, ad esempio u+0030 (cifra ZERO) a u+0039 (cifra nove), U + 0660 (INDO-ARABICI cifra ZERO) tramite U + 0669 (INDO-ARABICI cifra nove), U + 07c 0 (ZERO cifra NKO) tramite U + 07C 9 (NKO cifra 9) e U + 1040 (MYANMAR cifra ZERO) tramite (1049 U + MYANMAR CIFRA).  
  
 Per altre informazioni sui caratteri Unicode, vedere la [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ogni metodo per i diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the digit value of a numeric Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : char -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the digit value.</param>
        <summary>Gets the digit value of the specified numeric character.</summary>
        <returns>The digit value of the specified numeric character.  -or-  -1, if the specified character is not a digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valore della cifra è una proprietà che si applica solo ai caratteri numerici che possono essere utilizzati come cifre. Una cifra è un carattere numerico che può essere combinato con altre cifre per rappresentare un numero intero in un sistema di numerazione.  
  
 Per altre informazioni sui caratteri Unicode, vedere la [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ogni metodo per i diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetDigitValue : string * int -&gt; int" Usage="System.Globalization.CharUnicodeInfo.GetDigitValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the digit value.</param>
        <param name="index">The index of the Unicode character for which to get the digit value.</param>
        <summary>Gets the digit value of the numeric character at the specified index of the specified string.</summary>
        <returns>The digit value of the numeric character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a digit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valore della cifra è una proprietà che si applica solo ai caratteri numerici che possono essere utilizzati come cifre. Una cifra è un carattere numerico che può essere combinato con altre cifre per rappresentare un numero intero in un sistema di numerazione.  
  
 Per altre informazioni sui caratteri Unicode, vedere la [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ogni metodo per i diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the numeric value associated with a Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the numeric value.</param>
        <summary>Gets the numeric value associated with the specified character.</summary>
        <returns>The numeric value associated with the specified character.  -or-  -1, if the specified character is not a numeric character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valore numerico è una proprietà di caratteri Unicode che si applica solo ai caratteri numerici, tra cui frazioni, pedici, pedici, numeri romani, numeratori valuta, numeri cerchiati e cifre specifiche degli script. Per altre informazioni sui caratteri Unicode, vedere la [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Il <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> metodo presuppone che `ch` corrisponde a un singolo carattere linguistico e verificare se tale carattere può essere convertito da una cifra decimale. Tuttavia, alcuni numeri nello standard Unicode sono rappresentati da due <xref:System.Char> gli oggetti che formano una coppia di surrogati. Ad esempio, il sistema di numerazione Egeo è costituito da punti di codice 10107 U+10000 e U + 10133. L'esempio seguente usa il <xref:System.Char.ConvertFromUtf32%2A> metodo per creare un'istanza di una stringa che rappresenta numero uno EGEO. Come illustrato nell'esempio, l'output di <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> metodo restituisce -1 se viene passato un surrogato alto o un surrogato basso di questo carattere.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ogni metodo per i diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.Globalization.CharUnicodeInfo.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the numeric value.</param>
        <param name="index">The index of the Unicode character for which to get the numeric value.</param>
        <summary>Gets the numeric value associated with the character at the specified index of the specified string.</summary>
        <returns>The numeric value associated with the character at the specified index of the specified string.  -or-  -1, if the character at the specified index of the specified string is not a numeric character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valore numerico è una proprietà di caratteri Unicode che si applica solo ai caratteri numerici, tra cui frazioni, pedici, pedici, numeri romani, numeratori valuta, numeri cerchiati e cifre specifiche degli script. Per altre informazioni sui caratteri Unicode, vedere la [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Se il <xref:System.Char> oggetto nella posizione `index` è il primo carattere di una coppia di surrogati valide, il <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> metodo determina se la coppia di surrogati costituisce una cifra numerica e, in caso affermativo, restituisce il valore numerico corrispondente. Ad esempio, il sistema di numerazione Egeo è costituito da punti di codice 10107 U+10000 e U + 10133. L'esempio seguente usa il <xref:System.Char.ConvertFromUtf32%2A> metodo per creare un'istanza di una stringa che rappresenta ogni numero Egeo. Come illustrato nell'esempio, l'output di <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> metodo restituisce il valore numerico corretto se viene passata surrogato alto di un numero Egeo. Tuttavia, se viene passata surrogato basso, prende in considerazione solo il surrogato basso in isolamento e restituisce -1.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ogni metodo per i diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets the Unicode category of a Unicode character.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">The Unicode character for which to get the Unicode category.</param>
        <summary>Gets the Unicode category of the specified character.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the specified character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I caratteri Unicode sono suddivisi in categorie. Categoria del carattere è una delle relative proprietà. Ad esempio, un carattere potrebbe essere una lettera maiuscola, una lettera minuscola, un numero a cifre decimali, un lettera, un numero, un segno di punteggiatura, simboli matematici o un simbolo di valuta. Il <xref:System.Globalization.UnicodeCategory> classe restituisce la categoria di un carattere Unicode. Per altre informazioni sui caratteri Unicode, vedere la [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Il <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> metodo presuppone che `ch` corrisponde a un singolo carattere linguistico e restituisce la categoria. Ciò significa che, per le coppie di surrogati, viene restituito <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> invece la categoria a cui appartiene il surrogato. Ad esempio, l'alfabeto ugaritico occupa i punti di codice 10380 U+10000 e U + 1039F. L'esempio seguente usa il <xref:System.Char.ConvertFromUtf32%2A> metodo per creare un'istanza di una stringa che rappresenta UGARITIC LETTER ALPA (U + 10380), che è la prima lettera dell'alfabeto ugaritico. Come l'output illustrato nell'esempio, il <xref:System.Char.IsNumber%28System.Char%29> restituzione del metodo `false` se viene passato il surrogato alto o surrogato basso di questo carattere.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 Si noti che <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> non restituisce sempre lo stesso <xref:System.Globalization.UnicodeCategory> come valore di <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metodo quando viene passato un carattere specifico come parametro. Il <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> metodo è progettato in modo da riflettere la versione corrente dello standard Unicode. Al contrario, sebbene il <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metodo in genere riflette la versione corrente dello standard Unicode, potrebbe restituire categoria del carattere in base a una versione precedente dello standard o potrebbe restituire una categoria che è diverso dallo standard corrente per mantenere la compatibilità con le versioni precedenti.  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ogni metodo per i diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory codePoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.Globalization.CharUnicodeInfo.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">The <see cref="T:System.String" /> containing the Unicode character for which to get the Unicode category.</param>
        <param name="index">The index of the Unicode character for which to get the Unicode category.</param>
        <summary>Gets the Unicode category of the character at the specified index of the specified string.</summary>
        <returns>A <see cref="T:System.Globalization.UnicodeCategory" /> value indicating the category of the character at the specified index of the specified string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I caratteri Unicode sono suddivisi in categorie. Categoria del carattere è una delle relative proprietà. Ad esempio, un carattere potrebbe essere una lettera maiuscola, una lettera minuscola, un numero a cifre decimali, un lettera, un numero, un segno di punteggiatura, simboli matematici o un simbolo di valuta. Il <xref:System.Globalization.UnicodeCategory> classe restituisce la categoria di un carattere Unicode. Per altre informazioni sui caratteri Unicode, vedere la [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Se il <xref:System.Char> oggetto nella posizione `index` è il primo carattere di una coppia di surrogati valide, il <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> metodo restituisce la categoria Unicode della coppia di surrogati invece di restituire <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>. Ad esempio, l'alfabeto ugaritico occupa i punti di codice 10380 U+10000 e U + 1039F. L'esempio seguente usa il <xref:System.Char.ConvertFromUtf32%2A> metodo per creare un'istanza di una stringa che rappresenta UGARITIC LETTER ALPA (U + 10380), che è la prima lettera dell'alfabeto ugaritico. Come l'output illustrato nell'esempio, il <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> restituzione del metodo <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> se viene passata surrogato alto di questo carattere, che indica che viene considerata la coppia di surrogati. Tuttavia, se viene passata surrogato basso, prende in considerazione solo il surrogato basso in isolamento e restituisce <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 Si noti che <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> metodo non restituisce sempre lo stesso <xref:System.Globalization.UnicodeCategory> come valore di <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metodo quando viene passato un carattere specifico come parametro. Il <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> metodo è progettato in modo da riflettere la versione corrente dello standard Unicode. Al contrario, sebbene il <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metodo in genere riflette la versione corrente dello standard Unicode, potrebbe restituire categoria del carattere in base a una versione precedente dello standard o potrebbe restituire una categoria che è diverso dallo standard corrente per mantenere la compatibilità con le versioni precedenti.  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ogni metodo per i diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is outside the range of valid indexes in <paramref name="s" />.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>