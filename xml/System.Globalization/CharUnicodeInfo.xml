<Type Name="CharUnicodeInfo" FullName="System.Globalization.CharUnicodeInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a8bee7b96cd712f99cea3c5b643e9b885b969b98" />
    <Meta Name="ms.sourcegitcommit" Value="df6cf590aa3087f6c7c202712eee781c6a3c8f96" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="05/07/2018" />
    <Meta Name="ms.locfileid" Value="33682200" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CharUnicodeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CharUnicodeInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CharUnicodeInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CharUnicodeInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharUnicodeInfo abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Recupera le informazioni relative a un carattere Unicode. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) definisce un numero di categorie di caratteri Unicode. Ad esempio, un carattere potrebbe essere stato categorizzato come lettera maiuscola, una lettera minuscola, un numero di cifre decimali, un lettera, un numero, un separatore di paragrafo, un simbolo matematico o un simbolo di valuta. L'applicazione può utilizzare la categoria del carattere per definire operazioni basate su stringa, ad esempio l'analisi o l'estrazione della funzione substring con espressioni regolari. Il <xref:System.Globalization.UnicodeCategory> enumerazione definisce le categorie di caratteri possibili.  
  
 Utilizzare il <xref:System.Globalization.CharUnicodeInfo> classe per ottenere il <xref:System.Globalization.UnicodeCategory> valore per un carattere specifico. La <xref:System.Globalization.CharUnicodeInfo> classe definisce i metodi che restituiscono i valori dei caratteri Unicode seguenti:  
  
-   Categoria specifica a cui appartiene una coppia di surrogati o carattere. Il valore restituito è un membro del <xref:System.Globalization.UnicodeCategory> enumerazione.  
  
-   Valore numerico. Si applica solo ai caratteri numerici, inclusi le frazioni di secondo, indici, gli apici, i numeri romani, numeratori di valuta, numeri cerchiati e cifre specifiche dello script.  
  
-   Valore della cifra. Si applica a caratteri numerici che possono essere combinati con altri caratteri per rappresentare un numero intero in un sistema di numerazione.  
  
-   Valore di cifra decimale. Si applica solo ai caratteri che rappresentano le cifre decimali nel sistema decimale (base 10). Una cifra decimale può essere uno di dieci cifre, da 0 a 9. Questi caratteri sono membri del <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> categoria.  
  
 Inoltre, la <xref:System.Globalization.CharUnicodeInfo> classe viene utilizzata internamente da un numero di altri tipi di .NET Framework e i metodi basati sulla classificazione dei caratteri. Sono inclusi:  
  
-   Il <xref:System.Globalization.StringInfo> (classe), che funziona con elementi testuali anziché singoli caratteri in una stringa.  
  
-   Gli overload di <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> (metodo), che determinano la categoria a cui appartiene una coppia di surrogati o carattere.  
  
-   Il [classi caratteri](~/docs/standard/base-types/character-classes-in-regular-expressions.md) riconosciuto da <xref:System.Text.RegularExpressions.Regex>, motore delle espressioni regolari di .NET Framework.  
  
 Quando si utilizza questa classe nelle applicazioni, tenere presente quanto segue alle considerazioni di programmazione per l'utilizzo di <xref:System.Char> tipo. Il tipo può essere difficile da usare e le stringhe sono in genere preferibile per rappresentare il contenuto linguistico.  
  
-   Oggetto <xref:System.Char> oggetto non corrisponde sempre a un singolo carattere. Sebbene il <xref:System.Char> tipo rappresenta un singolo valore a 16 bit, alcuni caratteri (ad esempio cluster di grafemi e coppie di surrogati) è costituito da due o più unità di codice UTF-16. Per ulteriori informazioni, vedere "Char oggetti e i caratteri Unicode" nel <xref:System.String> classe.  
  
-   Inoltre, la nozione di "character" è flessibile. Un carattere è spesso considerato come un glifo, ma molti glifi richiedono più punti di codice. Ad esempio, ä può essere rappresentato da due punti di codice ("a" e U + 0308, ovvero la combinazione di latino), o da un singolo punto di codice ("ä" o U + 00A4). Alcuni linguaggi hanno molte lettere, caratteri e icone che richiedono più punti di codice, che possono provocare confusione nella rappresentazione del contenuto linguistico. Ad esempio, è presente una ΰ (U + 03B0, latino greco con dialytika e tonos), ma non è presente alcun equivalente maiuscolo. Conversione in maiuscolo tale valore recupera semplicemente il valore originale.  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ciascun metodo per diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="usage">
      <para>Caratteri riconosciuti e a cui appartengono le categorie sono definite dallo standard Unicode e possono variare da una versione dello Unicode Standard a un altro. Categorizzazione di caratteri in una particolare versione di .NET Framework è basata su una sola versione dello Unicode Standard, indipendentemente dal sistema operativo sottostante in cui è in esecuzione in .NET Framework. La tabella seguente elenca le versioni di .NET Framework, poiché il [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] e le versioni dello Unicode Standard utilizzata per classificare i caratteri.  
  
 <list type="table"><listheader><term> Versione di .NET framework  
  
 </term><description> Versione dello Standard Unicode  
  
 </description></listheader><item><term> [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]  
  
 </term><description> [Lo Standard Unicode, versione 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v45](~/includes/net-v45-md.md)]  
  
 </term><description> [Lo Standard Unicode, versione 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v451](~/includes/net-v451-md.md)]  
  
 </term><description> [Lo Standard Unicode, versione 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v452](~/includes/net-v452-md.md)]  
  
 </term><description> [Lo Standard Unicode, versione 5.0.0](https://www.unicode.org/versions/Unicode5.0.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v46](~/includes/net-v46-md.md)]  
  
 </term><description> [Lo Standard Unicode, versione 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v461](~/includes/net-v461-md.md)]  
  
 </term><description> [Lo Standard Unicode, versione 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)  
  
 </description></item><item><term> [!INCLUDE[net_v462](~/includes/net-v462-md.md)]  
  
 </term><description> [Lo Standard Unicode, versione 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)  
  
 </description></item></list>  
  
 Ogni versione dello standard Unicode include informazioni sulle modifiche al database di tipo carattere Unicode dalla versione precedente. Database dei caratteri Unicode viene utilizzato il <see cref="T:System.Globalization.CharUnicodeInfo" /> classe per classificare i caratteri.</para>
    </block>
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="N:System.Text" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetDecimalDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene il valore della cifra decimale di un carattere Unicode numerico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Carattere Unicode di cui recuperare il valore della cifra decimale.</param>
        <summary>Ottiene il valore della cifra decimale del carattere numerico specificato.</summary>
        <returns>Valore della cifra decimale del carattere numerico specificato.  
  
 oppure  
  
 -1, se il carattere specificato non è una cifra decimale.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo converte i caratteri che rappresentano le cifre decimali in base ai valori integrali equivalente. Cifre decimali sono caratteri di <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> categoria che può rappresentare una delle dieci cifre in formato decimale (base 10) numerazione di sistema, da 0 a 9. Comprende caratteri, ad esempio U + 0030 (cifra ZERO) a U + 0039 (cifra 9), U + 0660 (-ARABICI cifra ZERO) tramite U + 0669 (-ARABICI cifra 9), U + 07c 0 (n' ko: cifra ZERO) e U + 07C 9 (n' ko: cifra 9), U + 1040 (MYANMAR cifra ZERO) tramite U + 1049 ( MYANMAR CIFRA).  
  
 Per ulteriori informazioni sui caratteri Unicode, vedere il [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ciascun metodo per diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDecimalDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDecimalDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDecimalDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDecimalDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDecimalDigitValue(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Classe <see cref="T:System.String" /> contenente il carattere Unicode di cui recuperare il valore della cifra decimale.</param>
        <param name="index">Indice del carattere Unicode di cui recuperare il valore della cifra decimale.</param>
        <summary>Ottiene il valore della cifra decimale del carattere numerico nell'indice specificato della stringa specificata.</summary>
        <returns>Valore della cifra decimale del carattere numerico nell'indice specificato della stringa specificata.  
  
 oppure  
  
 -1, se il carattere nell'indice specificato della stringa specificata non è una cifra decimale.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo converte i caratteri che rappresentano le cifre decimali in base ai valori integrali equivalente. Cifre decimali sono caratteri di <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> categoria che può rappresentare una delle dieci cifre in formato decimale (base 10) numerazione di sistema, da 0 a 9. Comprende caratteri, ad esempio U + 0030 (cifra ZERO) a U + 0039 (cifra 9), U + 0660 (-ARABICI cifra ZERO) tramite U + 0669 (-ARABICI cifra 9), U + 07c 0 (n' ko: cifra ZERO) e U + 07C 9 (n' ko: cifra 9), U + 1040 (MYANMAR cifra ZERO) tramite U + 1049 ( MYANMAR CIFRA).  
  
 Per ulteriori informazioni sui caratteri Unicode, vedere il [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ciascun metodo per diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> non è compreso nell'intervallo di indici validi in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDigitValue">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene il valore della cifra di un carattere Unicode numerico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (ch As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Carattere Unicode di cui recuperare il valore della cifra.</param>
        <summary>Ottiene il valore della cifra del carattere numerico specificato.</summary>
        <returns>Valore della cifra del carattere numerico specificato.  
  
 oppure  
  
 -1, se il carattere specificato non è una cifra.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valore a una cifra è una proprietà che si applica solo caratteri numerici che possono essere usati come cifre. Una cifra è un carattere numerico che può essere combinato con altre cifre per rappresentare un numero intero in un sistema di numerazione.  
  
 Per ulteriori informazioni sui caratteri Unicode, vedere il [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ciascun metodo per diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDigitValue">
      <MemberSignature Language="C#" Value="public static int GetDigitValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetDigitValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDigitValue (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetDigitValue(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Classe <see cref="T:System.String" /> contenente il carattere Unicode di cui recuperare il valore della cifra.</param>
        <param name="index">Indice del carattere Unicode di cui recuperare il valore della cifra.</param>
        <summary>Ottiene il valore della cifra del carattere numerico nell'indice specificato della stringa specificata.</summary>
        <returns>Valore della cifra del carattere numerico nell'indice specificato della stringa specificata.  
  
 oppure  
  
 -1, se il carattere nell'indice specificato della stringa specificata non è una cifra.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valore a una cifra è una proprietà che si applica solo caratteri numerici che possono essere usati come cifre. Una cifra è un carattere numerico che può essere combinato con altre cifre per rappresentare un numero intero in un sistema di numerazione.  
  
 Per ulteriori informazioni sui caratteri Unicode, vedere il [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ciascun metodo per diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> non è compreso nell'intervallo di indici validi in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene il valore numerico associato a un carattere Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (ch As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Carattere Unicode per cui ottenere il valore numerico.</param>
        <summary>Ottiene il valore numerico associato al carattere specificato.</summary>
        <returns>Valore numerico associato al carattere specificato.  
  
 oppure  
  
 -1, se il carattere specificato non è un carattere numerico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valore numerico è una proprietà di tipo carattere Unicode che si applica solo caratteri numerici, quali le frazioni di secondo, indici, gli apici, i numeri romani, numeratori di valuta, numeri cerchiati e cifre specifiche dello script. Per ulteriori informazioni sui caratteri Unicode, vedere il [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Il <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> metodo presuppone che `ch` corrisponde a un solo carattere linguistico e verificare se tale carattere può essere convertito in una cifra decimale. Tuttavia, alcuni numeri nello standard Unicode vengono rappresentati da due <xref:System.Char> gli oggetti che formano una coppia di surrogati. Ad esempio, il sistema di numerazione Egeo è costituito da punti di codice U + 10107 e U + 10133. L'esempio seguente usa il <xref:System.Char.ConvertFromUtf32%2A> metodo per creare un'istanza di una stringa che rappresenta numero uno EGEO. Come illustrato nell'esempio, l'output di <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> metodo restituisce -1 se viene passato un surrogato alto o un surrogato basso di questo carattere.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ciascun metodo per diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Oggetto <see cref="T:System.String" /> contenente il carattere Unicode per cui ottenere il valore numerico.</param>
        <param name="index">Indice del carattere Unicode per cui ottenere il valore numerico.</param>
        <summary>Ottiene il valore numerico associato al carattere nell'indice specificato della stringa specificata.</summary>
        <returns>Valore numerico associato al carattere nell'indice specificato della stringa specificata.  
  
 oppure  
  
 -1, se il carattere nell'indice specificato della stringa specificata non è un carattere numerico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valore numerico è una proprietà di tipo carattere Unicode che si applica solo caratteri numerici, quali le frazioni di secondo, indici, gli apici, i numeri romani, numeratori di valuta, numeri cerchiati e cifre specifiche dello script. Per ulteriori informazioni sui caratteri Unicode, vedere il [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Se il <xref:System.Char> oggetto posizione `index` è il primo carattere di una coppia di surrogati valide, la <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> metodo determina se la coppia di surrogati forma una cifra e, in caso affermativo, restituisce il valore numerico. Ad esempio, il sistema di numerazione Egeo è costituito da punti di codice U + 10107 e U + 10133. L'esempio seguente usa il <xref:System.Char.ConvertFromUtf32%2A> metodo per creare un'istanza di una stringa che rappresenta ogni numero Egeo. Come illustrato nell'esempio, l'output di <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> metodo restituisce il valore numerico corretto se viene passato il surrogato alto di un numero Egeo. Tuttavia, se viene passato il surrogato basso, considera solo il surrogato basso in isolamento e restituisce -1.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ciascun metodo per diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> non è compreso nell'intervallo di indici validi in <paramref name="s" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene la categoria Unicode di un carattere Unicode.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (ch As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Carattere Unicode per cui ottenere la categoria Unicode.</param>
        <summary>Ottiene la categoria Unicode di un carattere specificato.</summary>
        <returns>Valore <see cref="T:System.Globalization.UnicodeCategory" /> che indica la categoria del carattere specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I caratteri Unicode sono suddivisi in categorie. Categoria di un carattere è una delle relative proprietà. Ad esempio, un carattere potrebbe essere una lettera maiuscola, una lettera minuscola, un numero di cifre decimali, un lettera, un numero, un segno di punteggiatura, un simbolo matematico o un simbolo di valuta. La <xref:System.Globalization.UnicodeCategory> classe restituisce la categoria di un carattere Unicode. Per ulteriori informazioni sui caratteri Unicode, vedere il [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Il <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> metodo presuppone che `ch` corrisponde a un solo carattere linguistico e restituisce la categoria. Ciò significa che, per le coppie di surrogati, restituisce <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> anziché la categoria a cui appartiene il surrogato. Ad esempio, l'alfabeto ugaritico occupa punti di codice U + 10380 e U + 1039F. L'esempio seguente usa il <xref:System.Char.ConvertFromUtf32%2A> metodo per creare un'istanza di una stringa che rappresenta UGARITIC LETTER ALPA (U + 10380), che è la prima lettera dell'alfabeto Ugaritic. Come illustrato nell'esempio, l'output di <xref:System.Char.IsNumber%28System.Char%29> restituisce `false` se viene passato il surrogato alto o surrogato basso di questo carattere.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  
  
 Si noti che <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> non restituiscono sempre lo stesso <xref:System.Globalization.UnicodeCategory> valore come il <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> quando viene passato un particolare carattere come un parametro di metodo. Il <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> metodo è progettato in modo da riflettere la versione corrente dello standard Unicode. Al contrario, sebbene il <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metodo in genere riflette la versione corrente dello standard Unicode, potrebbe restituire una la categoria di carattere in base a una versione precedente dello standard o potrebbe restituire una categoria che è diverso dallo standard corrente per mantenere la compatibilità con le versioni precedenti.  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ciascun metodo per diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (int codePoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(int32 codePoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (codePoint As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(int codePoint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codePoint" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="codePoint">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">Oggetto <see cref="T:System.String" /> che contiene il carattere Unicode per cui ottenere la categoria Unicode.</param>
        <param name="index">Indice del carattere Unicode per cui ottenere la categoria Unicode.</param>
        <summary>Ottiene la categoria Unicode del carattere nell'indice specificato della stringa specificata.</summary>
        <returns>Valore <see cref="T:System.Globalization.UnicodeCategory" /> che indica la categoria del carattere nell'indice specificato della stringa specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I caratteri Unicode sono suddivisi in categorie. Categoria di un carattere è una delle relative proprietà. Ad esempio, un carattere potrebbe essere una lettera maiuscola, una lettera minuscola, un numero di cifre decimali, un lettera, un numero, un segno di punteggiatura, un simbolo matematico o un simbolo di valuta. La <xref:System.Globalization.UnicodeCategory> classe restituisce la categoria di un carattere Unicode. Per ulteriori informazioni sui caratteri Unicode, vedere il [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  
  
 Se il <xref:System.Char> oggetto posizione `index` è il primo carattere di una coppia di surrogati valide, la <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> il metodo restituisce la categoria Unicode di una coppia di surrogati anziché restituire <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>. Ad esempio, l'alfabeto ugaritico occupa punti di codice U + 10380 e U + 1039F. L'esempio seguente usa il <xref:System.Char.ConvertFromUtf32%2A> metodo per creare un'istanza di una stringa che rappresenta UGARITIC LETTER ALPA (U + 10380), che è la prima lettera dell'alfabeto Ugaritic. Come illustrato nell'esempio, l'output di <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> restituisce <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> se viene passato il surrogato alto di questo carattere, che indica che viene considerata la coppia di surrogati. Tuttavia, se viene passato il surrogato basso, considera solo il surrogato basso in isolamento ed restituisce <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]
 [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  
  
 Si noti che <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> metodo non restituisce sempre lo stesso <xref:System.Globalization.UnicodeCategory> valore come il <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> quando viene passato un particolare carattere come un parametro di metodo. Il <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> metodo è progettato in modo da riflettere la versione corrente dello standard Unicode. Al contrario, sebbene il <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> metodo in genere riflette la versione corrente dello standard Unicode, potrebbe restituire una la categoria di carattere in base a una versione precedente dello standard o potrebbe restituire una categoria che è diverso dallo standard corrente per mantenere la compatibilità con le versioni precedenti.  
  
   
  
## Examples  
 Esempio di codice seguente mostra i valori restituiti da ciascun metodo per diversi tipi di caratteri.  
  
 [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]
 [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]
 [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> non è compreso nell'intervallo di indici validi in <paramref name="s" />.</exception>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
  </Members>
</Type>