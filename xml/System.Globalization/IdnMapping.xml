<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4825d2cbe8edc0b55312a892a1a873eff67e20b6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36486020" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <TypeSignature Language="F#" Value="type IdnMapping = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Supports the use of non-ASCII characters for Internet domain names. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nome di dominio Internet è costituito da uno o più parti, denominate etichette del nome di dominio, separate da separatori di etichetta. Ad esempio, il nome di dominio "www.proseware.com" è costituito da etichette, "www", "proseware" e "com", separati da punti. I nomi di dominio standard è costituito da caratteri designati in un intervallo di caratteri US-ASCII (o latino di base), da U + 0021 a U + 007E. Per facilitare l'utilizzo di Internet impostazioni cultura che non utilizzano il set di caratteri US-ASCII, l'internazionalizzazione IDNA Domain Names in Applications () è stato adottato standard 2003 per supportare l'inclusione di caratteri Unicode di fuori dell'intervallo di caratteri US-ASCII. Tuttavia, server dei nomi e la risoluzione dei nomi di dominio continuano a si basano sui caratteri all'interno dell'intervallo di caratteri US-ASCII.  
  
 Il meccanismo IDNA Usa Punycode per eseguire il mapping di un nome IDN contenente caratteri Unicode di fuori dell'intervallo di caratteri US-ASCII per l'intervallo di caratteri US-ASCII supportato dal sistema di nome di dominio. Il meccanismo IDNA viene utilizzato per convertire solo i nomi di dominio, non i dati trasmessi tramite Internet.  
  
> [!IMPORTANT]
>  Nel [!INCLUDE[net_v45](~/includes/net-v45-md.md)], la <xref:System.Globalization.IdnMapping> classe supporta versioni diverse dello standard IDNA, a seconda del sistema operativo in uso:  
>   
>  -   Quando viene eseguito [!INCLUDE[win8](~/includes/win8-md.md)], supporta la versione 2008 dello standard IDNA descritte dal [RFC 5891: IDN IDNA Domain Names in Applications (): protocollo](http://go.microsoft.com/fwlink/?LinkId=231875).  
> -   Durante l'esecuzione in versioni precedenti del sistema operativo Windows, supporta la versione 2003 dello standard descritto da [RFC 3490: internazionalizzazione IDNA Domain Names in Applications ()](http://go.microsoft.com/fwlink/?LinkId=158110).  
>   
>  Vedere [Unicode tecniche Standard #46: elaborazione compatibilità IDNA](http://go.microsoft.com/fwlink/?LinkId=232459) per le differenze nel modo queste norme handle particolare set di caratteri.  
  
 Il <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType> metodo normalizza un nome di dominio, converte il nome normalizzato in una rappresentazione è costituito da caratteri Unicode visualizzabili compresi nell'intervallo di punti di codice US-ASCII (da U + 0020 a U + 007E), che consente di anteporre un prefisso di codifica (ACE) compatibile con ASCII (" Xn--") a ogni etichetta. Il <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType> metodo ripristina le etichette del nome di dominio convertite da parte di <xref:System.Globalization.IdnMapping.GetAscii%2A> metodo.  
  
 Se la stringa da convertire include il separatore di etichetta caratteri IDEOGRAFICI arresto totale (U + 3002), pieno (U + FF0E) e arresto totale IDEOGRAFICI angolare (U + FF61), il <xref:System.Globalization.IdnMapping.GetAscii%2A> li converte nel separatore di etichetta arresto totale (punto, U + (metodo) 002E). Il <xref:System.Globalization.IdnMapping.GetUnicode%2A> metodo, tuttavia, non consente di ripristinare il carattere separatore di etichetta originale.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> IDN di metodo per convertire una matrice di nomi di dominio Punycode. Il <xref:System.Globalization.IdnMapping.GetUnicode%2A> metodo quindi converte il nome di dominio Punycode nuovamente con il nome di dominio originale, mentre i separatori di etichetta originale vengono sostituiti con il separatore di etichetta standard.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Tutti i metodi pubblici delle <see cref="T:System.Globalization.IdnMapping" /> sono thread-safe e possono essere utilizzate contemporaneamente da più thread, purché il <see cref="T:System.Globalization.IdnMapping" /> dell'istanza non sono inoltre impostate contemporaneamente.</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Globalization.IdnMapping" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType> e <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType> vengono inizializzate a `false`. Un piccolo subset di caratteri ASCII diverso da A-Z, 0-9, trattino (-) carattere (U + 002D) e il carattere punto (.) sono consentiti nei nomi di dominio, ma non sono punti di codice Unicode non assegnati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUnassigned : bool with get, set" Usage="System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether unassigned Unicode code points are used in operations performed by members of the current <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
        <value>
          <see langword="true" /> Se i punti di codice non assegnati vengono utilizzati in operazioni; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un nome di dominio registrato non può contenere punti di codice non assegnati. Di conseguenza, il valore predefinito di <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> proprietà `false`. La specifica IDNA consente i punti di codice non assegnati solo nelle query per stringhe di corrispondenza (vale a dire, nella ricerca del nome di dominio). Per ulteriori informazioni sull'utilizzo dei punti di codice non assegnati nei nomi di dominio, vedere [RFC 3454, "Preparazione delle stringhe internazionali (stringprep)"](http://go.microsoft.com/fwlink/?LinkId=231873) e [5891 RFC, "Internationalized Domain Names in Applications ( IDNA): protocollo "](http://go.microsoft.com/fwlink/?LinkId=231875).  
  
> [!IMPORTANT]
>  Se il <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> proprietà `false`, il comportamento associato alla proprietà dipende dal sistema operativo sottostante. Nel [!INCLUDE[win8](~/includes/win8-md.md)], la <xref:System.Globalization.IdnMapping> classe conforme a IDNA 2008, che si basa sullo standard Unicode 6.0. Nelle versioni precedenti di Windows, il <xref:System.Globalization.IdnMapping> classe basata su IDNA 2003, che è basato su Unicode 3.* x*. Alcuni punti di codice che sono stati non assegnati IDNA 2003 sono stati assegnati caratteri e sono supportate in IDNA 2008. Ad esempio, U + 0221 è stata introdotta in Unicode 4.0. In [!INCLUDE[win8](~/includes/win8-md.md)], viene codificato come "xn: 6la". Nelle versioni precedenti di Windows, genera un <xref:System.ArgumentException> (eccezione).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="idnMapping.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare to the current object.</param>
        <summary>Indicates whether a specified object and the current <see cref="T:System.Globalization.IdnMapping" /> object are equal.</summary>
        <returns>
          <see langword="true" /> if the object specified by the <paramref name="obj" /> parameter is derived from <see cref="T:System.Globalization.IdnMapping" /> and its <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties are equal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Encodes a string of domain name labels that include Unicode characters outside the US-ASCII character range to a string of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E). The string is formatted according to the IDNA standard.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string -&gt; string" Usage="idnMapping.GetAscii unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
        <summary>Encodes a string of domain name labels that consist of Unicode characters to a string of displayable Unicode characters in the US-ASCII character range. The string is formatted according to the IDNA standard.</summary>
        <returns>The equivalent of the string specified by the <paramref name="unicode" /> parameter, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `unicode` parametro specifica una stringa di uno o più etichette costituiti da caratteri Unicode validi. Le etichette sono separate da separatori di etichetta. Il `unicode` parametro non può iniziare con un separatore di etichetta, ma può includere e, facoltativamente, terminare con un separatore. I separatori di etichetta sono arresto totale (punto, U + 002E), FULL IDEOGRAFICI STOP (U + 3002), pieno (U + FF0E) e arresto totale IDEOGRAFICI angolare (U + FF61). Ad esempio, il nome di dominio "www.adatum.com" è costituito da etichette, "www", "adatum" e "com", separati da punti.  
  
 Un'etichetta non può contenere i caratteri seguenti:  
  
-   Caratteri di controllo Unicode da U + 0001 a U + 001F e U + 007F.  
  
-   Non assegnati caratteri Unicode, se il valore della <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> proprietà `false`.  
  
-   Caratteri non standard US-ASCII carattere intervallo, ad esempio lo spazio (u+0020), punto ESCLAMATIVO CONTRASSEGNARE (U + 0021), e caratteri di riga (U + 005F), memoria insufficiente. Se il valore della <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> proprietà è `true`.  
  
-   Caratteri non consentiti da una versione specifica dello standard IDNA. Per ulteriori informazioni sui caratteri non consentiti, vedere [RFC 3454: preparazione di IDN stringhe ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) per IDNA 2003, e [RFC 5982: Internationalized Domain Names per e punti di codice Unicode Le applicazioni](http://go.microsoft.com/fwlink/?LinkId=231877) per IDNA 2008.  
  
 Il <xref:System.Globalization.IdnMapping.GetAscii%2A> metodo converte tutti i separatori di etichetta in arresto totale (punto, U + 002E).  
  
 Se `unicode` non contiene caratteri di fuori di US-ASCII intervallo di caratteri e nessun carattere all'interno dell'intervallo di caratteri US-ASCII non sono consentito, il metodo restituisce `unicode` subisce modifiche.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> metodo per convertire una matrice di IDN nomi di dominio Punycode, ovvero un equivalente codificato costituito da caratteri nell'intervallo di caratteri US-ASCII. Il <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> metodo quindi converte il nome di dominio Punycode nel nome di dominio originale, mentre i separatori di etichetta originale vengono sostituiti con il separatore di etichetta standard.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
        <block subset="none" type="usage">
          <para>Nel [! INCLUDE[net_v45](~/Includes/NET-v45-MD.MD)], il <see cref="T:System.Globalization.IdnMapping" /> classe supporta versioni diverse dello standard IDNA, a seconda del sistema operativo in uso: - quando viene eseguito [! INCLUDE[win8](~/Includes/win8-MD.MD)], supporta la versione 2008 dello standard IDNA descritto da [RFC 5891: IDN IDNA Domain Names in Applications (): protocollo] (http://go.microsoft.com/fwlink/?LinkId=231875).  -Quando eseguita nelle versioni precedenti del sistema operativo Windows, è supportata la versione 2003 dello standard descritto da [RFC 3490: internazionalizzazione IDNA Domain Names in Applications ()] (http://go.microsoft.com/fwlink/?LinkId=158110).  Vedere [Unicode tecniche Standard #46: elaborazione compatibilità IDNA] (http://go.microsoft.com/fwlink/?LinkId=232459) per le differenze nel modo queste norme handle particolare set di caratteri.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
        <param name="index">A zero-based offset into <c>unicode</c> that specifies the start of the substring to convert. The conversion operation continues to the end of the <c>unicode</c> string.</param>
        <summary>Encodes a substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</summary>
        <returns>The equivalent of the substring specified by the <paramref name="unicode" /> and <paramref name="index" /> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `unicode` e `index` parametri definiscono una sottostringa con uno o più etichette costituiti da caratteri Unicode validi. Le etichette sono separate da separatori di etichetta. Il primo carattere della sottostringa non può iniziare con un separatore di etichetta, ma può includere e, facoltativamente, terminare con un separatore. I separatori di etichetta sono arresto totale (punto, U + 002E), FULL IDEOGRAFICI STOP (U + 3002), pieno (U + FF0E) e arresto totale IDEOGRAFICI angolare (U + FF61). Ad esempio, il nome di dominio "www.adatum.com" è costituito da etichette, "www", "adatum" e "com", separati da punti.  
  
 Un'etichetta non può contenere i caratteri seguenti:  
  
-   Caratteri di controllo Unicode da U + 0001 a U + 001F e U + 007F.  
  
-   Non assegnati caratteri Unicode, in base al valore di <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> proprietà.  
  
-   Caratteri non standard US-ASCII carattere intervallo, ad esempio lo spazio (u+0020), punto ESCLAMATIVO CONTRASSEGNARE (U + 0021) e i caratteri di punteggiatura (U + 005F), a seconda del valore del <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> proprietà.  
  
-   Caratteri non consentiti da una versione specifica dello standard IDNA. Per ulteriori informazioni sui caratteri non consentiti, vedere [RFC 3454: preparazione di IDN stringhe ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) per IDNA 2003, e [RFC 5982: Internationalized Domain Names per e punti di codice Unicode Le applicazioni](http://go.microsoft.com/fwlink/?LinkId=231877) per IDNA 2008.  
  
 Il <xref:System.Globalization.IdnMapping.GetAscii%2A> metodo converte tutti i separatori di etichetta in arresto totale (punto, U + 002E).  
  
 Se `unicode` non contiene caratteri di fuori di US-ASCII intervallo di caratteri e nessun carattere all'interno dell'intervallo di caratteri US-ASCII non sono consentito, il metodo restituisce `unicode` subisce modifiche.  
  
   
  
## Examples  
 L'esempio seguente viene rimossa la parte locale e il @ carattere da un indirizzo di posta elettronica e passa il risulta nome di dominio per il <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> i metodi per creare un nome di dominio Punycode equivalente codificata costituito da caratteri US-ASCII intervallo di caratteri. Il <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> metodo quindi converte il nome di dominio Punycode nel nome di dominio originale, mentre i separatori di etichetta originale vengono sostituiti con il separatore di etichetta standard.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="unicode" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
        <block subset="none" type="usage">
          <para>Nel [! INCLUDE[net_v45](~/Includes/NET-v45-MD.MD)], il <see cref="T:System.Globalization.IdnMapping" /> classe supporta versioni diverse dello standard IDNA, a seconda del sistema operativo in uso: - quando viene eseguito [! INCLUDE[win8](~/Includes/win8-MD.MD)], supporta la versione 2008 dello standard IDNA descritto da [RFC 5891: IDN IDNA Domain Names in Applications (): protocollo] (http://go.microsoft.com/fwlink/?LinkId=231875).  -Quando eseguita nelle versioni precedenti del sistema operativo Windows, è supportata la versione 2003 dello standard descritto da [RFC 3490: internazionalizzazione IDNA Domain Names in Applications ()] (http://go.microsoft.com/fwlink/?LinkId=158110).  Vedere [Unicode tecniche Standard #46: elaborazione compatibilità IDNA] (http://go.microsoft.com/fwlink/?LinkId=232459) per le differenze nel modo queste norme handle particolare set di caratteri.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">The string to convert, which consists of one or more domain name labels delimited with label separators.</param>
        <param name="index">A zero-based offset into <c>unicode</c> that specifies the start of the substring.</param>
        <param name="count">The number of characters to convert in the substring that starts at the position specified by  <c>index</c> in the <c>unicode</c> string.</param>
        <summary>Encodes the specified number of characters in a  substring of domain name labels that include Unicode characters outside the US-ASCII character range. The substring is converted to a string of displayable Unicode characters in the US-ASCII character range and is formatted according to the IDNA standard.</summary>
        <returns>The equivalent of the substring specified by the <paramref name="unicode" />, <paramref name="index" />, and <paramref name="count" /> parameters, consisting of displayable Unicode characters in the US-ASCII character range (U+0020 to U+007E) and formatted according to the IDNA standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `Unicode`, `index`, e `count` parametri definiscono una sottostringa con uno o più etichette costituiti da caratteri Unicode validi. Le etichette sono separate da separatori di etichetta. Il primo carattere della sottostringa non può iniziare con un separatore di etichetta, ma può includere e, facoltativamente, terminare con un separatore. I separatori di etichetta sono arresto totale (punto, U + 002E), FULL IDEOGRAFICI STOP (U + 3002), pieno (U + FF0E) e arresto totale IDEOGRAFICI angolare (U + FF61). Ad esempio, il nome di dominio "www.adatum.com" è costituito da etichette, "www", "adatum" e "com", separati da punti.  
  
 Un'etichetta non può contenere i caratteri seguenti:  
  
-   Caratteri di controllo Unicode da U + 0001 a U + 001F e U + 007F.  
  
-   Non assegnati caratteri Unicode, in base al valore di <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> proprietà.  
  
-   Caratteri non standard US-ASCII carattere intervallo, ad esempio lo spazio (u+0020), punto ESCLAMATIVO CONTRASSEGNARE (U + 0021) e i caratteri di punteggiatura (U + 005F), a seconda del valore del <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> proprietà.  
  
-   Caratteri non consentiti da una versione specifica dello standard IDNA. Per ulteriori informazioni sui caratteri non consentiti, vedere [RFC 3454: preparazione di IDN stringhe ("stringprep")](http://go.microsoft.com/fwlink/?LinkId=231873) per IDNA 2003, e [RFC 5982: Internationalized Domain Names per e punti di codice Unicode Le applicazioni](http://go.microsoft.com/fwlink/?LinkId=231877) per IDNA 2008.  
  
 Il <xref:System.Globalization.IdnMapping.GetAscii%2A> metodo converte tutti i separatori di etichetta in arresto totale (punto, U + 002E). Se la sottostringa non contenga caratteri di fuori dell'intervallo di caratteri US-ASCII e nessun carattere all'interno dell'intervallo di caratteri US-ASCII non sono consentito, il metodo restituisce la sottostringa invariata.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> metodo per convertire un nome IDN in un nome di dominio che sia conforme allo standard IDNA. Il <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> metodo quindi converte il nome di dominio standard nel nome di dominio originale, mentre i separatori di etichetta originale vengono sostituiti con il separatore di etichetta standard.  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="unicode" />.  -or-  <paramref name="index" /> is greater than the length of <paramref name="unicode" /> minus <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
        <block subset="none" type="usage">
          <para>Nel [! INCLUDE[net_v45](~/Includes/NET-v45-MD.MD)], il <see cref="T:System.Globalization.IdnMapping" /> classe supporta versioni diverse dello standard IDNA, a seconda del sistema operativo in uso: - quando viene eseguito [! INCLUDE[win8](~/Includes/win8-MD.MD)], supporta la versione 2008 dello standard IDNA descritto da [RFC 5891: IDN IDNA Domain Names in Applications (): protocollo] (http://go.microsoft.com/fwlink/?LinkId=231875).  -Quando eseguita nelle versioni precedenti del sistema operativo Windows, è supportata la versione 2003 dello standard descritto da [RFC 3490: internazionalizzazione IDNA Domain Names in Applications ()] (http://go.microsoft.com/fwlink/?LinkId=158110).  Vedere [Unicode tecniche Standard #46: elaborazione compatibilità IDNA] (http://go.microsoft.com/fwlink/?LinkId=232459) per le differenze nel modo queste norme handle particolare set di caratteri.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="idnMapping.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a hash code for this <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
        <returns>One of four 32-bit signed constants derived from the properties of an <see cref="T:System.Globalization.IdnMapping" /> object.  The return value has no special meaning and is not suitable for use in a hash code algorithm.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eseguire l'override di <xref:System.Globalization.IdnMapping.GetHashCode%2A> metodo se l'applicazione deve implementare un algoritmo di codice hash significativo.  
  
   
  
## Examples  
 Nell'esempio seguente si presuppone che una singola stringa può contenere più indirizzi di posta elettronica separati da spazi. Rimuove la parte locale e il @ carattere da ogni indirizzo di posta elettronica e passa il risulta nome di dominio per il <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> o <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> i metodi per creare un nome di dominio Punycode. Il <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> metodo converte quindi il nome di dominio Punycode nel nome di dominio originale.  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Decodes one or more domain name labels encoded according to the IDNA standard to a string of Unicode characters.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string -&gt; string" Usage="idnMapping.GetUnicode ascii" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
        <summary>Decodes a string of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
        <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sui nomi di dominio, etichette e i separatori di etichetta, vedere la sezione Osservazioni per il <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> metodo.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> IDN di metodo per convertire una matrice di nomi di dominio Punycode. Il <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> metodo quindi converte il nome di dominio Punycode nel nome di dominio originale, mentre i separatori di etichetta originale vengono sostituiti con il separatore di etichetta standard.  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
        <param name="index">A zero-based offset into <c>ascii</c> that specifies the start of the substring to decode. The decoding operation continues to the end of the <c>ascii</c> string.</param>
        <summary>Decodes a substring of one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
        <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" /> and <paramref name="index" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sui nomi di dominio, etichette e i separatori di etichetta, vedere la sezione Osservazioni per il <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="ascii" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">The string to decode, which consists of one or more labels in the US-ASCII character range (U+0020 to U+007E) encoded according to the IDNA standard.</param>
        <param name="index">A zero-based offset into <c>ascii</c> that specifies the start of the substring.</param>
        <param name="count">The number of characters to convert in the substring that starts at the position specified by <c>index</c> in the <c>ascii</c> string.</param>
        <summary>Decodes a substring of a specified length that contains one or more domain name labels, encoded according to the IDNA standard, to a string of Unicode characters.</summary>
        <returns>The Unicode equivalent of the IDNA substring specified by the <paramref name="ascii" />, <paramref name="index" />, and <paramref name="count" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sui nomi di dominio, etichette e i separatori di etichetta, vedere la sezione Osservazioni per il <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is less than zero.  -or-  <paramref name="index" /> is greater than the length of <paramref name="ascii" />.  -or-  <paramref name="index" /> is greater than the length of <paramref name="ascii" /> minus <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> is invalid based on the <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> and <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> properties, and the IDNA standard.</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseStd3AsciiRules : bool with get, set" Usage="System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether standard or relaxed naming conventions are used in operations performed by members of the current <see cref="T:System.Globalization.IdnMapping" /> object.</summary>
        <value>
          <see langword="true" /> Se vengono utilizzate le convenzioni di denominazione standard nelle operazioni; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I nomi di dominio che seguono le regole di denominazione standard sono costituiti da un subset specifico di caratteri nell'intervallo di caratteri US-ASCII. I caratteri sono le lettere alla Z, cifre da 0 a 9, il carattere trattino (-) (U + 002D) e il carattere punto (.). Il caso dei caratteri non è significativo. Convenzioni di denominazione Relaxed consentono l'utilizzo di un intervallo più ampio di ASCII caratteri, incluso lo spazio (u+0020) di caratteri, caratteri di punto esclamativo (U + 0021) e la barra sotto carattere (U + 005F). Se <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> viene `true`, solo i caratteri standard possono essere visualizzati in un'etichetta restituita dal <xref:System.Globalization.IdnMapping.GetAscii%2A> metodo.  
  
 Per impostazione predefinita, il valore di <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> proprietà `false`, e un subset di caratteri ASCII espanso è consentito in un'etichetta.  
  
> [!NOTE]
>  Il <xref:System.Globalization.IdnMapping> classe impedisce l'uso di caratteri non visualizzabili da u+0000 a U + 001F e U + 007F nel nome di dominio vengono etichettati indipendentemente dall'impostazione del <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> proprietà. In questo modo si riduce il rischio di attacchi alla sicurezza, ad esempio lo spoofing dei nomi.  
  
   
  
## Examples  
 Nell'esempio seguente genera gli URL contenenti caratteri nell'intervallo ASCII da u+0000 a U + 007F e li passa per la <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> metodo di due <xref:System.Globalization.IdnMapping> oggetti. È un oggetto relativo <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> impostata su `true`, e l'altro oggetto è impostato su `false`. L'output vengono visualizzati i caratteri che non sono validi quando il <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> proprietà è `true` ma valido quando è `false`.  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>