<Type Name="CompareInfo" FullName="System.Globalization.CompareInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="80d568fc0daf6dcc09ab810c4a143ebeae612716" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30411035" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompareInfo : System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompareInfo extends System.Object implements class System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CompareInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CompareInfo&#xA;Implements IDeserializationCallback" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompareInfo : System::Runtime::Serialization::IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implementa un insieme di metodi per i confronti tra stringhe sensibili alle impostazioni cultura.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le convenzioni per il confronto e l'ordinamento dei dati variano in base alle impostazioni cultura. L'ordinamento può, ad esempio, essere basato sulla fonetica o sulla rappresentazione visiva dei caratteri. In lingue dell'Asia orientale, i caratteri sono ordinati per il tratto e radicale di ideogrammi. Ordinamento dipende inoltre le lingue di ordine e utilizzano le impostazioni cultura per la lettera dell'alfabeto. Nella lingua danese, ad esempio, è presente un carattere "Æ" che viene ordinato alfabeticamente dopo la lettera Z. Inoltre, nei confronti può essere o meno applicata la distinzione tra maiuscole e minuscole. Le regole relative all'utilizzo di maiuscole e minuscole possono anche differire in base alle impostazioni cultura. La classe <xref:System.Globalization.CompareInfo> è responsabile della gestione dei dati di confronto delle stringhe dipendenti dalle impostazioni cultura e dell'esecuzione di operazioni su stringhe dipendenti dalle impostazioni cultura.  
  
 In genere, non è necessario creare direttamente un'istanza di un oggetto <xref:System.Globalization.CompareInfo>, perché ne viene utilizzata una in modo implicito da tutte le operazioni di confronto di stringhe non ordinali, incluse le chiamate al metodo <xref:System.String.Compare%2A?displayProperty=nameWithType>. Tuttavia, se si desidera recuperare un oggetto <xref:System.Globalization.CompareInfo>, è possibile effettuarlo mediante uno dei seguenti modi:  
  
-   Recuperando il valore della proprietà <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> per impostazioni cultura specifiche.  
  
-   Chiamando il metodo statico <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> con un nome di impostazioni cultura. Questo consente di effettuare l'accesso ad associazione tardiva a un oggetto <xref:System.Globalization.CompareInfo>.  
  
## <a name="ignored-search-values"></a>Valori di ricerca ignorati  
 I set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un confronto linguistico o dipendente dalle impostazioni cultura. I metodi di confronto come <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> non considerano tali caratteri quando eseguono un confronto dipendente dalle impostazioni cultura. I caratteri ignorabili includono:  
  
-   <xref:System.String.Empty?displayProperty=nameWithType>. I metodi di confronto dipendenti dalle impostazioni cultura troveranno sempre una stringa vuota all'inizio (indice zero) della stringa cercata.  
  
-   Un carattere o una stringa costituita da caratteri con punti di codice non considerati nell'operazione a causa delle opzioni di confronto. In particolare, le opzioni <xref:System.Globalization.CompareOptions.IgnoreNonSpace?displayProperty=nameWithType> e <xref:System.Globalization.CompareOptions.IgnoreSymbols?displayProperty=nameWithType> producono ricerche in cui i simboli e i caratteri di combinazione senza spaziatura vengono ignorati.  
  
-   Una stringa con punti di codice senza alcun significato linguistico. Ad esempio, il segno meno facoltativo (U+00AD) nei confronti di stringhe dipendenti dalle impostazioni cultura viene sempre ignorato.  
  
## <a name="security-considerations"></a>Considerazioni sulla sicurezza  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o da un'operazione di modifica delle maiuscole e minuscole, è necessario utilizzare la proprietà <xref:System.Globalization.CultureInfo.InvariantCulture%2A> per assicurarsi che il comportamento sia coerente indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Quando possibile, è necessario usare i metodi di confronto tra stringhe che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 L'esempio seguente mostra come <xref:System.Globalization.CompareInfo> oggetto associato a un <xref:System.Globalization.CultureInfo> oggetto sul confronto tra stringhe.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Confronta due stringhe.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string1">Prima stringa da confrontare.</param>
        <param name="string2">Seconda stringa da confrontare.</param>
        <summary>Confronta due stringhe.</summary>
        <returns>Intero con segno a 32 bit che indica la relazione lessicale tra i due termini del confronto.  
  
 <list type="table"><listheader><term> Valore  
  
 </term><description> Condizione  
  
 </description></listheader><item><term> zero  
  
 </term><description> Le due stringhe sono uguali.  
  
 </description></item><item><term> minore di zero  
  
 </term><description><paramref name="string1" /> è minore di <paramref name="string2" />.  
  
 </description></item><item><term> maggiore di zero  
  
 </term><description><paramref name="string1" /> è maggiore di <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il confronto viene eseguito tramite <xref:System.Globalization.CompareOptions.None?displayProperty=nameWithType>. Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o di una modifica della combinazione, è necessario utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 L'esempio seguente confronta le parti di due stringhe utilizzando i diversi <xref:System.Globalization.CompareInfo> oggetti:  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alle impostazioni cultura spagnole (Spagna) con ordinamento internazionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alle impostazioni cultura spagnole (Spagna) con ordinamento tradizionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato il <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 Nel codice riportato di seguito viene illustrata la chiamata al metodo <xref:System.Globalization.CompareInfo.Compare%2A>.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>I set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un confronto linguistico o dipendente dalle impostazioni cultura. Il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" /> metodo non prende in considerazione tali caratteri quando si esegue un confronto con distinzione delle impostazioni cultura. Ad esempio, un confronto con distinzione delle impostazioni cultura di "animale" con "ani posta" (con un segno meno facoltativo o U + 00AD) indica che le due stringhe sono equivalenti, come illustrato nell'esempio seguente.  
  
 [!code-vb[System.Globalization.CompareInfo.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.compare/vb/compare1.vb#1)]  
  
 Per riconoscere i caratteri ignorabili in un confronto tra stringhe, chiamare il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> metodo e fornire un valore di <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> per il <paramref name="options" /> parametro.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">Prima stringa da confrontare.</param>
        <param name="string2">Seconda stringa da confrontare.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>string1</c> e <c>string2</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> e <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Confronta due stringhe usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Intero con segno a 32 bit che indica la relazione lessicale tra i due termini del confronto.  
  
 <list type="table"><listheader><term> Valore  
  
 </term><description> Condizione  
  
 </description></listheader><item><term> zero  
  
 </term><description> Le due stringhe sono uguali.  
  
 </description></item><item><term> minore di zero  
  
 </term><description><paramref name="string1" /> è minore di <paramref name="string2" />.  
  
 </description></item><item><term> maggiore di zero  
  
 </term><description><paramref name="string1" /> è maggiore di <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o di una modifica della combinazione, è necessario utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 L'esempio seguente confronta due stringhe utilizzando diversi <xref:System.Globalization.CompareOptions> impostazioni.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CPP/comparestrstropt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CS/comparestrstropt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/VB/comparestrstropt.vb#1)]  
  
 Nel codice riportato di seguito viene illustrata la chiamata al metodo <xref:System.Globalization.CompareInfo.Compare%2A>.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>I set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un confronto linguistico o dipendente dalle impostazioni cultura. Il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> metodo non prende in considerazione tali caratteri quando si esegue un confronto con distinzione delle impostazioni cultura. Per riconoscere i caratteri ignorabili il confronto, specificare un valore di <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> per il <paramref name="options" /> parametro.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">Prima stringa da confrontare.</param>
        <param name="offset1">Indice in base zero del carattere in <c>string1</c> dal quale iniziare il confronto.</param>
        <param name="string2">Seconda stringa da confrontare.</param>
        <param name="offset2">Indice in base zero del carattere in <c>string2</c> dal quale iniziare il confronto.</param>
        <summary>Confronta le sezioni finali di due stringhe.</summary>
        <returns>Intero con segno a 32 bit che indica la relazione lessicale tra i due termini del confronto.  
  
 <list type="table"><listheader><term> Valore  
  
 </term><description> Condizione  
  
 </description></listheader><item><term> zero  
  
 </term><description> Le due stringhe sono uguali.  
  
 </description></item><item><term> minore di zero  
  
 </term><description> La sezione specificata di <paramref name="string1" /> è minore della sezione specificata di <paramref name="string2" />.  
  
 </description></item><item><term> maggiore di zero  
  
 </term><description> La sezione specificata di <paramref name="string1" /> è maggiore della sezione specificata di <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o di una modifica della combinazione, è necessario utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 L'esempio seguente confronta le parti di due stringhe utilizzando i diversi <xref:System.Globalization.CompareInfo> oggetti:  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alle impostazioni cultura spagnole (Spagna) con ordinamento internazionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alle impostazioni cultura spagnole (Spagna) con ordinamento tradizionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato il <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CPP/comparestrintstrint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CS/comparestrintstrint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/VB/comparestrintstrint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> o <paramref name="offset2" /> è minore di zero.  
  
 oppure  
  
 <paramref name="offset1" /> è maggiore o uguale al numero di caratteri in <paramref name="string1" />  
  
 oppure  
  
 <paramref name="offset2" /> è maggiore o uguale al numero di caratteri in <paramref name="string2" /></exception>
        <block subset="none" type="usage">
          <para>I set di caratteri includono caratteri ignorabili. Il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" /> metodo non prende in considerazione tali caratteri quando si esegue un confronto linguistico o dipendente dalla lingua. Per riconoscere i caratteri ignorabili il confronto, chiamare il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> metodo e fornire un valore <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> per il <paramref name="options" /> parametro.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">Prima stringa da confrontare.</param>
        <param name="offset1">Indice in base zero del carattere in <c>string1</c> dal quale iniziare il confronto.</param>
        <param name="string2">Seconda stringa da confrontare.</param>
        <param name="offset2">Indice in base zero del carattere in <c>string2</c> dal quale iniziare il confronto.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>string1</c> e <c>string2</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> e <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Confronta le sezioni finali di due stringhe usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Intero con segno a 32 bit che indica la relazione lessicale tra i due termini del confronto.  
  
 <list type="table"><listheader><term> Valore  
  
 </term><description> Condizione  
  
 </description></listheader><item><term> zero  
  
 </term><description> Le due stringhe sono uguali.  
  
 </description></item><item><term> minore di zero  
  
 </term><description> La sezione specificata di <paramref name="string1" /> è minore della sezione specificata di <paramref name="string2" />.  
  
 </description></item><item><term> maggiore di zero  
  
 </term><description> La sezione specificata di <paramref name="string1" /> è maggiore della sezione specificata di <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o di una modifica della combinazione, è necessario utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 L'esempio seguente confronta le parti di due stringhe utilizzando diversi <xref:System.Globalization.CompareOptions> impostazioni.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CPP/comparestrintstrintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CS/comparestrintstrintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/VB/comparestrintstrintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> o <paramref name="offset2" /> è minore di zero.  
  
 oppure  
  
 <paramref name="offset1" /> è maggiore o uguale al numero di caratteri in <paramref name="string1" />  
  
 oppure  
  
 <paramref name="offset2" /> è maggiore o uguale al numero di caratteri in <paramref name="string2" /></exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>I set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un confronto linguistico o dipendente dalle impostazioni cultura. Il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> metodo non prende in considerazione tali caratteri quando si esegue un confronto con distinzione delle impostazioni cultura. Per riconoscere i caratteri ignorabili il confronto, specificare un valore di <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> per il <paramref name="options" /> parametro.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">Prima stringa da confrontare.</param>
        <param name="offset1">Indice in base zero del carattere in <c>string1</c> dal quale iniziare il confronto.</param>
        <param name="length1">Numero di caratteri consecutivi in <c>string1</c> da confrontare.</param>
        <param name="string2">Seconda stringa da confrontare.</param>
        <param name="offset2">Indice in base zero del carattere in <c>string2</c> dal quale iniziare il confronto.</param>
        <param name="length2">Numero di caratteri consecutivi in <c>string2</c> da confrontare.</param>
        <summary>Confronta due sezioni di due stringhe.</summary>
        <returns>Intero con segno a 32 bit che indica la relazione lessicale tra i due termini del confronto.  
  
 <list type="table"><listheader><term> Valore  
  
 </term><description> Condizione  
  
 </description></listheader><item><term> zero  
  
 </term><description> Le due stringhe sono uguali.  
  
 </description></item><item><term> minore di zero  
  
 </term><description> La sezione specificata di <paramref name="string1" /> è minore della sezione specificata di <paramref name="string2" />.  
  
 </description></item><item><term> maggiore di zero  
  
 </term><description> La sezione specificata di <paramref name="string1" /> è maggiore della sezione specificata di <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o di una modifica della combinazione, è necessario utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Quando possibile, è necessario usare i metodi di confronto tra stringhe che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 L'esempio seguente confronta le parti di due stringhe utilizzando i diversi <xref:System.Globalization.CompareInfo> oggetti:  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alle impostazioni cultura spagnole (Spagna) con ordinamento internazionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alle impostazioni cultura spagnole (Spagna) con ordinamento tradizionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato il <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CPP/comparestrintintstrintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CS/comparestrintintstrintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/VB/comparestrintintstrintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" />, <paramref name="length1" />, <paramref name="offset2" /> o <paramref name="length2" /> è minore di zero.  
  
 oppure  
  
 <paramref name="offset1" /> è maggiore o uguale al numero di caratteri in <paramref name="string1" />  
  
 oppure  
  
 <paramref name="offset2" /> è maggiore o uguale al numero di caratteri in <paramref name="string2" />  
  
 oppure  
  
 <paramref name="length1" /> è maggiore del numero di caratteri compresi tra <paramref name="offset1" /> e la fine di <paramref name="string1" />.  
  
 oppure  
  
 <paramref name="length2" /> è maggiore del numero di caratteri compresi tra <paramref name="offset2" /> e la fine di <paramref name="string2" />.</exception>
        <block subset="none" type="usage">
          <para>I set di caratteri includono caratteri ignorabili. Il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" /> metodo non prende in considerazione tali caratteri quando si esegue un confronto linguistico o dipendente dalla lingua. Per riconoscere i caratteri ignorabili il confronto, chiamare il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo e fornire un valore <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> per il <paramref name="options" /> parametro.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">Prima stringa da confrontare.</param>
        <param name="offset1">Indice in base zero del carattere in <c>string1</c> dal quale iniziare il confronto.</param>
        <param name="length1">Numero di caratteri consecutivi in <c>string1</c> da confrontare.</param>
        <param name="string2">Seconda stringa da confrontare.</param>
        <param name="offset2">Indice in base zero del carattere in <c>string2</c> dal quale iniziare il confronto.</param>
        <param name="length2">Numero di caratteri consecutivi in <c>string2</c> da confrontare.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>string1</c> e <c>string2</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> e <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Confronta due sezioni di due stringhe usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Intero con segno a 32 bit che indica la relazione lessicale tra i due termini del confronto.  
  
 <list type="table"><listheader><term> Valore  
  
 </term><description> Condizione  
  
 </description></listheader><item><term> zero  
  
 </term><description> Le due stringhe sono uguali.  
  
 </description></item><item><term> minore di zero  
  
 </term><description> La sezione specificata di <paramref name="string1" /> è minore della sezione specificata di <paramref name="string2" />.  
  
 </description></item><item><term> maggiore di zero  
  
 </term><description> La sezione specificata di <paramref name="string1" /> è maggiore della sezione specificata di <paramref name="string2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o di una modifica della combinazione, è necessario utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 L'esempio seguente confronta le parti di due stringhe utilizzando diversi <xref:System.Globalization.CompareOptions> impostazioni.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CPP/comparestrintintstrintintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CS/comparestrintintstrintintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/VB/comparestrintintstrintintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" />, <paramref name="length1" />, <paramref name="offset2" /> o <paramref name="length2" /> è minore di zero.  
  
 oppure  
  
 <paramref name="offset1" /> è maggiore o uguale al numero di caratteri in <paramref name="string1" />  
  
 oppure  
  
 <paramref name="offset2" /> è maggiore o uguale al numero di caratteri in <paramref name="string2" />  
  
 oppure  
  
 <paramref name="length1" /> è maggiore del numero di caratteri compresi tra <paramref name="offset1" /> e la fine di <paramref name="string1" />.  
  
 oppure  
  
 <paramref name="length2" /> è maggiore del numero di caratteri compresi tra <paramref name="offset2" /> e la fine di <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>I set di caratteri includono caratteri ignorabili. Il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo non prende in considerazione tali caratteri quando si esegue un confronto con distinzione delle impostazioni cultura. Per riconoscere i caratteri ignorabili il confronto, specificare un valore di <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> per il <paramref name="options" /> parametro.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto da confrontare con l'oggetto <see cref="T:System.Globalization.CompareInfo" /> corrente.</param>
        <summary>Determina se l'oggetto specificato è uguale all'oggetto <see cref="T:System.Globalization.CompareInfo" /> corrente.</summary>
        <returns>
          <see langword="true" /> se l'oggetto specificato è uguale all'oggetto <see cref="T:System.Globalization.CompareInfo" /> corrente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Due <xref:System.Globalization.CompareInfo> oggetti sono uguali se i relativi <xref:System.Globalization.CompareInfo.LCID%2A> e <xref:System.Globalization.CompareInfo.Name%2A> le proprietà sono uguali.  
  
 Questo metodo esegue l'override del metodo <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o di una modifica della combinazione, è necessario utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCompareInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza un nuovo oggetto <see cref="T:System.Globalization.CompareInfo" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (culture As Integer) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">Intero che rappresenta l'identificatore di impostazioni cultura.</param>
        <summary>Inizializza un nuovo oggetto <see cref="T:System.Globalization.CompareInfo" /> associato alle impostazioni cultura con l'identificatore specificato.</summary>
        <returns>Nuovo oggetto <see cref="T:System.Globalization.CompareInfo" /> associato alle impostazioni cultura con l'identificatore specificato che usa i metodi di confronto tra stringhe nell'oggetto <see cref="T:System.Reflection.Assembly" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente confronta le parti di due stringhe utilizzando i diversi <xref:System.Globalization.CompareInfo> oggetti:  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alle impostazioni cultura spagnole (Spagna) con ordinamento internazionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alle impostazioni cultura spagnole (Spagna) con ordinamento tradizionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato il <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (name As String) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Stringa che rappresenta il nome delle impostazioni cultura.</param>
        <summary>Inizializza un nuovo oggetto <see cref="T:System.Globalization.CompareInfo" /> associato alle impostazioni cultura con il nome specificato.</summary>
        <returns>Nuovo oggetto <see cref="T:System.Globalization.CompareInfo" /> associato alle impostazioni cultura con l'identificatore specificato che usa i metodi di confronto tra stringhe nell'oggetto <see cref="T:System.Reflection.Assembly" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente confronta le parti di due stringhe utilizzando i diversi <xref:System.Globalization.CompareInfo> oggetti:  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alle impostazioni cultura spagnole (Spagna) con ordinamento internazionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alle impostazioni cultura spagnole (Spagna) con ordinamento tradizionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato il <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> è un nome di impostazioni cultura non valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture, System::Reflection::Assembly ^ assembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="culture">Intero che rappresenta l'identificatore di impostazioni cultura.</param>
        <param name="assembly">
          <see cref="T:System.Reflection.Assembly" /> che contiene i metodi di confronto tra stringhe da usare.</param>
        <summary>Inizializza un nuovo oggetto <see cref="T:System.Globalization.CompareInfo" /> associato alle impostazioni cultura specificate e che usa i metodi di confronto tra stringhe nell'oggetto <see cref="T:System.Reflection.Assembly" /> specificato.</summary>
        <returns>Nuovo oggetto <see cref="T:System.Globalization.CompareInfo" /> associato alle impostazioni cultura con l'identificatore specificato che usa i metodi di confronto tra stringhe nell'oggetto <see cref="T:System.Reflection.Assembly" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Il comportamento di questo metodo è imprevedibile. È consigliabile per l'applicazione di utilizzare una versione di questo metodo che non accetta un input dell'assembly.  
  
 Il `assembly` parametro deve essere dello stesso tipo <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assembly" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assembly" /> è di un tipo non valido.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name, System::Reflection::Assembly ^ assembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="name">Stringa che rappresenta il nome delle impostazioni cultura.</param>
        <param name="assembly">
          <see cref="T:System.Reflection.Assembly" /> che contiene i metodi di confronto tra stringhe da usare.</param>
        <summary>Inizializza un nuovo oggetto <see cref="T:System.Globalization.CompareInfo" /> associato alle impostazioni cultura specificate e che usa i metodi di confronto tra stringhe nell'oggetto <see cref="T:System.Reflection.Assembly" /> specificato.</summary>
        <returns>Nuovo oggetto <see cref="T:System.Globalization.CompareInfo" /> associato alle impostazioni cultura con l'identificatore specificato che usa i metodi di confronto tra stringhe nell'oggetto <see cref="T:System.Reflection.Assembly" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Il comportamento di questo metodo è imprevedibile. È consigliabile utilizzare una versione di questo metodo che non accetta un input dell'assembly.  
  
 Il `assembly` parametro deve essere dello stesso tipo <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="assembly" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> è un nome di impostazioni cultura non valido.  
  
 oppure  
  
 <paramref name="assembly" /> è di un tipo non valido.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un codice hash per questa istanza di <see cref="T:System.Globalization.CompareInfo" /> o per una determinata stringa.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Viene usato come funzione hash per l'oggetto <see cref="T:System.Globalization.CompareInfo" /> corrente per algoritmi hash e strutture di dati, ad esempio una tabella hash.</summary>
        <returns>Codice hash per l'oggetto <see cref="T:System.Globalization.CompareInfo" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue l'override del metodo <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Il metodo genera lo stesso codice hash per due oggetti uguali in base al metodo <xref:System.Globalization.CompareInfo.Equals%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode (source As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa di cui deve essere restituito il codice hash.</param>
        <param name="options">Valore che determina la modalità di confronto delle stringhe.</param>
        <summary>Ottiene il codice hash per una stringa basata sulle opzioni di confronto specificate.</summary>
        <returns>Codice hash di un intero con segno a 32 bit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comportamento di <xref:System.Globalization.CompareInfo.GetHashCode%2A> dipende dalla relativa implementazione, che potrebbe variare da una versione di common language runtime a un altro o da una piattaforma .NET Framework a altra.  
  
> [!IMPORTANT]
>  Se due oggetti string specificati sono uguali, il <xref:System.Globalization.CompareInfo.GetHashCode%2A> metodo restituisce valori identici. Tuttavia, non c'è un valore del codice hash univoco per ogni valore di stringa univoco. Stringhe diverse possono restituire lo stesso codice hash.  
>   
>  Non è necessariamente che il codice hash stabile. Codice hash per stringhe identiche possono variare tra le versioni di .NET Framework e su più piattaforme (ad esempio 32 bit e 64 bit) per una singola versione di .NET Framework. In alcuni casi, possono anche differire dal dominio applicazione.  
>   
>  Di conseguenza, hash codici non devono mai essere utilizzati di fuori del dominio applicazione in cui sono stati creati, non deve mai essere utilizzati come campi chiave in una raccolta e non deve essere mantenute.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSortKey">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Globalization.SortKey" /> per una stringa.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Stringa per la quale viene ottenuto un oggetto <see cref="T:System.Globalization.SortKey" />.</param>
        <summary>Ottiene la chiave di ordinamento per la stringa specificata.</summary>
        <returns>Oggetto <see cref="T:System.Globalization.SortKey" /> che contiene la chiave di ordinamento per la stringa specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni carattere in una stringa viene assegnato a varie categorie di ordinamenti, inclusi script, alfabetici, case e diacritici. Una chiave di ordinamento è il repository di questi fattori per una determinata stringa. Ad esempio, una chiave di ordinamento potrebbe contenere una stringa di fattori alfabetici, seguita da una stringa di pesi dei casi e così via. Il <xref:System.Globalization.CompareInfo.GetSortKey%2A> metodo è equivalente al metodo API di Windows `LCMapString` con il flag LCMAP_SORTKEY.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortKey" />
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String, options As CompareOptions) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa per la quale viene ottenuto un oggetto <see cref="T:System.Globalization.SortKey" />.</param>
        <param name="options">Combinazione bit per bit di uno o più dei seguenti valori di enumerazione che definiscono come viene calcolata la chiave di ordinamento: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> e <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Ottiene un oggetto <see cref="T:System.Globalization.SortKey" /> per la stringa specificata usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Oggetto <see cref="T:System.Globalization.SortKey" /> che contiene la chiave di ordinamento per la stringa specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni carattere in una stringa viene assegnato a varie categorie di ordinamenti, inclusi script, alfabetici, case e diacritici. Una chiave di ordinamento è il repository di questi fattori per una determinata stringa. Ad esempio, una chiave di ordinamento potrebbe contenere una stringa di fattori alfabetici, seguita da una stringa di pesi dei casi e così via. Il <xref:System.Globalization.CompareInfo.GetSortKey%2A> metodo è equivalente al metodo API di Windows `LCMapString` con il flag LCMAP_SORTKEY.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <altmember cref="T:System.Globalization.SortKey" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce l'indice in base zero della prima occorrenza di un valore all'interno di una stringa o di una parte di essa.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Carattere da individuare all'interno di <c>source</c>.</param>
        <summary>Cerca il carattere specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intera stringa di origine.</summary>
        <returns>Indice in base zero della prima occorrenza di <paramref name="value" /> all'interno di <paramref name="source" />, se presente; in caso contrario, -1. Restituisce 0 (zero) se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo cerca nella stringa di origine dall'inizio della stringa alla fine della stringa.  
  
 Questo overload esegue una ricerca con distinzione delle impostazioni cultura. Se `value` rappresenta un precomposto carattere Unicode, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a qualsiasi occorrenza dei relativi componenti nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui un carattere viene considerato equivalente a un altro solo se i punti di codice Unicode sono uguali, è necessario chiamare un overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e utilizzare il <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> valore. A differenza di <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>, che esegue un confronto con distinzione delle impostazioni cultura, overload di <xref:System.String.IndexOf%2A?displayProperty=nameWithType> metodo che la ricerca di un carattere di eseguire un confronto ordinale e gli overload che cercano una stringa di eseguono un confronto con distinzione delle impostazioni cultura.  
  
> [!NOTE]
>  Quando possibile, è necessario usare i metodi di confronto tra stringhe che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca con distinzione delle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> metodo restituisce sempre 0 (zero) per indicare che è stata trovata la corrispondenza all'inizio di <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> metodo viene utilizzato per trovare il segno meno (U + 00AD) in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce 0 (zero) per indicare che ha trovato una corrispondenza all'inizio della stringa.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable2.cs#3)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Stringa da individuare all'interno di <c>source</c>.</param>
        <summary>Cerca la sottostringa specificata e restituisce l'indice in base zero della prima occorrenza all'interno dell'intera stringa di origine.</summary>
        <returns>Indice in base zero della prima occorrenza di <paramref name="value" /> all'interno di <paramref name="source" />, se presente; in caso contrario, -1. Restituisce 0 (zero) se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire dall'inizio della stringa e la fine della stringa.  
  
 Questo overload esegue una ricerca con distinzione delle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a qualsiasi occorrenza dei componenti del carattere nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode, è necessario usare uno degli overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e utilizzare il <xref:System.Globalization.CompareOptions.Ordinal> valore.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="value" /> è <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> contiene un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> è composta solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> metodo restituisce sempre 0 (zero) per indicare che è stata trovata la corrispondenza all'inizio di <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> metodo viene utilizzato per individuare le sottostringhe di tre (un segno meno facoltativo (U + 00AD), un segno meno facoltativo seguito da "n" e un segno meno facoltativo seguito da "m") in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In ogni caso, poiché il segno meno facoltativo è un carattere ignorabile, il risultato è lo stesso come se il segno meno non era state incluse <paramref name="value" />. Quando si cerca solo un segno, il metodo restituisce 0 (zero) per indicare che ha trovato una corrispondenza all'inizio della stringa.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable1.cs#2)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Carattere da individuare all'interno di <c>source</c>.</param>
        <param name="options">Valore che definisce la modalità di confronto delle stringhe. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Cerca il carattere specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intera stringa di origine usando il valore <see cref="T:System.Globalization.CompareOptions" />.</summary>
        <returns>Indice in base zero della prima occorrenza di <paramref name="value" /> se presente, all'interno di <paramref name="source" /> usando le opzioni di confronto specificate; in caso contrario, -1. Restituisce 0 (zero) se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire dall'inizio della stringa e la fine della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca con distinzione delle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca ordinale (senza distinzione delle impostazioni cultura). Un carattere viene considerato equivalente a un altro solo se i valori Unicode sono uguali. Esegue l'overload di <xref:System.String.IndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca con distinzione delle impostazioni cultura.  
  
> [!NOTE]
>  Quando possibile, è necessario usare i metodi di confronto tra stringhe che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca con distinzione delle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> metodo restituisce sempre 0 (zero) per indicare che è stata trovata la corrispondenza all'inizio di <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> metodo viene utilizzato per cercare un segno meno facoltativo (U + 00AD) in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, una ricerca con distinzione delle impostazioni cultura restituisce 0 (zero) per indicare che ha trovato una corrispondenza all'inizio della stringa. Una ricerca ordinale, tuttavia, consente di trovare il segno meno facoltativo in una stringa e segnala che è assente correttamente dalla seconda stringa.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable3.cs#4)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Carattere da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca.</param>
        <summary>Cerca il carattere specificato e restituisce l'indice in base zero della prima occorrenza all'interno della sezione della stringa di origine compresa tra l'indice specificato e la fine della stringa.</summary>
        <returns>Indice in base zero della prima occorrenza di <paramref name="value" /> se presente, all'interno della sezione di <paramref name="source" /> compresa tra <paramref name="startIndex" /> e la fine di <paramref name="source" />; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire da `startIndex` e la fine della stringa.  
  
 Questo overload esegue una ricerca con distinzione delle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in un carattere viene considerato equivalente a un altro carattere solo se i valori Unicode sono uguali, è necessario chiamare uno degli overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e utilizzare il <xref:System.Globalization.CompareOptions.Ordinal> valore. Esegue l'overload di <xref:System.String.IndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca con distinzione delle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca con distinzione delle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> metodo viene utilizzato per trovare un segno meno facoltativo (U + 00AD) dopo una "n" in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce 1 per indicare che ha trovato una corrispondenza in corrispondenza della posizione di "n".  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable4.cs#5)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Stringa da individuare all'interno di <c>source</c>.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>source</c> e <c>value</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Cerca la sottostringa specificata e restituisce l'indice in base zero della prima occorrenza all'interno dell'intera stringa di origine usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Indice in base zero della prima occorrenza di <paramref name="value" /> se presente, all'interno di <paramref name="source" /> usando le opzioni di confronto specificate; in caso contrario, -1. Restituisce 0 (zero) se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire dall'inizio della stringa e la fine della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca con distinzione delle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a qualsiasi occorrenza dei componenti del carattere nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload consente di eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="value" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca dipendente dalle impostazioni cultura (ovvero se <paramref name="options" /> non è <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), se <paramref name="value" /> contiene un carattere ignorable, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> è composta solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> metodo restituisce sempre 0 (zero) per indicare che è stata trovata la corrispondenza all'inizio di <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> metodo viene utilizzato per individuare le sottostringhe di tre (un segno meno facoltativo (U + 00AD), un segno meno facoltativo seguito da "n" e un segno meno facoltativo seguito da "m") in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. Poiché il segno meno facoltativo è un carattere ignorabile, una ricerca con distinzione delle impostazioni cultura restituisce lo stesso valore che verrebbe restituito se il segno meno non incluse nella stringa di ricerca. Una ricerca ordinale, tuttavia, consente di trovare il segno meno facoltativo in una stringa e segnala che è assente correttamente dalla seconda stringa.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable5.cs#6)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Stringa da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca.</param>
        <summary>Cerca la sottostringa specificata e restituisce l'indice in base zero della prima occorrenza all'interno della sezione della stringa di origine compresa tra l'indice specificato e la fine della stringa.</summary>
        <returns>Indice in base zero della prima occorrenza di <paramref name="value" /> se presente, all'interno della sezione di <paramref name="source" /> compresa tra <paramref name="startIndex" /> e la fine di <paramref name="source" />; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire da `startIndex` e la fine della stringa.  
  
 Questo overload esegue una ricerca con distinzione delle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a qualsiasi occorrenza dei componenti del carattere nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode, è necessario chiamare uno degli overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e utilizzare il <xref:System.Globalization.CompareOptions.Ordinal> valore.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="value" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> contiene un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> è composta solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  
  
 Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguita da una "m" in due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno meno facoltativo, ma l'indice di "m".  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable13.cs#14)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable13.vb#14)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Carattere da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>source</c> e <c>value</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Cerca il carattere specificato e restituisce l'indice in base zero della prima occorrenza all'interno della sezione della stringa di origine che si estende dall'indice specificato alla fine della stringa usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Indice in base zero della prima occorrenza di <paramref name="value" />, se presente, all'interno della sezione di <paramref name="source" /> compresa tra <paramref name="startIndex" /> e la fine di <paramref name="source" />, usando le opzioni di confronto specificate; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire da `startIndex` e la fine della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca con distinzione delle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca ordinale (senza distinzione delle impostazioni cultura). Un carattere viene considerato equivalente a un altro solo se i valori Unicode sono uguali. Esegue l'overload di <xref:System.String.IndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca con distinzione delle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca con distinzione delle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, la posizione del carattere in corrispondenza del quale ha iniziato la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare il segno meno (U + 00AD) dopo una "n" in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, una ricerca con distinzione delle impostazioni cultura restituisce 1 per indicare che ha trovato una corrispondenza in corrispondenza della posizione di "n". Una ricerca ordinale, tuttavia, consente di trovare il segno meno facoltativo in una stringa e segnala che è assente correttamente dalla seconda stringa.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable7.cs#8)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Carattere da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca.</param>
        <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
        <summary>Cerca il carattere specificato e restituisce l'indice in base zero della prima occorrenza all'interno della sezione della stringa di origine che inizia dall'indice specificato e contiene il numero specificato di elementi.</summary>
        <returns>Indice in base zero della prima occorrenza di <paramref name="value" /> se presente, all'interno della sezione di <paramref name="source" /> che inizia da <paramref name="startIndex" /> e contiene il numero di elementi specificato da <paramref name="count" />; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire da `startIndex` e fine `startIndex`  +  `count` - 1.  
  
 Questo overload esegue una ricerca con distinzione delle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in un carattere viene considerato equivalente a un altro carattere solo se i valori Unicode sono uguali, è necessario chiamare uno degli overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e utilizzare il <xref:System.Globalization.CompareOptions.Ordinal> valore. Esegue l'overload di <xref:System.String.IndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca con distinzione delle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.  
  
 oppure  
  
 <paramref name="count" /> è minore di zero.  
  
 oppure  
  
 <paramref name="startIndex" /> e <paramref name="count" /> non specificano una sezione valida in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca con distinzione delle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale ha iniziato la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> metodo viene utilizzato per trovare un segno meno facoltativo (U + 00AD) dopo una "n" in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce 1 per indicare che ha trovato una corrispondenza in corrispondenza della posizione di "n".  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable8.cs#9)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Stringa da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>source</c> e <c>value</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Cerca la sottostringa specificata e restituisce l'indice in base zero della prima occorrenza all'interno della sezione della stringa di origine compresa tra l'indice specificato e la fine della stringa, usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Indice in base zero della prima occorrenza di <paramref name="value" />, se presente, all'interno della sezione di <paramref name="source" /> compresa tra <paramref name="startIndex" /> e la fine di <paramref name="source" />, usando le opzioni di confronto specificate; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire da `startIndex` e la fine della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca con distinzione delle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a qualsiasi occorrenza dei componenti del carattere nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload consente di eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="value" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca dipendente dalle impostazioni cultura (ovvero se <paramref name="options" /> non è <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), se <paramref name="value" /> contiene un carattere ignorable, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> è composta solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  
  
 Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguita da una "m" a partire dalla posizione del carattere terzo in due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa quando viene eseguito un confronto dipendente dalle impostazioni cultura. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno meno facoltativo, ma l'indice di "m". Il metodo restituisce l'indice del segno meno facoltativo nella prima stringa solo quando esegue un confronto ordinale.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable14.cs#15)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Stringa da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca.</param>
        <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
        <summary>Cerca la sottostringa specificata e restituisce l'indice in base zero della prima occorrenza all'interno della sezione della stringa di origine che inizia dall'indice specificato e contiene il numero specificato di elementi.</summary>
        <returns>Indice in base zero della prima occorrenza di <paramref name="value" /> se presente, all'interno della sezione di <paramref name="source" /> che inizia da <paramref name="startIndex" /> e contiene il numero di elementi specificato da <paramref name="count" />; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire da `startIndex` e fine `startIndex`  +  `count` - 1.  
  
 Questo overload esegue una ricerca con distinzione delle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a qualsiasi occorrenza dei componenti del carattere nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode, è necessario chiamare uno degli overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e utilizzare il <xref:System.Globalization.CompareOptions.Ordinal> valore.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="value" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.  
  
 oppure  
  
 <paramref name="count" /> è minore di zero.  
  
 oppure  
  
 <paramref name="startIndex" /> e <paramref name="count" /> non specificano una sezione valida in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> contiene un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> è composta solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  
  
 Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguita da una "m" a partire dal terzo sesto posizioni dei caratteri in due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa quando viene eseguito un confronto dipendente dalle impostazioni cultura. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno meno facoltativo, ma l'indice di "m".  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable16.cs#17)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Carattere da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca.</param>
        <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>source</c> e <c>value</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Cerca il carattere specificato e restituisce l'indice in base zero della prima occorrenza all'interno della sezione della stringa di origine, che inizia dall'indice specificato e contiene il numero specificato di elementi, usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Indice in base zero della prima occorrenza di <paramref name="value" /> se presente, all'interno della sezione di <paramref name="source" /> che inizia da <paramref name="startIndex" /> e contiene il numero di elementi specificato da <paramref name="count" />, usando le opzioni di confronto specificate; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire da `startIndex` e fine `startIndex`  +  `count` - 1.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca con distinzione delle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca ordinale (senza distinzione delle impostazioni cultura). Un carattere viene considerato equivalente a un altro solo se i valori Unicode sono uguali. Esegue l'overload di <xref:System.String.IndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca con distinzione delle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.  
  
 oppure  
  
 <paramref name="count" /> è minore di zero.  
  
 oppure  
  
 <paramref name="startIndex" /> e <paramref name="count" /> non specificano una sezione valida in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca con distinzione delle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale ha iniziato la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare il segno meno (U + 00AD) dopo una "n" in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, una ricerca con distinzione delle impostazioni cultura restituisce 1 per indicare che ha trovato una corrispondenza in corrispondenza della posizione di "n". Una ricerca ordinale, tuttavia, consente di trovare il segno meno facoltativo in una stringa e segnala che è assente correttamente dalla seconda stringa.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable11.cs#12)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Stringa da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca.</param>
        <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>source</c> e <c>value</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Cerca la sottostringa specificata e restituisce l'indice in base zero della prima occorrenza all'interno della sezione della stringa di origine, che inizia dall'indice specificato e contiene il numero specificato di elementi, usando il valore <see cref="T:System.Globalization.CompareOptions" />.</summary>
        <returns>Indice in base zero della prima occorrenza di <paramref name="value" /> se presente, all'interno della sezione di <paramref name="source" /> che inizia da <paramref name="startIndex" /> e contiene il numero di elementi specificato da <paramref name="count" />, usando le opzioni di confronto specificate; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire da `startIndex` e fine `startIndex`  +  `count` - 1.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca con distinzione delle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a qualsiasi occorrenza dei componenti del carattere nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload consente di eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="value" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.  
  
 oppure  
  
 <paramref name="count" /> è minore di zero.  
  
 oppure  
  
 <paramref name="startIndex" /> e <paramref name="count" /> non specificano una sezione valida in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca dipendente dalle impostazioni cultura (ovvero se <paramref name="options" /> non è <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), se <paramref name="value" /> contiene un carattere ignorable, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> è composta solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  
  
 Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguita da una "m" a partire dal terzo sesto posizioni dei caratteri in due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa quando viene eseguito un confronto dipendente dalle impostazioni cultura. Quando esegue un confronto ordinale, tuttavia, trova la sottostringa solo nella prima stringa. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno, ma l'indice di "m" quando si esegue un confronto con distinzione delle impostazioni cultura. Il metodo restituisce l'indice del segno meno facoltativo nella prima stringa solo quando esegue un confronto ordinale.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable15.cs#16)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPrefix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se una stringa inizia con un prefisso specifico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="prefix">Stringa da confrontare con l'inizio di <c>source</c>.</param>
        <summary>Determina se la stringa di origine specificata inizia con il prefisso specificato.</summary>
        <returns>
          <see langword="true" /> se la lunghezza di <paramref name="prefix" /> è minore o uguale alla lunghezza di <paramref name="source" /> e se <paramref name="source" /> inizia con <paramref name="prefix" />. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni stringa inizia e termina con una sottostringa vuota (""); Pertanto, se `prefix` è una stringa vuota, questo metodo restituisce `true`.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina se una stringa è il prefisso o suffisso di un'altra stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="prefix" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="prefix">Stringa da confrontare con l'inizio di <c>source</c>.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>source</c> e <c>prefix</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Determina se la stringa di origine specificata inizia con il prefisso specificato usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>
          <see langword="true" /> se la lunghezza di <paramref name="prefix" /> è minore o uguale alla lunghezza di <paramref name="source" /> e se <paramref name="source" /> inizia con <paramref name="prefix" />. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni stringa inizia e termina con una sottostringa vuota (""); Pertanto, se `prefix` è una stringa vuota, questo metodo restituisce `true`.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina se una stringa è il prefisso o suffisso di un'altra stringa mediante <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="prefix" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSortable">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indica se una stringa o un carattere Unicode specificato è ordinabile.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (ch As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(char ch);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Carattere Unicode.</param>
        <summary>Indica se un carattere Unicode specificato è ordinabile.</summary>
        <returns>
          <see langword="true" /> se il parametro <paramref name="ch" /> è ordinabile; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `ch` parametro è ordinabile se è un carattere Unicode è definito in un interno <xref:System.Globalization.CompareInfo> classe tabella di ordinamento e non è un uso privato o un carattere surrogato alto o basso non abbinati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Stringa di zero o più caratteri Unicode.</param>
        <summary>Indica se una stringa Unicode specificata è ordinabile.</summary>
        <returns>
          <see langword="true" /> se il parametro <paramref name="str" /> non è una stringa vuota ("") e tutti i caratteri Unicode in <paramref name="str" /> sono ordinabili; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni carattere Unicode di `str` parametro è rappresentato da uno o con codifica UTF-16 ulteriori <xref:System.Char> oggetti. Il `str` parametro è ordinabile se ogni carattere Unicode è definito in un interno <xref:System.Globalization.CompareInfo> classe tabella di ordinamento e non è un uso privato o un carattere surrogato alto o basso non abbinati.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSuffix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se una stringa termina con un suffisso specifico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="suffix">Stringa da confrontare con la fine di <c>source</c>.</param>
        <summary>Determina se la stringa di origine specificata termina con il suffisso specificato.</summary>
        <returns>
          <see langword="true" /> se la lunghezza di <paramref name="suffix" /> è minore o uguale alla lunghezza di <paramref name="source" /> e se <paramref name="source" /> termina con <paramref name="suffix" />. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni stringa inizia e termina con una sottostringa vuota (""); Pertanto, se `suffix` è una stringa vuota, questo metodo restituisce `true`.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina se una stringa è il prefisso o suffisso di un'altra stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="suffix" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="suffix">Stringa da confrontare con la fine di <c>source</c>.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>source</c> e <c>suffix</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> usato da solo o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Determina se la stringa di origine specificata termina con il suffisso specificato usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>
          <see langword="true" /> se la lunghezza di <paramref name="suffix" /> è minore o uguale alla lunghezza di <paramref name="source" /> e se <paramref name="source" /> termina con <paramref name="suffix" />. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni stringa inizia e termina con una sottostringa vuota (""); Pertanto, se `suffix` è una stringa vuota, questo metodo restituisce `true`.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina se una stringa è il prefisso o suffisso di un'altra stringa mediante <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="suffix" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce l'indice in base zero dell'ultima occorrenza di un valore all'interno di una stringa o di una parte di essa.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Carattere da individuare all'interno di <c>source</c>.</param>
        <summary>Cerca il carattere specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intera stringa di origine.</summary>
        <returns>Indice in base zero dell'ultima occorrenza di <paramref name="value" /> all'interno di <paramref name="source" />, se presente; in caso contrario, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca all'indietro a partire dalla fine della stringa e termina all'inizio della stringa.  
  
 Questo overload esegue una ricerca con distinzione delle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in un carattere viene considerato equivalente a un altro carattere solo se i valori Unicode sono uguali, è necessario chiamare uno degli overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e utilizzare il <xref:System.Globalization.CompareOptions.Ordinal> valore. Esegue l'overload di <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca con distinzione delle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca con distinzione delle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> metodo restituisce sempre l'ultima posizione di indice in <paramref name="source" /> per indicare che è stata trovata la corrispondenza alla fine di <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> metodo viene utilizzato per trovare il segno meno (U + 00AD) in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'ultima posizione dell'indice nella stringa per indicare che ha trovato una corrispondenza alla fine della stringa.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable2.cs#3)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Stringa da individuare all'interno di <c>source</c>.</param>
        <summary>Cerca la sottostringa specificata e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intera stringa di origine.</summary>
        <returns>Indice in base zero dell'ultima occorrenza di <paramref name="value" /> all'interno di <paramref name="source" />, se presente; in caso contrario, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca all'indietro a partire dalla fine della stringa e termina all'inizio della stringa.  
  
 Questo overload esegue una ricerca con distinzione delle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a qualsiasi occorrenza dei componenti del carattere nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode, è necessario chiamare uno degli overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e utilizzare il <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> valore.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="value" /> è <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> contiene un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> è composta solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> metodo restituisce sempre <paramref name="source" />.<see cref="P:System.String.Length" /> -1, che rappresenta l'ultima posizione di indice in <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> metodo viene utilizzato per individuare le sottostringhe di tre (un segno meno facoltativo (U + 00AD), un segno meno facoltativo seguito da "n" e un segno meno facoltativo seguito da "m") in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In ogni caso, poiché il segno meno facoltativo è un carattere ignorabile, il risultato è lo stesso come se il segno meno non era state incluse <paramref name="value" />. Quando si cerca solo un segno, il metodo restituisce 6 e 5. Questi valori corrispondono all'indice dell'ultimo carattere nelle due stringhe.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable1.cs#2)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Carattere da individuare all'interno di <c>source</c>.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>source</c> e <c>value</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Cerca il carattere specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intera stringa di origine usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Indice in base zero dell'ultima occorrenza di <paramref name="value" /> se presente, all'interno di <paramref name="source" /> usando le opzioni di confronto specificate; in caso contrario, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca all'indietro a partire dalla fine della stringa e termina all'inizio della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca con distinzione delle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca ordinale (senza distinzione delle impostazioni cultura). Un carattere viene considerato equivalente a un altro solo se i valori Unicode sono uguali. Esegue l'overload di <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca con distinzione delle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca con distinzione delle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> metodo restituisce sempre l'ultima posizione di carattere in <paramref name="source" /> per indicare che è stata trovata la corrispondenza alla fine di <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> metodo viene utilizzato per cercare un segno meno facoltativo (U + 00AD) in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, una ricerca con distinzione delle impostazioni cultura restituisce l'ultima posizione dell'indice nella stringa di origine. Al contrario, una ricerca ordinale trova il segno meno facoltativo in una stringa e correttamente segnala che è assente dalla seconda stringa.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable3.cs#4)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Carattere da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
        <summary>Cerca il carattere specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno della sezione della stringa di origine compresa tra l'inizio della stringa e l'indice specificato.</summary>
        <returns>Indice in base zero dell'ultima occorrenza di <paramref name="value" />, se presente, all'interno della sezione di <paramref name="source" /> compresa tra l'inizio di <paramref name="source" /> e <paramref name="startIndex" />; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` fino all'inizio della stringa.  
  
 Questo overload esegue una ricerca con distinzione delle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in un carattere viene considerato equivalente a un altro carattere solo se i valori Unicode sono uguali, è necessario chiamare uno degli overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e utilizzare il <xref:System.Globalization.CompareOptions.Ordinal> valore. Esegue l'overload di <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca con distinzione delle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca con distinzione delle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> metodo viene utilizzato per trovare un segno meno facoltativo (U + 00AD) che precede l'elemento finale "m" in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce la posizione di indice di "m", che corrisponde al valore di <paramref name="startIndex" />.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable4.cs#5)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Stringa da individuare all'interno di <c>source</c>.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>source</c> e <c>value</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Cerca la sottostringa specificata e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intera stringa di origine usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Indice in base zero dell'ultima occorrenza di <paramref name="value" /> se presente, all'interno di <paramref name="source" /> usando le opzioni di confronto specificate; in caso contrario, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca all'indietro a partire dalla fine della stringa e termina all'inizio della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca con distinzione delle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a qualsiasi occorrenza dei componenti del carattere nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload consente di eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="value" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca dipendente dalle impostazioni cultura (ovvero se <paramref name="options" /> non è <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), se <paramref name="value" /> contiene un carattere ignorable, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> è composta solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="source" />.<see cref="P:System.String.Length" /> -1, che rappresenta l'ultima posizione di indice in <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> metodo viene utilizzato per individuare le sottostringhe di tre (un segno meno facoltativo (U + 00AD), un segno meno facoltativo seguito da "n" e un segno meno facoltativo seguito da "m") in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. Poiché il segno meno facoltativo è un carattere ignorabile, una ricerca con distinzione delle impostazioni cultura restituisce lo stesso valore che verrebbe restituito se il segno meno non incluse nella stringa di ricerca. Una ricerca ordinale, tuttavia, consente di trovare il segno meno facoltativo in una stringa e segnala che è assente correttamente dalla seconda stringa.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable5.cs#6)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Stringa da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
        <summary>Cerca la sottostringa specificata e restituisce l'indice in base zero dell'ultima occorrenza all'interno della sezione della stringa di origine compresa tra l'inizio della stringa e l'indice specificato.</summary>
        <returns>Indice in base zero dell'ultima occorrenza di <paramref name="value" />, se presente, all'interno della sezione di <paramref name="source" /> compresa tra l'inizio di <paramref name="source" /> e <paramref name="startIndex" />; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` fino all'inizio della stringa.  
  
 Questo overload esegue una ricerca con distinzione delle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a qualsiasi occorrenza dei componenti del carattere nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode, è necessario chiamare uno degli overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e utilizzare il <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> valore.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="value" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> contiene un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> è composta solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> metodo viene utilizzato per trovare una sottostringa che include un segno meno facoltativo (U + 00AD) e che precede o che include la "m" finale in una stringa. Perché viene ignorato il segno meno facoltativo nella stringa di ricerca, la chiamata al metodo per trovare una sottostringa che include il segno meno facoltativo e "m" restituisce la posizione di "m" nella stringa, mentre questo viene chiamato per trovare una sottostringa che include il segno meno e "n" restituisce la  posizione di "n". Quando la stringa di ricerca contiene solo il segno, il metodo restituisce l'indice di "m", che rappresenta il valore di <paramref name="startIndex" />.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable6.cs#7)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable6.vb#7)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Carattere da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>source</c> e <c>value</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Cerca il carattere specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno della sezione della stringa di origine compresa tra l'inizio della stringa e l'indice specificato, usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Indice in base zero dell'ultima occorrenza di <paramref name="value" />, se presente, all'interno della sezione di <paramref name="source" /> compresa tra l'inizio di <paramref name="source" /> e <paramref name="startIndex" />, usando le opzioni di confronto specificate; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` fino all'inizio della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca con distinzione delle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca ordinale (senza distinzione delle impostazioni cultura). Un carattere viene considerato equivalente a un altro solo se i valori Unicode sono uguali. Esegue l'overload di <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca con distinzione delle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca con distinzione delle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare un segno meno facoltativo (U + 00AD) che precede l'elemento finale "m" in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, una ricerca con distinzione delle impostazioni cultura restituisce la posizione di indice di "m". Una ricerca ordinale, tuttavia, consente di trovare il segno meno facoltativo in una stringa e segnala che è assente correttamente dalla seconda stringa.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable7.cs#8)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Carattere da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
        <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
        <summary>Cerca il carattere specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno della sezione della stringa di origine che contiene il numero specificato di elementi e termina in corrispondenza dell'indice specificato.</summary>
        <returns>Indice in base zero dell'ultima occorrenza di <paramref name="value" />, se presente, all'interno della sezione di <paramref name="source" /> che contiene il numero di elementi specificato da <paramref name="count" /> e che termina in corrispondenza di <paramref name="startIndex" />; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` e fine `startIndex`  -  `count` + 1.  
  
 Questo overload esegue una ricerca con distinzione delle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in un carattere viene considerato equivalente a un altro carattere solo se i valori Unicode sono uguali, è necessario chiamare uno degli overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e utilizzare il <xref:System.Globalization.CompareOptions.Ordinal> valore. Esegue l'overload di <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca con distinzione delle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.  
  
 oppure  
  
 <paramref name="count" /> è minore di zero.  
  
 oppure  
  
 <paramref name="startIndex" /> e <paramref name="count" /> non specificano una sezione valida in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca con distinzione delle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> metodo viene utilizzato per trovare un segno meno facoltativo (U + 00AD) che precede l'elemento finale "m" in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce la posizione di indice di "m", che corrisponde al valore di <paramref name="startIndex" />.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable8.cs#9)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Stringa da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>source</c> e <c>value</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Cerca la sottostringa specificata e restituisce l'indice in base zero dell'ultima occorrenza nella sezione della stringa di origine compresa tra l'inizio della stringa e l'indice specificato, usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Indice in base zero dell'ultima occorrenza di <paramref name="value" />, se presente, all'interno della sezione di <paramref name="source" /> compresa tra l'inizio di <paramref name="source" /> e <paramref name="startIndex" />, usando le opzioni di confronto specificate; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` fino all'inizio della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca con distinzione delle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a qualsiasi occorrenza dei componenti del carattere nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload consente di eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="value" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca dipendente dalle impostazioni cultura (ovvero se <paramref name="options" /> non è <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), se <paramref name="value" /> contiene un carattere ignorable, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> è composta solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  
  
 Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguita da una "m", a partire da "m" finale in due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa quando viene eseguito un confronto dipendente dalle impostazioni cultura. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno meno facoltativo, ma l'indice di "m". Il metodo restituisce l'indice del segno meno facoltativo nella prima stringa solo quando esegue un confronto ordinale.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable14.cs#15)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Stringa da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
        <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
        <summary>Cerca la sottostringa specificata e restituisce l'indice in base zero dell'ultima occorrenza all'interno della sezione della stringa di origine che contiene il numero specificato di elementi e termina in corrispondenza dell'indice specificato.</summary>
        <returns>Indice in base zero dell'ultima occorrenza di <paramref name="value" />, se presente, all'interno della sezione di <paramref name="source" /> che contiene il numero di elementi specificato da <paramref name="count" /> e che termina in corrispondenza di <paramref name="startIndex" />; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` e fine `startIndex`  -  `count` + 1.  
  
 Questo overload esegue una ricerca con distinzione delle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a qualsiasi occorrenza dei componenti del carattere nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode, è necessario chiamare uno degli overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e utilizzare il <xref:System.Globalization.CompareOptions.Ordinal> valore.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="value" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.  
  
 oppure  
  
 <paramref name="count" /> è minore di zero.  
  
 oppure  
  
 <paramref name="startIndex" /> e <paramref name="count" /> non specificano una sezione valida in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> contiene un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> è composta solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  
  
 Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguita da una "m" nei tre caratteri che precedono l'elemento finale "m" di due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa quando viene eseguito un confronto dipendente dalle impostazioni cultura. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno meno facoltativo, ma l'indice di "m".  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable16.cs#17)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Carattere da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
        <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>source</c> e <c>value</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Cerca il carattere specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno della sezione della stringa di origine che contiene il numero specificato di elementi e termina in corrispondenza dell'indice specificato, usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Indice in base zero dell'ultima occorrenza di <paramref name="value" />, se presente, all'interno della sezione di <paramref name="source" /> che contiene il numero di elementi specificato da <paramref name="count" /> e termina in corrispondenza di <paramref name="startIndex" />, usando le opzioni di confronto specificate; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` e fine `startIndex`  -  `count` + 1.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca con distinzione delle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca ordinale (senza distinzione delle impostazioni cultura). Un carattere viene considerato equivalente a un altro solo se i valori Unicode sono uguali. Esegue l'overload di <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca con distinzione delle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.  
  
 oppure  
  
 <paramref name="count" /> è minore di zero.  
  
 oppure  
  
 <paramref name="startIndex" /> e <paramref name="count" /> non specificano una sezione valida in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca con distinzione delle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare un segno meno facoltativo (U + 00AD) che precede l'elemento finale "m" in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, una ricerca con distinzione delle impostazioni cultura restituisce la posizione di indice di "m", che corrisponde al valore di <paramref name="startIndex" />. Una ricerca ordinale, tuttavia, consente di trovare il segno meno facoltativo in una stringa e segnala che è assente correttamente dalla seconda stringa.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable11.cs#12)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">Stringa in cui effettuare la ricerca.</param>
        <param name="value">Stringa da individuare all'interno di <c>source</c>.</param>
        <param name="startIndex">Indice iniziale in base zero della ricerca all'indietro.</param>
        <param name="count">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
        <param name="options">Valore che definisce la modalità di confronto di <c>source</c> e <c>value</c>. <c>options</c> è il valore di enumerazione <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o la combinazione bit per bit di uno o più dei valori seguenti: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> e <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Cerca la sottostringa specificata e restituisce l'indice in base zero dell'ultima occorrenza all'interno della sezione della stringa di origine che contiene il numero specificato di elementi e termina in corrispondenza dell'indice specificato, usando il valore <see cref="T:System.Globalization.CompareOptions" /> specificato.</summary>
        <returns>Indice in base zero dell'ultima occorrenza di <paramref name="value" />, se presente, all'interno della sezione di <paramref name="source" /> che contiene il numero di elementi specificato da <paramref name="count" /> e termina in corrispondenza di <paramref name="startIndex" />, usando le opzioni di confronto specificate; in caso contrario, -1. Restituisce <paramref name="startIndex" /> se <paramref name="value" /> è un carattere che è possibile ignorare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` e fine `startIndex`  -  `count` + 1.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non è valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca con distinzione delle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a qualsiasi occorrenza dei componenti del carattere nella sequenza corretta, ad esempio "AE" (U + 0041, U + 0045), in base alle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload consente di eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per confrontare le stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici di prima e ultima occorrenza di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="value" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> non è compreso nell'intervallo di indici validi per <paramref name="source" />.  
  
 oppure  
  
 <paramref name="count" /> è minore di zero.  
  
 oppure  
  
 <paramref name="startIndex" /> e <paramref name="count" /> non specificano una sezione valida in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contiene un valore di <see cref="T:System.Globalization.CompareOptions" /> non valido.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati quando si esegue un ordinamento linguistico o dipendente dalla lingua. In una ricerca dipendente dalle impostazioni cultura (ovvero se <paramref name="options" /> non è <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), se <paramref name="value" /> contiene un carattere ignorable, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> è composta solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  
  
 Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguito da una "m" in tutti, ma la posizione del primo carattere prima di "m" finale in due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa quando viene eseguito un confronto dipendente dalle impostazioni cultura. Quando esegue un confronto ordinale, tuttavia, trova la sottostringa solo nella prima stringa. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno, ma l'indice di "m" quando si esegue un confronto con distinzione delle impostazioni cultura. Il metodo restituisce l'indice del segno meno facoltativo nella prima stringa solo quando esegue un confronto ordinale.  
  
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'identificatore di impostazioni cultura corretto per la classe <see cref="T:System.Globalization.CompareInfo" /> corrente.</summary>
        <value>Identificatore di impostazioni cultura corretto per la classe <see cref="T:System.Globalization.CompareInfo" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.Globalization.CompareInfo.LCID%2A> proprietà.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome delle impostazioni cultura usate per le operazioni di ordinamento dall'oggetto <see cref="T:System.Globalization.CompareInfo" /> corrente.</summary>
        <value>Nome di impostazioni cultura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Globalization.CompareInfo.Name%2A> e <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> le proprietà possono avere valori diversi. Ad esempio, un <xref:System.Globalization.CompareInfo.LCID%2A> valore della proprietà di esadecimale 0x10407 identifica una lingua di ordinamento alternativo che ordina i nomi come appaiono in un elenco telefonico tedesco. Il <xref:System.Globalization.CompareInfo.Name%2A> proprietà ha un valore di "de-de phoneb", mentre il <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> proprietà delle impostazioni cultura associate tedesco (Germania) ha un valore "de-DE".  
  
   
  
## Examples  
 L'esempio seguente confronta tre stringhe utilizzando le impostazioni cultura fr-FR e ja-JP. Il <xref:System.Globalization.CultureInfo.Name%2A> proprietà viene utilizzata per visualizzare il nome di ogni lingua.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Oggetto che ha avviato il callback.</param>
        <summary>Viene eseguito dopo la deserializzazione dell'intero grafico di oggetti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita dell'interfaccia un membro che può essere utilizzata solo quando l'oggetto corrente <xref:System.Globalization.CompareInfo> cast dell'oggetto a un <xref:System.Runtime.Serialization.IDeserializationCallback> interfaccia. Per altre informazioni, vedere il metodo <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce una stringa che rappresenta l'oggetto <see cref="T:System.Globalization.CompareInfo" /> corrente.</summary>
        <returns>Stringa che rappresenta l'oggetto <see cref="T:System.Globalization.CompareInfo" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue l'override di <xref:System.Object.ToString%2A?displayProperty=nameWithType> metodo. Restituisce una stringa che include il nome della classe e il valore dell'istanza <xref:System.Globalization.CompareInfo.Name%2A> proprietà, separati da un trattino.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>A partire da .NET Framework 4, il metodo <see cref="M:System.Globalization.CompareInfo.ToString" /> restituisce il nome della classe seguito da uno spazio, un trattino e da uno spazio e dal valore della proprietà <see cref="P:System.Globalization.CompareInfo.Name" />. Ad esempio, per un oggetto <see cref="T:System.Globalization.CompareInfo" /> che rappresenta le impostazioni cultura en-US, il metodo <see cref="M:System.Globalization.CompareInfo.ToString" /> restituisce "CompareInfo - en-US". Nelle versioni precedenti di .NET Framework, restituisce il nome della classe seguito da uno spazio, un trattino e da uno spazio e dal valore della proprietà <see cref="P:System.Globalization.CompareInfo.LCID" />. Ad esempio, per un oggetto <see cref="T:System.Globalization.CompareInfo" /> che rappresenta le impostazioni cultura en-US, il metodo <see cref="M:System.Globalization.CompareInfo.ToString" /> restituisce "CompareInfo - 1033".</para>
        </block>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public System.Globalization.SortVersion Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.SortVersion Version" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As SortVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::SortVersion ^ Version { System::Globalization::SortVersion ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.SortVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene le informazioni sulla versione Unicode usata per il confronto e l'ordinamento delle stringhe.</summary>
        <value>Oggetto che contiene informazioni sulla versione Unicode usata per il confronto e l'ordinamento delle stringhe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il peso di singoli caratteri e pertanto il modo in cui sono confrontate o ordinate, stringhe specifiche dipende dalla versione della specifica Unicode che implementa una particolare versione di .NET Framework. In [!INCLUDE[net_v45](~/includes/net-v45-md.md)], questo dipende inoltre dal sistema operativo dell'host, come illustrato nella tabella seguente. Si noti che l'elenco delle versioni supportate da Unicode si applica soltanto al confronto dei caratteri e all'ordinamento alfabetico; non si applica alla classificazione di caratteri Unicode in base alla categoria.  
  
|Versione di .NET Framework|Sistema operativo|Versione Unicode|  
|----------------------------|----------------------|---------------------|  
|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|Tutti i sistemi operativi|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] e versioni successive|[!INCLUDE[win7](~/includes/win7-md.md)]|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] e versioni successive|[!INCLUDE[win8](~/includes/win8-md.md)] e versioni successive del sistema operativo Windows|Unicode 6.3|  
  
 L'oggetto <xref:System.Globalization.SortVersion> restituito dalla proprietà <xref:System.Globalization.CompareInfo.Version%2A> non identifica l'esatta versione Unicode utilizzata per confrontare le stringhe. È utile solo quando si confrontano due oggetti <xref:System.Globalization.SortVersion> per determinare se utilizzano la stessa versione Unicode e le stesse impostazioni cultura per confrontare le stringhe. Per ulteriori informazioni e un esempio, consultare la pagina di riferimento <xref:System.Globalization.SortVersion>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortVersion" />
      </Docs>
    </Member>
  </Members>
</Type>