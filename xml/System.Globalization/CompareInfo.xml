<Type Name="CompareInfo" FullName="System.Globalization.CompareInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0d150c7756aece4a724e93be5298222625bc06fc" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36487846" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompareInfo : System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompareInfo extends System.Object implements class System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CompareInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CompareInfo&#xA;Implements IDeserializationCallback" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompareInfo : System::Runtime::Serialization::IDeserializationCallback" />
  <TypeSignature Language="F#" Value="type CompareInfo = class&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implements a set of methods for culture-sensitive string comparisons.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le convenzioni per il confronto e l'ordinamento dei dati variano in base alle impostazioni cultura. L'ordinamento può, ad esempio, essere basato sulla fonetica o sulla rappresentazione visiva dei caratteri. In lingue dell'Asia orientale, caratteri sono ordinati per il tratto e radicale di ideogrammi. L'ordinamento dipende inoltre le lingue di ordine e le impostazioni cultura per alcuna lettera dell'alfabeto. Nella lingua danese, ad esempio, è presente un carattere "Æ" che viene ordinato alfabeticamente dopo la lettera Z. Inoltre, nei confronti può essere o meno applicata la distinzione tra maiuscole e minuscole. Le regole relative all'utilizzo di maiuscole e minuscole possono anche differire in base alle impostazioni cultura. La classe <xref:System.Globalization.CompareInfo> è responsabile della gestione dei dati di confronto delle stringhe dipendenti dalle impostazioni cultura e dell'esecuzione di operazioni su stringhe dipendenti dalle impostazioni cultura.  
  
 In genere, non è necessario creare direttamente un'istanza di un oggetto <xref:System.Globalization.CompareInfo>, perché ne viene utilizzata una in modo implicito da tutte le operazioni di confronto di stringhe non ordinali, incluse le chiamate al metodo <xref:System.String.Compare%2A?displayProperty=nameWithType>. Tuttavia, se si desidera recuperare un oggetto <xref:System.Globalization.CompareInfo>, è possibile effettuarlo mediante uno dei seguenti modi:  
  
-   Recuperando il valore della proprietà <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> per impostazioni cultura specifiche.  
  
-   Chiamando il metodo statico <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> con un nome di impostazioni cultura. Questo consente di effettuare l'accesso ad associazione tardiva a un oggetto <xref:System.Globalization.CompareInfo>.  
  
## <a name="ignored-search-values"></a>Valori di ricerca ignorati  
 I set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un confronto linguistico o dipendente dalle impostazioni cultura. I metodi di confronto come <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> non considerano tali caratteri quando eseguono un confronto dipendente dalle impostazioni cultura. I caratteri ignorabili includono:  
  
-   <xref:System.String.Empty?displayProperty=nameWithType>. I metodi di confronto dipendenti dalle impostazioni cultura troveranno sempre una stringa vuota all'inizio (indice zero) della stringa cercata.  
  
-   Un carattere o una stringa costituita da caratteri con punti di codice non considerati nell'operazione a causa delle opzioni di confronto. In particolare, le opzioni <xref:System.Globalization.CompareOptions.IgnoreNonSpace?displayProperty=nameWithType> e <xref:System.Globalization.CompareOptions.IgnoreSymbols?displayProperty=nameWithType> producono ricerche in cui i simboli e i caratteri di combinazione senza spaziatura vengono ignorati.  
  
-   Una stringa con punti di codice senza alcun significato linguistico. Ad esempio, il segno meno facoltativo (U+00AD) nei confronti di stringhe dipendenti dalle impostazioni cultura viene sempre ignorato.  
  
## <a name="security-considerations"></a>Considerazioni sulla sicurezza  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o da un'operazione di modifica delle maiuscole e minuscole, è necessario utilizzare la proprietà <xref:System.Globalization.CultureInfo.InvariantCulture%2A> per assicurarsi che il comportamento sia coerente indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Quando possibile, è necessario usare i metodi di confronto tra stringhe che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 L'esempio seguente mostra come il <xref:System.Globalization.CompareInfo> oggetto associato a un <xref:System.Globalization.CultureInfo> oggetto influisce sul confronto tra stringhe.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compares two strings.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string -&gt; int&#xA;override this.Compare : string * string -&gt; int" Usage="compareInfo.Compare (string1, string2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="string2">The second string to compare.</param>
        <summary>Compares two strings.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description><paramref name="string1" /> is less than <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description><paramref name="string1" /> is greater than <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il confronto viene eseguito tramite <xref:System.Globalization.CompareOptions.None?displayProperty=nameWithType>. Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o una modifica della combinazione, è consigliabile utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente vengono confrontati porzioni di due stringhe utilizzando i diversi <xref:System.Globalization.CompareInfo> oggetti:  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alla lingua spagnolo (Spagna) con ordinamento internazionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alla lingua spagnolo (Spagna) con ordinamento tradizionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato il <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 Nel codice riportato di seguito viene illustrata la chiamata al metodo <xref:System.Globalization.CompareInfo.Compare%2A>.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un confronto linguistico o dipendente dalle impostazioni cultura. Il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" /> metodo non prende in considerazione tali caratteri quando viene eseguito un confronto dipendente dalle impostazioni cultura. Ad esempio, un confronto con distinzione delle impostazioni cultura di "animale" con "ani-mal" (con un segno meno facoltativo o U + 00AD) indica che le due stringhe sono equivalenti, come illustrato nell'esempio seguente.  [! code-vb[System.Globalization.CompareInfo.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.compare/vb/compare1.vb#1)]  Per riconoscere caratteri ignorabili in un confronto tra stringhe, chiamare il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> metodo e fornire un valore di <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oppure <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> per il <paramref name="options" /> parametro.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, string2 As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, System::String ^ string2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, string2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="string2">The second string to compare.</param>
        <param name="options">A value that defines how <c>string1</c> and <c>string2</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Compares two strings using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description><paramref name="string1" /> is less than <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description><paramref name="string1" /> is greater than <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o una modifica della combinazione, è consigliabile utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente vengono confrontate due stringhe utilizzando diversi <xref:System.Globalization.CompareOptions> impostazioni.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CPP/comparestrstropt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CS/comparestrstropt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/VB/comparestrstropt.vb#1)]  
  
 Nel codice riportato di seguito viene illustrata la chiamata al metodo <xref:System.Globalization.CompareInfo.Compare%2A>.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un confronto linguistico o dipendente dalle impostazioni cultura. Il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> metodo non prende in considerazione tali caratteri quando viene eseguito un confronto dipendente dalle impostazioni cultura. Per riconoscere caratteri ignorabili il confronto, fornire un valore <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oppure <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> per il <paramref name="options" /> parametro.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int -&gt; int&#xA;override this.Compare : string * int * string * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <c>string1</c> at which to start comparing.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <c>string2</c> at which to start comparing.</param>
        <summary>Compares the end section of a string with the end section of another string.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description> The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description> The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o una modifica della combinazione, è consigliabile utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente vengono confrontati porzioni di due stringhe utilizzando i diversi <xref:System.Globalization.CompareInfo> oggetti:  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alla lingua spagnolo (Spagna) con ordinamento internazionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alla lingua spagnolo (Spagna) con ordinamento tradizionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato il <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CPP/comparestrintstrint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CS/comparestrintstrint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/VB/comparestrintstrint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.  -or-  <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.  -or-  <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili. Il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" /> metodo non prende in considerazione tali caratteri quando viene eseguito un confronto linguistico o dipendente dalle impostazioni cultura. Per riconoscere caratteri ignorabili il confronto, chiamare il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> metodo e fornire un valore <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> per il <paramref name="options" /> parametro.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, string2 As String, offset2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, System::String ^ string2, int offset2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, string2, offset2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <c>string1</c> at which to start comparing.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <c>string2</c> at which to start comparing.</param>
        <param name="options">A value that defines how <c>string1</c> and <c>string2</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Compares the end section of a string with the end section of another string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description> The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description> The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o una modifica della combinazione, è consigliabile utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente vengono confrontati porzioni di due stringhe utilizzando diversi <xref:System.Globalization.CompareOptions> impostazioni.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CPP/comparestrintstrintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CS/comparestrintstrintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/VB/comparestrintstrintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> or <paramref name="offset2" /> is less than zero.  -or-  <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.  -or-  <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un confronto linguistico o dipendente dalle impostazioni cultura. Il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> metodo non prende in considerazione tali caratteri quando si esegue un confronto con distinzione delle impostazioni cultura. Per riconoscere caratteri ignorabili il confronto, fornire un valore <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oppure <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> per il <paramref name="options" /> parametro.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int -&gt; int&#xA;override this.Compare : string * int * int * string * int * int -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <c>string1</c> at which to start comparing.</param>
        <param name="length1">The number of consecutive characters in <c>string1</c> to compare.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <c>string2</c> at which to start comparing.</param>
        <param name="length2">The number of consecutive characters in <c>string2</c> to compare.</param>
        <summary>Compares a section of one string with a section of another string.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description> The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description> The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o una modifica della combinazione, è consigliabile utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Quando possibile, è necessario usare i metodi di confronto tra stringhe che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente vengono confrontati porzioni di due stringhe utilizzando i diversi <xref:System.Globalization.CompareInfo> oggetti:  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alla lingua spagnolo (Spagna) con ordinamento internazionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alla lingua spagnolo (Spagna) con ordinamento tradizionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato il <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CPP/comparestrintintstrintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CS/comparestrintintstrintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/VB/comparestrintintstrintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.  -or-  <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.  -or-  <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.  -or-  <paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.  -or-  <paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili. Il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" /> metodo non prende in considerazione tali caratteri quando viene eseguito un confronto linguistico o dipendente dalle impostazioni cultura. Per riconoscere caratteri ignorabili il confronto, chiamare il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo e fornire un valore <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> per il <paramref name="options" /> parametro.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Compare (string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::String ^ string1, int offset1, int length1, System::String ^ string2, int offset2, int length2, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.Compare : string * int * int * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.Compare (string1, offset1, length1, string2, offset2, length2, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">The first string to compare.</param>
        <param name="offset1">The zero-based index of the character in <c>string1</c> at which to start comparing.</param>
        <param name="length1">The number of consecutive characters in <c>string1</c> to compare.</param>
        <param name="string2">The second string to compare.</param>
        <param name="offset2">The zero-based index of the character in <c>string2</c> at which to start comparing.</param>
        <param name="length2">The number of consecutive characters in <c>string2</c> to compare.</param>
        <param name="options">A value that defines how <c>string1</c> and <c>string2</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Compares a section of one string with a section of another string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>A 32-bit signed integer indicating the lexical relationship between the two comparands.  
  
 <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> zero  </term><description> The two strings are equal.  </description></item><item><term> less than zero  </term><description> The specified section of <paramref name="string1" /> is less than the specified section of <paramref name="string2" />.  </description></item><item><term> greater than zero  </term><description> The specified section of <paramref name="string1" /> is greater than the specified section of <paramref name="string2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o una modifica della combinazione, è consigliabile utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente vengono confrontati porzioni di due stringhe utilizzando diversi <xref:System.Globalization.CompareOptions> impostazioni.  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CPP/comparestrintintstrintintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CS/comparestrintintstrintintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/VB/comparestrintintstrintintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> or <paramref name="length1" /> or <paramref name="offset2" /> or <paramref name="length2" /> is less than zero.  -or-  <paramref name="offset1" /> is greater than or equal to the number of characters in <paramref name="string1" />.  -or-  <paramref name="offset2" /> is greater than or equal to the number of characters in <paramref name="string2" />.  -or-  <paramref name="length1" /> is greater than the number of characters from <paramref name="offset1" /> to the end of <paramref name="string1" />.  -or-  <paramref name="length2" /> is greater than the number of characters from <paramref name="offset2" /> to the end of <paramref name="string2" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili. Il <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo non prende in considerazione tali caratteri quando viene eseguito un confronto dipendente dalle impostazioni cultura. Per riconoscere caratteri ignorabili il confronto, fornire un valore <see cref="F:System.Globalization.CompareOptions.Ordinal" /> oppure <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> per il <paramref name="options" /> parametro.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="compareInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare with the current <see cref="T:System.Globalization.CompareInfo" />.</param>
        <summary>Determines whether the specified object is equal to the current <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
        <returns>
          <see langword="true" /> if the specified object is equal to the current <see cref="T:System.Globalization.CompareInfo" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Due <xref:System.Globalization.CompareInfo> oggetti sono uguali se i relativi <xref:System.Globalization.CompareInfo.LCID%2A> e <xref:System.Globalization.CompareInfo.Name%2A> le proprietà sono uguali.  
  
 Questo metodo esegue l'override <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 Se una decisione relativa alla sicurezza dipende da un confronto tra stringhe o una modifica della combinazione, è consigliabile utilizzare il <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà per assicurarsi che il comportamento sia coerenza indipendentemente dalle impostazioni cultura del sistema operativo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCompareInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (culture As Integer) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">An integer representing the culture identifier.</param>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the culture with the specified identifier.</summary>
        <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente vengono confrontati porzioni di due stringhe utilizzando i diversi <xref:System.Globalization.CompareInfo> oggetti:  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alla lingua spagnolo (Spagna) con ordinamento internazionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alla lingua spagnolo (Spagna) con ordinamento tradizionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato il <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompareInfo (name As String) As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">A string representing the culture name.</param>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the culture with the specified name.</summary>
        <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente vengono confrontati porzioni di due stringhe utilizzando i diversi <xref:System.Globalization.CompareInfo> oggetti:  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alla lingua spagnolo (Spagna) con ordinamento internazionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato alla lingua spagnolo (Spagna) con ordinamento tradizionale  
  
-   <xref:System.Globalization.CompareInfo> oggetto associato il <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an invalid culture name.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(int culture, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : int * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (culture, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="culture">An integer representing the culture identifier.</param>
        <param name="assembly">An <see cref="T:System.Reflection.Assembly" /> that contains the string comparison methods to use.</param>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the specified culture and that uses string comparison methods in the specified <see cref="T:System.Reflection.Assembly" />.</summary>
        <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Il comportamento di questo metodo è imprevedibile. È preferibile per l'applicazione di utilizzare una versione di questo metodo che non accetta un input dell'assembly.  
  
 Il `assembly` parametro deve essere dello stesso tipo <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assembly" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assembly" /> is of an invalid type.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CompareInfo ^ GetCompareInfo(System::String ^ name, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="static member GetCompareInfo : string * System.Reflection.Assembly -&gt; System.Globalization.CompareInfo" Usage="System.Globalization.CompareInfo.GetCompareInfo (name, assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="name">A string representing the culture name.</param>
        <param name="assembly">An <see cref="T:System.Reflection.Assembly" /> that contains the string comparison methods to use.</param>
        <summary>Initializes a new <see cref="T:System.Globalization.CompareInfo" /> object that is associated with the specified culture and that uses string comparison methods in the specified <see cref="T:System.Reflection.Assembly" />.</summary>
        <returns>A new <see cref="T:System.Globalization.CompareInfo" /> object associated with the culture with the specified identifier and using string comparison methods in the current <see cref="T:System.Reflection.Assembly" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Il comportamento di questo metodo è imprevedibile. È consigliabile utilizzare una versione di questo metodo che non accetta un input dell'assembly.  
  
 Il `assembly` parametro deve essere dello stesso tipo <xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.  -or-  <paramref name="assembly" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an invalid culture name.  -or-  <paramref name="assembly" /> is of an invalid type.</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a hash code either for this <see cref="T:System.Globalization.CompareInfo" /> instance or for a particular string.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="compareInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serves as a hash function for the current <see cref="T:System.Globalization.CompareInfo" /> for hashing algorithms and data structures, such as a hash table.</summary>
        <returns>A hash code for the current <see cref="T:System.Globalization.CompareInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue l'override <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Il metodo genera lo stesso codice hash per due oggetti uguali in base al metodo <xref:System.Globalization.CompareInfo.Equals%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode (source As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.GetHashCode (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string whose hash code is to be returned.</param>
        <param name="options">A value that determines how strings are compared.</param>
        <summary>Gets the hash code for a string based on specified comparison options.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comportamento di <xref:System.Globalization.CompareInfo.GetHashCode%2A> dipende dalla relativa implementazione, che potrebbe cambiare da una versione di common language runtime a un altro o da una piattaforma .NET Framework a un altro.  
  
> [!IMPORTANT]
>  Se due oggetti string sono uguali, la <xref:System.Globalization.CompareInfo.GetHashCode%2A> metodo restituisce valori identici. Tuttavia, non è un valore del codice hash univoco per ogni valore di stringa univoco. Stringhe diverse possono restituire lo stesso codice hash.  
>   
>  Non è necessariamente che il codice hash stabile. I codici hash per stringhe identiche possono differire in tutte le versioni di .NET Framework e su più piattaforme (ad esempio 32 bit e 64 bit) per una singola versione di .NET Framework. In alcuni casi, possono anche differire dal dominio applicazione.  
>   
>  Di conseguenza, hash codici non devono mai essere usati di fuori del dominio applicazione in cui sono stati creati, non deve mai essere utilizzati come campi chiave in una raccolta e non deve essere mantenute.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSortKey">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Gets a <see cref="T:System.Globalization.SortKey" /> object for a string.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string for which a <see cref="T:System.Globalization.SortKey" /> object is obtained.</param>
        <summary>Gets the sort key for the specified string.</summary>
        <returns>The <see cref="T:System.Globalization.SortKey" /> object that contains the sort key for the specified string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni carattere in una stringa viene assegnato diverse categorie di ordinamenti, inclusi script, alfabetici, maiuscole e diacritici. Il repository di questi fattori per una determinata stringa è una chiave di ordinamento. Ad esempio, una chiave di ordinamento potrebbe contenere una stringa di valori di ponderazione alfabetici, seguito da una stringa di pesi dei casi e così via. Il <xref:System.Globalization.CompareInfo.GetSortKey%2A> metodo è equivalente al metodo API Windows `LCMapString` con il flag LCMAP_SORTKEY.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortKey" />
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSortKey (source As String, options As CompareOptions) As SortKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Globalization::SortKey ^ GetSortKey(System::String ^ source, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey&#xA;override this.GetSortKey : string * System.Globalization.CompareOptions -&gt; System.Globalization.SortKey" Usage="compareInfo.GetSortKey (source, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string for which a <see cref="T:System.Globalization.SortKey" /> object is obtained.</param>
        <param name="options">A bitwise combination of one or more of the following enumeration values that define how the sort key is calculated: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, and <see cref="F:System.Globalization.CompareOptions.StringSort" />.</param>
        <summary>Gets a <see cref="T:System.Globalization.SortKey" /> object for the specified string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The <see cref="T:System.Globalization.SortKey" /> object that contains the sort key for the specified string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni carattere in una stringa viene assegnato diverse categorie di ordinamenti, inclusi script, alfabetici, maiuscole e diacritici. Il repository di questi fattori per una determinata stringa è una chiave di ordinamento. Ad esempio, una chiave di ordinamento potrebbe contenere una stringa di valori di ponderazione alfabetici, seguito da una stringa di pesi dei casi e così via. Il <xref:System.Globalization.CompareInfo.GetSortKey%2A> metodo è equivalente al metodo API Windows `LCMapString` con il flag LCMAP_SORTKEY.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <altmember cref="T:System.Globalization.SortKey" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns the zero-based index of the first occurrence of a value within a string or within a portion of it.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char -&gt; int&#xA;override this.IndexOf : string * char -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo cerca nella stringa di origine dall'inizio della stringa alla fine della stringa.  
  
 Questo overload esegue una ricerca dipendente dalle impostazioni cultura. Se `value` rappresenta un precomposto carattere Unicode, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui un carattere viene considerato equivalente a un altro carattere solo se i relativi punti di codice Unicode sono uguali, è necessario chiamare un overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e usare il <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> valore. A differenza <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>, che esegue un confronto dipendente dalle impostazioni cultura, overload del <xref:System.String.IndexOf%2A?displayProperty=nameWithType> metodo che la ricerca di un carattere eseguono un confronto ordinale e gli overload che cercano una stringa di eseguire un confronto con distinzione delle impostazioni cultura.  
  
> [!NOTE]
>  Quando possibile, è necessario usare i metodi di confronto tra stringhe che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> metodo restituisce sempre 0 (zero) per indicare che si trova la corrispondenza all'inizio di <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> metodo viene utilizzato per trovare il segno meno (U + 00AD) in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce 0 (zero) per indicare che ha trovato una corrispondenza all'inizio della stringa.  [! codice csharp [System.Globalization.CompareInfo.IndexOf#3] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable2.cs#3)] [! codice vb [System.Globalization.CompareInfo.IndexOf#3] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string -&gt; int&#xA;override this.IndexOf : string * string -&gt; int" Usage="compareInfo.IndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire dall'inizio della stringa e la fine della stringa.  
  
 Questo overload esegue una ricerca dipendente dalle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei componenti del carattere nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode, è necessario usare uno degli overload che dispone di un parametro di tipo <xref:System.Globalization.CompareOptions> e usare il <xref:System.Globalization.CompareOptions.Ordinal> valore.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> contiene un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> costituito solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> metodo restituisce sempre 0 (zero) per indicare che si trova la corrispondenza all'inizio di <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> metodo viene utilizzato per individuare le sottostringhe di tre (un segno meno facoltativo (U + 00AD), un segno meno facoltativo seguito da "n" e un segno meno facoltativo seguito da "m") in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In ogni caso, poiché il segno meno facoltativo è un carattere ignorabile, il risultato è lo stesso come se il segno meno non era stato incluso in <paramref name="value" />. Quando si cerca solo un segno, il metodo restituisce 0 (zero) per indicare che ha trovato una corrispondenza all'inizio della stringa.  [! codice csharp [System.Globalization.CompareInfo.IndexOf#2] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable1.cs#2)] [! codice vb [System.Globalization.CompareInfo.IndexOf#2] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="options">A value that defines how the strings should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire dall'inizio della stringa e la fine della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca dipendente dalle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca ordinale (senza distinzione delle impostazioni cultura). Un carattere viene considerato equivalente a un altro solo se i valori Unicode sono uguali. Esegue l'overload di <xref:System.String.IndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca dipendente dalle impostazioni cultura.  
  
> [!NOTE]
>  Quando possibile, è necessario usare i metodi di confronto tra stringhe che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> metodo restituisce sempre 0 (zero) per indicare che si trova la corrispondenza all'inizio di <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> metodo viene utilizzato per cercare un segno meno facoltativo (U + 00AD) in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, una ricerca dipendente dalle impostazioni cultura restituisce 0 (zero) per indicare che ha trovato una corrispondenza all'inizio della stringa. Una ricerca ordinale, tuttavia, correttamente individua il segno meno in un'unica stringa e segnala che è assente dalla seconda stringa.  [! codice csharp [System.Globalization.CompareInfo.IndexOf#4] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable3.cs#4)] [! codice vb [System.Globalization.CompareInfo.IndexOf#4] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int -&gt; int&#xA;override this.IndexOf : string * char * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti iniziando in corrispondenza di `startIndex` e la fine della stringa.  
  
 Questo overload esegue una ricerca dipendente dalle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in un carattere viene considerato equivalente a un altro carattere solo se i valori Unicode sono uguali, è necessario chiamare uno degli overload con un parametro di tipo <xref:System.Globalization.CompareOptions> e usare il <xref:System.Globalization.CompareOptions.Ordinal> valore. Esegue l'overload di <xref:System.String.IndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca dipendente dalle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> metodo viene utilizzato per trovare un segno meno facoltativo (U + 00AD) dopo una "n" nelle due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce 1 per indicare che ha trovato una corrispondenza in corrispondenza della posizione di "n".  [! codice csharp [System.Globalization.CompareInfo.IndexOf#5] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable4.cs#5)] [! codice vb [System.Globalization.CompareInfo.IndexOf#5] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti a partire dall'inizio della stringa e la fine della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca dipendente dalle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei componenti del carattere nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload consente di eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura (ovvero se <paramref name="options" /> non è <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), se <paramref name="value" /> contiene un carattere ignorable, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> costituito solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> metodo restituisce sempre 0 (zero) per indicare che si trova la corrispondenza all'inizio di <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> metodo viene utilizzato per individuare le sottostringhe di tre (un segno meno facoltativo (U + 00AD), un segno meno facoltativo seguito da "n" e un segno meno facoltativo seguito da "m") in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. Poiché il segno meno facoltativo è un carattere ignorabile, una ricerca dipendente dalle impostazioni cultura restituisce lo stesso valore che il risultato restituito sarebbe se il segno meno non incluse nella stringa di ricerca. Una ricerca ordinale, tuttavia, correttamente individua il segno meno in un'unica stringa e segnala che è assente dalla seconda stringa.  [! codice csharp [System.Globalization.CompareInfo.IndexOf#6] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable5.cs#6)] [! codice vb [System.Globalization.CompareInfo.IndexOf#6] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int -&gt; int&#xA;override this.IndexOf : string * string * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti iniziando in corrispondenza di `startIndex` e la fine della stringa.  
  
 Questo overload esegue una ricerca dipendente dalle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei componenti del carattere nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode, è necessario chiamare uno degli overload con un parametro di tipo <xref:System.Globalization.CompareOptions> e usare il <xref:System.Globalization.CompareOptions.Ordinal> valore.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> contiene un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> costituito solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguita da una "m" in due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno facoltativo, ma l'indice di "m".  [! codice csharp [System.Globalization.CompareInfo.IndexOf#14] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable13.cs#14)] [! codice vb [System.Globalization.CompareInfo.IndexOf#14] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable13.vb#14)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti iniziando in corrispondenza di `startIndex` e la fine della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca dipendente dalle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca ordinale (senza distinzione delle impostazioni cultura). Un carattere viene considerato equivalente a un altro solo se i valori Unicode sono uguali. Esegue l'overload di <xref:System.String.IndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca dipendente dalle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, la posizione del carattere in corrispondenza del quale ha iniziato la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare il segno meno (U + 00AD) dopo una "n" nelle due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, una ricerca dipendente dalle impostazioni cultura restituisce 1 per indicare che ha trovato una corrispondenza in corrispondenza della posizione di "n". Una ricerca ordinale, tuttavia, correttamente individua il segno meno in un'unica stringa e segnala che è assente dalla seconda stringa.  [! codice csharp [System.Globalization.CompareInfo.IndexOf#8] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable7.cs#8)] [! codice vb [System.Globalization.CompareInfo.IndexOf#8] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int -&gt; int&#xA;override this.IndexOf : string * char * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti partire `startIndex` e fine `startIndex`  +  `count` - 1.  
  
 Questo overload esegue una ricerca dipendente dalle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in un carattere viene considerato equivalente a un altro carattere solo se i valori Unicode sono uguali, è necessario chiamare uno degli overload con un parametro di tipo <xref:System.Globalization.CompareOptions> e usare il <xref:System.Globalization.CompareOptions.Ordinal> valore. Esegue l'overload di <xref:System.String.IndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca dipendente dalle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale ha iniziato la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> metodo viene utilizzato per trovare un segno meno facoltativo (U + 00AD) dopo una "n" nelle due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce 1 per indicare che ha trovato una corrispondenza in corrispondenza della posizione di "n".  [! codice csharp [System.Globalization.CompareInfo.IndexOf#9] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable8.cs#9)] [! codice vb [System.Globalization.CompareInfo.IndexOf#9] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from <paramref name="startIndex" /> to the end of <paramref name="source" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti iniziando in corrispondenza di `startIndex` e la fine della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca dipendente dalle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei componenti del carattere nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload consente di eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura (ovvero se <paramref name="options" /> non è <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), se <paramref name="value" /> contiene un carattere ignorable, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> costituito solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguita da una "m" inizia con la terza posizione del carattere in due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa quando viene eseguito un confronto dipendente dalle impostazioni cultura. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno meno facoltativo, ma l'indice di "m". Il metodo restituisce l'indice del segno nella prima stringa solo quando si esegue un confronto ordinale.  [! codice csharp [System.Globalization.CompareInfo.IndexOf#15] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable14.cs#15)] [! codice vb [System.Globalization.CompareInfo.IndexOf#15] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int -&gt; int&#xA;override this.IndexOf : string * string * int * int -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti partire `startIndex` e fine `startIndex`  +  `count` - 1.  
  
 Questo overload esegue una ricerca dipendente dalle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei componenti del carattere nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode, è necessario chiamare uno degli overload con un parametro di tipo <xref:System.Globalization.CompareOptions> e usare il <xref:System.Globalization.CompareOptions.Ordinal> valore.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> contiene un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> costituito solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguita da una "m" a partire dal terzo sesto posizioni dei caratteri in due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa quando viene eseguito un confronto dipendente dalle impostazioni cultura. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno facoltativo, ma l'indice di "m".  [! codice csharp [System.Globalization.CompareInfo.IndexOf#17] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable16.cs#17)] [! codice vb [System.Globalization.CompareInfo.IndexOf#17] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti partire `startIndex` e fine `startIndex`  +  `count` - 1.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca dipendente dalle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca ordinale (senza distinzione delle impostazioni cultura). Un carattere viene considerato equivalente a un altro solo se i valori Unicode sono uguali. Esegue l'overload di <xref:System.String.IndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca dipendente dalle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale ha iniziato la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare il segno meno (U + 00AD) dopo una "n" nelle due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, una ricerca dipendente dalle impostazioni cultura restituisce 1 per indicare che ha trovato una corrispondenza in corrispondenza della posizione di "n". Una ricerca ordinale, tuttavia, correttamente individua il segno meno in un'unica stringa e segnala che è assente dalla seconda stringa.  [! codice csharp [System.Globalization.CompareInfo.IndexOf#12] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable11.cs#12)] [! codice vb [System.Globalization.CompareInfo.IndexOf#12] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.IndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.IndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the first occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified by <paramref name="count" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca in avanti partire `startIndex` e fine `startIndex`  +  `count` - 1.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca dipendente dalle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei componenti del carattere nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload consente di eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura (ovvero se <paramref name="options" /> non è <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), se <paramref name="value" /> contiene un carattere ignorable, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> costituito solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguita da una "m" a partire dal terzo sesto posizioni dei caratteri in due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa quando viene eseguito un confronto dipendente dalle impostazioni cultura. Quando si esegue un confronto ordinale, tuttavia, trova la sottostringa solo nella prima stringa. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno facoltativo, ma l'indice di "m" quando viene eseguito un confronto dipendente dalle impostazioni cultura. Il metodo restituisce l'indice del segno nella prima stringa solo quando si esegue un confronto ordinale.  [! codice csharp [System.Globalization.CompareInfo.IndexOf#16] (~/samples/snippets/csharp/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/CS/ignorable15.cs#16)] [! codice vb [System.Globalization.CompareInfo.IndexOf#16] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system. Globalization.CompareInfo.IndexOf/VB/ignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPrefix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether a string starts with a specific prefix.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string -&gt; bool&#xA;override this.IsPrefix : string * string -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string to search in.</param>
        <param name="prefix">The string to compare with the beginning of <c>source</c>.</param>
        <summary>Determines whether the specified source string starts with the specified prefix.</summary>
        <returns>
          <see langword="true" /> if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni stringa inizia e termina con una sottostringa vuota (""); Pertanto, se `prefix` è una stringa vuota, questo metodo restituisce `true`.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina se una stringa è il prefisso o suffisso di un'altra stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="prefix" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsPrefix (source As String, prefix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsPrefix(System::String ^ source, System::String ^ prefix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsPrefix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsPrefix (source, prefix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search in.</param>
        <param name="prefix">The string to compare with the beginning of <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>prefix</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Determines whether the specified source string starts with the specified prefix using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>
          <see langword="true" /> if the length of <paramref name="prefix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> starts with <paramref name="prefix" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni stringa inizia e termina con una sottostringa vuota (""); Pertanto, se `prefix` è una stringa vuota, questo metodo restituisce `true`.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente si determina se una stringa è il prefisso o suffisso di un'altra stringa usando <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="prefix" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSortable">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indicates whether a specified Unicode character or string is sortable.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (ch As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(char ch);" />
      <MemberSignature Language="F#" Value="static member IsSortable : char -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">A Unicode character.</param>
        <summary>Indicates whether a specified Unicode character is sortable.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="ch" /> parameter is sortable; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `ch` parametro è ordinabile se è un carattere Unicode che è definito in interna <xref:System.Globalization.CompareInfo> classe tabella di ordinamento e non è un uso privato o un carattere surrogato alto o basso non abbinati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSortable (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSortable(System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member IsSortable : string -&gt; bool" Usage="System.Globalization.CompareInfo.IsSortable text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">A string of zero or more Unicode characters.</param>
        <summary>Indicates whether a specified Unicode string is sortable.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="str" /> parameter is not an empty string ("") and all the Unicode characters in <paramref name="str" /> are sortable; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni carattere Unicode nel `str` parametro è rappresentato da uno o con codifica UTF-16 ulteriori <xref:System.Char> oggetti. Il `str` parametro è ordinabile se ogni carattere Unicode è definito in interna <xref:System.Globalization.CompareInfo> classe tabella di ordinamento e non è un uso privato o un carattere surrogato alto o basso non abbinati.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSuffix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether a string ends with a specific suffix.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string -&gt; bool&#xA;override this.IsSuffix : string * string -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string to search in.</param>
        <param name="suffix">The string to compare with the end of <c>source</c>.</param>
        <summary>Determines whether the specified source string ends with the specified suffix.</summary>
        <returns>
          <see langword="true" /> if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni stringa inizia e termina con una sottostringa vuota (""); Pertanto, se `suffix` è una stringa vuota, questo metodo restituisce `true`.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina se una stringa è il prefisso o suffisso di un'altra stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="suffix" /> is <see langword="null" />.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSuffix (source As String, suffix As String, options As CompareOptions) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSuffix(System::String ^ source, System::String ^ suffix, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool&#xA;override this.IsSuffix : string * string * System.Globalization.CompareOptions -&gt; bool" Usage="compareInfo.IsSuffix (source, suffix, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search in.</param>
        <param name="suffix">The string to compare with the end of <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>suffix</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" /> used by itself, or the bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Determines whether the specified source string ends with the specified suffix using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>
          <see langword="true" /> if the length of <paramref name="suffix" /> is less than or equal to the length of <paramref name="source" /> and <paramref name="source" /> ends with <paramref name="suffix" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni stringa inizia e termina con una sottostringa vuota (""); Pertanto, se `suffix` è una stringa vuota, questo metodo restituisce `true`.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente si determina se una stringa è il prefisso o suffisso di un'altra stringa usando <xref:System.Globalization.CompareOptions>.  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="suffix" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns the zero-based index of the last occurrence of a value within a string or within a portion of it.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char -&gt; int&#xA;override this.LastIndexOf : string * char -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca all'indietro a partire dalla fine della stringa e termina all'inizio della stringa.  
  
 Questo overload esegue una ricerca dipendente dalle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in un carattere viene considerato equivalente a un altro carattere solo se i valori Unicode sono uguali, è necessario chiamare uno degli overload con un parametro di tipo <xref:System.Globalization.CompareOptions> e usare il <xref:System.Globalization.CompareOptions.Ordinal> valore. Esegue l'overload di <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca dipendente dalle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> metodo restituisce sempre l'ultima posizione di indice in <paramref name="source" /> per indicare che viene trovata la corrispondenza alla fine di <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> metodo viene utilizzato per trovare il segno meno (U + 00AD) in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'ultima posizione dell'indice nella stringa per indicare che ha trovato una corrispondenza alla fine della stringa.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable2.cs#3)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string -&gt; int&#xA;override this.LastIndexOf : string * string -&gt; int" Usage="compareInfo.LastIndexOf (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca all'indietro a partire dalla fine della stringa e termina all'inizio della stringa.  
  
 Questo overload esegue una ricerca dipendente dalle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei componenti del carattere nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode, è necessario chiamare uno degli overload con un parametro di tipo <xref:System.Globalization.CompareOptions> e usare il <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> valore.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> contiene un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> costituito solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> metodo restituisce sempre <paramref name="source" />.<see cref="P:System.String.Length" /> – 1, che rappresenta l'ultima posizione di indice in <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> metodo viene utilizzato per individuare le sottostringhe di tre (un segno meno facoltativo (U + 00AD), un segno meno facoltativo seguito da "n" e un segno meno facoltativo seguito da "m") in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In ogni caso, poiché il segno meno facoltativo è un carattere ignorabile, il risultato è lo stesso come se il segno meno non era stato incluso in <paramref name="value" />. Quando si cerca solo un segno, il metodo restituisce 5 e 6. Questi valori corrispondono e l'indice dell'ultimo carattere nelle due stringhe.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable1.cs#2)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca all'indietro a partire dalla fine della stringa e termina all'inizio della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca dipendente dalle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca ordinale (senza distinzione delle impostazioni cultura). Un carattere viene considerato equivalente a un altro solo se i valori Unicode sono uguali. Esegue l'overload di <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca dipendente dalle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> metodo restituisce sempre l'ultima posizione di carattere in <paramref name="source" /> per indicare che viene trovata la corrispondenza alla fine di <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> metodo viene utilizzato per cercare un segno meno facoltativo (U + 00AD) in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, una ricerca dipendente dalle impostazioni cultura restituisce l'ultima posizione dell'indice nella stringa di origine. Al contrario, una ricerca ordinale trova il segno meno in un'unica stringa e correttamente segnala che è assente dalla seconda stringa.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable3.cs#4)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int -&gt; int&#xA;override this.LastIndexOf : string * char * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` fino all'inizio della stringa.  
  
 Questo overload esegue una ricerca dipendente dalle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in un carattere viene considerato equivalente a un altro carattere solo se i valori Unicode sono uguali, è necessario chiamare uno degli overload con un parametro di tipo <xref:System.Globalization.CompareOptions> e usare il <xref:System.Globalization.CompareOptions.Ordinal> valore. Esegue l'overload di <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca dipendente dalle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> metodo viene utilizzato per trovare un segno meno facoltativo (U + 00AD) che precede l'elemento finale "m" in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce la posizione nell'indice di "m", che corrisponde al valore di <paramref name="startIndex" />.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable4.cs#5)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within <paramref name="source" />, using the specified comparison options; otherwise, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita la ricerca all'indietro a partire dalla fine della stringa e termina all'inizio della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca dipendente dalle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei componenti del carattere nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload consente di eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura (ovvero se <paramref name="options" /> non è <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), se <paramref name="value" /> contiene un carattere ignorable, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> costituito solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="source" />.<see cref="P:System.String.Length" /> – 1, che rappresenta l'ultima posizione di indice in <paramref name="source" />. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> metodo viene utilizzato per individuare le sottostringhe di tre (un segno meno facoltativo (U + 00AD), un segno meno facoltativo seguito da "n" e un segno meno facoltativo seguito da "m") in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. Poiché il segno meno facoltativo è un carattere ignorabile, una ricerca dipendente dalle impostazioni cultura restituisce lo stesso valore che il risultato restituito sarebbe se il segno meno non incluse nella stringa di ricerca. Una ricerca ordinale, tuttavia, correttamente individua il segno meno in un'unica stringa e segnala che è assente dalla seconda stringa.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable5.cs#6)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int -&gt; int&#xA;override this.LastIndexOf : string * string * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` fino all'inizio della stringa.  
  
 Questo overload esegue una ricerca dipendente dalle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei componenti del carattere nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode, è necessario chiamare uno degli overload con un parametro di tipo <xref:System.Globalization.CompareOptions> e usare il <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> valore.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> contiene un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> costituito solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> metodo viene utilizzato per trovare una sottostringa che include un segno meno (U + 00AD) e che precede o include finale "m" in una stringa. Poiché il segno meno facoltativo nella stringa di ricerca viene ignorato, chiamare il metodo per trova una sottostringa che include il segno meno facoltativo e "m" restituisce la posizione di "m" nella stringa, mentre questo viene chiamato per trovare una sottostringa che include il segno meno e restituisce "n" il  posizione di "n". Quando la stringa di ricerca contiene solo il segno meno facoltativo, il metodo restituisce l'indice di "m", che rappresenta il valore di <paramref name="startIndex" />.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable6.cs#7)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable6.vb#7)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` fino all'inizio della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca dipendente dalle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca ordinale (senza distinzione delle impostazioni cultura). Un carattere viene considerato equivalente a un altro solo se i valori Unicode sono uguali. Esegue l'overload di <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca dipendente dalle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare un segno meno facoltativo (U + 00AD) che precede l'elemento finale "m" in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, una ricerca dipendente dalle impostazioni cultura restituisce la posizione nell'indice di "m". Una ricerca ordinale, tuttavia, correttamente individua il segno meno in un'unica stringa e segnala che è assente dalla seconda stringa.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable7.cs#8)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int -&gt; int&#xA;override this.LastIndexOf : string * char * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` e fine `startIndex`  -  `count` + 1.  
  
 Questo overload esegue una ricerca dipendente dalle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in un carattere viene considerato equivalente a un altro carattere solo se i valori Unicode sono uguali, è necessario chiamare uno degli overload con un parametro di tipo <xref:System.Globalization.CompareOptions> e usare il <xref:System.Globalization.CompareOptions.Ordinal> valore. Esegue l'overload di <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca dipendente dalle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> metodo viene utilizzato per trovare un segno meno facoltativo (U + 00AD) che precede l'elemento finale "m" in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce la posizione nell'indice di "m", che corrisponde al valore di <paramref name="startIndex" />.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable8.cs#9)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that extends from the beginning of <paramref name="source" /> to <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` fino all'inizio della stringa.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca dipendente dalle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei componenti del carattere nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload consente di eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa. Si noti che <xref:System.Globalization.CompareInfo.IndexOf%2A> e <xref:System.Globalization.CompareInfo.LastIndexOf%2A> esegue la ricerca in diverse parti della stringa, anche con lo stesso `startIndex` parametro.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura (ovvero se <paramref name="options" /> non è <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), se <paramref name="value" /> contiene un carattere ignorable, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> costituito solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguita da una "m", a partire da finale "m" in due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa quando viene eseguito un confronto dipendente dalle impostazioni cultura. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno meno facoltativo, ma l'indice di "m". Il metodo restituisce l'indice del segno nella prima stringa solo quando si esegue un confronto ordinale.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable14.cs#15)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int -&gt; int&#xA;override this.LastIndexOf : string * string * int * int -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` e fine `startIndex`  -  `count` + 1.  
  
 Questo overload esegue una ricerca dipendente dalle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei componenti del carattere nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Per eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode, è necessario chiamare uno degli overload con un parametro di tipo <xref:System.Globalization.CompareOptions> e usare il <xref:System.Globalization.CompareOptions.Ordinal> valore.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> contiene un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> costituito solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguita da una "m" nei tre caratteri che precedono l'elemento finale "m" di due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa quando viene eseguito un confronto dipendente dalle impostazioni cultura. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno facoltativo, ma l'indice di "m".  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable16.cs#17)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, char value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * char * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The character to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` e fine `startIndex`  -  `count` + 1.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca dipendente dalle impostazioni cultura. Se il carattere è un valore Unicode che rappresenta un carattere precomposto, ad esempio la legatura "Æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei relativi componenti nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca ordinale (senza distinzione delle impostazioni cultura). Un carattere viene considerato equivalente a un altro solo se i valori Unicode sono uguali. Esegue l'overload di <xref:System.String.LastIndexOf%2A?displayProperty=nameWithType> la ricerca di un carattere eseguono una ricerca ordinale, mentre quelli che cercano una stringa di eseguire una ricerca dipendente dalle impostazioni cultura.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura, se <paramref name="value" /> è un carattere ignorabile, il risultato è equivalente alla ricerca con il carattere rimosso. In questo caso, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca. Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare un segno meno facoltativo (U + 00AD) che precede l'elemento finale "m" in due stringhe. Solo una delle stringhe contiene un segno meno facoltativo. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, una ricerca dipendente dalle impostazioni cultura restituisce la posizione nell'indice di "m", che corrisponde al valore di <paramref name="startIndex" />. Una ricerca ordinale, tuttavia, correttamente individua il segno meno in un'unica stringa e segnala che è assente dalla seconda stringa.  [! code-csharp[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable11.cs#12)] [! code-vb[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LastIndexOf (source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int LastIndexOf(System::String ^ source, System::String ^ value, int startIndex, int count, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int&#xA;override this.LastIndexOf : string * string * int * int * System.Globalization.CompareOptions -&gt; int" Usage="compareInfo.LastIndexOf (source, value, startIndex, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">The string to search.</param>
        <param name="value">The string to locate within <c>source</c>.</param>
        <param name="startIndex">The zero-based starting index of the backward search.</param>
        <param name="count">The number of elements in the section to search.</param>
        <param name="options">A value that defines how <c>source</c> and <c>value</c> should be compared. <c>options</c> is either the enumeration value <see cref="F:System.Globalization.CompareOptions.Ordinal" />, or a bitwise combination of one or more of the following values: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, and <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />.</param>
        <summary>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <see cref="T:System.Globalization.CompareOptions" /> value.</summary>
        <returns>The zero-based index of the last occurrence of <paramref name="value" />, if found, within the section of <paramref name="source" /> that contains the number of elements specified by <paramref name="count" /> and that ends at <paramref name="startIndex" />, using the specified comparison options; otherwise, -1. Returns <paramref name="startIndex" /> if <paramref name="value" /> is an ignorable character.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa di origine viene eseguita con le versioni precedenti a partire dall'indice `startIndex` e fine `startIndex`  -  `count` + 1.  
  
 Il <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType> valore non valido per questo metodo.  
  
 Se `options` non include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload esegue una ricerca dipendente dalle impostazioni cultura. Un valore Unicode che rappresenta un carattere precomposto, ad esempio "æ" (U + 00 C 6), può essere considerato equivalente a tutte le occorrenze dei componenti del carattere nella sequenza corretta, ad esempio "AE" (u+0041, U + 0045), a seconda delle impostazioni cultura. Se `options` include il <xref:System.Globalization.CompareOptions.Ordinal> valore, questo overload consente di eseguire una ricerca ordinale (senza distinzione delle impostazioni cultura), in cui vengono confrontati i valori Unicode.  
  
> [!NOTE]
>  Se possibile, è necessario chiamare stringa metodi di confronto che includono un parametro di tipo <xref:System.Globalization.CompareOptions> per specificare il tipo di confronto previsto. Come regola generale, utilizzare le opzioni linguistiche (utilizzando le impostazioni cultura correnti) per il confronto tra stringhe visualizzate nell'interfaccia utente e specificare <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> o <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> per i confronti di sicurezza.  
  
   
  
## Examples  
 Nell'esempio seguente determina gli indici delle occorrenze e il cognome di un carattere o una sottostringa all'interno di una parte di una stringa.  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> is <see langword="null" />.  -or-  <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="source" />.  -or-  <paramref name="count" /> is less than zero.  -or-  <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="source" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> contains an invalid <see cref="T:System.Globalization.CompareOptions" /> value.</exception>
        <block subset="none" type="usage">
          <para>Set di caratteri includono caratteri ignorabili, ovvero caratteri che non sono considerati durante l'esecuzione di un ordinamento linguistico o dipendente dalle impostazioni cultura. In una ricerca dipendente dalle impostazioni cultura (ovvero se <paramref name="options" /> non è <see cref="F:System.Globalization.CompareOptions.Ordinal" /> o <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), se <paramref name="value" /> contiene un carattere ignorable, il risultato è equivalente alla ricerca con il carattere rimosso. Se <paramref name="value" /> costituito solo da uno o più caratteri ignorabili, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo restituisce sempre <paramref name="startIndex" />, ovvero la posizione del carattere in corrispondenza del quale inizia la ricerca.  Nell'esempio seguente, il <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> metodo viene utilizzato per trovare la posizione di un segno meno facoltativo (U + 00AD) seguito da una "m" in tutti, ma la prima posizione di carattere prima finale "m" in due stringhe. Solo una delle stringhe contiene la sottostringa richiesta. In entrambi i casi, poiché il segno meno facoltativo è un carattere ignorabile, il metodo restituisce l'indice di "m" nella stringa quando viene eseguito un confronto dipendente dalle impostazioni cultura. Quando si esegue un confronto ordinale, tuttavia, trova la sottostringa solo nella prima stringa. Si noti che nel caso della prima stringa, che include il segno meno facoltativo seguito da una "m", il metodo non restituisce l'indice del segno facoltativo, ma l'indice di "m" quando viene eseguito un confronto dipendente dalle impostazioni cultura. Il metodo restituisce l'indice del segno nella prima stringa solo quando si esegue un confronto ordinale.  [! code-vb[System.Globalization.CompareInfo.LastIndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CompareInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the properly formed culture identifier for the current <see cref="T:System.Globalization.CompareInfo" />.</summary>
        <value>Identificatore di impostazioni cultura corretto per la classe <see cref="T:System.Globalization.CompareInfo" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.Globalization.CompareInfo.LCID%2A> proprietà.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CompareInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the culture used for sorting operations by this <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
        <value>Nome di impostazioni cultura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Globalization.CompareInfo.Name%2A> e <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> le proprietà possono avere valori diversi. Ad esempio, un <xref:System.Globalization.CompareInfo.LCID%2A> valore della proprietà di esadecimale 0x10407 identifica una lingua di ordinamento alternativo che ordina i nomi come appaiono in un elenco telefonico tedesco. Il <xref:System.Globalization.CompareInfo.Name%2A> proprietà contiene un valore di "de-de phoneb", mentre il <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> proprietà delle impostazioni cultura associate tedesco (Germania) ha un valore di "de-DE".  
  
   
  
## Examples  
 Nell'esempio seguente vengono confrontati tre stringhe utilizzando le impostazioni cultura fr-FR e ja-JP. Il <xref:System.Globalization.CultureInfo.Name%2A> proprietà viene utilizzata per visualizzare il nome di ogni impostazione cultura.  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">The object that initiated the callback.</param>
        <summary>Runs when the entire object graph has been deserialized.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un'implementazione esplicita dell'interfaccia un membro che può essere utilizzata solo quando l'oggetto corrente <xref:System.Globalization.CompareInfo> cast dell'oggetto su un <xref:System.Runtime.Serialization.IDeserializationCallback> interfaccia. Per altre informazioni, vedere il metodo <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="compareInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the current <see cref="T:System.Globalization.CompareInfo" /> object.</summary>
        <returns>A string that represents the current <see cref="T:System.Globalization.CompareInfo" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue l'override di <xref:System.Object.ToString%2A?displayProperty=nameWithType> metodo. Restituisce una stringa che include il nome della classe e il valore dell'istanza <xref:System.Globalization.CompareInfo.Name%2A> proprietà, separati da un trattino.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Partendo da .NET Framework 4, il <see cref="M:System.Globalization.CompareInfo.ToString" /> metodo restituisce il nome della classe seguito da uno spazio, un trattino, uno spazio e il valore della <see cref="P:System.Globalization.CompareInfo.Name" /> proprietà. Ad esempio, per un oggetto <see cref="T:System.Globalization.CompareInfo" /> che rappresenta le impostazioni cultura en-US, il metodo <see cref="M:System.Globalization.CompareInfo.ToString" /> restituisce "CompareInfo - en-US". Nelle versioni precedenti di .NET Framework, restituisce il nome della classe seguito da uno spazio, un trattino e da uno spazio e dal valore della proprietà <see cref="P:System.Globalization.CompareInfo.LCID" />. Ad esempio, per un <see cref="T:System.Globalization.CompareInfo" /> oggetto che rappresenta le impostazioni cultura en-US, il <see cref="M:System.Globalization.CompareInfo.ToString" /> metodo restituisce "CompareInfo - 1033".</para>
        </block>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public System.Globalization.SortVersion Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.SortVersion Version" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Version" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Version As SortVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::SortVersion ^ Version { System::Globalization::SortVersion ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Version : System.Globalization.SortVersion" Usage="System.Globalization.CompareInfo.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.SortVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets information about the version of Unicode used for comparing and sorting strings.</summary>
        <value>Oggetto che contiene informazioni sulla versione Unicode usata per il confronto e l'ordinamento delle stringhe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il peso di singoli caratteri e pertanto il modo in cui stringhe specifiche sono confrontate o ordinate, dipende dalla versione della specifica Unicode che implementa una particolare versione di .NET Framework. In [!INCLUDE[net_v45](~/includes/net-v45-md.md)], questo dipende inoltre dal sistema operativo dell'host, come illustrato nella tabella seguente. Si noti che l'elenco delle versioni supportate da Unicode si applica soltanto al confronto dei caratteri e all'ordinamento alfabetico; non si applica alla classificazione di caratteri Unicode in base alla categoria.  
  
|Versione di .NET Framework|Sistema operativo|Versione Unicode|  
|----------------------------|----------------------|---------------------|  
|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|Tutti i sistemi operativi|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] e versioni successive|[!INCLUDE[win7](~/includes/win7-md.md)]|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] e versioni successive|[!INCLUDE[win8](~/includes/win8-md.md)] e versioni successive del sistema operativo Windows|6.3 Unicode|  
  
 L'oggetto <xref:System.Globalization.SortVersion> restituito dalla proprietà <xref:System.Globalization.CompareInfo.Version%2A> non identifica l'esatta versione Unicode utilizzata per confrontare le stringhe. È utile solo quando si confrontano due oggetti <xref:System.Globalization.SortVersion> per determinare se utilizzano la stessa versione Unicode e le stesse impostazioni cultura per confrontare le stringhe. Per ulteriori informazioni e un esempio, consultare la pagina di riferimento <xref:System.Globalization.SortVersion>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortVersion" />
      </Docs>
    </Member>
  </Members>
</Type>