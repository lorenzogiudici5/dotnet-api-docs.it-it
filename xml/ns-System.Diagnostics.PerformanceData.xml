<Namespace Name="System.Diagnostics.PerformanceData">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="43a4cee968c302db34b15db72a2e91890ce7c882" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51915930" />
  </Metadata>
  <Docs>
    <summary>Usare le classi in questo spazio dei nomi per fornire i dati del contatore. I contatori vengono usati per esporre ai consumatori la metrica delle prestazioni, ad esempio il monitoraggio delle prestazioni. Lo spazio dei nomi non contiene classi per l'utilizzo dei dati dei contatori. Per una descrizione completa dell'architettura dei contatori delle prestazioni, vedere <see href="https://msdn.microsoft.com/library/windows/desktop/aa373083\(v=vs.85\">Performance Counters</see>.aspx) (Contatori delle prestazioni).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le classi in questo spazio dei nomi supportano la nuova architettura (versione 2.0) per i contatori delle prestazioni che è stata introdotta in Windows Vista. Nella nuova architettura, il provider non risponde più alle richieste consumer direttamente, ma gestisce semplicemente i dati del contatore. Il sistema inserisce un thread nel processo del provider quando il provider crea un'istanza dell'insieme di contatori; il thread è responsabile della gestione delle richieste di consumer.  
  
 La procedura seguente illustra il processo per la scrittura di un provider di contatori.  
  
1.  I contatori che fornisce il provider è definito in un manifesto basato su XML. I contatori vengono raggruppati logicamente in insiemi di contatori. I contatori all'interno di un insieme di contatori sono identificati da un identificatore numerico univoco all'interno del set di contatori. Un provider può definire uno o più insiemi di contatori. Un insieme di contatori è identificato da un Guid univoco per un provider. Si noti che se si usano queste classi per scrivere un provider:  
  
    -   L'attributo di callback dell'elemento del provider viene ignorato.  
  
    -   Il valore di riferimento per l'attributo name dell'elemento counterAttribute viene ignorato.  
  
     Per informazioni dettagliate sulla scrittura del manifesto, vedere [Schema di contatori delle prestazioni](https://msdn.microsoft.com/library/windows/desktop/aa373092\(v=vs.85\).aspx).  
  
2.  Dopo aver scritto il manifesto, usare il [CTRPP](https://msdn.microsoft.com/library/windows/desktop/aa372128\(v=vs.85\).aspx) dello strumento per la compilazione (ctrpp provider). Lo strumento genera quattro file:. h, c,. rc, e * _r.h. È possibile ignorare i file con estensione h e c. Il file RC contiene le stringhe localizzate definite nel manifesto. Si usano i file con estensione RC e *_r.h per creare il file di risorse compilato (con estensione res) incluso nel progetto. La chiamata seguente viene illustrato come compilare il file di risorse:  
  
    ```console  
    rc /r /i "c:\Program Files\Microsoft SDKs\Windows\v6.0\Include" provider.rc  
    ```  
  
     Se si verifica un errore che fa riferimento a SAL, copiare questo file di Microsoft Visual Studio, Visual C# includono directory per la directory specificata per lo switch /i.  
  
     Aggiungere un percorso del file di risorse compilato (con estensione res) alla pagina delle proprietà del progetto dell'applicazione.  
  
3.  Scrivere un provider. La procedura seguente illustra le chiamate effettuate da un provider:  
  
    1.  Chiamare il <xref:System.Diagnostics.PerformanceData.CounterSet.%23ctor%2A?displayProperty=nameWithType> costruttore per definire l'insieme di contatori. Chiamare questo metodo per ogni insieme di contatori definito nel manifesto.  
  
    2.  Per ogni insieme di contatori, chiamare uno del <xref:System.Diagnostics.PerformanceData.CounterSet.AddCounter%2A?displayProperty=nameWithType> metodi per aggiungere i contatori all'insieme. Chiamare questo metodo per ciascun contatore definiti nel set di contatori.  
  
    3.  Chiamare il <xref:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance%2A?displayProperty=nameWithType> metodo per creare un'istanza dell'insieme di contatori (un'istanza contiene i dati del contatore). Per gli insiemi di contatori singola istanza, chiamare questo metodo una volta. Per più insiemi di contatori di istanza, chiamare questo metodo per ogni istanza per il quale è necessario fornire i dati dei contatori (usare un nome univoco per ogni istanza).  
  
    4.  Usare il <xref:System.Diagnostics.PerformanceData.CounterSetInstance.Counters%2A?displayProperty=nameWithType> proprietà per accedere e impostare i dati dei contatori per il contatore.  
  
4.  Dopo aver completato il provider, usare lo strumento LodCtr per registrare i contatori nel computer. Ad esempio,  
  
    ```console  
    lodctr /m:provider.man  
    ```  
  
     Nell'esempio si presuppone che il manifesto e file eseguibile si trovano nella directory corrente. Per informazioni dettagliate sull'utilizzo di LodCtr, vedere [Microsoft Technet](https://Go.Microsoft.Com/FWLink/?LinkId=84000).  
  
 È possibile usare le classi in questo spazio dei nomi nei computer che eseguono Windows Vista e sistemi operativi successivi.  
  
   
  
## Examples  
 Di seguito viene illustrato un semplice manifesto:  
  
```xml  
<!-- <?xml version="1.0" encoding="UTF-16"?> -->  
<instrumentationManifest xsi:schemaLocation="http://schemas.microsoft.com/win/2004/08/events eventman.xsd"   
     xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events"   
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
     xmlns:xs="http://www.w3.org/2001/XMLSchema"   
     xmlns:trace=http://schemas.microsoft.com/win/2004/08/events/trace>  
  
    <instrumentation>  
  
        <counters xmlns=http://schemas.microsoft.com/win/2005/12/counters>  
  
            <provider  
              applicationIdentity = "provider1.exe"  
              providerType = "userMode"  
              providerGuid = "{51D1685C-35ED-45be-99FE-17261A4F27F3}">  
  
               <counterSet guid = "{582803C9-AACD-45e5-8C30-571141A22092}"  
                  uri = "Microsoft.Windows.System.PerfCounters.Typing"  
                  name = "$(string.CounterSet1.Name)"   
                  description = "$(string.CounterSet1.Description)"   
                  instances = "single">  
  
                    <counter id = "1"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.TotalWords"  
                      name = "$(string.CS1.Counter1.Name)"  
                      description = "$(string.CS1.Counter1.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "2"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsInInterval"  
                      name = "$(string.CS1.Counter2.Name)"  
                      description = "$(string.CS1.Counter2.Description)"  
                      type = "perf_counter_delta"  
                      detailLevel = "standard"/>  
  
                    <counter id = "3"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.LetterAPressed"  
                      name = "$(string.CS1.Counter3.Name)"  
                      description = "$(string.CS1.Counter3.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "4"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsContainingLetterA"  
                      name = "$(string.CS1.Counter4.Name)"   
                      description = "$(string.CS1.Counter4.Description)"   
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "5"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentOfWordsContainingLetterA"  
                      name = "$(string.CS1.Counter5.Name)"   
                      description = "$(string.CS1.Counter5.Description)"   
                      type = "perf_sample_fraction"  
                      baseID = "6"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "displayAsReal" />  
                      </counterAttributes>  
                    </counter>  
  
                    <counter id = "6"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentBase"  
                      type = "perf_sample_base"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "noDisplay" />  
                      </counterAttributes>  
                    </counter>  
  
                </counterSet>  
            </provider>  
        </counters>  
    </instrumentation>  
  
    <localization>  
        <resources culture="en-US">  
            <stringTable>  
  
                <string id="CounterSet1.Name" value="Typing"/>  
                <string id="CounterSet1.Description" value="Captures simple typing metrics."/>  
                <string id="CS1.Counter1.Name" value="Total Words Typed"/>   
                <string id="CS1.Counter1.Description" value="The total number of words typed."/>  
                <string id="CS1.Counter2.Name" value="Words Typed In Interval"/>   
                <string id="CS1.Counter2.Description" value="The total number of words typed in the interval."/>  
                <string id="CS1.Counter3.Name" value="Letter A Pressed"/>   
                <string id="CS1.Counter3.Description" value="The number of times that the letter A is pressed."/>  
                <string id="CS1.Counter4.Name" value="Words Containing A"/>   
                <string id="CS1.Counter4.Description" value="The number of words that contain the letter A."/>  
                <string id="CS1.Counter5.Name" value="Percent of Words Containing A"/>   
                <string id="CS1.Counter5.Description" value="The percent of words that contain the letter A in the last interval."/>  
  
            </stringTable>  
        </resources>  
    </localization>  
</instrumentationManifest>  
```  
  
 Di seguito viene illustrata un'implementazione di un provider semplice per il manifesto:  
  
```cs  
using System.Diagnostics.PerformanceData;  
  
        private static Guid providerId = new Guid("{51D1685C-35ED-45be-99FE-17261A4F27F3}");  
        private static Guid typingCounterSetId = new Guid("{582803C9-AACD-45e5-8C30-571141A22092}");  
  
        private static CounterSet typingCounterSet;         // Defines the counter set  
        private static CounterSetInstance typingCsInstance; // Instance of the counter set  
  
        private static int numberOfLetterAInWord = 0;  
  
        . . .  
  
            // Create the 'Typing' counter set.  
            typingCounterSet = new CounterSet(providerId, typingCounterSetId, CounterSetInstanceType.Single);  
  
            // Add the counters to the counter set definition.  
            typingCounterSet.AddCounter(1, CounterType.RawData32, "Total Word Count");  
            typingCounterSet.AddCounter(2, CounterType.Delta32, "Words Typed In Interval");  
            typingCounterSet.AddCounter(3, CounterType.RawData32, "A Key Pressed");  
            typingCounterSet.AddCounter(4, CounterType.RawData32, "Words Containing A");  
            typingCounterSet.AddCounter(5, CounterType.SampleFraction, "Percent of Words Containg A");  
            typingCounterSet.AddCounter(6, CounterType.SampleBase, "Percent Base");  
  
            // Create an instance of the counter set (contains the counter data).  
            typingCsInstance = typingCounterSet.CreateCounterSetInstance("Typing Instance");  
            typingCsInstance.Counters[1].Value = 0;  
            typingCsInstance.Counters[2].Value = 0;  
            typingCsInstance.Counters[3].Value = 0;  
            typingCsInstance.Counters[4].Value = 0;  
            typingCsInstance.Counters[5].Value = 0;  
            typingCsInstance.Counters[6].Value = 0;  
  
        . . .  
  
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)  
        {  
            typingCounterSet.Dispose();  
        }  
  
        // Simple effort to capture letter A key press and words typed.  
        private void textInput_KeyDown(object sender, KeyEventArgs e)  
        {  
            Keys keyData = e.KeyData;  
  
            switch (e.KeyData)  
            {  
                case Keys.A :  
                    // In the .NET 3.5 Framework, you had to use the  
                    // Value property to set and increment the counter   
                    // value. Beginning with the .NET 4.0 Framework,   
                    // the Value property is safe to use in a multi-  
                    // threaded application.  
                    typingCsInstance.Counters["A Key Pressed"].Value++;  
                    numberOfLetterAInWord++;  
  
                    break;  
  
                case Keys.Enter:  
                case Keys.Space:  
                case Keys.Tab:  
  
                    if (numberOfLetterAInWord > 0)  
                    {  
                        // Beginning with the .NET 4.0 Framework, you   
                        // can use the Increment method to increment   
                        // the counter value by 1. The Increment method   
                        // is safe to use in a multi-threaded   
                        // application.  
                        typingCsInstance.Counters["Words Containing A"].Increment();  
                        typingCsInstance.Counters["Percent of Words Containg A"].Increment();  
                        numberOfLetterAInWord = 0;  
                    }  
  
                    typingCsInstance.Counters["Percent Base"].Increment();  
                    typingCsInstance.Counters["Total Word Count"].Increment();  
                    typingCsInstance.Counters["Words Typed In Interval"].Increment();  
  
                    break;  
            }  
        }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>