<Type Name="IVsaCodeItem" FullName="Microsoft.Vsa.IVsaCodeItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="02ffa3d80165d4caa3178d3b714320a67262d734" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52736996" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IVsaCodeItem : Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IVsaCodeItem implements class Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Vsa.IVsaCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVsaCodeItem&#xA;Implements IVsaItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IVsaCodeItem : Microsoft::Vsa::IVsaItem" />
  <TypeSignature Language="F#" Value="type IVsaCodeItem = interface&#xA;    interface IVsaItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Vsa</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Vsa.IVsaItem</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Obsolete("Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.Guid("E0C0FFE7-7eea-4ee5-b7e4-0080c7eb0b74")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un elemento di codice che verrà compilato dal modulo di gestione di script.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks  
L'elemento di codice specificato può contenere classi, moduli o altro testo di origine.

Non sono necessarie autorizzazioni per chiamare i membri dell'interfaccia IVsaCodeItem.

Il motore di script implementa questa interfaccia per aggiungere gli elementi di codice.

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddEventSource">
      <MemberSignature Language="C#" Value="public void AddEventSource (string eventSourceName, string eventSourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventSource(string eventSourceName, string eventSourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEventSource (eventSourceName As String, eventSourceType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddEventSource(System::String ^ eventSourceName, System::String ^ eventSourceType);" />
      <MemberSignature Language="F#" Value="abstract member AddEventSource : string * string -&gt; unit" Usage="iVsaCodeItem.AddEventSource (eventSourceName, eventSourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
        <Parameter Name="eventSourceType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Nome dell'origine evento a livello di codice.</param>
        <param name="eventSourceType">Nome del tipo dell'origine eventi.</param>
        <summary>Aggiunge un'origine eventi all'elemento di codice. L'elemento di codice usa l'origine eventi per associare un evento all'origine eventi denominata chiamando il metodo IVsaSite.GetEventSourceInstance, implementato dall'host.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Il motore di script Usa le informazioni fornite dal metodo AddEventSource per associare gli eventi per l'origine evento denominato. Ottiene le origini eventi chiamando il metodo IVsaSite. GetEventSourceInstance, implementato dall'host. Il metodo AddEventSource crea una classe che gestisce gli eventi generati da un oggetto fornito dall'host.

> [!NOTE]
> Il motore di script JScript .NET non supporta questo metodo. Nei casi in cui il motore di JScript .NET deve associare un evento, è necessario farlo usando un elemento globale. Invece di origini evento, il motore di JScript .NET usa i tipi di elemento AppGlobal. Per altre informazioni, vedere VsaItemType.


All'interno dell'elemento di codice, è possibile accedere all'oggetto di origine evento in base al nome e, quando si accede, è possibile scrivere i gestori di eventi rispetto all'oggetto. Il tipo di origine evento è passato come stringa anziché come un oggetto di tipo per facilitare l'implementazione delle origini evento per gli host non gestiti.

Il compilatore Usa il parametro eventSourceType da associare ai metodi forniti dal tipo. Viene anche usato in un secondo momento quando il motore di script chiama il metodo IVsaSite. per richiedere un'istanza dell'oggetto di tipo.

Per altre informazioni sui meccanismi di associazione di eventi per il motore di script, vedere il metodo IVsaSite.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSourceText">
      <MemberSignature Language="C#" Value="public void AppendSourceText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendSourceText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AppendSourceText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSourceText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSourceText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member AppendSourceText : string -&gt; unit" Usage="iVsaCodeItem.AppendSourceText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo da aggiungere all'elemento di codice.</param>
        <summary>Aggiunge il testo specificato alla fine dell'elemento di codice.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Testo di origine aggiunto non viene sottoposto a convalida. Per questo motivo, errori, se presente, verranno generati durante la successiva chiamata al metodo IVsaEngine.

Il testo di origine accodato viene fornito come stringa singola. Richiesto da una stringa qualsiasi formattazione, è necessario specificare manualmente.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeDOM">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeObject CodeDOM { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeObject CodeDOM" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDOM As CodeObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeObject ^ CodeDOM { System::CodeDom::CodeObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDOM : System.CodeDom.CodeObject" Usage="Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il CodeDOM (Code Document Object Model) rappresentato nell'elemento di codice.</summary>
        <value>Restituisce il modello CodeDOM per l'elemento di codice.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
La proprietà CodeDOM viene in genere generata come parte del passaggio di compilazione del motore di script, pertanto non è disponibile fino a dopo una chiamata al metodo IVsaEngine. Alcune implementazioni di VSA potrebbero essere in grado di fornire in modo dinamico, CodeDOM senza la necessità di un passaggio di compilazione esplicita, ma gli host non è possibile basarsi su questo comportamento. Alcuni motori di script, ad esempio, il motore di script JScript .NET, non supportano questo comportamento.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventSource">
      <MemberSignature Language="C#" Value="public void RemoveEventSource (string eventSourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventSource(string eventSourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEventSource (eventSourceName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEventSource(System::String ^ eventSourceName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventSource : string -&gt; unit" Usage="iVsaCodeItem.RemoveEventSource eventSourceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Nome a livello di codice dell'origine eventi da rimuovere.</param>
        <summary>Rimuove l'origine eventi specificata dall'elemento di codice.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Rimozione di un'origine evento non rimuove il gestore dell'evento sottostante dal testo di origine. Piuttosto, gli eventi non generano più notifiche per il gestore dell'evento. Pertanto, si otterrà un errore del compilatore se si elimina un'origine evento ma lascia la funzione sottostante nel codice sorgente.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceText">
      <MemberSignature Language="C#" Value="public string SourceText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceText : string with get, set" Usage="Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Imposta o ottiene il testo di un elemento di codice specificato, incluso l'eventuale codice generato automaticamente.</summary>
        <value>Restituisce il testo di origine dell'elemento di codice.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Quando si imposta questa proprietà, il testo non viene sottoposto a convalida. Per questo motivo, errori, se presente, verranno generati durante la successiva chiamata al metodo IVsaEngine.

La proprietà SourceText restituisce il testo di origine in un'unica stringa di grandi dimensioni, inclusi i caratteri di formattazione, ad esempio ritorno a capo.

Per ottenere il motore di questa proprietà non deve essere chiuso. Per impostare il motore di questa proprietà non deve essere chiuso e il motore deve non essere in esecuzione.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>