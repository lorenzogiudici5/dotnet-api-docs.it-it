<Type Name="EventHandlerService" FullName="System.Windows.Forms.Design.EventHandlerService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0982d79ebe0e4e5d118464b1e350b71ffe8dccc5" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37519458" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EventHandlerService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventHandlerService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.EventHandlerService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventHandlerService" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventHandlerService sealed" />
  <TypeSignature Language="F#" Value="type EventHandlerService = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce un modo sistematico per gestire i gestori eventi per il documento corrente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli sviluppatori possono desidera essere in grado di scrivere codice in un'unica posizione che gestisce gli eventi di un determinato tipo.  
  
 Inoltre, gli sviluppatori potrebbe essere necessario modificare a livello globale il comportamento dei gestori di eventi specifici o tipi di eventi che possono essere distribuiti tra i componenti della finestra di progettazione.  
  
 Le finestre di progettazione per un tipico progetto sono molti oggetti diversi in modo che può essere utile elencare e memorizzare un riferimento a questi eventi da una posizione frequente.  
  
 Questo servizio implementa un "evento stack" che contiene il set corrente di gestori di eventi. Lo stack potrebbe includere un'ampia gamma di tipi diversi di gestori nello stack.  
  
 Ad esempio, una finestra di progettazione potrebbe push o aggiungere, un gestore della tastiera e un gestore del mouse nello stack. Quando una finestra di progettazione richiede un gestore eventi, il servizio troverà il gestore in primo piano nello stack che corrisponde alla classe richiesta.  
  
 In questo modo il servizio può essere esteso a tutti gli schemi di gestione degli eventi e consente inoltre di tipi specifici di gestori di eventi da sostituire. Ad esempio, è possibile sostituire i gestori di eventi di mouse senza influire sui gestori di eventi di menu o i gestori di eventi della tastiera.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventHandlerService (System.Windows.Forms.Control focusWnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control focusWnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (focusWnd As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventHandlerService(System::Windows::Forms::Control ^ focusWnd);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Design.EventHandlerService : System.Windows.Forms.Control -&gt; System.Windows.Forms.Design.EventHandlerService" Usage="new System.Windows.Forms.Design.EventHandlerService focusWnd" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="focusWnd" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="focusWnd">Oggetto <see cref="T:System.Windows.Forms.Control" /> in fase di progettazione.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Forms.Design.EventHandlerService" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EventHandlerChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EventHandlerChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EventHandlerChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ EventHandlerChanged;" />
      <MemberSignature Language="F#" Value="member this.EventHandlerChanged : EventHandler " Usage="member this.EventHandlerChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Forms.Design.IEventHandlerService.EventHandlerChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Genera un evento OnEventHandlerChanged.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusWindow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control FocusWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control FocusWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.EventHandlerService.FocusWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FocusWindow As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ FocusWindow { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FocusWindow : System.Windows.Forms.Control" Usage="System.Windows.Forms.Design.EventHandlerService.FocusWindow" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.Design.IEventHandlerService.FocusWindow</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il controllo a cui sono connessi i gestori eventi.</summary>
        <value>L'oggetto <see cref="T:System.Windows.Forms.Control" /> che è stato associato tramite il costruttore.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHandler">
      <MemberSignature Language="C#" Value="public object GetHandler (Type handlerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetHandler(class System.Type handlerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHandler (handlerType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetHandler(Type ^ handlerType);" />
      <MemberSignature Language="F#" Value="abstract member GetHandler : Type -&gt; obj&#xA;override this.GetHandler : Type -&gt; obj" Usage="eventHandlerService.GetHandler handlerType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.GetHandler(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handlerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="handlerType">Il tipo del gestore da ottenere.</param>
        <summary>Ottiene il gestore eventi del tipo specificato correntemente attivo.</summary>
        <returns>Una istanza del gestore, oppure <see langword="null" /> se non vi è alcun gestore del tipo richiesto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non si deve mai memorizzare nella cache questo valore perché altri componenti sono gratuite per modificarlo. Questa chiamata è abbastanza veloce, tuttavia, in particolare nei casi in cui si richiedono sempre lo stesso tipo di gestore.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopHandler">
      <MemberSignature Language="C#" Value="public void PopHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PopHandler (handler As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PopHandler(System::Object ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member PopHandler : obj -&gt; unit&#xA;override this.PopHandler : obj -&gt; unit" Usage="eventHandlerService.PopHandler handler" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.PopHandler(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler">Il gestore da rimuovere dallo stack.</param>
        <summary>Rimuove dallo stack il gestore specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il gestore non è il componente in primo piano nello stack, verranno rimossi tutti i gestori fino a e gestore inclusi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushHandler">
      <MemberSignature Language="C#" Value="public void PushHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PushHandler (handler As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PushHandler(System::Object ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member PushHandler : obj -&gt; unit&#xA;override this.PushHandler : obj -&gt; unit" Usage="eventHandlerService.PushHandler handler" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.PushHandler(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler">Gestore da aggiungere allo stack.</param>
        <summary>Aggiunge allo stack un nuovo gestore eventi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo gestore viene utilizzato da tutti i componenti che richiedono un tipo di gestore compatibile. Se questo gestore non supporta il tipo richiesto, verrà utilizzato il gestore successivo nello stack.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>