<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="30819f01cdad2262e6c92321dc4b4113e65b3641" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34316697" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fornisce un meccanismo per modificare o inserire estensioni personalizzate all'interno di un servizio, inclusa la classe <see cref="T:System.ServiceModel.ServiceHostBase" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare l'interfaccia <xref:System.ServiceModel.Description.IServiceBehavior> per modificare, esaminare o estendere aspetti dell'esecuzione del servizio a livello di applicazione:  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> per modificare i valori delle proprietà della fase di esecuzione o inserire oggetti di estensione personalizzati, ad esempio gestori di errori, intercettatori di messaggi o parametri, estensioni di sicurezza e altri oggetti di estensione personalizzati.  
  
-   Utilizzare il <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> metodo per esaminare la descrizione prima di Windows Communication Foundation (WCF) costruisce il servizio in esecuzione per confermare che possono essere eseguiti correttamente.  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> per passare le informazioni personalizzate per il servizio a un elemento dell'associazione, in modo che possa supportare il servizio correttamente.  
  
 Gli oggetti <xref:System.ServiceModel.Description.IServiceBehavior> possono utilizzare uno o più di questi metodi, ma spesso soltanto uno di essi è importante. In questi casi, è possibile che i metodi non utilizzati non restituiscano un valore.  
  
> [!NOTE]
>  Tutti i metodi <xref:System.ServiceModel.Description.IServiceBehavior> passano gli oggetti <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> e <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> come parametri. Il parametro <xref:System.ServiceModel.Description.ServiceDescription> è utilizzabile solo per attività di esame. Se gli oggetti vengono modificati, il comportamento di esecuzione sarà indefinito.  
  
 Per eseguire un'attività di personalizzazione specificata, è necessario aggiungere l'oggetto <xref:System.ServiceModel.Description.IServiceBehavior> alla proprietà <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> prima della costruzione della fase di esecuzione del servizio. A questo scopo, è possibile eseguire tre operazioni:  
  
-   Aggiungere il comportamento del servizio personalizzato a livello di programmazione alla proprietà <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> prima che il metodo <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> venga chiamato sull'oggetto <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>.  
  
-   Creare un attributo personalizzato che implementi <xref:System.ServiceModel.Description.IServiceBehavior> e utilizzarlo per contrassegnare le classi del servizio da modificare. Quando un <xref:System.ServiceModel.ServiceHost> oggetto viene costruito, WCF utilizza la reflection per individuare gli attributi del tipo di servizio. Se gli attributi implementano <xref:System.ServiceModel.Description.IServiceBehavior>, vengono aggiunti alla raccolta di comportamenti su <xref:System.ServiceModel.Description.ServiceDescription>.  
  
-   Estendere la classe <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> per supportare la specifica del comportamento in un'applicazione o in un file di configurazione del computer. Per ulteriori informazioni, vedere la sezione relativa agli esempi.  
  
 Esempi di comportamenti del servizio in WCF il <xref:System.ServiceModel.ServiceBehaviorAttribute> attributo, il <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, la <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> e il <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> comportamento.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare un comportamento del servizio specificato in un file di configurazione per inserire un gestore di errori personalizzato in un'applicazione del servizio. In questo esempio, il gestore di errori intercetta tutte le eccezioni e le converte in un errore SOAP `GreetingFault` personalizzato che verrà quindi restituito al client.  
  
 La seguente implementazione di <xref:System.ServiceModel.Description.IServiceBehavior> non aggiunge alcun oggetto parametro di associazione, aggiunge invece l'oggetto personalizzato <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> a ogni proprietà <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, convalida ogni operazione del servizio al quale viene applicato il comportamento del servizio e dispone di <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> di tipo `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 In questo esempio, la classe di comportamento implementa anche <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> che consente al comportamento del servizio di essere inserito utilizzandolo in un file di configurazione dell'applicazione, come dimostra l'esempio di codice seguente.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">La descrizione del servizio.</param>
        <param name="serviceHostBase">L'host del servizio.</param>
        <param name="endpoints">Gli endpoint del servizio.</param>
        <param name="bindingParameters">Gli oggetti personalizzati ai quali hanno accesso gli elementi di associazione.</param>
        <summary>Consente di passare i dati personalizzati agli elementi di associazione per supportare l'implementazione del contratto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il metodo <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> per aggiungere oggetti dati personalizzati alla raccolta `parameters` utilizzabile dagli elementi di associazione per acquisire informazioni aggiuntive per abilitare il supporto del contratto.  
  
 Questo metodo viene chiamato una volta per ogni URI di ascolto. Ad esempio, se un servizio è dotato di quattro endpoint e due di loro hanno lo stesso URI di ascolto, questo metodo viene chiamato tre volte. Questo succede perché i `bindingParameters` fanno riferimento a ogni stack del canale ed esiste uno stack del canale per ogni URI di ascolto. Poiché ogni chiamata riceve gli endpoint dell'URI di ascolto, ognuna della due chiamate ottiene un singolo oggetto <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>  e una chiamata ottiene una raccolta di due oggetti <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Tutti i metodi <xref:System.ServiceModel.Description.IServiceBehavior> passano gli oggetti <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> e <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> come parametri. Il parametro <xref:System.ServiceModel.Description.ServiceDescription> è utilizzabile solo per esaminare e inserire le personalizzazioni. Se questi oggetti vengono modificati in altro modo, il comportamento di esecuzione sarà indefinito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Descrizione del servizio.</param>
        <param name="serviceHostBase">L'host in fase di generazione.</param>
        <summary>Consente di modificare i valori delle proprietà della fase di esecuzione o inserire oggetti di estensione personalizzati, ad esempio gestori di errori, intercettatori di messaggi o parametri, estensioni di sicurezza e altri oggetti di estensione personalizzati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> per controllare o modificare l'oggetto <xref:System.ServiceModel.ServiceHostBase> in fase di costruzione per supportare uno scenario di esecuzione personalizzata.  
  
> [!NOTE]
>  Tutti i metodi <xref:System.ServiceModel.Description.IServiceBehavior> passano gli oggetti <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> e <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> come parametri. Il parametro <xref:System.ServiceModel.Description.ServiceDescription> è utilizzabile solo per esaminare e inserire le personalizzazioni. Se questi oggetti vengono modificati in altro modo, il comportamento di esecuzione sarà indefinito.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare un comportamento del servizio specificato in un file di configurazione per inserire un gestore di errori personalizzato in un'applicazione del servizio. In questo esempio, il gestore di errori intercetta tutte le eccezioni e le converte in un errore SOAP `GreetingFault` personalizzato che verrà quindi restituito al client.  
  
 La seguente implementazione di <xref:System.ServiceModel.Description.IServiceBehavior> non aggiunge alcun oggetto parametro di associazione, aggiunge invece l'oggetto personalizzato <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> a ogni proprietà <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, convalida ogni operazione del servizio al quale viene applicato il comportamento del servizio e dispone di <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> di tipo `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 In questo esempio, la classe di comportamento implementa anche <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> che consente al comportamento del servizio di essere inserito utilizzandolo in un file di configurazione dell'applicazione, come dimostra l'esempio di codice seguente.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Descrizione del servizio.</param>
        <param name="serviceHostBase">L'host del servizio in fase di costruzione.</param>
        <summary>Consente di controllare l'host del servizio e la descrizione del servizio per verificare che il servizio può essere eseguito correttamente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il metodo <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> per verificare se il servizio corrente può essere eseguito correttamente nello scenario.  
  
> [!NOTE]
>  Tutti i metodi <xref:System.ServiceModel.Description.IServiceBehavior> passano gli oggetti <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> e <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> come parametri. Il parametro <xref:System.ServiceModel.Description.ServiceDescription> è utilizzabile solo per esaminare e inserire le personalizzazioni. Se questi oggetti vengono modificati in altro modo, il comportamento di esecuzione sarà indefinito.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come utilizzare un comportamento del servizio specificato in un file di configurazione per inserire un gestore di errori personalizzato in un'applicazione del servizio. In questo esempio, il gestore di errori intercetta tutte le eccezioni e le converte in un errore SOAP `GreetingFault` personalizzato che verrà quindi restituito al client.  
  
 La seguente implementazione di <xref:System.ServiceModel.Description.IServiceBehavior> non aggiunge alcun oggetto parametro di associazione, aggiunge invece l'oggetto personalizzato <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> a ogni proprietà <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, convalida ogni operazione del servizio al quale viene applicato il comportamento del servizio e dispone di <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> di tipo `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 In questo esempio, la classe di comportamento implementa anche <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> che consente al comportamento del servizio di essere inserito utilizzandolo in un file di configurazione dell'applicazione, come dimostra l'esempio di codice seguente.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>