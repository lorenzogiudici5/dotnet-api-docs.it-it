<Type Name="IEndpointBehavior" FullName="System.ServiceModel.Description.IEndpointBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8eedbd9c390a68760563a0e968935b360513b727" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37617204" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEndpointBehavior" />
  <TypeSignature Language="F#" Value="type IEndpointBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementa metodi che possono essere utilizzati per estendere il comportamento della fase di esecuzione per un endpoint in un'applicazione client o di servizio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare l'interfaccia <xref:System.ServiceModel.Description.IEndpointBehavior> per modificare, esaminare o estendere aspetti dell'esecuzione dell'endpoint a livello di applicazione per applicazioni client o di servizio.  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> per passare dati personalizzati della fase di esecuzione per abilitare le associazioni a supportare il comportamento personalizzato.  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> per modificare, esaminare o inserire estensioni in un endpoint di un'applicazione client.  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> per modificare, esaminare o inserire estensioni in un'esecuzione dell'endpoint in un'applicazione del servizio.  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> per verificare che una classe <xref:System.ServiceModel.Description.ServiceEndpoint> soddisfi requisiti specifici. Questo metodo può essere utilizzato per garantire che in un endpoint sia abilitata una certa impostazione di configurazione, che supporti una particolare funzionalità e altri requisiti.  
  
 Gli oggetti <xref:System.ServiceModel.Description.IEndpointBehavior> possono utilizzare uno o più di questi metodi, ma spesso soltanto uno di essi è importante. In questi casi, è possibile che i metodi non utilizzati non eseguano alcuna azione.  
  
> [!NOTE]
>  Tutti i metodi <xref:System.ServiceModel.Description.IEndpointBehavior> passano un oggetto <xref:System.ServiceModel.Description.ServiceEndpoint> come parametro. Questo parametro è utilizzabile solo per attività di esame. Se l'oggetto <xref:System.ServiceModel.Description.ServiceEndpoint> viene modificato, il comportamento di esecuzione sarà indefinito.  
  
 Gli oggetti <xref:System.ServiceModel.Description.IEndpointBehavior> sono utilizzati in genere per accedere alle varie proprietà degli oggetti <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType> e <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> in un'applicazione del servizio e alle classi <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> e <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> in un'applicazione client. È inoltre possibile accedere alle proprietà di client e servizi duplex utilizzando le proprietà <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> e <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType>, rispettivamente.  
  
 Per una descrizione delle varie proprietà e le personalizzazioni disponibili, vedere [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Dopo che è stata stabilita una personalizzazione (e l'interfaccia della personalizzazione implementata, se necessario) e il <xref:System.ServiceModel.Description.IEndpointBehavior> è stato deciso è l'ambito adatto di personalizzazione, la personalizzazione deve essere inserita nella comunicazione di Windows Foundation (WCF) runtime implementando <xref:System.ServiceModel.Description.IEndpointBehavior> e aggiungendo il comportamento dell'endpoint al runtime.  
  
 Esistono due modi per aggiungere il comportamento alla fase di esecuzione:  
  
-   Aggiungere il comportamento dell'endpoint a livello di programmazione alla proprietà <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> prima dell'apertura del host del servizio (in un'applicazione del servizio) o della channel factory (in un'applicazione client).  
  
-   Configurare il comportamento utilizzando un file di configurazione dell'applicazione. Per informazioni dettagliate, vedere [ &lt;behaviorExtensions&gt;](~/docs/framework/configure-apps/file-schema/wcf/behaviorextensions.md).  
  
 Per eseguire un'attività di personalizzazione nel relativo servizio, è necessario aggiungere l'oggetto <xref:System.ServiceModel.Description.IEndpointBehavior> alla proprietà <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> prima della costruzione della fase di esecuzione del servizio che si verifica quando il metodo <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> viene chiamato sull'oggetto <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Per eseguire un'attività di personalizzazione nel client, è necessario aggiungere l'oggetto <xref:System.ServiceModel.Description.IEndpointBehavior> alla proprietà <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> prima di chiamare il metodo <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> o il metodo <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> su <xref:System.ServiceModel.ChannelFactory%601>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrata l'implementazione di un comportamento dell'endpoint che aggiunge un oggetto <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> a un'applicazione del servizio. In questo caso, la classe `EndpointBehaviorMessageInspector` implementa <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> per controllare il messaggio in entrata e in uscita, l'interfaccia <xref:System.ServiceModel.Description.IEndpointBehavior> per inserire la classe di controllo nel sistema di ispezione per tutti gli endpoint per i quali è valido il comportamento e <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> per abilitare il comportamento del controllo messaggi utilizzando un file di configurazione dell'applicazione.  
  
 Il primo passaggio consiste nell'implementare il controllo messaggi.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> per aggiungere il controllo messaggi alla proprietà <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 Nell'esempio di codice seguente viene illustrata l'implementazione di <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> per abilitare l'utilizzo del comportamento del controllo messaggi da un file di configurazione.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Nel file di configurazione seguente viene illustrato come utilizzare l'esempio precedente dalla configurazione.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iEndpointBehavior.AddBindingParameters (endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint">L'endpoint da modificare.</param>
        <param name="bindingParameters">Oggetti necessari affinché gli elementi associazione supportino il comportamento.</param>
        <summary>Procedere all'implementazione per passare i dati in fase di esecuzione alle associazioni per garantire il supporto del comportamento personalizzato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> per fornire elementi dell'associazione con gli oggetti aggiuntivi necessari per supportare il comportamento dell'endpoint. Quando i parametri di associazione vengono aggiunti, l'associazione può individuare questi oggetti quando il listener del canale o la channel factory vengono creati. In genere, viene implementato il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> per passare informazioni relative all'endpoint a un elemento dell'associazione personalizzato in modo che sia in grado di compilare correttamente un canale di supporto. Non viene restituito alcun valore se non sono necessarie modifiche.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iEndpointBehavior.ApplyClientBehavior (endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="endpoint">Endpoint da personalizzare.</param>
        <param name="clientRuntime">La fase di esecuzione del client da personalizzare.</param>
        <summary>Implementa una modifica o un'estensione del client all'interno di un endpoint.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> per visualizzare, modificare o aggiungere estensioni personalizzate alla fase di esecuzione del client all'interno di tutti i messaggi utilizzati in un endpoint o per un'operazione specifica. Per informazioni dettagliate sulle personalizzazioni applicabili a un oggetto run-time del client, vedere <xref:System.ServiceModel.Dispatcher.ClientRuntime> e <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Si consiglia di far sì che il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> generi un'eccezione <xref:System.NotImplementedException> se il comportamento è destinato solo a essere utilizzato in un'applicazione del servizio.  
  
 Poiché altri comportamenti potrebbero aver già aggiunto o rimosso alcune operazioni dalla fase di esecuzione, non vi è alcuna garanzia che il numero di operazioni nella descrizione corrisponda al numero di oggetti <xref:System.ServiceModel.Dispatcher.DispatchOperation> nella proprietà <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::EndpointDispatcher ^ endpointDispatcher);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.EndpointDispatcher -&gt; unit" Usage="iEndpointBehavior.ApplyDispatchBehavior (endpoint, endpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint">Endpoint che espone il contratto.</param>
        <param name="endpointDispatcher">Dispatcher dell'endpoint da modificare o estendere.</param>
        <summary>Implementa una modifica o un'estensione del servizio all'interno di un endpoint.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> per visualizzare, modificare o estendere la fase di esecuzione del client all'interno di tutti i messaggi o per un operazioni specifiche in un endpoint. Per informazioni dettagliate su quali personalizzazioni è possibile eseguire in un'applicazione del servizio, vedere <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> e <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 Si consiglia di far sì che il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> generi un'eccezione <xref:System.NotImplementedException> se il comportamento è destinato solo a essere utilizzato in un'applicazione client.  
  
 Si noti che possono esistere due operazioni con lo stesso nome nella descrizione se si utilizza un contratto di callback (un'operazione per ogni direzione). Se si scorrono le operazioni, è necessario correlare la direzione del messaggio dell'endpoint <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> e di quello restituito dalla proprietà <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType>.  
  
 Poiché altri comportamenti potrebbero aver già aggiunto o rimosso alcune operazioni dalla fase di esecuzione, non vi è alcuna garanzia che il numero di operazioni nella descrizione corrisponda al numero di oggetti <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> nella proprietà <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrata l'implementazione di un comportamento dell'endpoint che aggiunge un oggetto <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> a un'applicazione del servizio. In questo caso, la classe `EndpointBehaviorMessageInspector` implementa <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> per controllare il messaggio in entrata e in uscita, l'interfaccia <xref:System.ServiceModel.Description.IEndpointBehavior> per inserire la classe di controllo nel sistema di ispezione per tutti gli endpoint per i quali è valido il comportamento e <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> per abilitare il comportamento del controllo messaggi utilizzando un file di configurazione dell'applicazione.  
  
 Il primo passaggio consiste nell'implementare il controllo messaggi.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> per aggiungere il controllo messaggi alla proprietà <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 Nell'esempio di codice seguente viene illustrata l'implementazione di <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> per abilitare l'utilizzo del comportamento del controllo messaggi da un file di configurazione.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Nel file di configurazione seguente viene illustrato come utilizzare l'esempio precedente dalla configurazione.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iEndpointBehavior.Validate endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">Endpoint da convalidare.</param>
        <summary>Procedere all'implementazione per verificare che l'endpoint soddisfi alcuni criteri specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> per esaminare la struttura per verificare i set di criteri. Non è necessario eseguire le personalizzazioni in <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> o in <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> per avvalersi di questo metodo. Se l'endpoint passa la convalida, restituire; in caso contrario, generare un'eccezione.  
  
 Ad esempio, il metodo <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> può essere utilizzato per assicurare che tutti gli endpoint utilizzino un'associazione aziendale approvata.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>