<Type Name="IContractBehavior" FullName="System.ServiceModel.Description.IContractBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="efba3a3172b2130a02d81ffb8b7fbb0551f1b216" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36417734" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IContractBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehavior" />
  <TypeSignature Language="F#" Value="type IContractBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementa metodi che possono essere utilizzati per estendere il comportamento in fase di esecuzione per un contratto in un'applicazione client o del servizio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare l'interfaccia <xref:System.ServiceModel.Description.IContractBehavior> per modificare, esaminare o estendere alcuni aspetti dell'esecuzione del contratto a livello di applicazione. A differenza degli oggetti <xref:System.ServiceModel.Description.IServiceBehavior> e <xref:System.ServiceModel.Description.IEndpointBehavior>, gli oggetti <xref:System.ServiceModel.Description.IContractBehavior> non possono essere aggiunti alla fase di esecuzione mediante un file di configurazione dell'applicazione, bensì solo a livello di programmazione o utilizzando un attributo.  
  
 Per ulteriori informazioni sulla scelta tra il servizio, endpoint e i comportamenti del contratto, vedere [configurazione ed estensione del Runtime con i comportamenti](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> per fornire elementi di associazione con dati personalizzati per supportare il comportamento.  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> per modificare, esaminare o inserire estensioni in un contratto di un'applicazione client.  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> per modificare, esaminare o inserire estensioni in un contratto di un'applicazione del servizio.  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> per accertarsi che un contratto sia in grado di supportare una determinata funzionalità.  
  
 Gli oggetti <xref:System.ServiceModel.Description.IContractBehavior> possono utilizzare uno o più di questi metodi, ma spesso soltanto uno di essi è importante. In questi casi, è possibile che i metodi non utilizzati non restituiscano alcun valore.  
  
> [!NOTE]
>  Tutti i metodi <xref:System.ServiceModel.Description.IContractBehavior> passano <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> e <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> come parametri. Questi parametri sono utilizzabili a fini di esame. Se gli oggetti vengono modificati, il comportamento di esecuzione risulterà indefinito.  
  
 I tipi <xref:System.ServiceModel.Description.IContractBehavior> possono essere utilizzati nel servizio, nel client o in entrambi. Per eseguire un'attività di personalizzazione nel servizio, è necessario aggiungere l'oggetto <xref:System.ServiceModel.Description.IContractBehavior> alla proprietà <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> prima della costruzione della fase di esecuzione del servizio, che si verifica quando il metodo <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> viene chiamato nell'oggetto <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. È possibile ottenere questo risultato in due modi.  
  
 Il primo consiste nell'aggiungere a livello di programmazione il comportamento del contratto personalizzato alla proprietà <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> prima che il metodo <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> venga chiamato nell'oggetto <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. In questo caso, il comportamento viene applicato per tutti i messaggi che passano attraverso il contratto in qualsiasi endpoint.  
  
> [!NOTE]
>  Il comportamento viene applicato a tutti i contratti dello stesso tipo. Se ad esempio si aggiunge lo stesso tipo di contratto a livello di programmazione a più endpoint, il comportamento modifica tutti gli endpoint che fanno riferimento allo stesso oggetto contratto.  
  
 La seconda modalità consiste nel creare un attributo personalizzato che implementa <xref:System.ServiceModel.Description.IContractBehavior> e applicarlo a:  
  
-   Un'interfaccia di contratto. In questo caso, il comportamento viene applicato a tutti i contratti di quel tipo in qualsiasi endpoint.  
  
-   Una classe di servizio.  In questo caso, il comportamento viene applicato a tutti gli endpoint, indipendentemente dal contratto.  
  
-   Una classe di callback.  In questo caso, il comportamento viene applicato all'endpoint del client duplex.  
  
 Il comportamento ottenuto con il secondo approccio varia leggermente se l'attributo personalizzato implementa anche <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType>. In questo caso, il comportamento è il seguente:  
  
-   Un'interfaccia di contratto. In questo caso, il comportamento viene applicato a tutti i contratti di quel tipo in qualsiasi endpoint e Windows Communication Foundation (WCF) ignora il valore della <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> proprietà.  
  
-   Una classe di servizio.  In questo caso, il comportamento viene applicato solo agli endpoint il cui contratto corrisponde al valore della proprietà <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType>.  
  
-   Una classe di callback.  In questo caso, il comportamento viene applicato all'endpoint del client duplex e WCF ignora il valore della <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> proprietà.  
  
 Per eseguire l'attività di personalizzazione sul client al quale è destinata, è necessario aggiungere l'oggetto <xref:System.ServiceModel.Description.IContractBehavior> alla proprietà <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> prima della costruzione della fase di esecuzione del client, che si verifica quando viene chiamato il metodo <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType>. Questo risultato può essere raggiunto in due modi:  
  
-   Aggiungere a livello di programmazione il comportamento del contratto personalizzato alla proprietà <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> prima che il metodo <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> venga chiamato.  
  
-   Creare un attributo personalizzato che implementi anche <xref:System.ServiceModel.Description.IContractBehavior>.  
  
 Per ulteriori informazioni sull'aggiunta a livello di programmazione <xref:System.ServiceModel.Description.IContractBehavior> tipi di applicazione client o servizio, vedere [configurazione ed estensione del Runtime con i comportamenti](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
   
  
## Examples  
 Nell'esempio di codice seguente si presuppone che un'implementazione personalizzata di <xref:System.ServiceModel.Dispatcher.IInstanceProvider> denominata `ObjectProviderBehavior`, la quale fornisce un comportamento "Singleton", restituisca sempre la stessa istanza del servizio e non la ricicli.  
  
 Come illustrato nell'esempio, per applicare la personalizzazione del provider di istanze è possibile implementare un attributo personalizzato (`SingletonBehaviorAttribute`) che implementa l'interfaccia <xref:System.ServiceModel.Description.IContractBehavior> al fine di inserire il provider di istanze del servizio personalizzato. Implementa inoltre <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, che associa l'utilizzo al contratto `ISampleService`.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iContractBehavior.AddBindingParameters (contractDescription, endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="contractDescription">La descrizione del contratto da modificare.</param>
        <param name="endpoint">L'endpoint da modificare.</param>
        <param name="bindingParameters">Oggetti necessari affinché gli elementi associazione supportino il comportamento.</param>
        <summary>Configura qualsiasi elemento di associazione affinché supporti il comportamento del contratto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> per fornire agli elementi di associazione gli oggetti aggiuntivi necessari per supportare il comportamento del contratto.  
  
 Questo metodo viene chiamato una volta per ogni endpoint che utilizza il contratto di servizio specificato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iContractBehavior.ApplyClientBehavior (contractDescription, endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">La descrizione del contratto al quale è destinata l'estensione.</param>
        <param name="endpoint">L'endpoint.</param>
        <param name="clientRuntime">Fase di esecuzione del client.</param>
        <summary>Implementa una modifica o un'estensione del client all'interno di un contratto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> per visualizzare, modificare o aggiungere estensioni personalizzate alla fase di esecuzione del client all'interno di tutti i messaggi o per un'operazione specifica. Per informazioni dettagliate sulle personalizzazioni applicabili a un oggetto run-time del client, vedere <xref:System.ServiceModel.Dispatcher.ClientRuntime> e <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Il metodo <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> può generare un'eccezione <xref:System.NotImplementedException> se il comportamento è destinato solo all'utilizzo in un'applicazione del servizio.  
  
 Questo metodo viene chiamato una volta per ogni endpoint che utilizza il contratto di servizio specificato.  
  
 Si noti che possono esistere due operazioni con lo stesso nome nella descrizione (uno per ogni direzione), pertanto se è necessario scorrere le operazioni in cui un contratto di tipo duplex, è necessario creare una relazione della direzione del messaggio tra l'endpoint <xref:System.ServiceModel.Dispatcher.ClientRuntime> e quello restituito dalla proprietà <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A>.  
  
 Poiché altri comportamenti potrebbero avere già aggiunto o rimosso alcune operazioni nella fase di esecuzione, non vi è alcuna garanzia che il numero di operazioni nella descrizione corrisponda al numero di oggetti <xref:System.ServiceModel.Dispatcher.ClientOperation> nella proprietà <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente si presuppone che un'implementazione personalizzata di <xref:System.ServiceModel.Dispatcher.IInstanceProvider> denominata `ObjectProviderBehavior`, la quale fornisce un comportamento "Singleton", restituisca sempre la stessa istanza del servizio e non la ricicli.  
  
 Come illustrato nell'esempio, per applicare la personalizzazione del provider di istanze è possibile implementare un attributo personalizzato (`SingletonBehaviorAttribute`) che implementa l'interfaccia <xref:System.ServiceModel.Description.IContractBehavior> al fine di inserire il provider di istanze del servizio personalizzato. Implementa inoltre <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, che associa l'utilizzo al contratto `ISampleService`.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::DispatchRuntime ^ dispatchRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.DispatchRuntime -&gt; unit" Usage="iContractBehavior.ApplyDispatchBehavior (contractDescription, endpoint, dispatchRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="dispatchRuntime" Type="System.ServiceModel.Dispatcher.DispatchRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">La descrizione del contratto da modificare.</param>
        <param name="endpoint">Endpoint che espone il contratto.</param>
        <param name="dispatchRuntime">La fase di esecuzione della distribuzione che controlla l'esecuzione del servizio.</param>
        <summary>Implementa una modifica o un'estensione del client all'interno di un contratto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> per visualizzare, modificare o aggiungere estensioni personalizzate alla fase di esecuzione del servizio all'interno di tutti i messaggi di un contratto specifico o per un'operazione specifica nello stesso contratto. Per informazioni dettagliate su quali personalizzazioni è possibile eseguire in un'applicazione del servizio, vedere <xref:System.ServiceModel.Dispatcher.DispatchRuntime> e <xref:System.ServiceModel.Dispatcher.DispatchOperation>.  
  
 Il metodo <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> può generare un'eccezione <xref:System.NotImplementedException> se il comportamento è destinato soltanto all'utilizzo in un'applicazione client.  
  
 Questo metodo viene chiamato una volta per ogni endpoint che utilizza il contratto di servizio specificato.  
  
 Si noti che possono esistere due operazioni con lo stesso nome nella descrizione (uno per ogni direzione), pertanto se è necessario scorrere le operazioni in cui un contratto di tipo duplex, è necessario creare una relazione della direzione del messaggio tra l'endpoint <xref:System.ServiceModel.Dispatcher.DispatchRuntime> e quello restituito dalla proprietà <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A>.  
  
 Poiché altri comportamenti potrebbero aver già aggiunto o rimosso alcune operazioni dalla fase di esecuzione, non vi è alcuna garanzia che il numero di operazioni nella descrizione corrisponda al numero di oggetti <xref:System.ServiceModel.Dispatcher.DispatchOperation> nella proprietà <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente si presuppone che un'implementazione personalizzata di <xref:System.ServiceModel.Dispatcher.IInstanceProvider> denominata `ObjectProviderBehavior`, la quale fornisce un comportamento "Singleton", restituisca sempre la stessa istanza del servizio e non la ricicli.  
  
 Come illustrato nell'esempio, per applicare la personalizzazione del provider di istanze è possibile implementare un attributo personalizzato (`SingletonBehaviorAttribute`) che implementa l'interfaccia <xref:System.ServiceModel.Description.IContractBehavior> al fine di inserire il provider di istanze del servizio personalizzato. Implementa inoltre <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, che associa l'utilizzo al contratto `ISampleService`.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iContractBehavior.Validate (contractDescription, endpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Il contratto da convalidare.</param>
        <param name="endpoint">Endpoint da convalidare.</param>
        <summary>Procedere all'implementazione per verificare che il contratto e l'endpoint siano in grado di supportare il comportamento del contratto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> per verificare che la descrizione del contratto sia sufficiente per supportare il comportamento del contratto personalizzato. Le implementazioni possono esaminare la descrizione e non generare o restituire valori.  
  
 Questo metodo viene chiamato una volta per ogni endpoint che utilizza il contratto di servizio specificato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>