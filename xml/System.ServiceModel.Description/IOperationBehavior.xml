<Type Name="IOperationBehavior" FullName="System.ServiceModel.Description.IOperationBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c732ce96a8a54292f54ffa327ffe74131f357db0" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="it-IT" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52235022" /></Metadata><TypeSignature Language="C#" Value="public interface IOperationBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOperationBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IOperationBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOperationBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IOperationBehavior" />
  <TypeSignature Language="F#" Value="type IOperationBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementa metodi che possono essere utilizzati per estendere il comportamento della fase di esecuzione per un'operazione in un'applicazione client o di servizio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare l'interfaccia <xref:System.ServiceModel.Description.IOperationBehavior> per modificare, esaminare o estendere aspetti dell'esecuzione dell'operazione a livello di applicazione per applicazioni client o di servizio.  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> per passare dati personalizzati della fase di esecuzione per abilitare le associazioni a supportare il comportamento personalizzato.  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> per modificare, esaminare o inserire estensioni in un dispatcher client di un'applicazione client.  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> per modificare, esaminare o inserire estensioni in un'esecuzione dell'operazione in un'applicazione del servizio.  
  
-   Utilizzare il metodo <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> per verificare che una classe <xref:System.ServiceModel.Description.OperationDescription> soddisfi requisiti specifici. Questo metodo può essere utilizzato per garantire che in un'operazione sia abilitata una certa impostazione di configurazione, che supporti una particolare funzionalità e altri requisiti.  
  
 Gli oggetti <xref:System.ServiceModel.Description.IOperationBehavior> possono utilizzare uno o più di questi metodi, ma spesso soltanto uno di essi è importante. In questi casi, è possibile che i metodi non utilizzati non eseguano alcuna azione.  
  
> [!NOTE]
>  Tutti i metodi <xref:System.ServiceModel.Description.IOperationBehavior> passano un oggetto <xref:System.ServiceModel.Description.OperationDescription> come parametro. Questo parametro è utilizzabile solo per attività di esame. Se l'oggetto <xref:System.ServiceModel.Description.OperationDescription> viene modificato, il comportamento di esecuzione sarà indefinito.  
  
 Gli oggetti <xref:System.ServiceModel.Description.IOperationBehavior> sono utilizzati in genere per accedere alle proprietà dell'oggetto <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> in un'applicazione del servizio e dell'oggetto <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> in un'applicazione client.  
  
 Lo sviluppatore in genere prima esegue la revisione dei punti di estensibilità per determinare quale opzione della personalizzazione si adatta allo scenario dell'applicazione e quindi implementa la personalizzazione nell'ambito appropriato. Ad esempio, gli oggetti <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> possono inserire personalizzazioni per tutti i messaggi di un servizio e gli oggetti <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> possono inserire personalizzazioni per tutti i messaggi di un contratto specifico e così via. Per una descrizione delle varie proprietà e le personalizzazioni disponibili, vedere [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Dopo che è stata stabilita una personalizzazione (e l'interfaccia della personalizzazione implementata, se necessario) e il <xref:System.ServiceModel.Description.IOperationBehavior> è l'ambito adatto di personalizzazione, la personalizzazione deve essere inserita nel runtime di Windows Communication Foundation (WCF) implementando <xref:System.ServiceModel.Description.IOperationBehavior> e il comportamento dell'operazione di aggiunta al runtime.  
  
 Esistono due modi per aggiungere l'interfaccia <xref:System.ServiceModel.Description.IOperationBehavior> alla fase di esecuzione:  
  
-   Aggiungere il comportamento dell'operazione a livello di programmazione alla proprietà <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> prima dell'apertura del host del servizio (in un'applicazione del servizio) o della channel factory (in un'applicazione client).  
  
-   Aggiungere il comportamento utilizzando un attributo personalizzato.  
  
 Per eseguire un'attività di personalizzazione nel relativo servizio, è necessario aggiungere l'oggetto <xref:System.ServiceModel.Description.IOperationBehavior> alla proprietà <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> prima della costruzione della fase di esecuzione del servizio che si verifica quando il metodo <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> viene chiamato sull'oggetto <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Per eseguire un'attività di personalizzazione nel client, è necessario aggiungere l'oggetto <xref:System.ServiceModel.Description.IOperationBehavior> alla proprietà <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> prima di chiamare il metodo <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> o il metodo <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> su <xref:System.ServiceModel.ChannelFactory%601>.  
  
 Anche se il comportamento dell'operazione è progettato per consentire l'accesso facilitato alla fase di esecuzione nell'ambito di un'operazione singola, è possibile accedere alla fase di esecuzione in un ambito maggiore accedendo all'oggetto della fase di esecuzione padre.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene visualizzata un'implementazione di <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> che scrive una stringa sulla console quando il controllo viene chiamato su un'operazione. Questa personalizzazione può essere associata solo a <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> o a <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> e viene inserita generalmente da un comportamento dell'operazione.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Nell'esempio di codice seguente viene illustrato come il comportamento dell'operazione colleghi il controllo di parametro alla fase di esecuzione.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iOperationBehavior.AddBindingParameters (operationDescription, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Operazione esaminata. Utilizzare solo per attività di esame. Se la descrizione dell'operazione è modificata, i risultati non sono definiti.</param>
        <param name="bindingParameters">Raccolta di oggetti necessari agli elementi dell'associazione per supportare il comportamento.</param>
        <summary>Procedere all'implementazione per passare i dati in fase di esecuzione alle associazioni per garantire il supporto del comportamento personalizzato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> per fornire elementi dell'associazione con gli oggetti aggiuntivi necessari per supportare il comportamento dell'operazione. Quando i parametri di associazione vengono aggiunti, l'associazione può individuare ed elaborare questi oggetti quando il listener del canale o la channel factory vengono creati. In genere, viene implementato il metodo <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> per passare informazioni relative all'operazione a un elemento di associazione personalizzato in modo che sia in grado di compilare correttamente un canale di supporto. Non viene restituito alcun valore se non sono necessarie modifiche.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.ClientOperation clientOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.ClientOperation clientOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::ClientOperation ^ clientOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.ClientOperation -&gt; unit" Usage="iOperationBehavior.ApplyClientBehavior (operationDescription, clientOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="clientOperation" Type="System.ServiceModel.Dispatcher.ClientOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Operazione esaminata. Utilizzare solo per attività di esame. Se la descrizione dell'operazione è modificata, i risultati non sono definiti.</param>
        <param name="clientOperation">L'oggetto runtime che espone le proprietà della personalizzazione per l'operazione descritta da <paramref name="operationDescription" />.</param>
        <summary>Implementa una modifica o un'estensione del client all'interno di un'operazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> per visualizzare, modificare o aggiungere un'estensione personalizzata alla fase di esecuzione del client all'interno di tutti i messaggi utilizzati per un'operazione specifica. Per informazioni dettagliate sulle personalizzazioni applicabili a un oggetto run-time del client, vedere <xref:System.ServiceModel.Dispatcher.ClientRuntime> e <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Si consiglia di far sì che il metodo <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> generi un'eccezione <xref:System.NotImplementedException> se il comportamento è destinato solo a essere utilizzato in un'applicazione del servizio.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene visualizzata un'implementazione di <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> che scrive una stringa sulla console quando il controllo viene chiamato su un'operazione. Questa personalizzazione può essere associata solo a <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> o a <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> e viene inserita generalmente da un comportamento dell'operazione.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Nell'esempio di codice seguente viene illustrato come il comportamento dell'operazione colleghi il controllo di parametro alla fase di esecuzione.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::DispatchOperation ^ dispatchOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.DispatchOperation -&gt; unit" Usage="iOperationBehavior.ApplyDispatchBehavior (operationDescription, dispatchOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="dispatchOperation" Type="System.ServiceModel.Dispatcher.DispatchOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Operazione esaminata. Utilizzare solo per attività di esame. Se la descrizione dell'operazione è modificata, i risultati non sono definiti.</param>
        <param name="dispatchOperation">L'oggetto runtime che espone le proprietà della personalizzazione per l'operazione descritta da <paramref name="operationDescription" />.</param>
        <summary>Implementa una modifica o un'estensione del servizio all'interno di un'operazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> per visualizzare, modificare o estendere la fase di esecuzione del client all'interno di tutti i messaggi o per un'operazione specifica. Per informazioni dettagliate su quali personalizzazioni è possibile eseguire in un'applicazione del servizio, vedere <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> e <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 Si consiglia di far sì che il metodo <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> generi un'eccezione <xref:System.NotImplementedException> se il comportamento è destinato solo a essere utilizzato in un'applicazione client.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene visualizzata un'implementazione di <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> che scrive una stringa sulla console quando il controllo viene chiamato su un'operazione. Questa personalizzazione può essere associata solo a <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> o a <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> e viene inserita generalmente da un comportamento dell'operazione.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Nell'esempio di codice seguente viene illustrato come il comportamento dell'operazione colleghi il controllo di parametro alla fase di esecuzione.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.OperationDescription operationDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.OperationDescription operationDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::OperationDescription ^ operationDescription);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.OperationDescription -&gt; unit" Usage="iOperationBehavior.Validate operationDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Operazione esaminata. Utilizzare solo per attività di esame. Se la descrizione dell'operazione è modificata, i risultati non sono definiti.</param>
        <summary>Procedere all'implementazione per verificare che l'operazione soddisfi alcuni criteri specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> per esaminare la struttura per verificare i set di criteri. Non è necessario eseguire le personalizzazioni in <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> o in <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> per avvalersi di questo metodo. Se l'operazione supera la convalida, restituire; in caso contrario, generare un'eccezione.  
  
 Ad esempio, il metodo <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> può essere utilizzato per garantire che un'operazione sia autorizzata.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>