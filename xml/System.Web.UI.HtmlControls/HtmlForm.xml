<Type Name="HtmlForm" FullName="System.Web.UI.HtmlControls.HtmlForm">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a9269c871537e84afc2061b0e882b63e40aa2716" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30590955" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HtmlForm : System.Web.UI.HtmlControls.HtmlContainerControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HtmlForm extends System.Web.UI.HtmlControls.HtmlContainerControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlControls.HtmlForm" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlForm&#xA;Inherits HtmlContainerControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlForm : System::Web::UI::HtmlControls::HtmlContainerControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlControls.HtmlContainerControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce accesso a livello di codice all'elemento HTML <see langword="&lt;form&gt;" /> sul server.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlControls.HtmlForm> controllo è un contenitore per controlli del server in una pagina Web Form. Tutti i controlli server che eseguono il postback al server devono trovarsi tra i tag di apertura e chiusura di un <xref:System.Web.UI.HtmlControls.HtmlForm> controllo.  
  
> [!NOTE]
>  In ASP.NET è consentito un solo <xref:System.Web.UI.HtmlControls.HtmlForm> controllo attivo su una pagina Web Form. Se è presente più di una active <xref:System.Web.UI.HtmlControls.HtmlForm> controllo in una pagina Web Form, common language runtime genererà un <xref:System.Web.HttpException?displayProperty=nameWithType> eccezione quando si richiede la pagina. Tuttavia, è possibile utilizzare un <xref:System.Web.UI.WebControls.MultiView> consentono di controllare ogni <xref:System.Web.UI.WebControls.View> oggetto contiene uno <xref:System.Web.UI.HtmlControls.HtmlForm> controllare, in quanto un solo <xref:System.Web.UI.WebControls.View> è attiva in qualsiasi momento.  
  
 È possibile controllare il comportamento del <xref:System.Web.UI.HtmlControls.HtmlForm> controllo impostandone le proprietà. Per specificare il tipo di codifica per i dati del form, impostare il <xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A> proprietà. Il metodo (`GET` o `POST`) che utilizza un browser per inviare i dati del form al server per l'elaborazione viene specificata impostando il <xref:System.Web.UI.HtmlControls.HtmlForm.Method%2A> proprietà.  
  
> [!CAUTION]
>  Per impostazione predefinita, la proprietà <xref:System.Web.UI.HtmlControls.HtmlForm.Method%2A> è impostata su `POST`. È possibile modificare il valore di questa proprietà su `GET`, ma questo potrebbe interrompere lo stato incorporato e i servizi forniti dal framework della pagina ASP.NET di postback.  
  
 È possibile configurare i controlli che implementano il <xref:System.Web.UI.WebControls.IButtonControl> interfaccia da inviare a una pagina di destinazione diverso. Questo processo è detto invio tra pagine. Per ulteriori informazioni, vedere [tra pagine di registrazione Web Form ASP.NET](http://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b).  
  
 Per un elenco di valori di proprietà iniziali per un'istanza di <xref:System.Web.UI.HtmlControls.HtmlForm>, vedere il <xref:System.Web.UI.HtmlControls.HtmlForm.%23ctor%2A> costruttore.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare la <xref:System.Web.UI.HtmlControls.HtmlForm> classe per creare un modulo semplice.  
  
 [!code-aspx-csharp[HtmlForm#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm/CS/htmlformcs.aspx#1)]
 [!code-aspx-vb[HtmlForm#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm/VB/htmlformvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.HtmlControls.HtmlContainerControl" />
    <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Enctype" />
    <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Method" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlForm();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo costruttore per creare e inizializzare una nuova istanza di <xref:System.Web.UI.HtmlControls.HtmlForm> classe.  
  
 Nella tabella seguente mostra il valore di proprietà iniziali per un'istanza di <xref:System.Web.UI.HtmlControls.HtmlForm>.  
  
|Proprietà|Valore iniziale|  
|--------------|-------------------|  
|<xref:System.Web.UI.HtmlControls.HtmlControl.TagName%2A>|La stringa letterale "form".|  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come creare una nuova istanza di <xref:System.Web.UI.HtmlControls.HtmlForm> controllare e inserirlo nella pagina Web.  
  
 [!code-aspx-csharp[HtmlFormCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlFormCtor/CS/htmlformctorcs.aspx#1)]
 [!code-aspx-vb[HtmlFormCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlFormCtor/VB/htmlformctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlControl.TagName" />
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'attributo di azione del formato HTML.</summary>
        <value>Attributo di azione del formato HTML. Il valore predefinito è <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.HtmlControls.HtmlForm.Action%2A> proprietà quando si riscrive l'URL della richiesta originale ma si desidera conservare l'URL originale per l'attributo di azione del form HTML. Impostare il <xref:System.Web.UI.HtmlControls.HtmlForm.Action%2A> dell'URL che si desidera mantenere il valore della proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpContext.RewritePath(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ClientID">
      <MemberSignature Language="C#" Value="public override string ClientID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.ClientID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ClientID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ClientID { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'identificatore del controllo generato da [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] per il controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <value>Identificatore del controllo generato da [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] per il <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> controllo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per evitare conflitti di denominazione quando più istanze di un controllo del rendering, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] genera automaticamente un univoco <xref:System.Web.UI.HtmlControls.HtmlForm.ClientID%2A> valore per ogni controllo in una pagina. Per altre informazioni, vedere la proprietà <xref:System.Web.UI.Control.ClientID%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuovo insieme <see cref="T:System.Web.UI.ControlCollection" /> per il controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <returns>Oggetto <see cref="T:System.Web.UI.ControlCollection" /> che contiene i controlli server figlio del controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="DefaultButton">
      <MemberSignature Language="C#" Value="public string DefaultButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultButton" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultButton As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultButton { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il controllo figlio del controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> che determina il postback quando viene premuto INVIO.</summary>
        <value>Controllo <see cref="P:System.Web.UI.Control.ID" /> del controllo pulsante da visualizzare come pulsante predefinito quando viene caricato il controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> proprietà consente di specificare che gli utenti possono causare un postback premendo INVIO in un controllo di input nel formato (ad esempio una casella di testo). È possibile specificare come pulsante predefinito qualsiasi controllo che deriva dal <xref:System.Web.UI.WebControls.IButtonControl> interfaccia, ad eccezione di <xref:System.Web.UI.WebControls.LinkButton> controllo. Se il controllo a cui fa riferimento il <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> non deriva dalla proprietà <xref:System.Web.UI.WebControls.IButtonControl>, un <xref:System.InvalidOperationException> viene generata un'eccezione.  
  
 Se si utilizzano pagine master e si imposta la <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> proprietà da una pagina contenuto, utilizzare il <xref:System.Web.UI.Control.UniqueID%2A> proprietà del <xref:System.Web.UI.WebControls.IButtonControl> pulsante. Per ulteriori informazioni sulle pagine master, vedere [pagine Master ASP.NET](http://msdn.microsoft.com/library/4e53eedf-8304-4e7a-aed1-691a2623b28b).  
  
 Il <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> proprietà potrebbe non causare un postback negli scenari seguenti:  
  
-   Premendo INVIO quando lo stato attivo si trova all'esterno dei controlli di input nel modulo. L'azione di postback predefinita non è garantita per essere attivata.  
  
-   Quando lo stato attivo si trova all'interno di una casella di testo multiriga, premere INVIO. In una casella di testo su più righe, il comportamento previsto è che premendo INVIO viene creata una nuova riga nella casella di testo. In alcuni browser, premendo INVIO all'interno di un trigger di casella di testo multilinea un postback. In tal caso, se si desidera immettere per creare una nuova riga, invece, è possibile collegare una funzione JavaScript per il controllo di input. Lo script deve acquisire il tasto INVIO e interrompere il postback. Ad esempio, è possibile utilizzare il <xref:System.Web.UI.WebControls.WebControl.Attributes%2A> raccolta di proprietà per aggiungere lo script client per il `onKeyPress` evento.  
  
-   Specifica un <xref:System.Web.UI.WebControls.LinkButton> controllo come pulsante predefinito. Solo <xref:System.Web.UI.WebControls.Button> e <xref:System.Web.UI.WebControls.ImageButton> i controlli sono supportati.  
  
-   Modifica il <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> proprietà a livello di programmazione durante un postback asincrono. I postback asincroni possono essere abilitati in una pagina aggiungendo uno o più <xref:System.Web.UI.UpdatePanel> controlli alla pagina. Per ulteriori informazioni, vedere [Cenni preliminari sul controllo UpdatePanel](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a) e [Panoramica per il Rendering parziale della pagina](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come impostare il <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> proprietà per impostare il controllo predefinito che causa un postback.  
  
 [!code-aspx-csharp[HtmlForm.DefaultButton#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.DefaultButton/CS/htmlform.defaultbuttoncs.aspx#1)]
 [!code-aspx-vb[HtmlForm.DefaultButton#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.DefaultButton/VB/htmlform.defaultbuttonvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il tipo del controllo indicato come pulsante predefinito non è <see cref="T:System.Web.UI.WebControls.IButtonControl" />.</exception>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus" />
        <altmember cref="P:System.Web.UI.Control.ID" />
        <altmember cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="T:System.Web.UI.WebControls.IButtonControl" />
      </Docs>
    </Member>
    <Member MemberName="DefaultFocus">
      <MemberSignature Language="C#" Value="public string DefaultFocus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultFocus" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultFocus As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultFocus { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il controllo sul form da visualizzare come controllo con lo stato attivo per l'input quando viene caricato il controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <value>Controllo <see cref="P:System.Web.UI.Control.ClientID" /> del controllo sul form da visualizzare come controllo con lo stato attivo per l'input quando viene caricato il controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> proprietà per accedere al controllo del form da visualizzare come il controllo con input lo stato attivo quando il <xref:System.Web.UI.HtmlControls.HtmlForm> caricamento del controllo. I controlli che possono essere selezionati vengono visualizzati con un segnale visivo che indica che lo stato attivo. Ad esempio, un <xref:System.Web.UI.WebControls.TextBox> controllo con lo stato attivo viene visualizzato con il punto d'inserimento posizionato all'interno.  
  
 Inoltre possibile impostare il controllo con lo stato attivo usando il <xref:System.Web.UI.Control.Focus%2A> o <xref:System.Web.UI.Page.SetFocus%2A> metodi. Questi metodi hanno la precedenza sul <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> proprietà. Se uno di questi metodi vengono chiamato per impostare il controllo con lo stato attivo, il valore di <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> proprietà viene ignorata.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come impostare il <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> proprietà per visualizzare un controllo specificato in un form come controllo con stato attivo di input quando il form viene caricato. Quando `Form1` esegue il rendering, si noti che il punto di inserimento viene posizionato `TextBox1`, a indicare che `TextBox1` è il controllo con lo stato attivo.  
  
 [!code-aspx-csharp[HtmlForm.DefaultButton#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.DefaultButton/CS/htmlform.defaultbuttoncs.aspx#1)]
 [!code-aspx-vb[HtmlForm.DefaultButton#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.DefaultButton/VB/htmlform.defaultbuttonvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" />
        <altmember cref="P:System.Web.UI.Control.ID" />
        <altmember cref="M:System.Web.UI.Control.Focus" />
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="Enctype">
      <MemberSignature Language="C#" Value="public string Enctype { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Enctype" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Enctype" />
      <MemberSignature Language="VB.NET" Value="Public Property Enctype As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Enctype { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il tipo di codifica utilizzato da un browser per l'invio dei dati del form al server.</summary>
        <value>Stringa che contiene il tipo di codifica. Il valore predefinito è una stringa vuota (""), che indica che viene utilizzato il tipo di contenuto predefinito del browser.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A> proprietà per specificare il tipo di codifica un browser utilizza per inviare dati al server.  
  
 La tabella seguente illustra i tipi di codifica più comuni.  
  
|Tipo di codifica|Descrizione|  
|-------------------|-----------------|  
|application/x-www-form-urlencoded|Dati del form viene codificati come coppie nome/valore. Questo è il formato di codifica standard.|  
|multipart/form-data|Dati del form viene codificati come un messaggio con una parte distinta per ogni controllo nella pagina.|  
|Testo|Dati del form sono codificati in formato testo normale, senza alcun controllo o i caratteri di formattazione.|  
  
 Per ulteriori informazioni sui tipi di codifica, vedere il [World Wide Web Consortium (W3C sito](http://go.microsoft.com/fwlink/?linkid=37125).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A> proprietà per specificare il tipo di codifica il browser utilizza per inviare dati al server.  
  
 [!code-aspx-csharp[HtmlForm#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm/CS/htmlformcs.aspx#1)]
 [!code-aspx-vb[HtmlForm#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm/VB/htmlformvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Method" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public string Method { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Method" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Method" />
      <MemberSignature Language="VB.NET" Value="Public Property Method As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Method { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il modo in cui un browser invia i dati del form al server perché li elabori.</summary>
        <value>Stringa che indica il modo in cui un browser invia i dati del form al server. Il valore predefinito è <see langword="POST" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questa proprietà per specificare come il browser invia i dati del form al server per l'elaborazione. I due metodi comuni supportati da tutti i browser sono `GET` e `POST`.  
  
> [!CAUTION]
>  È possibile sostituire il valore predefinito di questa proprietà e utilizzare il `GET` anziché `POST`. Tuttavia, poiché `GET` richieste sono limitate di quantità di dati possono includere, utilizzando il `GET` metodo potrebbe, in alcuni casi, le funzionalità di gestione di postback e sullo state fornite dal framework della pagina ASP.NET esito negativo.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlControls.HtmlForm.Method%2A> proprietà per specificare che i dati di modulo vengono inviati al server.  
  
 [!code-aspx-csharp[HtmlForm#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm/CS/htmlformcs.aspx#1)]
 [!code-aspx-vb[HtmlForm#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm/VB/htmlformvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Enctype" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome dell'identificatore per il controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <value>Stringa che contiene il nome dell'identificatore per il controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> proprietà per determinare il nome di identificatore univoco per un <xref:System.Web.UI.HtmlControls.HtmlForm> controllo. In questa implementazione, l'impostazione di questa proprietà restituisce il valore della <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> proprietà. Tuttavia, l'impostazione della proprietà non assegnare un valore alla proprietà. L'impostazione della proprietà non assegna un valore per questa proprietà perché il <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> proprietà deve avere lo stesso valore di <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> proprietà.  
  
> [!NOTE]
>  Il `name` attributo non è un attributo conforme a XHTML e non viene eseguito da ASP.NET indipendentemente dal valore di `xhtmlConformance` impostazione.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.UniqueID" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> in cui sono contenuti i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.Control.Init" /> per il controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando riceve una notifica tramite il <xref:System.Web.UI.HtmlControls.HtmlForm.OnInit%2A> (metodo), controlli server Web devono eseguire le operazioni di inizializzazione necessari per creare e configurare un'istanza. In questa fase del ciclo di vita del controllo server, lo stato di visualizzazione del controllo non sono ancora da popolare. Inoltre, è possibile accedere ad altri controlli server quando viene chiamato questo metodo, che si tratti di un controllo figlio o padre di questo controllo. Altri controlli server non è necessariamente essere creato e pronto per l'accesso.  
  
 Quando viene generato un evento, il gestore dell'evento viene richiamato tramite un delegato. Per ulteriori informazioni, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Il metodo <xref:System.Web.UI.WebControls.GridView.OnInit%2A> consente inoltre alle classi derivate di gestire l'evento senza associare un delegato. È la tecnica consigliata per la gestione dell'evento in una classe derivata.  
  
 Il <xref:System.Web.UI.HtmlControls.HtmlForm.OnInit%2A> metodo viene usato principalmente dagli sviluppatori di controlli per estendere la funzionalità del <xref:System.Web.UI.HtmlControls.HtmlForm> controllo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override di <see cref="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" /> metodo in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" /> metodo in modo che i delegati registrati ricevano l'evento. Inoltre, chiamare la classe base <see cref="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" /> metodo assicura che il <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> controllo sia impostato correttamente quando il modulo della pagina Web e viene mantenuto lo stato di visualizzazione della pagina.</para>
        </block>
        <altmember cref="M:System.Web.UI.Page.RegisterViewStateHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Genera l'evento <see cref="E:System.Web.UI.Control.PreRender" /> per il controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlControls.HtmlForm.OnPreRender%2A> metodo viene chiamato appena prima del rendering di <xref:System.Web.UI.HtmlControls.HtmlForm> controllo. Se il <xref:System.Web.UI.Page.SmartNavigation%2A?displayProperty=nameWithType> è impostata su `true`, <xref:System.Web.UI.HtmlControls.HtmlForm.OnPreRender%2A> metodo registra il riferimento di file di script di navigazione in modo che il rendering.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.Page.SmartNavigation%2A?displayProperty=nameWithType> proprietà è stata deprecata in ASP.NET versione 2.0.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.SmartNavigation" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (output As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="output">Oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> che riceve il contenuto di cui è stato eseguito il rendering.</param>
        <summary>Esegue il rendering del controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> sull'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlControls.HtmlForm.Render%2A> metodo esegue il rendering HTML `<iframe>` elemento se il <xref:System.Web.UI.Page.SmartNavigation%2A> è impostata su `true`. Il <xref:System.Web.UI.HtmlControls.HtmlForm.Render%2A> metodo chiama il metodo base <xref:System.Web.UI.Control.Render%2A> metodo.  
  
 Il <xref:System.Web.UI.HtmlControls.HtmlForm.Render%2A> metodo viene usato principalmente dagli sviluppatori di controlli per estendere la funzionalità del <xref:System.Web.UI.HtmlControls.HtmlForm> controllo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Il controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> non viene sottoposto a rendering senza un riferimento all'istanza <see cref="T:System.Web.UI.Page" />.</exception>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override di <see cref="M:System.Web.UI.HtmlControls.HtmlForm.Render(System.Web.UI.HtmlTextWriter)" /> metodo in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Web.UI.HtmlControls.HtmlForm.Render(System.Web.UI.HtmlTextWriter)" /> metodo in modo che il <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> controlli figlio del controllo vengono correttamente eseguito il rendering.</para>
        </block>
        <altmember cref="T:System.Web.HttpException" />
        <altmember cref="P:System.Web.UI.Page.SmartNavigation" />
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderAttributes">
      <MemberSignature Language="C#" Value="protected override void RenderAttributes (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderAttributes(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RenderAttributes (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RenderAttributes(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> che riceve il contenuto di cui è stato eseguito il rendering.</param>
        <summary>Esegue il rendering degli attributi del controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> nell'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes%2A> metodo utilizza il <xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A> metodo per verificare il <xref:System.Web.UI.HtmlControls.HtmlForm> degli attributi del controllo per assicurarsi che sia possibile eseguirne il rendering nel tag di apertura di un `<form>` elemento HTML.  
  
 Inoltre, il <xref:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes%2A> metodo esegue il rendering di `method`, `action`, e `onsubmit` gli attributi del <xref:System.Web.UI.HtmlControls.HtmlForm> controllo. Se l'ID di controllo è impostato nel <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> proprietà non implementa il <xref:System.Web.UI.WebControls.IButtonControl> interfaccia, un <xref:System.InvalidOperationException> viene generata un'eccezione.  
  
 Il <xref:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes%2A> metodo viene usato principalmente dagli sviluppatori di controlli per estendere la funzionalità del <xref:System.Web.UI.HtmlControls.HtmlForm> controllo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il tipo dell'ID di controllo impostato nella proprietà <see cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" /> non è <see cref="T:System.Web.UI.WebControls.IButtonControl" />.</exception>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override di <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" /> metodo in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" /> metodo in modo che il <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> vengono correttamente eseguito il rendering degli attributi del controllo.</para>
        </block>
        <altmember cref="M:System.Web.UI.HtmlControls.HtmlControl.RenderAttributes(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" />
        <altmember cref="T:System.Web.UI.WebControls.IButtonControl" />
        <altmember cref="T:System.InvalidOperationException" />
      </Docs>
    </Member>
    <Member MemberName="RenderChildren">
      <MemberSignature Language="C#" Value="protected internal override void RenderChildren (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderChildren(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.RenderChildren(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RenderChildren (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RenderChildren(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> che riceve il contenuto di cui è stato eseguito il rendering.</param>
        <summary>Esegue il rendering dei controlli figlio del controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.UI.HtmlControls.HtmlForm.RenderChildren%2A> metodo esegue il rendering dello script client per garantire che lo stato attivo del browser è impostato per il controllo specificato nella <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> proprietà.  
  
> [!NOTE]
>  Il controllo specificato dal <xref:System.Web.UI.Page.SetFocus%2A?displayProperty=nameWithType> avrà la precedenza su un controllo specificato per il <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">La pagina Web dispone di più di un tag <see langword="&lt;form&gt;" /> sul lato server.</exception>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override di <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderChildren(System.Web.UI.HtmlTextWriter)" /> metodo in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderChildren(System.Web.UI.HtmlTextWriter)" /> metodo in modo che il <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> controlli figlio del controllo vengono correttamente eseguito il rendering.</para>
        </block>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus" />
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.Control.Focus" />
      </Docs>
    </Member>
    <Member MemberName="RenderControl">
      <MemberSignature Language="C#" Value="public override void RenderControl (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RenderControl(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.RenderControl(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RenderControl (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RenderControl(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> che riceve il contenuto del controllo del form.</param>
        <summary>Esegue il rendering del controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> sull'oggetto <see cref="T:System.Web.UI.HtmlTextWriter" /> specificato.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override di <see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderControl(System.Web.UI.HtmlTextWriter)" /> metodo in una classe derivata, assicurarsi di chiamare la classe base <see cref="M:System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)" /> metodo in modo che il <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> corretto rendering del controllo.</para>
        </block>
        <altmember cref="P:System.Web.UI.Control.DesignMode" />
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SubmitDisabledControls">
      <MemberSignature Language="C#" Value="public virtual bool SubmitDisabledControls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubmitDisabledControls" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SubmitDisabledControls As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SubmitDisabledControls { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore booleano che indica se imporre o meno a dei controlli disabilitati sul client di inviare i propri valori, consentendo di mantenere tali valori dopo aver eseguito il postback della pagina al server.</summary>
        <value>
          <see langword="true" /> se i controlli disabilitati sul client devono inviare i propri valori; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> proprietà per specificare se forzare controlli disabilitati sul client per inviare i propri valori postback della pagina. In questo modo i controlli disabilitati mantenere i propri valori dopo il postback della pagina al server. Quando il <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> è impostata su `false`, i controlli nel form che sono stati disabilitati tramite lo script client verranno non inviati al server al successivo postback della pagina. Di conseguenza, tutti i valori memorizzati dai controlli disabilitati vengono persi. Per consentire i controlli disabilitati mantenere i propri valori dopo il postback della pagina al server, impostare il <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> proprietà `true`.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come impostare il <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> proprietà in un form per `true` controlli disattivati da script client per gestire i relativi valori dopo il postback della pagina al server. In questo esempio, se si imposta la <xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A> proprietà `false` e quindi fare clic su di **postback** pulsante, il testo nella casella di testo HTML viene perso e la casella di controllo HTML non è più selezionata.  
  
 [!code-aspx-csharp[HtmlForm.SubmitDisabledControls#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.SubmitDisabledControls/CS/htmlform.submitdisabledcontrolscs.aspx#1)]
 [!code-aspx-vb[HtmlForm.SubmitDisabledControls#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.SubmitDisabledControls/VB/htmlform.submitdisabledcontrolsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public string Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Target" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Target { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il frame o la finestra in cui visualizzare i risultati delle informazioni inviate al server.</summary>
        <value>Frame o finestra del browser in cui vengono visualizzati i risultati delle informazioni inviate al server. Il valore predefinito è una stringa vuota ("") che aggiorna la finestra o il frame attivi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> proprietà per specificare la destinazione di finestra o frame che visualizza i risultati di informazioni inviate al server. Il reindirizzamento dei risultati delle informazioni inviate al server è un'attività avanzata. Si consiglia di non usare questa proprietà è sufficiente per il postback.  
  
> [!NOTE]
>  Il <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> proprietà esegue il rendering come un `target` attributo. Il `target` attributo `form` elementi non è consentito in XHTML 1.1. Pertanto, se il markup sottoposto a rendering deve essere conforme agli standard XHTML o deve essere conforme agli standard di accessibilità, non impostare la <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> proprietà. Per ulteriori informazioni, vedere [standard XHTML in Visual Studio e ASP.NET](http://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97) e [accessibilità in Visual Studio e ASP.NET](http://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13).  
  
 Il <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> valore deve iniziare con una lettera l'intervallo di A Z (maiuscole), tranne i seguenti valori speciali che iniziano con un carattere di sottolineatura.  
  
|Valore di destinazione|Descrizione|  
|------------------|-----------------|  
|`_blank`|Visualizza il contenuto in una nuova finestra senza frame.|  
|`_parent`|Visualizza il contenuto nell'elemento padre immediato del set di frame.|  
|`_search`|Visualizza il contenuto nel riquadro di ricerca.|  
|`_self`|Consente di visualizzare il contenuto nel frame attivo.|  
|`_top`|Visualizza il contenuto in tutta la finestra senza frame.|  
  
> [!NOTE]
>  Controllare nella documentazione relativa al browser se è supportato il valore `_search`.  Ad esempio, Microsoft Internet Explorer 5.0 e versioni successive supportano il valore di destinazione `_search`.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A> proprietà per specificare una nuova finestra senza frame per visualizzare i risultati delle informazioni registrate nel server.  
  
 [!code-aspx-csharp[HtmlFormTarget#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlFormTarget/CS/htmlformtargetcs.aspx#1)]
 [!code-aspx-vb[HtmlFormTarget#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlFormTarget/VB/htmlformtargetvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UniqueID">
      <MemberSignature Language="C#" Value="public override string UniqueID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.UniqueID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UniqueID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UniqueID { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'identificatore univoco a livello di codice assegnato al controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</summary>
        <value>Identificatore univoco a livello di codice assegnato al controllo <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> proprietà da ottenere l'identificatore a livello di codice univoco assegnato al <xref:System.Web.UI.HtmlControls.HtmlForm> controllo. Questa proprietà esegue l'override dell'implementazione di base per restituire un valore costante quando il controllo è contenuto un <xref:System.Web.UI.INamingContainer>-implementato l'oggetto diverso da una pagina, ad esempio un controllo server personalizzato. Se il contenitore di denominazione è una pagina, il valore di <xref:System.Web.UI.HtmlControls.HtmlForm> del controllo <xref:System.Web.UI.Control.ID%2A> proprietà viene restituita.  
  
 Il <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> proprietà e <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> proprietà restituiscono sempre lo stesso valore. Questo è utile quando il <xref:System.Web.UI.HtmlControls.HtmlForm> controllo viene eseguito in un browser che richiede il <xref:System.Web.UI.HtmlControls.HtmlForm> del controllo <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> e <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> proprietà siano gli stessi. Per mantenere la sincronizzazione, queste proprietà di <xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A> proprietà restituisce sempre il valore della <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> proprietà.  
  
> [!NOTE]
>  Il `name` attributo non è un attributo conforme a XHTML e per impostazione predefinita non viene eseguito da ASP.NET.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A> proprietà per recuperare l'identificatore univoco per un <xref:System.Web.UI.HtmlControls.HtmlForm> controllo.  
  
 [!code-aspx-csharp[HtmlForm.UniqueID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.UniqueID/CS/htmlform.uniqueidcs.aspx#1)]
 [!code-aspx-vb[HtmlForm.UniqueID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.UniqueID/VB/htmlform.uniqueidvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Name" />
      </Docs>
    </Member>
  </Members>
</Type>