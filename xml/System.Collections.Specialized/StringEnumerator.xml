<Type Name="StringEnumerator" FullName="System.Collections.Specialized.StringEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c041a8b7314667b2cd66b4388f0771909ef8bb23" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37700213" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class StringEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StringEnumerator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Specialized.StringEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class StringEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringEnumerator" />
  <TypeSignature Language="F#" Value="type StringEnumerator = class" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Specialized</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Supporta una semplice iterazione su <see cref="T:System.Collections.Specialized.StringCollection" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'istruzione `foreach` del linguaggio C# (`for each` in Visual Basic) nasconde la complessità degli enumeratori.  Pertanto, si consiglia l'utilizzo di `foreach`, anziché la modifica diretta dell'enumeratore.  
  
 È possibile utilizzare enumeratori per leggere i dati nella raccolta, ma non per modificare la raccolta sottostante.  
  
 Inizialmente l'enumeratore è posizionato davanti al primo elemento della raccolta. Anche il metodo <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> riporta l'enumeratore in questa posizione. In questa posizione, la chiamata a <xref:System.Collections.Specialized.StringEnumerator.Current%2A> genera un'eccezione. Pertanto, è necessario chiamare il metodo <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> per spostare in avanti l'enumeratore, in corrispondenza del primo elemento della raccolta, prima di leggere il valore di <xref:System.Collections.Specialized.StringEnumerator.Current%2A>.  
  
 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> restituisce lo stesso oggetto finché non viene chiamato il metodo <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> o <xref:System.Collections.Specialized.StringEnumerator.Reset%2A>. <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> imposta <xref:System.Collections.Specialized.StringEnumerator.Current%2A> sull'elemento successivo.  
  
 Se <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> raggiunge la fine della raccolta, l'enumeratore è posizionato dopo l'ultimo elemento nella raccolta e <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> restituisce `false`. Quando l'enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> restituire anche `false`. Se l'ultima chiamata a <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> restituite `false`, la chiamata <xref:System.Collections.Specialized.StringEnumerator.Current%2A> genera un'eccezione. Per impostare nuovamente la proprietà <xref:System.Collections.Specialized.StringEnumerator.Current%2A> sul primo elemento della raccolta, è possibile chiamare il metodo <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> seguito da <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>.  
  
 Un enumeratore rimane valido fino a quando la raccolta non subisce modifiche. Se vengono apportate modifiche alla raccolta, ad esempio l'aggiunta, modifica, o l'eliminazione di elementi, l'enumeratore viene invalidato in modo irreversibile e alla successiva chiamata a <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> oppure <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> genera un <xref:System.InvalidOperationException>. Se la raccolta viene modificata tra <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> e <xref:System.Collections.Specialized.StringEnumerator.Current%2A>, <xref:System.Collections.Specialized.StringEnumerator.Current%2A> restituisce l'elemento su cui è stata impostata, anche se l'enumeratore risulta già invalidato.  
  
 L'enumeratore non dispone di accesso esclusivo alla raccolta. L'enumerazione di una raccolta non è quindi una procedura thread-safe. Anche se una raccolta è sincronizzata, è possibile che venga modificata da altri thread, con conseguente generazione di un'eccezione da parte dell'enumeratore. Per garantire la protezione dei thread durante l'enumerazione, è possibile bloccare la raccolta per l'intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra numerose proprietà e metodi di <xref:System.Collections.Specialized.StringEnumerator>.  
  
 [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CPP/stringenumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CS/stringenumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/VB/stringenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Statici pubblici (<see langword="Shared" /> in Visual Basic) membri di questo tipo sono thread-safe. I membri di istanza non sono garantiti come thread-safe.  
  
L'enumerazione di una raccolta non è di per sé una procedura thread-safe. Anche se una raccolta è sincronizzata, è possibile che venga modificata da altri thread, con conseguente generazione di un'eccezione da parte dell'enumeratore. Per garantire la protezione dei thread durante l'enumerazione, è possibile bloccare la raccolta per l'intera enumerazione oppure intercettare le eccezioni determinate dalle modifiche apportate da altri thread.</threadsafe>
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.Specialized.StringCollection" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public string Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.StringEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Current { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : string" Usage="System.Collections.Specialized.StringEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'elemento corrente della raccolta.</summary>
        <value>Elemento corrente nella raccolta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dopo la creazione di un enumeratore o dopo una <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> viene chiamato <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> deve essere chiamato per passare l'enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Collections.Specialized.StringEnumerator.Current%2A>; in caso contrario, <xref:System.Collections.Specialized.StringEnumerator.Current%2A> è definito.  
  
 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> genera anche un'eccezione se l'ultima chiamata a <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> restituiti `false`, che indica la fine della raccolta.  
  
 <xref:System.Collections.Specialized.StringEnumerator.Current%2A> non modifica la posizione dell'enumeratore e le chiamate successive a <xref:System.Collections.Specialized.StringEnumerator.Current%2A> restituiscono lo stesso oggetto fino al completamento <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> o <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> viene chiamato.  
  
 Un enumeratore rimane valido fino a quando la raccolta non subisce modifiche. Se vengono apportate modifiche alla raccolta, ad esempio l'aggiunta, modifica, o l'eliminazione di elementi, l'enumeratore viene invalidato in modo irreversibile e alla successiva chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A> oppure <xref:System.Collections.IEnumerator.Reset%2A> genera un <xref:System.InvalidOperationException>. Se la raccolta viene modificata tra <xref:System.Collections.IEnumerator.MoveNext%2A> e <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> restituisce l'elemento su cui è stata impostata, anche se l'enumeratore risulta già invalidato.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra numerose proprietà e metodi di <xref:System.Collections.Specialized.StringEnumerator>.  
  
 [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CPP/stringenumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CS/stringenumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/VB/stringenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'enumeratore è posizionato prima del primo elemento della raccolta o dopo l'ultimo elemento.</exception>
        <altmember cref="M:System.Collections.Specialized.StringEnumerator.MoveNext" />
        <altmember cref="M:System.Collections.Specialized.StringEnumerator.Reset" />
        <altmember cref="P:System.Collections.IEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="stringEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sposta l'enumeratore all'elemento successivo della raccolta.</summary>
        <returns>
          <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo, <see langword="false" /> se l'enumeratore ha superato la fine della raccolta.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dopo la creazione di un enumeratore o dopo una <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> viene chiamato, un enumeratore è posizionato prima del primo elemento della raccolta e la prima chiamata a <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> Sposta l'enumeratore sul primo elemento della raccolta.  
  
 Se <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> raggiunge la fine della raccolta, l'enumeratore è posizionato dopo l'ultimo elemento nella raccolta e <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> restituisce `false`. Quando l'enumeratore si trova in questa posizione, le chiamate successive a <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> inoltre restituire `false` fino a quando non <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> viene chiamato.  
  
 Un enumeratore rimane valido fino a quando la raccolta non subisce modifiche. Se vengono apportate modifiche alla raccolta, ad esempio l'aggiunta, modifica, o l'eliminazione di elementi, l'enumeratore viene invalidato in modo irreversibile e alla successiva chiamata a <xref:System.Collections.IEnumerator.MoveNext%2A> oppure <xref:System.Collections.IEnumerator.Reset%2A> genera un <xref:System.InvalidOperationException>. Se la raccolta viene modificata tra <xref:System.Collections.IEnumerator.MoveNext%2A> e <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> restituisce l'elemento su cui è stata impostata, anche se l'enumeratore risulta già invalidato.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra numerose proprietà e metodi di <xref:System.Collections.Specialized.StringEnumerator>.  
  
 [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CPP/stringenumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CS/stringenumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/VB/stringenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La raccolta è stata modificata dopo la creazione dell'enumeratore.</exception>
        <altmember cref="P:System.Collections.Specialized.StringEnumerator.Current" />
        <altmember cref="M:System.Collections.Specialized.StringEnumerator.Reset" />
        <altmember cref="M:System.Collections.IEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.StringEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="stringEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nella raccolta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.StringEnumerator.Reset%2A> Sposta l'enumeratore all'inizio della raccolta, prima del primo elemento. Dopo aver <xref:System.Collections.Specialized.StringEnumerator.Reset%2A>, <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> deve essere chiamato per passare l'enumeratore al primo elemento della raccolta prima di leggere il valore di <xref:System.Collections.Specialized.StringEnumerator.Current%2A>.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra numerose proprietà e metodi di <xref:System.Collections.Specialized.StringEnumerator>.  
  
 [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CPP/stringenumerator.cpp#1)]
 [!code-csharp[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/CS/stringenumerator.cs#1)]
 [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.StringEnumerator2/VB/stringenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La raccolta è stata modificata dopo la creazione dell'enumeratore.</exception>
        <altmember cref="M:System.Collections.Specialized.StringEnumerator.MoveNext" />
        <altmember cref="P:System.Collections.Specialized.StringEnumerator.Current" />
        <altmember cref="M:System.Collections.IEnumerator.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>