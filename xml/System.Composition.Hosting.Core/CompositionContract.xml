<Type Name="CompositionContract" FullName="System.Composition.Hosting.Core.CompositionContract">
  <TypeSignature Language="C#" Value="public sealed class CompositionContract" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CompositionContract extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Composition.Hosting.Core.CompositionContract" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CompositionContract" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompositionContract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Runtime</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="2c18b-101">Rappresenta un contratto tra le parti che consente al motore di composizione di trovare la corrispondenza tra importazioni ed esportazioni.</span><span class="sxs-lookup"><span data-stu-id="2c18b-101">Represents an agreement between parts that allows the composition engine to match imports with exports.</span></span></summary>
    <remarks></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContract (Type contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.CompositionContract.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContract(Type ^ contractType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="contractType"><span data-ttu-id="2c18b-102">Tipo di contratto.</span><span class="sxs-lookup"><span data-stu-id="2c18b-102">The contract type.</span></span></param>
        <summary><span data-ttu-id="2c18b-103">Inizializza una nuova istanza della classe <see cref="T:System.Composition.Hosting.Core.CompositionContract" /> con il tipo di contratto specificato.</span><span class="sxs-lookup"><span data-stu-id="2c18b-103">Initializes a new instance of the <see cref="T:System.Composition.Hosting.Core.CompositionContract" /> class with the specified contract type.</span></span></summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContract (Type contractType, string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type contractType, string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.CompositionContract.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractType As Type, contractName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContract(Type ^ contractType, System::String ^ contractName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contractType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contractType"><span data-ttu-id="2c18b-104">Tipo di contratto.</span><span class="sxs-lookup"><span data-stu-id="2c18b-104">The contract type.</span></span></param>
        <param name="contractName"><span data-ttu-id="2c18b-105">Nome del contratto.</span><span class="sxs-lookup"><span data-stu-id="2c18b-105">The contract name.</span></span></param>
        <summary><span data-ttu-id="2c18b-106">Inizializza una nuova istanza della classe <see cref="T:System.Composition.Hosting.Core.CompositionContract" /> con il nome e il tipo di contratto specificati.</span><span class="sxs-lookup"><span data-stu-id="2c18b-106">Initializes a new instance of the <see cref="T:System.Composition.Hosting.Core.CompositionContract" /> class with the specified contract name and type.</span></span></summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContract (Type contractType, string contractName, System.Collections.Generic.IDictionary&lt;string,object&gt; metadataConstraints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type contractType, string contractName, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; metadataConstraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.CompositionContract.#ctor(System.Type,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (contractType As Type, contractName As String, metadataConstraints As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContract(Type ^ contractType, System::String ^ contractName, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ metadataConstraints);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contractType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="metadataConstraints" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="contractType"><span data-ttu-id="2c18b-107">Tipo di contratto.</span><span class="sxs-lookup"><span data-stu-id="2c18b-107">The contract type.</span></span></param>
        <param name="contractName"><span data-ttu-id="2c18b-108">Nome del contratto.</span><span class="sxs-lookup"><span data-stu-id="2c18b-108">The contract name.</span></span></param>
        <param name="metadataConstraints"><span data-ttu-id="2c18b-109">Raccolta di vincoli dei metadati per il contratto.</span><span class="sxs-lookup"><span data-stu-id="2c18b-109">A collection of metadata constraints for the contract.</span></span></param>
        <summary><span data-ttu-id="2c18b-110">Inizializza una nuova istanza della classe <see cref="T:System.Composition.Hosting.Core.CompositionContract" /> con il nome del contratto, il tipo e i vincoli dei metadati specificati.</span><span class="sxs-lookup"><span data-stu-id="2c18b-110">Initializes a new instance of the <see cref="T:System.Composition.Hosting.Core.CompositionContract" /> class with the specified contract name, type, and metadata constraints.</span></span></summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public System.Composition.Hosting.Core.CompositionContract ChangeType (Type newContractType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Composition.Hosting.Core.CompositionContract ChangeType(class System.Type newContractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.CompositionContract.ChangeType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChangeType (newContractType As Type) As CompositionContract" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Composition::Hosting::Core::CompositionContract ^ ChangeType(Type ^ newContractType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Composition.Hosting.Core.CompositionContract</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newContractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="newContractType"><span data-ttu-id="2c18b-111">Il nuovo tipo di contratto.</span><span class="sxs-lookup"><span data-stu-id="2c18b-111">The new contract type.</span></span></param>
        <summary><span data-ttu-id="2c18b-112">Crea un nuovo contratto con il tipo specificato ma con lo stesso nome e gli stessi vincoli di questo oggetto.</span><span class="sxs-lookup"><span data-stu-id="2c18b-112">Creates a new contract that has the specified type but the same name and constraints as this object.</span></span></summary>
        <returns><span data-ttu-id="2c18b-113">Il contratto creato.</span><span class="sxs-lookup"><span data-stu-id="2c18b-113">The created contract.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ContractName">
      <MemberSignature Language="C#" Value="public string ContractName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContractName" />
      <MemberSignature Language="DocId" Value="P:System.Composition.Hosting.Core.CompositionContract.ContractName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContractName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContractName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c18b-114">Ottiene il nome del contratto.</span><span class="sxs-lookup"><span data-stu-id="2c18b-114">Gets the name of the contract.</span></span></summary>
        <value><span data-ttu-id="2c18b-115">Nome del contratto.</span><span class="sxs-lookup"><span data-stu-id="2c18b-115">The contract name.</span></span></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ContractType">
      <MemberSignature Language="C#" Value="public Type ContractType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ContractType" />
      <MemberSignature Language="DocId" Value="P:System.Composition.Hosting.Core.CompositionContract.ContractType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContractType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ContractType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c18b-116">Ottiene il tipo di contratto.</span><span class="sxs-lookup"><span data-stu-id="2c18b-116">Gets the contract type.</span></span></summary>
        <value><span data-ttu-id="2c18b-117">Tipo di contratto.</span><span class="sxs-lookup"><span data-stu-id="2c18b-117">The contract type.</span></span></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.CompositionContract.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2c18b-118">Oggetto da confrontare con l'oggetto corrente.</span><span class="sxs-lookup"><span data-stu-id="2c18b-118">The object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="2c18b-119">Determina se l'oggetto specificato è uguale a questa istanza di <see cref="T:System.Composition.Hosting.Core.CompositionContract" />.</span><span class="sxs-lookup"><span data-stu-id="2c18b-119">Determines whether the specified object is equal to this instance of <see cref="T:System.Composition.Hosting.Core.CompositionContract" />.</span></span></summary>
        <returns>
          <span data-ttu-id="2c18b-120"><see langword="true" /> se l'oggetto specificato è uguale all'oggetto corrente; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2c18b-120"><see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.CompositionContract.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2c18b-121">Restituisce il codice hash per questo oggetto <see cref="T:System.Composition.Hosting.Core.CompositionContract" />.</span><span class="sxs-lookup"><span data-stu-id="2c18b-121">Returns the hash code for this <see cref="T:System.Composition.Hosting.Core.CompositionContract" /> object.</span></span></summary>
        <returns><span data-ttu-id="2c18b-122">Codice hash per l'oggetto corrente.</span><span class="sxs-lookup"><span data-stu-id="2c18b-122">The hash code for the current object.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataConstraints">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; MetadataConstraints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; MetadataConstraints" />
      <MemberSignature Language="DocId" Value="P:System.Composition.Hosting.Core.CompositionContract.MetadataConstraints" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MetadataConstraints As IEnumerable(Of KeyValuePair(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ MetadataConstraints { System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2c18b-123">Ottiene una raccolta dei vincoli per i metadati per questo contratto.</span><span class="sxs-lookup"><span data-stu-id="2c18b-123">Gets a collection of metadata constraints for the contract.</span></span></summary>
        <value><span data-ttu-id="2c18b-124">Una raccolta di vincoli relativi ai metadati.</span><span class="sxs-lookup"><span data-stu-id="2c18b-124">A collection of metadata constraints.</span></span></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.CompositionContract.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2c18b-125">Restituisce la rappresentazione di stringa dell'oggetto <see cref="T:System.Composition.Hosting.Core.CompositionContract" />.</span><span class="sxs-lookup"><span data-stu-id="2c18b-125">Returns the string representation of this <see cref="T:System.Composition.Hosting.Core.CompositionContract" /> object.</span></span></summary>
        <returns><span data-ttu-id="2c18b-126">Rappresentazione di stringa dell'oggetto <see cref="T:System.Composition.Hosting.Core.CompositionContract" />.</span><span class="sxs-lookup"><span data-stu-id="2c18b-126">The string representation of this <see cref="T:System.Composition.Hosting.Core.CompositionContract" /> object.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUnwrapMetadataConstraint&lt;T&gt;">
      <MemberSignature Language="C#" Value="public bool TryUnwrapMetadataConstraint&lt;T&gt; (string constraintName, out T constraintValue, out System.Composition.Hosting.Core.CompositionContract remainingContract);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryUnwrapMetadataConstraint&lt;T&gt;(string constraintName, [out] !!T&amp; constraintValue, [out] class System.Composition.Hosting.Core.CompositionContract&amp; remainingContract) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.Hosting.Core.CompositionContract.TryUnwrapMetadataConstraint``1(System.String,``0@,System.Composition.Hosting.Core.CompositionContract@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryUnwrapMetadataConstraint(Of T) (constraintName As String, ByRef constraintValue As T, ByRef remainingContract As CompositionContract) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; bool TryUnwrapMetadataConstraint(System::String ^ constraintName, [Runtime::InteropServices::Out] T % constraintValue, [Runtime::InteropServices::Out] System::Composition::Hosting::Core::CompositionContract ^ % remainingContract);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="constraintName" Type="System.String" />
        <Parameter Name="constraintValue" Type="T&amp;" RefType="out" />
        <Parameter Name="remainingContract" Type="System.Composition.Hosting.Core.CompositionContract&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="2c18b-127">Il tipo di valore del vincolo dei metadati.</span><span class="sxs-lookup"><span data-stu-id="2c18b-127">The type of the metadata constraint value.</span></span></typeparam>
        <param name="constraintName"><span data-ttu-id="2c18b-128">Il nome del vincolo dei metadati.</span><span class="sxs-lookup"><span data-stu-id="2c18b-128">The name of the metadata constraint.</span></span></param>
        <param name="constraintValue"><span data-ttu-id="2c18b-129">Quando termina, questo metodo contiene il valore del vincolo, se è stato trovato.</span><span class="sxs-lookup"><span data-stu-id="2c18b-129">When this method returns, contains the value of the constraint if it was found.</span></span> <span data-ttu-id="2c18b-130">Questo parametro viene trattato come non inizializzato.</span><span class="sxs-lookup"><span data-stu-id="2c18b-130">This parameter is treated as uninitialized.</span></span></param>
        <param name="remainingContract"><span data-ttu-id="2c18b-131">Quando termina, questo metodo contiene il contratto con il vincolo rimosso, se il vincolo è stato trovato.</span><span class="sxs-lookup"><span data-stu-id="2c18b-131">When this method returns, holds the contract with the constraint removed, if the constraint was found.</span></span> <span data-ttu-id="2c18b-132">Questo parametro viene trattato come non inizializzato.</span><span class="sxs-lookup"><span data-stu-id="2c18b-132">This parameter is treated as uninitialized.</span></span></param>
        <summary><span data-ttu-id="2c18b-133">Ottiene un vincolo di metadati contenente il tipo e il nome specificati, se presente.</span><span class="sxs-lookup"><span data-stu-id="2c18b-133">Gets a metadata constraint that has the specified type and name, if it exists.</span></span></summary>
        <returns>
          <span data-ttu-id="2c18b-134"><see langword="true" /> se è stato annullato il wrapping ed è stato estratto il valore dell'elemento di metadati vincolato; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2c18b-134"><see langword="true" /> if the constrained metadata item was unwrapped and the value extracted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>