<Type Name="SqlBulkCopy" FullName="System.Data.SqlClient.SqlBulkCopy">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a5fe1fba4a5f51260a44036cdf38a7da69fb2fb7" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37673300" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlBulkCopy : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlBulkCopy extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlBulkCopy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlBulkCopy&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlBulkCopy sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SqlBulkCopy = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Consente di caricare in blocco in modo efficace una tabella di SQL Server con i dati provenienti da un'altra origine.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft SQL Server include una popolare utilità del prompt dei comandi denominata **bcp** per spostare dati da una tabella a altra, in un singolo server o tra server. Il <xref:System.Data.SqlClient.SqlBulkCopy> classe consente di scrivere soluzioni di codice gestito che offrono funzionalità simili. Esistono altri modi per caricare dati in una tabella di SQL Server (istruzioni INSERT, ad esempio), ma <xref:System.Data.SqlClient.SqlBulkCopy> offre un vantaggio in termini di prestazioni significativo.  
  
 La classe <xref:System.Data.SqlClient.SqlBulkCopy> consente di scrivere dati solo su tabelle SQL Server. Tuttavia, l'origine dati non è limitata a SQL Server. qualsiasi origine dati è utilizzabile, purché i dati possano essere caricati in un <xref:System.Data.DataTable> dell'istanza o di lettura con un <xref:System.Data.IDataReader> istanza.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy> avrà esito negativo se il caricamento bulk una <xref:System.Data.DataTable> colonna di tipo <xref:System.Data.SqlTypes.SqlDateTime> in SQL Server Aggiunta colonna il cui tipo è uno dei tipi data/ora in SQL Server 2008.  
  
   
  
## Examples  
 Nell'applicazione console riportata di seguito viene illustrato come caricare i dati usando la classe <xref:System.Data.SqlClient.SqlBulkCopy>. In questo esempio, un <xref:System.Data.SqlClient.SqlDataReader> viene usato per copiare dati dal **Production. Product** tabella in SQL Server **AdventureWorks** database in una tabella simile dello stesso database.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare Transact-SQL `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Istanza <see cref="T:System.Data.SqlClient.SqlConnection" /> già aperta utilizzata per eseguire l'operazione di copia di massa. Se la stringa di connessione non utilizza <see langword="Integrated Security = true" />, è possibile utilizzare <see cref="T:System.Data.SqlClient.SqlCredential" /> per passare l'ID utente e la password in modo più sicuro che specificandoli come testo della stringa di connessione.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> mediante l'istanza aperta specificata dell'oggetto <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poiché la connessione è già aperto quando il <xref:System.Data.SqlClient.SqlBulkCopy> viene inizializzata l'istanza, la connessione rimane aperta dopo la <xref:System.Data.SqlClient.SqlBulkCopy> istanza è chiusa.  
  
 Se il `connection` argomento è null, un <xref:System.ArgumentNullException> viene generata un'eccezione.  
  
   
  
## Examples  
 L'applicazione console seguente viene illustrato come caricamento bulk dei dati tramite una connessione che è già aperta. In questo esempio, un <xref:System.Data.SqlClient.SqlDataReader> viene usato per copiare dati dal **Production. Product** tabella in SQL Server **AdventureWorks** database in una tabella simile dello stesso database. L'esempio ha solo scopo dimostrativo. Non è possibile utilizzare `SqlBulkCopy` per spostare dati da una tabella a altra nello stesso database in un'applicazione di produzione. Si noti che i dati di origine non devono trovarsi in SQL Server. è possibile usare qualsiasi origine dati che può essere letti per un <xref:System.Data.IDataReader> o caricare in un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare Transact-SQL `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Stringa che definisce la connessione che verrà aperta per essere utilizzata dall'istanza <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. Se la stringa di connessione non utilizza <see langword="Integrated Security = true" />, è possibile utilizzare il metodo <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> o <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> e <see cref="T:System.Data.SqlClient.SqlCredential" /> per passare l'ID utente e la password in modo più sicuro che specificandoli come testo della stringa di connessione.</param>
        <summary>Inizializza e apre una nuova istanza di <see cref="T:System.Data.SqlClient.SqlConnection" /> sulla base dell'oggetto <paramref name="connectionString" /> fornito. Il costruttore utilizza l'oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> per inizializzare una nuova istanza della classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La connessione viene chiusa automaticamente al termine dell'operazione di copia bulk.  
  
 Se `connectionString` è null, un <xref:System.ArgumentNullException> viene generata un'eccezione. Se `connectionString` è una stringa vuota, un <xref:System.ArgumentException> viene generata un'eccezione.  
  
   
  
## Examples  
 L'applicazione console seguente viene illustrato come caricamento bulk dei dati tramite una connessione specificata sotto forma di stringa. La connessione viene chiusa automaticamente quando il <xref:System.Data.SqlClient.SqlBulkCopy> istanza è chiusa.  
  
 In questo esempio, i dati di origine prima di tutto viene letto da una tabella di SQL Server a un <xref:System.Data.SqlClient.SqlDataReader> istanza. I dati di origine non devono trovarsi in SQL Server. è possibile usare qualsiasi origine dati che può essere letti per un <xref:System.Data.IDataReader> o caricare in un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare Transact-SQL `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, copyOptions As SqlBulkCopyOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::String ^ connectionString, System::Data::SqlClient::SqlBulkCopyOptions copyOptions);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : string * System.Data.SqlClient.SqlBulkCopyOptions -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connectionString, copyOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">Stringa che definisce la connessione che verrà aperta per essere utilizzata dall'istanza <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. Se la stringa di connessione non utilizza <see langword="Integrated Security = true" />, è possibile utilizzare il metodo <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)" /> o <see cref="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" /> e <see cref="T:System.Data.SqlClient.SqlCredential" /> per passare l'ID utente e la password in modo più sicuro che specificandoli come testo della stringa di connessione.</param>
        <param name="copyOptions">Combinazione dei valori dell'enumerazione <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> che determina quali righe dell'origine dati verranno copiate nella tabella di destinazione.</param>
        <summary>Inizializza e apre una nuova istanza di <see cref="T:System.Data.SqlClient.SqlConnection" /> sulla base dell'oggetto <paramref name="connectionString" /> fornito. Il costruttore utilizza l'oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> per inizializzare una nuova istanza della classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" />. Il comportamento dell'istanza <see cref="T:System.Data.SqlClient.SqlConnection" /> è basato sulle opzioni fornite nel parametro <paramref name="copyOptions" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile ottenere informazioni dettagliate su tutte le opzioni di copia bulk nel <xref:System.Data.SqlClient.SqlBulkCopyOptions> argomento.  
  
   
  
## Examples  
 L'applicazione console seguente viene illustrato come eseguire un caricamento bulk tramite una connessione specificata sotto forma di stringa. Viene impostata un'opzione per utilizzare il valore della colonna identity della tabella di origine per il caricamento della tabella di destinazione. In questo esempio, i dati di origine prima di tutto viene letto da una tabella di SQL Server a un <xref:System.Data.SqlClient.SqlDataReader> istanza. La tabella di origine e tabella di destinazione includono una colonna Identity. Per impostazione predefinita, un nuovo valore per il **identità** colonna viene generata nella tabella di destinazione per ogni riga aggiunta. In questo esempio, un'opzione viene impostata quando viene aperta la connessione che forza il processo di caricamento bulk da utilizzare il **identità** invece i valori dalla tabella di origine. Per vedere come l'opzione Cambia il modo il funzionamento del caricamento bulk, eseguire l'esempio con il **dbo. BulkCopyDemoMatchingColumns** tabella vuota. Tutte le righe vengono caricate dall'origine. Quindi eseguire nuovamente l'esempio senza svuotare la tabella. Viene generata un'eccezione e il codice scrive un messaggio nella console che informa che non sono state aggiunte righe a causa di violazioni di vincolo di chiave primaria.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare Transact-SQL `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlConnection connection, valuetype System.Data.SqlClient.SqlBulkCopyOptions copyOptions, class System.Data.SqlClient.SqlTransaction externalTransaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As SqlConnection, copyOptions As SqlBulkCopyOptions, externalTransaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlBulkCopy(System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlBulkCopyOptions copyOptions, System::Data::SqlClient::SqlTransaction ^ externalTransaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlBulkCopy : System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlBulkCopyOptions * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlBulkCopy" Usage="new System.Data.SqlClient.SqlBulkCopy (connection, copyOptions, externalTransaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="copyOptions" Type="System.Data.SqlClient.SqlBulkCopyOptions" />
        <Parameter Name="externalTransaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="connection">Istanza <see cref="T:System.Data.SqlClient.SqlConnection" /> già aperta utilizzata per eseguire la copia di massa. Se la stringa di connessione non utilizza <see langword="Integrated Security = true" />, è possibile utilizzare <see cref="T:System.Data.SqlClient.SqlCredential" /> per passare l'ID utente e la password in modo più sicuro che specificandoli come testo della stringa di connessione.</param>
        <param name="copyOptions">Combinazione dei valori dell'enumerazione <see cref="T:System.Data.SqlClient.SqlBulkCopyOptions" /> che determina quali righe dell'origine dati verranno copiate nella tabella di destinazione.</param>
        <param name="externalTransaction">Istanza <see cref="T:System.Data.SqlClient.SqlTransaction" /> esistente nella quale ha luogo la copia di massa.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> mediante l'istanza aperta esistente dell'oggetto <see cref="T:System.Data.SqlClient.SqlConnection" />. Il comportamento dell'istanza <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> è basato sulle opzioni fornite nel parametro <paramref name="copyOptions" />. Se all'oggetto <see cref="T:System.Data.SqlClient.SqlTransaction" /> viene fornito un valore non null, le operazioni di copia vengono eseguite all'interno della transazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se le opzioni includono `UseInternalTransaction` e il `externalTransaction` argomento non è null, un **eccezione InvalidArgumentException** viene generata un'eccezione.  
  
 Per esempi che illustrano come usare `SqlBulkCopy` in una transazione, vedere [transazioni e operazioni di copia Bulk](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BatchSize">
      <MemberSignature Language="C#" Value="public int BatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Property BatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BatchSize : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Numero di righe presenti in ogni batch. Alla fine di ciascun batch, le righe presenti vengono inviate al server.</summary>
        <value>Intero della proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.BatchSize" /> oppure zero se non si è impostato alcun valore.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un batch è completato quando <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> righe sono state elaborate o non sono presenti altre righe da inviare all'origine dei dati di destinazione.  
  
 Zero (impostazione predefinita) indica che ogni <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operazione è un singolo batch.  
  
 Se il <xref:System.Data.SqlClient.SqlBulkCopy> istanza è stata dichiarata senza i <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> opzione in effetti, le righe vengono inviate al server <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> righe alla volta, ma nessuna azione relativa alla transazione viene eseguita. Se <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> è in effetti, ogni batch di righe viene inserito come una transazione separata.  
  
 Il <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> proprietà può essere impostata in qualsiasi momento. Se una copia bulk è già in corso, il batch corrente viene ridimensionato in base alle dimensioni del batch precedente. I batch successivi utilizzano le nuove dimensioni. Se il <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> inizialmente è uguale a zero e le modifiche apportate durante un <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operazione è già in corso, tale operazione carica i dati come batch singolo. I successivi <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operazioni sulla stessa <xref:System.Data.SqlClient.SqlBulkCopy> usare la nuova istanza <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
   
  
## Examples  
 L'applicazione console seguente viene illustrato come caricamento bulk dei dati in batch di 50 righe. Per un esempio che illustri la modalità <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> funziona con una transazione, vedere [transazioni e operazioni di copia Bulk](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  
  
 In questo esempio, i dati di origine prima di tutto viene letto da una tabella di SQL Server a un <xref:System.Data.SqlClient.SqlDataReader> istanza. I dati di origine non devono trovarsi in SQL Server. è possibile usare qualsiasi origine dati che può essere letti per un <xref:System.Data.IDataReader> o caricare in un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare Transact-SQL `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BulkCopyTimeout">
      <MemberSignature Language="C#" Value="public int BulkCopyTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BulkCopyTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BulkCopyTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BulkCopyTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BulkCopyTimeout : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Numero di secondi per l'operazione da completare prima del timeout.</summary>
        <value>Intero della proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout" />. Il valore predefinito è 30 secondi. Il valore 0 indica nessun limite; la copia bulk attenderà un tempo illimitato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'operazione si verifica il timeout, non viene eseguito il commit della transazione e vengono rimosse tutte le righe copiate dalla tabella di destinazione.  
  
   
  
## Examples  
 L'applicazione console seguente viene illustrato come modificare il timeout di 60 secondi quando caricamento bulk di dati.  
  
 In questo esempio, i dati di origine prima di tutto viene letto da una tabella di SQL Server a un <xref:System.Data.SqlClient.SqlDataReader> istanza. I dati di origine non devono trovarsi in SQL Server. è possibile usare qualsiasi origine dati che può essere letti per un <xref:System.Data.IDataReader> o caricare in un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare un' [!INCLUDE[tsql](~/includes/tsql-md.md)] `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="sqlBulkCopy.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude l'istanza di <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dopo aver chiamato un' <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> nella <xref:System.Data.SqlClient.SqlBulkCopy> dell'oggetto, non altre operazioni avranno esito positivo. Le chiamate al <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> metodo genererà un' <xref:System.InvalidOperationException>.  
  
 Chiama il <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> metodo dal <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> evento causa un <xref:System.InvalidOperationException> generata.  
  
 Si noti che si aprono <xref:System.Data.SqlClient.SqlBulkCopy> le istanze siano chiuse in modo implicito alla fine di un `using` blocco.  
  
   
  
## Examples  
 L'esempio seguente usa lo stesso <xref:System.Data.SqlClient.SqlBulkCopy> istanza per aggiungere gli ordini di vendita e i relativi dettagli associati a due tabelle di destinazione. Poiché il **AdventureWorks** tabelle degli ordini di vendita sono di grandi dimensioni, l'esempio legge solo gli ordini effettuati da un determinato numero di account e operazioni di copia bulk tali ordini e dettagli per le tabelle di destinazione. Il <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> metodo viene utilizzato solo dopo aver complete entrambe le operazioni di copia bulk.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare Transact-SQL `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnMappings">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnMappings As SqlBulkCopyColumnMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ ColumnMappings { System::Data::SqlClient::SqlBulkCopyColumnMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnMappings : System.Data.SqlClient.SqlBulkCopyColumnMappingCollection" Usage="System.Data.SqlClient.SqlBulkCopy.ColumnMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlBulkCopyColumnMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce una raccolta di elementi <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />. I mapping delle colonne definiscono le relazioni tra le colonne nell'origine dati e quelle nella destinazione.</summary>
        <value>Raccolta di mapping di colonne. Per impostazione predefinita, la raccolta è vuota.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'origine dati e la tabella di destinazione hanno lo stesso numero di colonne e la posizione ordinale di ogni colonna di origine all'interno dell'origine dati corrisponde alla posizione ordinale della colonna di destinazione corrispondente, il <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> raccolta non è necessaria. Tuttavia, se il numero delle colonne sono diversi o le posizioni ordinali non sono coerenti, è necessario usare <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> per assicurarsi che i dati vengono copiati nelle colonne corrette.  
  
 Durante l'esecuzione di un'operazione di copia bulk, può accedere a questo insieme, ma non può essere modificato. Qualsiasi tentativo di modifica genererà un <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping" />
      </Docs>
    </Member>
    <Member MemberName="DestinationTableName">
      <MemberSignature Language="C#" Value="public string DestinationTableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DestinationTableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationTableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DestinationTableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationTableName : string with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.DestinationTableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nome della tabella di destinazione nel server.</summary>
        <value>Valore di stringa della proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> o null se non è stato fornito alcun valore.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> non è stato impostato quando <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> viene chiamato, un <xref:System.ArgumentNullException> viene generata un'eccezione.  
  
 Se <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> viene modificato mentre un <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operazione è in esecuzione, la modifica non riguarda l'operazione corrente. Il nuovo <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> valore viene usato la volta successiva che un <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> viene chiamato il metodo.  
  
 <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> è un nome in tre parti (`<database>.<owningschema>.<name>`). Se si sceglie, è possibile qualificare il nome della tabella con i relativi database e lo schema di appartenenza. Tuttavia, se il nome della tabella viene utilizzato un carattere di sottolineatura ("_") o altri caratteri speciali, è necessario racchiudere il nome tra parentesi quadre come mostrato nella (`[<database>.<owningschema>.<name_01>]`). Per altre informazioni, vedere "Identificatori" nella documentazione Online di SQL Server.  
  
 È possibile i dati di copia bulk in una tabella temporanea con un valore, ad esempio `tempdb..#table` oppure `tempdb.<owner>.#table` per il <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> proprietà.  
  
   
  
## Examples  
 L'applicazione console seguente viene illustrato come caricamento bulk dei dati tramite una connessione che è già aperta. La tabella di destinazione è una tabella nel **AdventureWorks** database.  
  
 In questo esempio, la connessione prima di tutto viene usata per leggere i dati da una tabella di SQL Server per un <xref:System.Data.SqlClient.SqlDataReader> istanza. I dati di origine non devono trovarsi in SQL Server. è possibile usare qualsiasi origine dati che può essere letti per un <xref:System.Data.IDataReader> o caricare in un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare Transact-SQL `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableStreaming">
      <MemberSignature Language="C#" Value="public bool EnableStreaming { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableStreaming" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableStreaming As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableStreaming { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableStreaming : bool with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.EnableStreaming" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Abilita o disabilita un oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> per la trasmissione del flusso di dati da un oggetto <see cref="T:System.Data.IDataReader" />.</summary>
        <value>
          <see langword="true" /> se un oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> può trasmettere il flusso di dati da un oggetto <see cref="T:System.Data.IDataReader" />; in caso contrario, false. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> viene `true`, <xref:System.Data.SqlClient.SqlBulkCopy> legge da un <xref:System.Data.IDataReader> utilizzando <xref:System.Data.CommandBehavior.SequentialAccess>, ottimizzazione dell'utilizzo della memoria tramite la <xref:System.Data.IDataReader> le funzionalità di streaming. Quando è impostata su false, il <xref:System.Data.SqlClient.SqlBulkCopy> classe carica tutti i dati restituiti dai <xref:System.Data.IDataReader> oggetto in memoria prima di inviarlo a SQL Server o SQL Azure.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyAfter">
      <MemberSignature Language="C#" Value="public int NotifyAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NotifyAfter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberSignature Language="VB.NET" Value="Public Property NotifyAfter As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NotifyAfter { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NotifyAfter : int with get, set" Usage="System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Definisce il numero di righe da elaborare prima di generare un evento di notifica.</summary>
        <value>Intero della proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" /> oppure zero se la proprietà non è stata impostata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è progettata per i componenti dell'interfaccia utente che mostrano lo stato di avanzamento di un'operazione di copia bulk. Indica il numero di righe da elaborare prima di generare un evento di notifica. Il <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> proprietà può essere impostata in qualsiasi momento, anche durante un'operazione di copia bulk. Le modifiche apportate durante un'operazione di copia bulk diventano effettive dopo la successiva notifica. La nuova impostazione si applica a tutte le operazioni successive nella stessa istanza.  
  
 Se <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> è impostata su un numero minore di zero, una <xref:System.ArgumentOutOfRangeException> viene generata un'eccezione.  
  
   
  
## Examples  
 L'applicazione console seguente viene illustrato come caricamento bulk dei dati tramite una connessione che è già aperta. Il <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> viene impostata in modo che il gestore eventi viene chiamato dopo ogni 50 righe copiate nella tabella.  
  
 In questo esempio, la connessione prima di tutto viene usata per leggere i dati da una tabella di SQL Server per un <xref:System.Data.SqlClient.SqlDataReader> istanza. Quindi una seconda connessione viene aperta per i dati di copia bulk. Si noti che i dati di origine non devono trovarsi in SQL Server. è possibile usare qualsiasi origine dati che può essere letti per un <xref:System.Data.IDataReader> o caricare in un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare Transact-SQL `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SqlRowsCopied">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SqlRowsCopied As SqlRowsCopiedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlRowsCopiedEventHandler ^ SqlRowsCopied;" />
      <MemberSignature Language="F#" Value="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " Usage="member this.SqlRowsCopied : System.Data.SqlClient.SqlRowsCopiedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlRowsCopiedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica ogni volta che sia stato elaborato il numero delle righe specificato dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si noti che le impostazioni della <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> e <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> sono indipendenti. La ricezione di un <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> eventi non implicano che tutte le righe sono state inviate al server o il commit.  
  
 Non è possibile chiamare SqlBulkCopy. Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) o SqlConnection (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) da questo evento. In questo modo un' <xref:System.InvalidOperationException> che venga generata e <xref:System.Data.SqlClient.SqlBulkCopy> non modificherà lo stato dell'oggetto. Se l'utente desidera annullare l'operazione dall'evento, il <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> proprietà del <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> può essere utilizzato. (Vedere [transazioni e operazioni di copia Bulk](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) per esempi che usano il <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> proprietà.)  
  
 Nessuna azione, ad esempio attività di transazione, è supportata la connessione durante l'esecuzione dell'operazione di copia bulk e si consiglia di non utilizzare la stessa connessione utilizzata durante la <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> evento. Tuttavia, è possibile aprire una connessione diversa.  
  
   
  
## Examples  
 L'applicazione console seguente viene illustrato come caricamento bulk dei dati tramite una connessione che è già aperta. Il <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> viene impostata in modo che il gestore eventi viene chiamato dopo ogni 50 righe copiate nella tabella.  
  
 In questo esempio, la connessione prima di tutto viene usata per leggere i dati da una tabella di SQL Server per un <xref:System.Data.SqlClient.SqlDataReader> istanza. Si noti che i dati di origine non devono trovarsi in SQL Server. è possibile usare qualsiasi origine dati che può essere letti per un <xref:System.Data.IDataReader> o caricare in un <xref:System.Data.DataTable>.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare Transact-SQL `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il metodo `Dispose` dopo aver terminato di utilizzare l'oggetto <xref:System.Data.SqlClient.SqlBulkCopy>. Il metodo `Dispose` lascia l'oggetto <xref:System.Data.SqlClient.SqlBulkCopy> in una condizione di inutilizzabilità. Dopo la chiamata `Dispose`, è necessario rilasciare tutti i riferimenti per il <xref:System.Data.SqlClient.SqlBulkCopy> in modo che il garbage collector di recuperare la memoria che il <xref:System.Data.SqlClient.SqlBulkCopy> occupata.  
  
 Per altre informazioni, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [implementa un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Chiamare sempre il metodo `Dispose` prima di rilasciare l'ultimo riferimento a <xref:System.Data.SqlClient.SqlBulkCopy>. In caso contrario, le risorse utilizzate non verranno liberate finché il metodo <xref:System.Data.SqlClient.SqlBulkCopy> dell'oggetto `Finalize` non viene richiamato dal Garbage Collector.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServer">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Copia tutte le righe da un'origine dati a una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se multiple active result set (MARS) è disabilitato, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> stabilisce la connessione occupata. Se MARS è abilitato, è possibile eseguire chiamate al <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> con altri comandi nella stessa connessione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As DbDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.Common.DbDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Oggetto <see cref="T:System.Data.Common.DbDataReader" /> le cui righe vengono copiate nella tabella di destinazione.</param>
        <summary>Copia tutte le righe dalla matrice <see cref="T:System.Data.Common.DbDataReader" /> fornita in una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataRow[] -&gt; unit" Usage="sqlBulkCopy.WriteToServer rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Matrice di oggetti <see cref="T:System.Data.DataRow" /> che verranno copiati nella tabella di destinazione.</param>
        <summary>Copia tutte le righe dalla matrice <see cref="T:System.Data.DataRow" /> fornita in una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mentre l'operazione di copia bulk è in corso, la destinazione associata <xref:System.Data.SqlClient.SqlConnection> è occupata e non possono essere eseguite altre operazioni nella connessione.  
  
 Il <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> raccolta esegue il mapping tra il <xref:System.Data.DataRow> colonne alla tabella di database di destinazione.  
  
   
  
## Examples  
 L'applicazione console seguente viene illustrato come caricamento bulk dei dati da un <xref:System.Data.DataRow> matrice. La tabella di destinazione è una tabella nel **AdventureWorks** database.  
  
 In questo esempio, un <xref:System.Data.DataTable> viene creato in fase di esecuzione. Viene selezionata una singola riga dal <xref:System.Data.DataTable> da copiare nella tabella di destinazione.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare Transact-SQL `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable -&gt; unit" Usage="sqlBulkCopy.WriteToServer table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">Oggetto <see cref="T:System.Data.DataTable" /> le cui righe vengono copiate nella tabella di destinazione.</param>
        <summary>Copia tutte le righe dell'oggetto <see cref="T:System.Data.DataTable" /> fornito in una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tutte le righe di <xref:System.Data.DataTable> vengono copiate nella tabella di destinazione ad eccezione di quelli che sono stati eliminati.  
  
 Mentre l'operazione di copia bulk è in corso, la destinazione associata <xref:System.Data.SqlClient.SqlConnection> è occupata e non possono essere eseguite altre operazioni nella connessione.  
  
 Il <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> raccolta esegue il mapping tra il <xref:System.Data.DataTable> colonne alla tabella di database di destinazione.  
  
   
  
## Examples  
 L'applicazione Console seguente viene illustrato come caricamento bulk dei dati da un <xref:System.Data.DataTable>. La tabella di destinazione è una tabella nel **AdventureWorks** database.  
  
 In questo esempio, un <xref:System.Data.DataTable> viene creato in fase di esecuzione ed è l'origine del `SqlBulkCopy` operazione.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare Transact-SQL `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (reader As IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.IDataReader -&gt; unit" Usage="sqlBulkCopy.WriteToServer reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Oggetto <see cref="T:System.Data.IDataReader" /> le cui righe vengono copiate nella tabella di destinazione.</param>
        <summary>Copia tutte le righe dell'oggetto <see cref="T:System.Data.IDataReader" /> fornito in una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'operazione di copia viene avviato alla successiva riga disponibile nel lettore. La maggior parte dei casi, il lettore è stato appena tornato da <xref:System.Data.IDbCommand.ExecuteReader%2A> o una chiamata simile, in modo che la successiva riga disponibile è la prima riga. Per elaborare più risultati, chiamare <xref:System.Data.IDataReader.NextResult%2A> nel lettore di dati e chiamata <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> nuovamente.  
  
 Si noti che l'utilizzo <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> modifica lo stato del lettore. Il metodo verrà chiamato <xref:System.Data.IDataReader.Read%2A> fino a quando non viene restituito false, l'operazione viene interrotta o si verifica un errore. Ciò significa che il lettore di dati sarà in uno stato diverso, probabilmente alla fine del set di risultati, quando il <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operazione è stata completata.  
  
 Mentre l'operazione di copia bulk è in corso, la destinazione associata <xref:System.Data.SqlClient.SqlConnection> è occupata e non possono essere eseguite altre operazioni nella connessione.  
  
 Il <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> raccolta esegue il mapping dai dati lettore colonne alla tabella di database di destinazione.  
  
   
  
## Examples  
 L'applicazione console seguente viene illustrato come caricamento bulk dei dati da un <xref:System.Data.SqlClient.SqlDataReader>. La tabella di destinazione è una tabella nel **AdventureWorks** database.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare Transact-SQL `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServer">
      <MemberSignature Language="C#" Value="public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToServer(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToServer (table As DataTable, rowState As DataRowState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToServer(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServer : System.Data.DataTable * System.Data.DataRowState -&gt; unit" Usage="sqlBulkCopy.WriteToServer (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">Oggetto <see cref="T:System.Data.DataTable" /> le cui righe vengono copiate nella tabella di destinazione.</param>
        <param name="rowState">Valore ricavato dall'enumerazione <see cref="T:System.Data.DataRowState" />. Solo le righe corrispondenti allo stato della riga vengono copiate nella destinazione.</param>
        <summary>Copia solo le righe dell'oggetto <see cref="T:System.Data.DataTable" /> corrispondenti allo stato della riga fornito in una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo le righe della <xref:System.Data.DataTable> che sono nello stato indicato nel `rowState` argomento e non sono stati eliminati vengono copiate nella tabella di destinazione.  
  
> [!NOTE]
>  Se <xref:System.Data.DataRowState.Deleted> viene specificato, qualsiasi <xref:System.Data.DataRowState.Unchanged>, <xref:System.Data.DataRowState.Added>, e <xref:System.Data.DataRowState.Modified> righe verranno copiate anche al server. Non verrà generata alcuna eccezione.  
  
 Mentre l'operazione di copia bulk è in corso, la destinazione associata <xref:System.Data.SqlClient.SqlConnection> è occupata e non possono essere eseguite altre operazioni nella connessione.  
  
 Il <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> raccolta esegue il mapping tra il <xref:System.Data.DataTable> colonne alla tabella di database di destinazione.  
  
   
  
## Examples  
 La Console seguente applicazione viene illustrato come eseguire operazioni di massa caricare solo le righe in un <xref:System.Data.DataTable> che corrispondono a uno stato specifico. In questo caso, vengono aggiunti solo le righe non modificate. La tabella di destinazione è una tabella nel **AdventureWorks** database.  
  
 In questo esempio, un <xref:System.Data.DataTable> viene creato in fase di esecuzione e tre righe vengono aggiunte a esso. Prima di <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> metodo viene eseguito, viene modificata una delle righe. Il <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> metodo viene chiamato con un `DataRowState.Unchanged` `rowState` argomento, in modo che solo le due righe non modificate vengono copiate nella destinazione.  
  
> [!IMPORTANT]
>  In questo esempio non funzionerà a meno che non sono state create le tabelle di lavoro come descritto in [esempio di copia di massa](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). Questo codice viene fornito per illustrare la sintassi per usare **SqlBulkCopy** solo. Se le tabelle di origine e destinazione sono nella stessa istanza di SQL Server, è più semplice e rapido usare Transact-SQL `INSERT … SELECT` istruzione per copiare i dati.  
  
 [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]
 [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowState" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteToServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Una versione asincrona di <see cref="Overload:System.Data.SqlClient.SqlBulkCopy.WriteToServer" /> che copia tutte le righe da un'origine dati a una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se multiple active result set (MARS) è disabilitato, <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> stabilisce la connessione occupata. Se MARS è abilitato, è possibile eseguire chiamate al <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> con altri comandi nella stessa connessione.  
  
 Il numero di righe che vengono eseguito il rollback si verifichi un errore dipende da diversi aspetti:  
  
-   Se <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> è specificato.  
  
-   Se si dispone delle proprie transazioni.  
  
-   Valore di <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>.  
  
 Quando si verifica un errore durante l'invio di dati al server, il batch corrente (come specificato da <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>) verrà eseguito il rollback. Se <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> viene omesso e si dispone delle proprie transazioni, l'intera transazione verrà rollback (che include anche tutti i batch precedenti).  
  
 Usare <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> conoscere il numero di righe copiato nel server.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As DbDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Oggetto <see cref="T:System.Data.Common.DbDataReader" /> le cui righe vengono copiate nella tabella di destinazione.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" /> che copia tutte le righe dalla matrice <see cref="T:System.Data.Common.DbDataReader" /> fornita a una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (rows As DataRow()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows">Matrice di oggetti <see cref="T:System.Data.DataRow" /> che verranno copiati nella tabella di destinazione.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> che copia tutte le righe dalla matrice <see cref="T:System.Data.DataRow" /> fornita a una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> più volte per la stessa istanza prima del completamento dell'attività.  Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> per la stessa istanza prima del completamento dell'attività.  La connessione viene eliminata o chiusa durante l'esecuzione di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> è stato chiuso durante l'esecuzione del metodo.  Restituito nell'oggetto attività, si è verificato un timeout del pool di connessioni.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> viene chiuso prima dell'esecuzione del metodo.  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Restituito nell'oggetto attività, qualsiasi errore restituito da SQL Server che si è verificato durante l'apertura della connessione.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table">Oggetto <see cref="T:System.Data.DataTable" /> le cui righe vengono copiate nella tabella di destinazione.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> che copia tutte le righe nella matrice <see cref="T:System.Data.DataTable" /> fornita a una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> più volte per la stessa istanza prima del completamento dell'attività.  Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> per la stessa istanza prima del completamento dell'attività.  La connessione viene eliminata o chiusa durante l'esecuzione di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> è stato chiuso durante l'esecuzione del metodo.  Restituito nell'oggetto attività, si è verificato un timeout del pool di connessioni.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> viene chiuso prima dell'esecuzione del metodo.  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Restituito nell'oggetto attività, qualsiasi errore restituito da SQL Server che si è verificato durante l'apertura della connessione.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (reader As IDataReader) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Oggetto <see cref="T:System.Data.IDataReader" /> le cui righe vengono copiate nella tabella di destinazione.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> che copia tutte le righe nella matrice <see cref="T:System.Data.IDataReader" /> fornita a una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> più volte per la stessa istanza prima del completamento dell'attività.  Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> per la stessa istanza prima del completamento dell'attività.  La connessione viene eliminata o chiusa durante l'esecuzione di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> è stato chiuso durante l'esecuzione del metodo.  Restituito nell'oggetto attività, si è verificato un timeout del pool di connessioni.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> viene chiuso prima dell'esecuzione del metodo.  L'oggetto <see cref="T:System.Data.IDataReader" /> è stato chiuso prima della restituzione dell'oggetto <see cref="T:System.Threading.Tasks.Task" /> completato.  La connessione associata dell'oggetto <see cref="T:System.Data.IDataReader" /> è stata chiusa prima che sia stato restituito l'oggetto <see cref="T:System.Threading.Tasks.Task" /> completato.  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Restituito nell'oggetto attività, qualsiasi errore restituito da SQL Server che si è verificato durante l'apertura della connessione.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.Common.DbDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::Common::DbDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.Common.DbDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">Oggetto <see cref="T:System.Data.Common.DbDataReader" /> le cui righe vengono copiate nella tabella di destinazione.</param>
        <param name="cancellationToken">L'istruzione di annullamento. Il valore <see cref="P:System.Threading.CancellationToken.None" /> in questo parametro rende il metodo equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)" />.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)" /> che copia tutte le righe dalla matrice <see cref="T:System.Data.Common.DbDataReader" /> fornita a una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataRow[] rows, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataRow[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (rows, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="rows">Matrice di oggetti <see cref="T:System.Data.DataRow" /> che verranno copiati nella tabella di destinazione.</param>
        <param name="cancellationToken">L'istruzione di annullamento. Il valore <see cref="P:System.Threading.CancellationToken.None" /> in questo parametro rende il metodo equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> che copia tutte le righe dalla matrice <see cref="T:System.Data.DataRow" /> fornita a una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  Il token di annullamento può essere usato per richiedere che l'operazione venga abbandonata prima del timeout del comando.  Le eccezioni verranno segnalate tramite l'oggetto attività restituito.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> più volte per la stessa istanza prima del completamento dell'attività.  Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])" /> per la stessa istanza prima del completamento dell'attività.  La connessione viene eliminata o chiusa durante l'esecuzione di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])" />.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> è stato chiuso durante l'esecuzione del metodo.  Restituito nell'oggetto attività, si è verificato un timeout del pool di connessioni.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> viene chiuso prima dell'esecuzione del metodo.  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Restituito nell'oggetto attività, qualsiasi errore restituito da SQL Server che si è verificato durante l'apertura della connessione.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteToServerAsync (table As DataTable, rowState As DataRowState) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="table">Oggetto <see cref="T:System.Data.DataTable" /> le cui righe vengono copiate nella tabella di destinazione.</param>
        <param name="rowState">Valore ricavato dall'enumerazione <see cref="T:System.Data.DataRowState" />. Solo le righe corrispondenti allo stato della riga vengono copiate nella destinazione.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> che copia solo le righe corrispondenti allo stato della riga nella matrice <see cref="T:System.Data.DataTable" /> fornita in una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> più volte per la stessa istanza prima del completamento dell'attività.  Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> per la stessa istanza prima del completamento dell'attività.  La connessione viene eliminata o chiusa durante l'esecuzione di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> è stato chiuso durante l'esecuzione del metodo.  Restituito nell'oggetto attività, si è verificato un timeout del pool di connessioni.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> viene chiuso prima dell'esecuzione del metodo.  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Restituito nell'oggetto attività, qualsiasi errore restituito da SQL Server che si è verificato durante l'apertura della connessione.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">Oggetto <see cref="T:System.Data.DataTable" /> le cui righe vengono copiate nella tabella di destinazione.</param>
        <param name="cancellationToken">L'istruzione di annullamento. Il valore <see cref="P:System.Threading.CancellationToken.None" /> in questo parametro rende il metodo equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> che copia tutte le righe nella matrice <see cref="T:System.Data.DataTable" /> fornita a una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  Il token di annullamento può essere usato per richiedere che l'operazione venga abbandonata prima del timeout del comando.  Le eccezioni verranno segnalate tramite l'oggetto attività restituito.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> più volte per la stessa istanza prima del completamento dell'attività.  Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)" /> per la stessa istanza prima del completamento dell'attività.  La connessione viene eliminata o chiusa durante l'esecuzione di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> è stato chiuso durante l'esecuzione del metodo.  Restituito nell'oggetto attività, si è verificato un timeout del pool di connessioni.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> viene chiuso prima dell'esecuzione del metodo.  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Restituito nell'oggetto attività, qualsiasi errore restituito da SQL Server che si è verificato durante l'apertura della connessione.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.IDataReader reader, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::IDataReader ^ reader, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.IDataReader * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (reader, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="reader">Oggetto <see cref="T:System.Data.IDataReader" /> le cui righe vengono copiate nella tabella di destinazione.</param>
        <param name="cancellationToken">L'istruzione di annullamento. Il valore <see cref="P:System.Threading.CancellationToken.None" /> in questo parametro rende il metodo equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> che copia tutte le righe nella matrice <see cref="T:System.Data.IDataReader" /> fornita a una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  Il token di annullamento può essere usato per richiedere che l'operazione venga abbandonata prima del timeout del comando.  Le eccezioni verranno segnalate tramite l'oggetto attività restituito.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> più volte per la stessa istanza prima del completamento dell'attività.  Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)" /> per la stessa istanza prima del completamento dell'attività.  La connessione viene eliminata o chiusa durante l'esecuzione di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)" />.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> è stato chiuso durante l'esecuzione del metodo.  Restituito nell'oggetto attività, si è verificato un timeout del pool di connessioni.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> viene chiuso prima dell'esecuzione del metodo.  L'oggetto <see cref="T:System.Data.IDataReader" /> è stato chiuso prima della restituzione dell'oggetto <see cref="T:System.Threading.Tasks.Task" /> completato.  La connessione associata dell'oggetto <see cref="T:System.Data.IDataReader" /> è stata chiusa prima che sia stato restituito l'oggetto <see cref="T:System.Threading.Tasks.Task" /> completato.  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Restituito nell'oggetto attività, qualsiasi errore restituito da SQL Server che si è verificato durante l'apertura della connessione.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToServerAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteToServerAsync(class System.Data.DataTable table, valuetype System.Data.DataRowState rowState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteToServerAsync(System::Data::DataTable ^ table, System::Data::DataRowState rowState, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.WriteToServerAsync : System.Data.DataTable * System.Data.DataRowState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="sqlBulkCopy.WriteToServerAsync (table, rowState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="rowState" Type="System.Data.DataRowState" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="table">Oggetto <see cref="T:System.Data.DataTable" /> le cui righe vengono copiate nella tabella di destinazione.</param>
        <param name="rowState">Valore ricavato dall'enumerazione <see cref="T:System.Data.DataRowState" />. Solo le righe corrispondenti allo stato della riga vengono copiate nella destinazione.</param>
        <param name="cancellationToken">L'istruzione di annullamento. Il valore <see cref="P:System.Threading.CancellationToken.None" /> in questo parametro rende il metodo equivalente a <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)" />.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> che copia solo le righe corrispondenti allo stato della riga nella matrice <see cref="T:System.Data.DataTable" /> fornita in una tabella di destinazione specificata dalla proprietà <see cref="P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName" /> dell'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" />.  Il token di annullamento può essere usato per richiedere che l'operazione venga abbandonata prima del timeout del comando.  Le eccezioni verranno segnalate tramite l'oggetto attività restituito.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> più volte per la stessa istanza prima del completamento dell'attività.  Chiamare <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" /> e <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)" /> per la stessa istanza prima del completamento dell'attività.  La connessione viene eliminata o chiusa durante l'esecuzione di <see cref="M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)" />.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlBulkCopy" /> è stato chiuso durante l'esecuzione del metodo.  Restituito nell'oggetto attività, si è verificato un timeout del pool di connessioni.  Restituito nell'oggetto attività, l'oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> viene chiuso prima dell'esecuzione del metodo.  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Restituito nell'oggetto attività, qualsiasi errore restituito da SQL Server che si è verificato durante l'apertura della connessione.</exception>
      </Docs>
    </Member>
  </Members>
</Type>