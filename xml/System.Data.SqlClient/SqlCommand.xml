<Type Name="SqlCommand" FullName="System.Data.SqlClient.SqlCommand">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c305c2402f0bede47746d1557276d17f55a5ced4" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48757893" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlCommand : System.Data.Common.DbCommand, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlCommand extends System.Data.Common.DbCommand implements class System.Data.IDbCommand, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlCommand" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlCommand&#xA;Inherits DbCommand&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlCommand sealed : System::Data::Common::DbCommand, ICloneable, IDisposable" />
  <TypeSignature Language="F#" Value="type SqlCommand = class&#xA;    inherit DbCommand&#xA;    interface IDbCommand&#xA;    interface ICloneable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbCommand</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultEvent("RecordsAffected")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.ComponentModel.ToolboxItem("System.Drawing.Design.ToolboxItem, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.ToolboxItem(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IDesigner")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.ComponentModel.ToolboxItem("System.Drawing.Design.ToolboxItem, System.Drawing, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un'istruzione Transact-SQL o una stored procedure da eseguire in relazione a un database SQL Server. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un'istanza di <xref:System.Data.SqlClient.SqlCommand> viene creata, la lettura/scrittura proprietà vengono impostate sui valori iniziali. Per un elenco di questi valori, vedere il <xref:System.Data.SqlClient.SqlCommand> costruttore.  
  
 <xref:System.Data.SqlClient.SqlCommand> comprende i seguenti metodi per l'esecuzione di comandi in un database di SQL Server:  
  
|Elemento|Descrizione|  
|----------|-----------------|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>|Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <xref:System.Data.SqlClient.SqlCommand>, in genere l'esecuzione di comandi, ad esempio INSERT, DELETE, UPDATE e istruzioni SET. Ogni chiamata a <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> deve essere associato a una chiamata a <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> che termina l'operazione, in genere in un thread separato.|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>|Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <xref:System.Data.SqlClient.SqlCommand> e recupera uno o più risultati imposta dal server. Ogni chiamata a <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> deve essere associato a una chiamata a <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> che termina l'operazione, in genere in un thread separato.|  
|<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>|Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <xref:System.Data.SqlClient.SqlCommand>. Ogni chiamata a `BeginExecuteXmlReader` deve essere associato a una chiamata a `EndExecuteXmlReader`, che completa l'operazione, in genere in un thread separato e restituisce un <xref:System.Xml.XmlReader> oggetto.|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>|Esegue i comandi che restituiscono righe. Per ottenere migliori prestazioni, <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> richiama i comandi usando l'istruzione Transact-SQL `sp_executesql` stored procedure di sistema. Pertanto, <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> non abbia l'effetto desiderato se usata per eseguire comandi, ad esempio le istruzioni Transact-SQL SET.|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>|Esegue i comandi, ad esempio le istruzioni Transact-SQL INSERT, DELETE, UPDATE e SET.|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>|Recupera un singolo valore (ad esempio, un valore aggregato) da un database.|  
|<xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>|Invia la proprietà <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> alla proprietà <xref:System.Data.SqlClient.SqlCommand.Connection%2A> e compila un oggetto <xref:System.Xml.XmlReader>.|  
  
 È possibile reimpostare la <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> proprietà e il riutilizzo di <xref:System.Data.SqlClient.SqlCommand> oggetto. Tuttavia, è necessario chiudere il <xref:System.Data.SqlClient.SqlDataReader> prima di eseguire un comando precedente o nuova.  
  
 Se un <xref:System.Data.SqlClient.SqlException> viene generata dal metodo che esegue un <xref:System.Data.SqlClient.SqlCommand>, il <xref:System.Data.SqlClient.SqlConnection> rimane aperto quando il livello di gravità è minore o uguale a 19. Quando il livello di gravità è 20 o versione successiva, il server chiude normalmente il <xref:System.Data.SqlClient.SqlConnection>. L'utente può tuttavia riaprire la connessione e continuare.  
  
> [!NOTE]
>  Senza nome, detto anche ordinale, con i parametri non sono supportati dal Provider di dati .NET Framework per SQL Server.  
  
   
  
## Examples  
 L'esempio seguente crea una <xref:System.Data.SqlClient.SqlConnection>, una <xref:System.Data.SqlClient.SqlCommand>e un <xref:System.Data.SqlClient.SqlDataReader>. L'esempio legge i dati e li scrive nella console. Infine, l'esempio chiude il <xref:System.Data.SqlClient.SqlDataReader> e quindi il <xref:System.Data.SqlClient.SqlConnection> come si conclude il `Using` blocchi di codice.  
  
 [!code-csharp[Classic WebData SqlCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand Example/VB/source.vb#1)]  
  
 L'esempio seguente viene illustrato come creare ed eseguire diversi tipi di oggetti SqlCommand.  
  
 Prima di tutto è necessario creare il database di esempio eseguendo lo script seguente:  
  
```  
USE [master]  
GO  
  
CREATE DATABASE [MySchool]  
GO  
  
USE [MySchool]  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE procedure [dbo].[CourseExtInfo] @CourseId int  
as  
select c.CourseID,c.Title,c.Credits,d.Name as DepartmentName  
from Course as c left outer join Department as d on c.DepartmentID=d.DepartmentID  
where c.CourseID=@CourseId  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
create procedure [dbo].[DepartmentInfo] @DepartmentId int,@CourseCount int output  
as  
select @CourseCount=Count(c.CourseID)  
from course as c  
where c.DepartmentID=@DepartmentId  
  
select d.DepartmentID,d.Name,d.Budget,d.StartDate,d.Administrator  
from Department as d  
where d.DepartmentID=@DepartmentId  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
Create PROCEDURE [dbo].[GetDepartmentsOfSpecifiedYear]   
@Year int,@BudgetSum money output  
AS  
BEGIN  
        SELECT @BudgetSum=SUM([Budget])  
  FROM [MySchool].[dbo].[Department]  
  Where YEAR([StartDate])=@Year   
  
SELECT [DepartmentID]  
      ,[Name]  
      ,[Budget]  
      ,[StartDate]  
      ,[Administrator]  
  FROM [MySchool].[dbo].[Department]  
  Where YEAR([StartDate])=@Year  
  
END  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  
[Year] [smallint] NOT NULL,  
[Title] [nvarchar](100) NOT NULL,  
[Credits] [int] NOT NULL,  
[DepartmentID] [int] NOT NULL,  
 CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   
(  
[CourseID] ASC,  
[Year] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  
[Name] [nvarchar](50) NOT NULL,  
[Budget] [money] NOT NULL,  
[StartDate] [datetime] NOT NULL,  
[Administrator] [int] NULL,  
 CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   
(  
[DepartmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Person]([PersonID] [int] IDENTITY(1,1) NOT NULL,  
[LastName] [nvarchar](50) NOT NULL,  
[FirstName] [nvarchar](50) NOT NULL,  
[HireDate] [datetime] NULL,  
[EnrollmentDate] [datetime] NULL,  
 CONSTRAINT [PK_School.Student] PRIMARY KEY CLUSTERED   
(  
[PersonID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[StudentGrade]([EnrollmentID] [int] IDENTITY(1,1) NOT NULL,  
[CourseID] [nvarchar](10) NOT NULL,  
[StudentID] [int] NOT NULL,  
[Grade] [decimal](3, 2) NOT NULL,  
 CONSTRAINT [PK_StudentGrade] PRIMARY KEY CLUSTERED   
(  
[EnrollmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
create view [dbo].[EnglishCourse]  
as  
select c.CourseID,c.Title,c.Credits,c.DepartmentID  
from Course as c join Department as d on c.DepartmentID=d.DepartmentID  
where d.Name=N'English'  
  
GO  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  
SET IDENTITY_INSERT [dbo].[Department] ON   
  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  
SET IDENTITY_INSERT [dbo].[Department] OFF  
SET IDENTITY_INSERT [dbo].[Person] ON   
  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (1, N'Hu', N'Nan', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (2, N'Norman', N'Laura', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (3, N'Olivotto', N'Nino', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (4, N'Anand', N'Arturo', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (5, N'Jai', N'Damien', NULL, CAST(0x0000A0BF00000000 AS DateTime))  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (6, N'Holt', N'Roger', CAST(0x000097F100000000 AS DateTime), NULL)  
INSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (7, N'Martin', N'Randall', CAST(0x00008B1A00000000 AS DateTime), NULL)  
SET IDENTITY_INSERT [dbo].[Person] OFF  
SET IDENTITY_INSERT [dbo].[StudentGrade] ON   
  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (1, N'C1045', 1, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (2, N'C1045', 2, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (3, N'C1045', 3, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (4, N'C1045', 4, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (5, N'C1045', 5, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (6, N'C1061', 1, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (7, N'C1061', 3, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (8, N'C1061', 4, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (9, N'C1061', 5, CAST(1.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (10, N'C2021', 1, CAST(2.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (11, N'C2021', 2, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (12, N'C2021', 4, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (13, N'C2021', 5, CAST(3.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (14, N'C2042', 1, CAST(2.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (15, N'C2042', 2, CAST(3.50 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (16, N'C2042', 3, CAST(4.00 AS Decimal(3, 2)))  
INSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (17, N'C2042', 5, CAST(3.00 AS Decimal(3, 2)))  
SET IDENTITY_INSERT [dbo].[StudentGrade] OFF  
ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  
REFERENCES [dbo].[Department] ([DepartmentID])  
GO  
ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  
GO  
ALTER TABLE [dbo].[StudentGrade]  WITH CHECK ADD  CONSTRAINT [FK_StudentGrade_Student] FOREIGN KEY([StudentID])  
REFERENCES [dbo].[Person] ([PersonID])  
GO  
ALTER TABLE [dbo].[StudentGrade] CHECK CONSTRAINT [FK_StudentGrade_Student]  
GO  
```  
  
 Successivamente, compilare ed eseguire le operazioni seguenti:  
  
```  
using System;  
using System.Data;  
using System.Data.SqlClient;  
using System.Threading.Tasks;  
  
class Program {  
  
   static class SqlHelper {  
      // Set the connection, command, and then execute the command with non query.  
      public static Int32 ExecuteNonQuery(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         using (SqlConnection conn = new SqlConnection(connectionString)) {  
            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
               // There're three command types: StoredProcedure, Text, TableDirect. The TableDirect   
               // type is only for OLE DB.    
               cmd.CommandType = commandType;  
               cmd.Parameters.AddRange(parameters);  
  
               conn.Open();  
               return cmd.ExecuteNonQuery();  
            }  
         }  
      }  
  
      // Set the connection, command, and then execute the command and only return one value.  
      public static Object ExecuteScalar(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         using (SqlConnection conn = new SqlConnection(connectionString)) {  
            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
               cmd.CommandType = commandType;  
               cmd.Parameters.AddRange(parameters);  
  
               conn.Open();  
               return cmd.ExecuteScalar();  
            }  
         }  
      }  
  
      // Set the connection, command, and then execute the command with query and return the reader.  
      public static SqlDataReader ExecuteReader(String connectionString, String commandText,  
          CommandType commandType, params SqlParameter[] parameters) {  
         SqlConnection conn = new SqlConnection(connectionString);  
  
         using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  
            cmd.CommandType = commandType;  
            cmd.Parameters.AddRange(parameters);  
  
            conn.Open();  
            // When using CommandBehavior.CloseConnection, the connection will be closed when the   
            // IDataReader is closed.  
            SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);  
  
            return reader;  
         }  
      }  
   }  
  
   static void Main(string[] args) {  
      String connectionString = "Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;";  
  
      CountCourses(connectionString, 2012);  
      Console.WriteLine();  
  
      Console.WriteLine("Following result is the departments that started from 2007:");  
      GetDepartments(connectionString, 2007);  
      Console.WriteLine();  
  
      Console.WriteLine("Add the credits when the credits of course is lower than 4.");  
      AddCredits(connectionString, 4);  
      Console.WriteLine();  
  
      Console.WriteLine("Please press any key to exit...");  
      Console.ReadKey();  
   }  
  
   static void CountCourses(String connectionString, Int32 year) {  
      String commandText = "Select Count([CourseID]) FROM [MySchool].[dbo].[Course] Where Year=@Year";  
      SqlParameter parameterYear = new SqlParameter("@Year", SqlDbType.Int);  
      parameterYear.Value = year;  
  
      Object oValue = SqlHelper.ExecuteScalar(connectionString, commandText, CommandType.Text, parameterYear);  
      Int32 count;  
      if (Int32.TryParse(oValue.ToString(), out count))  
         Console.WriteLine("There {0} {1} course{2} in {3}.", count > 1 ? "are" : "is", count, count > 1 ? "s" : null, year);  
   }  
  
   // Display the Departments that start from the specified year.  
   static void GetDepartments(String connectionString, Int32 year) {  
      String commandText = "dbo.GetDepartmentsOfSpecifiedYear";  
  
      // Specify the year of StartDate  
      SqlParameter parameterYear = new SqlParameter("@Year", SqlDbType.Int);  
      parameterYear.Value = year;  
  
      // When the direction of parameter is set as Output, you can get the value after   
      // executing the command.  
      SqlParameter parameterBudget = new SqlParameter("@BudgetSum", SqlDbType.Money);  
      parameterBudget.Direction = ParameterDirection.Output;  
  
      using (SqlDataReader reader = SqlHelper.ExecuteReader(connectionString, commandText,  
          CommandType.StoredProcedure, parameterYear, parameterBudget)) {  
         Console.WriteLine("{0,-20}{1,-20}{2,-20}{3,-20}", "Name", "Budget", "StartDate",  
             "Administrator");  
         while (reader.Read()) {  
            Console.WriteLine("{0,-20}{1,-20:C}{2,-20:d}{3,-20}", reader["Name"],  
                reader["Budget"], reader["StartDate"], reader["Administrator"]);  
         }  
      }  
      Console.WriteLine("{0,-20}{1,-20:C}", "Sum:", parameterBudget.Value);  
   }  
  
   // If credits of course is lower than the certain value, the method will add the credits.  
   static void AddCredits(String connectionString, Int32 creditsLow) {  
      String commandText = "Update [MySchool].[dbo].[Course] Set Credits=Credits+1 Where Credits<@Credits";  
  
      SqlParameter parameterCredits = new SqlParameter("@Credits", creditsLow);  
  
      Int32 rows = SqlHelper.ExecuteNonQuery(connectionString, commandText, CommandType.Text, parameterCredits);  
  
      Console.WriteLine("{0} row{1} {2} updated.", rows, rows > 1 ? "s" : null, rows > 1 ? "are" : "is");  
   }  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Recupero e modifica di dati in ADO.NET</related>
    <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">SQL Server e ADO.NET</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il costruttore di base Inizializza tutti i campi per i relativi valori predefiniti. La tabella seguente illustra i valori iniziali delle proprietà per un'istanza di <xref:System.Data.SqlClient.SqlCommand>.  
  
|Proprietà|Valore iniziale|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|una stringa vuota ("")|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|Null|  
  
 È possibile modificare il valore di ognuna di queste proprietà tramite una chiamata distinta per la proprietà.  
  
   
  
## Examples  
 L'esempio seguente crea una <xref:System.Data.SqlClient.SqlCommand> e imposta il `CommandTimeout` proprietà.  
  
 [!code-csharp[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Recupero e modifica di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">SQL Server e ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cmdText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand(System::String ^ cmdText);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlCommand : string -&gt; System.Data.SqlClient.SqlCommand" Usage="new System.Data.SqlClient.SqlCommand cmdText" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cmdText">Testo della query.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.SqlClient.SqlCommand" /> con il testo della query.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un'istanza di <xref:System.Data.SqlClient.SqlCommand> creato, le seguenti proprietà vengono impostate sui valori iniziali di lettura/scrittura.  
  
|Proprietà|Valore iniziale|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|Null|  
  
 È possibile modificare il valore di ognuna di queste proprietà tramite una chiamata distinta per la proprietà.  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Data.SqlClient.SqlCommand>, passando il testo di comando e stringa di connessione.  
  
 [!code-csharp[Classic WebData SqlCommand.SqlCommand1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.SqlCommand1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cmdText As String, connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand(System::String ^ cmdText, System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlCommand : string * System.Data.SqlClient.SqlConnection -&gt; System.Data.SqlClient.SqlCommand" Usage="new System.Data.SqlClient.SqlCommand (cmdText, connection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="cmdText">Testo della query.</param>
        <param name="connection">Oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> che rappresenta la connessione a un'istanza di SQL Server.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.SqlClient.SqlCommand" /> con il testo della query e un oggetto <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tabella seguente illustra i valori iniziali delle proprietà per un'istanza di <xref:System.Data.SqlClient.SqlCommand>.  
  
|Proprietà|Valore iniziale|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|Una nuova <xref:System.Data.SqlClient.SqlConnection> che rappresenta il valore per il `connection` parametro.|  
  
 È possibile modificare il valore di uno di questi parametri impostando le proprietà correlate.  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Data.SqlClient.SqlCommand> e vengono impostate alcune delle relative proprietà.  
  
 [!code-csharp[Classic WebData SqlCommand.SqlCommand2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.SqlCommand2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.SqlCommand2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection, class System.Data.SqlClient.SqlTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cmdText As String, connection As SqlConnection, transaction As SqlTransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand(System::String ^ cmdText, System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlCommand : string * System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlTransaction -&gt; System.Data.SqlClient.SqlCommand" Usage="new System.Data.SqlClient.SqlCommand (cmdText, connection, transaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="transaction" Type="System.Data.SqlClient.SqlTransaction" />
      </Parameters>
      <Docs>
        <param name="cmdText">Testo della query.</param>
        <param name="connection">Oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> che rappresenta la connessione a un'istanza di SQL Server.</param>
        <param name="transaction">Oggetto <see cref="T:System.Data.SqlClient.SqlTransaction" /> in cui viene eseguito l'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.SqlClient.SqlCommand" /> con il testo della query, un oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> e l'oggetto <see cref="T:System.Data.SqlClient.SqlTransaction" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La tabella seguente illustra i valori iniziali delle proprietà per un'istanza di <xref:System.Data.SqlClient.SqlCommand>.  
  
|Proprietà|Valore iniziale|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>|`cmdText`|  
|<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|30|  
|<xref:System.Data.SqlClient.SqlCommand.CommandType%2A>|`CommandType.Text`|  
|<xref:System.Data.SqlClient.SqlCommand.Connection%2A>|Una nuova <xref:System.Data.SqlClient.SqlConnection> che rappresenta il valore per il `connection` parametro.|  
  
 È possibile modificare il valore di uno di questi parametri impostando le proprietà correlate.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction, System.Data.SqlClient.SqlCommandColumnEncryptionSetting columnEncryptionSetting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cmdText, class System.Data.SqlClient.SqlConnection connection, class System.Data.SqlClient.SqlTransaction transaction, valuetype System.Data.SqlClient.SqlCommandColumnEncryptionSetting columnEncryptionSetting) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommandColumnEncryptionSetting)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cmdText As String, connection As SqlConnection, transaction As SqlTransaction, columnEncryptionSetting As SqlCommandColumnEncryptionSetting)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommand(System::String ^ cmdText, System::Data::SqlClient::SqlConnection ^ connection, System::Data::SqlClient::SqlTransaction ^ transaction, System::Data::SqlClient::SqlCommandColumnEncryptionSetting columnEncryptionSetting);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlCommand : string * System.Data.SqlClient.SqlConnection * System.Data.SqlClient.SqlTransaction * System.Data.SqlClient.SqlCommandColumnEncryptionSetting -&gt; System.Data.SqlClient.SqlCommand" Usage="new System.Data.SqlClient.SqlCommand (cmdText, connection, transaction, columnEncryptionSetting)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cmdText" Type="System.String" />
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
        <Parameter Name="transaction" Type="System.Data.SqlClient.SqlTransaction" />
        <Parameter Name="columnEncryptionSetting" Type="System.Data.SqlClient.SqlCommandColumnEncryptionSetting" />
      </Parameters>
      <Docs>
        <param name="cmdText">Testo della query.</param>
        <param name="connection">Oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> che rappresenta la connessione a un'istanza di SQL Server.</param>
        <param name="transaction">Oggetto <see cref="T:System.Data.SqlClient.SqlTransaction" /> in cui viene eseguito l'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" />.</param>
        <param name="columnEncryptionSetting">Impostazione di crittografia. Per altre informazioni, vedere [Always Encrypted](/sql/relational-databases/security/encryption/always-encrypted-database-engine).</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Data.SqlClient.SqlCommand" /> con l'impostazione specificata per il testo del comando, la connessione, la transazione e la crittografia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginExecuteNonQuery">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginExecuteNonQuery">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteNonQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteNonQuery () As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteNonQuery();" />
      <MemberSignature Language="F#" Value="member this.BeginExecuteNonQuery : unit -&gt; IAsyncResult" Usage="sqlCommand.BeginExecuteNonQuery " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che può essere utilizzato per eseguire il polling, attendere i risultati o entrambe le cose; questo valore è necessario anche per chiamare il metodo <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />, che restituisce il numero delle righe interessate.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> metodo avvia il processo di esecuzione in modo asincrono un [!INCLUDE[tsql](~/includes/tsql-md.md)] istruzione o stored procedure che non restituisce righe, in modo che altre attività eseguibili simultaneamente durante l'esecuzione dell'istruzione. Al termine dell'istruzione, gli sviluppatori devono chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> fine dell'operazione del metodo. Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> metodo viene restituito immediatamente (<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> non ha alcun effetto sul <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>), ma fino a quando non viene eseguito il codice corrispondente <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> chiamata al metodo, non è necessario eseguire altre chiamate che iniziano con un'esecuzione sincrona o asincrona sulla base della stessa <xref:System.Data.SqlClient.SqlCommand> oggetto. Chiama il <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> prima dell'esecuzione del comando completamento causa il <xref:System.Data.SqlClient.SqlCommand> blocco oggetto fino al completamento dell'esecuzione.  
  
 Si noti che il testo del comando e i parametri vengono inviati al server in modo sincrono. Se un comando di grandi dimensioni o numero di parametri viene inviati, questo metodo si blocchi durante la scrittura. Dopo l'invio del comando, il metodo viene restituito immediatamente senza attendere una risposta dal server, vale a dire, operazioni di lettura sono asincrone.  
  
 Perché questo overload non supporta una routine di callback, gli sviluppatori devono entrambi eseguano il polling per determinare se il comando è stata completata, tramite il <xref:System.IAsyncResult.IsCompleted%2A> proprietà del <xref:System.IAsyncResult> restituiti dal <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> metodo; o attendere il completamento di uno o più comandi usando il <xref:System.IAsyncResult.AsyncWaitHandle%2A> proprietà dell'oggetto restituito <xref:System.IAsyncResult>.  
  
   
  
## Examples  
 La seguente applicazione console crea l'aggiornamento dei dati all'interno di **AdventureWorks** database di esempio, in modo asincrono. Per emulare un processo a esecuzione prolungata, in questo esempio viene inserita un'istruzione WAITFOR nel testo del comando. In genere, non si è necessario cercare i comandi di rallentare l'esecuzione, ma questa operazione in questo caso rende più semplice illustrare il comportamento asincrono.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteNonQuery#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQuery/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteNonQuery#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQuery/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Qualsiasi errore che si è verificato durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.InvalidOperationException">La coppia nome/valore "Asynchronous Processing=true" non è stata inclusa nella stringa di connessione che definisce la connessione per <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteNonQuery">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteNonQuery (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteNonQuery(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteNonQuery (callback As AsyncCallback, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteNonQuery(AsyncCallback ^ callback, System::Object ^ stateObject);" />
      <MemberSignature Language="F#" Value="member this.BeginExecuteNonQuery : AsyncCallback * obj -&gt; IAsyncResult" Usage="sqlCommand.BeginExecuteNonQuery (callback, stateObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">Delegato <see cref="T:System.AsyncCallback" /> richiamato al termine dell'esecuzione del comando. Passare <see langword="null" /> (<see langword="Nothing" /> in Microsoft Visual Basic) per indicare che non è necessario alcun callback.</param>
        <param name="stateObject">Oggetto di stato definito dall'utente e passato alla routine di callback. Recuperare questo oggetto dalla routine di callback usando la proprietà <see cref="P:System.IAsyncResult.AsyncState" />.</param>
        <summary>Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" />, data una routine di callback e informazioni sullo stato.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che può essere utilizzato per eseguire il polling, attendere i risultati o entrambe le cose; questo valore è necessario anche per chiamare il metodo <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />, che restituisce il numero delle righe interessate.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> metodo avvia il processo di esecuzione in modo asincrono un'istruzione Transact-SQL o stored procedure che non restituisce righe, in modo che altre attività eseguibili simultaneamente durante l'esecuzione dell'istruzione. Al termine dell'istruzione, gli sviluppatori devono chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> fine dell'operazione del metodo. Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> metodo viene restituito immediatamente (<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> non ha alcun effetto sul <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>), ma fino a quando non viene eseguito il codice corrispondente <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> chiamata al metodo, non è necessario eseguire altre chiamate che iniziano con un'esecuzione sincrona o asincrona sulla base della stessa <xref:System.Data.SqlClient.SqlCommand> oggetto. Chiama il <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> prima dell'esecuzione del comando completamento causa il <xref:System.Data.SqlClient.SqlCommand> blocco oggetto fino al completamento dell'esecuzione.  
  
 Il `callback` consente di specificare un <xref:System.AsyncCallback> delegato che viene chiamato quando l'istruzione è stata completata. È possibile chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> metodo dall'interno del delegato o da qualsiasi altra posizione all'interno dell'applicazione. Inoltre, è possibile passare qualsiasi oggetto nel `asyncStateObject` parametro e la routine di callback possono recuperare queste informazioni usando il <xref:System.IAsyncResult.AsyncState%2A> proprietà.  
  
 Si noti che il testo del comando e i parametri vengono inviati al server in modo sincrono. Se un comando di grandi dimensioni o numero di parametri viene inviati, questo metodo si blocchi durante la scrittura. Dopo l'invio del comando, il metodo viene restituito immediatamente senza attendere una risposta dal server, vale a dire, operazioni di lettura sono asincrone.  
  
 Poiché la procedura di callback viene eseguita da un thread in background fornito da Microsoft .NET common language runtime, è molto importante eseguire un approccio rigoroso alla gestione delle interazioni tra thread all'interno delle applicazioni. Ad esempio, non è possibile interagire con il contenuto di un modulo di routine di callback; è necessario l'aggiornamento del modulo, è necessario passare al thread del form per svolgere il proprio lavoro. Nell'esempio riportato in questo argomento viene illustrato questo comportamento.  
  
 Tutti gli errori che si verificano durante l'esecuzione dell'operazione vengono generati come eccezioni nella routine di callback. È necessario gestire l'eccezione della procedura di callback, non nell'applicazione principale. Vedere l'esempio in questo argomento per ulteriori informazioni sulla gestione delle eccezioni nella routine di callback.  
  
   
  
## Examples  
 L'applicazione di Windows seguente viene illustrato come utilizzare il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> metodo, l'esecuzione di un'istruzione Transact-SQL che include un ritardo di alcuni secondi (emulando un comando a esecuzione prolungata).  
  
 Questo esempio illustra varie tecniche importanti. Ciò include la chiamata a un metodo che interagisce con il form da un thread separato. Inoltre, questo esempio viene illustrato come sia necessario impedire agli utenti di eseguire contemporaneamente più volte un comando e modo in cui è necessario assicurarsi che il modulo non venga chiuso prima la procedura di callback viene chiamato.  
  
 Per impostare questo esempio, creare una nuova applicazione Windows. Inserire un <xref:System.Windows.Forms.Button> controllo e un <xref:System.Windows.Forms.Label> controllo nel form (accettando il nome predefinito per ogni controllo). Aggiungere il codice seguente alla classe del form, modificando la stringa di connessione in base alle necessità per l'ambiente.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteNonQueryForm#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQueryForm/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteNonQueryForm#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteNonQueryForm/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Qualsiasi errore che si è verificato durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.InvalidOperationException">La coppia nome/valore "Asynchronous Processing=true" non è stata inclusa nella stringa di connessione che definisce la connessione per <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginExecuteReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> e recupera uno o più set di risultati dal server.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteReader () As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteReader();" />
      <MemberSignature Language="F#" Value="member this.BeginExecuteReader : unit -&gt; IAsyncResult" Usage="sqlCommand.BeginExecuteReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> e recupera uno o più set di risultati dal server.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che può essere utilizzato per eseguire il polling, attendere i risultati o entrambe le cose; questo valore è necessario anche per chiamare il metodo <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />, che restituisce un'istanza <see cref="T:System.Data.SqlClient.SqlDataReader" /> che può essere utilizzata per recuperare le righe restituite.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> metodo avvia il processo di esecuzione in modo asincrono un'istruzione Transact-SQL o stored procedure che restituisce righe, in modo che altre attività eseguibili simultaneamente durante l'esecuzione dell'istruzione. Al termine dell'istruzione, gli sviluppatori devono chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metodo per completare l'operazione e recuperare il <xref:System.Data.SqlClient.SqlDataReader> restituita dal comando. Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> metodo viene restituito immediatamente, ma fino a quando non viene eseguito il codice corrispondente <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> chiamata al metodo, non è necessario eseguire altre chiamate che iniziano con un'esecuzione sincrona o asincrona sulla base della stessa <xref:System.Data.SqlClient.SqlCommand> oggetto. Chiama il <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> prima dell'esecuzione del comando completamento causa il <xref:System.Data.SqlClient.SqlCommand> blocco oggetto fino al completamento dell'esecuzione.  
  
 Si noti che il testo del comando e i parametri vengono inviati al server in modo sincrono. Se un comando di grandi dimensioni o numero di parametri viene inviati, questo metodo si blocchi durante la scrittura. Dopo l'invio del comando, il metodo viene restituito immediatamente senza attendere una risposta dal server, vale a dire, operazioni di lettura sono asincrone. Anche se l'esecuzione del comando è asincrona, il recupero dei valori è sincrono. Ciò significa che le chiamate a <xref:System.Data.SqlClient.SqlDataReader.Read%2A> possono venire bloccate se sono necessari più dati e della rete sottostante operazione si blocca di lettura.  
  
 Perché questo overload non supporta una routine di callback, gli sviluppatori devono entrambi eseguano il polling per determinare se il comando è stata completata, tramite il <xref:System.IAsyncResult.IsCompleted%2A> proprietà del <xref:System.IAsyncResult> restituiti dal <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> metodo; o attendere il completamento di uno o più comandi usando il <xref:System.IAsyncResult.AsyncWaitHandle%2A> proprietà dell'oggetto restituito <xref:System.IAsyncResult>.  
  
 Se si usa <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> per accedere a dati XML, SQL Server restituirà i risultati XML maggiore 2033 caratteri di lunghezza in più righe di 2033 caratteri. Per evitare questo comportamento, utilizzare <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> per leggere le query FOR XML. Per altre informazioni, vedere l'articolo Q310378, "PRB: XML dei dati è troncato quando si usa SqlDataReader," nella Microsoft Knowledge Base al http://support.microsoft.com.  
  
   
  
## Examples  
 La seguente applicazione console avvia il processo di recupero di un lettore di dati in modo asincrono. Durante l'attesa dei risultati, questa semplice applicazione si trova in un ciclo, esaminando la <xref:System.IAsyncResult.IsCompleted%2A> valore della proprietà. Non appena terminato il processo, il codice recupera il <xref:System.Data.SqlClient.SqlDataReader> e visualizza il relativo contenuto.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReader/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Qualsiasi errore che si è verificato durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.InvalidOperationException">La coppia nome/valore "Asynchronous Processing=true" non è stata inclusa nella stringa di connessione che definisce la connessione per <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteReader (behavior As CommandBehavior) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteReader(System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="member this.BeginExecuteReader : System.Data.CommandBehavior -&gt; IAsyncResult" Usage="sqlCommand.BeginExecuteReader behavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">Uno dei valori <see cref="T:System.Data.CommandBehavior" /> che indica le opzioni per l'esecuzione dell'istruzione e il recupero dei dati.</param>
        <summary>Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> utilizzando uno dei valori <see cref="T:System.Data.CommandBehavior" />.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che può essere utilizzato per eseguire il polling, attendere i risultati o entrambe le cose; questo valore è necessario anche per chiamare il metodo <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />, che restituisce un'istanza <see cref="T:System.Data.SqlClient.SqlDataReader" /> che può essere utilizzata per recuperare le righe restituite.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> metodo avvia il processo di esecuzione in modo asincrono un'istruzione Transact-SQL o stored procedure che restituisce righe, in modo che altre attività eseguibili simultaneamente durante l'esecuzione dell'istruzione. Al termine dell'istruzione, gli sviluppatori devono chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metodo per completare l'operazione e recuperare il <xref:System.Data.SqlClient.SqlDataReader> restituita dal comando. Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> metodo viene restituito immediatamente, ma fino a quando non viene eseguito il codice corrispondente <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> chiamata al metodo, non è necessario eseguire altre chiamate che iniziano con un'esecuzione sincrona o asincrona sulla base della stessa <xref:System.Data.SqlClient.SqlCommand> oggetto. Chiama il <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> prima dell'esecuzione del comando completamento causa il <xref:System.Data.SqlClient.SqlCommand> blocco oggetto fino al completamento dell'esecuzione.  
  
 Il `behavior` parametro consente di specificare le opzioni che controllano il comportamento del comando e la connessione. Questi valori possono essere combinati tra loro (usando il linguaggio di programmazione `OR` operatore); in genere, gli sviluppatori di usare il `CommandBehavior.CloseConnection` valore per assicurarsi che la connessione viene chiusa dal runtime quando la <xref:System.Data.SqlClient.SqlDataReader> viene chiuso.  
  
 Si noti che il testo del comando e i parametri vengono inviati al server in modo sincrono. Se un comando di grandi dimensioni o numero di parametri viene inviati, questo metodo si blocchi durante la scrittura. Dopo l'invio del comando, il metodo viene restituito immediatamente senza attendere una risposta dal server, vale a dire, operazioni di lettura sono asincrone. Anche se l'esecuzione del comando è asincrona, il recupero dei valori è sincrono. Ciò significa che le chiamate a <xref:System.Data.SqlClient.SqlDataReader.Read%2A> possono venire bloccate se sono necessari più dati e della rete sottostante operazione si blocca di lettura.  
  
 Perché questo overload non supporta una routine di callback, gli sviluppatori devono entrambi eseguano il polling per determinare se il comando è stata completata, tramite il <xref:System.IAsyncResult.IsCompleted%2A> proprietà del <xref:System.IAsyncResult> restituiti dal <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> metodo; o attendere il completamento di uno o più comandi usando il <xref:System.IAsyncResult.AsyncWaitHandle%2A> proprietà dell'oggetto restituito <xref:System.IAsyncResult>.  
  
 Se si usa <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> per accedere a dati XML, SQL Server restituisce i risultati XML maggiore 2033 caratteri di lunghezza in più righe di 2033 caratteri. Per evitare questo comportamento, utilizzare <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> per leggere le query FOR XML. Per altre informazioni, vedere l'articolo Q310378, "PRB: XML dei dati è troncato quando si usa SqlDataReader," nella Microsoft Knowledge Base al http://support.microsoft.com.  
  
   
  
## Examples  
 La seguente applicazione console avvia il processo di recupero di un lettore di dati in modo asincrono. Durante l'attesa dei risultati, questa semplice applicazione si trova in un ciclo, esaminando la <xref:System.IAsyncResult.IsCompleted%2A> valore della proprietà. Una volta completato il processo, il codice recupera il <xref:System.Data.SqlClient.SqlDataReader> e visualizza il relativo contenuto.  
  
 In questo esempio viene anche passata la `CommandBehavior.CloseConnection` e `CommandBehavior.SingleRow` i valori nel parametro di comportamento, causando la connessione verrà chiusa con l'oggetto restituito <xref:System.Data.SqlClient.SqlDataReader> è chiuso e ottimizzare per un risultato a riga singola.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncSimple/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncSimple/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Qualsiasi errore che si è verificato durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.InvalidOperationException">La coppia nome/valore "Asynchronous Processing=true" non è stata inclusa nella stringa di connessione che definisce la connessione per <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteReader (callback As AsyncCallback, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteReader(AsyncCallback ^ callback, System::Object ^ stateObject);" />
      <MemberSignature Language="F#" Value="member this.BeginExecuteReader : AsyncCallback * obj -&gt; IAsyncResult" Usage="sqlCommand.BeginExecuteReader (callback, stateObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">Delegato <see cref="T:System.AsyncCallback" /> richiamato al termine dell'esecuzione del comando. Passare <see langword="null" /> (<see langword="Nothing" /> in Microsoft Visual Basic) per indicare che non è necessario alcun callback.</param>
        <param name="stateObject">Oggetto di stato definito dall'utente e passato alla routine di callback. Recuperare questo oggetto dalla routine di callback usando la proprietà <see cref="P:System.IAsyncResult.AsyncState" />.</param>
        <summary>Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> e recupera uno o più set di risultati dal server, in base alla routine di callback e alle informazioni sullo stato.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che può essere utilizzato per eseguire il polling, attendere i risultati o entrambe le cose; questo valore è necessario anche per chiamare il metodo <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />, che restituisce un'istanza <see cref="T:System.Data.SqlClient.SqlDataReader" /> che può essere utilizzata per recuperare le righe restituite.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> metodo avvia il processo di esecuzione in modo asincrono un'istruzione Transact-SQL o stored procedure che restituisce righe, in modo che altre attività eseguibili simultaneamente durante l'esecuzione dell'istruzione. Al termine dell'istruzione, gli sviluppatori devono chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metodo per completare l'operazione e recuperare il <xref:System.Data.SqlClient.SqlDataReader> restituita dal comando. Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> metodo viene restituito immediatamente, ma fino a quando non viene eseguito il codice corrispondente <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> chiamata al metodo, non è necessario eseguire altre chiamate che iniziano con un'esecuzione sincrona o asincrona sulla base della stessa <xref:System.Data.SqlClient.SqlCommand> oggetto. Chiama il <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> prima del completamento dell'esecuzione del comando causa la <xref:System.Data.SqlClient.SqlCommand> blocco oggetto fino al completamento dell'esecuzione.  
  
 Il `callback` consente di specificare un <xref:System.AsyncCallback> delegato che viene chiamato quando l'istruzione è stata completata. È possibile chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metodo dall'interno del delegato o da qualsiasi altra posizione all'interno dell'applicazione. Inoltre, è possibile passare qualsiasi oggetto nel `stateObject` parametro e la routine di callback possono recuperare queste informazioni usando il <xref:System.IAsyncResult.AsyncState%2A> proprietà.  
  
 Si noti che il testo del comando e i parametri vengono inviati al server in modo sincrono. Se un comando di grandi dimensioni o numero di parametri viene inviati, questo metodo si blocchi durante la scrittura. Dopo l'invio del comando, il metodo viene restituito immediatamente senza attendere una risposta dal server, vale a dire, operazioni di lettura sono asincrone. Anche se l'esecuzione del comando è asincrona, il recupero dei valori è sincrono. Ciò significa che le chiamate a <xref:System.Data.SqlClient.SqlDataReader.Read%2A> possono venire bloccate se sono necessari più dati e della rete sottostante operazione si blocca di lettura.  
  
 Poiché la procedura di callback viene eseguita da un thread in background fornito dal runtime di Microsoft .NET, è molto importante eseguire un approccio rigoroso alla gestione delle interazioni tra thread all'interno delle applicazioni. Ad esempio, non è possibile interagire con il contenuto di un modulo di routine di callback; è necessario l'aggiornamento del modulo, è necessario passare al thread del form per svolgere il proprio lavoro. Nell'esempio riportato in questo argomento viene illustrato questo comportamento.  
  
 Tutti gli errori che si verificano durante l'esecuzione dell'operazione vengono generati come eccezioni nella routine di callback. È necessario gestire l'eccezione della procedura di callback, non nell'applicazione principale. Vedere l'esempio in questo argomento per ulteriori informazioni sulla gestione delle eccezioni nella routine di callback.  
  
 Se si usa <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> per accedere a dati XML, SQL Server restituisce i risultati XML maggiore 2033 caratteri di lunghezza in più righe di 2033 caratteri. Per evitare questo comportamento, utilizzare <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> per leggere le query FOR XML. Per altre informazioni, vedere l'articolo Q310378, "PRB: XML dei dati è troncato quando si usa SqlDataReader," nella Microsoft Knowledge Base al http://support.microsoft.com.  
  
   
  
## Examples  
 Nella seguente applicazione Windows viene illustrato l'uso del metodo <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>, eseguendo un'istruzione Transact-SQL che include un ritardo di qualche secondo, ovvero emulando un comando a esecuzione prolungata. Poiché l'esempio esegue il comando in modo asincrono, il modulo resta reattivo in attesa dei risultati. Questo esempio viene passato l'esecuzione <xref:System.Data.SqlClient.SqlCommand> dell'oggetto come i `stateObject` parametro; questa operazione rende più semplice recuperare il <xref:System.Data.SqlClient.SqlCommand> oggetto dalla routine di callback, in modo che il codice può chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metodo corrispondente al iniziale chiamata a <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 Questo esempio illustra varie tecniche importanti. Ciò include la chiamata a un metodo che interagisce con il form da un thread separato. Inoltre, questo esempio viene illustrato come sia necessario impedire agli utenti di eseguire contemporaneamente più volte un comando e modo in cui è necessario assicurarsi che il modulo non venga chiuso prima la procedura di callback viene chiamato.  
  
 Per impostare questo esempio, creare una nuova applicazione Windows. Inserire un <xref:System.Windows.Forms.Button> (controllo), una <xref:System.Windows.Forms.DataGridView> (controllo) e un <xref:System.Windows.Forms.Label> controllo nel form (accettando il nome predefinito per ogni controllo). Aggiungere il codice seguente alla classe del form, modificando la stringa di connessione in base alle necessità per l'ambiente.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReaderAsync#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsync/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsync#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsync/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Qualsiasi errore che si è verificato durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.InvalidOperationException">La coppia nome/valore "Asynchronous Processing=true" non è stata inclusa nella stringa di connessione che definisce la connessione per <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteReader(class System.AsyncCallback callback, object stateObject, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteReader (callback As AsyncCallback, stateObject As Object, behavior As CommandBehavior) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteReader(AsyncCallback ^ callback, System::Object ^ stateObject, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="member this.BeginExecuteReader : AsyncCallback * obj * System.Data.CommandBehavior -&gt; IAsyncResult" Usage="sqlCommand.BeginExecuteReader (callback, stateObject, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="callback">Delegato <see cref="T:System.AsyncCallback" /> richiamato al termine dell'esecuzione del comando. Passare <see langword="null" /> (<see langword="Nothing" /> in Microsoft Visual Basic) per indicare che non è necessario alcun callback.</param>
        <param name="stateObject">Oggetto di stato definito dall'utente e passato alla routine di callback. Recuperare questo oggetto dalla routine di callback usando la proprietà <see cref="P:System.IAsyncResult.AsyncState" />.</param>
        <param name="behavior">Uno dei valori <see cref="T:System.Data.CommandBehavior" /> che indica le opzioni per l'esecuzione dell'istruzione e il recupero dei dati.</param>
        <summary>Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> utilizzando uno dei valori <see langword="CommandBehavior" /> e recuperando uno o più set di risultati dal server, in base alla routine di callback e alle informazioni sullo stato.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che può essere utilizzato per eseguire il polling, attendere i risultati o entrambe le cose; questo valore è necessario anche per chiamare il metodo <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />, che restituisce un'istanza <see cref="T:System.Data.SqlClient.SqlDataReader" /> che può essere utilizzata per recuperare le righe restituite.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> metodo avvia il processo di esecuzione in modo asincrono un'istruzione Transact-SQL o stored procedure che restituisce righe, in modo che altre attività eseguibili simultaneamente durante l'esecuzione dell'istruzione. Al termine dell'istruzione, gli sviluppatori devono chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metodo per completare l'operazione e recuperare il <xref:System.Data.SqlClient.SqlDataReader> restituita dal comando. Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> metodo viene restituito immediatamente, ma fino a quando non viene eseguito il codice corrispondente <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> chiamata al metodo, non è necessario eseguire altre chiamate che iniziano con un'esecuzione sincrona o asincrona sulla base della stessa <xref:System.Data.SqlClient.SqlCommand> oggetto. Chiama il <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> prima dell'esecuzione del comando completamento causa il <xref:System.Data.SqlClient.SqlCommand> blocco oggetto fino al completamento dell'esecuzione.  
  
 Il `callback` consente di specificare un <xref:System.AsyncCallback> delegato che viene chiamato quando l'istruzione è stata completata. È possibile chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metodo dall'interno del delegato o da qualsiasi altra posizione all'interno dell'applicazione. Inoltre, è possibile passare qualsiasi oggetto nel `stateObject` parametro e la routine di callback possono recuperare queste informazioni usando il <xref:System.IAsyncResult.AsyncState%2A> proprietà.  
  
 Il `behavior` parametro consente di specificare le opzioni che controllano il comportamento del comando e la connessione. Questi valori possono essere combinati tra loro (usando il linguaggio di programmazione `Or` operatore); in genere, gli sviluppatori di usare il `CloseConnection` valore per assicurarsi che la connessione viene chiusa dal runtime quando la <xref:System.Data.SqlClient.SqlDataReader> viene chiuso. Gli sviluppatori possono anche ottimizzare il comportamento dei <xref:System.Data.SqlClient.SqlDataReader> specificando il `SingleRow` valore quando è noto in anticipo che l'istruzione Transact-SQL o una stored procedure restituisce solo una singola riga.  
  
 Si noti che il testo del comando e i parametri vengono inviati al server in modo sincrono. Se un comando di grandi dimensioni o numero di parametri viene inviati, questo metodo si blocchi durante la scrittura. Dopo l'invio del comando, il metodo viene restituito immediatamente senza attendere una risposta dal server, vale a dire, operazioni di lettura sono asincrone. Anche se l'esecuzione del comando è asincrona, il recupero dei valori è sincrono. Ciò significa che le chiamate a <xref:System.Data.SqlClient.SqlDataReader.Read%2A> possono venire bloccate se sono necessari più dati e della rete sottostante operazione si blocca di lettura.  
  
 Poiché la procedura di callback viene eseguita da un thread in background fornito da Microsoft .NET common language runtime, è molto importante eseguire un approccio rigoroso alla gestione delle interazioni tra thread all'interno delle applicazioni. Ad esempio, non è possibile interagire con il contenuto di un modulo di routine di callback, è necessario l'aggiornamento del modulo, è necessario passare al thread del form per svolgere il proprio lavoro. Nell'esempio riportato in questo argomento viene illustrato questo comportamento.  
  
 Tutti gli errori che si verificano durante l'esecuzione dell'operazione vengono generati come eccezioni nella routine di callback. È necessario gestire l'eccezione della procedura di callback, non nell'applicazione principale. Vedere l'esempio in questo argomento per ulteriori informazioni sulla gestione delle eccezioni nella routine di callback.  
  
 Se si usa <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> per accedere a dati XML, SQL Server restituirà i risultati XML maggiore 2033 caratteri di lunghezza in più righe di 2033 caratteri. Per evitare questo comportamento, utilizzare <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> per leggere le query FOR XML. Per altre informazioni, vedere l'articolo Q310378, "PRB: XML dei dati è troncato quando si usa SqlDataReader," nella Microsoft Knowledge Base al http://support.microsoft.com.  
  
   
  
## Examples  
 Nella seguente applicazione Windows viene illustrato l'uso del metodo <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>, eseguendo un'istruzione Transact-SQL che include un ritardo di qualche secondo, ovvero emulando un comando a esecuzione prolungata. Poiché l'esempio esegue il comando in modo asincrono, il modulo resta reattivo in attesa dei risultati. Questo esempio viene passato l'esecuzione <xref:System.Data.SqlClient.SqlCommand> dell'oggetto come i `stateObject` parametro; questa operazione rende più semplice recuperare il <xref:System.Data.SqlClient.SqlCommand> oggetto dalla routine di callback, in modo che il codice può chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metodo corrispondente al iniziale chiamata a <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 Questo esempio illustra varie tecniche importanti. Ciò include la chiamata a un metodo che interagisce con il form da un thread separato. Inoltre, questo esempio viene illustrato come sia necessario impedire agli utenti di eseguire contemporaneamente più volte un comando e modo in cui è necessario assicurarsi che il modulo non venga chiuso prima la procedura di callback viene chiamato.  
  
 Per impostare questo esempio, creare una nuova applicazione Windows. Inserire un <xref:System.Windows.Forms.Button> (controllo), una <xref:System.Windows.Forms.DataGridView> (controllo) e un <xref:System.Windows.Forms.Label> controllo nel form (accettando il nome predefinito per ogni controllo). Aggiungere il codice seguente alla classe del form, modificando la stringa di connessione in base alle necessità per l'ambiente.  
  
 Questo esempio passa il `CommandBehavior.CloseConnection` valore nel `behavior` parametro, determinando l'oggetto restituito <xref:System.Data.SqlClient.SqlDataReader> chiudere automaticamente la connessione quando viene chiuso.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Qualsiasi errore che si è verificato durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.InvalidOperationException">La coppia nome/valore "Asynchronous Processing=true" non è stata inclusa nella stringa di connessione che definisce la connessione per <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginExecuteXmlReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> e restituisce i risultati come oggetto <see cref="T:System.Xml.XmlReader" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginExecuteXmlReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteXmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteXmlReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteXmlReader () As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteXmlReader();" />
      <MemberSignature Language="F#" Value="member this.BeginExecuteXmlReader : unit -&gt; IAsyncResult" Usage="sqlCommand.BeginExecuteXmlReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> e restituisce i risultati come oggetto <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che può essere utilizzato per eseguire il polling, attendere i risultati o entrambe le cose; questo valore è necessario anche per chiamare il metodo <see langword="EndExecuteXmlReader" />, che restituisce un singolo valore XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> metodo avvia il processo di esecuzione in modo asincrono un'istruzione Transact-SQL che restituisce le righe in XML, in modo che altre attività eseguibili simultaneamente durante l'esecuzione dell'istruzione. Al termine dell'istruzione, gli sviluppatori devono chiamare il `EndExecuteXmlReader` metodo per completare l'operazione e recuperare il codice XML restituito dal comando. Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> metodo viene restituito immediatamente, ma fino a quando non viene eseguito il codice corrispondente `EndExecuteXmlReader` chiamata al metodo, non è necessario eseguire altre chiamate che iniziano con un'esecuzione sincrona o asincrona sulla base della stessa <xref:System.Data.SqlClient.SqlCommand> oggetto. Chiama il `EndExecuteXmlReader` prima dell'esecuzione del comando completamento causa il <xref:System.Data.SqlClient.SqlCommand> blocco oggetto fino al completamento dell'esecuzione.  
  
 Il <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> proprietà specifica, in genere un'istruzione Transact-SQL con una clausola FOR XML valida. Tuttavia `CommandText` inoltre possibile specificare un'istruzione che restituisce `ntext` dati che contenga XML valido.  
  
 Una tipica <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> query possono essere formattati come nell'esempio c# seguente:  
  
```  
SqlCommand command = new SqlCommand("SELECT ContactID, FirstName, LastName FROM dbo.Contact FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 Questo metodo può essere utilizzato anche per recuperare un set di risultati a riga singola e colonna singola. In questo caso, se più di una riga viene restituita, il `EndExecuteXmlReader` metodo consente di collegare il <xref:System.Xml.XmlReader> al valore nella prima riga e le variabili Discard imposta il resto del risultato.  
  
 La funzionalità di multiple active result set (MARS) consente a più azioni di usare la stessa connessione.  
  
 Si noti che il testo del comando e i parametri vengono inviati al server in modo sincrono. Se un comando di grandi dimensioni o numero di parametri viene inviati, questo metodo si blocchi durante la scrittura. Dopo l'invio del comando, il metodo viene restituito immediatamente senza attendere una risposta dal server, vale a dire, operazioni di lettura sono asincrone. Anche se l'esecuzione del comando è asincrona, il recupero dei valori è sincrono.  
  
 Poiché questo overload non supporta una routine di callback, gli sviluppatori necessario entrambi polling per determinare se il comando è stata completata, tramite il <xref:System.IAsyncResult.IsCompleted%2A> proprietà del <xref:System.IAsyncResult> restituiti dal <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> metodo; o attendere il completamento di uno o più comandi usando il <xref:System.IAsyncResult.AsyncWaitHandle%2A> proprietà dell'oggetto restituito <xref:System.IAsyncResult>.  
  
 Se si usa <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> per accedere a dati XML, SQL Server restituisce i risultati XML maggiore 2033 caratteri di lunghezza in più righe di 2033 caratteri. Per evitare questo comportamento, utilizzare <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> per leggere le query FOR XML. Per altre informazioni, vedere l'articolo Q310378, "PRB: XML dei dati è troncato quando si usa SqlDataReader," nella Microsoft Knowledge Base al http://support.microsoft.com.  
  
   
  
## Examples  
 La seguente applicazione console avvia il processo di recupero di dati XML in modo asincrono. Durante l'attesa dei risultati, questa semplice applicazione si trova in un ciclo, esaminando la <xref:System.IAsyncResult.IsCompleted%2A> valore della proprietà. Una volta completato il processo, il codice recupera il file XML e ne visualizza il contenuto.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteXmlReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReader/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Qualsiasi errore che si è verificato durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.InvalidOperationException">La coppia nome/valore "Asynchronous Processing=true" non è stata inclusa nella stringa di connessione che definisce la connessione per <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="BeginExecuteXmlReader">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecuteXmlReader (AsyncCallback callback, object stateObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecuteXmlReader(class System.AsyncCallback callback, object stateObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecuteXmlReader (callback As AsyncCallback, stateObject As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecuteXmlReader(AsyncCallback ^ callback, System::Object ^ stateObject);" />
      <MemberSignature Language="F#" Value="member this.BeginExecuteXmlReader : AsyncCallback * obj -&gt; IAsyncResult" Usage="sqlCommand.BeginExecuteXmlReader (callback, stateObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="stateObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">Delegato <see cref="T:System.AsyncCallback" /> richiamato al termine dell'esecuzione del comando. Passare <see langword="null" /> (<see langword="Nothing" /> in Microsoft Visual Basic) per indicare che non è necessario alcun callback.</param>
        <param name="stateObject">Oggetto di stato definito dall'utente e passato alla routine di callback. Recuperare questo oggetto dalla routine di callback usando la proprietà <see cref="P:System.IAsyncResult.AsyncState" />.</param>
        <summary>Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> e restituisce i risultati come oggetto <see cref="T:System.Xml.XmlReader" /> usando una routine di callback.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che può essere usato per eseguire il polling, attendere i risultati o entrambe le cose. Questo valore è necessario anche per chiamare il metodo <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />, che restituisce i risultati del comando come dati XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> metodo avvia il processo di esecuzione in modo asincrono un'istruzione Transact-SQL o stored procedure che restituisce le righe in XML, in modo che altre attività eseguibili simultaneamente durante l'esecuzione dell'istruzione. Al termine dell'istruzione, gli sviluppatori devono chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> metodo per completare l'operazione e recuperare i dati XML richiesti. Il <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> metodo viene restituito immediatamente, ma fino a quando non viene eseguito il codice corrispondente <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> chiamata al metodo, non è necessario eseguire altre chiamate che iniziano con un'esecuzione sincrona o asincrona sulla base della stessa <xref:System.Data.SqlClient.SqlCommand> oggetto. Chiama il <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> prima dell'esecuzione del comando completamento causa il <xref:System.Data.SqlClient.SqlCommand> blocco oggetto fino al completamento dell'esecuzione.  
  
 Il <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> proprietà specifica, in genere un'istruzione Transact-SQL con una clausola FOR XML valida. Tuttavia, `CommandText` inoltre possibile specificare un'istruzione che restituisce dati che contenga XML valido. Questo metodo può essere utilizzato anche per recuperare un set di risultati a riga singola e colonna singola. In questo caso, se più di una riga viene restituita, il <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> metodo consente di collegare il <xref:System.Xml.XmlReader> al valore nella prima riga e le variabili Discard imposta il resto del risultato.  
  
 Una tipica <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> query possono essere formattati come nell'esempio c# seguente:  
  
```  
SqlCommand command = new SqlCommand("SELECT ContactID, FirstName, LastName FROM Contact FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 Questo metodo può essere utilizzato anche per recuperare un set di risultati a riga singola e colonna singola. In questo caso, se più di una riga viene restituita, il <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> metodo consente di collegare il <xref:System.Xml.XmlReader> al valore nella prima riga e le variabili Discard imposta il resto del risultato.  
  
 La funzionalità di multiple active result set (MARS) consente a più azioni di usare la stessa connessione.  
  
 Il `callback` consente di specificare un <xref:System.AsyncCallback> delegato che viene chiamato quando l'istruzione è stata completata. È possibile chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> metodo dall'interno del delegato o da qualsiasi altra posizione all'interno dell'applicazione. Inoltre, è possibile passare qualsiasi oggetto nel `stateObject` parametro e la routine di callback possono recuperare queste informazioni usando il <xref:System.IAsyncResult.AsyncState%2A> proprietà.  
  
 Si noti che il testo del comando e i parametri vengono inviati al server in modo sincrono. Se viene inviato un comando di grandi dimensioni o sono stati specificati parametri, questo metodo si blocchi durante la scrittura. Dopo l'invio del comando, il metodo viene restituito immediatamente senza attendere una risposta dal server, vale a dire, operazioni di lettura sono asincrone.  
  
 Tutti gli errori che si verificano durante l'esecuzione dell'operazione vengono generati come eccezioni nella routine di callback. È necessario gestire l'eccezione della procedura di callback, non nell'applicazione principale. Vedere l'esempio in questo argomento per ulteriori informazioni sulla gestione delle eccezioni nella routine di callback.  
  
 Se si usa <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> per accedere a dati XML, SQL Server restituirà i risultati XML maggiore 2033 caratteri di lunghezza in più righe di 2033 caratteri. Per evitare questo comportamento, utilizzare <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> per leggere le query FOR XML. Per altre informazioni, vedere l'articolo Q310378, "PRB: XML dei dati è troncato quando si usa SqlDataReader," nella Microsoft Knowledge Base al http://support.microsoft.com.  
  
   
  
## Examples  
 Nella seguente applicazione Windows viene illustrato l'uso del metodo <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>, eseguendo un'istruzione Transact-SQL che include un ritardo di qualche secondo, ovvero emulando un comando a esecuzione prolungata. Questo esempio viene passato l'esecuzione <xref:System.Data.SqlClient.SqlCommand> dell'oggetto come i `stateObject` parametro--questa operazione rende più semplice recuperare il <xref:System.Data.SqlClient.SqlCommand> oggetto dalla routine di callback, in modo che il codice può chiamare il <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> metodo corrispondente al iniziale chiamata a <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>.  
  
 Questo esempio illustra varie tecniche importanti. Ciò include la chiamata a un metodo che interagisce con il form da un thread separato. Inoltre, questo esempio viene illustrato come sia necessario impedire agli utenti di eseguire contemporaneamente più volte un comando e modo in cui è necessario assicurarsi che il modulo non venga chiuso prima la procedura di callback viene chiamato.  
  
 Per impostare questo esempio, creare una nuova applicazione Windows. Inserire un <xref:System.Windows.Forms.Button> (controllo), una <xref:System.Windows.Forms.ListBox> (controllo) e un <xref:System.Windows.Forms.Label> controllo nel form (accettando il nome predefinito per ogni controllo). Aggiungere il codice seguente alla classe del form, modificando la stringa di connessione in base alle necessità per l'ambiente.  
  
 [!code-csharp[DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReaderAsync/CS/Form1.cs#1)]
 [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.BeginExecuteXmlReaderAsync/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Qualsiasi errore che si è verificato durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.InvalidOperationException">La coppia nome/valore "Asynchronous Processing=true" non è stata inclusa nella stringa di connessione che definisce la connessione per <see cref="T:System.Data.SqlClient.SqlCommand" />.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <altmember cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
        <altmember cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public override void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Cancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Cancel();" />
      <MemberSignature Language="F#" Value="override this.Cancel : unit -&gt; unit" Usage="sqlCommand.Cancel " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.Cancel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Prova ad annullare l'esecuzione di <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non sono presenti operazioni da annullare, non viene eseguita alcuna azione. Se, tuttavia, è in corso l'esecuzione di un comando e il tentativo di annullarlo non riesce, non viene generata alcuna eccezione.  
  
 In alcuni casi rari, se si chiama <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> quindi chiamare <xref:System.Data.SqlClient.SqlDataReader.Close%2A> (implicitamente o esplicitamente) prima di chiamare <xref:System.Data.SqlClient.SqlCommand.Cancel%2A>e quindi chiamare <xref:System.Data.SqlClient.SqlCommand.Cancel%2A>, il comando Annulla non verrà inviato a SQL Server e il set di risultati è possibile continuare a trasmettere dopo aver chiamare <xref:System.Data.SqlClient.SqlConnection.Close%2A>. Per evitare questo problema, assicurarsi che venga chiamato <xref:System.Data.SqlClient.SqlCommand.Cancel%2A> prima della chiusura del lettore o connessione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'uso del metodo <xref:System.Data.SqlClient.SqlCommand.Cancel%2A>.  
  
 [!code-csharp[Classic WebData SqlCommand.Cancel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Cancel/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.Cancel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Cancel/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommand.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuovo oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> che è una copia dell'istanza corrente.</summary>
        <returns>Nuovo oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> che è una copia dell'istanza corrente.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionSetting">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SqlClient.SqlCommandColumnEncryptionSetting ColumnEncryptionSetting" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnEncryptionSetting As SqlCommandColumnEncryptionSetting" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { System::Data::SqlClient::SqlCommandColumnEncryptionSetting get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnEncryptionSetting : System.Data.SqlClient.SqlCommandColumnEncryptionSetting" Usage="System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommandColumnEncryptionSetting</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'impostazione di crittografia delle colonne per questo comando.</summary>
        <value>Impostazione di crittografia delle colonne per questo comando.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandText">
      <MemberSignature Language="C#" Value="public override string CommandText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandText" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.CommandText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CommandText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CommandText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandText : string with get, set" Usage="System.Data.SqlClient.SqlCommand.CommandText" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbCommand.CommandText</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbCommand_CommandText")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'istruzione Transact-SQL, il nome di tabella o la stored procedure da eseguire all'origine dati.</summary>
        <value>Istruzione Transact-SQL o stored procedure da eseguire. Il valore predefinito è una stringa vuota.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando la <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> è impostata su `StoredProcedure`, il <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> proprietà deve essere impostata sul nome della stored procedure. L'utente potrebbe essere necessario utilizzare la sintassi dei caratteri di escape se il nome della stored procedure contiene caratteri speciali. Il comando esegue questa stored procedure quando si chiama uno del `Execute` metodi.  
  
 Il Provider di dati Microsoft .NET Framework per SQL Server non supporta il segnaposto punto interrogativo (?) per passare parametri a un'istruzione Transact-SQL o una stored procedure chiamata da un comando di `CommandType.Text`. In questo caso, è necessario utilizzare parametri denominati. Ad esempio:  
  
```  
SELECT * FROM dbo.Customers WHERE CustomerID = @CustomerID  
```  
  
 Per altre informazioni, vedere [configurazione dei parametri e tipi di dati di parametro](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md).  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Data.SqlClient.SqlCommand> e vengono impostate alcune delle relative proprietà.  
  
 [!code-csharp[Classic WebData SqlCommand.CommandText Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.CommandText Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.CommandText Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.CommandText Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Recupero e modifica di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">SQL Server e ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public override int CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CommandTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CommandTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int CommandTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTimeout : int with get, set" Usage="System.Data.SqlClient.SqlCommand.CommandTimeout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbCommand.CommandTimeout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.DefaultValue(30)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbCommand_CommandTimeout")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il tempo di attesa prima di terminare il tentativo di esecuzione di un comando e di generare un errore.</summary>
        <value>Tempo di attesa in secondi per l'esecuzione del comando. Il valore predefinito è 30 secondi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore 0 indica nessun limite (un tentativo di eseguire un comando attenderà un tempo illimitato).  
  
> [!NOTE]
>  Il <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> proprietà verrà ignorata durante le chiamate di metodi asincroni, ad esempio <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> non ha alcun effetto quando il comando viene eseguito su una connessione di contesto (un <xref:System.Data.SqlClient.SqlConnection> aperta con "connessione di contesto = true" nella stringa di connessione).  
  
> [!NOTE]
>  Questa proprietà è il timeout di aggiornamento cumulativo (per tutti i pacchetti di rete che vengono letti durante la chiamata di un metodo) per tutte le letture di rete durante l'esecuzione del comando o l'elaborazione dei risultati. Un periodo di timeout può ancora verificarsi dopo la prima riga viene restituita e non include il tempo di elaborazione di utente, solo il tempo di lettura.  
>   
>  Ad esempio, con un tempo di 30 secondi, out se <xref:System.Data.SqlClient.SqlDataReader.Read%2A> richiede due pacchetti di rete, quindi ha 30 secondi per lettura entrambi i pacchetti di rete. Se si chiama <xref:System.Data.SqlClient.SqlDataReader.Read%2A> avrà anche in questo caso, un altro 30 secondi per leggere tutti i dati richiesti.  
  
```  
using System;  
using System.Data.SqlClient;  
///   
public class A {  
   ///   
   public static void Main() {  
      string connectionString = "";  
      // Wait for 5 second delay in the command  
      string queryString = "waitfor delay '00:00:05'";  
      using (SqlConnection connection = new SqlConnection(connectionString)) {  
         connection.Open();  
         SqlCommand command = new SqlCommand(queryString, connection);  
         // Setting command timeout to 1 second  
         command.CommandTimeout = 1;  
         try {  
            command.ExecuteNonQuery();  
         }  
         catch (SqlException e) {  
            Console.WriteLine("Got expected SqlException due to command timeout ");  
            Console.WriteLine(e);  
         }  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CommandType">
      <MemberSignature Language="C#" Value="public override System.Data.CommandType CommandType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandType CommandType" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.CommandType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CommandType As CommandType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::CommandType CommandType { System::Data::CommandType get(); void set(System::Data::CommandType value); };" />
      <MemberSignature Language="F#" Value="member this.CommandType : System.Data.CommandType with get, set" Usage="System.Data.SqlClient.SqlCommand.CommandType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbCommand.CommandType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbCommand_CommandType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.CommandType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica come interpretare la proprietà <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" />.</summary>
        <value>Uno dei valori di <see cref="T:System.Data.CommandType" />. Il valore predefinito è <see langword="Text" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si imposta la <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> proprietà `StoredProcedure`, è consigliabile impostare il <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> proprietà sul nome della stored procedure. Il comando esegue questa stored procedure quando si chiama uno dei metodi Execute.  
  
 Il Provider di dati Microsoft .NET Framework per SQL Server non supporta il segnaposto punto interrogativo (?) per passare parametri a un'istruzione SQL o una stored procedure chiamata con un <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> di <xref:System.Data.CommandType.Text>. In questo caso, è necessario utilizzare parametri denominati. Ad esempio:  
  
 Selezionare * da parte dei clienti in cui CustomerID = @CustomerID  
  
 Per altre informazioni, vedere [configurazione dei parametri e tipi di dati di parametro](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md).  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Data.SqlClient.SqlCommand> e vengono impostate alcune delle relative proprietà.  
  
 [!code-csharp[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData IDbCommand.CommandTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il valore non era un valore <see cref="T:System.Data.CommandType" /> valido.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Recupero e modifica di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">SQL Server e ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlConnection Connection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Connection" />
      <MemberSignature Language="VB.NET" Value="Public Property Connection As SqlConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlConnection ^ Connection { System::Data::SqlClient::SqlConnection ^ get(); void set(System::Data::SqlClient::SqlConnection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.SqlClient.SqlConnection with get, set" Usage="System.Data.SqlClient.SqlCommand.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbCommand_Connection")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> usato da questa istanza dell'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <value>Connessione a un'origine dati. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il comando viene inserito in una transazione esistente e la connessione viene modificata, il tentativo di eseguire il comando genererà un <xref:System.InvalidOperationException>.  
  
 Se la proprietà <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> non è Null ed è già stato eseguito il rollback o il commit della transazione, <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> verrà impostato su Null.  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Data.SqlClient.SqlCommand> e vengono impostate alcune delle relative proprietà.  
  
 [!code-csharp[Classic WebData SqlCommand.Connection Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Connection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.Connection Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Connection Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> è stata modificata mentre il comando era inserito in una transazione.</exception>
        <altmember cref="P:System.Data.SqlClient.SqlCommand.CommandText" />
        <altmember cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />
        <altmember cref="P:System.Data.SqlClient.SqlCommand.CommandType" />
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateDbParameter">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameter CreateDbParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbParameter CreateDbParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.CreateDbParameter" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbParameter () As DbParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbParameter ^ CreateDbParameter();" />
      <MemberSignature Language="F#" Value="override this.CreateDbParameter : unit -&gt; System.Data.Common.DbParameter" Usage="sqlCommand.CreateDbParameter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParameter">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlParameter CreateParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlParameter CreateParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.CreateParameter" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateParameter () As SqlParameter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlParameter ^ CreateParameter();" />
      <MemberSignature Language="F#" Value="override this.CreateParameter : unit -&gt; System.Data.SqlClient.SqlParameter" Usage="sqlCommand.CreateParameter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una nuova istanza di un oggetto <see cref="T:System.Data.SqlClient.SqlParameter" />.</summary>
        <returns>Un oggetto <see cref="T:System.Data.SqlClient.SqlParameter" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Data.SqlClient.SqlCommand.CreateParameter%2A> metodo è una versione fortemente tipizzata di <xref:System.Data.IDbCommand.CreateParameter%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DbConnection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbConnection DbConnection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection DbConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DbConnection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DbConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbConnection ^ DbConnection { System::Data::Common::DbConnection ^ get(); void set(System::Data::Common::DbConnection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DbConnection : System.Data.Common.DbConnection with get, set" Usage="System.Data.SqlClient.SqlCommand.DbConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbParameterCollection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbParameterCollection DbParameterCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbParameterCollection DbParameterCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DbParameterCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbParameterCollection As DbParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbParameterCollection ^ DbParameterCollection { System::Data::Common::DbParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DbParameterCollection : System.Data.Common.DbParameterCollection" Usage="System.Data.SqlClient.SqlCommand.DbParameterCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction DbTransaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbTransaction DbTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DbTransaction" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DbTransaction As DbTransaction" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbTransaction ^ DbTransaction { System::Data::Common::DbTransaction ^ get(); void set(System::Data::Common::DbTransaction ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DbTransaction : System.Data.Common.DbTransaction with get, set" Usage="System.Data.SqlClient.SqlCommand.DbTransaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DesignTimeVisible">
      <MemberSignature Language="C#" Value="public override bool DesignTimeVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DesignTimeVisible" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.DesignTimeVisible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property DesignTimeVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool DesignTimeVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DesignTimeVisible : bool with get, set" Usage="System.Data.SqlClient.SqlCommand.DesignTimeVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignOnly(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l'oggetto comando deve essere visualizzato in un controllo Progettazione Windows Form.</summary>
        <value>Valore che indica se l'oggetto comando deve essere visibile in un controllo. Il valore predefinito è **true**.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="sqlCommand.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndExecuteNonQuery">
      <MemberSignature Language="C#" Value="public int EndExecuteNonQuery (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndExecuteNonQuery(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndExecuteNonQuery (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndExecuteNonQuery(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndExecuteNonQuery : IAsyncResult -&gt; int" Usage="sqlCommand.EndExecuteNonQuery asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Oggetto <see cref="T:System.IAsyncResult" /> restituito dalla chiamata all'oggetto <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />.</param>
        <summary>Completa l'esecuzione asincrona di un'istruzione Transact-SQL.</summary>
        <returns>Numero di righe interessate. Il comportamento è identico a quello del metodo <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si chiama <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> per eseguire una [!INCLUDE[tsql](~/includes/tsql-md.md)] istruzione, è necessario chiamare <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> per completare l'operazione. Se il processo di esecuzione del comando non è ancora terminato, questo metodo si blocca fino al completamento dell'operazione. Gli utenti possono verificare che il comando è stata completata l'operazione usando il <xref:System.IAsyncResult> istanza restituita dal <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> (metodo). Se una routine di callback è stata specificata nella chiamata a <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>, questo metodo deve essere chiamato.  
  
   
  
## Examples  
 Per esempi che illustrano l'uso del <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> metodo, vedere <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="asyncResult" /> è Null (<see langword="Nothing" /> in Microsoft Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> è stato chiamato più di una volta per l'esecuzione di un singolo comando oppure il metodo non corrispondeva al relativo metodo di esecuzione (ad esempio, il codice ha chiamato <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" /> per completare l'esecuzione di una chiamata a <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">L'intervallo di tempo specificato in <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> è scaduto e l'operazione asincrona specificata con <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> non è stata completata.  
  
In alcune situazioni, <see cref="T:System.IAsyncResult" /> può essere impostato su <see langword="IsCompleted" /> in modo non corretto. In questo caso, e se viene chiamato <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)" />, EndExecuteNonQuery potrebbe generare un errore SqlException se l'intervallo di tempo specificato in <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" /> è scaduto e l'operazione asincrona specificata con <see cref="Overload:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" /> non è stata completata. Per risolvere questo problema, è necessario aumentare il valore di CommandTimeout o ridurre il lavoro svolto dall'operazione asincrona.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EndExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader EndExecuteReader (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader EndExecuteReader(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndExecuteReader (asyncResult As IAsyncResult) As SqlDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlDataReader ^ EndExecuteReader(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndExecuteReader : IAsyncResult -&gt; System.Data.SqlClient.SqlDataReader" Usage="sqlCommand.EndExecuteReader asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Oggetto <see cref="T:System.IAsyncResult" /> restituito dalla chiamata all'oggetto <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteReader" />.</param>
        <summary>Completa l'esecuzione asincrona di un'istruzione Transact-SQL, restituendo l'oggetto <see cref="T:System.Data.SqlClient.SqlDataReader" /> richiesto.</summary>
        <returns>Oggetto <see cref="T:System.Data.SqlClient.SqlDataReader" /> che può essere usato per recuperare le righe richieste.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si chiama <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> per eseguire un'istruzione Transact-SQL, è necessario chiamare <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> per completare l'operazione. Se il processo di esecuzione del comando non è ancora terminato, questo metodo si blocca fino al completamento dell'operazione. Gli utenti possono verificare che il comando è stata completata l'operazione usando il <xref:System.IAsyncResult> istanza restituita dal <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> (metodo). Se una routine di callback è stata specificata nella chiamata a <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>, questo metodo deve essere chiamato.  
  
   
  
## Examples  
 Per esempi che illustrano l'uso del <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> metodo, vedere <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="asyncResult" /> è Null (<see langword="Nothing" /> in Microsoft Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> è stato chiamato più di una volta per l'esecuzione di un singolo comando oppure il metodo non corrispondeva al relativo metodo di esecuzione (ad esempio, il codice ha chiamato <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)" /> per completare l'esecuzione di una chiamata a <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="EndExecuteXmlReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader EndExecuteXmlReader (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader EndExecuteXmlReader(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndExecuteXmlReader (asyncResult As IAsyncResult) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ EndExecuteXmlReader(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndExecuteXmlReader : IAsyncResult -&gt; System.Xml.XmlReader" Usage="sqlCommand.EndExecuteXmlReader asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Oggetto <see cref="T:System.IAsyncResult" /> restituito dalla chiamata all'oggetto <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader" />.</param>
        <summary>Completa l'esecuzione asincrona di un'istruzione Transact-SQL, restituendo i dati richiesti in formato XML.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlReader" /> che può essere usato per recuperare i dati XML risultanti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si chiama <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> per eseguire un'istruzione Transact-SQL, è necessario chiamare <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> per completare l'operazione. Se il processo di esecuzione del comando non è ancora terminato, questo metodo si blocca fino al completamento dell'operazione. Gli utenti possono verificare che il comando è stata completata l'operazione usando il <xref:System.IAsyncResult> istanza restituita dal <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> (metodo). Se una routine di callback è stata specificata nella chiamata a <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>, questo metodo deve essere chiamato.  
  
   
  
## Examples  
 Per esempi che illustrano l'uso del <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> metodo, vedere <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="asyncResult" /> è Null (<see langword="Nothing" /> in Microsoft Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> è stato chiamato più di una volta per l'esecuzione di un singolo comando oppure il metodo non corrispondeva al relativo metodo di esecuzione (ad esempio, il codice ha chiamato <see cref="M:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)" /> per completare l'esecuzione di una chiamata a <see cref="M:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery" />.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReader">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbDataReader ExecuteDbDataReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbDataReader ExecuteDbDataReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ExecuteDbDataReader (behavior As CommandBehavior) As DbDataReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbDataReader ^ ExecuteDbDataReader(System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.ExecuteDbDataReader : System.Data.CommandBehavior -&gt; System.Data.Common.DbDataReader" Usage="sqlCommand.ExecuteDbDataReader behavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDbDataReaderAsync">
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt; ExecuteDbDataReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Data.Common.DbDataReader&gt; ExecuteDbDataReaderAsync(valuetype System.Data.CommandBehavior behavior, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Threading::Tasks::Task&lt;System::Data::Common::DbDataReader ^&gt; ^ ExecuteDbDataReaderAsync(System::Data::CommandBehavior behavior, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ExecuteDbDataReaderAsync : System.Data.CommandBehavior * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;" Usage="sqlCommand.ExecuteDbDataReaderAsync (behavior, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.Common.DbDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQuery">
      <MemberSignature Language="C#" Value="public override int ExecuteNonQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ExecuteNonQuery() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExecuteNonQuery () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ExecuteNonQuery();" />
      <MemberSignature Language="F#" Value="override this.ExecuteNonQuery : unit -&gt; int" Usage="sqlCommand.ExecuteNonQuery " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.ExecuteNonQuery</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Permette di eseguire un'istruzione Transact-SQL in base alla connessione e restituisce un numero di righe modificate.</summary>
        <returns>Numero di righe interessate.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare la <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> per eseguire operazioni di catalogo (ad esempio, eseguire query sulla struttura di un database o la creazione di oggetti di database quali tabelle) o per modificare i dati in un database senza usare un <xref:System.Data.DataSet> eseguendo UPDATE, INSERT o DELETE istruzioni.  
  
 Sebbene il <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> restituisce Nessuna riga, gli eventuali parametri di output o restituire i valori mappati ai parametri vengono popolati con i dati.  
  
 Nel caso delle istruzioni UPDATE, INSERT e DELETE, il valore restituito è il numero di righe interessate dal comando. In presenza di un trigger in una tabella inserite o aggiornate, il valore restituito include il numero di righe interessate dall'operazione insert o update di e il numero di righe modificate dal trigger o i trigger. Per tutti gli altri tipi di istruzioni, il valore restituito è -1. Se si verifica un'operazione di rollback, anche il valore restituito è -1.  
  
   
  
## Examples  
 L'esempio seguente crea una <xref:System.Data.SqlClient.SqlCommand> , quindi viene eseguita usando <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>. Nell'esempio viene passata una stringa che rappresenta un'istruzione Transact-SQL (ad esempio UPDATE, INSERT o DELETE) e una stringa da usare per connettersi all'origine dati.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">È stata generata un'eccezione durante l'esecuzione del comando su una riga bloccata. Tale eccezione non viene generata quando si usa Microsoft .NET Framework Versione 1.0.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.InvalidOperationException">L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Recupero e modifica di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">SQL Server e ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteNonQueryAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ExecuteNonQueryAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ExecuteNonQueryAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;int&gt; ^ ExecuteNonQueryAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ExecuteNonQueryAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="sqlCommand.ExecuteNonQueryAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">L'istruzione di annullamento.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQuery" />, che esegue un'istruzione [!INCLUDE[tsql](~/includes/tsql-md.md)] a fronte della connessione e restituisce il numero di righe interessate. Il token di annullamento può essere usato per richiedere che l'operazione venga abbandonata prima del timeout del comando.  Le eccezioni verranno segnalate tramite l'oggetto attività restituito.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" /> viene chiamato più volte per la stessa istanza prima del completamento dell'attività.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server ha restituito un errore durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteReader">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Invia <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> a <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> e compila <see cref="T:System.Data.SqlClient.SqlDataReader" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader ExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader ExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReader () As SqlDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlDataReader ^ ExecuteReader();" />
      <MemberSignature Language="F#" Value="override this.ExecuteReader : unit -&gt; System.Data.SqlClient.SqlDataReader" Usage="sqlCommand.ExecuteReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invia <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> a <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> e compila <see cref="T:System.Data.SqlClient.SqlDataReader" />.</summary>
        <returns>Un oggetto <see cref="T:System.Data.SqlClient.SqlDataReader" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando la <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> è impostata su `StoredProcedure`, il <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> proprietà deve essere impostata sul nome della stored procedure. Il comando esegue questa stored procedure quando si chiama <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>.  
  
> [!NOTE]
>  Se una transazione si verifica il deadlock, potrà non essere viene generata alcuna eccezione <xref:System.Data.SqlClient.SqlDataReader.Read%2A> viene chiamato.  
  
 La funzionalità di multiple active result set (MARS) consente di effettuare più operazioni con la stessa connessione.  
  
 Se si usa <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> per accedere a dati XML, SQL Server restituirà i risultati XML maggiore 2033 caratteri di lunghezza in più righe di 2033 caratteri. Per evitare questo comportamento, utilizzare <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> per leggere le query FOR XML. Per altre informazioni, vedere l'articolo Q310378, "PRB: XML dei dati è troncato quando si usa SqlDataReader," nella Microsoft Knowledge Base al http://support.microsoft.com.  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Data.SqlClient.SqlCommand>che viene quindi eseguito passando una stringa che rappresenta un'istruzione Transact-SQL SELECT e una stringa da usare per connettersi all'origine dati.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteReader Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteReader Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">È stata generata un'eccezione durante l'esecuzione del comando su una riga bloccata. Tale eccezione non viene generata quando si usa Microsoft .NET Framework Versione 1.0.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.InvalidOperationException">Lo stato corrente della connessione è chiuso. Con <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" /> è richiesto un oggetto <see cref="T:System.Data.SqlClient.SqlConnection" /> aperto.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Recupero e modifica di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">SQL Server e ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReader">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataReader ExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlDataReader ExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReader (behavior As CommandBehavior) As SqlDataReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlDataReader ^ ExecuteReader(System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.ExecuteReader : System.Data.CommandBehavior -&gt; System.Data.SqlClient.SqlDataReader" Usage="sqlCommand.ExecuteReader behavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">Uno dei valori di <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Invia <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> a <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> e compila <see cref="T:System.Data.SqlClient.SqlDataReader" /> mediante uno dei valori di <see cref="T:System.Data.CommandBehavior" />.</summary>
        <returns>Un oggetto <see cref="T:System.Data.SqlClient.SqlDataReader" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando la <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> è impostata su `StoredProcedure`, il <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> proprietà deve essere impostata sul nome della stored procedure. Il comando esegue questa stored procedure quando si chiama <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>.  
  
> [!NOTE]
>  Usare <xref:System.Data.CommandBehavior.SequentialAccess> per recuperare i valori di grandi dimensioni e i dati binari. In caso contrario, un <xref:System.OutOfMemoryException> potrebbero verificarsi e la connessione verrà chiusa.  
  
 La funzionalità di multiple active result set (MARS) consente di effettuare più operazioni con la stessa connessione.  
  
 Se si usa <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> per accedere a dati XML, SQL Server restituirà i risultati XML maggiore 2033 caratteri di lunghezza in più righe di 2033 caratteri. Per evitare questo comportamento, utilizzare <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> per leggere le query FOR XML. Per altre informazioni, vedere l'articolo Q310378, "PRB: XML dei dati è troncato quando si usa SqlDataReader," nella Microsoft Knowledge Base al http://support.microsoft.com.  
  
   
  
## Examples  
 L'esempio seguente crea un <xref:System.Data.SqlClient.SqlCommand>che viene quindi eseguito passando una stringa che rappresenta un'istruzione Transact-SQL SELECT e una stringa da usare per connettersi all'origine dati. <xref:System.Data.CommandBehavior> è impostato su <xref:System.Data.CommandBehavior.CloseConnection>.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteReader2#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader2/CS/mysample.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteReader2#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteReader2/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.InvalidOperationException">L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteReaderAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Avvia l'esecuzione asincrona dell'istruzione [!INCLUDE[tsql](~/includes/tsql-md.md)] o della stored procedure descritta da <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReaderAsync () As Task(Of SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Data::SqlClient::SqlDataReader ^&gt; ^ ExecuteReaderAsync();" />
      <MemberSignature Language="F#" Value="override this.ExecuteReaderAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;" Usage="sqlCommand.ExecuteReaderAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />, che invia <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> a <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> e compila un oggetto <see cref="T:System.Data.SqlClient.SqlDataReader" />. Le eccezioni verranno segnalate tramite l'oggetto attività restituito.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.ArgumentException">Valore di <see cref="T:System.Data.CommandBehavior" /> non valido.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync" /> viene chiamato più volte per la stessa istanza prima del completamento dell'attività.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server ha restituito un errore durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteReaderAsync (behavior As CommandBehavior) As Task(Of SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Data::SqlClient::SqlDataReader ^&gt; ^ ExecuteReaderAsync(System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.ExecuteReaderAsync : System.Data.CommandBehavior -&gt; System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;" Usage="sqlCommand.ExecuteReaderAsync behavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">Opzioni per l'esecuzione di istruzioni e il recupero dei dati.  Se impostato su <see langword="Default" />, <see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> legge l'intera riga prima di restituire un'attività completa.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" />, che invia <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> a <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> e compila un oggetto <see cref="T:System.Data.SqlClient.SqlDataReader" />. Le eccezioni verranno segnalate tramite l'oggetto attività restituito.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.ArgumentException">Valore di <see cref="T:System.Data.CommandBehavior" /> non valido.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)" /> viene chiamato più volte per la stessa istanza prima del completamento dell'attività.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server ha restituito un errore durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Data::SqlClient::SqlDataReader ^&gt; ^ ExecuteReaderAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ExecuteReaderAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;" Usage="sqlCommand.ExecuteReaderAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">L'istruzione di annullamento.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader" />, che invia <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> a <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> e compila un oggetto <see cref="T:System.Data.SqlClient.SqlDataReader" />.  
  
Il token di annullamento può essere usato per richiedere che l'operazione venga abbandonata prima del timeout del comando.  Le eccezioni verranno segnalate tramite l'oggetto attività restituito.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.ArgumentException">Valore di <see cref="T:System.Data.CommandBehavior" /> non valido.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> viene chiamato più volte per la stessa istanza prima del completamento dell'attività.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server ha restituito un errore durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Data.SqlClient.SqlDataReader&gt; ExecuteReaderAsync(valuetype System.Data.CommandBehavior behavior, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Data::SqlClient::SqlDataReader ^&gt; ^ ExecuteReaderAsync(System::Data::CommandBehavior behavior, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ExecuteReaderAsync : System.Data.CommandBehavior * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;" Usage="sqlCommand.ExecuteReaderAsync (behavior, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Data.SqlClient.SqlDataReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="behavior">Opzioni per l'esecuzione di istruzioni e il recupero dei dati.  Se impostato su <see langword="Default" />, <see cref="M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)" /> legge l'intera riga prima di restituire un'attività completa.</param>
        <param name="cancellationToken">L'istruzione di annullamento.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)" />, che invia <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> a <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> e compila un oggetto <see cref="T:System.Data.SqlClient.SqlDataReader" />.  
  
Il token di annullamento può essere usato per richiedere che l'operazione venga abbandonata prima del timeout del comando.  Le eccezioni verranno segnalate tramite l'oggetto attività restituito.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.ArgumentException">Valore di <see cref="T:System.Data.CommandBehavior" /> non valido.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" /> viene chiamato più volte per la stessa istanza prima del completamento dell'attività.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server ha restituito un errore durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalar">
      <MemberSignature Language="C#" Value="public override object ExecuteScalar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ExecuteScalar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteScalar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ExecuteScalar () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ExecuteScalar();" />
      <MemberSignature Language="F#" Value="override this.ExecuteScalar : unit -&gt; obj" Usage="sqlCommand.ExecuteScalar " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.ExecuteScalar</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Esegue la query e restituisce la prima colonna della prima riga nel set di risultati restituito dalla query. Le colonne o le righe aggiuntive vengono ignorate.</summary>
        <returns>Prima colonna della prima riga del set di risultati o un riferimento null (<see langword="Nothing" /> in Visual Basic) se il set di risultati è vuoto. Restituisce al massimo 2033 caratteri.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A> metodo per recuperare un singolo valore (ad esempio, un valore aggregato) da un database. Ciò richiede meno codice rispetto all'uso di <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> metodo e l'esecuzione delle operazioni che è necessario generare il valore singolo utilizzando i dati restituiti da un <xref:System.Data.SqlClient.SqlDataReader>.  
  
 Una tipica <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A> query possono essere formattati come nell'esempio c# seguente:  
  
```  
cmd.CommandText = "SELECT COUNT(*) FROM dbo.region";  
Int32 count = (Int32) cmd.ExecuteScalar();  
```  
  
   
  
## Examples  
 L'esempio seguente crea una <xref:System.Data.SqlClient.SqlCommand> , quindi viene eseguita usando <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>. Nell'esempio viene passata una stringa che rappresenta un nuovo valore da inserire in una tabella e una stringa da usare per connettersi all'origine dati. La funzione restituisce il nuovo **identità** 0 su errore, valore della colonna se è stata inserita una nuova riga.  
  
 [!code-csharp[DataWorks SqlCommand.ExecuteScalar#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlCommand.ExecuteScalar/CS/source.cs#1)]
 [!code-vb[DataWorks SqlCommand.ExecuteScalar#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlCommand.ExecuteScalar/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">È stata generata un'eccezione durante l'esecuzione del comando su una riga bloccata. Tale eccezione non viene generata quando si usa Microsoft .NET Framework Versione 1.0.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.InvalidOperationException">L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteScalarAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; ExecuteScalarAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ExecuteScalarAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ ExecuteScalarAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ExecuteScalarAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="sqlCommand.ExecuteScalarAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">L'istruzione di annullamento.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalar" />, che esegue la query in modo asincrono e restituisce la prima colonna della prima riga nel set di risultati restituito dalla query. Le colonne o le righe aggiuntive vengono ignorate.  
  
Il token di annullamento può essere usato per richiedere che l'operazione venga abbandonata prima del timeout del comando. Le eccezioni verranno segnalate tramite l'oggetto attività restituito.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> viene chiamato più volte per la stessa istanza prima del completamento dell'attività.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server ha restituito un errore durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteXmlReader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader ExecuteXmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader ExecuteXmlReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteXmlReader () As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ ExecuteXmlReader();" />
      <MemberSignature Language="F#" Value="member this.ExecuteXmlReader : unit -&gt; System.Xml.XmlReader" Usage="sqlCommand.ExecuteXmlReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invia la proprietà <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> alla proprietà <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> e compila un oggetto <see cref="T:System.Xml.XmlReader" />.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlReader" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il **XmlReader** restituito da questo metodo non supporta operazioni asincrone.

 Il <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> proprietà specifica, in genere un [!INCLUDE[tsql](~/includes/tsql-md.md)] istruzione con una clausola FOR XML valida. Tuttavia <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> inoltre possibile specificare un'istruzione che restituisce `ntext` oppure `nvarchar` dati che contiene un XML valido o il contenuto di una colonna definita con il `xml` tipo di dati.  
  
 Una tipica <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> query possono essere formattati come nell'esempio seguente di Microsoft Visual c#:  
  
```  
SqlCommand command = new SqlCommand("SELECT * FROM dbo.Customers FOR XML AUTO, XMLDATA", SqlConn);  
```  
  
 Questo metodo può essere utilizzato anche per recuperare un set di risultati a riga singola e colonna singola che contiene dati XML. In questo caso, se più di una riga viene restituita, il <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> metodo consente di collegare il <xref:System.Xml.XmlReader> al valore nella prima riga e le variabili Discard imposta il resto del risultato.  
  
 La funzionalità di multiple active result set (MARS) consente di effettuare più operazioni con la stessa connessione.  
  
 Se si usa <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> per accedere a dati XML, SQL Server restituirà i risultati XML maggiore 2033 caratteri di lunghezza in più righe di 2033 caratteri. Per evitare questo comportamento, utilizzare <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> o <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> per leggere le query FOR XML. Per altre informazioni, vedere l'articolo Q310378, "PRB: XML dei dati è troncato quando si usa SqlDataReader," nella Microsoft Knowledge Base al http://support.microsoft.com.  


## Examples  
 L'esempio seguente crea una <xref:System.Data.SqlClient.SqlCommand> , quindi viene eseguita usando <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>. Nell'esempio viene passata una stringa che rappresenta un'istruzione Transact-SQL per selezionare XML e una stringa da usare per connettersi all'origine dati.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteXmlReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteXmlReader/CS/mysample.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteXmlReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteXmlReader/VB/mysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">È stata generata un'eccezione durante l'esecuzione del comando su una riga bloccata. Tale eccezione non viene generata quando si usa Microsoft .NET Framework Versione 1.0.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.InvalidOperationException">L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteXmlReaderAsync">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Avvia l'esecuzione asincrona dell'istruzione Transact-SQL o della stored procedure descritta dall'oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> e restituisce i risultati come oggetto <see cref="T:System.Xml.XmlReader" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteXmlReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt; ExecuteXmlReaderAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Xml.XmlReader&gt; ExecuteXmlReaderAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteXmlReaderAsync () As Task(Of XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Xml::XmlReader ^&gt; ^ ExecuteXmlReaderAsync();" />
      <MemberSignature Language="F#" Value="member this.ExecuteXmlReaderAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt;" Usage="sqlCommand.ExecuteXmlReaderAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />, che invia <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> a <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> e compila un oggetto <see cref="T:System.Xml.XmlReader" />.  
  
Le eccezioni verranno segnalate tramite l'oggetto attività restituito.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Il **XmlReader** restituito da questo metodo non supporta operazioni asincrone.

Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> viene chiamato più volte per la stessa istanza prima del completamento dell'attività.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server ha restituito un errore durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteXmlReaderAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt; ExecuteXmlReaderAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Xml.XmlReader&gt; ExecuteXmlReaderAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Xml::XmlReader ^&gt; ^ ExecuteXmlReaderAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ExecuteXmlReaderAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt;" Usage="sqlCommand.ExecuteXmlReaderAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.XmlReader&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">L'istruzione di annullamento.</param>
        <summary>Versione asincrona di <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteXmlReader" />, che invia <see cref="P:System.Data.SqlClient.SqlCommand.CommandText" /> a <see cref="P:System.Data.SqlClient.SqlCommand.Connection" /> e compila un oggetto <see cref="T:System.Xml.XmlReader" />.  
  
Il token di annullamento può essere usato per richiedere che l'operazione venga abbandonata prima del timeout del comando.  Le eccezioni verranno segnalate tramite l'oggetto attività restituito.</summary>
        <returns>Attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Il **XmlReader** restituito da questo metodo non supporta operazioni asincrone.

Per altre informazioni sulla programmazione asincrona nel Provider di dati .NET Framework per SQL Server, vedere [programmazione asincrona](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Binary** o **VarBinary** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.Stream" />. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Char**, **NChar**, **NVarChar**, **VarChar** o  **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.IO.TextReader" />.  
  
È stato usato un valore <see cref="P:System.Data.SqlClient.SqlParameter.SqlDbType" /> diverso da **Xml** quando <see cref="P:System.Data.SqlClient.SqlParameter.Value" /> era impostato su <see cref="T:System.Xml.XmlReader" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" /> viene chiamato più volte per la stessa istanza prima del completamento dell'attività.  
  
L'elemento <see cref="T:System.Data.SqlClient.SqlConnection" /> chiuso o eliminato durante l'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).  
  
 <see langword="Context Connection=true" /> è specificato nella stringa di connessione.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">SQL Server ha restituito un errore durante l'esecuzione del testo del comando.  
  
Si è verificato un timeout durante un'operazione di flusso. Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.IO.IOException">Errore nell'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> durante un'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.IO.Stream" />, <see cref="T:System.Xml.XmlReader" /> o <see cref="T:System.IO.TextReader" /> è stato chiuso durante l'operazione di flusso.  Per altre informazioni sul flusso, vedere [Supporto del flusso SqlClient](~/docs/framework/data/adonet/sqlclient-streaming-support.md).</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Notification">
      <MemberSignature Language="C#" Value="public System.Data.Sql.SqlNotificationRequest Notification { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Sql.SqlNotificationRequest Notification" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Notification" />
      <MemberSignature Language="VB.NET" Value="Public Property Notification As SqlNotificationRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Sql::SqlNotificationRequest ^ Notification { System::Data::Sql::SqlNotificationRequest ^ get(); void set(System::Data::Sql::SqlNotificationRequest ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Notification : System.Data.Sql.SqlNotificationRequest with get, set" Usage="System.Data.SqlClient.SqlCommand.Notification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Sql.SqlNotificationRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica l'oggetto <see cref="T:System.Data.Sql.SqlNotificationRequest" /> associato a questo comando.</summary>
        <value>Quando viene impostato su Null, che rappresenta il valore predefinito, non è possibile richiedere alcuna notifica.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È necessario impostare il valore di questa proprietà prima che l'esecuzione del comando per rendere effettiva.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/query-notifications-in-sql-server.md">Utilizzo di notifiche di query</related>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="NotificationAutoEnlist">
      <MemberSignature Language="C#" Value="public bool NotificationAutoEnlist { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NotificationAutoEnlist" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.NotificationAutoEnlist" />
      <MemberSignature Language="VB.NET" Value="Public Property NotificationAutoEnlist As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NotificationAutoEnlist { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NotificationAutoEnlist : bool with get, set" Usage="System.Data.SqlClient.SqlCommand.NotificationAutoEnlist" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se l'applicazione deve ricevere automaticamente le notifiche di query da un oggetto <see cref="T:System.Data.SqlClient.SqlDependency" /> comune.</summary>
        <value>**true** se l'applicazione deve ricevere automaticamente le notifiche delle query; in caso contrario **false**. Il valore predefinito è **true**.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa funzionalità viene usata nelle applicazioni ASP.NET per ricevere le notifiche per tutti i comandi eseguiti in una pagina ASP in SQL Server. Ciò consente ad ASP.NET memorizzare nella cache la pagina fino a quando le query usate per il rendering della pagina produrrebbe un risultato diverso. Inserimento automatico.  
  
 Questa proprietà si applica solo alle versioni di SQL Server che supportano le notifiche delle query. Per le versioni precedenti, impostando questa proprietà su **true** non ha alcun effetto sull'applicazione.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/sql/query-notifications-in-sql-server.md">Utilizzo di notifiche di query</related>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlParameterCollection Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlParameterCollection Parameters" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As SqlParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlParameterCollection ^ Parameters { System::Data::SqlClient::SqlParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameters : System.Data.SqlClient.SqlParameterCollection" Usage="System.Data.SqlClient.SqlCommand.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbCommand_Parameters")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Data.SqlClient.SqlParameterCollection" />.</summary>
        <value>Parametri dell'istruzione Transact-SQL o della stored procedure. Il valore predefinito è una raccolta vuota.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il Provider di dati Microsoft .NET Framework per SQL Server non supporta il segnaposto punto interrogativo (?) per passare parametri a un'istruzione SQL o una stored procedure chiamata da un comando di `CommandType.Text`. In questo caso, è necessario utilizzare parametri denominati. Ad esempio:  
  
 Selezionare * da parte dei clienti in cui CustomerID = @CustomerID  
  
> [!NOTE]
>  Se i parametri nella raccolta non soddisfa i requisiti della query da eseguire, può verificarsi un errore.  
  
 Per altre informazioni, vedere [configurazione dei parametri e tipi di dati di parametro](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare un <xref:System.Data.SqlClient.SqlCommand> e aggiungere i parametri per il <xref:System.Data.SqlClient.SqlParameterCollection>.  
  
 [!code-csharp[DataWorks SqlParameterCollection.AddWithValue#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlParameterCollection.AddWithValue/CS/source.cs#1)]
 [!code-vb[DataWorks SqlParameterCollection.AddWithValue#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlParameterCollection.AddWithValue/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public override void Prepare ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Prepare() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.Prepare" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Prepare ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Prepare();" />
      <MemberSignature Language="F#" Value="override this.Prepare : unit -&gt; unit" Usage="sqlCommand.Prepare " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.Prepare</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una versione preparata del comando in un'istanza di SQL Server.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Data.SqlClient.SqlCommand.CommandType%2A> è impostata su `StoredProcedure`, la chiamata a <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> dovrebbe avere esito positivo, anche se eseguita alcuna operazione.  
  
 Prima di chiamare <xref:System.Data.SqlClient.SqlCommand.Prepare%2A>, specificare il tipo di dati di ogni parametro nell'istruzione da preparare. Per ogni parametro con un tipo di dati di lunghezza variabile, è necessario impostare il <xref:System.Data.SqlClient.SqlParameter.Size%2A> proprietà per la massima dimensione necessaria. <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> Restituisce un errore se non vengono soddisfatte queste condizioni.  
  
> [!NOTE]
>  Se il contesto del database viene modificato eseguendo l'istruzione Transact-SQL `USE <database>` istruzione, oppure chiamando il <xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A> metodo, quindi <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> deve essere chiamato una seconda volta.  
  
 Se si chiama un' `Execute` metodo dopo la chiamata <xref:System.Data.SqlClient.SqlCommand.Prepare%2A>, qualsiasi valore di parametro è maggiore del valore specificato dal <xref:System.Data.SqlClient.SqlParameter.Size%2A> proprietà viene troncata automaticamente alle dimensioni originali specificate del parametro e non sono errori di troncamento restituito.  
  
 I parametri di output (se preparati o meno) devono avere un tipo di dati specificato dall'utente. Se si specifica un tipo di dati di lunghezza variabile, è necessario specificare anche il valore massimo <xref:System.Data.SqlClient.SqlParameter.Size%2A>.  
  
 Prima di Visual Studio 2010, <xref:System.Data.SqlClient.SqlCommand.Prepare%2A> ha generato un'eccezione.  A partire da Visual Studio 2010, questo metodo non genera un'eccezione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'uso del metodo <xref:System.Data.SqlClient.SqlCommand.Prepare%2A>.  
  
 [!code-csharp[Classic WebData SqlCommand.Prepare#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Prepare/CS/Source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.Prepare#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.Prepare/VB/Source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ResetCommandTimeout">
      <MemberSignature Language="C#" Value="public void ResetCommandTimeout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetCommandTimeout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.ResetCommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetCommandTimeout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetCommandTimeout();" />
      <MemberSignature Language="F#" Value="member this.ResetCommandTimeout : unit -&gt; unit" Usage="sqlCommand.ResetCommandTimeout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reimposta il valore predefinito della proprietà <see cref="P:System.Data.SqlClient.SqlCommand.CommandTimeout" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore predefinito di <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> è 30 secondi.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="StatementCompleted">
      <MemberSignature Language="C#" Value="public event System.Data.StatementCompletedEventHandler StatementCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.StatementCompletedEventHandler StatementCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlCommand.StatementCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StatementCompleted As StatementCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::StatementCompletedEventHandler ^ StatementCompleted;" />
      <MemberSignature Language="F#" Value="member this.StatementCompleted : System.Data.StatementCompletedEventHandler " Usage="member this.StatementCompleted : System.Data.StatementCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.StatementCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al completamento dell'esecuzione di un'istruzione Transact-SQL.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbCommand.CreateParameter">
      <MemberSignature Language="C#" Value="System.Data.IDbDataParameter IDbCommand.CreateParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.IDbDataParameter System.Data.IDbCommand.CreateParameter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.System#Data#IDbCommand#CreateParameter" />
      <MemberSignature Language="VB.NET" Value="Function CreateParameter () As IDbDataParameter Implements IDbCommand.CreateParameter" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Data::IDbDataParameter ^ System.Data.IDbCommand.CreateParameter() = System::Data::IDbCommand::CreateParameter;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.CreateParameter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbDataParameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbCommand.ExecuteReader">
      <MemberSignature Language="C#" Value="System.Data.IDataReader IDbCommand.ExecuteReader ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.IDataReader System.Data.IDbCommand.ExecuteReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.System#Data#IDbCommand#ExecuteReader" />
      <MemberSignature Language="VB.NET" Value="Function ExecuteReader () As IDataReader Implements IDbCommand.ExecuteReader" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Data::IDataReader ^ System.Data.IDbCommand.ExecuteReader() = System::Data::IDbCommand::ExecuteReader;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.ExecuteReader</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbCommand.ExecuteReader">
      <MemberSignature Language="C#" Value="System.Data.IDataReader IDbCommand.ExecuteReader (System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Data.IDataReader System.Data.IDbCommand.ExecuteReader(valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Function ExecuteReader (behavior As CommandBehavior) As IDataReader Implements IDbCommand.ExecuteReader" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Data::IDataReader ^ System.Data.IDbCommand.ExecuteReader(System::Data::CommandBehavior behavior) = System::Data::IDbCommand::ExecuteReader;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommand.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuovo oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> che è una copia dell'istanza corrente.</summary>
        <returns>Nuovo oggetto <see cref="T:System.Data.SqlClient.SqlCommand" /> che è una copia dell'istanza corrente.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Transaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction Transaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlTransaction Transaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.Transaction" />
      <MemberSignature Language="VB.NET" Value="Public Property Transaction As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlTransaction ^ Transaction { System::Data::SqlClient::SqlTransaction ^ get(); void set(System::Data::SqlClient::SqlTransaction ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transaction : System.Data.SqlClient.SqlTransaction with get, set" Usage="System.Data.SqlClient.SqlCommand.Transaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbCommand_Transaction")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto <see cref="T:System.Data.SqlClient.SqlTransaction" /> in cui viene eseguito <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <value>Oggetto <see cref="T:System.Data.SqlClient.SqlTransaction" />. Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non è possibile impostare il <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> proprietà se è già impostata su un valore specifico e il comando è in fase di esecuzione. Se si imposta la proprietà della transazione un <xref:System.Data.SqlClient.SqlTransaction> oggetto che non è connesso alla stessa <xref:System.Data.SqlClient.SqlConnection> come la <xref:System.Data.SqlClient.SqlCommand> dell'oggetto, la volta successiva che si prova a eseguire un'istruzione viene generata un'eccezione.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/local-transactions.md">Esecuzione di una transazione</related>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="UpdatedRowSource">
      <MemberSignature Language="C#" Value="public override System.Data.UpdateRowSource UpdatedRowSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.UpdateRowSource UpdatedRowSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommand.UpdatedRowSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property UpdatedRowSource As UpdateRowSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::UpdateRowSource UpdatedRowSource { System::Data::UpdateRowSource get(); void set(System::Data::UpdateRowSource value); };" />
      <MemberSignature Language="F#" Value="member this.UpdatedRowSource : System.Data.UpdateRowSource with get, set" Usage="System.Data.SqlClient.SqlCommand.UpdatedRowSource" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbCommand.UpdatedRowSource</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbCommand_UpdatedRowSource")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.UpdateRowSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il modo in cui i risultati del comando vengono applicati a <see cref="T:System.Data.DataRow" /> quando vengono usati dal metodo **Update** di <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <value>Uno dei valori di <see cref="T:System.Data.UpdateRowSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore predefinito <xref:System.Data.UpdateRowSource> valore è **entrambi** , a meno che il comando viene generato automaticamente (come nel caso del <xref:System.Data.SqlClient.SqlCommandBuilder>), nel qual caso il valore predefinito è **None**.  
  
 Per altre informazioni sull'uso di **UpdatedRowSource** proprietà, vedere [parametri DataAdapter](~/docs/framework/data/adonet/dataadapter-parameters.md).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">La connessione e recupero di dati in ADO.NET</related>
        <related type="Article" href="~/docs/framework/data/adonet/sql/index.md">Tramite il Provider di dati .NET Framework per SQL Server</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Cenni preliminari su ADO.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>