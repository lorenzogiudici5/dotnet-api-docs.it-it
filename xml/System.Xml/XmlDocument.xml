<Type Name="XmlDocument" FullName="System.Xml.XmlDocument">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="26034cdebb82d836299773cc3636436edaa5198c" />
    <Meta Name="ms.sourcegitcommit" Value="29c771f79cf4eac4f49e5fae5f1aa8b457acf146" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/21/2018" />
    <Meta Name="ms.locfileid" Value="36298960" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlDocument : System.Xml.XmlNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDocument extends System.Xml.XmlNode" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlDocument" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlDocument&#xA;Inherits XmlNode" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlDocument : System::Xml::XmlNode" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlDocument</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta un documento XML. È possibile usare questa classe per caricare, convalidare, modificare, aggiungere e posizionare XML in un documento.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="Remarks"></a> La <xref:System.Xml.XmlDocument> classe è una rappresentazione in memoria di un documento XML. Implementa il W3C [modello oggetto documento (DOM) XML](~/docs/standard/data/xml/xml-document-object-model-dom.md) Level 1 Core e il livello 2.  
  
 *DOM* è l'acronimo di *modello a oggetti documento*. Per ulteriori informazioni, vedere [modello oggetto documento (DOM) XML](~/docs/standard/data/xml/xml-document-object-model-dom.md).  
  
 È possibile caricare il XML nel DOM usando il <xref:System.Xml.XmlDocument> classe e quindi a livello di programmazione leggere, modificare e rimuovere XML nel documento.  
  
 Se si desidera estrarre aprire il <xref:System.Xml.XmlDocument> classe e la relativa implementazione, vedere il [origine riferimento](https://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Dom/XmlDocument.cs#f82a4c1bd1f0ee12).  
  
<a name="Common"></a>   
## <a name="tasks"></a>Attività  
  
-   [Caricare il documento XML nel modello a oggetti documento](#Load)  
  
-   [Convalidarlo rispetto a uno schema](#Validation)  
  
-   [Esplorare l'albero del documento](#Navigate)  
  
-   [Trovare i nodi](#Find)  
  
-   [Modifica di nodi](#Edit)  
  
-   [Aggiunta di nodi](#Add)  
  
-   [Rimozione di nodi](#Remove)  
  
-   [Nodi di posizione](#Position)  
  
<a name="Load"></a>   
## <a name="load-xml-into-the-document-object-model"></a>Caricare il documento XML nel modello a oggetti documento  
 Iniziare con un documento XML simile alla seguente. È solo di pochi libri in una raccolta. Ma contenere gli elementi di base che avviene in qualsiasi documento XML. uno spazio dei nomi, gli elementi che rappresentano i dati e gli attributi che descrivono i dati.  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<books xmlns="http://www.contoso.com/books">  
  <book genre="novel" ISBN="1-861001-57-8" publicationdate="1823-01-28">  
    <title>Pride And Prejudice</title>  
    <price>24.95</price>  
  </book>  
  <book genre="novel" ISBN="1-861002-30-1" publicationdate="1985-01-01">  
    <title>The Handmaid's Tale</title>  
    <price>29.95</price>  
  </book>  
  <book genre="novel" ISBN="1-861001-45-3" publicationdate="1811-01-01">  
    <title>Sense and Sensibility</title>  
    <price>19.95</price>  
  </book>  
</books>  
```  
  
 Successivamente, caricare dati nel DOM, in modo che è possibile utilizzarlo in memoria. Il modo più diffuso per eseguire questa operazione è fare riferimento a un file nel computer locale o in una rete.  
  
 In questo esempio carica il XML da un file. Se il file non esiste, sufficiente genera del codice XML e che carica.  
  
 [!code-cpp[XMLProcessingApp#1](~/samples/snippets/cpp/VS_Snippets_Data/xmlprocessingapp/cpp/xmldomprocessing.cpp#1)]
 [!code-csharp[XMLProcessingApp#1](~/samples/snippets/csharp/VS_Snippets_Data/xmlprocessingapp/cs/xmlhelpermethods.cs#1)]
 [!code-vb[XMLProcessingApp#1](~/samples/snippets/visualbasic/VS_Snippets_Data/xmlprocessingapp/vb/xmlhelpermethods.vb#1)]  
  
 **Esempio completo:** [modificare XML in memoria tramite la classe XmlDocument e altri tipi correlati](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  
  
 **Altre informazioni:** [lettura di un documento XML nel DOM](~/docs/standard/data/xml/reading-an-xml-document-into-the-dom.md)  
  
<a name="Validation"></a>   
## <a name="validate-it-against-a-schema"></a>Convalidarlo rispetto a uno schema  
 Iniziare con uno schema XML come questa. Questo schema definisce i tipi di dati nel file XML e gli attributi sono obbligatori.  
  
```xml  
<?xml version="1.0" encoding="utf-8"?>  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"  
  attributeFormDefault="unqualified"   
  elementFormDefault="qualified"  
  targetNamespace="http://www.contoso.com/books">   
  <xs:element name="books">  
    <xs:complexType>  
      <xs:sequence>  
        <xs:element maxOccurs="unbounded" name="book">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="title" type="xs:string" />  
              <xs:element name="price" type="xs:decimal" />  
            </xs:sequence>  
            <xs:attribute name="genre" type="xs:string" use="required" />  
            <xs:attribute name="ISBN" type="xs:string" use="required" />  
            <xs:attribute name="publicationdate" type="xs:date" use="required" />  
          </xs:complexType>  
        </xs:element>  
      </xs:sequence>  
    </xs:complexType>  
  </xs:element>  
</xs:schema>  
```  
  
 Creare un <xref:System.Xml.XmlReader> utilizzando lo schema dell'oggetto e quindi caricare l'oggetto nel DOM. Creare un gestore eventi che viene eseguito quando il codice tenta di modificare il file XML in modi che violano le regole dello schema.  
  
 Questi blocchi di codice mostrano metodi di supporto che eseguire queste operazioni.  
  
 [!code-cpp[XMLProcessingApp#2](~/samples/snippets/cpp/VS_Snippets_Data/xmlprocessingapp/cpp/xmldomprocessing.cpp#2)]
 [!code-csharp[XMLProcessingApp#2](~/samples/snippets/csharp/VS_Snippets_Data/xmlprocessingapp/cs/xmlhelpermethods.cs#2)]
 [!code-vb[XMLProcessingApp#2](~/samples/snippets/visualbasic/VS_Snippets_Data/xmlprocessingapp/vb/xmlhelpermethods.vb#2)]  
  
 **Esempio completo:** [modificare XML in memoria tramite la classe XmlDocument e altri tipi correlati](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  
  
 **Altre informazioni:** [convalida di un documento XML nel DOM](~/docs/standard/data/xml/validating-an-xml-document-in-the-dom.md)  
  
<a name="Navigate"></a>   
## <a name="navigate-the-document-tree"></a>Esplorare l'albero del documento  
 È possibile utilizzare le proprietà per spostarsi all'interno di un documento XML. Ma prima di utilizzare uno di essi, vediamo alcuni termini. Il documento è costituito da nodi. Ogni nodo dispone come unico *padre* al livello immediatamente superiore. L'unico nodo che non dispone di un nodo padre è la radice del documento, come nodo di livello superiore. La maggior parte dei nodi può presentare *figlio* nodi, che sono nodi direttamente di sotto di essi. I nodi che si trovano sullo stesso livello sono *elementi di pari livello*.  
  
 Nell'esempio seguente, viene illustrato come ottenere il nodo radice, passare il primo nodo figlio del nodo radice, accedere a uno dei relativi nodi figlio, ottenere i dati necessari per il nodo padre e quindi spostarsi tra i nodi di pari livello.  
  
 **Iniziare con il nodo radice**  
  
 In questo esempio Ottiene il nodo radice e quindi utilizza tale nodo per generare il contenuto del documento nella console.  
  
 [!code-cpp[Classic WebData XmlDocument.DocumentElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.DocumentElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.DocumentElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.DocumentElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.DocumentElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.DocumentElement Example/VB/source.vb#1)]  
  
 **Ottenere i nodi figlio**  
  
 In questo esempio passa sul primo nodo figlio del nodo radice e quindi scorre i nodi figlio del nodo se presenti.  
  
 [!code-cpp[Classic WebData XmlNode.HasChildNodes Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlNode.HasChildNodes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlNode.HasChildNodes Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlNode.HasChildNodes Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlNode.HasChildNodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlNode.HasChildNodes Example/VB/source.vb#1)]  
  
 **Tornare al nodo padre**  
  
 Usare la proprietà <xref:System.Xml.XmlDocument.ParentNode%2A>.  
  
 **Fare riferimento all'ultimo nodo figlio**  
  
 In questo esempio il prezzo di un libro viene scritto nella console (che è l'ultimo nodo figlio di un nodo libro).  
  
 [!code-cpp[Classic WebData XmlNode.LastChild Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlNode.LastChild Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlNode.LastChild Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlNode.LastChild Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlNode.LastChild Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlNode.LastChild Example/VB/source.vb#1)]  
  
 **Consente di spostarsi avanti tra elementi di pari livello**  
  
 In questo esempio si sposta in avanti al libro libro. I nodi libro sono di pari livello tra loro.  
  
 [!code-cpp[Classic WebData XmlNode.NextSibling Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlNode.NextSibling Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlNode.NextSibling Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlNode.NextSibling Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlNode.NextSibling Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlNode.NextSibling Example/VB/source.vb#1)]  
  
 **Spostarsi tra elementi di pari livello**  
  
 In questo esempio si sposta con le versioni precedenti dal libro al libro.  
  
 [!code-cpp[Classic WebData XmlNode.PreviousSibling Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlNode.PreviousSibling Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlNode.PreviousSibling Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlNode.PreviousSibling Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlNode.PreviousSibling Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlNode.PreviousSibling Example/VB/source.vb#1)]  
  
<a name="Find"></a>   
## <a name="find-nodes"></a>Trovare i nodi  
 Il modo più diffuso per individuare uno o più nodi di dati consiste nell'utilizzare una stringa di query XPath, ma sono disponibili anche metodi che non richiedono uno.  
  
 **Ottenere un singolo nodo**  
  
 In questo esempio consente di individuare un libro utilizzando il numero ISBN.  
  
 [!code-cpp[XMLProcessingApp#3](~/samples/snippets/cpp/VS_Snippets_Data/xmlprocessingapp/cpp/xmldomprocessing.cpp#3)]
 [!code-csharp[XMLProcessingApp#3](~/samples/snippets/csharp/VS_Snippets_Data/xmlprocessingapp/cs/xmlhelpermethods.cs#3)]
 [!code-vb[XMLProcessingApp#3](~/samples/snippets/visualbasic/VS_Snippets_Data/xmlprocessingapp/vb/xmlhelpermethods.vb#3)]  
  
 La stringa utilizzata in questo esempio è una query Xpath. È possibile trovare ulteriori esempi in questa sede: [esempi XPath](https://msdn.microsoft.com/library/ms256086.aspx).  
  
 È inoltre possibile utilizzare il <xref:System.Xml.XmlDocument.GetElementById%2A> per recuperare i nodi. Per utilizzare questo approccio, è necessario definire gli ID nelle dichiarazioni di definizione di tipo documento del file XML.  
  
 Dopo avere ottenuto un nodo, si ottiene il valore degli attributi o nodi figlio. In questo esempio vengono eseguite con un nodo libro.  
  
 [!code-cpp[XMLProcessingApp#4](~/samples/snippets/cpp/VS_Snippets_Data/xmlprocessingapp/cpp/xmldomprocessing.cpp#4)]
 [!code-csharp[XMLProcessingApp#4](~/samples/snippets/csharp/VS_Snippets_Data/xmlprocessingapp/cs/xmlhelpermethods.cs#4)]
 [!code-vb[XMLProcessingApp#4](~/samples/snippets/visualbasic/VS_Snippets_Data/xmlprocessingapp/vb/xmlhelpermethods.vb#4)]  
  
 **Ottenere una raccolta di nodi**  
  
 In questo esempio consente di selezionare tutti i libri in cui il nome dell'autore ultima è **Austen**e quindi passa il prezzo di questi libri.  
  
 [!code-cpp[Classic WebData XmlNode.SelectNodes Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlNode.SelectNodes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlNode.SelectNodes Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlNode.SelectNodes Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlNode.SelectNodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlNode.SelectNodes Example/VB/source.vb#1)]  
  
 È anche possibile ottenere una raccolta di nodi utilizzando il nome del nodo. Ad esempio, in questo esempio ottiene una raccolta di tutti i titoli dei libri.  
  
 [!code-cpp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.GetElementsByTagName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.GetElementsByTagName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.GetElementsByTagName Example/VB/source.vb#1)]  
  
 **Esempio completo:** [modificare XML in memoria tramite la classe XmlDocument e altri tipi correlati](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  
  
 **Altre informazioni:** [navigazione selezionare nodi tramite XPath](~/docs/standard/data/xml/select-nodes-using-xpath-navigation.md)  
  
<a name="Edit"></a>   
## <a name="edit-nodes"></a>Modifica di nodi  
 Questo esempio viene modificato un nodo libro e i relativi attributi.  
  
 [!code-cpp[XMLProcessingApp#7](~/samples/snippets/cpp/VS_Snippets_Data/xmlprocessingapp/cpp/xmldomprocessing.cpp#7)]
 [!code-csharp[XMLProcessingApp#7](~/samples/snippets/csharp/VS_Snippets_Data/xmlprocessingapp/cs/xmlhelpermethods.cs#7)]
 [!code-vb[XMLProcessingApp#7](~/samples/snippets/visualbasic/VS_Snippets_Data/xmlprocessingapp/vb/xmlhelpermethods.vb#7)]  
  
 **Altre informazioni:** [modifica dei nodi, contenuto e valori in un documento XML](~/docs/standard/data/xml/modifying-nodes-content-and-values-in-an-xml-document.md)  
  
 **Esempio completo:** [modificare XML in memoria tramite la classe XmlDocument e altri tipi correlati](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  
  
<a name="Add"></a>   
## <a name="add-nodes"></a>Aggiunta di nodi  
 Per aggiungere un nodo, usare il <xref:System.Xml.XmlDocument.CreateElement%2A> metodo o <xref:System.Xml.XmlDocument.CreateNode%2A> metodo.  
  
 Per aggiungere un nodo di dati, ad esempio un libro, utilizzare il <xref:System.Xml.XmlDocument.CreateElement%2A> metodo.  
  
 Per qualsiasi altro tipo di nodo, ad esempio un commento, nodo whitespace o nodi CDATA, utilizzare il <xref:System.Xml.XmlDocument.CreateNode%2A> metodo.  
  
 In questo esempio crea un nodo libro, aggiunge gli attributi di tale nodo e quindi aggiunge tale nodo nel documento.  
  
 [!code-cpp[XMLProcessingApp#5](~/samples/snippets/cpp/VS_Snippets_Data/xmlprocessingapp/cpp/xmldomprocessing.cpp#5)]
 [!code-csharp[XMLProcessingApp#5](~/samples/snippets/csharp/VS_Snippets_Data/xmlprocessingapp/cs/xmlhelpermethods.cs#5)]
 [!code-vb[XMLProcessingApp#5](~/samples/snippets/visualbasic/VS_Snippets_Data/xmlprocessingapp/vb/xmlhelpermethods.vb#5)]  
  
 **Esempio completo:** [modificare XML in memoria tramite la classe XmlDocument e altri tipi correlati](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  
  
 **Altre informazioni:** [inserimento di nodi in un documento XML](~/docs/standard/data/xml/inserting-nodes-into-an-xml-document.md)  
  
<a name="Remove"></a>   
## <a name="remove-nodes"></a>Rimozione di nodi  
 Per rimuovere un nodo, utilizzare il <xref:System.Xml.XmlNode.RemoveChild%2A> metodo.  
  
 In questo esempio rimuove un libro dal documento e tutti gli spazi vuoti viene visualizzata subito prima il nodo libro.  
  
 [!code-cpp[XMLProcessingApp#6](~/samples/snippets/cpp/VS_Snippets_Data/xmlprocessingapp/cpp/xmldomprocessing.cpp#6)]
 [!code-csharp[XMLProcessingApp#6](~/samples/snippets/csharp/VS_Snippets_Data/xmlprocessingapp/cs/xmlhelpermethods.cs#6)]
 [!code-vb[XMLProcessingApp#6](~/samples/snippets/visualbasic/VS_Snippets_Data/xmlprocessingapp/vb/xmlhelpermethods.vb#6)]  
  
 **Esempio completo:** [modificare XML in memoria tramite la classe XmlDocument e altri tipi correlati](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  
  
 **Altre informazioni:** [rimozione di nodi, contenuto e valori da un documento XML](~/docs/standard/data/xml/removing-nodes-content-and-values-from-an-xml-document.md)  
  
<a name="Position"></a>   
## <a name="position-nodes"></a>Nodi di posizione  
 È possibile scegliere in cui viene visualizzato nel documento tramite un nodo di <xref:System.Xml.XmlNode.InsertBefore%2A> e <xref:System.Xml.XmlNode.InsertAfter%2A> metodi.  
  
 Questo esempio mostra due metodi di supporto. Uno di essi si sposta un nodo in un elenco. L'altra si sposta un nodo.  
  
 Questi metodi può essere utilizzati in un'applicazione che consente agli utenti di spostarsi su e giù documentazione in un elenco di libri. Quando un utente sceglie un libro e preme un alto o verso il basso pulsante, il codice può chiamare metodi simili per posizionare il corrispondente nodo libro prima o dopo altri nodi libro.  
  
 [!code-cpp[XMLProcessingApp#8](~/samples/snippets/cpp/VS_Snippets_Data/xmlprocessingapp/cpp/xmldomprocessing.cpp#8)]
 [!code-csharp[XMLProcessingApp#8](~/samples/snippets/csharp/VS_Snippets_Data/xmlprocessingapp/cs/xmlhelpermethods.cs#8)]
 [!code-vb[XMLProcessingApp#8](~/samples/snippets/visualbasic/VS_Snippets_Data/xmlprocessingapp/vb/xmlhelpermethods.vb#8)]  
  
 **Esempio completo:** [modificare XML in memoria tramite la classe XmlDocument e altri tipi correlati](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.XmlNodeChangedEventHandler" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Xml.XmlDocument" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDocument();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Xml.XmlDocument" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Di seguito è riportato un esempio di convalida in fase di caricamento. Una definizione DTD () di tipo documento convalida <xref:System.Xml.XmlReader> viene passato per il <xref:System.Xml.XmlDocument.Load%2A> (metodo) e un <xref:System.Xml.Schema.ValidationEventHandler> viene fornito per notificare agli utenti di eventuali errori di convalida. In questo esempio viene rilevato un errore di convalida, ma il documento è stato ancora caricato. In alternativa, è possibile definire una convalida <xref:System.Xml.XmlReader> per generare un'eccezione e arrestare il processo di caricamento quando viene rilevato un errore di convalida non è stato impostato il <xref:System.Xml.Schema.ValidationEventHandler>. Per altre informazioni sulla convalida dei dati XML, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 [!code-cpp[XmlDocument.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlDocument.cctor/CPP/docload.cpp#1)]
 [!code-csharp[XmlDocument.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDocument.cctor/CS/docload.cs#1)]
 [!code-vb[XmlDocument.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDocument.cctor/VB/docload.vb#1)]  
  
 Nell'esempio viene utilizzato il file `bookDTD.xml` come input.  
  
 [!code-xml[XmlDocument.cctor#2](~/samples/snippets/xml/VS_Snippets_Data/XmlDocument.cctor/XML/bookdtd.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlDocument.Load(System.String)" />
        <altmember cref="M:System.Xml.XmlDocument.LoadXml(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal XmlDocument (System.Xml.XmlImplementation imp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlImplementation imp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (imp As XmlImplementation)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; XmlDocument(System::Xml::XmlImplementation ^ imp);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="imp" Type="System.Xml.XmlImplementation" />
      </Parameters>
      <Docs>
        <param name="imp">Oggetto <see langword="XmlImplementation" /> da usare.</param>
        <summary>Inizializza una nuova istanza della classe <see langword="XmlDocument" /> con l'oggetto <see cref="T:System.Xml.XmlImplementation" /> specificato.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDocument (System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlDocument(System::Xml::XmlNameTable ^ nt);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nt">Oggetto <see langword="XmlNameTable" /> da usare.</param>
        <summary>Inizializza una nuova istanza della classe <see langword="XmlDocument" /> con l'oggetto <see cref="T:System.Xml.XmlNameTable" /> specificato.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.BaseURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseURI { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'URI di base del nodo corrente.</summary>
        <value>Percorso da cui è stato caricato il nodo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un documento XML in rete è costituito da blocchi di dati aggregati tramite vari meccanismi di inclusione standard W3C e pertanto contiene nodi provenienti da diverse posizioni. Il `BaseURI` indica la provenienza di questi nodi.  
  
 Per i nodi del documento, `BaseURI` restituisce il percorso del documento XML. Ad esempio, se il `XmlDocument` è stato caricato usando la seguente chiamata doc. Load ("http://server/mydata.xml"), il `BaseURI` per il documento è nodo http://server/mydata.xml. Tuttavia, se il <xref:System.Xml.XmlDocument.Load%2A> metodo è stato reindirizzato dal server a un URI diverso, `BaseURI` restituisce l'URI originale passata per il `Load` (metodo).  
  
 Questa proprietà è un'estensione Microsoft di Document Object Model (DOM). Per ulteriori informazioni su `BaseURI` e su come funziona con altri tipi di nodo, vedere <xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CloneNode(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CloneNode (deep As Boolean) As XmlNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XmlNode ^ CloneNode(bool deep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">
          <see langword="true" /> per clonare in modo ricorsivo il sottoalbero del nodo specificato; <see langword="false" /> per clonare solo il nodo.</param>
        <summary>Crea un duplicato del nodo.</summary>
        <returns>Nodo <see langword="XmlDocument" /> clonato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene utilizzato come un costruttore di copia per i nodi. Nodo clonato non ha elementi padre (<xref:System.Xml.XmlNode.ParentNode%2A> restituisce `null`).  
  
 Se `deep` è `true`, il nodo duplicato include tutti i nodi figlio, solo in caso contrario il `XmlDocument` nodo viene duplicato. Vedere il <xref:System.Xml.XmlNode.CloneNode%2A?displayProperty=nameWithType> metodo per esaminare il funzionamento di questo metodo in altri tipi di nodo.  
  
   
  
## Examples  
 Nell'esempio seguente mostra la differenza tra un clone completo e superficiale.  
  
 [!code-cpp[Classic WebData XmlDocument.CloneNode Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CloneNode Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CloneNode Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CloneNode Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CloneNode Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CloneNode Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlAttribute" /> con il nome specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.XmlAttribute CreateAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlAttribute CreateAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateAttribute (name As String) As XmlAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlAttribute ^ CreateAttribute(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome completo dell'attributo. Se il nome contiene i due punti, la proprietà <see cref="P:System.Xml.XmlNode.Prefix" /> riflette la parte del nome che precede i primi due punti e la proprietà <see cref="P:System.Xml.XmlDocument.LocalName" /> la parte che li segue. La proprietà <see cref="P:System.Xml.XmlNode.NamespaceURI" /> rimane vuota a meno che il prefisso non sia un prefisso incorporato riconosciuto, ad esempio xmlns. In questo caso <see langword="NamespaceURI" /> ha un valore di http://www.w3.org/2000/xmlns/.</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlAttribute" /> con la proprietà <see cref="P:System.Xml.XmlDocument.Name" /> specificata.</summary>
        <returns>Nuovo oggetto <see langword="XmlAttribute" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `XmlAttribute` possono essere aggiunti a un <xref:System.Xml.XmlElement> utilizzando il <xref:System.Xml.XmlElement.SetAttributeNode%2A> metodo.  
  
   
  
## Examples  
 Di seguito viene creato un attributo e lo aggiunge a un documento XML.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttribute">
      <MemberSignature Language="C#" Value="public System.Xml.XmlAttribute CreateAttribute (string qualifiedName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateAttribute (qualifiedName As String, namespaceURI As String) As XmlAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlAttribute ^ CreateAttribute(System::String ^ qualifiedName, System::String ^ namespaceURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qualifiedName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="qualifiedName">Nome completo dell'attributo. Se il nome contiene i due punti, la proprietà <see cref="P:System.Xml.XmlNode.Prefix" /> rifletterà la parte del nome che precede i due punti e la proprietà <see cref="P:System.Xml.XmlDocument.LocalName" /> la parte che li segue.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'attributo. Se il nome completo include un prefisso xmlns, il parametro deve essere http://www.w3.org/2000/xmlns/.</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlAttribute" /> con il nome completo e la proprietà <see cref="P:System.Xml.XmlNode.NamespaceURI" /> specificati.</summary>
        <returns>Nuovo oggetto <see langword="XmlAttribute" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `XmlAttribute` possono essere aggiunti a un <xref:System.Xml.XmlElement> utilizzando il <xref:System.Xml.XmlElement.SetAttributeNode%2A> metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAttribute">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlAttribute CreateAttribute (string prefix, string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAttribute (prefix As String, localName As String, namespaceURI As String) As XmlAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlAttribute ^ CreateAttribute(System::String ^ prefix, System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefisso dell'attributo, se presente. String.Empty e <see langword="null" /> sono equivalenti.</param>
        <param name="localName">Nome locale dell'attributo.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'attributo, se presente. String.Empty e <see langword="null" /> sono equivalenti. Se <c>prefix</c> è xmlns, il parametro deve essere http://www.w3.org/2000/xmlns/; in caso contrario, viene generata un'eccezione.</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlAttribute" /> con le proprietà <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" /> e <see cref="P:System.Xml.XmlNode.NamespaceURI" /> specificate.</summary>
        <returns>Nuovo oggetto <see langword="XmlAttribute" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `XmlAttribute` possono essere aggiunti a un <xref:System.Xml.XmlElement> utilizzando il <xref:System.Xml.XmlElement.SetAttributeNode%2A> metodo.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCDataSection">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlCDataSection CreateCDataSection (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlCDataSection CreateCDataSection(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateCDataSection(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCDataSection (data As String) As XmlCDataSection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlCDataSection ^ CreateCDataSection(System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlCDataSection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">Contenuto del nuovo oggetto <see langword="XmlCDataSection" />.</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlCDataSection" /> contenente i dati specificati.</summary>
        <returns>Nuovo oggetto <see langword="XmlCDataSection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
 In base alla raccomandazione W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), nodi CDataSection sono consentiti all'interno dei nodi elemento e nodi EntityReference se il nodo non è un figlio di un nodo attributo .  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un nodo CDATA e lo aggiunge al documento.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateCDataSection Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateCDataSection Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateCDataSection Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateCDataSection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateCDataSection Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateCDataSection Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateComment">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlComment CreateComment (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlComment CreateComment(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateComment(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateComment (data As String) As XmlComment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlComment ^ CreateComment(System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlComment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">Contenuto del nuovo oggetto <see langword="XmlComment" />.</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlComment" /> contenente i dati specificati.</summary>
        <returns>Nuovo oggetto <see langword="XmlComment" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
 In base alla raccomandazione W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), i nodi di commento sono consentiti solo all'interno dei nodi di documento, elemento ed EntityReference, quando il nodo non è un figlio di un attributo nodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un commento e lo aggiunge a un documento XML.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateComment Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateComment Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateComment Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateComment Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateComment Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateComment Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultAttribute">
      <MemberSignature Language="C#" Value="protected internal virtual System.Xml.XmlAttribute CreateDefaultAttribute (string prefix, string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Xml.XmlAttribute CreateDefaultAttribute(string prefix, string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CreateDefaultAttribute (prefix As String, localName As String, namespaceURI As String) As XmlAttribute" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Xml::XmlAttribute ^ CreateDefaultAttribute(System::String ^ prefix, System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefisso dell'attributo, se presente.</param>
        <param name="localName">Nome locale dell'attributo.</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'attributo, se presente.</param>
        <summary>Crea un attributo predefinito con il prefisso, il nome locale e l'URI dello spazio dei nomi specificati.</summary>
        <returns>Nuovo oggetto <see cref="T:System.Xml.XmlAttribute" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentFragment">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlDocumentFragment CreateDocumentFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlDocumentFragment CreateDocumentFragment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateDocumentFragment" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDocumentFragment () As XmlDocumentFragment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlDocumentFragment ^ CreateDocumentFragment();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocumentFragment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlDocumentFragment" />.</summary>
        <returns>Nuovo oggetto <see langword="XmlDocumentFragment" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I nodi DocumentFragment non possono essere inseriti in un documento. Tuttavia, è possibile inserire gli elementi figlio del nodo DocumentFragment in un documento.  
  
   
  
## Examples  
 Nell'esempio seguente vengono aggiunti nuovi nodi a un documento XML.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateDocumentFragment Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateDocumentFragment Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateDocumentFragment Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDocumentType">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlDocumentType CreateDocumentType (string name, string publicId, string systemId, string internalSubset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlDocumentType CreateDocumentType(string name, string publicId, string systemId, string internalSubset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDocumentType (name As String, publicId As String, systemId As String, internalSubset As String) As XmlDocumentType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlDocumentType ^ CreateDocumentType(System::String ^ name, System::String ^ publicId, System::String ^ systemId, System::String ^ internalSubset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocumentType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="publicId" Type="System.String" />
        <Parameter Name="systemId" Type="System.String" />
        <Parameter Name="internalSubset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome del tipo di documento.</param>
        <param name="publicId">Identificatore pubblico del tipo di documento o <see langword="null" />. È possibile specificare un URI pubblico e anche un identificatore di sistema per individuare la posizione del sottoinsieme DTD esterno.</param>
        <param name="systemId">Identificatore di sistema del tipo di documento o <see langword="null" />. Specifica l'URL della posizione del file relativa al sottoinsieme DTD esterno.</param>
        <param name="internalSubset">Sottoinsieme DTD interno del tipo di documento o <see langword="null" />.</param>
        <summary>Restituisce un nuovo oggetto <see cref="T:System.Xml.XmlDocumentType" />.</summary>
        <returns>Nuovo oggetto <see langword="XmlDocumentType" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nodo restituito verrà analizzati <xref:System.Xml.XmlDocumentType.Entities%2A> e <xref:System.Xml.XmlDocumentType.Notations%2A> raccolte.  
  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
 In base alla raccomandazione W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), i nodi DocumentType sono consentiti solo all'interno dei nodi di documento. Ogni <xref:System.Xml.XmlDocument> può contenere un solo nodo DocumentType. Il nodo DocumentType deve inoltre essere inserito prima l'elemento radice del `XmlDocument` (se il documento contiene già un elemento radice, è possibile aggiungere un nodo DocumentType).  
  
 Se i parametri passati non combinare per compilare un valido `XmlDocumentType`, viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un nodo DocumentType e lo aggiunge a un documento XML.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateDocumentType Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateDocumentType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateDocumentType Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateDocumentType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateDocumentType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateDocumentType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Questo metodo presenta una richiesta di ereditarietà. Attendibilità totale è necessario eseguire l'override di <see langword="CreateDocumentType" /> metodo.  Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlElement" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public System.Xml.XmlElement CreateElement (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlElement CreateElement(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateElement (name As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlElement ^ CreateElement(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome completo dell'elemento. Se il nome contiene i due punti, la proprietà <see cref="P:System.Xml.XmlNode.Prefix" /> riflette la parte del nome che precede i due punti e la proprietà <see cref="P:System.Xml.XmlDocument.LocalName" /> la parte che li segue. Il nome completo non può includere un prefisso"xmlns".</param>
        <summary>Crea un elemento con il nome specificato.</summary>
        <returns>Nuovo oggetto <see langword="XmlElement" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si noti che l'istanza restituita implementa il `XmlElement` interfaccia, in modo che gli attributi predefiniti verranno creati direttamente sull'oggetto restituito.  
  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
 In base alla raccomandazione W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), i nodi degli elementi consentiti all'interno dei nodi elemento e di documento e nodi EntityReference quando il nodo non è un elemento figlio di un Nodo di attributo.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un nuovo elemento e lo aggiunge al documento.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public System.Xml.XmlElement CreateElement (string qualifiedName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlElement CreateElement(string qualifiedName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateElement(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateElement (qualifiedName As String, namespaceURI As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlElement ^ CreateElement(System::String ^ qualifiedName, System::String ^ namespaceURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qualifiedName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="qualifiedName">Nome completo dell'elemento. Se il nome contiene i due punti, la proprietà <see cref="P:System.Xml.XmlNode.Prefix" /> rifletterà la parte del nome che precede i due punti e la proprietà <see cref="P:System.Xml.XmlDocument.LocalName" /> la parte che li segue. Il nome completo non può includere un prefisso"xmlns".</param>
        <param name="namespaceURI">URI dello spazio dei nomi dell'elemento.</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlElement" /> con il nome completo e una proprietà <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
        <returns>Nuovo oggetto <see langword="XmlElement" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il codice c# seguente  
  
```csharp  
XmlElement elem;  
elem=doc.CreateElement("xy:item", "urn:abc");  
```  
  
 risultati in un elemento che corrisponde al testo XML seguente.  
  
```  
<xy:item  
       xmlns:xy="urn:abc"/>  
```  
  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
 In base alla raccomandazione W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), i nodi degli elementi consentiti all'interno dei nodi elemento e di documento e nodi EntityReference quando il nodo non è un elemento figlio di un Nodo di attributo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlElement CreateElement(string prefix, string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateElement (prefix As String, localName As String, namespaceURI As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlElement ^ CreateElement(System::String ^ prefix, System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefisso del nuovo elemento, se presente. String.Empty e <see langword="null" /> sono equivalenti.</param>
        <param name="localName">Nome locale del nuovo elemento.</param>
        <param name="namespaceURI">URI dello spazio dei nomi del nuovo elemento, se presente. String.Empty e <see langword="null" /> sono equivalenti.</param>
        <summary>Crea un elemento con le proprietà <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" /> e <see cref="P:System.Xml.XmlNode.NamespaceURI" /> specificate.</summary>
        <returns>Nuovo oggetto <see cref="T:System.Xml.XmlElement" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il codice c# seguente  
  
```csharp  
XmlElement elem;  
elem=doc.CreateElement("xy", "item", "urn:abc");  
```  
  
 Crea un elemento equivalente al testo XML seguente:  
  
```  
<xy:item xmlns:xy="urn:abc"/>  
```  
  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
 In base alla raccomandazione W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), i nodi elemento sono consentiti all'interno dei nodi elemento e di documento e nodi EntityReference se EntityReference è di fuori di un nodo attributo.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
   
  
## Examples  
 Nell'esempio seguente aggiunge un nuovo elemento del documento XML esistente.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateElement2 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateElement2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateElement2 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateElement2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateElement2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateElement2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEntityReference">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlEntityReference CreateEntityReference (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlEntityReference CreateEntityReference(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateEntityReference(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEntityReference (name As String) As XmlEntityReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlEntityReference ^ CreateEntityReference(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlEntityReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome del riferimento a entità.</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlEntityReference" /> con il nome specificato.</summary>
        <returns>Nuovo oggetto <see langword="XmlEntityReference" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'entità di riferimento è noto, l'elenco di elementi figlio del `XmlEntityReference` è uguale a quello del corrispondente nodo <xref:System.Xml.XmlEntity> nodo.  
  
 Gli spazi dei nomi utilizzati nel testo di sostituzione per il riferimento all'entità sono associati al momento che l'elemento padre del nodo di riferimento di entità prima di tutto è impostato (ad esempio, quando il documento viene inserito il nodo di riferimento di entità). Ad esempio, poiché le entità seguenti:  
  
```  
<!ENTITY a "<b>test</b>">  
```  
  
 Se si chiama `CreateEntityReference("a")` verrà restituito un singolo nodo di tipo EntityReference senza elementi figlio. Se si aggiunge questo nodo come figlio del nodo seguente,  
  
```  
<item xmlns="urn:1"/>  
```  
  
 quindi, al momento della chiamata al metodo <xref:System.Xml.XmlNode.AppendChild%2A>, l'elemento padre del nodo di riferimento di entità appena creata è impostato e gli elementi figlio vengono espanse in questo contesto dello spazio dei nomi. Il nodo elemento figlio `b` avrà NamespaceURI uguale a `urn:1`. I nodi figlio del riferimento all'entità rimangono invariati anche se si sposta il riferimento all'entità in una posizione nel documento che dispone di un contesto dello spazio dei nomi predefinito diverso. Questo non accade per i nodi di riferimento di entità esistenti quando si rimuove e inserirli o per riferimenti a entità duplicati con <xref:System.Xml.XmlDocument.CloneNode%2A>. Si verifica solo per i riferimenti alle entità appena creato.  
  
 Se l'entità corrispondente non è definito nella DocumentType quando viene aggiunto il nodo di riferimento di entità, perché il riferimento all'entità non è definito, l'unico nodo figlio sarà un nodo di testo vuota.  
  
 L'entità incorporate amp, lt, gt, apos e quot sono inoltre consentiti e hanno un nodo di testo figlio con il valore di carattere esteso appropriato.  
  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
 In base alla raccomandazione W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), i nodi EntityReference sono consentiti solo all'interno dei nodi elemento, attributo ed EntityReference.  
  
   
  
## Examples  
 Nell'esempio seguente crea due nodi di riferimento di entità e li inserisce in un documento XML.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateEntityReference Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateEntityReference Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateEntityReference Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateEntityReference Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateEntityReference Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateEntityReference Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il nome non è valido, ad esempio i nomi che iniziano con '#' non sono validi.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateNavigator">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un nuovo oggetto <see cref="T:System.Xml.XPath.XPathNavigator" /> per spostarsi in questo documento.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateNavigator">
      <MemberSignature Language="C#" Value="public override System.Xml.XPath.XPathNavigator CreateNavigator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XPath.XPathNavigator CreateNavigator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateNavigator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateNavigator () As XPathNavigator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Xml::XPath::XPathNavigator ^ CreateNavigator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuovo oggetto <see cref="T:System.Xml.XPath.XPathNavigator" /> per spostarsi in questo documento.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XPath.XPathNavigator" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
   
  
## Examples  
 Vedere <xref:System.Xml.XmlNode.CreateNavigator%2A?displayProperty=nameWithType> per un esempio di utilizzo di questo metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNavigator">
      <MemberSignature Language="C#" Value="protected internal virtual System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Xml.XPath.XPathNavigator CreateNavigator(class System.Xml.XmlNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CreateNavigator (node As XmlNode) As XPathNavigator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Xml::XPath::XPathNavigator ^ CreateNavigator(System::Xml::XmlNode ^ node);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="node">Oggetto <see cref="T:System.Xml.XmlNode" /> su cui posizionare inizialmente lo strumento di spostamento.</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XPath.XPathNavigator" /> per lo spostamento all'interno del documento che si trova nella classe <see cref="T:System.Xml.XmlNode" /> specificata.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XPath.XPathNavigator" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
   
  
## Examples  
 Vedere <xref:System.Xml.XmlNode.CreateNavigator%2A?displayProperty=nameWithType> per un esempio di utilizzo di questo metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateNode">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlNode" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode CreateNode (string nodeTypeString, string name, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode CreateNode(string nodeTypeString, string name, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateNode (nodeTypeString As String, name As String, namespaceURI As String) As XmlNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlNode ^ CreateNode(System::String ^ nodeTypeString, System::String ^ name, System::String ^ namespaceURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeTypeString" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="nodeTypeString">Versione stringa dell'oggetto <see cref="T:System.Xml.XmlNodeType" /> del nuovo nodo. Questo parametro deve essere uno dei valori elencati nella tabella seguente.</param>
        <param name="name">Nome completo del nuovo nodo. Se il nome contiene i due punti, viene analizzato nei componenti <see cref="P:System.Xml.XmlNode.Prefix" /> e <see cref="P:System.Xml.XmlDocument.LocalName" />.</param>
        <param name="namespaceURI">URI dello spazio dei nomi del nuovo nodo.</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlNode" /> con il tipo di nodo e le proprietà <see cref="P:System.Xml.XmlDocument.Name" /> e <see cref="P:System.Xml.XmlNode.NamespaceURI" /> specificati.</summary>
        <returns>Nuovo oggetto <see langword="XmlNode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `nodeTypeString` parametro tra maiuscole e minuscole e deve essere uno dei valori nella tabella seguente.  
  
|nodeTypeString|XmlNodeType|  
|--------------------|-----------------|  
|Attributo|Attributo|  
|CDATASection|CDATA|  
|commento|Commento|  
|documento|Document|  
|DocumentFragment|DocumentFragment|  
|DocumentType|DocumentType|  
|elemento|Elemento|  
|EntityReference|EntityReference|  
|ProcessingInstruction|ProcessingInstruction|  
|SignificantWhitespace|SignificantWhitespace|  
|ASCII|Testo|  
|whitespace|Whitespace|  
  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
 Nella tabella seguente viene illustrato quale tipo di nodo [riga] è consentita all'interno di un altro tipo di nodo [colonna] in base alla raccomandazione W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210).  
  
||Document|DocumentType|XmlDeclaration|Elemento|Attributo|Testo|CDATA|Markup|EntityReference|  
|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  
|`Document`|No|No|No|No|No|No|No|No|No|  
|`DocumentType`|sì|No|No|No|No|No|No|No|No|  
|`XmlDeclaration`|Sì *|No|No|No|No|No|No|No|No|  
|`Element`|sì|No|No|sì|No|No|No|No|Sì * * *|  
|`Attribute`|No|No|No|Sì * * *|No|No|No|No|No|  
|`Text`|No|No|No|sì|sì|No|No|No|sì|  
|`CDATA`|No|No|No|sì|No|No|No|No|Sì * * *|  
|`Markup**`|sì|No|No|sì|No|No|No|No|No|  
|`EntityReference`|No|No|No|sì|sì|No|No|No|sì|  
  
 \* Il nodo XmlDeclaration deve essere il primo membro figlio del nodo del documento.  
  
 * * Markup include i nodi ProcessingInstruction e commento.  
  
 Nodi elemento e CDATA sono consentiti solo nodi EntityReference quando il nodo non è un elemento figlio di un nodo attributo.  
  
 Attributi non sono elementi figlio di un nodo elemento. Gli attributi sono contenuti all'interno di una raccolta di attributi che appartiene a un nodo elemento.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un nuovo elemento e lo inserisce nel documento.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateNode1 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateNode1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateNode1 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateNode1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateNode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateNode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il nome non è stato fornito e <see langword="XmlNodeType" /> richiede un nome oppure <paramref name="nodeTypeString" /> non è una delle stringhe elencate di seguito.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string name, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode CreateNode(valuetype System.Xml.XmlNodeType type, string name, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateNode (type As XmlNodeType, name As String, namespaceURI As String) As XmlNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlNode ^ CreateNode(System::Xml::XmlNodeType type, System::String ^ name, System::String ^ namespaceURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.XmlNodeType" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <see langword="XmlNodeType" /> del nuovo nodo.</param>
        <param name="name">Nome completo del nuovo nodo. Se il nome contiene i due punti, viene analizzato nei componenti <see cref="P:System.Xml.XmlNode.Prefix" /> e <see cref="P:System.Xml.XmlDocument.LocalName" />.</param>
        <param name="namespaceURI">URI dello spazio dei nomi del nuovo nodo.</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlNode" /> con le proprietà <see cref="T:System.Xml.XmlNodeType" />, <see cref="P:System.Xml.XmlDocument.Name" /> e <see cref="P:System.Xml.XmlNode.NamespaceURI" /> specificate.</summary>
        <returns>Nuovo oggetto <see langword="XmlNode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
 Nella tabella seguente viene illustrato quale tipo di nodo [riga] è consentita all'interno di un altro tipo di nodo [colonna] in base alla raccomandazione W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210).  
  
||Document|DocumentType|XmlDeclaration|Elemento|Attributo|Testo|CDATA|Markup|EntityReference|  
|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  
|`Document`|No|No|No|No|No|No|No|No|No|  
|`DocumentType`|sì|No|No|No|No|No|No|No|No|  
|`XmlDeclaration`|Sì *|No|No|No|No|No|No|No|No|  
|`Element`|sì|No|No|sì|No|No|No|No|Sì * * *|  
|`Attribute`|No|No|No|Sì * * *|No|No|No|No|No|  
|`Text`|No|No|No|sì|sì|No|No|No|sì|  
|`CDATA`|No|No|No|sì|No|No|No|No|Sì * * *|  
|`Markup**`|sì|No|No|sì|No|No|No|No|No|  
|`EntityReference`|No|No|No|sì|sì|No|No|No|sì|  
  
 \* Il nodo XmlDeclaration deve essere il primo membro figlio del nodo del documento.  
  
 * * Markup include i nodi ProcessingInstruction e commento.  
  
 Nodi elemento e CDATA sono consentiti solo nodi EntityReference quando il nodo non è un elemento figlio di un nodo attributo.  
  
 Attributi non sono elementi figlio di un nodo elemento. Gli attributi sono contenuti all'interno di una raccolta di attributi che appartiene a un nodo elemento.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un nuovo elemento e lo inserisce in un documento XML.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateNode Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateNode Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateNode Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateNode Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateNode Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateNode Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Non è stato specificato il nome e il <see langword="XmlNodeType" /> richiede un nome.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string prefix, string name, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode CreateNode(valuetype System.Xml.XmlNodeType type, string prefix, string name, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateNode (type As XmlNodeType, prefix As String, name As String, namespaceURI As String) As XmlNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlNode ^ CreateNode(System::Xml::XmlNodeType type, System::String ^ prefix, System::String ^ name, System::String ^ namespaceURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.XmlNodeType" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <see langword="XmlNodeType" /> del nuovo nodo.</param>
        <param name="prefix">Prefisso del nuovo nodo.</param>
        <param name="name">Nome locale del nuovo nodo.</param>
        <param name="namespaceURI">URI dello spazio dei nomi del nuovo nodo.</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlNode" /> con gli oggetti <see cref="T:System.Xml.XmlNodeType" />, <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.Name" /> e <see cref="P:System.Xml.XmlNode.NamespaceURI" /> specificati.</summary>
        <returns>Nuovo oggetto <see langword="XmlNode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
 Nella tabella seguente viene illustrato quale tipo di nodo [riga] è consentita all'interno di un altro tipo di nodo [colonna] in base alla raccomandazione W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210).  
  
||Document|DocumentType|XmlDeclaration|Elemento|Attributo|Testo|CDATA|Markup|EntityReference|  
|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  
|`Document`|No|No|No|No|No|No|No|No|No|  
|`DocumentType`|sì|No|No|No|No|No|No|No|No|  
|`XmlDeclaration`|Sì *|No|No|No|No|No|No|No|No|  
|`Element`|sì|No|No|sì|No|No|No|No|Sì * * *|  
|`Attribute`|No|No|No|Sì * * *|No|No|No|No|No|  
|`Text`|No|No|No|sì|sì|No|No|No|sì|  
|`CDATA`|No|No|No|sì|No|No|No|No|Sì * * *|  
|`Markup**`|sì|No|No|sì|No|No|No|No|No|  
|`EntityReference`|No|No|No|sì|sì|No|No|No|sì|  
  
 \* Il nodo XmlDeclaration deve essere il primo membro figlio del nodo del documento.  
  
 * * Markup include i nodi ProcessingInstruction e commento.  
  
 Nodi elemento e CDATA sono consentiti solo nodi EntityReference quando il nodo non è un elemento figlio di un nodo attributo.  
  
 Attributi non sono elementi figlio di un nodo elemento. Gli attributi sono contenuti all'interno di una raccolta di attributi che appartiene al nodo dell'elemento.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
   
  
## Examples  
 Nell'esempio seguente aggiunge un nuovo elemento al documento.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateNode2 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateNode2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateNode2 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateNode2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateNode2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateNode2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Non è stato specificato il nome e il <see langword="XmlNodeType" /> richiede un nome.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateProcessingInstruction">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlProcessingInstruction CreateProcessingInstruction (string target, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlProcessingInstruction CreateProcessingInstruction(string target, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateProcessingInstruction (target As String, data As String) As XmlProcessingInstruction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlProcessingInstruction ^ CreateProcessingInstruction(System::String ^ target, System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlProcessingInstruction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">Nome dell'istruzione di elaborazione.</param>
        <param name="data">Dati per l'istruzione di elaborazione.</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlProcessingInstruction" /> con il nome e i dati specificati.</summary>
        <returns>Nuovo oggetto <see langword="XmlProcessingInstruction" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
 In base alla raccomandazione W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), i nodi ProcessingInstruction sono consentiti solo all'interno dei nodi di documento, elemento ed EntityReference, quando il nodo non è un elemento figlio di un nodo attributo.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un nodo ProcessingInstruction e lo aggiunge al documento.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateProcessingInstruction Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateProcessingInstruction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateProcessingInstruction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSignificantWhitespace">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSignificantWhitespace (text As String) As XmlSignificantWhitespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlSignificantWhitespace ^ CreateSignificantWhitespace(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSignificantWhitespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">La stringa deve contenere solo i caratteri seguenti &amp;#20; &amp;#10; &amp;#13; e &amp;#9;</param>
        <summary>Crea un nodo <see cref="T:System.Xml.XmlSignificantWhitespace" />.</summary>
        <returns>Nuovo nodo <see langword="XmlSignificantWhitespace" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model). Viene utilizzato quando si desidera formattare manualmente il documento.  
  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
   
  
## Examples  
 Nell'esempio seguente aggiunge spazi vuoti significativi al documento.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateSignificantWhitespace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateSignificantWhitespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateSignificantWhitespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTextNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlText CreateTextNode (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlText CreateTextNode(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateTextNode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTextNode (text As String) As XmlText" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlText ^ CreateTextNode(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlText</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo per il nodo Text.</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlText" /> con il testo specificato.</summary>
        <returns>Nuovo nodo <see langword="XmlText" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
 In base alla raccomandazione W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), sono consentiti solo nodi di testo all'interno dei nodi elemento, attributo ed EntityReference.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un nuovo elemento e lo aggiunge al documento.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWhitespace">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWhitespace CreateWhitespace (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlWhitespace CreateWhitespace(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateWhitespace (text As String) As XmlWhitespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlWhitespace ^ CreateWhitespace(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWhitespace</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">La stringa deve contenere solo i caratteri seguenti &amp;#20; &amp;#10; &amp;#13; e &amp;#9;</param>
        <summary>Crea un nodo <see cref="T:System.Xml.XmlWhitespace" />.</summary>
        <returns>Nuovo nodo <see langword="XmlWhitespace" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model). Viene utilizzato quando si desidera formattare manualmente il documento.  
  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene aggiunto uno spazio vuoto nel documento.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateWhitespace Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateWhitespace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateWhitespace Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateWhitespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateWhitespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateWhitespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXmlDeclaration">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlDeclaration CreateXmlDeclaration (string version, string encoding, string standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateXmlDeclaration (version As String, encoding As String, standalone As String) As XmlDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlDeclaration ^ CreateXmlDeclaration(System::String ^ version, System::String ^ encoding, System::String ^ standalone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="encoding" Type="System.String" />
        <Parameter Name="standalone" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="version">La versione deve essere "1.0".</param>
        <param name="encoding">Valore dell'attributo di codifica. Si tratta della codifica usata quando si salva l'oggetto <see cref="T:System.Xml.XmlDocument" /> in un file o in un flusso; pertanto, deve essere impostata su una stringa supportata dalla classe <see cref="T:System.Text.Encoding" />, altrimenti <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> non riesce. Se il valore è <see langword="null" /> o String.Empty, il metodo <see langword="Save" /> non scrive un attributo di codifica nella dichiarazione XML e quindi viene usata la codifica predefinita UTF-8.  Nota: se l'oggetto <see langword="XmlDocument" /> viene salvato in <see cref="T:System.IO.TextWriter" /> o in <see cref="T:System.Xml.XmlTextWriter" />, questo valore di codifica viene rimosso. Al suo posto viene usata la codifica di <see langword="TextWriter" /> o <see langword="XmlTextWriter" />. In questo modo l'XML scritto potrà essere nuovamente letto con la codifica corretta.</param>
        <param name="standalone">Il valore deve essere "yes" o "no". Se il valore è <see langword="null" /> o String.Empty, il metodo <see langword="Save" /> non scrive un attributo autonomo nella dichiarazione XML.</param>
        <summary>Crea un nodo <see cref="T:System.Xml.XmlDeclaration" /> con i valori specificati.</summary>
        <returns>Nuovo nodo <see langword="XmlDeclaration" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli attributi sono esposte come proprietà speciali di `XmlDeclaration` nodo e non come <xref:System.Xml.XmlAttribute> nodi.  
  
 Anche se questo metodo crea il nuovo oggetto nel contesto del documento, tuttavia viene aggiunto automaticamente alla struttura del documento. Per aggiungere il nuovo oggetto, è necessario chiamare in modo esplicito uno dei metodi di inserimento nodo.  
  
 In base alla raccomandazione W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), il `XmlDeclaration` nodo deve essere il primo nodo nel documento.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
   
  
## Examples  
 Nell'esempio seguente crea una dichiarazione XML e lo aggiunge al documento.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateXmlDeclaration Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateXmlDeclaration Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateXmlDeclaration Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">I valori di <paramref name="version" /> o <paramref name="standalone" /> sono diversi da quelli specificati in precedenza.</exception>
        <altmember cref="T:System.Xml.XmlDeclaration" />
      </Docs>
    </Member>
    <Member MemberName="DocumentElement">
      <MemberSignature Language="C#" Value="public System.Xml.XmlElement DocumentElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlElement DocumentElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.DocumentElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentElement As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlElement ^ DocumentElement { System::Xml::XmlElement ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Xml.XmlElement" /> radice per il documento.</summary>
        <value>Oggetto <see langword="XmlElement" /> che rappresenta la radice dell'albero del documento XML. Se non esistono radici, viene restituito <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente mostra l'elemento radice del documento XML.  
  
 [!code-cpp[Classic WebData XmlDocument.DocumentElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.DocumentElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.DocumentElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.DocumentElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.DocumentElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.DocumentElement Example/VB/source.vb#1)]  
  
 **Output:**  
  
```  
<book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book>   
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentType">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlDocumentType DocumentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDocumentType DocumentType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.DocumentType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DocumentType As XmlDocumentType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlDocumentType ^ DocumentType { System::Xml::XmlDocumentType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocumentType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nodo che contiene la dichiarazione DOCTYPE.</summary>
        <value>Oggetto <see cref="T:System.Xml.XmlNode" /> che contiene la dichiarazione DocumentType (DOCTYPE).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un `XmlDocument` può avere un solo elemento figlio con <xref:System.Xml.XmlNodeType> uguale a DocumentType.  
  
> [!NOTE]
>  Questa proprietà è di sola lettura. Per modificare il nodo DocumentType, eliminare il nodo esistente, creare uno nuovo utilizzando il <xref:System.Xml.XmlDocument.CreateDocumentType%2A> (metodo) e aggiungere il nuovo nodo al documento.  
  
   
  
## Examples  
 Nell'esempio seguente recupera e Visualizza la dichiarazione DOCTYPE per il documento.  
  
 [!code-cpp[Classic WebData XmlDocument.DocumentType Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.DocumentType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.DocumentType Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.DocumentType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.DocumentType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.DocumentType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlDocumentType" />
      </Docs>
    </Member>
    <Member MemberName="GetElementById">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlElement GetElementById (string elementId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlElement GetElementById(string elementId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.GetElementById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetElementById (elementId As String) As XmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlElement ^ GetElementById(System::String ^ elementId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementId">ID dell'attributo di cui verificare la corrispondenza.</param>
        <summary>Ottiene l'oggetto <see cref="T:System.Xml.XmlElement" /> con l'ID specificato.</summary>
        <returns>Oggetto <see langword="XmlElement" /> con l'ID corrispondente o <see langword="null" /> se non vengono trovati elementi corrispondenti.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il documento dispone di più elementi con l'ID corrispondente, questo metodo restituisce il primo elemento corrispondente nel documento.  
  
> [!NOTE]
>  L'implementazione DOM deve disporre delle informazioni che definiscono gli attributi di tipo ID. Anche se gli attributi di tipo ID possono essere definiti in schemi XSD o DTD, questa versione del prodotto supporta solo quelli definiti nelle dichiarazioni DTD. Attributi con il nome "ID" non sono di tipo ID a meno che non definito in questo modo nella DTD. Le implementazioni in cui non è noto se gli attributi sono di tipo ID devono restituire `null`.  
  
   
  
## Examples  
 Nell'esempio seguente viene usato il metodo `GetElementById`:  
  
 [!code-cpp[Classic WebData XmlDocument.GetElementById Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.GetElementById Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.GetElementById Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.GetElementById Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.GetElementById Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.GetElementById Example/VB/source.vb#1)]  
  
 Nell'esempio viene utilizzato il file, `ids.xml`, come input.  
  
```xml  
<!DOCTYPE root [  
  <!ELEMENT root ANY>   
  <!ELEMENT Person ANY>   
  <!ELEMENT Customer EMPTY>  
  <!ELEMENT Team EMPTY>  
  <!ATTLIST Person SSN ID #REQUIRED>  
  <!ATTLIST Customer id IDREF #REQUIRED >  
  <!ATTLIST Team members IDREFS #REQUIRED]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetElementsByTagName">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un oggetto <see cref="T:System.Xml.XmlNodeList" /> contenente un elenco di tutti gli elementi discendenti che corrispondono al nome specificato.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNodeList GetElementsByTagName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNodeList GetElementsByTagName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetElementsByTagName (name As String) As XmlNodeList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlNodeList ^ GetElementsByTagName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nome completo di cui verificare la corrispondenza. Viene confrontato con la proprietà <see langword="Name" /> del nodo corrispondente. Il valore speciale "*" corrisponde a tutti i tag.</param>
        <summary>Restituisce un oggetto <see cref="T:System.Xml.XmlNodeList" /> contenente un elenco di tutti gli elementi discendenti che corrispondono alla proprietà <see cref="P:System.Xml.XmlDocument.Name" /> specificata.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlNodeList" /> contenente un elenco di tutti i nodi corrispondenti. Se nessun nodo corrisponde a <paramref name="name" />, la raccolta restituita sarà vuota.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I nodi vengono inseriti nell'ordine in cui veniva rilevati nel documento.  
  
> [!NOTE]
>  È consigliabile utilizzare il <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=nameWithType> o <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=nameWithType> anziché il <xref:System.Xml.XmlDocument.GetElementsByTagName%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un `XmlDocument` oggetto e viene utilizzato il `GetElementsByTagName` metodo e il valore risultante <xref:System.Xml.XmlNodeList> oggetto per visualizzare tutti i titoli dei libri.  
  
 [!code-cpp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.GetElementsByTagName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.GetElementsByTagName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.GetElementsByTagName Example/VB/source.vb#1)]  
  
 Nell'esempio viene utilizzato il file `books.xml` come input.  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNodeList GetElementsByTagName (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNodeList GetElementsByTagName(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetElementsByTagName (localName As String, namespaceURI As String) As XmlNodeList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlNodeList ^ GetElementsByTagName(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">LocalName di cui verificare la corrispondenza. Il valore speciale "*" corrisponde a tutti i tag.</param>
        <param name="namespaceURI">NamespaceURI di cui verificare la corrispondenza.</param>
        <summary>Restituisce un oggetto <see cref="T:System.Xml.XmlNodeList" /> contenente un elenco di tutti gli elementi discendenti che corrispondono alle proprietà <see cref="P:System.Xml.XmlDocument.LocalName" /> e <see cref="P:System.Xml.XmlNode.NamespaceURI" /> specificate.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlNodeList" /> contenente un elenco di tutti i nodi corrispondenti. Se nessun nodo corrisponde agli oggetti <paramref name="localName" /> e <paramref name="namespaceURI" /> specificati, la raccolta restituita sarà vuota.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I nodi vengono inseriti nell'ordine in cui verrebbero rilevati nell'albero del documento.  
  
> [!NOTE]
>  È consigliabile utilizzare il <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=nameWithType> o <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=nameWithType> anziché il <xref:System.Xml.XmlDocument.GetElementsByTagName%2A> metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Implementation">
      <MemberSignature Language="C#" Value="public System.Xml.XmlImplementation Implementation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlImplementation Implementation" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.Implementation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Implementation As XmlImplementation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlImplementation ^ Implementation { System::Xml::XmlImplementation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlImplementation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Xml.XmlImplementation" /> per il documento corrente.</summary>
        <value>Oggetto <see langword="XmlImplementation" /> per il documento corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `XmlDocument` gli oggetti creati dallo stesso `XmlImplementation` condividono lo stesso <xref:System.Xml.XmlNameTable>. Ciò consente agli utenti di confrontare i nomi di attributi ed elementi come oggetti anziché come stringhe.  
  
 Sebbene il `XmlDocument` oggetti condividono la stessa implementazione, spostare i nodi da un documento a un'altra è necessario utilizzare il <xref:System.Xml.XmlDocument.ImportNode%2A> metodo.  
  
   
  
## Examples  
 L'esempio seguente crea un nuovo `XmlDocument` mediante l'implementazione di un altro documento.  
  
 [!code-cpp[Classic WebData XmlDocument.Implementation Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.Implementation Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.Implementation Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.Implementation Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.Implementation Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.Implementation Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode ImportNode (System.Xml.XmlNode node, bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode ImportNode(class System.Xml.XmlNode node, bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportNode (node As XmlNode, deep As Boolean) As XmlNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlNode ^ ImportNode(System::Xml::XmlNode ^ node, bool deep);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Xml.XmlNode" />
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="node">Nodo da importare.</param>
        <param name="deep">
          <see langword="true" /> per eseguire una clonazione completa; in caso contrario, <see langword="false" />.</param>
        <summary>Importa un nodo da un altro documento al documento corrente.</summary>
        <returns>Oggetto <see cref="T:System.Xml.XmlNode" /> importato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nodo restituito non ha elementi padre. Il nodo di origine non viene modificato o rimosso dal documento originale. `ImportNode` crea una copia del nodo di origine.  
  
 L'importazione di un nodo viene creato un `XmlNode` oggetto appartenente al documento di importazione, con <xref:System.Xml.XmlNode.Name%2A> e <xref:System.Xml.XmlNode.NodeType%2A> identico al nodo di origine. Il nuovo oggetto dispone anche di attributi correlati agli spazi dei nomi (<xref:System.Xml.XmlNode.Prefix%2A>, <xref:System.Xml.XmlNode.LocalName%2A>, e <xref:System.Xml.XmlNode.NamespaceURI%2A>).  
  
 A seconda del tipo di nodo importato e il valore della `deep` parametro, informazioni aggiuntive a verrà copiata. Questo metodo tenta di rispecchiare il comportamento previsto se un frammento di origine XML o HTML è stato copiato da un documento a un altro (riconoscimento che, nel caso di XML, i due documenti potrebbero avere DTD diverse).  
  
 La tabella seguente descrive il comportamento specifico per ogni <xref:System.Xml.XmlNodeType>.  
  
|XmlNodeType|ImportNode(true)|ImportNode(false)|  
|-----------------|------------------------|-------------------------|  
|Attributo|Il <xref:System.Xml.XmlAttribute.Specified%2A> è impostata su `true` nella classe generata <xref:System.Xml.XmlAttribute>. I discendenti dell'origine `XmlAttribute` vengono importati in modo ricorsivo e i nodi risultanti vengono riassemblati per formare il sottoalbero corrispondente.|Il `deep` parametro non è applicabile a `XmlAttribute` nodi; vengono sempre eseguire i relativi elementi figlio con durante l'importazione.|  
|CData|Copia il nodo, compresi i dati.|Copia il nodo, compresi i dati.|  
|Commento|Copia il nodo, compresi i dati.|Copia il nodo, compresi i dati.|  
|DocumentFragment|Gli elementi discendenti del nodo di origine vengono importati in modo ricorsivo e i nodi risultanti vengono riassemblati per formare il sottoalbero corrispondente.|Un oggetto vuoto <xref:System.Xml.XmlDocumentFragment> viene generato.|  
|DocumentType|Copia il nodo, compresi i dati.*|Copia il nodo, compresi i dati.*|  
|Elemento|Gli elementi discendenti dell'elemento di origine e i relativi nodi attributo specificato vengono importati in modo ricorsivo e i nodi risultanti vengono riassemblati per formare il sottoalbero corrispondente.<br /><br /> Nota: Gli attributi predefiniti non vengono copiati. Se il documento verso il quale avviene l'importazione definisce attributi predefiniti per questo nome di elemento, verranno assegnati tali attributi.|Specificato attributo nodi dell'elemento di origine vengono importati e generato `XmlAttribute` nodi sono collegati all'oggetto generato <xref:System.Xml.XmlElement>.<br /><br /> Nota: Gli attributi predefiniti non vengono copiati. Se il documento verso il quale avviene l'importazione definisce attributi predefiniti per questo nome di elemento, verranno assegnati tali attributi.|  
|EntityReference|Poiché i documenti di origine e di destinazione potrebbero essere le entità definite in modo diverso, questo metodo copia solo il <xref:System.Xml.XmlEntityReference> nodo. Il testo di sostituzione non viene incluso. Se nel documento di destinazione l'entità è definita, viene assegnato il suo valore.|Poiché i documenti di origine e di destinazione potrebbero essere le entità definite in modo diverso, questo metodo copia solo il <xref:System.Xml.XmlEntityReference> nodo. Il testo di sostituzione non viene incluso. Se nel documento di destinazione l'entità è definita, viene assegnato il suo valore.|  
|ProcessingInstruction|Copia il valore di destinazione e dei dati dal nodo importato.|Copia il valore di destinazione e dei dati dal nodo importato.|  
|Testo|Copia il nodo, compresi i dati.|Copia il nodo, compresi i dati.|  
|SignificantWhitespace|Copia il nodo, compresi i dati.|Copia il nodo, compresi i dati.|  
|Whitespace|Copia il nodo, compresi i dati.|Copia il nodo, compresi i dati.|  
|XmlDeclaration|Copia il valore di destinazione e dei dati dal nodo importato.|Copia il valore di destinazione e dei dati dal nodo importato.|  
|Tutti gli altri tipi di nodo.|Questi nodi non possono essere importati.|Questi nodi non possono essere importati.|  
  
 * Anche se non è possono importare nodi DocumentType, un documento può avere un unico DocumentType. Se il documento dispone attualmente di un nodo DocumenType, è necessario rimuoverlo prima di aggiungerne uno nuovo.  
  
   
  
## Examples  
 Nell'esempio seguente importa un nodo libro da un secondo documento XML nel documento XML originale.  
  
 [!code-cpp[Classic WebData XmlDocument.ImportNode Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.ImportNode Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.ImportNode Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.ImportNode Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.ImportNode Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.ImportNode Example/VB/source.vb#1)]  
  
 Nell'esempio viene utilizzato il file, `books.xml`, come input.  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Chiamata di questo metodo su un tipo di nodo che non può essere importato.</exception>
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public override string InnerText { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.InnerText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property InnerText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ InnerText {  void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Genera <see cref="T:System.InvalidOperationException" /> in tutti i casi.</summary>
        <value>Valori del nodo e di tutti i relativi elementi figlio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà non è implementata.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="InnerXml">
      <MemberSignature Language="C#" Value="public override string InnerXml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerXml" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.InnerXml" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property InnerXml As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ InnerXml { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il markup che rappresenta gli elementi figlio del nodo corrente.</summary>
        <value>Markup degli elementi figlio del nodo corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'impostazione di questa proprietà sostituisce gli elementi figlio del nodo con il contenuto analizzato della stringa specificata. L'analisi viene eseguita nel contesto dello spazio dei nomi corrente.  
  
 `InnerXml` Rimuove le dichiarazioni ridondanti dello spazio dei nomi. Di conseguenza, anche in caso di numerose operazioni di taglia e incolla, le dimensioni del documento non aumenteranno a causa di dichiarazioni ridondanti dello spazio dei nomi. Si consideri il seguente documento XSL:  
  
```xml  
<xsl:stylesheet version="1.0"   
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
     <xsl:template match="stock">  
         ...  
     </xsl:template>  
    </xsl:stylesheet>  
```  
  
 Il `InnerXml` proprietà nel nodo del foglio di stile restituisce la stringa seguente:  
  
```xml  
<xsl:template match="stock"   
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform">  
     ...  
    </xsl:template>  
```  
  
 Si noti la dichiarazione dello spazio dei nomi xmlns: xsl aggiuntiva che viene utilizzata per mantenere l'identità del nodo. Se si inserisce nuovamente tale stringa XML interna, verrà nuovamente visualizzato il documento originale. In altre parole, `InnerXml` riconosce che la dichiarazione dello spazio dei nomi xmlns: xsl è ridondante, dato che l'elemento xsl: stylesheet padre dispone già di spazio dei nomi xmlns: xsl e lo rimuova.  
  
 Se si sposta `InnerXml` da un documento senza spazio dei nomi predefinito per un documento con uno spazio dei nomi predefinito, il comportamento è leggermente diverso. Si consideri la stringa XML seguente:  
  
```xml  
<test>  
      <item>123</item>  
    </test>  
```  
  
 `InnerXml` Restituisce una stringa XML semplice senza dichiarazioni dello spazio dei nomi:  
  
```xml  
<item>123</item>  
```  
  
 Se si inserisce la stringa in un documento con uno spazio dei nomi predefinito, ad esempio le operazioni seguenti:  
  
```xml  
<test2 xmlns="urn:1">  
    </test>  
```  
  
 `InnerXml` Analizza la stringa nel contesto e i nuovi nodi, selezionare lo spazio dei nomi urn: 1. Il risultato è simile al seguente:  
  
```xml  
<test2 xmlns="urn:1">  
      <item>123</item>  
    </test>  
```  
  
 A questo punto quando si richiede il `InnerXml` viene nuovamente visualizzato il seguente:  
  
```xml  
<item xmlns="urn:1">123</item>  
```  
  
 Se si desidera in modo esplicito l'elemento inserito per mantenere il fatto che proviene da un documento con nessuno spazio dei nomi, è necessario aggiungere manualmente un xmlns = "" dichiarazione e inserire la stringa risultante:  
  
```xml  
<item xmlns="">123</item>  
```  
  
 L'effetto finale di tutto come indicato di seguito:  
  
1.  Taglia e Incolla `InnerXml` tra i documenti che non utilizzano spazi dei nomi è semplice e non crea ridondanza "xmlns" nelle stringhe.  
  
2.  `InnerXml` consente inoltre di taglia e incolla tra documenti che contengono più di uno spazio dei nomi (fogli di stile XSL).  
  
3.  dichiarazioni xmlns: xsl automaticamente vengono visualizzati nelle stringhe e scompaiono nelle gerarchie di nodi.  
  
4.  Nel caso in cui si stanno spostando `InnerXml` da un documento che nessuno spazio dei nomi predefinito per un documento che include uno spazio dei nomi predefinito, i nuovi nodi rileverà il nuovo spazio dei nomi predefinito.  
  
 Se `InnerXml` è impostato con il testo che contiene i riferimenti alle entità non sono definiti nel documento, la struttura ad albero risultante conterrà nodi EntityReference vuoti.  
  
 Questa proprietà è un'estensione Microsoft di Document Object Model (DOM).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Il formato del file XML specificato al momento dell'impostazione della proprietà non è corretto.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public override bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il nodo corrente è di sola lettura.</summary>
        <value>
          <see langword="true" /> se il nodo corrente è in sola lettura; in caso contrario <see langword="false" />. I nodi <see langword="XmlDocument" /> restituiscono sempre <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un nodo di sola lettura è la cui proprietà, attributi o elementi figlio non può essere modificato. È possibile rimuovere un nodo di sola lettura dall'albero e inserirlo in un'altra posizione.  
  
 Questa proprietà è un'estensione Microsoft di Document Object Model (DOM).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare la proprietà `IsReadOnly`.  
  
 [!code-cpp[Classic WebData XmlDocument.IsReadOnly Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.IsReadOnly Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.IsReadOnly Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.IsReadOnly Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.IsReadOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.IsReadOnly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Carica i dati XML specificati da un oggetto <see cref="T:System.IO.Stream" />, un URL, un oggetto <see cref="T:System.IO.TextReader" /> o un oggetto <see cref="T:System.Xml.XmlReader" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.IO.Stream inStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.IO.Stream inStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.Load(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Load (inStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::IO::Stream ^ inStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inStream">Flusso che contiene il documento XML da caricare.</param>
        <summary>Carica il documento XML dal flusso specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Il `Load` metodo mantiene sempre gli spazi vuoti significativi. Il <xref:System.Xml.XmlDocument.PreserveWhitespace%2A> proprietà determina o meno spazi vuoti non significativi, che contiene spazi vuoti nel contenuto dell'elemento, viene mantenuto. Il valore predefinito è `false`; spazi vuoti nel contenuto dell'elemento non viene mantenuto.  
  
 Se si desidera il verificarsi della convalida, è possibile creare un oggetto di convalida <xref:System.Xml.XmlReader> istanza utilizzando il <xref:System.Xml.XmlReaderSettings> classe e <xref:System.Xml.XmlReader.Create%2A> metodo. Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
 Questo metodo rileva automaticamente il formato della stringa di input XML (ad esempio UTF-8, ANSI e così via). Se l'applicazione deve conoscere il tipo di codifica viene utilizzato per leggere il flusso, è consigliabile utilizzare un <xref:System.Xml.XmlTextReader> per leggere il flusso dell'oggetto e quindi utilizzare il <xref:System.Xml.XmlTextReader.Encoding%2A?displayProperty=nameWithType> proprietà per determinare la codifica. Se è necessario utilizzare un <xref:System.Xml.XmlDocument> oggetto da utilizzare con XML, è possibile utilizzare il <xref:System.Xml.XmlTextReader> oggetto per crearne uno. Per ulteriori informazioni, vedere [lettura di dati XML con XPathDocument e XmlDocument](~/docs/standard/data/xml/reading-xml-data-using-xpathdocument-and-xmldocument.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Si è verificato un errore di analisi o di caricamento nel codice XML. In questo caso, viene generata un'eccezione <see cref="T:System.IO.FileNotFoundException" />.</exception>
        <altmember cref="T:System.Xml.Schema.ValidationEventArgs" />
        <altmember cref="T:System.Xml.Schema.XmlSeverityType" />
        <altmember cref="P:System.Xml.XmlValidatingReader.Schemas" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.IO.TextReader txtReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.IO.TextReader txtReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.Load(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Load (txtReader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::IO::TextReader ^ txtReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txtReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="txtReader">Oggetto <see langword="TextReader" /> usato per inserire i dati XML nel documento.</param>
        <summary>Carica il documento XML dall'oggetto <see cref="T:System.IO.TextReader" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Il `Load` metodo mantiene sempre gli spazi vuoti significativi. Il <xref:System.Xml.XmlDocument.PreserveWhitespace%2A> proprietà determina o meno spazi vuoti non significativi, che contiene spazi vuoti nel contenuto dell'elemento, viene mantenuto. Il valore predefinito è `false`; spazi vuoti nel contenuto dell'elemento non viene mantenuto.  
  
 Se si desidera il verificarsi della convalida, è possibile creare un oggetto di convalida <xref:System.Xml.XmlReader> istanza utilizzando il <xref:System.Xml.XmlReaderSettings> classe e <xref:System.Xml.XmlReader.Create%2A> metodo. Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.IO.StringReader> classi da caricare dati XML in una stringa di `XmlDocument` oggetto.  
  
 [!code-cpp[Classic WebData XmlDocument.CreateElement2 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.CreateElement2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.CreateElement2 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.CreateElement2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.CreateElement2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.CreateElement2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Si è verificato un errore di analisi o di caricamento nel codice XML. In questo caso, il documento rimane vuoto.</exception>
        <altmember cref="T:System.IO.StreamReader" />
        <altmember cref="T:System.Xml.Schema.ValidationEventArgs" />
        <altmember cref="T:System.Xml.Schema.XmlSeverityType" />
        <altmember cref="P:System.Xml.XmlValidatingReader.Schemas" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Load (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::String ^ filename);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">URL del file che contiene il documento XML da caricare. L'URL può essere un file locale o un URL HTTP, ovvero un indirizzo Web.</param>
        <summary>Carica il documento XML dall'URL specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Il `Load` metodo mantiene sempre gli spazi vuoti significativi. Il <xref:System.Xml.XmlDocument.PreserveWhitespace%2A> proprietà determina o meno spazi vuoti non significativi, che contiene spazi vuoti nel contenuto dell'elemento, viene mantenuto. Il valore predefinito è `false`; spazi vuoti nel contenuto dell'elemento non viene mantenuto.  
  
 Se si desidera il verificarsi della convalida, è possibile creare un oggetto di convalida <xref:System.Xml.XmlReader> istanza utilizzando il <xref:System.Xml.XmlReaderSettings> classe e <xref:System.Xml.XmlReader.Create%2A> metodo. Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Si è verificato un errore di analisi o di caricamento nel codice XML. In questo caso, viene generata un'eccezione <see cref="T:System.IO.FileNotFoundException" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="filename" /> è una stringa di lunghezza zero, contiene solo spazi vuoti o contiene uno o più caratteri non validi definiti da <see cref="F:System.IO.Path.InvalidPathChars" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="filename" /> è <see langword="null" />.</exception>
        <exception cref="T:System.IO.PathTooLongException">Il percorso specificato, il nome file o entrambi superano la lunghezza massima definita dal sistema.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Il percorso specificato non è valido, ad esempio si trova in un'unità non mappata.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O durante l'apertura del file.</exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <paramref name="filename" /> specifica un file di sola lettura.  - oppure - L'operazione non è supportata sulla piattaforma corrente.  - oppure - <paramref name="filename" /> ha specificato una directory.  - oppure - Il chiamante non ha l'autorizzazione richiesta.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Il file specificato in <paramref name="filename" /> non è stato trovato.</exception>
        <exception cref="T:System.NotSupportedException">Il formato di <paramref name="filename" /> non è valido.</exception>
        <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
        <altmember cref="T:System.Xml.Schema.ValidationEventArgs" />
        <altmember cref="T:System.Xml.Schema.XmlSeverityType" />
        <altmember cref="P:System.Xml.XmlValidatingReader.Schemas" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Load (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Oggetto <see langword="XmlReader" /> usato per inserire i dati XML nel documento.</param>
        <summary>Carica il documento XML dall'oggetto <see cref="T:System.Xml.XmlReader" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Il `Load` metodo mantiene sempre gli spazi vuoti significativi. Il <xref:System.Xml.XmlDocument.PreserveWhitespace%2A> proprietà determina o meno spazi vuoti non significativi, che contiene spazi vuoti nel contenuto dell'elemento, viene mantenuto. Il valore predefinito è `false`; spazi vuoti nel contenuto dell'elemento non viene mantenuto.  
  
 Se il lettore si trova nello stato iniziale (<xref:System.Xml.XmlReader.ReadState%2A> = ReadState. Initial), `Load` utilizza l'intero contenuto del lettore e compilerà il DOM dagli elementi rilevati.  
  
 Se il lettore è già posizionato su un nodo alla profondità "n", questo metodo carica tale nodo e tutti i nodi di pari livello successivi fino al tag di fine che chiude il livello "n". Questa operazione ha i seguenti risultati.  
  
 Se il nodo corrente e elementi di pari livello simile al seguente:  
  
```xml  
<!--comment--><element1>one</element1><element2>two</element2>  
```  
  
 `Load` genera un'eccezione perché un documento non può disporre di due elementi di primo livello. Se il nodo corrente e elementi di pari livello simile al seguente:  
  
```xml  
<!--comment--><?process instruction?><!--comment--></endtag>  
```  
  
 `Load` ha esito positivo, ma è un struttura ad albero DOM incompleto, in quanto è presente alcun elemento di livello radice. Prima di salvare il documento, è necessario aggiungere un elemento di primo livello, in caso contrario <xref:System.Xml.XmlDocument.Save%2A> genererà un'eccezione.  
  
 Se il lettore è posizionato su un nodo foglia non valido per il livello di radice di un documento, ad esempio uno spazio vuoto o un nodo attributo, il lettore continuerà a leggere fino a quando non è posizionato su un nodo che può essere utilizzato per la radice. Il caricamento del documento avverrà a partire da questo punto.  
  
 Se si desidera il verificarsi della convalida, è possibile creare un oggetto di convalida <xref:System.Xml.XmlReader> istanza utilizzando il <xref:System.Xml.XmlReaderSettings> classe e <xref:System.Xml.XmlReader.Create%2A> metodo. Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
   
  
## Examples  
 Nell'esempio seguente viene caricato l'ultimo nodo libro del `books.xml` file nel documento XML.  
  
 [!code-cpp[Classic WebData XmlDocument.Load2 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.Load2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.Load2 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.Load2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.Load2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.Load2 Example/VB/source.vb#1)]  
  
 Nell'esempio viene utilizzato il file, `books.xml`, come input.  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Si è verificato un errore di analisi o di caricamento nel codice XML. In questo caso, il documento rimane vuoto.</exception>
        <altmember cref="T:System.Xml.Schema.ValidationEventArgs" />
        <altmember cref="T:System.Xml.Schema.XmlSeverityType" />
        <altmember cref="P:System.Xml.XmlValidatingReader.Schemas" />
      </Docs>
    </Member>
    <Member MemberName="LoadXml">
      <MemberSignature Language="C#" Value="public virtual void LoadXml (string xml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadXml(string xml) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.LoadXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadXml (xml As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadXml(System::String ^ xml);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xml">Stringa che contiene il documento XML da caricare.</param>
        <summary>Carica il documento XML dalla stringa specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita il `LoadXml` metodo non vengono mantenuti gli spazi vuoti o uno spazio vuoto significativo.  
  
 Questo metodo analizza i DTD, ma non esegue la convalida di DTD o nello Schema. Se si desidera il verificarsi della convalida, è possibile creare un oggetto di convalida <xref:System.Xml.XmlReader> istanza utilizzando il <xref:System.Xml.XmlReaderSettings> classe e <xref:System.Xml.XmlReader.Create%2A> metodo. Per altre informazioni, vedere la sezione Note della pagina di riferimento <xref:System.Xml.XmlReader>.  
  
 Se si desidera caricare da un <xref:System.IO.Stream>, <xref:System.String>, <xref:System.IO.TextReader>, o <xref:System.Xml.XmlReader>, utilizzare il metodo Load anziché di questo metodo.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
   
  
## Examples  
 Nell'esempio seguente XML viene caricato in un `XmlDocument` dell'oggetto e salvato in un file.  
  
 [!code-cpp[Classic WebData XmlDocument.LoadXml Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.LoadXml Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.LoadXml Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.LoadXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.LoadXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.LoadXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Si è verificato un errore di analisi o di caricamento nel codice XML. In questo caso, il documento rimane vuoto.</exception>
        <altmember cref="P:System.Xml.XmlDocument.PreserveWhitespace" />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome locale del nodo.</summary>
        <value>Per i nodi <see langword="XmlDocument" />, il nome locale è #document.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome locale restituito varia a seconda di <xref:System.Xml.XmlDocument.NodeType%2A> del nodo. Per una tabella che descrive il nome locale restituito per ogni tipo di nodo, vedere il <xref:System.Xml.XmlNode.LocalName%2A> proprietà la <xref:System.Xml.XmlNode> classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome completo del nodo.</summary>
        <value>Per i nodi <see langword="XmlDocument" />, il nome è #document.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome restituito dipende il <xref:System.Xml.XmlDocument.NodeType%2A> del nodo. Per una tabella che descrive il nome restituito per ogni tipo di nodo, vedere il <xref:System.Xml.XmlNode.Name%2A> proprietà la <xref:System.Xml.XmlNode> classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Xml.XmlNameTable" /> associato all'implementazione.</summary>
        <value>Oggetto <see langword="XmlNameTable" /> che consente di ottenere la versione atomizzata di una stringa all'interno del documento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni `XmlDocument` oggetto ha un <xref:System.Xml.NameTable> oggetto. I nomi degli elementi e attributi sono archiviati nel `NameTable` come stringhe atomizzate. Ciò significa che anche se un nome viene fatto riferimento nel documento più volte viene memorizzato una sola volta nel `NameTable`. Ad esempio, se il documento include più elementi con il nome "Customer", `NameTable` restituisce lo stesso oggetto ogni volta che riceve una richiesta per tale nome. Di conseguenza, la scrittura di codice utilizzando i confronti degli oggetti in tali stringhe anziché i confronti di stringa più costosi.  
  
 Per ulteriori informazioni sulle stringhe suddivise in elementi di base, vedere <xref:System.Xml.XmlNameTable>.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="NodeChanged">
      <MemberSignature Language="C#" Value="public event System.Xml.XmlNodeChangedEventHandler NodeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.XmlNodeChangedEventHandler NodeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlDocument.NodeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NodeChanged As XmlNodeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::XmlNodeChangedEventHandler ^ NodeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'oggetto <see cref="P:System.Xml.XmlNode.Value" /> di un nodo appartenente a questo documento è stato modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento si applica solo ai nodi che hanno un valore.  
  
 In questo caso, sono inclusi tutti i nodi creati da questo documento, inseriti nel documento, o meno.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNodeChangedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="NodeChanging">
      <MemberSignature Language="C#" Value="public event System.Xml.XmlNodeChangedEventHandler NodeChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.XmlNodeChangedEventHandler NodeChanging" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlDocument.NodeChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NodeChanging As XmlNodeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::XmlNodeChangedEventHandler ^ NodeChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'oggetto <see cref="P:System.Xml.XmlNode.Value" /> di un nodo appartenente a questo documento sta per essere modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento consente all'utente di eseguire un controllo aggiuntivo e, se necessario, genera un'eccezione per arrestare l'operazione. Se viene generata un'eccezione di `XmlDocument` restituisce lo stato originale. Questo evento si applica solo ai nodi che hanno un valore.  
  
 In questo caso, sono inclusi tutti i nodi creati da questo documento, inseriti nel documento, o meno.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNodeChangedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="NodeInserted">
      <MemberSignature Language="C#" Value="public event System.Xml.XmlNodeChangedEventHandler NodeInserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.XmlNodeChangedEventHandler NodeInserted" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlDocument.NodeInserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NodeInserted As XmlNodeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::XmlNodeChangedEventHandler ^ NodeInserted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un nodo appartenente al documento è stato inserito in un altro nodo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In questo caso, sono inclusi tutti i nodi creati da questo documento, inseriti nel documento, o meno.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNodeChangedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="NodeInserting">
      <MemberSignature Language="C#" Value="public event System.Xml.XmlNodeChangedEventHandler NodeInserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.XmlNodeChangedEventHandler NodeInserting" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlDocument.NodeInserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NodeInserting As XmlNodeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::XmlNodeChangedEventHandler ^ NodeInserting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un nodo appartenente al documento sta per essere inserito in un altro nodo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento consente all'utente di eseguire un controllo aggiuntivo e, se necessario, genera un'eccezione per arrestare l'operazione. Se viene generata un'eccezione di `XmlDocument` restituisce lo stato originale.  
  
 In questo caso, sono inclusi tutti i nodi creati da questo documento, inseriti nel documento, o meno.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNodeChangedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="NodeRemoved">
      <MemberSignature Language="C#" Value="public event System.Xml.XmlNodeChangedEventHandler NodeRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.XmlNodeChangedEventHandler NodeRemoved" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlDocument.NodeRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NodeRemoved As XmlNodeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::XmlNodeChangedEventHandler ^ NodeRemoved;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un nodo appartenente al documento è stato rimosso dal relativo nodo padre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In questo caso, sono inclusi tutti i nodi creati da questo documento, inseriti nel documento, o meno.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNodeChangedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="NodeRemoving">
      <MemberSignature Language="C#" Value="public event System.Xml.XmlNodeChangedEventHandler NodeRemoving;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.XmlNodeChangedEventHandler NodeRemoving" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlDocument.NodeRemoving" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NodeRemoving As XmlNodeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::XmlNodeChangedEventHandler ^ NodeRemoving;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un nodo appartenente al documento sta per essere rimosso dal documento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento consente all'utente di eseguire un controllo aggiuntivo e, se necessario, genera un'eccezione per arrestare l'operazione. Se viene generata un'eccezione di `XmlDocument` restituisce lo stato originale.  
  
 In questo caso, sono inclusi tutti i nodi creati da questo documento, inseriti nel documento, o meno.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNodeChangedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il tipo di nodo corrente.</summary>
        <value>Tipo di nodo. Per i nodi <see langword="XmlDocument" />, il valore è XmlNodeType.Document.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="OwnerDocument">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlDocument OwnerDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDocument OwnerDocument" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.OwnerDocument" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property OwnerDocument As XmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlDocument ^ OwnerDocument { System::Xml::XmlDocument ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Xml.XmlDocument" /> a cui appartiene il nodo corrente.</summary>
        <value>Per i nodi <see langword="XmlDocument" />, questa proprietà restituisce sempre <see langword="null" />. La proprietà <see cref="P:System.Xml.XmlDocument.NodeType" /> equivale a XmlNodeType.Document.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentNode">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode ParentNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNode ParentNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.ParentNode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ParentNode As XmlNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNode ^ ParentNode { System::Xml::XmlNode ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nodo padre del nodo, per i nodi che hanno elementi padre.</summary>
        <value>Restituisce sempre <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveWhitespace">
      <MemberSignature Language="C#" Value="public bool PreserveWhitespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreserveWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.PreserveWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public Property PreserveWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PreserveWhitespace { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se preservare lo spazio vuoto nel contenuto dell'elemento.</summary>
        <value>
          <see langword="true" /> per preservare lo spazio vuoto; in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà determina come viene gestito lo spazio vuoto durante il caricamento e processo di salvataggio.  
  
 Se `PreserveWhitespace` è `true` prima <xref:System.Xml.XmlDocument.Load%2A> o <xref:System.Xml.XmlDocument.LoadXml%2A> viene chiamato, nodi con spazi vuoti vengono mantenuti; in caso contrario, se questa proprietà è `false`, spazi vuoti significativi vengono mantenuti, non è lo spazio vuoto.  
  
 Se `PreserveWhitespace` è `true` prima <xref:System.Xml.XmlDocument.Save%2A> viene chiamato, spazi vuoti nel documento viene mantenuto nell'output; in caso contrario, se questa proprietà è `false`, `XmlDocument` rientro automatico dell'output.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come rimuovere spazi vuoti da un file.  
  
 [!code-cpp[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.PreserveWhitespace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.PreserveWhitespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.PreserveWhitespace Example/VB/source.vb#1)]  
  
 Nell'esempio viene utilizzato il file `book.xml` come input.  
  
 [!code-xml[Classic WebData XmlDocument.PreserveWhitespace Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDocument.PreserveWhitespace Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode ReadNode (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode ReadNode(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadNode (reader As XmlReader) As XmlNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xml::XmlNode ^ ReadNode(System::Xml::XmlReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">XML di origine</param>
        <summary>Crea un oggetto <see cref="T:System.Xml.XmlNode" /> in base alle informazioni contenute in <see cref="T:System.Xml.XmlReader" />. Il lettore deve essere posizionato su un nodo o un attributo.</summary>
        <returns>Nuovo oggetto <see langword="XmlNode" /> oppure <see langword="null" /> se non esistono altri nodi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legge uno `XmlNode` dal lettore specificato e posiziona il lettore sul nodo successivo. Questo metodo crea il tipo di `XmlNode` corrispondenza il <xref:System.Xml.XmlNode.NodeType%2A> su cui è attualmente posizionato il lettore. (Se il lettore si trova nello stato iniziale, `ReadNode` fa avanzare il reader sul primo nodo e quindi agisce su tale nodo.)  
  
 Se il lettore è posizionato all'inizio di un elemento, `ReadNode` leggerà tutti gli attributi ed eventuali nodi figlio, fino a e tra il tag di fine del nodo corrente. Il `XmlNode` restituito contiene la sottostruttura ad albero che rappresenta tutte le operazioni di lettura. Il lettore è posizionato immediatamente dopo il tag di fine.  
  
 `ReadNode` può anche leggere gli attributi, ma in questo caso non fa avanzare il lettore all'attributo successivo. In questo modo è possibile scrivere il codice c# seguente:  
  
```csharp  
XmlDocument doc = new XmlDocument();  
while (reader.MoveToNextAttribute())  
{  
  XmlNode a = doc.ReadNode(reader);  
  // Do some more processing.  
}  
```  
  
 `ReadNode` Utilizzare il valore dell'attributo, ovvero dopo la chiamata `ReadNode` su un attributo, <xref:System.Xml.XmlReader.ReadAttributeValue%2A?displayProperty=nameWithType> restituisce `false`.  
  
   
  
## Examples  
 L'esempio seguente usa `ReadNode` per creare un nuovo nodo e quindi inserisce il nuovo nodo nel documento.  
  
 [!code-cpp[Classic WebData XmlDocument.ReadNode Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.ReadNode Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.ReadNode Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.ReadNode Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.ReadNode Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.ReadNode Example/VB/source.vb#1)]  
  
 Nell'esempio viene utilizzato il file, `cd.xml`, come input.  
  
 [!code-xml[Classic WebData XmlDocument.ReadNode Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlDocument.ReadNode Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">Il visualizzatore è posizionato su un tipo di nodo che non esegue la conversione in un nodo DOM valido, ad esempio EndElement o EndEntity.</exception>
        <block subset="none" type="overrides">
          <para>Questo metodo presenta una richiesta di ereditarietà. Attendibilità totale è necessario eseguire l'override di <see langword="ReadNode" /> metodo.  Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).</para>
        </block>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Salva il documento XML nella posizione specificata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual void Save (System.IO.Stream outStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.IO.Stream outStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.Save(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Save (outStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save(System::IO::Stream ^ outStream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="outStream">Flusso in cui salvare.</param>
        <summary>Salva il documento XML nel flusso specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spazio vuoto viene conservato solo se <xref:System.Xml.XmlDocument.PreserveWhitespace%2A> è impostato su `true`.  
  
 XmlDeclaration corrente `XmlDocument` oggetto determina l'attributo di codifica del documento salvato. Il valore dell'attributo di codifica viene recuperato dal <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=nameWithType> proprietà. Se il `XmlDocument` does non dispone di una XmlDeclaration o se XmlDeclaration non dispone di un attributo di codifica, il documento salvato non disporrà di uno di.  
  
 Quando viene salvato il documento, gli attributi xmlns vengono generati per mantenere l'identità del nodo (locale nome + spazio dei nomi URI) corretto. Ad esempio, il codice c# seguente  
  
```csharp  
XmlDocument doc = new XmlDocument();  
doc.AppendChild(doc.CreateElement("item","urn:1"));  
doc.Save(Console.Out);  
```  
  
 Genera il seguente attributo xmls `<item xmls="urn:1"/>`.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
 Si noti che solo il <xref:System.Xml.XmlDocument.Save%2A> metodo impone un documento XML ben formato. Tutti gli altri `Save` overload garantiscono solo un frammento ben formato.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">L'operazione non genera un documento XML ben formato (ad esempio, nessun elemento documento o dichiarazioni XML duplicate).</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual void Save (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.Save(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Save (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save(System::IO::TextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see langword="TextWriter" /> in cui salvare.</param>
        <summary>Salva il documento XML nell'oggetto <see cref="T:System.IO.TextWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La codifica sul `TextWriter` determina la codifica scritta (la codifica del nodo XmlDeclaration viene sostituita dalla codifica del `TextWriter`). Se non è stata specificata nella codifica il `TextWriter`, `XmlDocument` viene salvato senza un attributo di codifica.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
 Si noti che solo il <xref:System.Xml.XmlDocument.Save%2A> metodo impone un documento XML ben formato. Tutti gli altri `Save` overload garantiscono solo un frammento ben formato.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">L'operazione non genera un documento XML ben formato (ad esempio, nessun elemento documento o dichiarazioni XML duplicate).</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual void Save (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Save (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save(System::String ^ filename);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Percorso del file in cui salvare il documento.</param>
        <summary>Salva il documento XML nel file specificato. Se il file specificato esiste già, il metodo lo sovrascrive.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spazi vuoti vengono mantenuti nell'output del file solo se <xref:System.Xml.XmlDocument.PreserveWhitespace%2A> è impostato su `true`.  
  
 XmlDeclaration corrente `XmlDocument` oggetto determina l'attributo di codifica del documento salvato. Il valore dell'attributo di codifica viene recuperato dal <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=nameWithType> proprietà. Se il `XmlDocument` does non dispone di una XmlDeclaration o se XmlDeclaration non dispone di un attributo di codifica, il documento salvato non disporrà di uno di.  
  
 Quando viene salvato il documento, gli attributi xmlns vengono generati per mantenere l'identità del nodo (locale nome + spazio dei nomi URI) corretto. Ad esempio, il codice c# seguente  
  
```csharp  
XmlDocument doc = new XmlDocument();  
doc.AppendChild(doc.CreateElement("item","urn:1"));  
doc.Save(Console.Out);  
```  
  
 Genera il seguente attributo xmls `<item xmls="urn:1"/>`.  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
 Si noti che solo il <xref:System.Xml.XmlDocument.Save%2A> metodo impone un documento XML ben formato. Tutti gli altri `Save` overload garantiscono solo un frammento ben formato.  
  
   
  
## Examples  
 Nell'esempio seguente viene caricato in un oggetto XmlDocument, modifica e infine la salva in un file denominato data.xml.  
  
 [!code-cpp[Classic WebData XmlDocument.Save Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.Save Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.Save Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.Save Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.Save Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.Save Example/VB/source.vb#1)]  
  
 Il file data.xml conterrà il codice XML seguente: `<item><name>wrench</name><price>10.95</price></item>`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">L'operazione non genera un documento XML ben formato (ad esempio, nessun elemento documento o dichiarazioni XML duplicate).</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual void Save (System.Xml.XmlWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.Xml.XmlWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Save (w As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Save(System::Xml::XmlWriter ^ w);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="w">Oggetto <see langword="XmlWriter" /> in cui salvare.</param>
        <summary>Salva il documento XML nell'oggetto <see cref="T:System.Xml.XmlWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Spazio vuoto viene conservato solo se <xref:System.Xml.XmlDocument.PreserveWhitespace%2A> è impostato su `true`.  
  
 La codifica sul `XmlWriter` determina la codifica scritta (la codifica del nodo XmlDeclaration viene sostituita dalla codifica del `XmlWriter`). Se non è stata specificata nella codifica il `XmlWriter`, `XmlDocument` viene salvato senza un attributo di codifica.  
  
 Quando viene salvato il documento, gli attributi xmlns vengono generati per mantenere l'identità del nodo (LocalName e NamespaceURI) in modo corretto. Ad esempio, il codice c# seguente  
  
```csharp  
XmlDocument doc = new XmlDocument();  
doc.AppendChild(doc.CreateElement("item","urn:1"));  
doc.Save(Console.Out);  
```  
  
 Genera l'errore di questo attributo XML:  
  
```xml  
<item  
    xmls="urn:1"/>  
```  
  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model).  
  
 Si noti che solo il <xref:System.Xml.XmlDocument.Save%2A> metodo impone un documento XML ben formato. Tutti gli altri `Save` overload garantiscono solo un frammento ben formato.  
  
   
  
## Examples  
 Nell'esempio seguente XML viene caricato in un `XmlDocument` dell'oggetto e salvato in un file.  
  
 [!code-cpp[Classic WebData XmlDocument.LoadXml Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.LoadXml Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.LoadXml Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.LoadXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.LoadXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.LoadXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">L'operazione non genera un documento XML ben formato (ad esempio, nessun elemento documento o dichiarazioni XML duplicate).</exception>
        <altmember cref="P:System.Xml.XmlTextWriter.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="SchemaInfo">
      <MemberSignature Language="C#" Value="public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.IXmlSchemaInfo SchemaInfo" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.SchemaInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SchemaInfo As IXmlSchemaInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::Schema::IXmlSchemaInfo ^ SchemaInfo { System::Xml::Schema::IXmlSchemaInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce il valore PSVI (Post-Schema-Validation-Infoset) del nodo.</summary>
        <value>Oggetto <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> che rappresenta il PSVI del nodo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il contenuto PSVI di questa proprietà viene impostato dopo il nodo è stato convalidato.  
  
 Questa proprietà è un'estensione Microsoft di Document Object Model (DOM).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaSet Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Property Schemas As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaSet ^ Schemas { System::Xml::Schema::XmlSchemaSet ^ get(); void set(System::Xml::Schema::XmlSchemaSet ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto <see cref="T:System.Xml.Schema.XmlSchemaSet" /> associato all'oggetto <see cref="T:System.Xml.XmlDocument" />.</summary>
        <value>Oggetto <see cref="T:System.Xml.Schema.XmlSchemaSet" /> che contiene gli schemi XSD (XML Schema Definition Language) associati a <see cref="T:System.Xml.XmlDocument" />; in caso contrario, un oggetto <see cref="T:System.Xml.Schema.XmlSchemaSet" /> vuoto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli schemi contenuti in un <xref:System.Xml.Schema.XmlSchemaSet> oggetto associato un <xref:System.Xml.XmlDocument> oggetto vengono utilizzati per la convalida quando il <xref:System.Xml.XmlDocument.Validate%2A> metodo di un <xref:System.Xml.XmlDocument> viene eseguita.  
  
 Quando un <xref:System.Xml.XmlDocument> oggetto viene inizializzato con dati XML da un <xref:System.Xml.XmlReader> oggetto, il <xref:System.Xml.Schema.XmlSchemaSet> oggetto viene caricato dal <xref:System.Xml.XmlReaderSettings.Schemas%2A> proprietà del <xref:System.Xml.XmlReader> oggetto.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Xml.XmlDocument.Validate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Convalida l'oggetto <see cref="T:System.Xml.XmlDocument" /> sulla base degli schemi XSD (XML Schema Definition Language) contenuti nella proprietà <see cref="P:System.Xml.XmlDocument.Schemas" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Validate(class System.Xml.Schema.ValidationEventHandler validationEventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::Xml::Schema::ValidationEventHandler ^ validationEventHandler);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
      </Parameters>
      <Docs>
        <param name="validationEventHandler">Oggetto <see cref="T:System.Xml.Schema.ValidationEventHandler" /> che riceve le informazioni sugli avvisi e gli errori relativi alla convalida degli schemi.</param>
        <summary>Convalida l'oggetto <see cref="T:System.Xml.XmlDocument" /> sulla base degli schemi XSD (XML Schema Definition Language) contenuti nella proprietà <see cref="P:System.Xml.XmlDocument.Schemas" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.XmlDocument.Validate%2A> metodo convalida i dati XML nel <xref:System.Xml.XmlDocument> sulla base degli schemi contenuti nel <xref:System.Xml.XmlDocument.Schemas%2A> proprietà. Il <xref:System.Xml.XmlDocument.Validate%2A> esegue aumentare l'infoset. In particolare, dopo la convalida ha esito positivo, vengono applicati i valori predefiniti dello schema, i valori di testo vengono convertiti in valori di tipo atomic in base alle esigenze e informazioni sui tipi vengono associate agli elementi delle informazioni convalidate. Il risultato è un albero secondario XML in precedenza non tipizzato nel <xref:System.Xml.XmlDocument> sostituito con un sottoalbero tipizzato.  
  
 Di seguito sono riportate note importanti relative all'utilizzo di <xref:System.Xml.XmlDocument.Validate%2A> metodo.  
  
-   Hint di posizione come `xsi:schemaLocation` o `xsi:noNamespaceSchemaLocation` vengono ignorati.  
  
-   Gli schemi inline vengono ignorati.  
  
-   Se si verificano errori di convalida dello schema durante la convalida di <xref:System.Xml.XmlDocument> viene parzialmente convalidata e alcuni nodi con informazioni sul tipo corretto e altre senza.  
  
-   Il processo di convalida include la verifica dell'univocità e riferimento dei vincoli (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, e `xs:unique`).  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo <xref:System.Xml.XmlDocument.Validate%2A>. Nell'esempio viene creato un <xref:System.Xml.XmlDocument> contenente uno schema XSD associato utilizzando il <xref:System.Xml.XmlReaderSettings> e <xref:System.Xml.XmlReader> oggetti. Nell'esempio viene utilizzata la <xref:System.Xml.XPath.XPathNavigator> classe in modo errato, modificare il valore tipizzato di un elemento nel documento XML, generazione di un errore di convalida dello schema.  
  
 [!code-cpp[XPathValidation#1](~/samples/snippets/cpp/VS_Snippets_Data/XPathValidation/CPP/XPathValidation.cpp#1)]
 [!code-csharp[XPathValidation#1](~/samples/snippets/csharp/VS_Snippets_Data/XPathValidation/CS/XPathValidation.cs#1)]
 [!code-vb[XPathValidation#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XPathValidation/VB/XPathValidation.vb#1)]  
  
 Nell'esempio viene utilizzato il `contosoBooks.xml` e `contosoBooks.xsd` come input i file.  
  
 [!code-xml[XPathXMLExamples#2](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xml#2)]  
  
 [!code-xml[XPathXMLExamples#3](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/contosoBooks.xsd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Si è verificato un evento di convalida degli schemi e non è stato specificato alcun oggetto <see cref="T:System.Xml.Schema.ValidationEventHandler" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler, System.Xml.XmlNode nodeToValidate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Validate(class System.Xml.Schema.ValidationEventHandler validationEventHandler, class System.Xml.XmlNode nodeToValidate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::Xml::Schema::ValidationEventHandler ^ validationEventHandler, System::Xml::XmlNode ^ nodeToValidate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="validationEventHandler" Type="System.Xml.Schema.ValidationEventHandler" />
        <Parameter Name="nodeToValidate" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="validationEventHandler">Oggetto <see cref="T:System.Xml.Schema.ValidationEventHandler" /> che riceve le informazioni sugli avvisi e gli errori relativi alla convalida degli schemi.</param>
        <param name="nodeToValidate">Oggetto <see cref="T:System.Xml.XmlNode" /> creato da un oggetto <see cref="T:System.Xml.XmlDocument" /> da convalidare.</param>
        <summary>Convalida l'oggetto <see cref="T:System.Xml.XmlNode" /> specificato sulla base degli schemi XSD (XML Schema Definition Language) nella proprietà <see cref="P:System.Xml.XmlDocument.Schemas" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.XmlDocument.Validate%2A> metodo convalida i dati XML nel <xref:System.Xml.XmlNode> oggetto sulla base degli schemi contenuti nella <xref:System.Xml.XmlDocument.Schemas%2A> proprietà. Il <xref:System.Xml.XmlDocument.Validate%2A> esegue aumentare l'infoset. In particolare, dopo la convalida ha esito positivo, vengono applicati i valori predefiniti dello schema, i valori di testo vengono convertiti in valori di tipo atomic in base alle esigenze e informazioni sui tipi vengono associate agli elementi delle informazioni convalidate. Il risultato è un albero secondario XML in precedenza non tipizzato nel <xref:System.Xml.XmlDocument> sostituito con un sottoalbero tipizzato.  
  
 Di seguito sono riportate note importanti relative all'utilizzo di <xref:System.Xml.XmlDocument.Validate%2A> metodo.  
  
-   Hint di posizione come `xsi:schemaLocation` o `xsi:noNamespaceSchemaLocation` vengono ignorati.  
  
-   Gli schemi inline vengono ignorati.  
  
-   Se si verificano errori di convalida dello schema durante la convalida di <xref:System.Xml.XmlDocument> viene parzialmente convalidata e alcuni nodi con informazioni sul tipo corretto e altre senza.  
  
 Se il nodo da convalidare è il nodo radice, il processo di convalida include la verifica dell'univocità e riferimento dei vincoli (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, e `xs:unique`); in caso contrario, riferimento e univocità i vincoli vengono omessi.  
  
   
  
## Examples  
 Per un esempio del <xref:System.Xml.XmlDocument.Validate%2A> metodo, vedere il <xref:System.Xml.XmlDocument.Validate%2A> metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro dell'oggetto <see cref="T:System.Xml.XmlNode" /> non è stato creato da una classe <see cref="T:System.Xml.XmlDocument" />.</exception>
        <exception cref="T:System.InvalidOperationException">Il parametro dell'oggetto <see cref="T:System.Xml.XmlNode" /> non è un elemento, un attributo, un frammento di documento o il nodo radice.</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Si è verificato un evento di convalida degli schemi e non è stato specificato alcun oggetto <see cref="T:System.Xml.Schema.ValidationEventHandler" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteContentTo">
      <MemberSignature Language="C#" Value="public override void WriteContentTo (System.Xml.XmlWriter xw);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteContentTo(class System.Xml.XmlWriter xw) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteContentTo (xw As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteContentTo(System::Xml::XmlWriter ^ xw);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xw" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="xw">Oggetto <see langword="XmlWriter" /> in cui salvare.</param>
        <summary>Salva tutti gli elementi figlio del nodo <see langword="XmlDocument" /> nell'oggetto <see cref="T:System.Xml.XmlWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model). È funzionalmente equivalente al <xref:System.Xml.XmlDocument.InnerXml%2A> proprietà.  
  
 Il <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=nameWithType> proprietà determina la codifica da scrivere. Se il `Encoding` proprietà non dispone di un valore, il `XmlDocument` verrà scritto senza un attributo di codifica.  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare il documento sullo schermo.  
  
 [!code-cpp[Classic WebData XmlDocument.WriteContentTo Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.WriteContentTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.WriteContentTo Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.WriteContentTo Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.WriteContentTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.WriteContentTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteTo (w As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteTo(System::Xml::XmlWriter ^ w);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="w">Oggetto <see langword="XmlWriter" /> in cui salvare.</param>
        <summary>Salva il nodo <see langword="XmlDocument" /> nell'oggetto <see cref="T:System.Xml.XmlWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un'estensione Microsoft per il provider di servizi Internet (DOM, Document Object Model). È funzionalmente equivalente al <xref:System.Xml.XmlNode.OuterXml%2A> proprietà.  
  
 Il <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=nameWithType> proprietà determina la codifica da scrivere. Se il `Encoding` proprietà non dispone di un valore, il `XmlDocument` verrà scritto senza un attributo di codifica.  
  
   
  
## Examples  
 Nell'esempio seguente consente di visualizzare il documento sullo schermo.  
  
 [!code-cpp[Classic WebData XmlDocument.WriteTo Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlDocument.WriteTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlDocument.WriteTo Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlDocument.WriteTo Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlDocument.WriteTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlDocument.WriteTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlDocument.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Imposta l'oggetto <see cref="T:System.Xml.XmlResolver" /> da usare per risolvere risorse esterne.</summary>
        <value>Oggetto <see langword="XmlResolver" /> da usare.  Nella versione 1.1 di .NET Framework, per specificare <see langword="XmlResolver" />, è necessario che il chiamante sia completamente attendibile.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `XmlResolver` può essere utilizzato per caricare le definizioni DTD o espandere i riferimenti alle entità. Utilizzando il <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType> proprietà, è possibile impostare le credenziali per il `XmlResolver` per accedere alle risorse archiviati in una risorsa di rete sicura.  
  
-   Se il documento non è stato caricato tramite un <xref:System.Xml.XmlReader> (ovvero, se è stato caricato mediante un flusso, file e così via) di `XmlResolver` sul `XmlDocument` viene sempre utilizzato.  
  
-   Se il documento è stato caricato con un <xref:System.Xml.XmlTextReader>, la risoluzione per il `XmlTextReader` viene utilizzato per risolvere i riferimenti DTD nel nodo DocumentType. Risoluzione per il `XmlDocument` viene utilizzato per espandere i riferimenti a entità.  
  
-   Se il documento è stato caricato con un <xref:System.Xml.XmlValidatingReader>, la risoluzione per il `XmlDocument` non viene mai utilizzato.  
  
-   Se il documento è stato caricato con una classe che estende `XmlReader` e `XmlReader` non è possibile risolvere le entità (<xref:System.Xml.XmlReader.CanResolveEntity%2A> restituisce `false`), il `XmlResolver` sul `XmlDocument` viene utilizzato per risolvere eventuali riferimenti inclusi nel nodo DocumentType e per espandere i riferimenti a entità.  
  
> [!NOTE]
>  Se il `XmlDocument` viene caricato usando un <xref:System.Xml.XmlReader> che aveva un `XmlResolver` impostata su, il `XmlResolver` sul `XmlReader` non memorizzati nella cache il `XmlDocument` dopo <xref:System.Xml.XmlDocument.Load%2A> viene completata.  
  
 Nella versione 1.1 di.NET Framework, se questa proprietà non è impostata, il livello di attendibilità dell'applicazione determina il comportamento predefinito.  
  
 `Fully trusted code:` Il documento viene utilizzato un valore predefinito <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se è necessaria l'autenticazione per accedere a una risorsa di rete, utilizzare il `XmlResolver` proprietà per specificare un `XmlResolver` con le credenziali necessarie.  
  
 `Semi-trusted code:` Il `XmlResolver` è impostata su `null`. Risorse esterne non vengono risolti.  
  
 Per ulteriori informazioni sulla sicurezza e `XmlResolver` proprietà, vedere [risolvere risorse esterne](~/docs/standard/data/xml/resolving-external-resources.md).  
  
 Questa proprietà è un'estensione Microsoft di Document Object Model (DOM).  
  
   
  
## Examples  
 Nell'esempio seguente carica un documento XML che include un riferimento a un file DTD. Il `XmlResolver` proprietà viene utilizzata per impostare le credenziali necessarie per accedere alla risorsa di rete.  
  
 [!code-cpp[XmlDocument.XmlResolver#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlDocument.XmlResolver/CPP/docresolver.cpp#1)]
 [!code-csharp[XmlDocument.XmlResolver#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDocument.XmlResolver/CS/docresolver.cs#1)]
 [!code-vb[XmlDocument.XmlResolver#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDocument.XmlResolver/VB/docresolver.vb#1)]  
  
 L'esempio Usa i seguenti file di dati come input.  
  
 `book5.xml`  
  
 [!code-xml[XmlDocument.XmlResolver#2](~/samples/snippets/xml/VS_Snippets_Data/XmlDocument.XmlResolver/XML/book5.xml#2)]  
  
 `books.dtd`  
  
 [!code-xml[XmlDocument.XmlResolver#3](~/samples/snippets/xml/VS_Snippets_Data/XmlDocument.XmlResolver/XML/books.dtd#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Questa proprietà è impostata su <see langword="null" /> e viene rilevata una DTD o un'entità esterna.</exception>
        <altmember cref="P:System.Xml.XmlUrlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
  </Members>
</Type>